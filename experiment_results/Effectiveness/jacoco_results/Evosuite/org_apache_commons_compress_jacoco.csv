package_name,class_name,method_name,method_signature,method_FEN,missed_instr,covered_instr,percentage_instr,missed_branches,covered_branches,percentage_branches,complexity,missed_lines,covered_lines,percentage_lines,missed_methods,covered_methods,percentage_methods
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZCompressorOutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.<init>(OutputStream),10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZCompressorOutputStream,<init>,"(java.io.OutputStream, int) → void","org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.<init>(OutputStream,int)",11,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZCompressorOutputStream,finish,() → void,org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.finish(),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZCompressorOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(byte[],int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZUtils$CachedAvailability,<clinit>,() → void,org.apache.commons.compress.compressors.xz.XZUtils$CachedAvailability.<clinit>(),34,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZUtils,getCachedXZAvailability,() → org.apache.commons.compress.compressors.xz.XZUtils$CachedAvailability,org.apache.commons.compress.compressors.xz.XZUtils.getCachedXZAvailability(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZUtils,getCompressedFilename,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFilename(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZUtils,getCompressedFileName,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFileName(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZUtils,getUncompressedFilename,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFilename(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZUtils,getUncompressedFileName,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFileName(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZUtils,internalIsXZCompressionAvailable,() → boolean,org.apache.commons.compress.compressors.xz.XZUtils.internalIsXZCompressionAvailable(),9,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZUtils,isCompressedFilename,(java.lang.String) → boolean,org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFilename(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZUtils,isCompressedFileName,(java.lang.String) → boolean,org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFileName(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZUtils,isXZCompressionAvailable,() → boolean,org.apache.commons.compress.compressors.xz.XZUtils.isXZCompressionAvailable(),14,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZUtils,matches,"(byte[], int) → boolean","org.apache.commons.compress.compressors.xz.XZUtils.matches(byte[],int)",25,0,0.0,6,0,0.0,4,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZUtils,setCacheXZAvailablity,(boolean) → void,org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(boolean),17,0,0.0,6,0,0.0,4,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZUtils,<clinit>,() → void,org.apache.commons.compress.compressors.xz.XZUtils.<clinit>(),61,0,0.0,2,0,0.0,2,9,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZCompressorInputStream,matches,"(byte[], int) → boolean","org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byte[],int)",25,0,0.0,6,0,0.0,4,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZCompressorInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZCompressorInputStream,<init>,"(java.io.InputStream, boolean) → void","org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream,boolean)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZCompressorInputStream,<init>,"(java.io.InputStream, boolean, int) → void","org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream,boolean,int)",29,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZCompressorInputStream,available,() → int,org.apache.commons.compress.compressors.xz.XZCompressorInputStream.available(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZCompressorInputStream,close,() → void,org.apache.commons.compress.compressors.xz.XZCompressorInputStream.close(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZCompressorInputStream,getCompressedCount,() → long,org.apache.commons.compress.compressors.xz.XZCompressorInputStream.getCompressedCount(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZCompressorInputStream,read,() → int,org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(),25,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZCompressorInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(byte[],int,int)",27,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/xz,org/apache/commons/compress/compressors/xz/XZCompressorInputStream,skip,(long) → long,org.apache.commons.compress.compressors.xz.XZCompressorInputStream.skip(long),16,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream$Data,<init>,(int) → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.<init>(int),0,92,1.0,0,0,coverage not available since no branches,1,0,22,1.0,0,1,1.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream$Data,<init>,(int) → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.<init>(int),65,0,0.0,0,0,coverage not available since no branches,1,16,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream$Data,initTT,(int) → int[],org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.initTT(int),17,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,bsGetBit,(org.apache.commons.compress.utils.BitInputStream) → boolean,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetBit(BitInputStream),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,bsGetInt,(org.apache.commons.compress.utils.BitInputStream) → int,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetInt(BitInputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,bsGetUByte,(org.apache.commons.compress.utils.BitInputStream) → char,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetUByte(BitInputStream),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,bsR,"(org.apache.commons.compress.utils.BitInputStream, int) → int","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(BitInputStream,int)",16,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,checkBounds,"(int, int, java.lang.String) → void","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.checkBounds(int,int,String)",34,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,hbCreateDecodeTables,"(int[], int[], int[], char[], int, int, int) → void","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int)",148,0,0.0,16,0,0.0,9,23,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,matches,"(byte[], int) → boolean","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byte[],int)",22,0,0.0,8,0,0.0,5,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<init>(InputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,<init>,"(java.io.InputStream, boolean) → void","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<init>(InputStream,boolean)",33,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,close,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.close(),14,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,complete,() → boolean,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.complete(),32,0,0.0,6,0,0.0,4,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,createHuffmanDecodingTables,"(int, int) → void","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(int,int)",74,0,0.0,8,0,0.0,5,20,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,endBlock,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.endBlock(),49,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,getAndMoveToFrontDecode,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(),450,0,0.0,28,0,0.0,15,101,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,getAndMoveToFrontDecode0,() → int,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode0(),73,0,0.0,2,0,0.0,2,13,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,getCompressedCount,() → long,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getCompressedCount(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,init,(boolean) → boolean,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.init(boolean),80,0,0.0,20,0,0.0,11,17,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,initBlock,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock(),103,0,0.0,30,0,0.0,16,22,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,makeMaps,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.makeMaps(),31,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,read,() → int,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(),20,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(byte[],int,int)",106,0,0.0,16,0,0.0,9,16,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,read0,() → int,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read0(),32,0,0.0,9,0,0.0,9,10,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,readNextByte,(org.apache.commons.compress.utils.BitInputStream) → int,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.readNextByte(BitInputStream),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,recvDecodingTables,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.recvDecodingTables(),228,0,0.0,34,0,0.0,18,53,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,setupBlock,() → int,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(),133,0,0.0,14,0,0.0,8,26,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,setupNoRandPartA,() → int,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(),62,0,0.0,2,0,0.0,2,14,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,setupNoRandPartB,() → int,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartB(),56,0,0.0,4,0,0.0,3,10,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,setupNoRandPartC,() → int,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartC(),35,0,0.0,2,0,0.0,2,9,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,setupRandPartA,() → int,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(),98,0,0.0,8,0,0.0,5,18,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,setupRandPartB,() → int,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB(),105,0,0.0,10,0,0.0,6,20,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream,setupRandPartC,() → int,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartC(),34,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/Rand,<init>,() → void,org.apache.commons.compress.compressors.bzip2.Rand.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/Rand,rNums,(int) → int,org.apache.commons.compress.compressors.bzip2.Rand.rNums(int),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/Rand,<clinit>,() → void,org.apache.commons.compress.compressors.bzip2.Rand.<clinit>(),2052,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2Utils,getCompressedFilename,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFilename(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2Utils,getCompressedFileName,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFileName(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2Utils,getUncompressedFilename,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFilename(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2Utils,getUncompressedFileName,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFileName(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2Utils,isCompressedFilename,(java.lang.String) → boolean,org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFilename(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2Utils,isCompressedFileName,(java.lang.String) → boolean,org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFileName(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2Utils,<clinit>,() → void,org.apache.commons.compress.compressors.bzip2.BZip2Utils.<clinit>(),36,0,0.0,0,0,coverage not available since no branches,1,8,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/CRC,<init>,() → void,org.apache.commons.compress.compressors.bzip2.CRC.<init>(),0,5,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/CRC,compute,"(int, int) → int","org.apache.commons.compress.compressors.bzip2.CRC.compute(int,int)",0,20,1.0,0,2,1.0,2,0,2,1.0,0,1,1.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/CRC,getValue,() → int,org.apache.commons.compress.compressors.bzip2.CRC.getValue(),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/CRC,reset,() → void,org.apache.commons.compress.compressors.bzip2.CRC.reset(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/CRC,update,(int) → void,org.apache.commons.compress.compressors.bzip2.CRC.update(int),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/CRC,update,"(int, int) → void","org.apache.commons.compress.compressors.bzip2.CRC.update(int,int)",0,16,1.0,0,2,1.0,2,0,5,1.0,0,1,1.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/CRC,<clinit>,() → void,org.apache.commons.compress.compressors.bzip2.CRC.<clinit>(),0,1028,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,chooseBlockSize,(long) → int,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.chooseBlockSize(long),15,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,hbAssignCodes,"(int[], byte[], int, int, int) → void","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int)",33,0,0.0,6,0,0.0,4,8,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,hbMakeCodeLengths,"(byte[], int[], org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data, int, int) → void","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],Data,int,int)",387,0,0.0,40,0,0.0,21,88,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<init>(OutputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,<init>,"(java.io.OutputStream, int) → void","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<init>(OutputStream,int)",0,59,1.0,0,4,1.0,3,0,11,1.0,0,1,1.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,blockSort,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSort(),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,bsFinishedWithStream,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsFinishedWithStream(),26,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,bsPutInt,(int) → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutInt(int),31,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,bsPutUByte,(int) → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutUByte(int),0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,bsW,"(int, int) → void","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(int,int)",0,40,1.0,0,2,1.0,2,0,10,1.0,0,1,1.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,close,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.close(),8,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,endBlock,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endBlock(),56,0,0.0,2,0,0.0,2,16,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,endCompression,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endCompression(),25,0,0.0,0,0,coverage not available since no branches,1,9,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,finish,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finish(),22,0,0.0,4,0,0.0,3,9,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,flush,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.flush(),6,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,generateMTFValues,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.generateMTFValues(),244,0,0.0,24,0,0.0,13,66,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,getBlockSize,() → int,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.getBlockSize(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,init,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.init(),0,35,1.0,0,0,coverage not available since no branches,1,0,9,1.0,0,1,1.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,initBlock,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.initBlock(),0,21,1.0,0,2,1.0,2,0,6,1.0,0,1,1.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,moveToFrontCodeAndSend,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.moveToFrontCodeAndSend(),11,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,sendMTFValues,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues(),85,0,0.0,12,0,0.0,7,17,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,sendMTFValues0,"(int, int) → void","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues0(int,int)",105,0,0.0,20,0,0.0,11,20,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,sendMTFValues1,"(int, int) → int","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(int,int)",333,0,0.0,26,0,0.0,14,72,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,sendMTFValues2,"(int, int) → void","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues2(int,int)",61,0,0.0,6,0,0.0,4,17,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,sendMTFValues3,"(int, int) → void","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues3(int,int)",56,0,0.0,8,0,0.0,5,15,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,sendMTFValues4,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues4(),124,0,0.0,20,0,0.0,11,29,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,sendMTFValues5,"(int, int) → void","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(int,int)",88,0,0.0,8,0,0.0,5,22,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,sendMTFValues6,"(int, int) → void","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues6(int,int)",150,0,0.0,16,0,0.0,9,39,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,sendMTFValues7,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues7(),116,0,0.0,6,0,0.0,4,32,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(byte[],int,int)",78,0,0.0,8,0,0.0,5,10,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,write,(int) → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(int),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,write0,(int) → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write0(int),18,33,0.6470588235294118,3,3,0.5,4,4,9,0.6923076923076923,0,1,1.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream,writeRun,() → void,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun(),98,46,0.3194444444444444,4,2,0.3333333333333333,5,22,14,0.3888888888888889,0,1,1.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BlockSort,med3,"(int, int, int) → int","org.apache.commons.compress.compressors.bzip2.BlockSort.med3(int,int,int)",27,0,0.0,10,0,0.0,6,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BlockSort,vswap,"(int[], int, int, int) → void","org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(int[],int,int,int)",25,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BlockSort,<init>,(org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data) → void,org.apache.commons.compress.compressors.bzip2.BlockSort.<init>(Data),0,35,1.0,0,0,coverage not available since no branches,1,0,10,1.0,0,1,1.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BlockSort,blockSort,"(org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data, int) → void","org.apache.commons.compress.compressors.bzip2.BlockSort.blockSort(Data,int)",59,0,0.0,10,0,0.0,6,15,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BlockSort,fallbackQSort3,"(int[], int[], int, int) → void","org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(int[],int[],int,int)",250,0,0.0,26,0,0.0,14,61,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BlockSort,fallbackSimpleSort,"(int[], int[], int, int) → void","org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(int[],int[],int,int)",104,0,0.0,16,0,0.0,9,16,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BlockSort,fallbackSort,"(org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data, int) → void","org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(Data,int)",58,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BlockSort,fallbackSort,"(int[], byte[], int) → void","org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(int[],byte[],int)",242,0,0.0,32,0,0.0,17,53,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BlockSort,fpop,(int) → int[],org.apache.commons.compress.compressors.bzip2.BlockSort.fpop(int),17,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BlockSort,fpush,"(int, int, int) → void","org.apache.commons.compress.compressors.bzip2.BlockSort.fpush(int,int,int)",11,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BlockSort,fswap,"(int[], int, int) → void","org.apache.commons.compress.compressors.bzip2.BlockSort.fswap(int[],int,int)",15,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BlockSort,fvswap,"(int[], int, int, int) → void","org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(int[],int,int,int)",12,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BlockSort,getEclass,() → int[],org.apache.commons.compress.compressors.bzip2.BlockSort.getEclass(),14,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BlockSort,mainQSort3,"(org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data, int, int, int, int) → void","org.apache.commons.compress.compressors.bzip2.BlockSort.mainQSort3(Data,int,int,int,int)",312,0,0.0,24,0,0.0,13,69,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BlockSort,mainSimpleSort,"(org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data, int, int, int, int) → boolean","org.apache.commons.compress.compressors.bzip2.BlockSort.mainSimpleSort(Data,int,int,int,int)",521,0,0.0,92,0,0.0,47,88,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BlockSort,mainSort,"(org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data, int) → void","org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(Data,int)",521,0,0.0,50,0,0.0,26,81,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/bzip2,org/apache/commons/compress/compressors/bzip2/BlockSort,<clinit>,() → void,org.apache.commons.compress.compressors.bzip2.BlockSort.<clinit>(),0,64,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveOutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.<init>(OutputStream),0,7,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveOutputStream,checkLength,"(java.lang.String, int, java.lang.String) → java.lang.String","org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.checkLength(String,int,String)",12,6,0.3333333333333333,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveOutputStream,close,() → void,org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.close(),11,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveOutputStream,closeArchiveEntry,() → void,org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.closeArchiveEntry(),9,23,0.71875,3,3,0.5,4,2,5,0.7142857142857143,0,1,1.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveOutputStream,createArchiveEntry,"(java.io.File, java.lang.String) → org.apache.commons.compress.archivers.ar.ArArchiveEntry","org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(File,String)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveOutputStream,createArchiveEntry,"(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) → org.apache.commons.compress.archivers.ar.ArArchiveEntry","org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveOutputStream,finish,() → void,org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finish(),13,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveOutputStream,pad,"(int, int, char) → int","org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.pad(int,int,char)",0,18,1.0,1,3,0.75,3,0,5,1.0,0,1,1.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveOutputStream,putArchiveEntry,(org.apache.commons.compress.archivers.ar.ArArchiveEntry) → void,org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(ArArchiveEntry),0,55,1.0,1,5,0.8333333333333334,4,0,12,1.0,0,1,1.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveOutputStream,setLongFileMode,(int) → void,org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.setLongFileMode(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(byte[],int,int)",0,17,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveOutputStream,write,(java.lang.String) → int,org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(String),0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveOutputStream,writeArchiveHeader,() → byte[],org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeArchiveHeader(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveOutputStream,writeEntryHeader,(org.apache.commons.compress.archivers.ar.ArArchiveEntry) → int,org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(ArArchiveEntry),62,140,0.693069306930693,11,5,0.3125,9,8,21,0.7241379310344828,0,1,1.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveEntry,<init>,"(java.io.File, java.lang.String) → void","org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(File,String)",1,17,0.9444444444444444,1,1,0.5,2,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveEntry,<init>,"(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) → void","org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(Path,String,LinkOption[])",21,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveEntry,<init>,"(java.lang.String, long) → void","org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long)",0,11,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveEntry,<init>,"(java.lang.String, long, int, int, int, long) → void","org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long,int,int,int,long)",5,25,0.8333333333333334,1,1,0.5,2,1,9,0.9,0,1,1.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveEntry,equals,(java.lang.Object) → boolean,org.apache.commons.compress.archivers.ar.ArArchiveEntry.equals(Object),23,0,0.0,6,0,0.0,4,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveEntry,getGroupId,() → int,org.apache.commons.compress.archivers.ar.ArArchiveEntry.getGroupId(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveEntry,getLastModified,() → long,org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModified(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveEntry,getLastModifiedDate,() → java.util.Date,org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModifiedDate(),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveEntry,getLength,() → long,org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLength(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveEntry,getMode,() → int,org.apache.commons.compress.archivers.ar.ArArchiveEntry.getMode(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveEntry,getName,() → java.lang.String,org.apache.commons.compress.archivers.ar.ArArchiveEntry.getName(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveEntry,getSize,() → long,org.apache.commons.compress.archivers.ar.ArArchiveEntry.getSize(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveEntry,getUserId,() → int,org.apache.commons.compress.archivers.ar.ArArchiveEntry.getUserId(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveEntry,hashCode,() → int,org.apache.commons.compress.archivers.ar.ArArchiveEntry.hashCode(),9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveEntry,isDirectory,() → boolean,org.apache.commons.compress.archivers.ar.ArArchiveEntry.isDirectory(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveInputStream,isBSDLongName,(java.lang.String) → boolean,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isBSDLongName(String),11,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveInputStream,isGNUStringTable,(java.lang.String) → boolean,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNUStringTable(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveInputStream,matches,"(byte[], int) → boolean","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byte[],int)",47,0,0.0,18,0,0.0,10,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.<init>(InputStream),13,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveInputStream,asInt,"(byte[], int, int) → int","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveInputStream,asInt,"(byte[], int, int, boolean) → int","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,boolean)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveInputStream,asInt,"(byte[], int, int, int) → int","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveInputStream,asInt,"(byte[], int, int, int, boolean) → int","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int,boolean)",17,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveInputStream,asLong,"(byte[], int, int) → long","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[],int,int)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveInputStream,close,() → void,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.close(),13,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveInputStream,getBSDLongName,(java.lang.String) → java.lang.String,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getBSDLongName(String),27,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveInputStream,getExtendedName,(int) → java.lang.String,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getExtendedName(int),64,0,0.0,14,0,0.0,8,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveInputStream,getNextArEntry,() → org.apache.commons.compress.archivers.ar.ArArchiveEntry,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(),311,0,0.0,30,0,0.0,16,59,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveInputStream,getNextEntry,() → org.apache.commons.compress.archivers.ar.ArArchiveEntry,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextEntry(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveInputStream,isGNULongName,(java.lang.String) → boolean,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNULongName(String),11,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(byte[],int,int)",50,0,0.0,8,0,0.0,5,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveInputStream,readGNUStringTable,"(byte[], int, int) → org.apache.commons.compress.archivers.ar.ArArchiveEntry","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(byte[],int,int)",54,0,0.0,2,0,0.0,2,10,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveInputStream,trackReadBytes,(long) → void,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.trackReadBytes(long),14,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/ar,org/apache/commons/compress/archivers/ar/ArArchiveInputStream,<clinit>,() → void,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.<clinit>(),0,10,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress,org/apache/commons/compress/CompressFilterOutputStream,write,"(java.io.OutputStream, java.lang.String, java.nio.charset.Charset) → byte[]","org.apache.commons.compress.CompressFilterOutputStream.write(OutputStream,String,Charset)",0,9,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress,org/apache/commons/compress/CompressFilterOutputStream,<init>,() → void,org.apache.commons.compress.CompressFilterOutputStream.<init>(),0,9,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress,org/apache/commons/compress/CompressFilterOutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.CompressFilterOutputStream.<init>(OutputStream),0,9,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress,org/apache/commons/compress/CompressFilterOutputStream,checkOpen,() → void,org.apache.commons.compress.CompressFilterOutputStream.checkOpen(),5,4,0.4444444444444444,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/compress,org/apache/commons/compress/CompressFilterOutputStream,close,() → void,org.apache.commons.compress.CompressFilterOutputStream.close(),0,9,1.0,1,1,0.5,2,0,3,1.0,0,1,1.0
org/apache/commons/compress,org/apache/commons/compress/CompressFilterOutputStream,finish,() → void,org.apache.commons.compress.CompressFilterOutputStream.finish(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress,org/apache/commons/compress/CompressFilterOutputStream,isClosed,() → boolean,org.apache.commons.compress.CompressFilterOutputStream.isClosed(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress,org/apache/commons/compress/CompressFilterOutputStream,isFinished,() → boolean,org.apache.commons.compress.CompressFilterOutputStream.isFinished(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress,org/apache/commons/compress/CompressFilterOutputStream,out,() → java.io.OutputStream,org.apache.commons.compress.CompressFilterOutputStream.out(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress,org/apache/commons/compress/CompressFilterOutputStream,write,(java.io.File) → long,org.apache.commons.compress.CompressFilterOutputStream.write(File),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress,org/apache/commons/compress/CompressFilterOutputStream,write,(java.nio.file.Path) → long,org.apache.commons.compress.CompressFilterOutputStream.write(Path),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress,org/apache/commons/compress/CompressFilterOutputStream,writeUsAscii,(java.lang.String) → byte[],org.apache.commons.compress.CompressFilterOutputStream.writeUsAscii(String),0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress,org/apache/commons/compress/CompressFilterOutputStream,writeUsAsciiRaw,(java.lang.String) → byte[],org.apache.commons.compress.CompressFilterOutputStream.writeUsAsciiRaw(String),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress,org/apache/commons/compress/CompressFilterOutputStream,writeUtf8,(java.lang.String) → byte[],org.apache.commons.compress.CompressFilterOutputStream.writeUtf8(String),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress,org/apache/commons/compress/PasswordRequiredException,<init>,(java.lang.String) → void,org.apache.commons.compress.PasswordRequiredException.<init>(String),13,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress,org/apache/commons/compress/MemoryLimitException,buildMessage,"(long, int) → java.lang.String","org.apache.commons.compress.MemoryLimitException.buildMessage(long,int)",15,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress,org/apache/commons/compress/MemoryLimitException,<init>,"(long, int) → void","org.apache.commons.compress.MemoryLimitException.<init>(long,int)",12,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress,org/apache/commons/compress/MemoryLimitException,<init>,"(long, int, java.lang.Exception) → void","org.apache.commons.compress.MemoryLimitException.<init>(long,int,Exception)",13,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress,org/apache/commons/compress/MemoryLimitException,<init>,"(long, int, java.lang.Throwable) → void","org.apache.commons.compress.MemoryLimitException.<init>(long,int,Throwable)",13,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress,org/apache/commons/compress/MemoryLimitException,getMemoryLimitInKb,() → int,org.apache.commons.compress.MemoryLimitException.getMemoryLimitInKb(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress,org/apache/commons/compress/MemoryLimitException,getMemoryNeededInKb,() → long,org.apache.commons.compress.MemoryLimitException.getMemoryNeededInKb(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/jar,org/apache/commons/compress/archivers/jar/JarArchiveInputStream,matches,"(byte[], int) → boolean","org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byte[],int)",4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/jar,org/apache/commons/compress/archivers/jar/JarArchiveInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.archivers.jar.JarArchiveInputStream.<init>(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/jar,org/apache/commons/compress/archivers/jar/JarArchiveInputStream,<init>,"(java.io.InputStream, java.lang.String) → void","org.apache.commons.compress.archivers.jar.JarArchiveInputStream.<init>(InputStream,String)",5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/jar,org/apache/commons/compress/archivers/jar/JarArchiveInputStream,getNextEntry,() → org.apache.commons.compress.archivers.jar.JarArchiveEntry,org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextEntry(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/jar,org/apache/commons/compress/archivers/jar/JarArchiveInputStream,getNextJarEntry,() → org.apache.commons.compress.archivers.jar.JarArchiveEntry,org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextJarEntry(),12,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/jar,org/apache/commons/compress/archivers/jar/JarArchiveOutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.<init>(OutputStream),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/jar,org/apache/commons/compress/archivers/jar/JarArchiveOutputStream,<init>,"(java.io.OutputStream, java.lang.String) → void","org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.<init>(OutputStream,String)",7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/jar,org/apache/commons/compress/archivers/jar/JarArchiveOutputStream,putArchiveEntry,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → void,org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.putArchiveEntry(ZipArchiveEntry),13,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/jar,org/apache/commons/compress/archivers/jar/JarArchiveEntry,<init>,(java.util.jar.JarEntry) → void,org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>(JarEntry),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/jar,org/apache/commons/compress/archivers/jar/JarArchiveEntry,<init>,(java.lang.String) → void,org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/jar,org/apache/commons/compress/archivers/jar/JarArchiveEntry,<init>,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → void,org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>(ZipArchiveEntry),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/jar,org/apache/commons/compress/archivers/jar/JarArchiveEntry,<init>,(java.util.zip.ZipEntry) → void,org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>(ZipEntry),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/jar,org/apache/commons/compress/archivers/jar/JarArchiveEntry,getCertificates,() → java.security.cert.Certificate[],org.apache.commons.compress.archivers.jar.JarArchiveEntry.getCertificates(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/jar,org/apache/commons/compress/archivers/jar/JarArchiveEntry,getManifestAttributes,() → java.util.jar.Attributes,org.apache.commons.compress.archivers.jar.JarArchiveEntry.getManifestAttributes(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/LocalFileHeader$FileTypes,<init>,() → void,org.apache.commons.compress.archivers.arj.LocalFileHeader$FileTypes.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/LocalFileHeader$Flags,<init>,() → void,org.apache.commons.compress.archivers.arj.LocalFileHeader$Flags.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/MainHeader$Flags,<init>,() → void,org.apache.commons.compress.archivers.arj.MainHeader$Flags.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveInputStream,matches,"(byte[], int) → boolean","org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.matches(byte[],int)",21,0,0.0,6,0,0.0,4,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.<init>(InputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveInputStream,<init>,"(java.io.InputStream, java.lang.String) → void","org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.<init>(InputStream,String)",49,0,0.0,4,0,0.0,3,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveInputStream,canReadEntryData,(org.apache.commons.compress.archivers.ArchiveEntry) → boolean,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.canReadEntryData(ArchiveEntry),11,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveInputStream,close,() → void,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.close(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveInputStream,getArchiveComment,() → java.lang.String,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getArchiveComment(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveInputStream,getArchiveName,() → java.lang.String,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getArchiveName(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveInputStream,getNextEntry,() → org.apache.commons.compress.archivers.arj.ArjArchiveEntry,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry(),77,0,0.0,6,0,0.0,4,23,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(byte[],int,int)",37,0,0.0,6,0,0.0,4,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveInputStream,read16,(java.io.DataInputStream) → int,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read16(DataInputStream),11,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveInputStream,read32,(java.io.DataInputStream) → int,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read32(DataInputStream),9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveInputStream,read8,(java.io.DataInputStream) → int,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read8(DataInputStream),8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveInputStream,readExtraData,"(int, java.io.DataInputStream, org.apache.commons.compress.archivers.arj.LocalFileHeader) → void","org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(int,DataInputStream,LocalFileHeader)",33,0,0.0,4,0,0.0,3,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveInputStream,readHeader,() → byte[],org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readHeader(),66,0,0.0,12,0,0.0,7,18,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveInputStream,readLocalFileHeader,() → org.apache.commons.compress.archivers.arj.LocalFileHeader,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(),197,0,0.0,6,0,0.0,4,40,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveInputStream,readMainHeader,() → org.apache.commons.compress.archivers.arj.MainHeader,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(),186,0,0.0,8,0,0.0,5,41,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveInputStream,readRange,"(java.io.InputStream, int) → byte[]","org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readRange(InputStream,int)",18,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveInputStream,readString,(java.io.DataInputStream) → java.lang.String,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readString(DataInputStream),23,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/MainHeader$HostOS,<init>,() → void,org.apache.commons.compress.archivers.arj.MainHeader$HostOS.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveEntry,<init>,() → void,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.<init>(),8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveEntry,<init>,(org.apache.commons.compress.archivers.arj.LocalFileHeader) → void,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.<init>(LocalFileHeader),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveEntry,equals,(java.lang.Object) → boolean,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.equals(Object),23,0,0.0,6,0,0.0,4,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveEntry,getHostOs,() → int,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getHostOs(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveEntry,getLastModifiedDate,() → java.util.Date,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getLastModifiedDate(),23,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveEntry,getMethod,() → int,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getMethod(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveEntry,getMode,() → int,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getMode(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveEntry,getName,() → java.lang.String,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getName(),17,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveEntry,getSize,() → long,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getSize(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveEntry,getUnixMode,() → int,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getUnixMode(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveEntry,hashCode,() → int,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.hashCode(),10,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveEntry,isDirectory,() → boolean,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isDirectory(),9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveEntry,isHostOsUnix,() → boolean,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isHostOsUnix(),12,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/LocalFileHeader,<init>,() → void,org.apache.commons.compress.archivers.arj.LocalFileHeader.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/LocalFileHeader,equals,(java.lang.Object) → boolean,org.apache.commons.compress.archivers.arj.LocalFileHeader.equals(Object),137,0,0.0,50,0,0.0,26,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/LocalFileHeader,hashCode,() → int,org.apache.commons.compress.archivers.arj.LocalFileHeader.hashCode(),9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/LocalFileHeader,toString,() → java.lang.String,org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(),210,0,0.0,0,0,coverage not available since no branches,1,47,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/ArjArchiveEntry$HostOs,<init>,() → void,org.apache.commons.compress.archivers.arj.ArjArchiveEntry$HostOs.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/MainHeader,<init>,() → void,org.apache.commons.compress.archivers.arj.MainHeader.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/MainHeader,toString,() → java.lang.String,org.apache.commons.compress.archivers.arj.MainHeader.toString(),192,0,0.0,0,0,coverage not available since no branches,1,43,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/arj,org/apache/commons/compress/archivers/arj/LocalFileHeader$Methods,<init>,() → void,org.apache.commons.compress.archivers.arj.LocalFileHeader$Methods.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IntList,<init>,() → void,org.apache.commons.compress.harmony.pack200.IntList.<init>(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IntList,<init>,(int) → void,org.apache.commons.compress.harmony.pack200.IntList.<init>(int),4,15,0.7894736842105263,1,1,0.5,2,1,5,0.8333333333333334,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IntList,add,(int) → boolean,org.apache.commons.compress.harmony.pack200.IntList.add(int),28,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IntList,add,"(int, int) → void","org.apache.commons.compress.harmony.pack200.IntList.add(int,int)",0,143,1.0,0,22,1.0,12,0,21,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IntList,addAll,(org.apache.commons.compress.harmony.pack200.IntList) → void,org.apache.commons.compress.harmony.pack200.IntList.addAll(IntList),19,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IntList,clear,() → void,org.apache.commons.compress.harmony.pack200.IntList.clear(),26,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IntList,get,(int) → int,org.apache.commons.compress.harmony.pack200.IntList.get(int),30,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IntList,growAtEnd,(int) → void,org.apache.commons.compress.harmony.pack200.IntList.growAtEnd(int),38,42,0.525,8,2,0.2,6,11,9,0.45,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IntList,growAtFront,(int) → void,org.apache.commons.compress.harmony.pack200.IntList.growAtFront(int),45,44,0.4943820224719101,7,3,0.3,6,11,9,0.45,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IntList,growForInsert,"(int, int) → void","org.apache.commons.compress.harmony.pack200.IntList.growForInsert(int,int)",2,63,0.9692307692307692,2,2,0.5,3,1,13,0.9285714285714286,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IntList,increment,(int) → void,org.apache.commons.compress.harmony.pack200.IntList.increment(int),34,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IntList,isEmpty,() → boolean,org.apache.commons.compress.harmony.pack200.IntList.isEmpty(),2,7,0.7777777777777778,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IntList,remove,(int) → int,org.apache.commons.compress.harmony.pack200.IntList.remove(int),142,0,0.0,12,0,0.0,7,20,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IntList,size,() → int,org.apache.commons.compress.harmony.pack200.IntList.size(),0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IntList,toArray,() → int[],org.apache.commons.compress.harmony.pack200.IntList.toArray(),19,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentAnnotationVisitor,<init>,"(org.apache.commons.compress.harmony.pack200.Segment, int) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.<init>(Segment,int)",51,0,0.0,0,0,coverage not available since no branches,1,13,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentAnnotationVisitor,<init>,"(org.apache.commons.compress.harmony.pack200.Segment, int, int, java.lang.String, boolean) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.<init>(Segment,int,int,String,boolean)",60,0,0.0,0,0,coverage not available since no branches,1,16,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentAnnotationVisitor,<init>,"(org.apache.commons.compress.harmony.pack200.Segment, int, java.lang.String, boolean) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.<init>(Segment,int,String,boolean)",57,0,0.0,0,0,coverage not available since no branches,1,15,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentAnnotationVisitor,visit,"(java.lang.String, java.lang.Object) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visit(String,Object)",18,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentAnnotationVisitor,visitAnnotation,"(java.lang.String, java.lang.String) → org.objectweb.asm.AnnotationVisitor","org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitAnnotation(String,String)",34,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentAnnotationVisitor,visitArray,(java.lang.String) → org.objectweb.asm.AnnotationVisitor,org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitArray(String),34,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentAnnotationVisitor,visitEnd,() → void,org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitEnd(),76,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentAnnotationVisitor,visitEnum,"(java.lang.String, java.lang.String, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitEnum(String,String,String)",25,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,<init>,"(org.apache.commons.compress.harmony.pack200.Segment, int) → void","org.apache.commons.compress.harmony.pack200.CpBands.<init>(Segment,int)",194,0,0.0,0,0,coverage not available since no branches,1,40,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,addCharacters,"(java.util.List, char[]) → void","org.apache.commons.compress.harmony.pack200.CpBands.addCharacters(List,char[])",22,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,addCPClass,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.CpBands.addCPClass(String),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,addCPUtf8,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.CpBands.addCPUtf8(String),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,addIndices,() → void,org.apache.commons.compress.harmony.pack200.CpBands.addIndices(),116,0,0.0,4,0,0.0,3,14,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,existsCpClass,(java.lang.String) → boolean,org.apache.commons.compress.harmony.pack200.CpBands.existsCpClass(String),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,finaliseBands,() → void,org.apache.commons.compress.harmony.pack200.CpBands.finaliseBands(),80,0,0.0,0,0,coverage not available since no branches,1,16,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,getConstant,(java.lang.Object) → org.apache.commons.compress.harmony.pack200.CPConstant,org.apache.commons.compress.harmony.pack200.CpBands.getConstant(Object),161,0,0.0,18,0,0.0,10,27,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,getCPClass,(java.lang.String) → org.apache.commons.compress.harmony.pack200.CPClass,org.apache.commons.compress.harmony.pack200.CpBands.getCPClass(String),47,0,0.0,6,0,0.0,4,12,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,getCPField,"(org.apache.commons.compress.harmony.pack200.CPClass, java.lang.String, java.lang.String) → org.apache.commons.compress.harmony.pack200.CPMethodOrField","org.apache.commons.compress.harmony.pack200.CpBands.getCPField(CPClass,String,String)",48,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,getCPField,"(java.lang.String, java.lang.String, java.lang.String) → org.apache.commons.compress.harmony.pack200.CPMethodOrField","org.apache.commons.compress.harmony.pack200.CpBands.getCPField(String,String,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,getCPIMethod,"(org.apache.commons.compress.harmony.pack200.CPClass, java.lang.String, java.lang.String) → org.apache.commons.compress.harmony.pack200.CPMethodOrField","org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(CPClass,String,String)",48,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,getCPIMethod,"(java.lang.String, java.lang.String, java.lang.String) → org.apache.commons.compress.harmony.pack200.CPMethodOrField","org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(String,String,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,getCPMethod,"(org.apache.commons.compress.harmony.pack200.CPClass, java.lang.String, java.lang.String) → org.apache.commons.compress.harmony.pack200.CPMethodOrField","org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(CPClass,String,String)",48,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,getCPMethod,"(java.lang.String, java.lang.String, java.lang.String) → org.apache.commons.compress.harmony.pack200.CPMethodOrField","org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(String,String,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,getCPNameAndType,"(java.lang.String, java.lang.String) → org.apache.commons.compress.harmony.pack200.CPNameAndType","org.apache.commons.compress.harmony.pack200.CpBands.getCPNameAndType(String,String)",42,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,getCPSignature,(java.lang.String) → org.apache.commons.compress.harmony.pack200.CPSignature,org.apache.commons.compress.harmony.pack200.CpBands.getCPSignature(String),187,0,0.0,30,0,0.0,16,40,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,getCPUtf8,(java.lang.String) → org.apache.commons.compress.harmony.pack200.CPUTF8,org.apache.commons.compress.harmony.pack200.CpBands.getCPUtf8(String),30,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,pack,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.CpBands.pack(OutputStream),48,0,0.0,0,0,coverage not available since no branches,1,14,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,removeCpUtf8,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.CpBands.removeCpUtf8(String),24,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,removeSignaturesFromCpUTF8,() → void,org.apache.commons.compress.harmony.pack200.CpBands.removeSignaturesFromCpUTF8(),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,writeCpClass,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.CpBands.writeCpClass(OutputStream),65,0,0.0,2,0,0.0,2,11,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,writeCpDescr,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.CpBands.writeCpDescr(OutputStream),101,0,0.0,2,0,0.0,2,16,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,writeCpDouble,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.CpBands.writeCpDouble(OutputStream),107,0,0.0,2,0,0.0,2,17,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,writeCpFloat,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.CpBands.writeCpFloat(OutputStream),66,0,0.0,2,0,0.0,2,11,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,writeCpInt,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.CpBands.writeCpInt(OutputStream),65,0,0.0,2,0,0.0,2,11,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,writeCpLong,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.CpBands.writeCpLong(OutputStream),106,0,0.0,2,0,0.0,2,17,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,writeCpMethodOrField,"(java.util.Set, java.io.OutputStream, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.CpBands.writeCpMethodOrField(Set,OutputStream,String)",119,0,0.0,2,0,0.0,2,16,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,writeCpSignature,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.CpBands.writeCpSignature(OutputStream),108,0,0.0,2,0,0.0,2,18,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,writeCpString,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.CpBands.writeCpString(OutputStream),65,0,0.0,2,0,0.0,2,11,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,writeCpUtf8,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.CpBands.writeCpUtf8(OutputStream),348,0,0.0,12,0,0.0,7,54,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,lambda$writeCpUtf8$6,"(java.util.List, int) → int","org.apache.commons.compress.harmony.pack200.CpBands.lambda$writeCpUtf8$6(List,int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,lambda$writeCpUtf8$5,"(java.util.List, int) → int","org.apache.commons.compress.harmony.pack200.CpBands.lambda$writeCpUtf8$5(List,int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,lambda$writeCpSignature$4,"(java.util.List, int) → int","org.apache.commons.compress.harmony.pack200.CpBands.lambda$writeCpSignature$4(List,int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,lambda$removeSignaturesFromCpUTF8$3,(org.apache.commons.compress.harmony.pack200.CPSignature) → void,org.apache.commons.compress.harmony.pack200.CpBands.lambda$removeSignaturesFromCpUTF8$3(CPSignature),17,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,lambda$addIndices$2,"(java.util.Map, java.util.function.BiFunction, java.util.Map, org.apache.commons.compress.harmony.pack200.CPMethodOrField) → void","org.apache.commons.compress.harmony.pack200.CpBands.lambda$addIndices$2(Map,BiFunction,Map,CPMethodOrField)",30,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,lambda$addIndices$1,"(java.util.Map, java.util.function.BiFunction, org.apache.commons.compress.harmony.pack200.CPMethodOrField) → void","org.apache.commons.compress.harmony.pack200.CpBands.lambda$addIndices$1(Map,BiFunction,CPMethodOrField)",12,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CpBands,lambda$addIndices$0,"(org.apache.commons.compress.harmony.pack200.CPClass, java.lang.Integer) → java.lang.Integer","org.apache.commons.compress.harmony.pack200.CpBands.lambda$addIndices$0(CPClass,Integer)",10,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPFloat,<init>,(float) → void,org.apache.commons.compress.harmony.pack200.CPFloat.<init>(float),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPFloat,compareTo,(org.apache.commons.compress.harmony.pack200.CPFloat) → int,org.apache.commons.compress.harmony.pack200.CPFloat.compareTo(CPFloat),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPFloat,getFloat,() → float,org.apache.commons.compress.harmony.pack200.CPFloat.getFloat(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Integral,<init>,"(org.apache.commons.compress.harmony.pack200.NewAttributeBands, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.<init>(NewAttributeBands,String)",20,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Integral,<init>,"(org.apache.commons.compress.harmony.pack200.NewAttributeBands, java.lang.String, org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.<init>(NewAttributeBands,String,Integral)",23,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Integral,addAttributeToBand,"(org.apache.commons.compress.harmony.pack200.NewAttribute, java.io.InputStream) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.addAttributeToBand(NewAttribute,InputStream)",173,0,0.0,17,0,0.0,12,38,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Integral,getTag,() → java.lang.String,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.getTag(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Integral,latestValue,() → int,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.latestValue(),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Integral,pack,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.pack(OutputStream),42,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Integral,renumberBci,"(org.apache.commons.compress.harmony.pack200.IntList, java.util.Map) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.renumberBci(IntList,Map)",65,0,0.0,12,0,0.0,7,12,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Integral,renumberOffsetBci,"(java.util.List, org.apache.commons.compress.harmony.pack200.IntList, java.util.Map) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.renumberOffsetBci(List,IntList,Map)",50,0,0.0,6,0,0.0,4,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CodecEncoding,<init>,() → void,org.apache.commons.compress.harmony.pack200.CodecEncoding.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CodecEncoding,getCanonicalCodec,(int) → org.apache.commons.compress.harmony.pack200.BHSDCodec,org.apache.commons.compress.harmony.pack200.CodecEncoding.getCanonicalCodec(int),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CodecEncoding,getCodec,"(int, java.io.InputStream, org.apache.commons.compress.harmony.pack200.Codec) → org.apache.commons.compress.harmony.pack200.Codec","org.apache.commons.compress.harmony.pack200.CodecEncoding.getCodec(int,InputStream,Codec)",355,0,0.0,54,0,0.0,28,54,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CodecEncoding,getSpecifier,"(org.apache.commons.compress.harmony.pack200.Codec, org.apache.commons.compress.harmony.pack200.Codec) → int[]","org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifier(Codec,Codec)",475,0,0.0,60,0,0.0,31,84,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CodecEncoding,getSpecifierForDefaultCodec,(org.apache.commons.compress.harmony.pack200.BHSDCodec) → int,org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifierForDefaultCodec(BHSDCodec),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CodecEncoding,<clinit>,() → void,org.apache.commons.compress.harmony.pack200.CodecEncoding.<clinit>(),0,1123,1.0,0,2,1.0,2,0,7,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IcBands,<init>,"(org.apache.commons.compress.harmony.pack200.SegmentHeader, org.apache.commons.compress.harmony.pack200.CpBands, int) → void","org.apache.commons.compress.harmony.pack200.IcBands.<init>(SegmentHeader,CpBands,int)",0,18,1.0,0,0,coverage not available since no branches,1,0,5,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IcBands,addInnerClass,"(java.lang.String, java.lang.String, java.lang.String, int) → void","org.apache.commons.compress.harmony.pack200.IcBands.addInnerClass(String,String,String,int)",93,0,0.0,8,0,0.0,5,17,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IcBands,addToMap,"(java.lang.String, org.apache.commons.compress.harmony.pack200.IcBands$IcTuple) → void","org.apache.commons.compress.harmony.pack200.IcBands.addToMap(String,IcTuple)",40,0,0.0,6,0,0.0,4,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IcBands,finaliseBands,() → void,org.apache.commons.compress.harmony.pack200.IcBands.finaliseBands(),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IcBands,getIcTuple,(org.apache.commons.compress.harmony.pack200.CPClass) → org.apache.commons.compress.harmony.pack200.IcBands$IcTuple,org.apache.commons.compress.harmony.pack200.IcBands.getIcTuple(CPClass),21,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IcBands,getInnerClassesForOuter,(java.lang.String) → java.util.List,org.apache.commons.compress.harmony.pack200.IcBands.getInnerClassesForOuter(String),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IcBands,getOuter,(java.lang.String) → java.lang.String,org.apache.commons.compress.harmony.pack200.IcBands.getOuter(String),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IcBands,namesArePredictable,"(java.lang.String, java.lang.String, java.lang.String) → boolean","org.apache.commons.compress.harmony.pack200.IcBands.namesArePredictable(String,String,String)",22,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IcBands,pack,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.IcBands.pack(OutputStream),159,30,0.15873015873015872,8,0,0.0,5,20,8,0.2857142857142857,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentAnnotationVisitor$1,<init>,"(org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor, int, org.objectweb.asm.AnnotationVisitor) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor$1.<init>(SegmentAnnotationVisitor,int,AnnotationVisitor)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentAnnotationVisitor$1,visit,"(java.lang.String, java.lang.Object) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor$1.visit(String,Object)",40,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentAnnotationVisitor$1,visitAnnotation,"(java.lang.String, java.lang.String) → org.objectweb.asm.AnnotationVisitor","org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor$1.visitAnnotation(String,String)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentAnnotationVisitor$1,visitArray,(java.lang.String) → org.objectweb.asm.AnnotationVisitor,org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor$1.visitArray(String),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentAnnotationVisitor$1,visitEnd,() → void,org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor$1.visitEnd(),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentAnnotationVisitor$1,visitEnum,"(java.lang.String, java.lang.String, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor$1.visitEnum(String,String,String)",47,0,0.0,0,0,coverage not available since no branches,1,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive$SegmentUnit,<init>,"(java.util.List, java.util.List) → void","org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.<init>(List,List)",34,0,0.0,0,0,coverage not available since no branches,1,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive$SegmentUnit,addPackedByteAmount,(int) → void,org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.addPackedByteAmount(int),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive$SegmentUnit,classListSize,() → int,org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.classListSize(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive$SegmentUnit,fileListSize,() → int,org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.fileListSize(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive$SegmentUnit,getByteAmount,() → int,org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.getByteAmount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive$SegmentUnit,getClassList,() → java.util.List,org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.getClassList(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive$SegmentUnit,getFileList,() → java.util.List,org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.getFileList(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive$SegmentUnit,getPackedByteAmount,() → int,org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.getPackedByteAmount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive$SegmentUnit,lambda$new$1,(org.apache.commons.compress.harmony.pack200.Archive$PackingFile) → int,org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.lambda$new$1(PackingFile),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive$SegmentUnit,lambda$new$0,(org.apache.commons.compress.harmony.pack200.Pack200ClassReader) → int,org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.lambda$new$0(Pack200ClassReader),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CanonicalCodecFamilies,<init>,() → void,org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CanonicalCodecFamilies,<clinit>,() → void,org.apache.commons.compress.harmony.pack200.CanonicalCodecFamilies.<clinit>(),628,0,0.0,0,0,coverage not available since no branches,1,115,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute$StripAttribute,<init>,"(java.lang.String, int) → void","org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.<init>(String,int)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute$StripAttribute,read,"(org.objectweb.asm.ClassReader, int, int, char[], int, org.objectweb.asm.Label[]) → org.objectweb.asm.Attribute","org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.read(ClassReader,int,int,char[],int,Label[])",2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute$ErrorAttribute,<init>,"(java.lang.String, int) → void","org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.<init>(String,int)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute$ErrorAttribute,read,"(org.objectweb.asm.ClassReader, int, int, char[], int, org.objectweb.asm.Label[]) → org.objectweb.asm.Attribute","org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.read(ClassReader,int,int,char[],int,Label[])",15,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPDouble,<init>,(double) → void,org.apache.commons.compress.harmony.pack200.CPDouble.<init>(double),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPDouble,compareTo,(org.apache.commons.compress.harmony.pack200.CPDouble) → int,org.apache.commons.compress.harmony.pack200.CPDouble.compareTo(CPDouble),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPDouble,getDouble,() → double,org.apache.commons.compress.harmony.pack200.CPDouble.getDouble(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPLong,<init>,(long) → void,org.apache.commons.compress.harmony.pack200.CPLong.<init>(long),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPLong,compareTo,(org.apache.commons.compress.harmony.pack200.CPLong) → int,org.apache.commons.compress.harmony.pack200.CPLong.compareTo(CPLong),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPLong,getLong,() → long,org.apache.commons.compress.harmony.pack200.CPLong.getLong(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPLong,toString,() → java.lang.String,org.apache.commons.compress.harmony.pack200.CPLong.toString(),10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPClass,<init>,(org.apache.commons.compress.harmony.pack200.CPUTF8) → void,org.apache.commons.compress.harmony.pack200.CPClass.<init>(CPUTF8),40,0,0.0,4,0,0.0,3,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPClass,compareTo,(org.apache.commons.compress.harmony.pack200.CPClass) → int,org.apache.commons.compress.harmony.pack200.CPClass.compareTo(CPClass),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPClass,getIndexInCpUtf8,() → int,org.apache.commons.compress.harmony.pack200.CPClass.getIndexInCpUtf8(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPClass,isInnerClass,() → boolean,org.apache.commons.compress.harmony.pack200.CPClass.isInnerClass(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPClass,toString,() → java.lang.String,org.apache.commons.compress.harmony.pack200.CPClass.toString(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Pack200PackerAdapter,<init>,() → void,org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.<init>(),0,8,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Pack200PackerAdapter,firePropertyChange,"(java.lang.String, java.lang.Object, java.lang.Object) → void","org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.firePropertyChange(String,Object,Object)",103,56,0.3522012578616352,17,13,0.43333333333333335,16,17,14,0.45161290322580644,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Pack200PackerAdapter,pack,"(java.util.jar.JarFile, java.io.OutputStream) → void","org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.pack(JarFile,OutputStream)",38,0,0.0,4,0,0.0,3,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Pack200PackerAdapter,pack,"(java.util.jar.JarInputStream, java.io.OutputStream) → void","org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.pack(JarInputStream,OutputStream)",18,25,0.5813953488372093,2,2,0.5,3,3,8,0.7272727272727273,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/AttributeDefinitionBands$AttributeDefinition,<init>,"(int, int, org.apache.commons.compress.harmony.pack200.CPUTF8, org.apache.commons.compress.harmony.pack200.CPUTF8) → void","org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition.<init>(int,int,CPUTF8,CPUTF8)",15,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Callable,<init>,"(org.apache.commons.compress.harmony.pack200.NewAttributeBands, java.util.List) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.<init>(NewAttributeBands,List)",9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Callable,addAttributeToBand,"(org.apache.commons.compress.harmony.pack200.NewAttribute, java.io.InputStream) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.addAttributeToBand(NewAttribute,InputStream)",17,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Callable,addBackwardsCall,() → void,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.addBackwardsCall(),11,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Callable,getBody,() → java.util.List,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.getBody(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Callable,isBackwardsCallable,() → boolean,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.isBackwardsCallable(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Callable,pack,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.pack(OutputStream),16,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Callable,renumberBci,"(org.apache.commons.compress.harmony.pack200.IntList, java.util.Map) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.renumberBci(IntList,Map)",17,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Callable,setBackwardsCallable,() → void,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.setBackwardsCallable(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Callable,setBackwardsCallableIndex,(int) → void,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.setBackwardsCallableIndex(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PopulationCodec,<init>,"(org.apache.commons.compress.harmony.pack200.Codec, org.apache.commons.compress.harmony.pack200.Codec, org.apache.commons.compress.harmony.pack200.Codec) → void","org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,Codec,Codec)",12,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PopulationCodec,<init>,"(org.apache.commons.compress.harmony.pack200.Codec, int, org.apache.commons.compress.harmony.pack200.Codec) → void","org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,int,Codec)",22,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PopulationCodec,decode,(java.io.InputStream) → int,org.apache.commons.compress.harmony.pack200.PopulationCodec.decode(InputStream),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PopulationCodec,decode,"(java.io.InputStream, long) → int","org.apache.commons.compress.harmony.pack200.PopulationCodec.decode(InputStream,long)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PopulationCodec,decodeInts,"(int, java.io.InputStream) → int[]","org.apache.commons.compress.harmony.pack200.PopulationCodec.decodeInts(int,InputStream)",178,0,0.0,24,0,0.0,13,39,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PopulationCodec,encode,(int) → byte[],org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PopulationCodec,encode,"(int, int) → byte[]","org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int,int)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PopulationCodec,encode,"(int[], int[], int[]) → byte[]","org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int[],int[],int[])",72,0,0.0,0,0,coverage not available since no branches,1,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PopulationCodec,getFavoured,() → int[],org.apache.commons.compress.harmony.pack200.PopulationCodec.getFavoured(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PopulationCodec,getFavouredCodec,() → org.apache.commons.compress.harmony.pack200.Codec,org.apache.commons.compress.harmony.pack200.PopulationCodec.getFavouredCodec(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PopulationCodec,getTokenCodec,() → org.apache.commons.compress.harmony.pack200.Codec,org.apache.commons.compress.harmony.pack200.PopulationCodec.getTokenCodec(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PopulationCodec,getUnfavouredCodec,() → org.apache.commons.compress.harmony.pack200.Codec,org.apache.commons.compress.harmony.pack200.PopulationCodec.getUnfavouredCodec(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/FileBands,<init>,"(org.apache.commons.compress.harmony.pack200.CpBands, org.apache.commons.compress.harmony.pack200.SegmentHeader, org.apache.commons.compress.harmony.pack200.PackingOptions, org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit, int) → void","org.apache.commons.compress.harmony.pack200.FileBands.<init>(CpBands,SegmentHeader,PackingOptions,SegmentUnit,int)",217,0,0.0,22,0,0.0,12,41,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/FileBands,finaliseBands,() → void,org.apache.commons.compress.harmony.pack200.FileBands.finaliseBands(),65,0,0.0,6,0,0.0,4,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/FileBands,flatten,(byte[][]) → int[],org.apache.commons.compress.harmony.pack200.FileBands.flatten(byte[][]),69,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/FileBands,pack,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.FileBands.pack(OutputStream),157,0,0.0,4,0,0.0,3,19,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet,<init>,"(int, org.apache.commons.compress.harmony.pack200.SegmentHeader) → void","org.apache.commons.compress.harmony.pack200.BandSet.<init>(int,SegmentHeader)",0,9,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet,analyseBand,"(java.lang.String, int[], org.apache.commons.compress.harmony.pack200.BHSDCodec) → org.apache.commons.compress.harmony.pack200.BandSet$BandAnalysisResults","org.apache.commons.compress.harmony.pack200.BandSet.analyseBand(String,int[],BHSDCodec)",316,0,0.0,38,0,0.0,20,67,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet,cpEntryListToArray,(java.util.List) → int[],org.apache.commons.compress.harmony.pack200.BandSet.cpEntryListToArray(List),31,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet,cpEntryOrNullListToArray,(java.util.List) → int[],org.apache.commons.compress.harmony.pack200.BandSet.cpEntryOrNullListToArray(List),40,0,0.0,8,0,0.0,5,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet,encodeBandInt,"(java.lang.String, int[], org.apache.commons.compress.harmony.pack200.BHSDCodec) → byte[]","org.apache.commons.compress.harmony.pack200.BandSet.encodeBandInt(String,int[],BHSDCodec)",203,37,0.15416666666666667,28,8,0.2222222222222222,19,35,10,0.2222222222222222,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet,encodeFlags,"(java.lang.String, long[], org.apache.commons.compress.harmony.pack200.BHSDCodec, org.apache.commons.compress.harmony.pack200.BHSDCodec, boolean) → byte[]","org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean)",12,74,0.8604651162790697,0,4,1.0,3,2,14,0.875,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet,encodeFlags,"(java.lang.String, long[][], org.apache.commons.compress.harmony.pack200.BHSDCodec, org.apache.commons.compress.harmony.pack200.BHSDCodec, boolean) → byte[]","org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[][],BHSDCodec,BHSDCodec,boolean)",10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet,encodeScalar,"(int, org.apache.commons.compress.harmony.pack200.BHSDCodec) → byte[]","org.apache.commons.compress.harmony.pack200.BandSet.encodeScalar(int,BHSDCodec)",4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet,encodeScalar,"(int[], org.apache.commons.compress.harmony.pack200.BHSDCodec) → byte[]","org.apache.commons.compress.harmony.pack200.BandSet.encodeScalar(int[],BHSDCodec)",4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet,encodeWithPopulationCodec,"(int[], org.apache.commons.compress.harmony.pack200.BHSDCodec, org.apache.commons.compress.harmony.pack200.BandSet$BandData, org.apache.commons.compress.harmony.pack200.BandSet$BandAnalysisResults) → void","org.apache.commons.compress.harmony.pack200.BandSet.encodeWithPopulationCodec(int[],BHSDCodec,BandData,BandAnalysisResults)",448,0,0.0,52,0,0.0,32,100,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet,flatten,(long[][]) → long[],org.apache.commons.compress.harmony.pack200.BandSet.flatten(long[][]),67,0,0.0,6,0,0.0,4,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet,integerListToArray,(java.util.List) → int[],org.apache.commons.compress.harmony.pack200.BandSet.integerListToArray(List),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet,longListToArray,(java.util.List) → long[],org.apache.commons.compress.harmony.pack200.BandSet.longListToArray(List),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet,timeToStop,(org.apache.commons.compress.harmony.pack200.BandSet$BandAnalysisResults) → boolean,org.apache.commons.compress.harmony.pack200.BandSet.timeToStop(BandAnalysisResults),24,0,0.0,6,0,0.0,4,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet,tryCodecs,"(int[], org.apache.commons.compress.harmony.pack200.BHSDCodec, org.apache.commons.compress.harmony.pack200.BandSet$BandData, org.apache.commons.compress.harmony.pack200.BandSet$BandAnalysisResults, byte[], org.apache.commons.compress.harmony.pack200.BHSDCodec[]) → void","org.apache.commons.compress.harmony.pack200.BandSet.tryCodecs(int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[])",149,0,0.0,24,0,0.0,13,27,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet,lambda$encodeWithPopulationCodec$2,"(java.util.Map, java.lang.Integer, java.lang.Integer) → int","org.apache.commons.compress.harmony.pack200.BandSet.lambda$encodeWithPopulationCodec$2(Map,Integer,Integer)",10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet,lambda$encodeWithPopulationCodec$1,"(java.util.Map, java.util.List, java.lang.Integer, java.lang.Integer) → void","org.apache.commons.compress.harmony.pack200.BandSet.lambda$encodeWithPopulationCodec$1(Map,List,Integer,Integer)",13,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet,lambda$encodeFlags$0,"(long[], int) → int","org.apache.commons.compress.harmony.pack200.BandSet.lambda$encodeFlags$0(long[],int)",0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet,<clinit>,() → void,org.apache.commons.compress.harmony.pack200.BandSet.<clinit>(),0,47,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$PassException,<init>,() → void,org.apache.commons.compress.harmony.pack200.Segment$PassException.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Reference,<init>,"(org.apache.commons.compress.harmony.pack200.NewAttributeBands, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.<init>(NewAttributeBands,String)",25,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Reference,addAttributeToBand,"(org.apache.commons.compress.harmony.pack200.NewAttribute, java.io.InputStream) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.addAttributeToBand(NewAttribute,InputStream)",69,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Reference,getTag,() → java.lang.String,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.getTag(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Reference,pack,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.pack(OutputStream),50,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Reference,renumberBci,"(org.apache.commons.compress.harmony.pack200.IntList, java.util.Map) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.renumberBci(IntList,Map)",1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet$BandData,<init>,"(org.apache.commons.compress.harmony.pack200.BandSet, int[]) → void","org.apache.commons.compress.harmony.pack200.BandSet$BandData.<init>(BandSet,int[])",171,0,0.0,22,0,0.0,12,35,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet$BandData,anyNegatives,() → boolean,org.apache.commons.compress.harmony.pack200.BandSet$BandData.anyNegatives(),7,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet$BandData,mainlyPositiveDeltas,() → boolean,org.apache.commons.compress.harmony.pack200.BandSet$BandData.mainlyPositiveDeltas(),15,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet$BandData,mainlySmallDeltas,() → boolean,org.apache.commons.compress.harmony.pack200.BandSet$BandData.mainlySmallDeltas(),15,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet$BandData,numDistinctValues,() → int,org.apache.commons.compress.harmony.pack200.BandSet$BandData.numDistinctValues(),11,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet$BandData,wellCorrelated,() → boolean,org.apache.commons.compress.harmony.pack200.BandSet$BandData.wellCorrelated(),12,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPUTF8,<init>,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.CPUTF8.<init>(String),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPUTF8,compareTo,(java.lang.Object) → int,org.apache.commons.compress.harmony.pack200.CPUTF8.compareTo(Object),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPUTF8,getUnderlyingString,() → java.lang.String,org.apache.commons.compress.harmony.pack200.CPUTF8.getUnderlyingString(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPUTF8,toString,() → java.lang.String,org.apache.commons.compress.harmony.pack200.CPUTF8.toString(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,<init>,"(org.apache.commons.compress.harmony.pack200.CpBands, org.apache.commons.compress.harmony.pack200.Segment, int) → void","org.apache.commons.compress.harmony.pack200.BcBands.<init>(CpBands,Segment,int)",132,0,0.0,0,0,coverage not available since no branches,1,28,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,finaliseBands,() → void,org.apache.commons.compress.harmony.pack200.BcBands.finaliseBands(),25,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,getIndexInClass,(java.util.List) → java.util.List,org.apache.commons.compress.harmony.pack200.BcBands.getIndexInClass(List),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,getIndexInClassForConstructor,(java.util.List) → java.util.List,org.apache.commons.compress.harmony.pack200.BcBands.getIndexInClassForConstructor(List),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,pack,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.BcBands.pack(OutputStream),627,0,0.0,0,0,coverage not available since no branches,1,65,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,setCurrentClass,"(java.lang.String, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.BcBands.setCurrentClass(String,String)",7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,updateRenumbering,() → void,org.apache.commons.compress.harmony.pack200.BcBands.updateRenumbering(),37,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,visitEnd,() → void,org.apache.commons.compress.harmony.pack200.BcBands.visitEnd(),126,0,0.0,14,0,0.0,8,23,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,visitFieldInsn,"(int, java.lang.String, java.lang.String, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.BcBands.visitFieldInsn(int,String,String,String)",78,0,0.0,10,0,0.0,6,19,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,visitIincInsn,"(int, int) → void","org.apache.commons.compress.harmony.pack200.BcBands.visitIincInsn(int,int)",59,0,0.0,4,0,0.0,3,12,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,visitInsn,(int) → void,org.apache.commons.compress.harmony.pack200.BcBands.visitInsn(int),22,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,visitIntInsn,"(int, int) → void","org.apache.commons.compress.harmony.pack200.BcBands.visitIntInsn(int,int)",40,0,0.0,3,0,0.0,3,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,visitJumpInsn,"(int, org.objectweb.asm.Label) → void","org.apache.commons.compress.harmony.pack200.BcBands.visitJumpInsn(int,Label)",25,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,visitLabel,(org.objectweb.asm.Label) → void,org.apache.commons.compress.harmony.pack200.BcBands.visitLabel(Label),9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,visitLdcInsn,(java.lang.Object) → void,org.apache.commons.compress.harmony.pack200.BcBands.visitLdcInsn(Object),184,0,0.0,26,0,0.0,14,37,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,visitLookupSwitchInsn,"(org.objectweb.asm.Label, int[], org.objectweb.asm.Label[]) → void","org.apache.commons.compress.harmony.pack200.BcBands.visitLookupSwitchInsn(Label,int[],Label[])",86,0,0.0,4,0,0.0,3,12,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,visitMethodInsn,"(int, java.lang.String, java.lang.String, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.BcBands.visitMethodInsn(int,String,String,String)",185,0,0.0,27,0,0.0,15,34,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,visitMultiANewArrayInsn,"(java.lang.String, int) → void","org.apache.commons.compress.harmony.pack200.BcBands.visitMultiANewArrayInsn(String,int)",29,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,visitTableSwitchInsn,"(int, int, org.objectweb.asm.Label, org.objectweb.asm.Label[]) → void","org.apache.commons.compress.harmony.pack200.BcBands.visitTableSwitchInsn(int,int,Label,Label[])",79,0,0.0,4,0,0.0,3,13,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,visitTypeInsn,"(int, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.BcBands.visitTypeInsn(int,String)",28,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BcBands,visitVarInsn,"(int, int) → void","org.apache.commons.compress.harmony.pack200.BcBands.visitVarInsn(int,int)",108,0,0.0,12,0,0.0,9,22,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,<init>,(org.apache.commons.compress.harmony.pack200.Segment) → void,org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.<init>(Segment),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitAnnotation,"(java.lang.String, boolean) → org.objectweb.asm.AnnotationVisitor","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitAnnotation(String,boolean)",9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitAnnotationDefault,() → org.objectweb.asm.AnnotationVisitor,org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitAnnotationDefault(),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitAttribute,(org.objectweb.asm.Attribute) → void,org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitAttribute(Attribute),117,0,0.0,22,0,0.0,12,26,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitCode,() → void,org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitCode(),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitEnd,() → void,org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitEnd(),9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitFieldInsn,"(int, java.lang.String, java.lang.String, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFieldInsn(int,String,String,String)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitFrame,"(int, int, java.lang.Object[], int, java.lang.Object[]) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFrame(int,int,Object[],int,Object[])",1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitIincInsn,"(int, int) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitIincInsn(int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitInsn,(int) → void,org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitInsn(int),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitIntInsn,"(int, int) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitIntInsn(int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitJumpInsn,"(int, org.objectweb.asm.Label) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitJumpInsn(int,Label)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitLabel,(org.objectweb.asm.Label) → void,org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLabel(Label),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitLdcInsn,(java.lang.Object) → void,org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLdcInsn(Object),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitLineNumber,"(int, org.objectweb.asm.Label) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLineNumber(int,Label)",11,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitLocalVariable,"(java.lang.String, java.lang.String, java.lang.String, org.objectweb.asm.Label, org.objectweb.asm.Label, int) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLocalVariable(String,String,String,Label,Label,int)",15,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitLookupSwitchInsn,"(org.objectweb.asm.Label, int[], org.objectweb.asm.Label[]) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLookupSwitchInsn(Label,int[],Label[])",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitMaxs,"(int, int) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMaxs(int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitMethodInsn,"(int, java.lang.String, java.lang.String, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMethodInsn(int,String,String,String)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitMultiANewArrayInsn,"(java.lang.String, int) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMultiANewArrayInsn(String,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitParameterAnnotation,"(int, java.lang.String, boolean) → org.objectweb.asm.AnnotationVisitor","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitParameterAnnotation(int,String,boolean)",10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitTableSwitchInsn,"(int, int, org.objectweb.asm.Label, org.objectweb.asm.Label[]) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTableSwitchInsn(int,int,Label,Label[])",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitTryCatchBlock,"(org.objectweb.asm.Label, org.objectweb.asm.Label, org.objectweb.asm.Label, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTryCatchBlock(Label,Label,Label,String)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitTypeInsn,"(int, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTypeInsn(int,String)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentMethodVisitor,visitVarInsn,"(int, int) → void","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitVarInsn(int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Codec,<init>,() → void,org.apache.commons.compress.harmony.pack200.Codec.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Codec,check,"(int, java.io.InputStream) → int","org.apache.commons.compress.harmony.pack200.Codec.check(int,InputStream)",56,5,0.08196721311475409,7,1,0.125,5,8,2,0.2,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Codec,decodeInts,"(int, java.io.InputStream) → int[]","org.apache.commons.compress.harmony.pack200.Codec.decodeInts(int,InputStream)",30,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Codec,decodeInts,"(int, java.io.InputStream, int) → int[]","org.apache.commons.compress.harmony.pack200.Codec.decodeInts(int,InputStream,int)",35,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Codec,encode,(int[]) → byte[],org.apache.commons.compress.harmony.pack200.Codec.encode(int[]),0,73,1.0,0,6,1.0,4,0,11,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Codec,<clinit>,() → void,org.apache.commons.compress.harmony.pack200.Codec.<clinit>(),0,63,1.0,0,0,coverage not available since no branches,1,0,9,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ConstantPoolEntry,<init>,() → void,org.apache.commons.compress.harmony.pack200.ConstantPoolEntry.<init>(),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ConstantPoolEntry,getIndex,() → int,org.apache.commons.compress.harmony.pack200.ConstantPoolEntry.getIndex(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ConstantPoolEntry,setIndex,(int) → void,org.apache.commons.compress.harmony.pack200.ConstantPoolEntry.setIndex(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPInt,<init>,(int) → void,org.apache.commons.compress.harmony.pack200.CPInt.<init>(int),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPInt,compareTo,(org.apache.commons.compress.harmony.pack200.CPInt) → int,org.apache.commons.compress.harmony.pack200.CPInt.compareTo(CPInt),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPInt,getInt,() → int,org.apache.commons.compress.harmony.pack200.CPInt.getInt(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentFieldVisitor,<init>,(org.apache.commons.compress.harmony.pack200.Segment) → void,org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor.<init>(Segment),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentFieldVisitor,visitAnnotation,"(java.lang.String, boolean) → org.objectweb.asm.AnnotationVisitor","org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor.visitAnnotation(String,boolean)",9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentFieldVisitor,visitAttribute,(org.objectweb.asm.Attribute) → void,org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor.visitAttribute(Attribute),80,0,0.0,14,0,0.0,8,18,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$SegmentFieldVisitor,visitEnd,() → void,org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor.visitEnd(),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute,<init>,"(org.objectweb.asm.ClassReader, java.lang.String, java.lang.String, byte[], char[], int, org.objectweb.asm.Label[]) → void","org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[])",22,0,0.0,0,0,coverage not available since no branches,1,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute,<init>,"(java.lang.String, java.lang.String, int) → void","org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(String,String,int)",10,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute,addContext,(int) → void,org.apache.commons.compress.harmony.pack200.NewAttribute.addContext(int),18,0,0.0,5,0,0.0,5,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute,getBytes,() → byte[],org.apache.commons.compress.harmony.pack200.NewAttribute.getBytes(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute,getLabel,(int) → org.objectweb.asm.Label,org.apache.commons.compress.harmony.pack200.NewAttribute.getLabel(int),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute,getLayout,() → java.lang.String,org.apache.commons.compress.harmony.pack200.NewAttribute.getLayout(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute,isCodeAttribute,() → boolean,org.apache.commons.compress.harmony.pack200.NewAttribute.isCodeAttribute(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute,isContextClass,() → boolean,org.apache.commons.compress.harmony.pack200.NewAttribute.isContextClass(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute,isContextCode,() → boolean,org.apache.commons.compress.harmony.pack200.NewAttribute.isContextCode(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute,isContextField,() → boolean,org.apache.commons.compress.harmony.pack200.NewAttribute.isContextField(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute,isContextMethod,() → boolean,org.apache.commons.compress.harmony.pack200.NewAttribute.isContextMethod(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute,isUnknown,() → boolean,org.apache.commons.compress.harmony.pack200.NewAttribute.isUnknown(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute,isUnknown,(int) → boolean,org.apache.commons.compress.harmony.pack200.NewAttribute.isUnknown(int),32,0,0.0,13,0,0.0,9,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute,read,"(org.objectweb.asm.ClassReader, int, int, char[], int, org.objectweb.asm.Label[]) → org.objectweb.asm.Attribute","org.apache.commons.compress.harmony.pack200.NewAttribute.read(ClassReader,int,int,char[],int,Label[])",23,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute,readClass,(int) → java.lang.String,org.apache.commons.compress.harmony.pack200.NewAttribute.readClass(int),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute,readConst,(int) → java.lang.Object,org.apache.commons.compress.harmony.pack200.NewAttribute.readConst(int),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute,readUTF8,(int) → java.lang.String,org.apache.commons.compress.harmony.pack200.NewAttribute.readUTF8(int),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingUtils$PackingLogger,<init>,"(java.lang.String, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger.<init>(String,String)",0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingUtils$PackingLogger,log,(java.util.logging.LogRecord) → void,org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger.log(LogRecord),3,4,0.5714285714285714,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingUtils$PackingLogger,setVerbose,(boolean) → void,org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger.setVerbose(boolean),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive$PackingFile,<init>,"(byte[], java.util.jar.JarEntry) → void","org.apache.commons.compress.harmony.pack200.Archive$PackingFile.<init>(byte[],JarEntry)",27,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive$PackingFile,<init>,"(java.lang.String, byte[], long) → void","org.apache.commons.compress.harmony.pack200.Archive$PackingFile.<init>(String,byte[],long)",18,0,0.0,0,0,coverage not available since no branches,1,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive$PackingFile,getContents,() → byte[],org.apache.commons.compress.harmony.pack200.Archive$PackingFile.getContents(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive$PackingFile,getModtime,() → long,org.apache.commons.compress.harmony.pack200.Archive$PackingFile.getModtime(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive$PackingFile,getName,() → java.lang.String,org.apache.commons.compress.harmony.pack200.Archive$PackingFile.getName(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive$PackingFile,isDefalteHint,() → boolean,org.apache.commons.compress.harmony.pack200.Archive$PackingFile.isDefalteHint(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive$PackingFile,isDirectory,() → boolean,org.apache.commons.compress.harmony.pack200.Archive$PackingFile.isDirectory(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive$PackingFile,setContents,(byte[]) → void,org.apache.commons.compress.harmony.pack200.Archive$PackingFile.setContents(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive$PackingFile,toString,() → java.lang.String,org.apache.commons.compress.harmony.pack200.Archive$PackingFile.toString(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$UnionCase,<init>,"(org.apache.commons.compress.harmony.pack200.NewAttributeBands, java.util.List) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.<init>(NewAttributeBands,List)",13,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$UnionCase,<init>,"(org.apache.commons.compress.harmony.pack200.NewAttributeBands, java.util.List, java.util.List) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.<init>(NewAttributeBands,List,List)",13,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$UnionCase,addAttributeToBand,"(org.apache.commons.compress.harmony.pack200.NewAttribute, java.io.InputStream) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.addAttributeToBand(NewAttribute,InputStream)",17,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$UnionCase,getBody,() → java.util.List,org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.getBody(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$UnionCase,hasTag,(long) → boolean,org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.hasTag(long),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$UnionCase,pack,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.pack(OutputStream),16,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$UnionCase,renumberBci,"(org.apache.commons.compress.harmony.pack200.IntList, java.util.Map) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.renumberBci(IntList,Map)",17,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPSignature,<init>,"(java.lang.String, org.apache.commons.compress.harmony.pack200.CPUTF8, java.util.List) → void","org.apache.commons.compress.harmony.pack200.CPSignature.<init>(String,CPUTF8,List)",18,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPSignature,compareTo,(java.lang.Object) → int,org.apache.commons.compress.harmony.pack200.CPSignature.compareTo(Object),87,0,0.0,18,0,0.0,10,16,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPSignature,getClasses,() → java.util.List,org.apache.commons.compress.harmony.pack200.CPSignature.getClasses(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPSignature,getIndexInCpUtf8,() → int,org.apache.commons.compress.harmony.pack200.CPSignature.getIndexInCpUtf8(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPSignature,getSignatureForm,() → org.apache.commons.compress.harmony.pack200.CPUTF8,org.apache.commons.compress.harmony.pack200.CPSignature.getSignatureForm(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPSignature,getUnderlyingString,() → java.lang.String,org.apache.commons.compress.harmony.pack200.CPSignature.getUnderlyingString(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPSignature,toString,() → java.lang.String,org.apache.commons.compress.harmony.pack200.CPSignature.toString(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands,<init>,"(int, org.apache.commons.compress.harmony.pack200.CpBands, org.apache.commons.compress.harmony.pack200.SegmentHeader, org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands.<init>(int,CpBands,SegmentHeader,AttributeDefinition)",13,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands,addAttribute,(org.apache.commons.compress.harmony.pack200.NewAttribute) → void,org.apache.commons.compress.harmony.pack200.NewAttributeBands.addAttribute(NewAttribute),26,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands,getAttributeName,() → java.lang.String,org.apache.commons.compress.harmony.pack200.NewAttributeBands.getAttributeName(),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands,getCodec,(java.lang.String) → org.apache.commons.compress.harmony.pack200.BHSDCodec,org.apache.commons.compress.harmony.pack200.NewAttributeBands.getCodec(String),34,0,0.0,12,0,0.0,7,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands,getFlagIndex,() → int,org.apache.commons.compress.harmony.pack200.NewAttributeBands.getFlagIndex(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands,getStreamUpToMatchingBracket,(java.io.StringReader) → java.io.StringReader,org.apache.commons.compress.harmony.pack200.NewAttributeBands.getStreamUpToMatchingBracket(StringReader),39,0,0.0,10,0,0.0,6,15,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands,isUsedAtLeastOnce,() → boolean,org.apache.commons.compress.harmony.pack200.NewAttributeBands.isUsedAtLeastOnce(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands,numBackwardsCalls,() → int[],org.apache.commons.compress.harmony.pack200.NewAttributeBands.numBackwardsCalls(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands,pack,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.NewAttributeBands.pack(OutputStream),16,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands,parseLayout,() → void,org.apache.commons.compress.harmony.pack200.NewAttributeBands.parseLayout(),33,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands,readBody,(java.io.StringReader) → java.util.List,org.apache.commons.compress.harmony.pack200.NewAttributeBands.readBody(StringReader),17,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands,readInteger,"(int, java.io.InputStream) → int","org.apache.commons.compress.harmony.pack200.NewAttributeBands.readInteger(int,InputStream)",38,0,0.0,6,0,0.0,4,11,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands,readNextAttributeElement,(java.io.StringReader) → org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement,org.apache.commons.compress.harmony.pack200.NewAttributeBands.readNextAttributeElement(StringReader),30,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands,readNextLayoutElement,(java.io.StringReader) → org.apache.commons.compress.harmony.pack200.NewAttributeBands$LayoutElement,org.apache.commons.compress.harmony.pack200.NewAttributeBands.readNextLayoutElement(StringReader),287,0,0.0,23,0,0.0,16,48,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands,readNextUnionCase,(java.io.StringReader) → org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase,org.apache.commons.compress.harmony.pack200.NewAttributeBands.readNextUnionCase(StringReader),78,0,0.0,10,0,0.0,6,22,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands,readNumber,(java.io.StringReader) → java.lang.Integer,org.apache.commons.compress.harmony.pack200.NewAttributeBands.readNumber(StringReader),75,0,0.0,14,0,0.0,8,17,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands,readUpToMatchingBracket,(java.io.StringReader) → java.lang.String,org.apache.commons.compress.harmony.pack200.NewAttributeBands.readUpToMatchingBracket(StringReader),36,0,0.0,10,0,0.0,6,15,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands,renumberBci,"(org.apache.commons.compress.harmony.pack200.IntList, java.util.Map) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands.renumberBci(IntList,Map)",17,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands,resolveCalls,() → void,org.apache.commons.compress.harmony.pack200.NewAttributeBands.resolveCalls(),72,0,0.0,12,0,0.0,7,18,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands,resolveCallsForElement,"(int, org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable, org.apache.commons.compress.harmony.pack200.NewAttributeBands$LayoutElement) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement)",96,0,0.0,22,0,0.0,12,26,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Union,<init>,"(org.apache.commons.compress.harmony.pack200.NewAttributeBands, java.lang.String, java.util.List, java.util.List) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.<init>(NewAttributeBands,String,List,List)",20,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Union,addAttributeToBand,"(org.apache.commons.compress.harmony.pack200.NewAttribute, java.io.InputStream) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.addAttributeToBand(NewAttribute,InputStream)",53,0,0.0,8,0,0.0,5,13,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Union,getDefaultCaseBody,() → java.util.List,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.getDefaultCaseBody(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Union,getUnionCases,() → java.util.List,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.getUnionCases(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Union,getUnionTag,() → org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.getUnionTag(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Union,pack,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.pack(OutputStream),35,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Union,renumberBci,"(org.apache.commons.compress.harmony.pack200.IntList, java.util.Map) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.renumberBci(IntList,Map)",33,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$LayoutElement,<init>,(org.apache.commons.compress.harmony.pack200.NewAttributeBands) → void,org.apache.commons.compress.harmony.pack200.NewAttributeBands$LayoutElement.<init>(NewAttributeBands),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$LayoutElement,getLength,(char) → int,org.apache.commons.compress.harmony.pack200.NewAttributeBands$LayoutElement.getLength(char),17,0,0.0,5,0,0.0,5,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPNameAndType,<init>,"(org.apache.commons.compress.harmony.pack200.CPUTF8, org.apache.commons.compress.harmony.pack200.CPSignature) → void","org.apache.commons.compress.harmony.pack200.CPNameAndType.<init>(CPUTF8,CPSignature)",9,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPNameAndType,compareTo,(java.lang.Object) → int,org.apache.commons.compress.harmony.pack200.CPNameAndType.compareTo(Object),24,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPNameAndType,getName,() → java.lang.String,org.apache.commons.compress.harmony.pack200.CPNameAndType.getName(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPNameAndType,getNameIndex,() → int,org.apache.commons.compress.harmony.pack200.CPNameAndType.getNameIndex(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPNameAndType,getTypeIndex,() → int,org.apache.commons.compress.harmony.pack200.CPNameAndType.getTypeIndex(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPNameAndType,toString,() → java.lang.String,org.apache.commons.compress.harmony.pack200.CPNameAndType.toString(),13,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Pack200Adapter,<init>,() → void,org.apache.commons.compress.harmony.pack200.Pack200Adapter.<init>(),0,14,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Pack200Adapter,addPropertyChangeListener,(java.beans.PropertyChangeListener) → void,org.apache.commons.compress.harmony.pack200.Pack200Adapter.addPropertyChangeListener(PropertyChangeListener),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Pack200Adapter,completed,(double) → void,org.apache.commons.compress.harmony.pack200.Pack200Adapter.completed(double),0,10,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Pack200Adapter,firePropertyChange,"(java.lang.String, java.lang.Object, java.lang.Object) → void","org.apache.commons.compress.harmony.pack200.Pack200Adapter.firePropertyChange(String,Object,Object)",0,7,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Pack200Adapter,properties,() → java.util.SortedMap,org.apache.commons.compress.harmony.pack200.Pack200Adapter.properties(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Pack200Adapter,removePropertyChangeListener,(java.beans.PropertyChangeListener) → void,org.apache.commons.compress.harmony.pack200.Pack200Adapter.removePropertyChangeListener(PropertyChangeListener),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingUtils,<init>,() → void,org.apache.commons.compress.harmony.pack200.PackingUtils.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingUtils,config,(org.apache.commons.compress.harmony.pack200.PackingOptions) → void,org.apache.commons.compress.harmony.pack200.PackingUtils.config(PackingOptions),20,17,0.4594594594594595,4,4,0.5,5,5,6,0.5454545454545454,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingUtils,copyThroughJar,"(java.util.jar.JarFile, java.io.OutputStream) → void","org.apache.commons.compress.harmony.pack200.PackingUtils.copyThroughJar(JarFile,OutputStream)",61,0,0.0,4,0,0.0,3,15,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingUtils,copyThroughJar,"(java.util.jar.JarInputStream, java.io.OutputStream) → void","org.apache.commons.compress.harmony.pack200.PackingUtils.copyThroughJar(JarInputStream,OutputStream)",54,0,0.0,4,0,0.0,3,12,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingUtils,getPackingFileListFromJar,"(java.util.jar.JarFile, boolean) → java.util.List","org.apache.commons.compress.harmony.pack200.PackingUtils.getPackingFileListFromJar(JarFile,boolean)",42,0,0.0,4,0,0.0,3,11,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingUtils,getPackingFileListFromJar,"(java.util.jar.JarInputStream, boolean) → java.util.List","org.apache.commons.compress.harmony.pack200.PackingUtils.getPackingFileListFromJar(JarInputStream,boolean)",35,18,0.33962264150943394,3,3,0.5,4,6,6,0.5,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingUtils,log,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.PackingUtils.log(String),0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingUtils,readJarEntry,"(java.util.jar.JarEntry, java.io.InputStream) → byte[]","org.apache.commons.compress.harmony.pack200.PackingUtils.readJarEntry(JarEntry,InputStream)",36,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingUtils,reorderPackingFiles,(java.util.List) → void,org.apache.commons.compress.harmony.pack200.PackingUtils.reorderPackingFiles(List),20,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingUtils,lambda$reorderPackingFiles$0,"(org.apache.commons.compress.harmony.pack200.Archive$PackingFile, org.apache.commons.compress.harmony.pack200.Archive$PackingFile) → int","org.apache.commons.compress.harmony.pack200.PackingUtils.lambda$reorderPackingFiles$0(PackingFile,PackingFile)",28,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingUtils,<clinit>,() → void,org.apache.commons.compress.harmony.pack200.PackingUtils.<clinit>(),0,11,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,<init>,"(int, int) → void","org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int)",0,7,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,<init>,"(int, int, int) → void","org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int)",0,7,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,<init>,"(int, int, int, int) → void","org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int,int)",39,101,0.7214285714285714,11,15,0.5769230769230769,14,7,19,0.7307692307692307,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,calculateLargest,() → long,org.apache.commons.compress.harmony.pack200.BHSDCodec.calculateLargest(),5,51,0.9107142857142857,1,7,0.875,6,1,10,0.9090909090909091,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,calculateSmallest,() → long,org.apache.commons.compress.harmony.pack200.BHSDCodec.calculateSmallest(),0,32,1.0,0,6,1.0,4,0,6,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,cardinality,() → long,org.apache.commons.compress.harmony.pack200.BHSDCodec.cardinality(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,decode,(java.io.InputStream) → int,org.apache.commons.compress.harmony.pack200.BHSDCodec.decode(InputStream),13,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,decode,"(java.io.InputStream, long) → int","org.apache.commons.compress.harmony.pack200.BHSDCodec.decode(InputStream,long)",16,72,0.8181818181818182,6,6,0.5,7,2,16,0.8888888888888888,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,decodeInts,"(int, java.io.InputStream) → int[]","org.apache.commons.compress.harmony.pack200.BHSDCodec.decodeInts(int,InputStream)",55,0,0.0,8,0,0.0,5,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,decodeInts,"(int, java.io.InputStream, int) → int[]","org.apache.commons.compress.harmony.pack200.BHSDCodec.decodeInts(int,InputStream,int)",56,0,0.0,8,0,0.0,5,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,encode,(int) → byte[],org.apache.commons.compress.harmony.pack200.BHSDCodec.encode(int),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,encode,"(int, int) → byte[]","org.apache.commons.compress.harmony.pack200.BHSDCodec.encode(int,int)",87,105,0.546875,15,13,0.4642857142857143,15,13,22,0.6285714285714286,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,encodes,(long) → boolean,org.apache.commons.compress.harmony.pack200.BHSDCodec.encodes(long),1,13,0.9285714285714286,2,2,0.5,3,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,equals,(java.lang.Object) → boolean,org.apache.commons.compress.harmony.pack200.BHSDCodec.equals(Object),32,0,0.0,10,0,0.0,6,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,getB,() → int,org.apache.commons.compress.harmony.pack200.BHSDCodec.getB(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,getH,() → int,org.apache.commons.compress.harmony.pack200.BHSDCodec.getH(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,getL,() → int,org.apache.commons.compress.harmony.pack200.BHSDCodec.getL(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,getS,() → int,org.apache.commons.compress.harmony.pack200.BHSDCodec.getS(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,hashCode,() → int,org.apache.commons.compress.harmony.pack200.BHSDCodec.hashCode(),0,18,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,isDelta,() → boolean,org.apache.commons.compress.harmony.pack200.BHSDCodec.isDelta(),0,7,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,isSigned,() → boolean,org.apache.commons.compress.harmony.pack200.BHSDCodec.isSigned(),0,7,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,largest,() → long,org.apache.commons.compress.harmony.pack200.BHSDCodec.largest(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,smallest,() → long,org.apache.commons.compress.harmony.pack200.BHSDCodec.smallest(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,toString,() → java.lang.String,org.apache.commons.compress.harmony.pack200.BHSDCodec.toString(),57,0,0.0,6,0,0.0,4,13,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BHSDCodec,lambda$new$0,"(int, int) → long","org.apache.commons.compress.harmony.pack200.BHSDCodec.lambda$new$0(int,int)",0,7,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,<init>,() → void,org.apache.commons.compress.harmony.pack200.Segment.<init>(),16,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,addValueAndTag,"(java.lang.Object, java.util.List, java.util.List) → void","org.apache.commons.compress.harmony.pack200.Segment.addValueAndTag(Object,List,List)",138,0,0.0,22,0,0.0,12,31,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,getAttrBands,() → org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands,org.apache.commons.compress.harmony.pack200.Segment.getAttrBands(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,getClassBands,() → org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.Segment.getClassBands(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,getCpBands,() → org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.Segment.getCpBands(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,getCurrentClassReader,() → org.apache.commons.compress.harmony.pack200.Pack200ClassReader,org.apache.commons.compress.harmony.pack200.Segment.getCurrentClassReader(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,getIcBands,() → org.apache.commons.compress.harmony.pack200.IcBands,org.apache.commons.compress.harmony.pack200.Segment.getIcBands(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,getSegmentHeader,() → org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.Segment.getSegmentHeader(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,lastConstantHadWideIndex,() → boolean,org.apache.commons.compress.harmony.pack200.Segment.lastConstantHadWideIndex(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,pack,"(org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit, java.io.OutputStream, org.apache.commons.compress.harmony.pack200.PackingOptions) → void","org.apache.commons.compress.harmony.pack200.Segment.pack(SegmentUnit,OutputStream,PackingOptions)",251,0,0.0,6,0,0.0,4,51,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,passCurrentClass,() → void,org.apache.commons.compress.harmony.pack200.Segment.passCurrentClass(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,processClasses,"(org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit, org.objectweb.asm.Attribute[]) → void","org.apache.commons.compress.harmony.pack200.Segment.processClasses(SegmentUnit,Attribute[])",91,0,0.0,10,0,0.0,6,24,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,visit,"(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]) → void","org.apache.commons.compress.harmony.pack200.Segment.visit(int,int,String,String,String,String[])",19,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,visitAnnotation,"(java.lang.String, boolean) → org.objectweb.asm.AnnotationVisitor","org.apache.commons.compress.harmony.pack200.Segment.visitAnnotation(String,boolean)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,visitAttribute,(org.objectweb.asm.Attribute) → void,org.apache.commons.compress.harmony.pack200.Segment.visitAttribute(Attribute),75,0,0.0,14,0,0.0,8,18,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,visitEnd,() → void,org.apache.commons.compress.harmony.pack200.Segment.visitEnd(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,visitField,"(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object) → org.objectweb.asm.FieldVisitor","org.apache.commons.compress.harmony.pack200.Segment.visitField(int,String,String,String,Object)",11,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,visitInnerClass,"(java.lang.String, java.lang.String, java.lang.String, int) → void","org.apache.commons.compress.harmony.pack200.Segment.visitInnerClass(String,String,String,int)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,visitMethod,"(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]) → org.objectweb.asm.MethodVisitor","org.apache.commons.compress.harmony.pack200.Segment.visitMethod(int,String,String,String,String[])",11,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,visitOuterClass,"(java.lang.String, java.lang.String, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.Segment.visitOuterClass(String,String,String)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,visitSource,"(java.lang.String, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.Segment.visitSource(String,String)",8,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment,<clinit>,() → void,org.apache.commons.compress.harmony.pack200.Segment.<clinit>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute$PassAttribute,<init>,"(java.lang.String, int) → void","org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.<init>(String,int)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttribute$PassAttribute,read,"(org.objectweb.asm.ClassReader, int, int, char[], int, org.objectweb.asm.Label[]) → org.objectweb.asm.Attribute","org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.read(ClassReader,int,int,char[],int,Label[])",4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPConstant,<init>,() → void,org.apache.commons.compress.harmony.pack200.CPConstant.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader$Counter,<init>,() → void,org.apache.commons.compress.harmony.pack200.SegmentHeader$Counter.<init>(),0,11,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader$Counter,add,(int) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader$Counter.add(int),70,0,0.0,8,0,0.0,5,13,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader$Counter,getMostCommon,() → int,org.apache.commons.compress.harmony.pack200.SegmentHeader$Counter.getMostCommon(),26,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,countArgs,(java.lang.String) → int,org.apache.commons.compress.harmony.pack200.ClassBands.countArgs(String),86,0,0.0,26,0,0.0,14,25,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,<init>,"(org.apache.commons.compress.harmony.pack200.Segment, int, int, boolean) → void","org.apache.commons.compress.harmony.pack200.ClassBands.<init>(Segment,int,int,boolean)",410,0,0.0,2,0,0.0,2,74,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,addAnnotation,"(int, java.lang.String, boolean, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List) → void","org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List)",266,0,0.0,22,0,0.0,13,43,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,addAnnotationDefault,"(java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List) → void","org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List)",31,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,addClass,"(int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]) → void","org.apache.commons.compress.harmony.pack200.ClassBands.addClass(int,int,String,String,String,String[])",94,0,0.0,8,0,0.0,5,14,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,addClassAttribute,(org.apache.commons.compress.harmony.pack200.NewAttribute) → void,org.apache.commons.compress.harmony.pack200.ClassBands.addClassAttribute(NewAttribute),51,0,0.0,4,0,0.0,3,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,addCode,() → void,org.apache.commons.compress.harmony.pack200.ClassBands.addCode(),20,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,addCodeAttribute,(org.apache.commons.compress.harmony.pack200.NewAttribute) → void,org.apache.commons.compress.harmony.pack200.ClassBands.addCodeAttribute(NewAttribute),61,0,0.0,4,0,0.0,3,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,addEnclosingMethod,"(java.lang.String, java.lang.String, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.ClassBands.addEnclosingMethod(String,String,String)",31,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,addField,"(int, java.lang.String, java.lang.String, java.lang.String, java.lang.Object) → void","org.apache.commons.compress.harmony.pack200.ClassBands.addField(int,String,String,String,Object)",80,0,0.0,12,0,0.0,7,16,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,addFieldAttribute,(org.apache.commons.compress.harmony.pack200.NewAttribute) → void,org.apache.commons.compress.harmony.pack200.ClassBands.addFieldAttribute(NewAttribute),61,0,0.0,4,0,0.0,3,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,addHandler,"(org.objectweb.asm.Label, org.objectweb.asm.Label, org.objectweb.asm.Label, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.ClassBands.addHandler(Label,Label,Label,String)",44,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,addLineNumber,"(int, org.objectweb.asm.Label) → void","org.apache.commons.compress.harmony.pack200.ClassBands.addLineNumber(int,Label)",59,0,0.0,2,0,0.0,2,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,addLocalVariable,"(java.lang.String, java.lang.String, java.lang.String, org.objectweb.asm.Label, org.objectweb.asm.Label, int) → void","org.apache.commons.compress.harmony.pack200.ClassBands.addLocalVariable(String,String,String,Label,Label,int)",121,0,0.0,4,0,0.0,3,19,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,addMaxStack,"(int, int) → void","org.apache.commons.compress.harmony.pack200.ClassBands.addMaxStack(int,int)",46,0,0.0,2,0,0.0,2,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,addMethod,"(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]) → void","org.apache.commons.compress.harmony.pack200.ClassBands.addMethod(int,String,String,String,String[])",104,0,0.0,14,0,0.0,8,19,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,addMethodAttribute,(org.apache.commons.compress.harmony.pack200.NewAttribute) → void,org.apache.commons.compress.harmony.pack200.ClassBands.addMethodAttribute(NewAttribute),61,0,0.0,4,0,0.0,3,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,addParameterAnnotation,"(int, java.lang.String, boolean, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List) → void","org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List)",86,0,0.0,6,0,0.0,4,13,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,addSourceFile,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.ClassBands.addSourceFile(String),62,0,0.0,4,0,0.0,3,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,createNewAttributeBands,() → void,org.apache.commons.compress.harmony.pack200.ClassBands.createNewAttributeBands(),113,0,0.0,8,0,0.0,5,13,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,currentClassReferencesInnerClass,(org.apache.commons.compress.harmony.pack200.CPClass) → void,org.apache.commons.compress.harmony.pack200.ClassBands.currentClassReferencesInnerClass(CPClass),34,0,0.0,8,0,0.0,5,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,doBciRenumbering,"(org.apache.commons.compress.harmony.pack200.IntList, java.util.Map) → void","org.apache.commons.compress.harmony.pack200.ClassBands.doBciRenumbering(IntList,Map)",123,0,0.0,8,0,0.0,5,21,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,endOfClass,() → void,org.apache.commons.compress.harmony.pack200.ClassBands.endOfClass(),131,0,0.0,4,0,0.0,3,20,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,endOfMethod,() → void,org.apache.commons.compress.harmony.pack200.ClassBands.endOfMethod(),139,0,0.0,10,0,0.0,6,14,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,finaliseBands,() → void,org.apache.commons.compress.harmony.pack200.ClassBands.finaliseBands(),644,0,0.0,92,0,0.0,48,118,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,getInts,(org.apache.commons.compress.harmony.pack200.CPClass[]) → int[],org.apache.commons.compress.harmony.pack200.ClassBands.getInts(CPClass[]),25,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,isAnySyntheticClasses,() → boolean,org.apache.commons.compress.harmony.pack200.ClassBands.isAnySyntheticClasses(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,isAnySyntheticFields,() → boolean,org.apache.commons.compress.harmony.pack200.ClassBands.isAnySyntheticFields(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,isAnySyntheticMethods,() → boolean,org.apache.commons.compress.harmony.pack200.ClassBands.isAnySyntheticMethods(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,isInnerClass,(java.lang.String) → boolean,org.apache.commons.compress.harmony.pack200.ClassBands.isInnerClass(String),9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,isInnerClassOf,"(java.lang.String, org.apache.commons.compress.harmony.pack200.CPClass) → boolean","org.apache.commons.compress.harmony.pack200.ClassBands.isInnerClassOf(String,CPClass)",25,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,numClassesProcessed,() → int,org.apache.commons.compress.harmony.pack200.ClassBands.numClassesProcessed(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,pack,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.ClassBands.pack(OutputStream),372,0,0.0,14,0,0.0,8,54,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,removeCurrentClass,() → void,org.apache.commons.compress.harmony.pack200.ClassBands.removeCurrentClass(),537,0,0.0,56,0,0.0,29,89,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,renumberBci,"(java.util.List, org.apache.commons.compress.harmony.pack200.IntList, java.util.Map) → void","org.apache.commons.compress.harmony.pack200.ClassBands.renumberBci(List,IntList,Map)",38,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,renumberDoubleOffsetBci,"(java.util.List, java.util.List, java.util.List, org.apache.commons.compress.harmony.pack200.IntList, java.util.Map) → void","org.apache.commons.compress.harmony.pack200.ClassBands.renumberDoubleOffsetBci(List,List,List,IntList,Map)",52,0,0.0,6,0,0.0,4,11,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,renumberOffsetBci,"(java.util.List, java.util.List, org.apache.commons.compress.harmony.pack200.IntList, java.util.Map) → void","org.apache.commons.compress.harmony.pack200.ClassBands.renumberOffsetBci(List,List,IntList,Map)",46,0,0.0,6,0,0.0,4,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,sum,(int[]) → int,org.apache.commons.compress.harmony.pack200.ClassBands.sum(int[]),24,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,writeClassAttributeBands,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.ClassBands.writeClassAttributeBands(OutputStream),408,0,0.0,2,0,0.0,2,45,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,writeCodeAttributeBands,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.ClassBands.writeCodeAttributeBands(OutputStream),522,0,0.0,2,0,0.0,2,55,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,writeCodeBands,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.ClassBands.writeCodeBands(OutputStream),239,0,0.0,0,0,coverage not available since no branches,1,26,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,writeFieldAttributeBands,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.ClassBands.writeFieldAttributeBands(OutputStream),144,0,0.0,2,0,0.0,2,18,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,writeMethodAttributeBands,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.ClassBands.writeMethodAttributeBands(OutputStream),185,0,0.0,2,0,0.0,2,24,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,lambda$finaliseBands$2,"(org.apache.commons.compress.harmony.pack200.NewAttributeBands, org.apache.commons.compress.harmony.pack200.NewAttributeBands) → int","org.apache.commons.compress.harmony.pack200.ClassBands.lambda$finaliseBands$2(NewAttributeBands,NewAttributeBands)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,lambda$currentClassReferencesInnerClass$1,(org.apache.commons.compress.harmony.pack200.CPClass) → java.util.Set,org.apache.commons.compress.harmony.pack200.ClassBands.lambda$currentClassReferencesInnerClass$1(CPClass),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,lambda$addClass$0,"(java.lang.String[], int) → org.apache.commons.compress.harmony.pack200.CPClass","org.apache.commons.compress.harmony.pack200.ClassBands.lambda$addClass$0(String[],int)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands,<clinit>,() → void,org.apache.commons.compress.harmony.pack200.ClassBands.<clinit>(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive,<init>,"(java.util.jar.JarFile, java.io.OutputStream, org.apache.commons.compress.harmony.pack200.PackingOptions) → void","org.apache.commons.compress.harmony.pack200.Archive.<init>(JarFile,OutputStream,PackingOptions)",34,0,0.0,4,0,0.0,3,11,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive,<init>,"(java.util.jar.JarInputStream, java.io.OutputStream, org.apache.commons.compress.harmony.pack200.PackingOptions) → void","org.apache.commons.compress.harmony.pack200.Archive.<init>(JarInputStream,OutputStream,PackingOptions)",4,27,0.8709677419354839,2,2,0.5,3,1,9,0.9,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive,addJarEntry,"(org.apache.commons.compress.harmony.pack200.Archive$PackingFile, java.util.List, java.util.List) → boolean","org.apache.commons.compress.harmony.pack200.Archive.addJarEntry(PackingFile,List,List)",71,0,0.0,12,0,0.0,7,14,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive,doNormalPack,() → void,org.apache.commons.compress.harmony.pack200.Archive.doNormalPack(),33,57,0.6333333333333333,2,2,0.5,3,5,11,0.6875,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive,doZeroEffortPack,() → void,org.apache.commons.compress.harmony.pack200.Archive.doZeroEffortPack(),17,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive,estimateSize,(org.apache.commons.compress.harmony.pack200.Archive$PackingFile) → long,org.apache.commons.compress.harmony.pack200.Archive.estimateSize(PackingFile),32,0,0.0,6,0,0.0,4,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive,pack,() → void,org.apache.commons.compress.harmony.pack200.Archive.pack(),3,8,0.7272727272727273,1,1,0.5,2,1,3,0.75,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive,splitIntoSegments,(java.util.List) → java.util.List,org.apache.commons.compress.harmony.pack200.Archive.splitIntoSegments(List),76,32,0.2962962962962963,9,3,0.25,7,13,8,0.38095238095238093,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Archive,<clinit>,() → void,org.apache.commons.compress.harmony.pack200.Archive.<clinit>(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands$TempParamAnnotation,<init>,(int) → void,org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.<init>(int),55,0,0.0,0,0,coverage not available since no branches,1,13,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/ClassBands$TempParamAnnotation,addParameterAnnotation,"(int, java.lang.String, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List) → void","org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List)",55,0,0.0,0,0,coverage not available since no branches,1,11,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Pack200ClassReader,<init>,(byte[]) → void,org.apache.commons.compress.harmony.pack200.Pack200ClassReader.<init>(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Pack200ClassReader,getFileName,() → java.lang.String,org.apache.commons.compress.harmony.pack200.Pack200ClassReader.getFileName(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Pack200ClassReader,hasSyntheticAttributes,() → boolean,org.apache.commons.compress.harmony.pack200.Pack200ClassReader.hasSyntheticAttributes(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Pack200ClassReader,lastConstantHadWideIndex,() → boolean,org.apache.commons.compress.harmony.pack200.Pack200ClassReader.lastConstantHadWideIndex(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Pack200ClassReader,readConst,"(int, char[]) → java.lang.Object","org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readConst(int,char[])",14,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Pack200ClassReader,readUnsignedShort,(int) → int,org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readUnsignedShort(int),23,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Pack200ClassReader,readUTF8,"(int, char[]) → java.lang.String","org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readUTF8(int,char[])",17,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Pack200ClassReader,setFileName,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.Pack200ClassReader.setFileName(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IcBands$IcTuple,<init>,"(org.apache.commons.compress.harmony.pack200.CPClass, int, org.apache.commons.compress.harmony.pack200.CPClass, org.apache.commons.compress.harmony.pack200.CPUTF8) → void","org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.<init>(CPClass,int,CPClass,CPUTF8)",15,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IcBands$IcTuple,compareTo,(org.apache.commons.compress.harmony.pack200.IcBands$IcTuple) → int,org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.compareTo(IcTuple),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IcBands$IcTuple,equals,(java.lang.Object) → boolean,org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.equals(Object),35,0,0.0,10,0,0.0,6,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IcBands$IcTuple,isAnonymous,() → boolean,org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.isAnonymous(),17,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/IcBands$IcTuple,toString,() → java.lang.String,org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.toString(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/AttributeDefinitionBands,<init>,"(org.apache.commons.compress.harmony.pack200.Segment, int, org.objectweb.asm.Attribute[]) → void","org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<init>(Segment,int,Attribute[])",373,0,0.0,32,0,0.0,17,48,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/AttributeDefinitionBands,addAttributeDefinitions,"(java.util.Map, int[], int) → void","org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.addAttributeDefinitions(Map,int[],int)",9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/AttributeDefinitionBands,addHighIndices,(int[]) → int[],org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.addHighIndices(int[]),25,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/AttributeDefinitionBands,addSyntheticDefinitions,() → void,org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.addSyntheticDefinitions(),71,0,0.0,12,0,0.0,7,13,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/AttributeDefinitionBands,finaliseBands,() → void,org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.finaliseBands(),9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/AttributeDefinitionBands,getClassAttributeLayouts,() → java.util.List,org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.getClassAttributeLayouts(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/AttributeDefinitionBands,getCodeAttributeLayouts,() → java.util.List,org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.getCodeAttributeLayouts(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/AttributeDefinitionBands,getFieldAttributeLayouts,() → java.util.List,org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.getFieldAttributeLayouts(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/AttributeDefinitionBands,getMethodAttributeLayouts,() → java.util.List,org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.getMethodAttributeLayouts(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/AttributeDefinitionBands,pack,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.pack(OutputStream),134,0,0.0,2,0,0.0,2,19,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/AttributeDefinitionBands,lambda$addAttributeDefinitions$0,"(int[], int, java.lang.String, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.lambda$addAttributeDefinitions$0(int[],int,String,String)",49,0,0.0,5,0,0.0,5,12,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPString,<init>,(org.apache.commons.compress.harmony.pack200.CPUTF8) → void,org.apache.commons.compress.harmony.pack200.CPString.<init>(CPUTF8),10,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPString,compareTo,(org.apache.commons.compress.harmony.pack200.CPString) → int,org.apache.commons.compress.harmony.pack200.CPString.compareTo(CPString),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPString,getIndexInCpUtf8,() → int,org.apache.commons.compress.harmony.pack200.CPString.getIndexInCpUtf8(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPString,toString,() → java.lang.String,org.apache.commons.compress.harmony.pack200.CPString.toString(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$ArrayVisitor,<init>,"(org.apache.commons.compress.harmony.pack200.Segment, java.util.List, java.util.List, java.util.List, java.util.List) → void","org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.<init>(Segment,List,List,List,List)",25,0,0.0,0,0,coverage not available since no branches,1,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$ArrayVisitor,visit,"(java.lang.String, java.lang.Object) → void","org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visit(String,Object)",30,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$ArrayVisitor,visitAnnotation,"(java.lang.String, java.lang.String) → org.objectweb.asm.AnnotationVisitor","org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitAnnotation(String,String)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$ArrayVisitor,visitArray,(java.lang.String) → org.objectweb.asm.AnnotationVisitor,org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitArray(String),34,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$ArrayVisitor,visitEnd,() → void,org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitEnd(),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Segment$ArrayVisitor,visitEnum,"(java.lang.String, java.lang.String, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitEnum(String,String,String)",35,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Replication,<init>,"(org.apache.commons.compress.harmony.pack200.NewAttributeBands, java.lang.String, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.<init>(NewAttributeBands,String,String)",36,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Replication,addAttributeToBand,"(org.apache.commons.compress.harmony.pack200.NewAttribute, java.io.InputStream) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.addAttributeToBand(NewAttribute,InputStream)",33,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Replication,getCountElement,() → org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.getCountElement(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Replication,getLayoutElements,() → java.util.List,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.getLayoutElements(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Replication,pack,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.pack(OutputStream),20,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Replication,renumberBci,"(org.apache.commons.compress.harmony.pack200.IntList, java.util.Map) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.renumberBci(IntList,Map)",17,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/Pack200Exception,<init>,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.Pack200Exception.<init>(String),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/MetadataBandGroup,<init>,"(java.lang.String, int, org.apache.commons.compress.harmony.pack200.CpBands, org.apache.commons.compress.harmony.pack200.SegmentHeader, int) → void","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<init>(String,int,CpBands,SegmentHeader,int)",104,0,0.0,0,0,coverage not available since no branches,1,23,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/MetadataBandGroup,addAnnotation,"(java.lang.String, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List) → void","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List)",185,0,0.0,14,0,0.0,11,34,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/MetadataBandGroup,addParameterAnnotation,"(int, int[], org.apache.commons.compress.harmony.pack200.IntList, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List) → void","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List)",205,0,0.0,16,0,0.0,12,37,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/MetadataBandGroup,hasContent,() → boolean,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.hasContent(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/MetadataBandGroup,incrementAnnoN,() → void,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.incrementAnnoN(),9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/MetadataBandGroup,newEntryInAnnoN,() → void,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.newEntryInAnnoN(),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/MetadataBandGroup,nextString,(java.util.Iterator) → java.lang.String,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.nextString(Iterator),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/MetadataBandGroup,numBackwardsCalls,() → int,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.numBackwardsCalls(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/MetadataBandGroup,pack,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.pack(OutputStream),945,0,0.0,10,0,0.0,6,64,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/MetadataBandGroup,removeLatest,() → void,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.removeLatest(),44,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/MetadataBandGroup,removeOnePair,() → void,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.removeOnePair(),146,0,0.0,13,0,0.0,11,26,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/MetadataBandGroup,tagListToArray,(java.util.List) → int[],org.apache.commons.compress.harmony.pack200.MetadataBandGroup.tagListToArray(List),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/MetadataBandGroup,lambda$tagListToArray$7,(java.lang.String) → int,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.lambda$tagListToArray$7(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/MetadataBandGroup,lambda$addParameterAnnotation$6,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.lambda$addParameterAnnotation$6(String),9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/MetadataBandGroup,lambda$addParameterAnnotation$5,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.lambda$addParameterAnnotation$5(String),9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/MetadataBandGroup,lambda$addParameterAnnotation$4,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.lambda$addParameterAnnotation$4(String),9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/MetadataBandGroup,lambda$addParameterAnnotation$3,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.lambda$addParameterAnnotation$3(String),9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/MetadataBandGroup,lambda$addAnnotation$2,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.lambda$addAnnotation$2(String),9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/MetadataBandGroup,lambda$addAnnotation$1,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.lambda$addAnnotation$1(String),9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/MetadataBandGroup,lambda$addAnnotation$0,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.lambda$addAnnotation$0(String),9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/RunCodec,<init>,"(int, org.apache.commons.compress.harmony.pack200.Codec, org.apache.commons.compress.harmony.pack200.Codec) → void","org.apache.commons.compress.harmony.pack200.RunCodec.<init>(int,Codec,Codec)",10,18,0.6428571428571429,3,3,0.5,4,2,7,0.7777777777777778,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/RunCodec,decode,(java.io.InputStream) → int,org.apache.commons.compress.harmony.pack200.RunCodec.decode(InputStream),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/RunCodec,decode,"(java.io.InputStream, long) → int","org.apache.commons.compress.harmony.pack200.RunCodec.decode(InputStream,long)",16,30,0.6521739130434783,1,3,0.75,3,2,4,0.6666666666666666,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/RunCodec,decodeInts,"(int, java.io.InputStream) → int[]","org.apache.commons.compress.harmony.pack200.RunCodec.decodeInts(int,InputStream)",60,0,0.0,0,0,coverage not available since no branches,1,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/RunCodec,encode,(int) → byte[],org.apache.commons.compress.harmony.pack200.RunCodec.encode(int),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/RunCodec,encode,"(int, int) → byte[]","org.apache.commons.compress.harmony.pack200.RunCodec.encode(int,int)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/RunCodec,getACodec,() → org.apache.commons.compress.harmony.pack200.Codec,org.apache.commons.compress.harmony.pack200.RunCodec.getACodec(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/RunCodec,getBCodec,() → org.apache.commons.compress.harmony.pack200.Codec,org.apache.commons.compress.harmony.pack200.RunCodec.getBCodec(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/RunCodec,getK,() → int,org.apache.commons.compress.harmony.pack200.RunCodec.getK(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/RunCodec,normalise,"(int, org.apache.commons.compress.harmony.pack200.Codec) → int","org.apache.commons.compress.harmony.pack200.RunCodec.normalise(int,Codec)",27,11,0.2894736842105263,6,2,0.25,5,5,4,0.4444444444444444,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/RunCodec,normalise,"(int[], org.apache.commons.compress.harmony.pack200.Codec) → void","org.apache.commons.compress.harmony.pack200.RunCodec.normalise(int[],Codec)",144,0,0.0,26,0,0.0,14,25,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/RunCodec,toString,() → java.lang.String,org.apache.commons.compress.harmony.pack200.RunCodec.toString(),22,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPMethodOrField,<init>,"(org.apache.commons.compress.harmony.pack200.CPClass, org.apache.commons.compress.harmony.pack200.CPNameAndType) → void","org.apache.commons.compress.harmony.pack200.CPMethodOrField.<init>(CPClass,CPNameAndType)",15,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPMethodOrField,compareTo,(java.lang.Object) → int,org.apache.commons.compress.harmony.pack200.CPMethodOrField.compareTo(Object),24,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPMethodOrField,getClassIndex,() → int,org.apache.commons.compress.harmony.pack200.CPMethodOrField.getClassIndex(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPMethodOrField,getClassName,() → org.apache.commons.compress.harmony.pack200.CPClass,org.apache.commons.compress.harmony.pack200.CPMethodOrField.getClassName(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPMethodOrField,getDesc,() → org.apache.commons.compress.harmony.pack200.CPNameAndType,org.apache.commons.compress.harmony.pack200.CPMethodOrField.getDesc(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPMethodOrField,getDescIndex,() → int,org.apache.commons.compress.harmony.pack200.CPMethodOrField.getDescIndex(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPMethodOrField,getIndexInClass,() → int,org.apache.commons.compress.harmony.pack200.CPMethodOrField.getIndexInClass(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPMethodOrField,getIndexInClassForConstructor,() → int,org.apache.commons.compress.harmony.pack200.CPMethodOrField.getIndexInClassForConstructor(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPMethodOrField,setIndexInClass,(int) → void,org.apache.commons.compress.harmony.pack200.CPMethodOrField.setIndexInClass(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPMethodOrField,setIndexInClassForConstructor,(int) → void,org.apache.commons.compress.harmony.pack200.CPMethodOrField.setIndexInClassForConstructor(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/CPMethodOrField,toString,() → java.lang.String,org.apache.commons.compress.harmony.pack200.CPMethodOrField.toString(),13,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,<init>,() → void,org.apache.commons.compress.harmony.pack200.PackingOptions.<init>(),0,49,1.0,0,0,coverage not available since no branches,1,0,13,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,addClassAttributeAction,"(java.lang.String, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.PackingOptions.addClassAttributeAction(String,String)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,addCodeAttributeAction,"(java.lang.String, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.PackingOptions.addCodeAttributeAction(String,String)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,addFieldAttributeAction,"(java.lang.String, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.PackingOptions.addFieldAttributeAction(String,String)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,addMethodAttributeAction,"(java.lang.String, java.lang.String) → void","org.apache.commons.compress.harmony.pack200.PackingOptions.addMethodAttributeAction(String,String)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,addOrUpdateAttributeActions,"(java.util.List, java.util.Map, int) → void","org.apache.commons.compress.harmony.pack200.PackingOptions.addOrUpdateAttributeActions(List,Map,int)",94,0,0.0,16,0,0.0,10,24,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,addPassFile,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.PackingOptions.addPassFile(String),25,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,getDeflateHint,() → java.lang.String,org.apache.commons.compress.harmony.pack200.PackingOptions.getDeflateHint(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,getEffort,() → int,org.apache.commons.compress.harmony.pack200.PackingOptions.getEffort(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,getLogFile,() → java.lang.String,org.apache.commons.compress.harmony.pack200.PackingOptions.getLogFile(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,getModificationTime,() → java.lang.String,org.apache.commons.compress.harmony.pack200.PackingOptions.getModificationTime(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,getOrDefault,"(java.util.Map, java.lang.String, java.lang.String) → java.lang.String","org.apache.commons.compress.harmony.pack200.PackingOptions.getOrDefault(Map,String,String)",10,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,getSegmentLimit,() → long,org.apache.commons.compress.harmony.pack200.PackingOptions.getSegmentLimit(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,getUnknownAttributeAction,() → java.lang.String,org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownAttributeAction(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,getUnknownAttributePrototypes,() → org.objectweb.asm.Attribute[],org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownAttributePrototypes(),40,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,getUnknownClassAttributeAction,(java.lang.String) → java.lang.String,org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownClassAttributeAction(String),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,getUnknownCodeAttributeAction,(java.lang.String) → java.lang.String,org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownCodeAttributeAction(String),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,getUnknownFieldAttributeAction,(java.lang.String) → java.lang.String,org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownFieldAttributeAction(String),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,getUnknownMethodAttributeAction,(java.lang.String) → java.lang.String,org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownMethodAttributeAction(String),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,isGzip,() → boolean,org.apache.commons.compress.harmony.pack200.PackingOptions.isGzip(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,isKeepDeflateHint,() → boolean,org.apache.commons.compress.harmony.pack200.PackingOptions.isKeepDeflateHint(),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,isKeepFileOrder,() → boolean,org.apache.commons.compress.harmony.pack200.PackingOptions.isKeepFileOrder(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,isPassFile,(java.lang.String) → boolean,org.apache.commons.compress.harmony.pack200.PackingOptions.isPassFile(String),41,0,0.0,8,0,0.0,5,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,isStripDebug,() → boolean,org.apache.commons.compress.harmony.pack200.PackingOptions.isStripDebug(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,isVerbose,() → boolean,org.apache.commons.compress.harmony.pack200.PackingOptions.isVerbose(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,removePassFile,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.PackingOptions.removePassFile(String),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,setDeflateHint,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.PackingOptions.setDeflateHint(String),30,0,0.0,6,0,0.0,4,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,setEffort,(int) → void,org.apache.commons.compress.harmony.pack200.PackingOptions.setEffort(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,setGzip,(boolean) → void,org.apache.commons.compress.harmony.pack200.PackingOptions.setGzip(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,setKeepFileOrder,(boolean) → void,org.apache.commons.compress.harmony.pack200.PackingOptions.setKeepFileOrder(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,setLogFile,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.PackingOptions.setLogFile(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,setModificationTime,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.PackingOptions.setModificationTime(String),26,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,setQuiet,(boolean) → void,org.apache.commons.compress.harmony.pack200.PackingOptions.setQuiet(boolean),8,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,setSegmentLimit,(long) → void,org.apache.commons.compress.harmony.pack200.PackingOptions.setSegmentLimit(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,setStripDebug,(boolean) → void,org.apache.commons.compress.harmony.pack200.PackingOptions.setStripDebug(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,setUnknownAttributeAction,(java.lang.String) → void,org.apache.commons.compress.harmony.pack200.PackingOptions.setUnknownAttributeAction(String),28,0,0.0,6,0,0.0,4,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,setVerbose,(boolean) → void,org.apache.commons.compress.harmony.pack200.PackingOptions.setVerbose(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/PackingOptions,<clinit>,() → void,org.apache.commons.compress.harmony.pack200.PackingOptions.<clinit>(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/BandSet$BandAnalysisResults,<init>,(org.apache.commons.compress.harmony.pack200.BandSet) → void,org.apache.commons.compress.harmony.pack200.BandSet$BandAnalysisResults.<init>(BandSet),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,<init>,() → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.<init>(),0,25,1.0,0,0,coverage not available since no branches,1,0,7,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,addMajorVersion,(int) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.addMajorVersion(int),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,appendBandCodingSpecifier,(int) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.appendBandCodingSpecifier(int),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,calculateArchiveOptions,() → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.calculateArchiveOptions(),116,0,0.0,28,0,0.0,15,23,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,getArchive_modtime,() → int,org.apache.commons.compress.harmony.pack200.SegmentHeader.getArchive_modtime(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,getDefaultMajorVersion,() → int,org.apache.commons.compress.harmony.pack200.SegmentHeader.getDefaultMajorVersion(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,have_all_code_flags,() → boolean,org.apache.commons.compress.harmony.pack200.SegmentHeader.have_all_code_flags(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,have_class_flags_hi,() → boolean,org.apache.commons.compress.harmony.pack200.SegmentHeader.have_class_flags_hi(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,have_code_flags_hi,() → boolean,org.apache.commons.compress.harmony.pack200.SegmentHeader.have_code_flags_hi(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,have_field_flags_hi,() → boolean,org.apache.commons.compress.harmony.pack200.SegmentHeader.have_field_flags_hi(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,have_file_modtime,() → boolean,org.apache.commons.compress.harmony.pack200.SegmentHeader.have_file_modtime(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,have_file_options,() → boolean,org.apache.commons.compress.harmony.pack200.SegmentHeader.have_file_options(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,have_file_size_hi,() → boolean,org.apache.commons.compress.harmony.pack200.SegmentHeader.have_file_size_hi(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,have_method_flags_hi,() → boolean,org.apache.commons.compress.harmony.pack200.SegmentHeader.have_method_flags_hi(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,pack,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.pack(OutputStream),52,0,0.0,2,0,0.0,2,12,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setAttribute_definition_count,(int) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setAttribute_definition_count(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setClass_count,(int) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setClass_count(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setCp_Class_count,(int) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Class_count(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setCp_Descr_count,(int) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Descr_count(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setCp_Double_count,(int) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Double_count(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setCp_Field_count,(int) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Field_count(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setCp_Float_count,(int) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Float_count(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setCp_Imethod_count,(int) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Imethod_count(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setCp_Int_count,(int) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Int_count(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setCp_Long_count,(int) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Long_count(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setCp_Method_count,(int) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Method_count(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setCp_Signature_count,(int) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Signature_count(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setCp_String_count,(int) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_String_count(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setCp_Utf8_count,(int) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Utf8_count(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setDeflate_hint,(boolean) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setDeflate_hint(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setFile_count,(int) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setFile_count(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setHave_all_code_flags,(boolean) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_all_code_flags(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setHave_class_flags_hi,(boolean) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_class_flags_hi(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setHave_code_flags_hi,(boolean) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_code_flags_hi(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setHave_field_flags_hi,(boolean) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_field_flags_hi(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setHave_method_flags_hi,(boolean) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_method_flags_hi(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,setIc_count,(int) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.setIc_count(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,writeArchiveFileCounts,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.writeArchiveFileCounts(OutputStream),41,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,writeArchiveSpecialCounts,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.writeArchiveSpecialCounts(OutputStream),21,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,writeClassCounts,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.writeClassCounts(OutputStream),33,0,0.0,0,0,coverage not available since no branches,1,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,writeCpCounts,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.writeCpCounts(OutputStream),90,0,0.0,2,0,0.0,2,14,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/SegmentHeader,<clinit>,() → void,org.apache.commons.compress.harmony.pack200.SegmentHeader.<clinit>(),0,20,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Call,<init>,"(org.apache.commons.compress.harmony.pack200.NewAttributeBands, int) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.<init>(NewAttributeBands,int)",10,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Call,addAttributeToBand,"(org.apache.commons.compress.harmony.pack200.NewAttribute, java.io.InputStream) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.addAttributeToBand(NewAttribute,InputStream)",13,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Call,getCallable,() → org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.getCallable(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Call,getCallableIndex,() → int,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.getCallableIndex(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Call,pack,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.pack(OutputStream),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Call,renumberBci,"(org.apache.commons.compress.harmony.pack200.IntList, java.util.Map) → void","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.renumberBci(IntList,Map)",1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/pack200,org/apache/commons/compress/harmony/pack200/NewAttributeBands$Call,setCallable,(org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable) → void,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.setCallable(Callable),10,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/java/util/jar,org/apache/commons/compress/java/util/jar/Pack200,newInstance,"(java.lang.String, java.lang.String) → java.lang.Object","org.apache.commons.compress.java.util.jar.Pack200.newInstance(String,String)",0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/java/util/jar,org/apache/commons/compress/java/util/jar/Pack200,newPacker,() → org.apache.commons.compress.java.util.jar.Pack200$Packer,org.apache.commons.compress.java.util.jar.Pack200.newPacker(),0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/java/util/jar,org/apache/commons/compress/java/util/jar/Pack200,newUnpacker,() → org.apache.commons.compress.java.util.jar.Pack200$Unpacker,org.apache.commons.compress.java.util.jar.Pack200.newUnpacker(),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/java/util/jar,org/apache/commons/compress/java/util/jar/Pack200,lambda$newInstance$0,"(java.lang.String, java.lang.String) → java.lang.Object","org.apache.commons.compress.java.util.jar.Pack200.lambda$newInstance$0(String,String)",14,19,0.5757575757575758,1,1,0.5,2,3,4,0.5714285714285714,0,1,1.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream,matches,"(byte[], int) → boolean","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byte[],int)",22,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream,unmask,(long) → long,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.unmask(long),18,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream,<init>,"(java.io.InputStream, org.apache.commons.compress.compressors.snappy.FramedSnappyDialect) → void","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream,FramedSnappyDialect)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream,<init>,"(java.io.InputStream, int, org.apache.commons.compress.compressors.snappy.FramedSnappyDialect) → void","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream,int,FramedSnappyDialect)",52,0,0.0,4,0,0.0,3,14,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream,available,() → int,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.available(),19,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream,close,() → void,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.close(),10,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream,getCompressedCount,() → long,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.getCompressedCount(),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream,read,() → int,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(),17,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(byte[],int,int)",28,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream,readCrc,() → long,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readCrc(),22,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream,readNextBlock,() → void,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(),177,0,0.0,26,0,0.0,14,39,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream,readOnce,"(byte[], int, int) → int","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(byte[],int,int)",75,0,0.0,12,0,0.0,7,19,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream,readOneByte,() → int,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOneByte(),16,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream,readSize,() → int,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readSize(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream,readStreamIdentifier,() → void,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readStreamIdentifier(),24,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream,skipBlock,() → void,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.skipBlock(),30,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream,verifyLastChecksumAndReset,() → void,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.verifyLastChecksumAndReset(),24,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream,<clinit>,() → void,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<clinit>(),44,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream,mask,(long) → long,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.mask(long),18,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.<init>(OutputStream),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream,<init>,"(java.io.OutputStream, org.apache.commons.compress.compressors.lz77support.Parameters) → void","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.<init>(OutputStream,Parameters)",29,0,0.0,0,0,coverage not available since no branches,1,8,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream,close,() → void,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.close(),5,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream,finish,() → void,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.finish(),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream,flushBuffer,() → void,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.flushBuffer(),52,0,0.0,2,0,0.0,2,12,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.write(byte[],int,int)",49,0,0.0,4,0,0.0,3,13,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream,write,(int) → void,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.write(int),13,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream,writeCrc,() → void,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.writeCrc(),19,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream,writeLittleEndian,"(int, long) → void","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.writeLittleEndian(int,long)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream$State,<clinit>,() → void,org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream$State.<clinit>(),34,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,createParameterBuilder,(int) → org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.createParameterBuilder(int),11,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,<init>,"(java.io.OutputStream, long) → void","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,<init>,"(java.io.OutputStream, long, int) → void","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,int)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,<init>,"(java.io.OutputStream, long, org.apache.commons.compress.compressors.lz77support.Parameters) → void","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,Parameters)",25,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,close,() → void,org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.close(),5,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,finish,() → void,org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.finish(),9,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.write(byte[],int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,write,(int) → void,org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.write(int),13,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,writeBackReference,(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference) → void,org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReference(BackReference),33,0,0.0,8,0,0.0,5,8,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,writeBackReferenceWithFourOffsetBytes,"(int, int) → void","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithFourOffsetBytes(int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,writeBackReferenceWithLittleEndianOffset,"(int, int, int, int) → void","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithLittleEndianOffset(int,int,int,int)",15,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,writeBackReferenceWithOneOffsetByte,"(int, int) → void","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithOneOffsetByte(int,int)",23,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,writeBackReferenceWithTwoOffsetBytes,"(int, int) → void","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithTwoOffsetBytes(int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,writeLiteralBlock,(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock) → void,org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLiteralBlock(LiteralBlock),40,0,0.0,8,0,0.0,5,11,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,writeLiteralBlockFourSizeBytes,"(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock, int) → void","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLiteralBlockFourSizeBytes(LiteralBlock,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,writeLiteralBlockNoSizeBytes,"(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock, int) → void","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLiteralBlockNoSizeBytes(LiteralBlock,int)",11,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,writeLiteralBlockOneSizeByte,"(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock, int) → void","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLiteralBlockOneSizeByte(LiteralBlock,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,writeLiteralBlockThreeSizeBytes,"(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock, int) → void","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLiteralBlockThreeSizeBytes(LiteralBlock,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,writeLiteralBlockTwoSizeBytes,"(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock, int) → void","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLiteralBlockTwoSizeBytes(LiteralBlock,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,writeLiteralBlockWithSize,"(int, int, int, org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock) → void","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLiteralBlockWithSize(int,int,int,LiteralBlock)",19,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,writeLittleEndian,"(int, int) → void","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLittleEndian(int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,writeUncompressedSize,(long) → void,org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeUncompressedSize(long),31,0,0.0,6,0,0.0,4,8,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream,lambda$new$0,(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block) → void,org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.lambda$new$0(Block),17,0,0.0,3,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.<init>(InputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream,<init>,"(java.io.InputStream, int) → void","org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.<init>(InputStream,int)",16,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream,fill,() → void,org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.fill(),190,0,0.0,17,0,0.0,11,52,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream,getSize,() → int,org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.getSize(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(byte[],int,int)",80,0,0.0,16,0,0.0,10,16,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream,readLiteralLength,(int) → int,org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readLiteralLength(int),44,0,0.0,7,0,0.0,6,12,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream,readSize,() → long,org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readSize(),36,0,0.0,4,0,0.0,3,9,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyDialect,<init>,"(java.lang.String, int, boolean, boolean) → void","org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.<init>(String,int,boolean,boolean)",11,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyDialect,hasStreamIdentifier,() → boolean,org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.hasStreamIdentifier(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyDialect,usesChecksumWithCompressedChunks,() → boolean,org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.usesChecksumWithCompressedChunks(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/snappy,org/apache/commons/compress/compressors/snappy/FramedSnappyDialect,<clinit>,() → void,org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.<clinit>(),28,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$Builder,<init>,() → void,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.<init>(),15,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$Builder,get,() → org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.get(),72,0,0.0,8,0,0.0,5,14,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$Builder,setDefaultName,(java.lang.String) → org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setDefaultName(String),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$Builder,setMaxMemoryLimitKb,(int) → org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setMaxMemoryLimitKb(int),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$Builder,setMaxMemoryLimitKiB,(int) → org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setMaxMemoryLimitKiB(int),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$Builder,setPassword,(byte[]) → org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setPassword(byte[]),11,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$Builder,setPassword,(char[]) → org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setPassword(char[]),12,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$Builder,setPassword,(java.lang.String) → org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setPassword(String),11,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$Builder,setSeekableByteChannel,(java.nio.channels.SeekableByteChannel) → org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setSeekableByteChannel(SeekableByteChannel),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$Builder,setTryToRecoverBrokenArchives,(boolean) → org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setTryToRecoverBrokenArchives(boolean),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$Builder,setUseDefaultNameForUnnamedEntries,(boolean) → org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setUseDefaultNameForUnnamedEntries(boolean),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$BCJDecoder,<init>,(org.tukaani.xz.FilterOptions) → void,org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.<init>(FilterOptions),0,8,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$BCJDecoder,decode,"(java.lang.String, java.io.InputStream, long, org.apache.commons.compress.archivers.sevenz.Coder, byte[], int) → java.io.InputStream","org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.decode(String,InputStream,long,Coder,byte[],int)",21,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$BCJDecoder,encode,"(java.io.OutputStream, java.lang.Object) → java.io.OutputStream","org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.encode(OutputStream,Object)",11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/CLI$Mode,<init>,"(java.lang.String, int, java.lang.String) → void","org.apache.commons.compress.archivers.sevenz.CLI$Mode.<init>(String,int,String)",8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/CLI$Mode,getMessage,() → java.lang.String,org.apache.commons.compress.archivers.sevenz.CLI$Mode.getMessage(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/CLI$Mode,<clinit>,() → void,org.apache.commons.compress.archivers.sevenz.CLI$Mode.<clinit>(),15,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZMethodConfiguration,<init>,(org.apache.commons.compress.archivers.sevenz.SevenZMethod) → void,org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.<init>(SevenZMethod),0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZMethodConfiguration,<init>,"(org.apache.commons.compress.archivers.sevenz.SevenZMethod, java.lang.Object) → void","org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.<init>(SevenZMethod,Object)",0,33,1.0,1,3,0.75,3,0,6,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZMethodConfiguration,equals,(java.lang.Object) → boolean,org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.equals(Object),0,33,1.0,1,9,0.9,6,0,6,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZMethodConfiguration,getMethod,() → org.apache.commons.compress.archivers.sevenz.SevenZMethod,org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getMethod(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZMethodConfiguration,getOptions,() → java.lang.Object,org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZMethodConfiguration,hashCode,() → int,org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.hashCode(),9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SubStreamsInfo,<init>,(int) → void,org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.<init>(int),17,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Archive,<init>,() → void,org.apache.commons.compress.archivers.sevenz.Archive.<init>(),13,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Archive,lengthOf,(long[]) → java.lang.String,org.apache.commons.compress.archivers.sevenz.Archive.lengthOf(long[]),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Archive,lengthOf,(java.lang.Object[]) → java.lang.String,org.apache.commons.compress.archivers.sevenz.Archive.lengthOf(Object[]),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Archive,toString,() → java.lang.String,org.apache.commons.compress.archivers.sevenz.Archive.toString(),39,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256Options,newSecretKeySpec,(byte[]) → javax.crypto.spec.SecretKeySpec,org.apache.commons.compress.archivers.sevenz.AES256Options.newSecretKeySpec(byte[]),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256Options,randomBytes,(int) → byte[],org.apache.commons.compress.archivers.sevenz.AES256Options.randomBytes(int),7,9,0.5625,0,0,coverage not available since no branches,1,2,4,0.6666666666666666,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256Options,<init>,(char[]) → void,org.apache.commons.compress.archivers.sevenz.AES256Options.<init>(char[]),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256Options,<init>,"(char[], byte[], byte[], int) → void","org.apache.commons.compress.archivers.sevenz.AES256Options.<init>(char[],byte[],byte[],int)",30,11,0.2682926829268293,0,0,coverage not available since no branches,1,8,4,0.3333333333333333,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256Options,getCipher,() → javax.crypto.Cipher,org.apache.commons.compress.archivers.sevenz.AES256Options.getCipher(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256Options,getIv,() → byte[],org.apache.commons.compress.archivers.sevenz.AES256Options.getIv(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256Options,getNumCyclesPower,() → int,org.apache.commons.compress.archivers.sevenz.AES256Options.getNumCyclesPower(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256Options,getSalt,() → byte[],org.apache.commons.compress.archivers.sevenz.AES256Options.getSalt(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256Options,<clinit>,() → void,org.apache.commons.compress.archivers.sevenz.AES256Options.<clinit>(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,javaTimeToNtfsTime,(java.util.Date) → long,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.javaTimeToNtfsTime(Date),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,ntfsTimeToJavaTime,(long) → java.util.Date,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.ntfsTimeToJavaTime(long),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,<init>,() → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,equals,(java.lang.Object) → boolean,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.equals(Object),121,0,0.0,42,0,0.0,22,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,equalSevenZMethods,"(java.lang.Iterable, java.lang.Iterable) → boolean","org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.equalSevenZMethods(Iterable,Iterable)",43,0,0.0,14,0,0.0,8,10,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,getAccessDate,() → java.util.Date,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getAccessDate(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,getAccessTime,() → java.nio.file.attribute.FileTime,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getAccessTime(),11,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,getCompressedCrc,() → int,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedCrc(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,getCompressedCrcValue,() → long,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedCrcValue(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,getCompressedSize,() → long,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedSize(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,getContentMethods,() → java.lang.Iterable,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getContentMethods(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,getCrc,() → int,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCrc(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,getCrcValue,() → long,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCrcValue(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,getCreationDate,() → java.util.Date,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCreationDate(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,getCreationTime,() → java.nio.file.attribute.FileTime,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCreationTime(),11,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,getHasAccessDate,() → boolean,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasAccessDate(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,getHasCrc,() → boolean,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCrc(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,getHasCreationDate,() → boolean,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCreationDate(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,getHasLastModifiedDate,() → boolean,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasLastModifiedDate(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,getHasWindowsAttributes,() → boolean,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasWindowsAttributes(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,getLastModifiedDate,() → java.util.Date,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getLastModifiedDate(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,getLastModifiedTime,() → java.nio.file.attribute.FileTime,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getLastModifiedTime(),11,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,getName,() → java.lang.String,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,getSize,() → long,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getSize(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,getWindowsAttributes,() → int,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getWindowsAttributes(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,hashCode,() → int,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hashCode(),10,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,hasStream,() → boolean,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,isAntiItem,() → boolean,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isAntiItem(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,isDirectory,() → boolean,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setAccessDate,(java.util.Date) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(Date),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setAccessDate,(long) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(long),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setAccessTime,(java.nio.file.attribute.FileTime) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessTime(FileTime),14,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setAntiItem,(boolean) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAntiItem(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setCompressedCrc,(int) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrc(int),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setCompressedCrcValue,(long) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrcValue(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setCompressedSize,(long) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedSize(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setContentMethods,(java.lang.Iterable) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(Iterable),22,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setContentMethods,(org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[]) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(SevenZMethodConfiguration[]),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setCrc,(int) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrc(int),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setCrcValue,(long) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrcValue(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setCreationDate,(java.util.Date) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(Date),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setCreationDate,(long) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(long),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setCreationTime,(java.nio.file.attribute.FileTime) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationTime(FileTime),14,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setDirectory,(boolean) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setDirectory(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setHasAccessDate,(boolean) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasAccessDate(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setHasCrc,(boolean) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCrc(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setHasCreationDate,(boolean) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCreationDate(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setHasLastModifiedDate,(boolean) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasLastModifiedDate(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setHasStream,(boolean) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasStream(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setHasWindowsAttributes,(boolean) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasWindowsAttributes(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setLastModifiedDate,(java.util.Date) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(Date),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setLastModifiedDate,(long) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(long),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setLastModifiedTime,(java.nio.file.attribute.FileTime) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedTime(FileTime),14,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setName,(java.lang.String) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setName(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setSize,(long) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setSize(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,setWindowsAttributes,(int) → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setWindowsAttributes(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry,<clinit>,() → void,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.<clinit>(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile$1,<init>,"(org.apache.commons.compress.archivers.sevenz.SevenZOutputFile, java.io.OutputStream) → void","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1.<init>(SevenZOutputFile,OutputStream)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile$1,write,(byte[]) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1.write(byte[]),9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile$1,write,"(byte[], int, int) → void","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1.write(byte[],int,int)",13,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile$1,write,(int) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$1.write(int),9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/LZMADecoder,<init>,() → void,org.apache.commons.compress.archivers.sevenz.LZMADecoder.<init>(),0,13,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/LZMADecoder,decode,"(java.lang.String, java.io.InputStream, long, org.apache.commons.compress.archivers.sevenz.Coder, byte[], int) → java.io.InputStream","org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[],int)",68,0,0.0,8,0,0.0,5,14,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/LZMADecoder,encode,"(java.io.OutputStream, java.lang.Object) → java.io.OutputStream","org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(OutputStream,Object)",12,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/LZMADecoder,getDictionarySize,(org.apache.commons.compress.archivers.sevenz.Coder) → int,org.apache.commons.compress.archivers.sevenz.LZMADecoder.getDictionarySize(Coder),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/LZMADecoder,getOptions,(java.lang.Object) → org.tukaani.xz.LZMA2Options,org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(Object),17,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/LZMADecoder,getOptionsAsProperties,(java.lang.Object) → byte[],org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(Object),36,0,0.0,0,0,coverage not available since no branches,1,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/LZMADecoder,getOptionsFromCoder,"(org.apache.commons.compress.archivers.sevenz.Coder, java.io.InputStream) → java.lang.Object","org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(Coder,InputStream)",67,0,0.0,4,0,0.0,3,15,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/LZMADecoder,numberOptionOrDefault,(java.lang.Object) → int,org.apache.commons.compress.archivers.sevenz.LZMADecoder.numberOptionOrDefault(Object),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$1,<init>,"(org.apache.commons.compress.archivers.sevenz.SevenZFile, java.io.InputStream) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile$1.<init>(SevenZFile,InputStream)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$1,count,(int) → void,org.apache.commons.compress.archivers.sevenz.SevenZFile$1.count(int),11,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$1,read,() → int,org.apache.commons.compress.archivers.sevenz.SevenZFile$1.read(),11,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$1,read,(byte[]) → int,org.apache.commons.compress.archivers.sevenz.SevenZFile$1.read(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$1,read,"(byte[], int, int) → int","org.apache.commons.compress.archivers.sevenz.SevenZFile$1.read(byte[],int,int)",18,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$2,<init>,(org.apache.commons.compress.archivers.sevenz.SevenZFile) → void,org.apache.commons.compress.archivers.sevenz.SevenZFile$2.<init>(SevenZFile),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$2,getCompressedCount,() → long,org.apache.commons.compress.archivers.sevenz.SevenZFile$2.getCompressedCount(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$2,getUncompressedCount,() → long,org.apache.commons.compress.archivers.sevenz.SevenZFile$2.getUncompressedCount(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$DeflateDecoder$DeflateDecoderInputStream,<init>,"(java.util.zip.InflaterInputStream, java.util.zip.Inflater) → void","org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderInputStream.<init>(InflaterInputStream,Inflater)",7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$DeflateDecoder$DeflateDecoderInputStream,close,() → void,org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderInputStream.close(),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder$AES256SHA256DecoderInputStream,<init>,"(java.io.InputStream, org.apache.commons.compress.archivers.sevenz.Coder, java.lang.String, byte[]) → void","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.<init>(InputStream,Coder,String,byte[])",15,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder$AES256SHA256DecoderInputStream,close,() → void,org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.close(),7,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder$AES256SHA256DecoderInputStream,init,() → javax.crypto.CipherInputStream,org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.init(),206,0,0.0,12,0,0.0,7,32,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder$AES256SHA256DecoderInputStream,read,() → int,org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.read(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder$AES256SHA256DecoderInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.read(byte[],int,int)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$DeflateDecoder,<init>,() → void,org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.<init>(),0,9,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$DeflateDecoder,decode,"(java.lang.String, java.io.InputStream, long, org.apache.commons.compress.archivers.sevenz.Coder, byte[], int) → java.io.InputStream","org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.decode(String,InputStream,long,Coder,byte[],int)",24,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$DeflateDecoder,encode,"(java.io.OutputStream, java.lang.Object) → java.io.OutputStream","org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.encode(OutputStream,Object)",22,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$DeflateDecoder,<clinit>,() → void,org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.<clinit>(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream,<init>,"(java.nio.channels.SeekableByteChannel, long) → void","org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.<init>(SeekableByteChannel,long)",24,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream,close,() → void,org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.close(),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream,read,() → int,org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(),27,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(byte[],int,int)",64,0,0.0,10,0,0.0,6,17,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream,read,(int) → int,org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(int),18,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,assertFitsIntoNonNegativeInt,"(java.lang.String, long) → int","org.apache.commons.compress.archivers.sevenz.SevenZFile.assertFitsIntoNonNegativeInt(String,long)",28,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,builder,() → org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFile.builder(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,checkEndOfFile,"(java.nio.ByteBuffer, int) → java.nio.ByteBuffer","org.apache.commons.compress.archivers.sevenz.SevenZFile.checkEndOfFile(ByteBuffer,int)",26,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,get,"(java.nio.ByteBuffer, byte[]) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.get(ByteBuffer,byte[])",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,getChar,(java.nio.ByteBuffer) → char,org.apache.commons.compress.archivers.sevenz.SevenZFile.getChar(ByteBuffer),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,getInt,(java.nio.ByteBuffer) → int,org.apache.commons.compress.archivers.sevenz.SevenZFile.getInt(ByteBuffer),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,getLong,(java.nio.ByteBuffer) → long,org.apache.commons.compress.archivers.sevenz.SevenZFile.getLong(ByteBuffer),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,getUnsignedByte,(java.nio.ByteBuffer) → int,org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer),12,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,matches,"(byte[], int) → boolean","org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(byte[],int)",25,0,0.0,6,0,0.0,4,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,newByteChannel,(java.io.File) → java.nio.channels.SeekableByteChannel,org.apache.commons.compress.archivers.sevenz.SevenZFile.newByteChannel(File),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,readUint64,(java.nio.ByteBuffer) → long,org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer),53,0,0.0,4,0,0.0,3,10,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,skipBytesFully,"(java.nio.ByteBuffer, long) → long","org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long)",29,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,<init>,(java.io.File) → void,org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,<init>,"(java.io.File, byte[]) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,byte[])",10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,<init>,"(java.io.File, char[]) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,char[])",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,<init>,"(java.io.File, char[], org.apache.commons.compress.archivers.sevenz.SevenZFileOptions) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,char[],SevenZFileOptions)",11,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,<init>,"(java.io.File, org.apache.commons.compress.archivers.sevenz.SevenZFileOptions) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,SevenZFileOptions)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,<init>,(java.nio.channels.SeekableByteChannel) → void,org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,<init>,"(java.nio.channels.SeekableByteChannel, byte[]) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,byte[])",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,<init>,"(java.nio.channels.SeekableByteChannel, char[]) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,char[])",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,<init>,"(java.nio.channels.SeekableByteChannel, char[], org.apache.commons.compress.archivers.sevenz.SevenZFileOptions) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,char[],SevenZFileOptions)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,<init>,"(java.nio.channels.SeekableByteChannel, org.apache.commons.compress.archivers.sevenz.SevenZFileOptions) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,SevenZFileOptions)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,<init>,"(java.nio.channels.SeekableByteChannel, java.lang.String) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,<init>,"(java.nio.channels.SeekableByteChannel, java.lang.String, byte[]) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[])",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,<init>,"(java.nio.channels.SeekableByteChannel, java.lang.String, byte[], boolean, int, boolean, boolean) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean)",57,0,0.0,6,0,0.0,4,18,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,<init>,"(java.nio.channels.SeekableByteChannel, java.lang.String, byte[], boolean, org.apache.commons.compress.archivers.sevenz.SevenZFileOptions) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions)",13,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,<init>,"(java.nio.channels.SeekableByteChannel, java.lang.String, char[]) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[])",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,<init>,"(java.nio.channels.SeekableByteChannel, java.lang.String, char[], org.apache.commons.compress.archivers.sevenz.SevenZFileOptions) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[],SevenZFileOptions)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,<init>,"(java.nio.channels.SeekableByteChannel, java.lang.String, org.apache.commons.compress.archivers.sevenz.SevenZFileOptions) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,SevenZFileOptions)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,buildDecoderStack,"(org.apache.commons.compress.archivers.sevenz.Folder, long, int, org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) → java.io.InputStream","org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry)",106,0,0.0,8,0,0.0,5,19,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,buildDecodingStream,"(int, boolean) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(int,boolean)",133,0,0.0,22,0,0.0,12,36,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,calculateStreamMap,(org.apache.commons.compress.archivers.sevenz.Archive) → void,org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(Archive),157,0,0.0,24,0,0.0,13,36,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,checkEntryIsInitialized,"(java.util.Map, int) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.checkEntryIsInitialized(Map,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,close,() → void,org.apache.commons.compress.archivers.sevenz.SevenZFile.close(),20,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,getCurrentStream,() → java.io.InputStream,org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream(),52,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,getDefaultName,() → java.lang.String,org.apache.commons.compress.archivers.sevenz.SevenZFile.getDefaultName(),37,0,0.0,6,0,0.0,4,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,getEntries,() → java.lang.Iterable,org.apache.commons.compress.archivers.sevenz.SevenZFile.getEntries(),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,getInputStream,(org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) → java.io.InputStream,org.apache.commons.compress.archivers.sevenz.SevenZFile.getInputStream(SevenZArchiveEntry),60,0,0.0,6,0,0.0,4,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,getNextEntry,() → org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(),47,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,getStatisticsForCurrentEntry,() → org.apache.commons.compress.utils.InputStreamStatistics,org.apache.commons.compress.archivers.sevenz.SevenZFile.getStatisticsForCurrentEntry(),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,hasCurrentEntryBeenRead,() → boolean,org.apache.commons.compress.archivers.sevenz.SevenZFile.hasCurrentEntryBeenRead(),57,0,0.0,10,0,0.0,6,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,initializeArchive,"(org.apache.commons.compress.archivers.sevenz.StartHeader, byte[], boolean) → org.apache.commons.compress.archivers.sevenz.Archive","org.apache.commons.compress.archivers.sevenz.SevenZFile.initializeArchive(StartHeader,byte[],boolean)",111,0,0.0,10,0,0.0,6,24,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,read,() → int,org.apache.commons.compress.archivers.sevenz.SevenZFile.read(),14,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,read,(byte[]) → int,org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,read,"(byte[], int, int) → int","org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[],int,int)",22,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,readAllOrBits,"(java.nio.ByteBuffer, int) → java.util.BitSet","org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(ByteBuffer,int)",29,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,readArchiveProperties,(java.nio.ByteBuffer) → void,org.apache.commons.compress.archivers.sevenz.SevenZFile.readArchiveProperties(ByteBuffer),22,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,readBits,"(java.nio.ByteBuffer, int) → java.util.BitSet","org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(ByteBuffer,int)",39,0,0.0,6,0,0.0,4,10,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,readEncodedHeader,"(java.nio.ByteBuffer, org.apache.commons.compress.archivers.sevenz.Archive, byte[]) → java.nio.ByteBuffer","org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(ByteBuffer,Archive,byte[])",160,0,0.0,18,0,0.0,10,34,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,readFilesInfo,"(java.nio.ByteBuffer, org.apache.commons.compress.archivers.sevenz.Archive) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(ByteBuffer,Archive)",402,0,0.0,60,0,0.0,35,96,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,readFolder,(java.nio.ByteBuffer) → org.apache.commons.compress.archivers.sevenz.Folder,org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(ByteBuffer),199,0,0.0,24,0,0.0,13,48,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,readFully,(java.nio.ByteBuffer) → void,org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(ByteBuffer),11,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,readHeader,"(java.nio.ByteBuffer, org.apache.commons.compress.archivers.sevenz.Archive) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(ByteBuffer,Archive)",56,0,0.0,8,0,0.0,5,17,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,readHeaders,(byte[]) → org.apache.commons.compress.archivers.sevenz.Archive,org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[]),111,0,0.0,14,0,0.0,8,28,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,readPackInfo,"(java.nio.ByteBuffer, org.apache.commons.compress.archivers.sevenz.Archive) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(ByteBuffer,Archive)",74,0,0.0,10,0,0.0,6,16,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,readStartHeader,(long) → org.apache.commons.compress.archivers.sevenz.StartHeader,org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long),86,0,0.0,8,0,0.0,5,15,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,readStreamsInfo,"(java.nio.ByteBuffer, org.apache.commons.compress.archivers.sevenz.Archive) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(ByteBuffer,Archive)",38,0,0.0,6,0,0.0,4,12,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,readSubStreamsInfo,"(java.nio.ByteBuffer, org.apache.commons.compress.archivers.sevenz.Archive) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(ByteBuffer,Archive)",281,0,0.0,38,0,0.0,20,53,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,readUnpackInfo,"(java.nio.ByteBuffer, org.apache.commons.compress.archivers.sevenz.Archive) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(ByteBuffer,Archive)",121,0,0.0,12,0,0.0,7,23,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,reopenFolderInputStream,"(int, org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.reopenFolderInputStream(int,SevenZArchiveEntry)",47,0,0.0,2,0,0.0,2,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,sanityCheckAndCollectStatistics,(java.nio.ByteBuffer) → org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics,org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckAndCollectStatistics(ByteBuffer),61,0,0.0,10,0,0.0,6,16,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,sanityCheckArchiveProperties,(java.nio.ByteBuffer) → void,org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckArchiveProperties(ByteBuffer),30,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,sanityCheckFilesInfo,"(java.nio.ByteBuffer, org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckFilesInfo(ByteBuffer,ArchiveStatistics)",300,0,0.0,47,0,0.0,29,62,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,sanityCheckFolder,"(java.nio.ByteBuffer, org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics) → int","org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckFolder(ByteBuffer,ArchiveStatistics)",258,0,0.0,36,0,0.0,19,51,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,sanityCheckPackInfo,"(java.nio.ByteBuffer, org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckPackInfo(ByteBuffer,ArchiveStatistics)",151,0,0.0,22,0,0.0,12,23,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,sanityCheckStreamsInfo,"(java.nio.ByteBuffer, org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckStreamsInfo(ByteBuffer,ArchiveStatistics)",41,0,0.0,8,0,0.0,5,13,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,sanityCheckSubStreamsInfo,"(java.nio.ByteBuffer, org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckSubStreamsInfo(ByteBuffer,ArchiveStatistics)",182,0,0.0,32,0,0.0,17,36,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,sanityCheckUnpackInfo,"(java.nio.ByteBuffer, org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics) → void","org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckUnpackInfo(ByteBuffer,ArchiveStatistics)",175,0,0.0,22,0,0.0,12,34,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,skipEntriesWhenNeeded,"(int, boolean, int) → boolean","org.apache.commons.compress.archivers.sevenz.SevenZFile.skipEntriesWhenNeeded(int,boolean,int)",96,0,0.0,12,0,0.0,7,25,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,toString,() → java.lang.String,org.apache.commons.compress.archivers.sevenz.SevenZFile.toString(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,tryToLocateEndHeader,(byte[]) → org.apache.commons.compress.archivers.sevenz.Archive,org.apache.commons.compress.archivers.sevenz.SevenZFile.tryToLocateEndHeader(byte[]),116,0,0.0,14,0,0.0,8,25,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,lambda$readFilesInfo$1,(int) → org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry[],org.apache.commons.compress.archivers.sevenz.SevenZFile.lambda$readFilesInfo$1(int),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,lambda$checkEntryIsInitialized$0,(java.lang.Integer) → org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZFile.lambda$checkEntryIsInitialized$0(Integer),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile,<clinit>,() → void,org.apache.commons.compress.archivers.sevenz.SevenZFile.<clinit>(),28,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$1,<init>,() → void,org.apache.commons.compress.archivers.sevenz.Coders$1.<init>(),0,119,1.0,0,0,coverage not available since no branches,1,0,16,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/CLI,<init>,() → void,org.apache.commons.compress.archivers.sevenz.CLI.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/CLI,grabMode,(java.lang.String[]) → org.apache.commons.compress.archivers.sevenz.CLI$Mode,org.apache.commons.compress.archivers.sevenz.CLI.grabMode(String[]),15,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/CLI,main,(java.lang.String[]) → void,org.apache.commons.compress.archivers.sevenz.CLI.main(String[]),62,0,0.0,6,0,0.0,4,12,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/CLI,usage,() → void,org.apache.commons.compress.archivers.sevenz.CLI.usage(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$BZIP2Decoder,<init>,() → void,org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.<init>(),0,9,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$BZIP2Decoder,decode,"(java.lang.String, java.io.InputStream, long, org.apache.commons.compress.archivers.sevenz.Coder, byte[], int) → java.io.InputStream","org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.decode(String,InputStream,long,Coder,byte[],int)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$BZIP2Decoder,encode,"(java.io.OutputStream, java.lang.Object) → java.io.OutputStream","org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.encode(OutputStream,Object)",10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$Deflate64Decoder,<init>,() → void,org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.<init>(),0,9,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$Deflate64Decoder,decode,"(java.lang.String, java.io.InputStream, long, org.apache.commons.compress.archivers.sevenz.Coder, byte[], int) → java.io.InputStream","org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.decode(String,InputStream,long,Coder,byte[],int)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$CopyDecoder,<init>,() → void,org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.<init>(),0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$CopyDecoder,decode,"(java.lang.String, java.io.InputStream, long, org.apache.commons.compress.archivers.sevenz.Coder, byte[], int) → java.io.InputStream","org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.decode(String,InputStream,long,Coder,byte[],int)",2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$CopyDecoder,encode,"(java.io.OutputStream, java.lang.Object) → java.io.OutputStream","org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.encode(OutputStream,Object)",2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZMethod,byId,(byte[]) → org.apache.commons.compress.archivers.sevenz.SevenZMethod,org.apache.commons.compress.archivers.sevenz.SevenZMethod.byId(byte[]),27,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZMethod,<init>,"(java.lang.String, int, byte[]) → void","org.apache.commons.compress.archivers.sevenz.SevenZMethod.<init>(String,int,byte[])",0,8,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZMethod,getId,() → byte[],org.apache.commons.compress.archivers.sevenz.SevenZMethod.getId(),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZMethod,<clinit>,() → void,org.apache.commons.compress.archivers.sevenz.SevenZMethod.<clinit>(),0,344,1.0,0,0,coverage not available since no branches,1,0,15,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders,<init>,() → void,org.apache.commons.compress.archivers.sevenz.Coders.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders,addDecoder,"(java.lang.String, java.io.InputStream, long, org.apache.commons.compress.archivers.sevenz.Coder, byte[], int) → java.io.InputStream","org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int)",34,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders,addEncoder,"(java.io.OutputStream, org.apache.commons.compress.archivers.sevenz.SevenZMethod, java.lang.Object) → java.io.OutputStream","org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(OutputStream,SevenZMethod,Object)",22,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders,findByMethod,(org.apache.commons.compress.archivers.sevenz.SevenZMethod) → org.apache.commons.compress.archivers.sevenz.AbstractCoder,org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(SevenZMethod),0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders,<clinit>,() → void,org.apache.commons.compress.archivers.sevenz.Coders.<clinit>(),0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/StreamMap,<init>,"(int[], long[], int[], int[]) → void","org.apache.commons.compress.archivers.sevenz.StreamMap.<init>(int[],long[],int[],int[])",15,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/StreamMap,toString,() → java.lang.String,org.apache.commons.compress.archivers.sevenz.StreamMap.toString(),31,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coder,<init>,"(byte[], long, long, byte[]) → void","org.apache.commons.compress.archivers.sevenz.Coder.<init>(byte[],long,long,byte[])",15,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/LZMA2Decoder,<init>,() → void,org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.<init>(),0,13,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/LZMA2Decoder,decode,"(java.lang.String, java.io.InputStream, long, org.apache.commons.compress.archivers.sevenz.Coder, byte[], int) → java.io.InputStream","org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[],int)",29,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/LZMA2Decoder,encode,"(java.io.OutputStream, java.lang.Object) → java.io.OutputStream","org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.encode(OutputStream,Object)",9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/LZMA2Decoder,getDictionarySize,(org.apache.commons.compress.archivers.sevenz.Coder) → int,org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictionarySize(Coder),59,0,0.0,10,0,0.0,6,12,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/LZMA2Decoder,getDictSize,(java.lang.Object) → int,org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictSize(Object),11,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/LZMA2Decoder,getOptions,(java.lang.Object) → org.tukaani.xz.LZMA2Options,org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptions(Object),17,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/LZMA2Decoder,getOptionsAsProperties,(java.lang.Object) → byte[],org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsAsProperties(Object),29,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/LZMA2Decoder,getOptionsFromCoder,"(org.apache.commons.compress.archivers.sevenz.Coder, java.io.InputStream) → java.lang.Object","org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsFromCoder(Coder,InputStream)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/LZMA2Decoder,numberOptionOrDefault,(java.lang.Object) → int,org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.numberOptionOrDefault(Object),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile$OutputStreamWrapper,<init>,(org.apache.commons.compress.archivers.sevenz.SevenZOutputFile) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.<init>(SevenZOutputFile),10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile$OutputStreamWrapper,close,() → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.close(),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile$OutputStreamWrapper,flush,() → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.flush(),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile$OutputStreamWrapper,write,(byte[]) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile$OutputStreamWrapper,write,"(byte[], int, int) → void","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(byte[],int,int)",50,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile$OutputStreamWrapper,write,(int) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(int),28,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AbstractCoder,toInt,"(java.lang.Object, int) → int","org.apache.commons.compress.archivers.sevenz.AbstractCoder.toInt(Object,int)",9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AbstractCoder,<init>,(java.lang.Class[]) → void,org.apache.commons.compress.archivers.sevenz.AbstractCoder.<init>(Class[]),0,9,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AbstractCoder,encode,"(java.io.OutputStream, java.lang.Object) → java.io.OutputStream","org.apache.commons.compress.archivers.sevenz.AbstractCoder.encode(OutputStream,Object)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AbstractCoder,getOptionsAsProperties,(java.lang.Object) → byte[],org.apache.commons.compress.archivers.sevenz.AbstractCoder.getOptionsAsProperties(Object),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AbstractCoder,getOptionsFromCoder,"(org.apache.commons.compress.archivers.sevenz.Coder, java.io.InputStream) → java.lang.Object","org.apache.commons.compress.archivers.sevenz.AbstractCoder.getOptionsFromCoder(Coder,InputStream)",2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AbstractCoder,isOptionInstance,(java.lang.Object) → boolean,org.apache.commons.compress.archivers.sevenz.AbstractCoder.isOptionInstance(Object),0,7,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AbstractCoder,lambda$isOptionInstance$0,"(java.lang.Object, java.lang.Class) → boolean","org.apache.commons.compress.archivers.sevenz.AbstractCoder.lambda$isOptionInstance$0(Object,Class)",4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/BindPair,<init>,"(long, long) → void","org.apache.commons.compress.archivers.sevenz.BindPair.<init>(long,long)",0,9,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/BindPair,toString,() → java.lang.String,org.apache.commons.compress.archivers.sevenz.BindPair.toString(),15,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/CLI$Mode$1,<init>,"(java.lang.String, int, java.lang.String) → void","org.apache.commons.compress.archivers.sevenz.CLI$Mode$1.<init>(String,int,String)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/CLI$Mode$1,getContentMethods,(org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) → java.lang.String,org.apache.commons.compress.archivers.sevenz.CLI$Mode$1.getContentMethods(SevenZArchiveEntry),46,0,0.0,6,0,0.0,4,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/CLI$Mode$1,takeAction,"(org.apache.commons.compress.archivers.sevenz.SevenZFile, org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) → void","org.apache.commons.compress.archivers.sevenz.CLI$Mode$1.takeAction(SevenZFile,SevenZArchiveEntry)",64,0,0.0,6,0,0.0,4,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/StartHeader,<init>,"(long, long, long) → void","org.apache.commons.compress.archivers.sevenz.StartHeader.<init>(long,long,long)",12,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/NID,<init>,() → void,org.apache.commons.compress.archivers.sevenz.NID.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder,sha256Password,"(byte[], int, byte[]) → byte[]","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(byte[],int,byte[])",42,18,0.3,5,1,0.16666666666666666,4,9,5,0.35714285714285715,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder,sha256Password,"(char[], int, byte[]) → byte[]","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(char[],int,byte[])",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder,utf16Decode,(char[]) → byte[],org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.utf16Decode(char[]),21,4,0.16,3,1,0.25,3,6,2,0.25,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder,<init>,() → void,org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.<init>(),0,9,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder,decode,"(java.lang.String, java.io.InputStream, long, org.apache.commons.compress.archivers.sevenz.Coder, byte[], int) → java.io.InputStream","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[],int)",9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder,encode,"(java.io.OutputStream, java.lang.Object) → java.io.OutputStream","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.encode(OutputStream,Object)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder,getOptionsAsProperties,(java.lang.Object) → byte[],org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.getOptionsAsProperties(Object),97,0,0.0,12,0,0.0,7,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$ArchiveStatistics,assertValidity,(int) → void,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.assertValidity(int),40,0,0.0,8,0,0.0,5,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$ArchiveStatistics,bindPairSize,() → long,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.bindPairSize(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$ArchiveStatistics,coderSize,() → long,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.coderSize(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$ArchiveStatistics,entrySize,() → long,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.entrySize(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$ArchiveStatistics,estimateSize,() → long,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.estimateSize(),66,0,0.0,0,0,coverage not available since no branches,1,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$ArchiveStatistics,folderSize,() → long,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.folderSize(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$ArchiveStatistics,streamMapSize,() → long,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.streamMapSize(),16,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFile$ArchiveStatistics,toString,() → java.lang.String,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.toString(),25,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFileOptions$Builder,<init>,() → void,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.<init>(),12,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFileOptions$Builder,build,() → org.apache.commons.compress.archivers.sevenz.SevenZFileOptions,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.build(),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFileOptions$Builder,withMaxMemoryLimitInKb,(int) → org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.withMaxMemoryLimitInKb(int),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFileOptions$Builder,withTryToRecoverBrokenArchives,(boolean) → org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.withTryToRecoverBrokenArchives(boolean),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFileOptions$Builder,withUseDefaultNameForUnnamedEntries,(boolean) → org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.withUseDefaultNameForUnnamedEntries(boolean),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/DeltaDecoder,<init>,() → void,org.apache.commons.compress.archivers.sevenz.DeltaDecoder.<init>(),0,9,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/DeltaDecoder,decode,"(java.lang.String, java.io.InputStream, long, org.apache.commons.compress.archivers.sevenz.Coder, byte[], int) → java.io.InputStream","org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[],int)",9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/DeltaDecoder,encode,"(java.io.OutputStream, java.lang.Object) → java.io.OutputStream","org.apache.commons.compress.archivers.sevenz.DeltaDecoder.encode(OutputStream,Object)",21,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/DeltaDecoder,getOptionsAsProperties,(java.lang.Object) → byte[],org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsAsProperties(Object),12,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/DeltaDecoder,getOptionsFromCoder,(org.apache.commons.compress.archivers.sevenz.Coder) → int,org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder),18,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/DeltaDecoder,getOptionsFromCoder,"(org.apache.commons.compress.archivers.sevenz.Coder, java.io.InputStream) → java.lang.Object","org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder,InputStream)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Folder,<init>,() → void,org.apache.commons.compress.archivers.sevenz.Folder.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Folder,findBindPairForInStream,(int) → int,org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForInStream(int),0,25,1.0,0,6,1.0,4,0,5,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Folder,findBindPairForOutStream,(int) → int,org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForOutStream(int),25,0,0.0,6,0,0.0,4,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Folder,getOrderedCoders,() → java.lang.Iterable,org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders(),70,0,0.0,16,0,0.0,9,12,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Folder,getUnpackSize,() → long,org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSize(),28,0,0.0,6,0,0.0,4,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Folder,getUnpackSizeForCoder,(org.apache.commons.compress.archivers.sevenz.Coder) → long,org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSizeForCoder(Coder),25,0,0.0,6,0,0.0,4,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Folder,toString,() → java.lang.String,org.apache.commons.compress.archivers.sevenz.Folder.toString(),63,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Folder,<clinit>,() → void,org.apache.commons.compress.archivers.sevenz.Folder.<clinit>(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder$AES256SHA256DecoderOutputStream,<init>,"(org.apache.commons.compress.archivers.sevenz.AES256Options, java.io.OutputStream) → void","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.<init>(AES256Options,OutputStream)",21,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder$AES256SHA256DecoderOutputStream,close,() → void,org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.close(),12,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder$AES256SHA256DecoderOutputStream,flush,() → void,org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.flush(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder$AES256SHA256DecoderOutputStream,flushBuffer,() → void,org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.flushBuffer(),13,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder$AES256SHA256DecoderOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.write(byte[],int,int)",81,0,0.0,6,0,0.0,4,12,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder$AES256SHA256DecoderOutputStream,write,(int) → void,org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.write(int),20,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$DeflateDecoder$DeflateDecoderOutputStream,<init>,"(java.util.zip.DeflaterOutputStream, java.util.zip.Deflater) → void","org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.<init>(DeflaterOutputStream,Deflater)",9,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$DeflateDecoder$DeflateDecoderOutputStream,close,() → void,org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.close(),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$DeflateDecoder$DeflateDecoderOutputStream,write,(byte[]) → void,org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(byte[]),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$DeflateDecoder$DeflateDecoderOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(byte[],int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/Coders$DeflateDecoder$DeflateDecoderOutputStream,write,(int) → void,org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(int),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFileOptions,builder,() → org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.builder(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFileOptions,<init>,"(int, boolean, boolean) → void","org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<init>(int,boolean,boolean)",12,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFileOptions,getMaxMemoryLimitInKb,() → int,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.getMaxMemoryLimitInKb(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFileOptions,getTryToRecoverBrokenArchives,() → boolean,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.getTryToRecoverBrokenArchives(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFileOptions,getUseDefaultNameForUnnamedEntries,() → boolean,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.getUseDefaultNameForUnnamedEntries(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZFileOptions,<clinit>,() → void,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<clinit>(),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,reverse,(java.lang.Iterable) → java.lang.Iterable,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.reverse(Iterable),19,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,<init>,(java.io.File) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(File),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,<init>,"(java.io.File, char[]) → void","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(File,char[])",13,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,<init>,(java.nio.channels.SeekableByteChannel) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(SeekableByteChannel),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,<init>,"(java.nio.channels.SeekableByteChannel, char[]) → void","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(SeekableByteChannel,char[])",45,0,0.0,2,0,0.0,2,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,close,() → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close(),9,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,closeArchiveEntry,() → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(),102,0,0.0,6,0,0.0,4,27,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,createArchiveEntry,"(java.io.File, java.lang.String) → org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(File,String)",29,0,0.0,0,0,coverage not available since no branches,1,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,createArchiveEntry,"(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) → org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(Path,String,LinkOption[])",19,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,fillDates,"(java.nio.file.Path, org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry, java.nio.file.LinkOption[]) → void","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.fillDates(Path,SevenZArchiveEntry,LinkOption[])",18,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,finish,() → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish(),126,0,0.0,2,0,0.0,2,25,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,getContentMethods,(org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) → java.lang.Iterable,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getContentMethods(SevenZArchiveEntry),31,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,getCurrentOutputStream,() → java.io.OutputStream,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getCurrentOutputStream(),10,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,putArchiveEntry,(org.apache.commons.compress.archivers.ArchiveEntry) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(ArchiveEntry),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,putArchiveEntry,(org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(SevenZArchiveEntry),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,setContentCompression,(org.apache.commons.compress.archivers.sevenz.SevenZMethod) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentCompression(SevenZMethod),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,setContentMethods,(java.lang.Iterable) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentMethods(Iterable),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,setupFileOutputStream,() → org.apache.commons.io.output.CountingOutputStream,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream(),80,0,0.0,8,0,0.0,5,16,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,write,(byte[]) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,write,"(byte[], int, int) → void","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[],int,int)",9,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,write,(java.io.InputStream) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(InputStream),19,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,write,(int) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(int),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,write,"(java.nio.file.Path, java.nio.file.OpenOption[]) → void","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(Path,OpenOption[])",13,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,writeBits,"(java.io.DataOutput, java.util.BitSet, int) → void","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(DataOutput,BitSet,int)",40,0,0.0,8,0,0.0,5,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,writeFileAntiItems,(java.io.DataOutput) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileAntiItems(DataOutput),70,0,0.0,6,0,0.0,4,19,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,writeFileATimes,(java.io.DataOutput) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileATimes(DataOutput),117,0,0.0,14,0,0.0,8,28,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,writeFileCTimes,(java.io.DataOutput) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileCTimes(DataOutput),117,0,0.0,14,0,0.0,8,28,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,writeFileEmptyFiles,(java.io.DataOutput) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyFiles(DataOutput),78,0,0.0,10,0,0.0,6,19,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,writeFileEmptyStreams,(java.io.DataOutput) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyStreams(DataOutput),71,0,0.0,6,0,0.0,4,14,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,writeFileMTimes,(java.io.DataOutput) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileMTimes(DataOutput),117,0,0.0,14,0,0.0,8,28,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,writeFileNames,(java.io.DataOutput) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileNames(DataOutput),51,0,0.0,2,0,0.0,2,13,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,writeFilesInfo,(java.io.DataOutput) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(DataOutput),38,0,0.0,0,0,coverage not available since no branches,1,12,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,writeFileWindowsAttributes,(java.io.DataOutput) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileWindowsAttributes(DataOutput),114,0,0.0,14,0,0.0,8,27,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,writeFolder,"(java.io.DataOutput, org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) → void","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(DataOutput,SevenZArchiveEntry)",58,0,0.0,4,0,0.0,3,12,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,writeHeader,(java.io.DataOutput) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeHeader(DataOutput),16,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,writePackInfo,(java.io.DataOutput) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writePackInfo(DataOutput),69,0,0.0,8,0,0.0,5,16,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,writeSingleCodec,"(org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration, java.io.OutputStream) → void","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSingleCodec(SevenZMethodConfiguration,OutputStream)",38,0,0.0,4,0,0.0,3,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,writeStreamsInfo,(java.io.DataOutput) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeStreamsInfo(DataOutput),16,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,writeSubStreamsInfo,(java.io.DataOutput) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSubStreamsInfo(DataOutput),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,writeUint64,"(java.io.DataOutput, long) → void","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(DataOutput,long)",58,0,0.0,6,0,0.0,4,13,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,writeUnpackInfo,(java.io.DataOutput) → void,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUnpackInfo(DataOutput),116,0,0.0,16,0,0.0,9,25,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,lambda$writeFileEmptyStreams$1,(org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry) → boolean,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.lambda$writeFileEmptyStreams$1(SevenZArchiveEntry),7,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/sevenz,org/apache/commons/compress/archivers/sevenz/SevenZOutputFile,lambda$closeArchiveEntry$0,(int) → long,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.lambda$closeArchiveEntry$0(int),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/UnrecognizedFormatException,<init>,() → void,org.apache.commons.compress.archivers.dump.UnrecognizedFormatException.<init>(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveUtil,calculateChecksum,(byte[]) → int,org.apache.commons.compress.archivers.dump.DumpArchiveUtil.calculateChecksum(byte[]),25,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveUtil,convert16,"(byte[], int) → int","org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert16(byte[],int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveUtil,convert32,"(byte[], int) → int","org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveUtil,convert64,"(byte[], int) → long","org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert64(byte[],int)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveUtil,decode,"(org.apache.commons.compress.archivers.zip.ZipEncoding, byte[], int, int) → java.lang.String","org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int)",19,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveUtil,getIno,(byte[]) → int,org.apache.commons.compress.archivers.dump.DumpArchiveUtil.getIno(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveUtil,verify,(byte[]) → boolean,org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(byte[]),25,0,0.0,6,0,0.0,4,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE,find,(int) → org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE,org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE.find(int),24,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE,<init>,"(java.lang.String, int, int) → void","org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE.<init>(String,int,int)",8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveConstants$COMPRESSION_TYPE,<clinit>,() → void,org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE.<clinit>(),48,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,parse,(byte[]) → org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(byte[]),167,0,0.0,6,0,0.0,4,27,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,<init>,() → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(),0,17,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,<init>,"(java.lang.String, java.lang.String) → void","org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String)",0,23,1.0,0,0,coverage not available since no branches,1,0,8,1.0,0,1,1.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,<init>,"(java.lang.String, java.lang.String, int, org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE) → void","org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String,int,TYPE)",0,32,1.0,0,0,coverage not available since no branches,1,0,11,1.0,0,1,1.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,equals,(java.lang.Object) → boolean,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.equals(Object),44,0,0.0,16,0,0.0,9,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getAccessTime,() → java.util.Date,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getAccessTime(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getCreationTime,() → java.util.Date,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getCreationTime(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getEntrySize,() → long,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getEntrySize(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getGeneration,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getGeneration(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getGroupId,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getGroupId(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getHeaderCount,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderCount(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getHeaderHoles,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderHoles(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getHeaderType,() → org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderType(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getIno,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getIno(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getLastModifiedDate,() → java.util.Date,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getLastModifiedDate(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getMode,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getMode(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getName,() → java.lang.String,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getName(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getNlink,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getNlink(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getOffset,() → long,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getOffset(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getOriginalName,() → java.lang.String,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getOriginalName(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getPermissions,() → java.util.Set,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getPermissions(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getSimpleName,() → java.lang.String,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSimpleName(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getSize,() → long,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSize(),0,8,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getType,() → org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getType(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getUserId,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getUserId(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,getVolume,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getVolume(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,hashCode,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.hashCode(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,isBlkDev,() → boolean,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isBlkDev(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,isChrDev,() → boolean,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isChrDev(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,isDeleted,() → boolean,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDeleted(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,isDirectory,() → boolean,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDirectory(),0,8,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,isFifo,() → boolean,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isFifo(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,isFile,() → boolean,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isFile(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,isSocket,() → boolean,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSocket(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,isSparseRecord,(int) → boolean,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSparseRecord(int),11,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,setAccessTime,(java.util.Date) → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setAccessTime(Date),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,setCreationTime,(java.util.Date) → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setCreationTime(Date),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,setDeleted,(boolean) → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setDeleted(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,setGeneration,(int) → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGeneration(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,setGroupId,(int) → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGroupId(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,setLastModifiedDate,(java.util.Date) → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setLastModifiedDate(Date),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,setMode,(int) → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setMode(int),10,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,setName,(java.lang.String) → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setName(String),0,33,1.0,0,8,1.0,5,0,8,1.0,0,1,1.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,setNlink,(int) → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setNlink(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,setOffset,(long) → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setOffset(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,setSimpleName,(java.lang.String) → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSimpleName(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,setSize,(long) → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSize(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,setType,(org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE) → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setType(TYPE),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,setUserId,(int) → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setUserId(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,setVolume,(int) → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setVolume(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,toString,() → java.lang.String,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.toString(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry,update,(byte[]) → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.update(byte[]),50,0,0.0,6,0,0.0,4,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry$TYPE,find,(int) → org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE.find(int),26,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry$TYPE,<init>,"(java.lang.String, int, int) → void","org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE.<init>(String,int,int)",0,8,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry$TYPE,<clinit>,() → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE.<clinit>(),0,103,1.0,0,0,coverage not available since no branches,1,0,10,1.0,0,1,1.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/ShortFileException,<init>,() → void,org.apache.commons.compress.archivers.dump.ShortFileException.<init>(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveException,<init>,() → void,org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveException,<init>,(java.lang.String) → void,org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveException,<init>,"(java.lang.String, java.lang.Throwable) → void","org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>(String,Throwable)",5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveException,<init>,(java.lang.Throwable) → void,org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>(Throwable),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/Dirent,<init>,"(int, int, int, java.lang.String) → void","org.apache.commons.compress.archivers.dump.Dirent.<init>(int,int,int,String)",15,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/Dirent,getIno,() → int,org.apache.commons.compress.archivers.dump.Dirent.getIno(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/Dirent,getName,() → java.lang.String,org.apache.commons.compress.archivers.dump.Dirent.getName(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/Dirent,getParentIno,() → int,org.apache.commons.compress.archivers.dump.Dirent.getParentIno(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/Dirent,getType,() → int,org.apache.commons.compress.archivers.dump.Dirent.getType(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/Dirent,toString,() → java.lang.String,org.apache.commons.compress.archivers.dump.Dirent.toString(),16,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,<init>,"(byte[], org.apache.commons.compress.archivers.zip.ZipEncoding) → void","org.apache.commons.compress.archivers.dump.DumpArchiveSummary.<init>(byte[],ZipEncoding)",76,0,0.0,0,0,coverage not available since no branches,1,13,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,equals,(java.lang.Object) → boolean,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.equals(Object),39,0,0.0,12,0,0.0,7,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,getDevname,() → java.lang.String,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getDevname(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,getDumpDate,() → java.util.Date,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getDumpDate(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,getFilesystem,() → java.lang.String,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getFilesystem(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,getFirstRecord,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getFirstRecord(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,getFlags,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getFlags(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,getHostname,() → java.lang.String,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getHostname(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,getLabel,() → java.lang.String,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getLabel(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,getLevel,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getLevel(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,getNTRec,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getNTRec(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,getPreviousDumpDate,() → java.util.Date,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getPreviousDumpDate(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,getVolume,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getVolume(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,hashCode,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.hashCode(),20,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,isCompressed,() → boolean,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isCompressed(),10,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,isExtendedAttributes,() → boolean,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isExtendedAttributes(),10,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,isMetaDataOnly,() → boolean,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isMetaDataOnly(),10,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,isNewHeader,() → boolean,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isNewHeader(),10,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,isNewInode,() → boolean,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isNewInode(),10,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,setDevname,(java.lang.String) → void,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setDevname(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,setDumpDate,(java.util.Date) → void,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setDumpDate(Date),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,setFilesystem,(java.lang.String) → void,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFilesystem(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,setFirstRecord,(int) → void,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFirstRecord(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,setFlags,(int) → void,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFlags(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,setHostname,(java.lang.String) → void,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setHostname(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,setLabel,(java.lang.String) → void,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setLabel(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,setLevel,(int) → void,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setLevel(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,setNTRec,(int) → void,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setNTRec(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,setPreviousDumpDate,(java.util.Date) → void,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setPreviousDumpDate(Date),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveSummary,setVolume,(int) → void,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setVolume(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException,<init>,() → void,org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.<init>(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/UnsupportedCompressionAlgorithmException,<init>,(java.lang.String) → void,org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.<init>(String),13,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry$PERMISSION,find,(int) → java.util.Set,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$PERMISSION.find(int),39,0,0.0,6,0,0.0,4,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry$PERMISSION,<init>,"(java.lang.String, int, int) → void","org.apache.commons.compress.archivers.dump.DumpArchiveEntry$PERMISSION.<init>(String,int,int)",8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry$PERMISSION,<clinit>,() → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$PERMISSION.<clinit>(),136,0,0.0,0,0,coverage not available since no branches,1,13,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/TapeInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.archivers.dump.TapeInputStream.<init>(InputStream),17,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/TapeInputStream,available,() → int,org.apache.commons.compress.archivers.dump.TapeInputStream.available(),15,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/TapeInputStream,close,() → void,org.apache.commons.compress.archivers.dump.TapeInputStream.close(),11,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/TapeInputStream,getBytesRead,() → long,org.apache.commons.compress.archivers.dump.TapeInputStream.getBytesRead(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/TapeInputStream,peek,() → byte[],org.apache.commons.compress.archivers.dump.TapeInputStream.peek(),26,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/TapeInputStream,read,() → int,org.apache.commons.compress.archivers.dump.TapeInputStream.read(),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/TapeInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int)",77,0,0.0,10,0,0.0,6,21,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/TapeInputStream,readBlock,(boolean) → void,org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(boolean),170,0,0.0,18,0,0.0,11,34,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/TapeInputStream,readFully,"(byte[], int, int) → void","org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(byte[],int,int)",15,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/TapeInputStream,readRange,(int) → byte[],org.apache.commons.compress.archivers.dump.TapeInputStream.readRange(int),15,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/TapeInputStream,readRecord,() → byte[],org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord(),17,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/TapeInputStream,resetBlockSize,"(int, boolean) → void","org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(int,boolean)",73,0,0.0,4,0,0.0,3,13,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/TapeInputStream,skip,(long) → long,org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long),79,0,0.0,10,0,0.0,6,17,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry$TapeSegmentHeader,<init>,() → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.<init>(),0,7,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry$TapeSegmentHeader,getCdata,(int) → int,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.getCdata(int),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry$TapeSegmentHeader,getCount,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.getCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry$TapeSegmentHeader,getHoles,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.getHoles(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry$TapeSegmentHeader,getIno,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.getIno(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry$TapeSegmentHeader,getType,() → org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.getType(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry$TapeSegmentHeader,getVolume,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.getVolume(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveEntry$TapeSegmentHeader,setIno,(int) → void,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.setIno(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveInputStream,matches,"(byte[], int) → boolean","org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byte[],int)",20,0,0.0,6,0,0.0,4,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.<init>(InputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveInputStream,<init>,"(java.io.InputStream, java.lang.String) → void","org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.<init>(InputStream,String)",99,0,0.0,2,0,0.0,2,22,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveInputStream,close,() → void,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.close(),10,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveInputStream,getBytesRead,() → long,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getBytesRead(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveInputStream,getCount,() → int,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getCount(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveInputStream,getNextDumpEntry,() → org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextDumpEntry(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveInputStream,getNextEntry,() → org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(),193,0,0.0,26,0,0.0,14,45,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveInputStream,getPath,(org.apache.commons.compress.archivers.dump.DumpArchiveEntry) → java.lang.String,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(DumpArchiveEntry),100,0,0.0,10,0,0.0,6,22,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveInputStream,getSummary,() → org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getSummary(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(byte[],int,int)",161,0,0.0,26,0,0.0,14,34,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveInputStream,readBITS,() → void,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS(),46,0,0.0,6,0,0.0,4,10,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveInputStream,readCLRI,() → void,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI(),46,0,0.0,6,0,0.0,4,10,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveInputStream,readDirectoryEntry,(org.apache.commons.compress.archivers.dump.DumpArchiveEntry) → void,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(DumpArchiveEntry),228,0,0.0,32,0,0.0,17,43,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveInputStream,lambda$readDirectoryEntry$1,(org.apache.commons.compress.archivers.dump.DumpArchiveEntry) → void,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.lambda$readDirectoryEntry$1(DumpArchiveEntry),9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveInputStream,lambda$new$0,"(org.apache.commons.compress.archivers.dump.DumpArchiveEntry, org.apache.commons.compress.archivers.dump.DumpArchiveEntry) → int","org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.lambda$new$0(DumpArchiveEntry,DumpArchiveEntry)",14,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/InvalidFormatException,<init>,() → void,org.apache.commons.compress.archivers.dump.InvalidFormatException.<init>(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/InvalidFormatException,<init>,(long) → void,org.apache.commons.compress.archivers.dump.InvalidFormatException.<init>(long),16,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/InvalidFormatException,getOffset,() → long,org.apache.commons.compress.archivers.dump.InvalidFormatException.getOffset(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveConstants$SEGMENT_TYPE,find,(int) → org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE,org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE.find(int),24,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveConstants$SEGMENT_TYPE,<init>,"(java.lang.String, int, int) → void","org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE.<init>(String,int,int)",0,8,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/dump,org/apache/commons/compress/archivers/dump/DumpArchiveConstants$SEGMENT_TYPE,<clinit>,() → void,org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE.<clinit>(),0,70,1.0,0,0,coverage not available since no branches,1,0,7,1.0,0,1,1.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/InMemoryCachingStreamBridge,<init>,() → void,org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.<init>(),0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/InMemoryCachingStreamBridge,createInputStream,() → java.io.InputStream,org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.createInputStream(),0,8,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge,<init>,() → void,org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.<init>(),21,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge,createInputStream,() → java.io.InputStream,org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.createInputStream(),13,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream),0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream,<init>,"(java.io.OutputStream, java.util.Map) → void","org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Map)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream,<init>,"(java.io.OutputStream, org.apache.commons.compress.compressors.pack200.Pack200Strategy) → void","org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Pack200Strategy)",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream,<init>,"(java.io.OutputStream, org.apache.commons.compress.compressors.pack200.Pack200Strategy, java.util.Map) → void","org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Pack200Strategy,Map)",0,11,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream,close,() → void,org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.close(),8,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream,finish,() → void,org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish(),5,25,0.8333333333333334,2,2,0.5,3,1,7,0.875,0,1,1.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream,write,(byte[]) → void,org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[]),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[],int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream,write,(int) → void,org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(int),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200Strategy,<clinit>,() → void,org.apache.commons.compress.compressors.pack200.Pack200Strategy.<clinit>(),0,24,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200Utils,normalize,(java.io.File) → void,org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200Utils,normalize,"(java.io.File, java.io.File) → void","org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File)",5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200Utils,normalize,"(java.io.File, java.io.File, java.util.Map) → void","org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map)",62,0,0.0,2,0,0.0,2,14,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200Utils,normalize,"(java.io.File, java.util.Map) → void","org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,Map)",5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge$1,<init>,"(org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge, java.io.InputStream) → void","org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge$1.<init>(TempFileCachingStreamBridge,InputStream)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge$1,close,() → void,org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge$1.close(),10,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200Strategy$1,<init>,"(java.lang.String, int) → void","org.apache.commons.compress.compressors.pack200.Pack200Strategy$1.<init>(String,int)",0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200Strategy$1,newStreamBridge,() → org.apache.commons.compress.compressors.pack200.AbstractStreamBridge,org.apache.commons.compress.compressors.pack200.Pack200Strategy$1.newStreamBridge(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200Strategy$2,<init>,"(java.lang.String, int) → void","org.apache.commons.compress.compressors.pack200.Pack200Strategy$2.<init>(String,int)",0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200Strategy$2,newStreamBridge,() → org.apache.commons.compress.compressors.pack200.AbstractStreamBridge,org.apache.commons.compress.compressors.pack200.Pack200Strategy$2.newStreamBridge(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,matches,"(byte[], int) → boolean","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(byte[],int)",23,0,0.0,6,0,0.0,4,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,<init>,(java.io.File) → void,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,<init>,"(java.io.File, java.util.Map) → void","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Map)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,<init>,"(java.io.File, org.apache.commons.compress.compressors.pack200.Pack200Strategy) → void","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Pack200Strategy)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,<init>,"(java.io.File, org.apache.commons.compress.compressors.pack200.Pack200Strategy, java.util.Map) → void","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Pack200Strategy,Map)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,<init>,"(java.io.InputStream, java.io.File, org.apache.commons.compress.compressors.pack200.Pack200Strategy, java.util.Map) → void","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,File,Pack200Strategy,Map)",37,0,0.0,4,0,0.0,3,11,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,<init>,"(java.io.InputStream, java.util.Map) → void","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Map)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,<init>,"(java.io.InputStream, org.apache.commons.compress.compressors.pack200.Pack200Strategy) → void","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Pack200Strategy)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,<init>,"(java.io.InputStream, org.apache.commons.compress.compressors.pack200.Pack200Strategy, java.util.Map) → void","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Pack200Strategy,Map)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,available,() → int,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.available(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,close,() → void,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.close(),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,getInputStream,() → java.io.InputStream,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.getInputStream(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,mark,(int) → void,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.mark(int),12,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,markSupported,() → boolean,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.markSupported(),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,read,() → int,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,read,(byte[]) → int,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[]),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[],int,int)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,reset,() → void,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.reset(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,skip,(long) → long,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.skip(long),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream,<clinit>,() → void,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<clinit>(),23,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/AbstractStreamBridge,<init>,() → void,org.apache.commons.compress.compressors.pack200.AbstractStreamBridge.<init>(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/AbstractStreamBridge,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.compressors.pack200.AbstractStreamBridge.<init>(OutputStream),0,9,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/AbstractStreamBridge,getInputStream,() → java.io.InputStream,org.apache.commons.compress.compressors.pack200.AbstractStreamBridge.getInputStream(),0,18,1.0,1,1,0.5,2,0,5,1.0,0,1,1.0
org/apache/commons/compress/compressors/pack200,org/apache/commons/compress/compressors/pack200/AbstractStreamBridge,stop,() → void,org.apache.commons.compress.compressors.pack200.AbstractStreamBridge.stop(),20,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/z,org/apache/commons/compress/compressors/z/ZCompressorInputStream,matches,"(byte[], int) → boolean","org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byte[],int)",17,0,0.0,6,0,0.0,4,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/z,org/apache/commons/compress/compressors/z/ZCompressorInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.compressors.z.ZCompressorInputStream.<init>(InputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/z,org/apache/commons/compress/compressors/z/ZCompressorInputStream,<init>,"(java.io.InputStream, int) → void","org.apache.commons.compress.compressors.z.ZCompressorInputStream.<init>(InputStream,int)",63,0,0.0,10,0,0.0,6,13,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/z,org/apache/commons/compress/compressors/z/ZCompressorInputStream,addEntry,"(int, byte) → int","org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(int,byte)",26,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/z,org/apache/commons/compress/compressors/z/ZCompressorInputStream,clearEntries,() → void,org.apache.commons.compress.compressors.z.ZCompressorInputStream.clearEntries(),11,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/z,org/apache/commons/compress/compressors/z/ZCompressorInputStream,decompressNextSymbol,() → int,org.apache.commons.compress.compressors.z.ZCompressorInputStream.decompressNextSymbol(),64,0,0.0,10,0,0.0,6,16,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/z,org/apache/commons/compress/compressors/z/ZCompressorInputStream,readNextCode,() → int,org.apache.commons.compress.compressors.z.ZCompressorInputStream.readNextCode(),13,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/z,org/apache/commons/compress/compressors/z/ZCompressorInputStream,reAlignReading,() → void,org.apache.commons.compress.compressors.z.ZCompressorInputStream.reAlignReading(),31,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/NewAttribute,<init>,"(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.<init>(CPUTF8,int)",0,17,1.0,0,0,coverage not available since no branches,1,0,5,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/NewAttribute,addBCIndex,"(int, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCIndex(int,int)",15,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/NewAttribute,addBCLength,"(int, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCLength(int,int)",15,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/NewAttribute,addBCOffset,"(int, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCOffset(int,int)",15,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/NewAttribute,addInteger,"(int, long) → void","org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addInteger(int,long)",13,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/NewAttribute,addToBody,"(int, java.lang.Object) → void","org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addToBody(int,Object)",12,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/NewAttribute,getLayoutIndex,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.getLayoutIndex(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/NewAttribute,getLength,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.getLength(),21,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/NewAttribute,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.getNestedClassFileEntries(),21,28,0.5714285714285714,6,2,0.25,5,7,7,0.5,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/NewAttribute,getStartPCs,() → int[],org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.getStartPCs(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/NewAttribute,renumber,(java.util.List) → void,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.renumber(List),121,0,0.0,14,0,0.0,8,28,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/NewAttribute,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.resolve(ClassConstantPool),25,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/NewAttribute,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.toString(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/NewAttribute,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.writeBody(DataOutputStream),72,0,0.0,13,0,0.0,9,20,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/RuntimeVisibleorInvisibleAnnotationsAttribute,<init>,"(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8, org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.<init>(CPUTF8,Annotation[])",0,11,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/RuntimeVisibleorInvisibleAnnotationsAttribute,getLength,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.getLength(),10,10,0.5,1,1,0.5,2,1,3,0.75,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/RuntimeVisibleorInvisibleAnnotationsAttribute,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.getNestedClassFileEntries(),7,29,0.8055555555555556,0,2,1.0,2,1,4,0.8,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/RuntimeVisibleorInvisibleAnnotationsAttribute,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.resolve(ClassConstantPool),24,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/RuntimeVisibleorInvisibleAnnotationsAttribute,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.toString(),16,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/RuntimeVisibleorInvisibleAnnotationsAttribute,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.writeBody(DataOutputStream),12,21,0.6363636363636364,1,3,0.75,3,2,5,0.7142857142857143,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPRef,<init>,"(byte, org.apache.commons.compress.harmony.unpack200.bytecode.CPClass, org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.<init>(byte,CPClass,CPNameAndType,int)",0,17,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPRef,equals,(java.lang.Object) → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.equals(Object),38,0,0.0,12,0,0.0,7,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPRef,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.getNestedClassFileEntries(),15,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPRef,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.resolve(ClassConstantPool),16,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPRef,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.toString(),47,0,0.0,8,0,0.0,5,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPRef,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.writeBody(DataOutputStream),9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/SourceFileAttribute,setAttributeName,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.setAttributeName(CPUTF8),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/SourceFileAttribute,<init>,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.<init>(CPUTF8),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/SourceFileAttribute,equals,(java.lang.Object) → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.equals(Object),25,0,0.0,6,0,0.0,4,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/SourceFileAttribute,getLength,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.getLength(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/SourceFileAttribute,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.getNestedClassFileEntries(),13,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/SourceFileAttribute,hashCode,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.hashCode(),20,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/SourceFileAttribute,isSourceFileAttribute,() → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.isSourceFileAttribute(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/SourceFileAttribute,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.resolve(ClassConstantPool),10,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/SourceFileAttribute,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.toString(),10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/SourceFileAttribute,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.writeBody(DataOutputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPField,<init>,"(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8, org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8, long, java.util.List) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CPField.<init>(CPUTF8,CPUTF8,long,List)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPField,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.CPField.toString(),17,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LocalVariableTableAttribute,setAttributeName,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.setAttributeName(CPUTF8),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LocalVariableTableAttribute,<init>,"(int, int[], int[], org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[], org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[], int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[])",0,22,1.0,0,0,coverage not available since no branches,1,0,8,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LocalVariableTableAttribute,getLength,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.getLength(),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LocalVariableTableAttribute,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.getNestedClassFileEntries(),36,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LocalVariableTableAttribute,getStartPCs,() → int[],org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.getStartPCs(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LocalVariableTableAttribute,renumber,(java.util.List) → void,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.renumber(List),74,0,0.0,6,0,0.0,4,17,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LocalVariableTableAttribute,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.resolve(ClassConstantPool),54,0,0.0,2,0,0.0,2,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LocalVariableTableAttribute,setCodeLength,(int) → void,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.setCodeLength(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LocalVariableTableAttribute,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.toString(),12,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LocalVariableTableAttribute,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.writeBody(DataOutputStream),20,23,0.5348837209302325,0,2,1.0,2,3,5,0.625,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ExceptionsAttribute,hashCode,(java.lang.Object[]) → int,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.hashCode(Object[]),37,0,0.0,6,0,0.0,4,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ExceptionsAttribute,setAttributeName,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.setAttributeName(CPUTF8),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ExceptionsAttribute,<init>,(org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[]) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.<init>(CPClass[]),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ExceptionsAttribute,equals,(java.lang.Object) → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.equals(Object),29,0,0.0,8,0,0.0,5,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ExceptionsAttribute,getLength,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.getLength(),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ExceptionsAttribute,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.getNestedClassFileEntries(),25,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ExceptionsAttribute,hashCode,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.hashCode(),15,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ExceptionsAttribute,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.resolve(ClassConstantPool),35,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ExceptionsAttribute,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.toString(),33,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ExceptionsAttribute,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.writeBody(DataOutputStream),26,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ConstantPoolEntry,<init>,"(byte, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<init>(byte,int)",0,9,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ConstantPoolEntry,doWrite,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.doWrite(DataOutputStream),8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ConstantPoolEntry,getGlobalIndex,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.getGlobalIndex(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ConstantPoolEntry,getTag,() → byte,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.getTag(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation,<init>,(org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation[]) → void,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.<init>(Annotation[]),0,10,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation,getClassFileEntries,() → java.util.List,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.getClassFileEntries(),28,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation,getLength,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.getLength(),7,19,0.7307692307692307,0,2,1.0,2,1,3,0.75,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.resolve(ClassConstantPool),21,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.writeBody(DataOutputStream),25,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,<init>,"(int[], int[], int[], int[], int[], int[], int[], int[], int[], int[], int[], int[], int[], int[], int[], int[], int[], int[], int[], int[], int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])",0,66,1.0,0,0,coverage not available since no branches,1,0,23,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,getCurrentClass,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.getCurrentClass(),12,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,getNewClass,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.getNewClass(),12,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,getSuperClass,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.getSuperClass(),0,12,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,globalConstantPool,() → org.apache.commons.compress.harmony.unpack200.SegmentConstantPool,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.globalConstantPool(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextByte,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextByte(),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextCaseCount,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextCaseCount(),0,11,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextCaseValues,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextCaseValues(),0,11,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextClassRef,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextClassRef(),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextDoubleRef,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextDoubleRef(),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextFieldRef,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextFieldRef(),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextFloatRef,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextFloatRef(),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextIMethodRef,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextIMethodRef(),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextInitRef,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextInitRef(),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextIntRef,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextIntRef(),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextLabel,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextLabel(),0,11,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextLocal,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextLocal(),0,11,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextLongRef,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextLongRef(),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextMethodRef,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextMethodRef(),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextShort,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextShort(),0,11,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextStringRef,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextStringRef(),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextSuperFieldRef,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextSuperFieldRef(),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextSuperMethodRef,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextSuperMethodRef(),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextThisFieldRef,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextThisFieldRef(),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextThisMethodRef,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextThisMethodRef(),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,nextWideByteCode,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextWideByteCode(),0,11,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,setCurrentClass,(java.lang.String) → void,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.setCurrentClass(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,setNewClass,(java.lang.String) → void,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.setNewClass(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,setSegment,(org.apache.commons.compress.harmony.unpack200.Segment) → void,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.setSegment(Segment),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/OperandManager,setSuperClass,(java.lang.String) → void,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.setSuperClass(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassFile,<init>,() → void,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile.<init>(),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassFile,write,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile.write(DataOutputStream),158,0,0.0,14,0,0.0,8,24,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPDouble,<init>,"(java.lang.Double, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble.<init>(Double,int)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPDouble,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble.toString(),10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPDouble,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble.writeBody(DataOutputStream),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/BCIRenumberedAttribute,<init>,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.<init>(CPUTF8),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/BCIRenumberedAttribute,hasBCIRenumbering,() → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.hasBCIRenumbering(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/BCIRenumberedAttribute,renumber,(java.util.List) → void,org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.renumber(List),6,14,0.7,0,2,1.0,2,2,4,0.6666666666666666,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/BCIRenumberedAttribute,lambda$renumber$0,"(java.util.List, int[], int) → int","org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.lambda$renumber$0(List,int[],int)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPInterfaceMethodRef,<init>,"(org.apache.commons.compress.harmony.unpack200.bytecode.CPClass, org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef.<init>(CPClass,CPNameAndType,int)",0,7,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPInterfaceMethodRef,generateHashCode,() → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef.generateHashCode(),0,27,1.0,0,0,coverage not available since no branches,1,0,7,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPInterfaceMethodRef,hashCode,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef.hashCode(),0,8,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPInterfaceMethodRef,invokeInterfaceCount,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef.invokeInterfaceCount(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/NewAttribute$BCLength,<init>,(int) → void,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCLength.<init>(int),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/DeprecatedAttribute,setAttributeName,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.setAttributeName(CPUTF8),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/DeprecatedAttribute,<init>,() → void,org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.<init>(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/DeprecatedAttribute,getLength,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.getLength(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/DeprecatedAttribute,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.toString(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/DeprecatedAttribute,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.writeBody(DataOutputStream),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,getByteCode,(int) → org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getByteCode(int),16,13,0.4482758620689655,3,1,0.25,3,3,3,0.5,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,<init>,(int) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.<init>(int),0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,<init>,"(int, org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.<init>(int,ClassFileEntry[])",0,18,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,applyByteCodeTargetFixup,(org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.applyByteCodeTargetFixup(CodeAttribute),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,doWrite,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.doWrite(DataOutputStream),21,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,equals,(java.lang.Object) → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.equals(Object),7,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,extractOperands,"(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, org.apache.commons.compress.harmony.unpack200.Segment, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.extractOperands(OperandManager,Segment,int)",9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,getByteCodeForm,() → org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getByteCodeForm(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,getByteCodeIndex,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getByteCodeIndex(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,getByteCodeTargets,() → int[],org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getByteCodeTargets(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,getLength,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getLength(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,getName,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getName(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getNestedClassFileEntries(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,getNestedPosition,(int) → int[],org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getNestedPosition(int),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,getNestedPositions,() → int[][],org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getNestedPositions(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,getOpcode,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getOpcode(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,getRewrite,() → int[],org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getRewrite(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,hashCode,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.hashCode(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,hasMultipleByteCodes,() → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.hasMultipleByteCodes(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,nestedMustStartClassPool,() → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.nestedMustStartClassPool(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.resolve(ClassConstantPool),65,0,0.0,7,0,0.0,5,11,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,setByteCodeIndex,(int) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setByteCodeIndex(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,setByteCodeTargets,(int[]) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setByteCodeTargets(int[]),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,setNested,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[]) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setNested(ClassFileEntry[]),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,setNestedPositions,(int[][]) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setNestedPositions(int[][]),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,setOperand2Bytes,"(int, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperand2Bytes(int,int)",74,0,0.0,4,0,0.0,3,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,setOperandByte,"(int, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandByte(int,int)",58,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,setOperandBytes,(int[]) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandBytes(int[]),71,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,setOperandSigned2Bytes,"(int, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandSigned2Bytes(int,int)",16,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,setRewrite,(int[]) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setRewrite(int[]),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.toString(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ByteCode,<clinit>,() → void,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.<clinit>(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPUTF8,<init>,(java.lang.String) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.<init>(String),0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPUTF8,<init>,"(java.lang.String, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.<init>(String,int)",0,11,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPUTF8,equals,(java.lang.Object) → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.equals(Object),0,23,1.0,0,6,1.0,4,0,6,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPUTF8,generateHashCode,() → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.generateHashCode(),0,13,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPUTF8,hashCode,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.hashCode(),0,8,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPUTF8,setGlobalIndex,(int) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.setGlobalIndex(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPUTF8,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.toString(),13,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPUTF8,underlyingString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.underlyingString(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPUTF8,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.writeBody(DataOutputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/SignatureAttribute,setAttributeName,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.setAttributeName(CPUTF8),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/SignatureAttribute,<init>,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.<init>(CPUTF8),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/SignatureAttribute,getLength,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.getLength(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/SignatureAttribute,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.getNestedClassFileEntries(),13,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/SignatureAttribute,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.resolve(ClassConstantPool),14,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/SignatureAttribute,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.toString(),10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/SignatureAttribute,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.writeBody(DataOutputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPFieldRef,<init>,"(org.apache.commons.compress.harmony.unpack200.bytecode.CPClass, org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.<init>(CPClass,CPNameAndType,int)",11,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPFieldRef,equals,(java.lang.Object) → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.equals(Object),33,0,0.0,10,0,0.0,6,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPFieldRef,generateHashCode,() → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.generateHashCode(),37,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPFieldRef,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.getNestedClassFileEntries(),13,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPFieldRef,hashCode,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.hashCode(),8,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPFieldRef,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.resolve(ClassConstantPool),16,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPFieldRef,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.toString(),15,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPFieldRef,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.writeBody(DataOutputStream),9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassFileEntry,<init>,() → void,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassFileEntry,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.getNestedClassFileEntries(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassFileEntry,objectHashCode,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.objectHashCode(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassFileEntry,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.resolve(ClassConstantPool),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassFileEntry,write,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.write(DataOutputStream),12,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassFileEntry,<clinit>,() → void,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.<clinit>(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPConstant,<init>,"(byte, java.lang.Object, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.<init>(byte,Object,int)",10,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPConstant,equals,(java.lang.Object) → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.equals(Object),23,0,0.0,6,0,0.0,4,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPConstant,getValue,() → java.lang.Object,org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.getValue(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPConstant,hashCode,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.hashCode(),9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/AnnotationsAttribute$Annotation,<init>,"(int, org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8, org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[], org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.<init>(int,CPUTF8,CPUTF8[],ElementValue[])",15,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/AnnotationsAttribute$Annotation,getClassFileEntries,() → java.util.List,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.getClassFileEntries(),35,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/AnnotationsAttribute$Annotation,getLength,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.getLength(),21,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/AnnotationsAttribute$Annotation,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.resolve(ClassConstantPool),47,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/AnnotationsAttribute$Annotation,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.writeBody(DataOutputStream),29,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPFloat,<init>,"(java.lang.Float, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat.<init>(Float,int)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPFloat,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat.toString(),10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPFloat,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat.writeBody(DataOutputStream),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/NewAttribute$BCIndex,<init>,(int) → void,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCIndex.<init>(int),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPString,<init>,"(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CPString.<init>(CPUTF8,int)",9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPString,generateHashCode,() → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPString.generateHashCode(),19,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPString,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.CPString.getNestedClassFileEntries(),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPString,hashCode,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.CPString.hashCode(),8,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPString,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPString.resolve(ClassConstantPool),10,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPString,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.CPString.toString(),10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPString,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPString.writeBody(DataOutputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPMethod,<init>,"(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8, org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8, long, java.util.List) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.<init>(CPUTF8,CPUTF8,long,List)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPMethod,generateHashCode,() → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.generateHashCode(),27,0,0.0,0,0,coverage not available since no branches,1,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPMethod,hashCode,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.hashCode(),8,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPMethod,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.toString(),17,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LocalVariableTypeTableAttribute,setAttributeName,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.setAttributeName(CPUTF8),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LocalVariableTypeTableAttribute,<init>,"(int, int[], int[], org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[], org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[], int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[])",0,22,1.0,0,0,coverage not available since no branches,1,0,8,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LocalVariableTypeTableAttribute,getLength,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.getLength(),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LocalVariableTypeTableAttribute,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.getNestedClassFileEntries(),16,20,0.5555555555555556,0,2,1.0,2,2,4,0.6666666666666666,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LocalVariableTypeTableAttribute,getStartPCs,() → int[],org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.getStartPCs(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LocalVariableTypeTableAttribute,renumber,(java.util.List) → void,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.renumber(List),67,7,0.0945945945945946,6,0,0.0,4,16,1,0.058823529411764705,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LocalVariableTypeTableAttribute,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.resolve(ClassConstantPool),54,0,0.0,2,0,0.0,2,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LocalVariableTypeTableAttribute,setCodeLength,(int) → void,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.setCodeLength(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LocalVariableTypeTableAttribute,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.toString(),12,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LocalVariableTypeTableAttribute,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.writeBody(DataOutputStream),43,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LineNumberTableAttribute,setAttributeName,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.setAttributeName(CPUTF8),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LineNumberTableAttribute,<init>,"(int, int[], int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.<init>(int,int[],int[])",0,13,1.0,0,0,coverage not available since no branches,1,0,5,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LineNumberTableAttribute,equals,(java.lang.Object) → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.equals(Object),7,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LineNumberTableAttribute,getLength,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.getLength(),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LineNumberTableAttribute,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.getNestedClassFileEntries(),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LineNumberTableAttribute,getStartPCs,() → int[],org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.getStartPCs(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LineNumberTableAttribute,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.toString(),12,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/LineNumberTableAttribute,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.writeBody(DataOutputStream),0,25,1.0,0,2,1.0,2,0,5,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPInteger,<init>,"(java.lang.Integer, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger.<init>(Integer,int)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPInteger,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger.toString(),10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPInteger,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger.writeBody(DataOutputStream),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/AnnotationsAttribute$ElementValue,<init>,"(int, java.lang.Object) → void","org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.<init>(int,Object)",12,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/AnnotationsAttribute$ElementValue,getClassFileEntries,() → java.util.List,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.getClassFileEntries(),78,0,0.0,10,0,0.0,6,13,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/AnnotationsAttribute$ElementValue,getLength,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.getLength(),46,0,0.0,7,0,0.0,6,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/AnnotationsAttribute$ElementValue,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.resolve(ClassConstantPool),100,0,0.0,14,0,0.0,8,18,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/AnnotationsAttribute$ElementValue,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.writeBody(DataOutputStream),72,0,0.0,10,0,0.0,6,15,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPLong,<init>,"(java.lang.Long, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CPLong.<init>(Long,int)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPLong,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.CPLong.toString(),10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPLong,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPLong.writeBody(DataOutputStream),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/AnnotationsAttribute,<init>,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.<init>(CPUTF8),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassConstantPool,<init>,() → void,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.<init>(),30,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassConstantPool,add,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry) → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.add(ClassFileEntry),31,0,0.0,8,0,0.0,5,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassConstantPool,addNestedEntries,() → void,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.addNestedEntries(),103,0,0.0,16,0,0.0,9,22,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassConstantPool,addWithNestedEntries,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry) → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.addWithNestedEntries(ClassFileEntry),27,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassConstantPool,entries,() → java.util.List,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.entries(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassConstantPool,get,(int) → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.get(int),15,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassConstantPool,indexOf,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry) → int,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.indexOf(ClassFileEntry),32,0,0.0,6,0,0.0,4,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassConstantPool,initialSort,() → void,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.initialSort(),81,0,0.0,8,0,0.0,5,18,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassConstantPool,resolve,(org.apache.commons.compress.harmony.unpack200.Segment) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.resolve(Segment),18,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassConstantPool,size,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.size(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassConstantPool,sortClassPool,() → void,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.sortClassPool(),138,0,0.0,16,0,0.0,9,29,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassConstantPool,lambda$resolve$4,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.lambda$resolve$4(ClassFileEntry),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassConstantPool,lambda$resolve$3,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.lambda$resolve$3(ClassFileEntry),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassConstantPool,lambda$initialSort$2,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry) → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.lambda$initialSort$2(ClassFileEntry),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassConstantPool,lambda$initialSort$1,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry) → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.lambda$initialSort$1(ClassFileEntry),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ClassConstantPool,lambda$initialSort$0,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry) → int,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.lambda$initialSort$0(ClassFileEntry),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPConstantNumber,<init>,"(byte, java.lang.Object, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber.<init>(byte,Object,int)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPConstantNumber,getNumber,() → java.lang.Number,org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber.getNumber(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPMember,<init>,"(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8, org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8, long, java.util.List) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.<init>(CPUTF8,CPUTF8,long,List)",2,25,0.9259259259259259,1,1,0.5,2,0,6,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPMember,doWrite,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.doWrite(DataOutputStream),11,25,0.6944444444444444,1,1,0.5,2,2,7,0.7777777777777778,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPMember,equals,(java.lang.Object) → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.equals(Object),44,0,0.0,14,0,0.0,8,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPMember,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.getNestedClassFileEntries(),38,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPMember,hashCode,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.hashCode(),37,0,0.0,0,0,coverage not available since no branches,1,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPMember,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.resolve(ClassConstantPool),21,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPMember,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.toString(),17,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPMember,lambda$resolve$0,"(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool, org.apache.commons.compress.harmony.unpack200.bytecode.Attribute) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.lambda$resolve$0(ClassConstantPool,Attribute)",4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ConstantValueAttribute,setAttributeName,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.setAttributeName(CPUTF8),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ConstantValueAttribute,<init>,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.<init>(ClassFileEntry),0,10,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ConstantValueAttribute,equals,(java.lang.Object) → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.equals(Object),4,21,0.84,3,3,0.5,4,2,4,0.6666666666666666,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ConstantValueAttribute,getLength,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.getLength(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ConstantValueAttribute,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.getNestedClassFileEntries(),13,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ConstantValueAttribute,hashCode,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.hashCode(),2,18,0.9,1,1,0.5,2,0,4,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ConstantValueAttribute,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.resolve(ClassConstantPool),14,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ConstantValueAttribute,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.toString(),10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ConstantValueAttribute,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.writeBody(DataOutputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/Attribute,<init>,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.<init>(CPUTF8),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/Attribute,doWrite,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.doWrite(DataOutputStream),12,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/Attribute,equals,(java.lang.Object) → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.equals(Object),0,23,1.0,0,6,1.0,4,0,6,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/Attribute,getAttributeName,() → org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.getAttributeName(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/Attribute,getLengthIncludingHeader,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.getLengthIncludingHeader(),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/Attribute,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.getNestedClassFileEntries(),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/Attribute,hasBCIRenumbering,() → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.hasBCIRenumbering(),0,2,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/Attribute,hashCode,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.hashCode(),0,9,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/Attribute,isSourceFileAttribute,() → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.isSourceFileAttribute(),0,2,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/Attribute,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.resolve(ClassConstantPool),10,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPClass,<init>,"(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.<init>(CPUTF8,int)",0,15,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPClass,equals,(java.lang.Object) → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.equals(Object),0,23,1.0,0,6,1.0,4,0,6,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPClass,generateHashCode,() → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.generateHashCode(),0,9,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPClass,getName,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.getName(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPClass,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.getNestedClassFileEntries(),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPClass,hashCode,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.hashCode(),0,8,1.0,1,1,0.5,2,0,3,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPClass,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.resolve(ClassConstantPool),10,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPClass,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.toString(),10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPClass,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.writeBody(DataOutputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPNameAndType,<init>,"(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8, org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.<init>(CPUTF8,CPUTF8,int)",0,17,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPNameAndType,equals,(java.lang.Object) → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.equals(Object),33,0,0.0,10,0,0.0,6,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPNameAndType,generateHashCode,() → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.generateHashCode(),0,27,1.0,0,0,coverage not available since no branches,1,0,7,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPNameAndType,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.getNestedClassFileEntries(),13,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPNameAndType,hashCode,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.hashCode(),0,8,1.0,1,1,0.5,2,0,3,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPNameAndType,invokeInterfaceCount,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.invokeInterfaceCount(),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPNameAndType,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.resolve(ClassConstantPool),16,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPNameAndType,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.toString(),17,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPNameAndType,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.writeBody(DataOutputStream),9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/InnerClassesAttribute,setAttributeName,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.setAttributeName(CPUTF8),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/InnerClassesAttribute,<init>,(java.lang.String) → void,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.<init>(String),0,20,1.0,0,0,coverage not available since no branches,1,0,5,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/InnerClassesAttribute,addInnerClassesEntry,"(org.apache.commons.compress.harmony.unpack200.bytecode.CPClass, org.apache.commons.compress.harmony.unpack200.bytecode.CPClass, org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.addInnerClassesEntry(CPClass,CPClass,CPUTF8,int)",31,0,0.0,6,0,0.0,4,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/InnerClassesAttribute,addInnerClassesEntry,(org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry) → void,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.addInnerClassesEntry(InnerClassesEntry),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/InnerClassesAttribute,equals,(java.lang.Object) → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.equals(Object),28,9,0.24324324324324326,10,2,0.16666666666666666,7,8,3,0.2727272727272727,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/InnerClassesAttribute,getLength,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.getLength(),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/InnerClassesAttribute,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.getNestedClassFileEntries(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/InnerClassesAttribute,hashCode,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.hashCode(),20,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/InnerClassesAttribute,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.resolve(ClassConstantPool),19,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/InnerClassesAttribute,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.toString(),10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/InnerClassesAttribute,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.writeBody(DataOutputStream),21,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ExceptionTableEntry,<init>,"(int, int, int, org.apache.commons.compress.harmony.unpack200.bytecode.CPClass) → void","org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.<init>(int,int,int,CPClass)",15,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ExceptionTableEntry,getCatchType,() → org.apache.commons.compress.harmony.unpack200.bytecode.CPClass,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.getCatchType(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ExceptionTableEntry,renumber,(java.util.List) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.renumber(List),34,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ExceptionTableEntry,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.resolve(ClassConstantPool),18,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/ExceptionTableEntry,write,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.write(DataOutputStream),17,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/NewAttribute$BCOffset,<init>,(int) → void,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCOffset.<init>(int),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/NewAttribute$BCOffset,setIndex,(int) → void,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCOffset.setIndex(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/NewAttribute$AbstractBcValue,setActualValue,(int) → void,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$AbstractBcValue.setActualValue(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/InnerClassesAttribute$InnerClassesEntry,<init>,"(org.apache.commons.compress.harmony.unpack200.bytecode.CPClass, org.apache.commons.compress.harmony.unpack200.bytecode.CPClass, org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.<init>(CPClass,CPClass,CPUTF8,int)",27,0,0.0,0,0,coverage not available since no branches,1,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/InnerClassesAttribute$InnerClassesEntry,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.resolve(ClassConstantPool),52,0,0.0,6,0,0.0,4,13,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/InnerClassesAttribute$InnerClassesEntry,write,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.write(DataOutputStream),17,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CodeAttribute,setAttributeName,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.setAttributeName(CPUTF8),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CodeAttribute,<init>,"(int, int, byte[], org.apache.commons.compress.harmony.unpack200.Segment, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, java.util.List) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>(int,int,byte[],Segment,OperandManager,List)",82,52,0.3880597014925373,8,2,0.2,6,16,13,0.4482758620689655,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CodeAttribute,addAttribute,(org.apache.commons.compress.harmony.unpack200.bytecode.Attribute) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.addAttribute(Attribute),22,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CodeAttribute,getLength,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.getLength(),30,6,0.16666666666666666,2,0,0.0,2,3,2,0.4,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CodeAttribute,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.getNestedClassFileEntries(),54,0,0.0,4,0,0.0,3,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CodeAttribute,getStartPCs,() → int[],org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.getStartPCs(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CodeAttribute,renumber,(java.util.List) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.renumber(List),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CodeAttribute,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.resolve(ClassConstantPool),19,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CodeAttribute,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.toString(),12,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CodeAttribute,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.writeBody(DataOutputStream),68,0,0.0,6,0,0.0,4,15,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CodeAttribute,lambda$resolve$3,"(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool, org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.lambda$resolve$3(ClassConstantPool,ExceptionTableEntry)",4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CodeAttribute,lambda$resolve$2,"(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool, org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.lambda$resolve$2(ClassConstantPool,ByteCode)",4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CodeAttribute,lambda$resolve$1,"(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool, org.apache.commons.compress.harmony.unpack200.bytecode.Attribute) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.lambda$resolve$1(ClassConstantPool,Attribute)",4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CodeAttribute,lambda$renumber$0,"(java.util.List, org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.lambda$renumber$0(List,ExceptionTableEntry)",4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/EnclosingMethodAttribute,setAttributeName,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.setAttributeName(CPUTF8),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/EnclosingMethodAttribute,<init>,"(org.apache.commons.compress.harmony.unpack200.bytecode.CPClass, org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType) → void","org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.<init>(CPClass,CPNameAndType)",10,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/EnclosingMethodAttribute,getLength,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.getLength(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/EnclosingMethodAttribute,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.getNestedClassFileEntries(),32,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/EnclosingMethodAttribute,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.resolve(ClassConstantPool),31,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/EnclosingMethodAttribute,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.toString(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/EnclosingMethodAttribute,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.writeBody(DataOutputStream),9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPMethodRef,<init>,"(org.apache.commons.compress.harmony.unpack200.bytecode.CPClass, org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef.<init>(CPClass,CPNameAndType,int)",0,7,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPMethodRef,generateHashCode,() → void,org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef.generateHashCode(),0,27,1.0,0,0,coverage not available since no branches,1,0,7,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPMethodRef,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef.getNestedClassFileEntries(),13,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/CPMethodRef,hashCode,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef.hashCode(),0,8,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/RuntimeVisibleorInvisibleParameterAnnotationsAttribute,<init>,"(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8, org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.<init>(CPUTF8,ParameterAnnotation[])",0,11,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/RuntimeVisibleorInvisibleParameterAnnotationsAttribute,getLength,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.getLength(),0,20,1.0,0,2,1.0,2,0,4,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/RuntimeVisibleorInvisibleParameterAnnotationsAttribute,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.getNestedClassFileEntries(),36,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/RuntimeVisibleorInvisibleParameterAnnotationsAttribute,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.resolve(ClassConstantPool),24,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/RuntimeVisibleorInvisibleParameterAnnotationsAttribute,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.toString(),16,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/RuntimeVisibleorInvisibleParameterAnnotationsAttribute,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.writeBody(DataOutputStream),19,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/AnnotationDefaultAttribute,setAttributeName,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.setAttributeName(CPUTF8),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/AnnotationDefaultAttribute,<init>,(org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue) → void,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.<init>(ElementValue),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/AnnotationDefaultAttribute,equals,(java.lang.Object) → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.equals(Object),7,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/AnnotationDefaultAttribute,getLength,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.getLength(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/AnnotationDefaultAttribute,getNestedClassFileEntries,() → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry[],org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.getNestedClassFileEntries(),35,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/AnnotationDefaultAttribute,resolve,(org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → void,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.resolve(ClassConstantPool),8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/AnnotationDefaultAttribute,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.toString(),10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode,org/apache/commons/compress/harmony/unpack200/bytecode/AnnotationDefaultAttribute,writeBody,(java.io.DataOutputStream) → void,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.writeBody(DataOutputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,<init>,"(java.io.InputStream, java.nio.ByteOrder) → void","org.apache.commons.compress.compressors.lzw.LZWInputStream.<init>(InputStream,ByteOrder)",23,0,0.0,0,0,coverage not available since no branches,1,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,addEntry,"(int, byte, int) → int","org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte,int)",26,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,addRepeatOfPreviousCode,() → int,org.apache.commons.compress.compressors.lzw.LZWInputStream.addRepeatOfPreviousCode(),16,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,close,() → void,org.apache.commons.compress.compressors.lzw.LZWInputStream.close(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,expandCodeToOutputStack,"(int, boolean) → int","org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(int,boolean)",53,0,0.0,6,0,0.0,4,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,getClearCode,() → int,org.apache.commons.compress.compressors.lzw.LZWInputStream.getClearCode(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,getCodeSize,() → int,org.apache.commons.compress.compressors.lzw.LZWInputStream.getCodeSize(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,getCompressedCount,() → long,org.apache.commons.compress.compressors.lzw.LZWInputStream.getCompressedCount(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,getPrefix,(int) → int,org.apache.commons.compress.compressors.lzw.LZWInputStream.getPrefix(int),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,getPrefixesLength,() → int,org.apache.commons.compress.compressors.lzw.LZWInputStream.getPrefixesLength(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,getTableSize,() → int,org.apache.commons.compress.compressors.lzw.LZWInputStream.getTableSize(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,incrementCodeSize,() → void,org.apache.commons.compress.compressors.lzw.LZWInputStream.incrementCodeSize(),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,initializeTables,(int) → void,org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(int),63,0,0.0,6,0,0.0,4,12,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,initializeTables,"(int, int) → void","org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(int,int)",47,0,0.0,6,0,0.0,4,10,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,read,() → int,org.apache.commons.compress.compressors.lzw.LZWInputStream.read(),16,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.compressors.lzw.LZWInputStream.read(byte[],int,int)",46,0,0.0,8,0,0.0,5,14,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,readFromStack,"(byte[], int, int) → int","org.apache.commons.compress.compressors.lzw.LZWInputStream.readFromStack(byte[],int,int)",31,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,readNextCode,() → int,org.apache.commons.compress.compressors.lzw.LZWInputStream.readNextCode(),16,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,resetCodeSize,() → void,org.apache.commons.compress.compressors.lzw.LZWInputStream.resetCodeSize(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,resetPreviousCode,() → void,org.apache.commons.compress.compressors.lzw.LZWInputStream.resetPreviousCode(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,setClearCode,(int) → void,org.apache.commons.compress.compressors.lzw.LZWInputStream.setClearCode(int),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,setCodeSize,(int) → void,org.apache.commons.compress.compressors.lzw.LZWInputStream.setCodeSize(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,setPrefix,"(int, int) → void","org.apache.commons.compress.compressors.lzw.LZWInputStream.setPrefix(int,int)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzw,org/apache/commons/compress/compressors/lzw/LZWInputStream,setTableSize,(int) → void,org.apache.commons.compress.compressors.lzw.LZWInputStream.setTableSize(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/Change$ChangeType,<clinit>,() → void,org.apache.commons.compress.changes.Change$ChangeType.<clinit>(),44,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetPerformer$ZipFileIterator,<init>,(org.apache.commons.compress.archivers.zip.ZipFile) → void,org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator.<init>(ZipFile),10,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetPerformer$ZipFileIterator,getInputStream,() → java.io.InputStream,org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator.getInputStream(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetPerformer$ZipFileIterator,hasNext,() → boolean,org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator.hasNext(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetPerformer$ZipFileIterator,next,() → org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator.next(),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSet,<init>,() → void,org.apache.commons.compress.changes.ChangeSet.<init>(),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSet,add,"(org.apache.commons.compress.archivers.ArchiveEntry, java.io.InputStream) → void","org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSet,add,"(org.apache.commons.compress.archivers.ArchiveEntry, java.io.InputStream, boolean) → void","org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream,boolean)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSet,addAddition,(org.apache.commons.compress.changes.Change) → void,org.apache.commons.compress.changes.ChangeSet.addAddition(Change),56,0,0.0,16,0,0.0,9,15,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSet,addDeletion,(org.apache.commons.compress.changes.Change) → void,org.apache.commons.compress.changes.ChangeSet.addDeletion(Change),82,0,0.0,26,0,0.0,14,17,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSet,delete,(java.lang.String) → void,org.apache.commons.compress.changes.ChangeSet.delete(String),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSet,deleteDir,(java.lang.String) → void,org.apache.commons.compress.changes.ChangeSet.deleteDir(String),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSet,getChanges,() → java.util.Set,org.apache.commons.compress.changes.ChangeSet.getChanges(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/Change,<init>,"(org.apache.commons.compress.archivers.ArchiveEntry, java.io.InputStream, boolean) → void","org.apache.commons.compress.changes.Change.<init>(ArchiveEntry,InputStream,boolean)",24,0,0.0,0,0,coverage not available since no branches,1,7,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/Change,<init>,"(java.lang.String, org.apache.commons.compress.changes.Change$ChangeType) → void","org.apache.commons.compress.changes.Change.<init>(String,ChangeType)",21,0,0.0,0,0,coverage not available since no branches,1,7,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/Change,getEntry,() → org.apache.commons.compress.archivers.ArchiveEntry,org.apache.commons.compress.changes.Change.getEntry(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/Change,getInputStream,() → java.io.InputStream,org.apache.commons.compress.changes.Change.getInputStream(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/Change,getTargetFileName,() → java.lang.String,org.apache.commons.compress.changes.Change.getTargetFileName(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/Change,getType,() → org.apache.commons.compress.changes.Change$ChangeType,org.apache.commons.compress.changes.Change.getType(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/Change,isReplaceMode,() → boolean,org.apache.commons.compress.changes.Change.isReplaceMode(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetResults,<init>,() → void,org.apache.commons.compress.changes.ChangeSetResults.<init>(),0,18,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetResults,addedFromChangeSet,(java.lang.String) → void,org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet(String),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetResults,addedFromStream,(java.lang.String) → void,org.apache.commons.compress.changes.ChangeSetResults.addedFromStream(String),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetResults,deleted,(java.lang.String) → void,org.apache.commons.compress.changes.ChangeSetResults.deleted(String),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetResults,getAddedFromChangeSet,() → java.util.List,org.apache.commons.compress.changes.ChangeSetResults.getAddedFromChangeSet(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetResults,getAddedFromStream,() → java.util.List,org.apache.commons.compress.changes.ChangeSetResults.getAddedFromStream(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetResults,getDeleted,() → java.util.List,org.apache.commons.compress.changes.ChangeSetResults.getDeleted(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetResults,hasBeenAdded,(java.lang.String) → boolean,org.apache.commons.compress.changes.ChangeSetResults.hasBeenAdded(String),2,12,0.8571428571428571,2,2,0.5,3,0,1,1.0,0,1,1.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetPerformer,<init>,(org.apache.commons.compress.changes.ChangeSet) → void,org.apache.commons.compress.changes.ChangeSetPerformer.<init>(ChangeSet),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetPerformer,copyStream,"(java.io.InputStream, org.apache.commons.compress.archivers.ArchiveOutputStream, org.apache.commons.compress.archivers.ArchiveEntry) → void","org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(InputStream,ArchiveOutputStream,ArchiveEntry)",10,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetPerformer,isDeletedLater,"(java.util.Set, org.apache.commons.compress.archivers.ArchiveEntry) → boolean","org.apache.commons.compress.changes.ChangeSetPerformer.isDeletedLater(Set,ArchiveEntry)",48,0,0.0,12,0,0.0,7,9,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetPerformer,perform,"(org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator, org.apache.commons.compress.archivers.ArchiveOutputStream) → org.apache.commons.compress.changes.ChangeSetResults","org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveEntryIterator,ArchiveOutputStream)",179,0,0.0,36,0,0.0,19,43,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetPerformer,perform,"(org.apache.commons.compress.archivers.ArchiveInputStream, org.apache.commons.compress.archivers.ArchiveOutputStream) → org.apache.commons.compress.changes.ChangeSetResults","org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveInputStream,ArchiveOutputStream)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetPerformer,perform,"(org.apache.commons.compress.archivers.zip.ZipFile, org.apache.commons.compress.archivers.ArchiveOutputStream) → org.apache.commons.compress.changes.ChangeSetResults","org.apache.commons.compress.changes.ChangeSetPerformer.perform(ZipFile,ArchiveOutputStream)",10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetPerformer$ArchiveInputStreamIterator,<init>,(org.apache.commons.compress.archivers.ArchiveInputStream) → void,org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator.<init>(ArchiveInputStream),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetPerformer$ArchiveInputStreamIterator,getInputStream,() → java.io.InputStream,org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator.getInputStream(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetPerformer$ArchiveInputStreamIterator,hasNext,() → boolean,org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator.hasNext(),11,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/changes,org/apache/commons/compress/changes/ChangeSetPerformer$ArchiveInputStreamIterator,next,() → org.apache.commons.compress.archivers.ArchiveEntry,org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator.next(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/FileNameUtil,<init>,"(java.util.Map, java.lang.String) → void","org.apache.commons.compress.compressors.FileNameUtil.<init>(Map,String)",0,88,1.0,0,12,1.0,7,0,28,1.0,0,1,1.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/FileNameUtil,getCompressedFilename,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.FileNameUtil.getCompressedFilename(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/FileNameUtil,getCompressedFileName,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.FileNameUtil.getCompressedFileName(String),55,0,0.0,6,0,0.0,4,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/FileNameUtil,getUncompressedFilename,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFilename(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/FileNameUtil,getUncompressedFileName,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFileName(String),31,16,0.3404255319148936,5,1,0.16666666666666666,4,3,4,0.5714285714285714,0,1,1.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/FileNameUtil,isCompressedFilename,(java.lang.String) → boolean,org.apache.commons.compress.compressors.FileNameUtil.isCompressedFilename(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/FileNameUtil,isCompressedFileName,(java.lang.String) → boolean,org.apache.commons.compress.compressors.FileNameUtil.isCompressedFileName(String),32,0,0.0,6,0,0.0,4,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/FileNameUtil,lambda$new$0,"(java.util.Map$Entry, java.lang.String) → java.lang.String","org.apache.commons.compress.compressors.FileNameUtil.lambda$new$0(Entry,String)",0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorException,<init>,(java.lang.String) → void,org.apache.commons.compress.compressors.CompressorException.<init>(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorException,<init>,"(java.lang.String, java.lang.Throwable) → void","org.apache.commons.compress.compressors.CompressorException.<init>(String,Throwable)",5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorOutputStream,<init>,() → void,org.apache.commons.compress.compressors.CompressorOutputStream.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorOutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.compressors.CompressorOutputStream.<init>(OutputStream),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,archiveStreamProviderIterable,() → java.lang.Iterable,org.apache.commons.compress.compressors.CompressorStreamFactory.archiveStreamProviderIterable(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,detect,(java.io.InputStream) → java.lang.String,org.apache.commons.compress.compressors.CompressorStreamFactory.detect(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,detect,"(java.io.InputStream, java.util.Set) → java.lang.String","org.apache.commons.compress.compressors.CompressorStreamFactory.detect(InputStream,Set)",153,0,0.0,48,0,0.0,25,35,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,findAvailableCompressorInputStreamProviders,() → java.util.SortedMap,org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,findAvailableCompressorOutputStreamProviders,() → java.util.SortedMap,org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getBrotli,() → java.lang.String,org.apache.commons.compress.compressors.CompressorStreamFactory.getBrotli(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getBzip2,() → java.lang.String,org.apache.commons.compress.compressors.CompressorStreamFactory.getBzip2(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getDeflate,() → java.lang.String,org.apache.commons.compress.compressors.CompressorStreamFactory.getDeflate(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getDeflate64,() → java.lang.String,org.apache.commons.compress.compressors.CompressorStreamFactory.getDeflate64(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getGzip,() → java.lang.String,org.apache.commons.compress.compressors.CompressorStreamFactory.getGzip(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getLZ4Block,() → java.lang.String,org.apache.commons.compress.compressors.CompressorStreamFactory.getLZ4Block(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getLZ4Framed,() → java.lang.String,org.apache.commons.compress.compressors.CompressorStreamFactory.getLZ4Framed(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getLzma,() → java.lang.String,org.apache.commons.compress.compressors.CompressorStreamFactory.getLzma(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getPack200,() → java.lang.String,org.apache.commons.compress.compressors.CompressorStreamFactory.getPack200(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getSingleton,() → org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getSingleton(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getSnappyFramed,() → java.lang.String,org.apache.commons.compress.compressors.CompressorStreamFactory.getSnappyFramed(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getSnappyRaw,() → java.lang.String,org.apache.commons.compress.compressors.CompressorStreamFactory.getSnappyRaw(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getXz,() → java.lang.String,org.apache.commons.compress.compressors.CompressorStreamFactory.getXz(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getZ,() → java.lang.String,org.apache.commons.compress.compressors.CompressorStreamFactory.getZ(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getZstandard,() → java.lang.String,org.apache.commons.compress.compressors.CompressorStreamFactory.getZstandard(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,putAll,"(java.util.Set, org.apache.commons.compress.compressors.CompressorStreamProvider, java.util.TreeMap) → void","org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set,CompressorStreamProvider,TreeMap)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,toKey,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,youNeed,"(java.lang.String, java.lang.String) → java.lang.String","org.apache.commons.compress.compressors.CompressorStreamFactory.youNeed(String,String)",13,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,<init>,() → void,org.apache.commons.compress.compressors.CompressorStreamFactory.<init>(),9,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,<init>,(boolean) → void,org.apache.commons.compress.compressors.CompressorStreamFactory.<init>(boolean),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,<init>,"(boolean, int) → void","org.apache.commons.compress.compressors.CompressorStreamFactory.<init>(boolean,int)",13,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,createCompressorInputStream,(java.io.InputStream) → org.apache.commons.compress.compressors.CompressorInputStream,org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(InputStream),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,createCompressorInputStream,"(java.io.InputStream, java.util.Set) → org.apache.commons.compress.compressors.CompressorInputStream","org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(InputStream,Set)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,createCompressorInputStream,"(java.lang.String, java.io.InputStream) → org.apache.commons.compress.compressors.CompressorInputStream","org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,createCompressorInputStream,"(java.lang.String, java.io.InputStream, boolean) → org.apache.commons.compress.compressors.CompressorInputStream","org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream,boolean)",240,0,0.0,42,0,0.0,22,45,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,createCompressorOutputStream,"(java.lang.String, java.io.OutputStream) → org.apache.commons.compress.compressors.CompressorOutputStream","org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream)",135,0,0.0,26,0,0.0,14,29,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getCompressorInputStreamProviders,() → java.util.SortedMap,org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorInputStreamProviders(),10,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getCompressorOutputStreamProviders,() → java.util.SortedMap,org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorOutputStreamProviders(),10,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getDecompressConcatenated,() → boolean,org.apache.commons.compress.compressors.CompressorStreamFactory.getDecompressConcatenated(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getDecompressUntilEOF,() → java.lang.Boolean,org.apache.commons.compress.compressors.CompressorStreamFactory.getDecompressUntilEOF(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getInputStreamCompressorNames,() → java.util.Set,org.apache.commons.compress.compressors.CompressorStreamFactory.getInputStreamCompressorNames(),60,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,getOutputStreamCompressorNames,() → java.util.Set,org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames(),44,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,setDecompressConcatenated,(boolean) → void,org.apache.commons.compress.compressors.CompressorStreamFactory.setDecompressConcatenated(boolean),12,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,lambda$putAll$4,"(java.util.TreeMap, org.apache.commons.compress.compressors.CompressorStreamProvider, java.lang.String) → void","org.apache.commons.compress.compressors.CompressorStreamFactory.lambda$putAll$4(TreeMap,CompressorStreamProvider,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,lambda$findAvailableCompressorOutputStreamProviders$3,() → java.util.SortedMap,org.apache.commons.compress.compressors.CompressorStreamFactory.lambda$findAvailableCompressorOutputStreamProviders$3(),15,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,lambda$null$2,"(java.util.TreeMap, org.apache.commons.compress.compressors.CompressorStreamProvider) → void","org.apache.commons.compress.compressors.CompressorStreamFactory.lambda$null$2(TreeMap,CompressorStreamProvider)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,lambda$findAvailableCompressorInputStreamProviders$1,() → java.util.SortedMap,org.apache.commons.compress.compressors.CompressorStreamFactory.lambda$findAvailableCompressorInputStreamProviders$1(),15,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,lambda$null$0,"(java.util.TreeMap, org.apache.commons.compress.compressors.CompressorStreamProvider) → void","org.apache.commons.compress.compressors.CompressorStreamFactory.lambda$null$0(TreeMap,CompressorStreamProvider)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorStreamFactory,<clinit>,() → void,org.apache.commons.compress.compressors.CompressorStreamFactory.<clinit>(),61,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorInputStream,<init>,() → void,org.apache.commons.compress.compressors.CompressorInputStream.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorInputStream,count,(int) → void,org.apache.commons.compress.compressors.CompressorInputStream.count(int),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorInputStream,count,(long) → void,org.apache.commons.compress.compressors.CompressorInputStream.count(long),11,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorInputStream,getBytesRead,() → long,org.apache.commons.compress.compressors.CompressorInputStream.getBytesRead(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorInputStream,getCount,() → int,org.apache.commons.compress.compressors.CompressorInputStream.getCount(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorInputStream,getUncompressedCount,() → long,org.apache.commons.compress.compressors.CompressorInputStream.getUncompressedCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors,org/apache/commons/compress/compressors/CompressorInputStream,pushedBackBytes,(long) → void,org.apache.commons.compress.compressors.CompressorInputStream.pushedBackBytes(long),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/CloseableConsumerAdapter,<init>,(org.apache.commons.compress.archivers.examples.CloseableConsumer) → void,org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter.<init>(CloseableConsumer),0,9,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/CloseableConsumerAdapter,close,() → void,org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter.close(),5,4,0.4444444444444444,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/CloseableConsumerAdapter,track,(java.io.Closeable) → java.io.Closeable,org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter.track(Closeable),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,<init>,() → void,org.apache.commons.compress.archivers.examples.Expander.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(org.apache.commons.compress.archivers.examples.Expander$ArchiveEntrySupplier, org.apache.commons.compress.archivers.examples.Expander$ArchiveEntryBiConsumer, java.nio.file.Path) → void","org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveEntrySupplier,ArchiveEntryBiConsumer,Path)",107,0,0.0,26,0,0.0,14,18,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(org.apache.commons.compress.archivers.ArchiveInputStream, java.io.File) → void","org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveInputStream,File)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(org.apache.commons.compress.archivers.ArchiveInputStream, java.nio.file.Path) → void","org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveInputStream,Path)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(java.io.File, java.io.File) → void","org.apache.commons.compress.archivers.examples.Expander.expand(File,File)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(java.io.InputStream, java.io.File) → void","org.apache.commons.compress.archivers.examples.Expander.expand(InputStream,File)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(java.io.InputStream, java.io.File, org.apache.commons.compress.archivers.examples.CloseableConsumer) → void","org.apache.commons.compress.archivers.examples.Expander.expand(InputStream,File,CloseableConsumer)",17,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(java.nio.file.Path, java.nio.file.Path) → void","org.apache.commons.compress.archivers.examples.Expander.expand(Path,Path)",17,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(org.apache.commons.compress.archivers.sevenz.SevenZFile, java.io.File) → void","org.apache.commons.compress.archivers.examples.Expander.expand(SevenZFile,File)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(org.apache.commons.compress.archivers.sevenz.SevenZFile, java.nio.file.Path) → void","org.apache.commons.compress.archivers.examples.Expander.expand(SevenZFile,Path)",11,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(java.lang.String, java.io.File, java.io.File) → void","org.apache.commons.compress.archivers.examples.Expander.expand(String,File,File)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(java.lang.String, java.io.InputStream, java.io.File) → void","org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(java.lang.String, java.io.InputStream, java.io.File, org.apache.commons.compress.archivers.examples.CloseableConsumer) → void","org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File,CloseableConsumer)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(java.lang.String, java.io.InputStream, java.nio.file.Path, org.apache.commons.compress.archivers.examples.CloseableConsumer) → void","org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,Path,CloseableConsumer)",20,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(java.lang.String, java.nio.file.Path, java.nio.file.Path) → void","org.apache.commons.compress.archivers.examples.Expander.expand(String,Path,Path)",39,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(java.lang.String, java.nio.channels.SeekableByteChannel, java.io.File) → void","org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(java.lang.String, java.nio.channels.SeekableByteChannel, java.io.File, org.apache.commons.compress.archivers.examples.CloseableConsumer) → void","org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File,CloseableConsumer)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(java.lang.String, java.nio.channels.SeekableByteChannel, java.nio.file.Path, org.apache.commons.compress.archivers.examples.CloseableConsumer) → void","org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,Path,CloseableConsumer)",80,0,0.0,8,0,0.0,5,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(org.apache.commons.compress.archivers.tar.TarFile, java.io.File) → void","org.apache.commons.compress.archivers.examples.Expander.expand(TarFile,File)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(org.apache.commons.compress.archivers.tar.TarFile, java.nio.file.Path) → void","org.apache.commons.compress.archivers.examples.Expander.expand(TarFile,Path)",12,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(org.apache.commons.compress.archivers.zip.ZipFile, java.io.File) → void","org.apache.commons.compress.archivers.examples.Expander.expand(ZipFile,File)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,expand,"(org.apache.commons.compress.archivers.zip.ZipFile, java.nio.file.Path) → void","org.apache.commons.compress.archivers.examples.Expander.expand(ZipFile,Path)",12,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,prefersSeekableByteChannel,(java.lang.String) → boolean,org.apache.commons.compress.archivers.examples.Expander.prefersSeekableByteChannel(String),16,0,0.0,6,0,0.0,4,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,toPath,(java.io.File) → java.nio.file.Path,org.apache.commons.compress.archivers.examples.Expander.toPath(File),7,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,lambda$expand$6,"(org.apache.commons.compress.archivers.zip.ZipFile, org.apache.commons.compress.archivers.zip.ZipArchiveEntry, java.io.OutputStream) → void","org.apache.commons.compress.archivers.examples.Expander.lambda$expand$6(ZipFile,ZipArchiveEntry,OutputStream)",11,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,lambda$expand$5,"(java.util.Enumeration, org.apache.commons.compress.archivers.zip.ZipFile) → org.apache.commons.compress.archivers.zip.ZipArchiveEntry","org.apache.commons.compress.archivers.examples.Expander.lambda$expand$5(Enumeration,ZipFile)",27,0,0.0,8,0,0.0,5,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,lambda$expand$4,"(org.apache.commons.compress.archivers.tar.TarFile, org.apache.commons.compress.archivers.tar.TarArchiveEntry, java.io.OutputStream) → void","org.apache.commons.compress.archivers.examples.Expander.lambda$expand$4(TarFile,TarArchiveEntry,OutputStream)",11,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,lambda$expand$3,(java.util.Iterator) → org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.examples.Expander.lambda$expand$3(Iterator),9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,lambda$expand$2,"(org.apache.commons.compress.archivers.sevenz.SevenZFile, org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry, java.io.OutputStream) → void","org.apache.commons.compress.archivers.examples.Expander.lambda$expand$2(SevenZFile,SevenZArchiveEntry,OutputStream)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,lambda$expand$1,"(org.apache.commons.compress.archivers.ArchiveInputStream, org.apache.commons.compress.archivers.ArchiveEntry, java.io.OutputStream) → void","org.apache.commons.compress.archivers.examples.Expander.lambda$expand$1(ArchiveInputStream,ArchiveEntry,OutputStream)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Expander,lambda$expand$0,(org.apache.commons.compress.archivers.ArchiveInputStream) → org.apache.commons.compress.archivers.ArchiveEntry,org.apache.commons.compress.archivers.examples.Expander.lambda$expand$0(ArchiveInputStream),15,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/CloseableConsumer,lambda$static$0,(java.io.Closeable) → void,org.apache.commons.compress.archivers.examples.CloseableConsumer.lambda$static$0(Closeable),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/CloseableConsumer,<clinit>,() → void,org.apache.commons.compress.archivers.examples.CloseableConsumer.<clinit>(),0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver$ArchiverFileVisitor,<init>,"(org.apache.commons.compress.archivers.ArchiveOutputStream, java.nio.file.Path, java.nio.file.LinkOption[]) → void","org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.<init>(ArchiveOutputStream,Path,LinkOption[])",18,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver$ArchiverFileVisitor,preVisitDirectory,"(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) → java.nio.file.FileVisitResult","org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.preVisitDirectory(Path,BasicFileAttributes)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver$ArchiverFileVisitor,visit,"(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes, boolean) → java.nio.file.FileVisitResult","org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.visit(Path,BasicFileAttributes,boolean)",57,0,0.0,8,0,0.0,5,10,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver$ArchiverFileVisitor,visitFile,"(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) → java.nio.file.FileVisitResult","org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.visitFile(Path,BasicFileAttributes)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver,<init>,() → void,org.apache.commons.compress.archivers.examples.Archiver.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver,create,"(org.apache.commons.compress.archivers.ArchiveOutputStream, java.io.File) → void","org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,File)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver,create,"(org.apache.commons.compress.archivers.ArchiveOutputStream, java.nio.file.Path) → void","org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver,create,"(org.apache.commons.compress.archivers.ArchiveOutputStream, java.nio.file.Path, java.util.EnumSet, java.nio.file.LinkOption[]) → void","org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path,EnumSet,LinkOption[])",15,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver,create,"(org.apache.commons.compress.archivers.sevenz.SevenZOutputFile, java.io.File) → void","org.apache.commons.compress.archivers.examples.Archiver.create(SevenZOutputFile,File)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver,create,"(org.apache.commons.compress.archivers.sevenz.SevenZOutputFile, java.nio.file.Path) → void","org.apache.commons.compress.archivers.examples.Archiver.create(SevenZOutputFile,Path)",16,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver,create,"(java.lang.String, java.io.File, java.io.File) → void","org.apache.commons.compress.archivers.examples.Archiver.create(String,File,File)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver,create,"(java.lang.String, java.io.OutputStream, java.io.File) → void","org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver,create,"(java.lang.String, java.io.OutputStream, java.io.File, org.apache.commons.compress.archivers.examples.CloseableConsumer) → void","org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File,CloseableConsumer)",20,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver,create,"(java.lang.String, java.nio.file.Path, java.nio.file.Path) → void","org.apache.commons.compress.archivers.examples.Archiver.create(String,Path,Path)",47,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver,create,"(java.lang.String, java.nio.channels.SeekableByteChannel, java.io.File) → void","org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver,create,"(java.lang.String, java.nio.channels.SeekableByteChannel, java.io.File, org.apache.commons.compress.archivers.examples.CloseableConsumer) → void","org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File,CloseableConsumer)",64,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver,create,"(java.lang.String, java.nio.channels.SeekableByteChannel, java.nio.file.Path) → void","org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,Path)",41,0,0.0,4,0,0.0,3,10,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver,prefersSeekableByteChannel,(java.lang.String) → boolean,org.apache.commons.compress.archivers.examples.Archiver.prefersSeekableByteChannel(String),12,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver,<clinit>,() → void,org.apache.commons.compress.archivers.examples.Archiver.<clinit>(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver$1,<init>,"(org.apache.commons.compress.archivers.examples.Archiver, org.apache.commons.compress.archivers.ArchiveOutputStream, java.nio.file.Path, java.nio.file.LinkOption[], java.nio.file.Path, org.apache.commons.compress.archivers.sevenz.SevenZOutputFile) → void","org.apache.commons.compress.archivers.examples.Archiver$1.<init>(Archiver,ArchiveOutputStream,Path,LinkOption[],Path,SevenZOutputFile)",16,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/examples,org/apache/commons/compress/archivers/examples/Archiver$1,visit,"(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes, boolean) → java.nio.file.FileVisitResult","org.apache.commons.compress.archivers.examples.Archiver$1.visit(Path,BasicFileAttributes,boolean)",58,0,0.0,8,0,0.0,5,10,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,matches,"(byte[], int) → boolean","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byte[],int)",89,0,0.0,26,0,0.0,14,21,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,<init>,"(java.io.InputStream, int) → void","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,int)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,<init>,"(java.io.InputStream, int, java.lang.String) → void","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,int,String)",38,0,0.0,2,0,0.0,2,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,<init>,"(java.io.InputStream, java.lang.String) → void","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,String)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,available,() → int,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.available(),9,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,close,() → void,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.close(),10,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,closeEntry,() → void,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closeEntry(),8,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,ensureOpen,() → void,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.ensureOpen(),9,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,getNextCPIOEntry,() → org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(),134,0,0.0,12,0,0.0,8,27,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,getNextEntry,() → org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextEntry(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(byte[],int,int)",140,0,0.0,28,0,0.0,15,26,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,readAsciiLong,"(int, int) → long","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readAsciiLong(int,int)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,readBinaryLong,"(int, boolean) → long","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readBinaryLong(int,boolean)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,readCString,(int) → java.lang.String,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readCString(int),20,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,readFully,"(byte[], int, int) → int","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(byte[],int,int)",19,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,readNewEntry,(boolean) → org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(boolean),169,0,0.0,14,0,0.0,8,31,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,readOldAsciiEntry,() → org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(),127,0,0.0,10,0,0.0,6,22,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,readOldBinaryEntry,(boolean) → org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(boolean),143,0,0.0,12,0,0.0,7,25,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,readRange,(int) → byte[],org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readRange(int),19,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,skip,(int) → int,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(int),11,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,skip,(long) → long,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(long),56,0,0.0,8,0,0.0,5,16,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream,skipRemainderOfLastBlock,() → void,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skipRemainderOfLastBlock(),42,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,<init>,"(java.io.File, java.lang.String) → void","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(File,String)",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,<init>,"(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) → void","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(Path,String,LinkOption[])",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,<init>,(short) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short),26,22,0.4583333333333333,3,2,0.4,5,7,10,0.5882352941176471,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,<init>,"(short, java.io.File, java.lang.String) → void","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,File,String)",13,32,0.7111111111111111,1,5,0.8333333333333334,4,1,7,0.875,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,<init>,"(short, java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) → void","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,Path,String,LinkOption[])",46,0,0.0,6,0,0.0,4,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,<init>,"(short, java.lang.String) → void","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,String)",0,7,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,<init>,"(short, java.lang.String, long) → void","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,String,long)",0,8,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,<init>,(java.lang.String) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(String),0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,<init>,"(java.lang.String, long) → void","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(String,long)",0,7,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,checkNewFormat,() → void,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkNewFormat(),10,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,checkOldFormat,() → void,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkOldFormat(),10,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,equals,(java.lang.Object) → boolean,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.equals(Object),23,0,0.0,6,0,0.0,4,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getAlignmentBoundary,() → int,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getAlignmentBoundary(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getChksum,() → long,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getChksum(),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getDataPadCount,() → int,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDataPadCount(),0,24,1.0,0,4,1.0,3,0,7,1.0,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getDevice,() → long,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDevice(),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getDeviceMaj,() → long,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMaj(),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getDeviceMin,() → long,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMin(),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getFormat,() → short,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getFormat(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getGID,() → long,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getGID(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getHeaderPadCount,() → int,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getHeaderPadCount,(java.nio.charset.Charset) → int,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(Charset),23,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getHeaderPadCount,(long) → int,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(long),31,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getHeaderSize,() → int,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderSize(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getInode,() → long,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getInode(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getLastModifiedDate,() → java.util.Date,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getLastModifiedDate(),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getMode,() → long,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getMode(),0,15,1.0,0,4,1.0,3,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getName,() → java.lang.String,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getName(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getNumberOfLinks,() → long,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getNumberOfLinks(),15,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getRemoteDevice,() → long,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDevice(),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getRemoteDeviceMaj,() → long,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMaj(),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getRemoteDeviceMin,() → long,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMin(),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getSize,() → long,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getSize(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getTime,() → long,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getTime(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,getUID,() → long,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getUID(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,hashCode,() → int,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.hashCode(),9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,isBlockDevice,() → boolean,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isBlockDevice(),2,8,0.8,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,isCharacterDevice,() → boolean,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isCharacterDevice(),10,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,isDirectory,() → boolean,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isDirectory(),10,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,isNetwork,() → boolean,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isNetwork(),2,8,0.8,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,isPipe,() → boolean,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isPipe(),10,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,isRegularFile,() → boolean,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isRegularFile(),0,10,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,isSocket,() → boolean,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isSocket(),2,8,0.8,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,isSymbolicLink,() → boolean,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isSymbolicLink(),10,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,setChksum,(long) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setChksum(long),8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,setDevice,(long) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDevice(long),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,setDeviceMaj,(long) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMaj(long),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,setDeviceMin,(long) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMin(long),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,setGID,(long) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setGID(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,setInode,(long) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setInode(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,setMode,(long) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setMode(long),18,12,0.4,1,1,0.5,2,1,5,0.8333333333333334,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,setName,(java.lang.String) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setName(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,setNumberOfLinks,(long) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setNumberOfLinks(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,setRemoteDevice,(long) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDevice(long),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,setRemoteDeviceMaj,(long) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMaj(long),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,setRemoteDeviceMin,(long) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMin(long),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,setSize,(long) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setSize(long),14,12,0.46153846153846156,2,2,0.5,3,1,3,0.75,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,setTime,(java.nio.file.attribute.FileTime) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(FileTime),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,setTime,(long) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(long),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveEntry,setUID,(long) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setUID(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioUtil,<init>,() → void,org.apache.commons.compress.archivers.cpio.CpioUtil.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioUtil,byteArray2long,"(byte[], boolean) → long","org.apache.commons.compress.archivers.cpio.CpioUtil.byteArray2long(byte[],boolean)",73,0,0.0,8,0,0.0,5,15,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioUtil,fileType,(long) → long,org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioUtil,long2byteArray,"(long, int, boolean) → byte[]","org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(long,int,boolean)",66,0,0.0,10,0,0.0,6,15,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioUtil,<clinit>,() → void,org.apache.commons.compress.archivers.cpio.CpioUtil.<clinit>(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,<init>,"(java.io.OutputStream, short) → void","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,<init>,"(java.io.OutputStream, short, int) → void","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,<init>,"(java.io.OutputStream, short, int, java.lang.String) → void","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int,String)",40,0,0.0,2,0,0.0,2,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,<init>,"(java.io.OutputStream, java.lang.String) → void","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,String)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,close,() → void,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.close(),8,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,closeArchiveEntry,() → void,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(),72,0,0.0,8,0,0.0,5,13,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,createArchiveEntry,"(java.io.File, java.lang.String) → org.apache.commons.compress.archivers.cpio.CpioArchiveEntry","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(File,String)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,createArchiveEntry,"(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) → org.apache.commons.compress.archivers.cpio.CpioArchiveEntry","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,encode,(java.lang.String) → byte[],org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.encode(String),21,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,finish,() → void,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish(),52,0,0.0,4,0,0.0,3,14,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,pad,(int) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.pad(int),11,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,putArchiveEntry,(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(CpioArchiveEntry),73,0,0.0,8,0,0.0,5,15,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(byte[],int,int)",88,0,0.0,16,0,0.0,9,17,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,writeAsciiLong,"(long, int, int) → void","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int)",67,0,0.0,8,0,0.0,5,16,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,writeBinaryLong,"(long, int, boolean) → void","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(long,int,boolean)",14,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,writeCString,(byte[]) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeCString(byte[]),15,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,writeHeader,(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(CpioArchiveEntry),62,0,0.0,5,0,0.0,5,19,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,writeNewEntry,(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(CpioArchiveEntry),149,0,0.0,6,0,0.0,4,25,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,writeOldAsciiEntry,(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry) → void,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(CpioArchiveEntry),124,0,0.0,6,0,0.0,4,21,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/cpio,org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream,writeOldBinaryEntry,"(org.apache.commons.compress.archivers.cpio.CpioArchiveEntry, boolean) → void","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(CpioArchiveEntry,boolean)",131,0,0.0,6,0,0.0,4,22,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/Sets,newHashSet,(java.lang.Object[]) → java.util.HashSet,org.apache.commons.compress.utils.Sets.newHashSet(Object[]),1,17,0.9444444444444444,2,2,0.5,3,0,4,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/CountingInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.utils.CountingInputStream.<init>(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/CountingInputStream,count,(long) → void,org.apache.commons.compress.utils.CountingInputStream.count(long),11,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/CountingInputStream,getBytesRead,() → long,org.apache.commons.compress.utils.CountingInputStream.getBytesRead(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/CountingInputStream,read,() → int,org.apache.commons.compress.utils.CountingInputStream.read(),11,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/CountingInputStream,read,(byte[]) → int,org.apache.commons.compress.utils.CountingInputStream.read(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/CountingInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.utils.CountingInputStream.read(byte[],int,int)",19,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/Lists,newArrayList,() → java.util.ArrayList,org.apache.commons.compress.utils.Lists.newArrayList(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/Lists,newArrayList,(java.util.Iterator) → java.util.ArrayList,org.apache.commons.compress.utils.Lists.newArrayList(Iterator),8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel,forFiles,(java.io.File[]) → java.nio.channels.SeekableByteChannel,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forFiles(File[]),7,27,0.7941176470588235,0,2,1.0,2,1,3,0.75,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel,forPaths,(java.nio.file.Path[]) → java.nio.channels.SeekableByteChannel,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forPaths(Path[]),22,26,0.5416666666666666,2,2,0.5,3,2,4,0.6666666666666666,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel,forSeekableByteChannels,(java.nio.channels.SeekableByteChannel[]) → java.nio.channels.SeekableByteChannel,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(SeekableByteChannel[]),17,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel,<init>,(java.util.List) → void,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.<init>(List),0,13,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel,close,() → void,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.close(),31,0,0.0,6,0,0.0,4,11,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel,isOpen,() → boolean,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.isOpen(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel,position,() → long,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.position(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel,position,(long) → java.nio.channels.SeekableByteChannel,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.position(long),79,0,0.0,10,0,0.0,6,21,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel,position,"(long, long) → java.nio.channels.SeekableByteChannel","org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.position(long,long)",31,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel,read,(java.nio.ByteBuffer) → int,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.read(ByteBuffer),74,0,0.0,14,0,0.0,8,19,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel,size,() → long,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.size(),28,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel,truncate,(long) → java.nio.channels.SeekableByteChannel,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.truncate(long),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel,write,(java.nio.ByteBuffer) → int,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.write(ByteBuffer),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/MultiReadOnlySeekableByteChannel,<clinit>,() → void,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.<clinit>(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/CharsetNames,<init>,() → void,org.apache.commons.compress.utils.CharsetNames.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/CharsetNames,<clinit>,() → void,org.apache.commons.compress.utils.CharsetNames.<clinit>(),19,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ExactMath,add,"(int, long) → int","org.apache.commons.compress.utils.ExactMath.add(int,long)",12,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ArchiveUtils,isArrayZero,"(byte[], int) → boolean","org.apache.commons.compress.utils.ArchiveUtils.isArrayZero(byte[],int)",15,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ArchiveUtils,isEqual,"(byte[], byte[]) → boolean","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[])",4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ArchiveUtils,isEqual,"(byte[], byte[], boolean) → boolean","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[],boolean)",11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ArchiveUtils,isEqual,"(byte[], int, int, byte[], int, int) → boolean","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int)",9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ArchiveUtils,isEqual,"(byte[], int, int, byte[], int, int, boolean) → boolean","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean)",69,0,0.0,18,0,0.0,10,16,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ArchiveUtils,isEqualWithNull,"(byte[], int, int, byte[], int, int) → boolean","org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int)",9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ArchiveUtils,matchAsciiBuffer,"(java.lang.String, byte[]) → boolean","org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[])",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ArchiveUtils,matchAsciiBuffer,"(java.lang.String, byte[], int, int) → boolean","org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int)",14,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ArchiveUtils,sanitize,(java.lang.String) → java.lang.String,org.apache.commons.compress.utils.ArchiveUtils.sanitize(String),65,0,0.0,12,0,0.0,7,13,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ArchiveUtils,toAsciiBytes,(java.lang.String) → byte[],org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ArchiveUtils,toAsciiString,(byte[]) → java.lang.String,org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[]),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ArchiveUtils,toAsciiString,"(byte[], int, int) → java.lang.String","org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[],int,int)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ArchiveUtils,toString,(org.apache.commons.compress.archivers.ArchiveEntry) → java.lang.String,org.apache.commons.compress.utils.ArchiveUtils.toString(ArchiveEntry),47,0,0.0,4,0,0.0,3,9,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/CloseShieldFilterInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.utils.CloseShieldFilterInputStream.<init>(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/CloseShieldFilterInputStream,close,() → void,org.apache.commons.compress.utils.CloseShieldFilterInputStream.close(),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream,<init>,"(long, long, java.nio.channels.SeekableByteChannel) → void","org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.<init>(long,long,SeekableByteChannel)",0,8,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream,read,"(long, java.nio.ByteBuffer) → int","org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.read(long,ByteBuffer)",0,23,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ByteUtils,checkReadLength,(int) → void,org.apache.commons.compress.utils.ByteUtils.checkReadLength(int),5,4,0.4444444444444444,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ByteUtils,fromLittleEndian,(byte[]) → long,org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[]),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ByteUtils,fromLittleEndian,"(byte[], int, int) → long","org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[],int,int)",0,28,1.0,0,2,1.0,2,0,5,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ByteUtils,fromLittleEndian,"(org.apache.commons.compress.utils.ByteUtils$ByteSupplier, int) → long","org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(ByteSupplier,int)",34,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ByteUtils,fromLittleEndian,"(java.io.DataInput, int) → long","org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(DataInput,int)",25,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ByteUtils,fromLittleEndian,"(java.io.InputStream, int) → long","org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(InputStream,int)",34,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ByteUtils,toLittleEndian,"(byte[], long, int, int) → void","org.apache.commons.compress.utils.ByteUtils.toLittleEndian(byte[],long,int,int)",0,24,1.0,0,2,1.0,2,0,5,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ByteUtils,toLittleEndian,"(org.apache.commons.compress.utils.ByteUtils$ByteConsumer, long, int) → void","org.apache.commons.compress.utils.ByteUtils.toLittleEndian(ByteConsumer,long,int)",20,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ByteUtils,toLittleEndian,"(java.io.DataOutput, long, int) → void","org.apache.commons.compress.utils.ByteUtils.toLittleEndian(DataOutput,long,int)",20,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ByteUtils,toLittleEndian,"(java.io.OutputStream, long, int) → void","org.apache.commons.compress.utils.ByteUtils.toLittleEndian(OutputStream,long,int)",20,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ByteUtils,<clinit>,() → void,org.apache.commons.compress.utils.ByteUtils.<clinit>(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FileNameUtils,<init>,() → void,org.apache.commons.compress.utils.FileNameUtils.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FileNameUtils,getBaseName,(java.nio.file.Path) → java.lang.String,org.apache.commons.compress.utils.FileNameUtils.getBaseName(Path),15,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FileNameUtils,getBaseName,(java.lang.String) → java.lang.String,org.apache.commons.compress.utils.FileNameUtils.getBaseName(String),11,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FileNameUtils,getExtension,(java.nio.file.Path) → java.lang.String,org.apache.commons.compress.utils.FileNameUtils.getExtension(Path),15,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FileNameUtils,getExtension,(java.lang.String) → java.lang.String,org.apache.commons.compress.utils.FileNameUtils.getExtension(String),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/CountingOutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.utils.CountingOutputStream.<init>(OutputStream),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/CountingOutputStream,count,(long) → void,org.apache.commons.compress.utils.CountingOutputStream.count(long),11,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/CountingOutputStream,getBytesWritten,() → long,org.apache.commons.compress.utils.CountingOutputStream.getBytesWritten(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/CountingOutputStream,write,(byte[]) → void,org.apache.commons.compress.utils.CountingOutputStream.write(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/CountingOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.utils.CountingOutputStream.write(byte[],int,int)",11,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/CountingOutputStream,write,(int) → void,org.apache.commons.compress.utils.CountingOutputStream.write(int),8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/OsgiUtils,<init>,() → void,org.apache.commons.compress.utils.OsgiUtils.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/OsgiUtils,isBundleReference,(java.lang.Class) → boolean,org.apache.commons.compress.utils.OsgiUtils.isBundleReference(Class),4,35,0.8974358974358975,2,6,0.75,5,2,7,0.7777777777777778,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/OsgiUtils,isRunningInOsgiEnvironment,() → boolean,org.apache.commons.compress.utils.OsgiUtils.isRunningInOsgiEnvironment(),0,2,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/OsgiUtils,<clinit>,() → void,org.apache.commons.compress.utils.OsgiUtils.<clinit>(),2,12,0.8571428571428571,2,2,0.5,3,0,3,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/TimeUtils,isUnixTime,(java.nio.file.attribute.FileTime) → boolean,org.apache.commons.compress.utils.TimeUtils.isUnixTime(FileTime),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/TimeUtils,isUnixTime,(long) → boolean,org.apache.commons.compress.utils.TimeUtils.isUnixTime(long),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/TimeUtils,ntfsTimeToDate,(long) → java.util.Date,org.apache.commons.compress.utils.TimeUtils.ntfsTimeToDate(long),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/TimeUtils,ntfsTimeToFileTime,(long) → java.nio.file.attribute.FileTime,org.apache.commons.compress.utils.TimeUtils.ntfsTimeToFileTime(long),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/TimeUtils,toDate,(java.nio.file.attribute.FileTime) → java.util.Date,org.apache.commons.compress.utils.TimeUtils.toDate(FileTime),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/TimeUtils,toFileTime,(java.util.Date) → java.nio.file.attribute.FileTime,org.apache.commons.compress.utils.TimeUtils.toFileTime(Date),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/TimeUtils,toNtfsTime,(java.util.Date) → long,org.apache.commons.compress.utils.TimeUtils.toNtfsTime(Date),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/TimeUtils,toNtfsTime,(java.nio.file.attribute.FileTime) → long,org.apache.commons.compress.utils.TimeUtils.toNtfsTime(FileTime),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/TimeUtils,toNtfsTime,(long) → long,org.apache.commons.compress.utils.TimeUtils.toNtfsTime(long),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/TimeUtils,toUnixTime,(java.nio.file.attribute.FileTime) → long,org.apache.commons.compress.utils.TimeUtils.toUnixTime(FileTime),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/TimeUtils,truncateToHundredNanos,(java.nio.file.attribute.FileTime) → java.nio.file.attribute.FileTime,org.apache.commons.compress.utils.TimeUtils.truncateToHundredNanos(FileTime),15,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/TimeUtils,unixTimeToFileTime,(long) → java.nio.file.attribute.FileTime,org.apache.commons.compress.utils.TimeUtils.unixTimeToFileTime(long),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/TimeUtils,<clinit>,() → void,org.apache.commons.compress.utils.TimeUtils.<clinit>(),0,7,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ServiceLoaderIterator,<init>,(java.lang.Class) → void,org.apache.commons.compress.utils.ServiceLoaderIterator.<init>(Class),0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ServiceLoaderIterator,<init>,"(java.lang.Class, java.lang.ClassLoader) → void","org.apache.commons.compress.utils.ServiceLoaderIterator.<init>(Class,ClassLoader)",0,12,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ServiceLoaderIterator,hasNext,() → boolean,org.apache.commons.compress.utils.ServiceLoaderIterator.hasNext(),16,9,0.36,4,2,0.3333333333333333,4,7,3,0.3,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ServiceLoaderIterator,next,() → java.lang.Object,org.apache.commons.compress.utils.ServiceLoaderIterator.next(),25,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ServiceLoaderIterator,remove,() → void,org.apache.commons.compress.utils.ServiceLoaderIterator.remove(),14,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ParsingUtils,parseIntValue,(java.lang.String) → int,org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ParsingUtils,parseIntValue,"(java.lang.String, int) → int","org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String,int)",17,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ParsingUtils,parseLongValue,(java.lang.String) → long,org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ParsingUtils,parseLongValue,"(java.lang.String, int) → long","org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String,int)",17,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/BitInputStream,<init>,"(java.io.InputStream, java.nio.ByteOrder) → void","org.apache.commons.compress.utils.BitInputStream.<init>(InputStream,ByteOrder)",15,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/BitInputStream,alignWithByteBoundary,() → void,org.apache.commons.compress.utils.BitInputStream.alignWithByteBoundary(),12,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/BitInputStream,bitsAvailable,() → long,org.apache.commons.compress.utils.BitInputStream.bitsAvailable(),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/BitInputStream,bitsCached,() → int,org.apache.commons.compress.utils.BitInputStream.bitsCached(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/BitInputStream,clearBitCache,() → void,org.apache.commons.compress.utils.BitInputStream.clearBitCache(),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/BitInputStream,close,() → void,org.apache.commons.compress.utils.BitInputStream.close(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/BitInputStream,ensureCache,(int) → boolean,org.apache.commons.compress.utils.BitInputStream.ensureCache(int),54,0,0.0,8,0,0.0,5,11,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/BitInputStream,getBytesRead,() → long,org.apache.commons.compress.utils.BitInputStream.getBytesRead(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/BitInputStream,processBitsGreater57,(int) → long,org.apache.commons.compress.utils.BitInputStream.processBitsGreater57(int),91,0,0.0,4,0,0.0,3,19,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/BitInputStream,readBits,(int) → long,org.apache.commons.compress.utils.BitInputStream.readBits(int),28,0,0.0,8,0,0.0,5,7,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/BitInputStream,readCachedBits,(int) → long,org.apache.commons.compress.utils.BitInputStream.readCachedBits(int),38,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/BitInputStream,<clinit>,() → void,org.apache.commons.compress.utils.BitInputStream.<clinit>(),23,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ChecksumVerifyingInputStream,<init>,"(java.util.zip.Checksum, java.io.InputStream, long, long) → void","org.apache.commons.compress.utils.ChecksumVerifyingInputStream.<init>(Checksum,InputStream,long,long)",11,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ChecksumVerifyingInputStream,getBytesRemaining,() → long,org.apache.commons.compress.utils.ChecksumVerifyingInputStream.getBytesRemaining(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ChecksumVerifyingInputStream,read,() → int,org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(),22,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ChecksumVerifyingInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(byte[],int,int)",23,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ChecksumVerifyingInputStream,verify,() → void,org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify(),18,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/IOUtils,closeQuietly,(java.io.Closeable) → void,org.apache.commons.compress.utils.IOUtils.closeQuietly(Closeable),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/IOUtils,copy,"(java.io.File, java.io.OutputStream) → void","org.apache.commons.compress.utils.IOUtils.copy(File,OutputStream)",5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/IOUtils,copy,"(java.io.InputStream, java.io.OutputStream) → long","org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/IOUtils,copy,"(java.io.InputStream, java.io.OutputStream, int) → long","org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream,int)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/IOUtils,copyRange,"(java.io.InputStream, long, java.io.OutputStream) → long","org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/IOUtils,copyRange,"(java.io.InputStream, long, java.io.OutputStream, int) → long","org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream,int)",28,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/IOUtils,read,"(java.io.File, byte[]) → int","org.apache.commons.compress.utils.IOUtils.read(File,byte[])",17,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/IOUtils,readFully,"(java.io.InputStream, byte[]) → int","org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[])",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/IOUtils,readFully,"(java.io.InputStream, byte[], int, int) → int","org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int)",24,0,0.0,8,0,0.0,5,3,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/IOUtils,readFully,"(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer) → void","org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer)",15,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/IOUtils,readRange,"(java.io.InputStream, int) → byte[]","org.apache.commons.compress.utils.IOUtils.readRange(InputStream,int)",14,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/IOUtils,readRange,"(java.nio.channels.ReadableByteChannel, int) → byte[]","org.apache.commons.compress.utils.IOUtils.readRange(ReadableByteChannel,int)",47,0,0.0,4,0,0.0,3,13,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/IOUtils,skip,"(java.io.InputStream, long) → long","org.apache.commons.compress.utils.IOUtils.skip(InputStream,long)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/IOUtils,toByteArray,(java.io.InputStream) → byte[],org.apache.commons.compress.utils.IOUtils.toByteArray(InputStream),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/IOUtils,<clinit>,() → void,org.apache.commons.compress.utils.IOUtils.<clinit>(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/Iterators,addAll,"(java.util.Collection, java.util.Iterator) → boolean","org.apache.commons.compress.utils.Iterators.addAll(Collection,Iterator)",21,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.<init>(OutputStream),0,11,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel,close,() → void,org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.close(),10,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel,isOpen,() → boolean,org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.isOpen(),1,7,0.875,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FixedLengthBlockOutputStream$BufferAtATimeOutputChannel,write,(java.nio.ByteBuffer) → int,org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.write(ByteBuffer),45,0,0.0,4,0,0.0,3,12,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/SeekableInMemoryByteChannel,<init>,() → void,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.<init>(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/SeekableInMemoryByteChannel,<init>,(byte[]) → void,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.<init>(byte[]),0,15,1.0,0,0,coverage not available since no branches,1,0,5,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/SeekableInMemoryByteChannel,<init>,(int) → void,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.<init>(int),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/SeekableInMemoryByteChannel,array,() → byte[],org.apache.commons.compress.utils.SeekableInMemoryByteChannel.array(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/SeekableInMemoryByteChannel,close,() → void,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.close(),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/SeekableInMemoryByteChannel,ensureOpen,() → void,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.ensureOpen(),4,4,0.5,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/SeekableInMemoryByteChannel,isOpen,() → boolean,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.isOpen(),1,7,0.875,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/SeekableInMemoryByteChannel,position,() → long,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/SeekableInMemoryByteChannel,position,(long) → java.nio.channels.SeekableByteChannel,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long),0,21,1.0,0,4,1.0,3,0,5,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/SeekableInMemoryByteChannel,read,(java.nio.ByteBuffer) → int,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer),36,0,0.0,4,0,0.0,3,10,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/SeekableInMemoryByteChannel,resize,(int) → void,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(int),28,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/SeekableInMemoryByteChannel,size,() → long,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/SeekableInMemoryByteChannel,truncate,(long) → java.nio.channels.SeekableByteChannel,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long),35,0,0.0,8,0,0.0,5,7,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/SeekableInMemoryByteChannel,write,(java.nio.ByteBuffer) → int,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer),58,0,0.0,6,0,0.0,4,14,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/SkipShieldingInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.utils.SkipShieldingInputStream.<init>(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/SkipShieldingInputStream,skip,(long) → long,org.apache.commons.compress.utils.SkipShieldingInputStream.skip(long),16,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/SkipShieldingInputStream,<clinit>,() → void,org.apache.commons.compress.utils.SkipShieldingInputStream.<clinit>(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ChecksumCalculatingInputStream,<init>,"(java.util.zip.Checksum, java.io.InputStream) → void","org.apache.commons.compress.utils.ChecksumCalculatingInputStream.<init>(Checksum,InputStream)",11,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ChecksumCalculatingInputStream,getValue,() → long,org.apache.commons.compress.utils.ChecksumCalculatingInputStream.getValue(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/BoundedArchiveInputStream,<init>,"(long, long) → void","org.apache.commons.compress.utils.BoundedArchiveInputStream.<init>(long,long)",0,32,1.0,0,2,1.0,2,0,6,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/BoundedArchiveInputStream,read,() → int,org.apache.commons.compress.utils.BoundedArchiveInputStream.read(),12,32,0.7272727272727273,1,5,0.8333333333333334,4,2,8,0.8,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/BoundedArchiveInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.utils.BoundedArchiveInputStream.read(byte[],int,int)",65,0,0.0,12,0,0.0,7,12,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FlushShieldFilterOutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.utils.FlushShieldFilterOutputStream.<init>(OutputStream),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FlushShieldFilterOutputStream,flush,() → void,org.apache.commons.compress.utils.FlushShieldFilterOutputStream.flush(),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FixedLengthBlockOutputStream,<init>,"(java.io.OutputStream, int) → void","org.apache.commons.compress.utils.FixedLengthBlockOutputStream.<init>(OutputStream,int)",12,25,0.6756756756756757,1,1,0.5,2,4,7,0.6363636363636364,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FixedLengthBlockOutputStream,<init>,"(java.nio.channels.WritableByteChannel, int) → void","org.apache.commons.compress.utils.FixedLengthBlockOutputStream.<init>(WritableByteChannel,int)",0,18,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FixedLengthBlockOutputStream,close,() → void,org.apache.commons.compress.utils.FixedLengthBlockOutputStream.close(),12,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FixedLengthBlockOutputStream,flushBlock,() → void,org.apache.commons.compress.utils.FixedLengthBlockOutputStream.flushBlock(),9,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FixedLengthBlockOutputStream,isOpen,() → boolean,org.apache.commons.compress.utils.FixedLengthBlockOutputStream.isOpen(),5,11,0.6875,2,2,0.5,3,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FixedLengthBlockOutputStream,maybeFlush,() → void,org.apache.commons.compress.utils.FixedLengthBlockOutputStream.maybeFlush(),0,7,1.0,1,1,0.5,2,0,3,1.0,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FixedLengthBlockOutputStream,padBlock,() → void,org.apache.commons.compress.utils.FixedLengthBlockOutputStream.padBlock(),61,0,0.0,10,0,0.0,6,15,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FixedLengthBlockOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(byte[],int,int)",4,34,0.8947368421052632,1,3,0.75,3,1,11,0.9166666666666666,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FixedLengthBlockOutputStream,write,(java.nio.ByteBuffer) → int,org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(ByteBuffer),62,18,0.225,6,2,0.25,5,14,5,0.2631578947368421,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FixedLengthBlockOutputStream,write,(int) → void,org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(int),16,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/FixedLengthBlockOutputStream,writeBlock,() → void,org.apache.commons.compress.utils.FixedLengthBlockOutputStream.writeBlock(),21,25,0.5434782608695652,2,2,0.5,3,2,6,0.75,0,1,1.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/Charsets,<init>,() → void,org.apache.commons.compress.utils.Charsets.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/Charsets,toCharset,(java.nio.charset.Charset) → java.nio.charset.Charset,org.apache.commons.compress.utils.Charsets.toCharset(Charset),6,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/Charsets,toCharset,(java.lang.String) → java.nio.charset.Charset,org.apache.commons.compress.utils.Charsets.toCharset(String),7,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/Charsets,<clinit>,() → void,org.apache.commons.compress.utils.Charsets.<clinit>(),13,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ByteUtils$OutputStreamByteConsumer,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer.<init>(OutputStream),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ByteUtils$OutputStreamByteConsumer,accept,(int) → void,org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer.accept(int),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ByteUtils$InputStreamByteSupplier,<init>,(java.io.InputStream) → void,org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier.<init>(InputStream),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/ByteUtils$InputStreamByteSupplier,getAsByte,() → int,org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier.getAsByte(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/CRC32VerifyingInputStream,<init>,"(java.io.InputStream, long, int) → void","org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,int)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/CRC32VerifyingInputStream,<init>,"(java.io.InputStream, long, long) → void","org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,long)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/BoundedInputStream,<init>,"(java.io.InputStream, long) → void","org.apache.commons.compress.utils.BoundedInputStream.<init>(InputStream,long)",8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/utils,org/apache/commons/compress/utils/BoundedInputStream,getBytesRemaining,() → long,org.apache.commons.compress.utils.BoundedInputStream.getBytesRemaining(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.<init>(OutputStream),0,7,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream,<init>,"(java.io.OutputStream, org.apache.commons.compress.compressors.gzip.GzipParameters) → void","org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.<init>(OutputStream,GzipParameters)",0,30,1.0,0,0,coverage not available since no branches,1,0,7,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream,close,() → void,org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.close(),0,11,1.0,0,2,1.0,2,0,5,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream,deflate,() → void,org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflate(),0,20,1.0,1,1,0.5,2,0,4,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream,finish,() → void,org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.finish(),0,20,1.0,1,3,0.75,3,0,7,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream,write,(byte[]) → void,org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[],int,int)",33,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream,write,(int) → void,org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(int),14,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream,writeC,"(java.lang.String, java.nio.charset.Charset) → void","org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeC(String,Charset)",20,3,0.13043478260869565,1,1,0.5,2,5,2,0.2857142857142857,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream,writeMemberHeader,(org.apache.commons.compress.compressors.gzip.GzipParameters) → void,org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeMemberHeader(GzipParameters),83,105,0.5585106382978723,9,9,0.5,10,11,24,0.6857142857142857,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream,writeMemberTrailer,() → void,org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeMemberTrailer(),0,26,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/ExtraField,fromBytes,(byte[]) → org.apache.commons.compress.compressors.gzip.ExtraField,org.apache.commons.compress.compressors.gzip.ExtraField.fromBytes(byte[]),117,0,0.0,8,0,0.0,5,19,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/ExtraField,<init>,() → void,org.apache.commons.compress.compressors.gzip.ExtraField.<init>(),0,8,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/ExtraField,addSubField,"(java.lang.String, byte[]) → org.apache.commons.compress.compressors.gzip.ExtraField","org.apache.commons.compress.compressors.gzip.ExtraField.addSubField(String,byte[])",95,0,0.0,8,0,0.0,5,15,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/ExtraField,clear,() → void,org.apache.commons.compress.compressors.gzip.ExtraField.clear(),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/ExtraField,equals,(java.lang.Object) → boolean,org.apache.commons.compress.compressors.gzip.ExtraField.equals(Object),34,0,0.0,10,0,0.0,6,8,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/ExtraField,findFirstSubField,(java.lang.String) → org.apache.commons.compress.compressors.gzip.ExtraField$SubField,org.apache.commons.compress.compressors.gzip.ExtraField.findFirstSubField(String),11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/ExtraField,getEncodedSize,() → int,org.apache.commons.compress.compressors.gzip.ExtraField.getEncodedSize(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/ExtraField,getSubField,(int) → org.apache.commons.compress.compressors.gzip.ExtraField$SubField,org.apache.commons.compress.compressors.gzip.ExtraField.getSubField(int),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/ExtraField,hashCode,() → int,org.apache.commons.compress.compressors.gzip.ExtraField.hashCode(),15,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/ExtraField,isEmpty,() → boolean,org.apache.commons.compress.compressors.gzip.ExtraField.isEmpty(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/ExtraField,iterator,() → java.util.Iterator,org.apache.commons.compress.compressors.gzip.ExtraField.iterator(),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/ExtraField,size,() → int,org.apache.commons.compress.compressors.gzip.ExtraField.size(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/ExtraField,toByteArray,() → byte[],org.apache.commons.compress.compressors.gzip.ExtraField.toByteArray(),67,6,0.0821917808219178,3,1,0.25,3,11,2,0.15384615384615385,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/ExtraField,lambda$findFirstSubField$0,"(java.lang.String, org.apache.commons.compress.compressors.gzip.ExtraField$SubField) → boolean","org.apache.commons.compress.compressors.gzip.ExtraField.lambda$findFirstSubField$0(String,SubField)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/ExtraField,<clinit>,() → void,org.apache.commons.compress.compressors.gzip.ExtraField.<clinit>(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters$OS,from,(int) → org.apache.commons.compress.compressors.gzip.GzipParameters$OS,org.apache.commons.compress.compressors.gzip.GzipParameters$OS.from(int),34,0,0.0,16,0,0.0,16,17,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters$OS,<init>,"(java.lang.String, int, int) → void","org.apache.commons.compress.compressors.gzip.GzipParameters$OS.<init>(String,int,int)",0,8,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters$OS,type,() → int,org.apache.commons.compress.compressors.gzip.GzipParameters$OS.type(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters$OS,<clinit>,() → void,org.apache.commons.compress.compressors.gzip.GzipParameters$OS.<clinit>(),0,169,1.0,0,0,coverage not available since no branches,1,0,16,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,<init>,() → void,org.apache.commons.compress.compressors.gzip.GzipParameters.<init>(),0,21,1.0,0,0,coverage not available since no branches,1,0,7,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,equals,(java.lang.Object) → boolean,org.apache.commons.compress.compressors.gzip.GzipParameters.equals(Object),84,0,0.0,28,0,0.0,15,9,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,getBufferSize,() → int,org.apache.commons.compress.compressors.gzip.GzipParameters.getBufferSize(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,getComment,() → java.lang.String,org.apache.commons.compress.compressors.gzip.GzipParameters.getComment(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,getCompressionLevel,() → int,org.apache.commons.compress.compressors.gzip.GzipParameters.getCompressionLevel(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,getDeflateStrategy,() → int,org.apache.commons.compress.compressors.gzip.GzipParameters.getDeflateStrategy(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,getExtraField,() → org.apache.commons.compress.compressors.gzip.ExtraField,org.apache.commons.compress.compressors.gzip.GzipParameters.getExtraField(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,getFilename,() → java.lang.String,org.apache.commons.compress.compressors.gzip.GzipParameters.getFilename(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,getFileName,() → java.lang.String,org.apache.commons.compress.compressors.gzip.GzipParameters.getFileName(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,getFileNameCharset,() → java.nio.charset.Charset,org.apache.commons.compress.compressors.gzip.GzipParameters.getFileNameCharset(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,getHeaderCRC,() → boolean,org.apache.commons.compress.compressors.gzip.GzipParameters.getHeaderCRC(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,getModificationInstant,() → java.time.Instant,org.apache.commons.compress.compressors.gzip.GzipParameters.getModificationInstant(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,getModificationTime,() → long,org.apache.commons.compress.compressors.gzip.GzipParameters.getModificationTime(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,getOperatingSystem,() → int,org.apache.commons.compress.compressors.gzip.GzipParameters.getOperatingSystem(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,getOS,() → org.apache.commons.compress.compressors.gzip.GzipParameters$OS,org.apache.commons.compress.compressors.gzip.GzipParameters.getOS(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,getTrailerCrc,() → long,org.apache.commons.compress.compressors.gzip.GzipParameters.getTrailerCrc(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,getTrailerISize,() → long,org.apache.commons.compress.compressors.gzip.GzipParameters.getTrailerISize(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,hashCode,() → int,org.apache.commons.compress.compressors.gzip.GzipParameters.hashCode(),70,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,requireNonNulByte,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.gzip.GzipParameters.requireNonNulByte(String),27,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,setBufferSize,(int) → void,org.apache.commons.compress.compressors.gzip.GzipParameters.setBufferSize(int),18,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,setComment,(java.lang.String) → void,org.apache.commons.compress.compressors.gzip.GzipParameters.setComment(String),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,setCompressionLevel,(int) → void,org.apache.commons.compress.compressors.gzip.GzipParameters.setCompressionLevel(int),22,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,setDeflateStrategy,(int) → void,org.apache.commons.compress.compressors.gzip.GzipParameters.setDeflateStrategy(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,setExtraField,(org.apache.commons.compress.compressors.gzip.ExtraField) → void,org.apache.commons.compress.compressors.gzip.GzipParameters.setExtraField(ExtraField),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,setFilename,(java.lang.String) → void,org.apache.commons.compress.compressors.gzip.GzipParameters.setFilename(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,setFileName,(java.lang.String) → void,org.apache.commons.compress.compressors.gzip.GzipParameters.setFileName(String),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,setFileNameCharset,(java.nio.charset.Charset) → void,org.apache.commons.compress.compressors.gzip.GzipParameters.setFileNameCharset(Charset),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,setHeaderCRC,(boolean) → void,org.apache.commons.compress.compressors.gzip.GzipParameters.setHeaderCRC(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,setModificationInstant,(java.time.Instant) → void,org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationInstant(Instant),8,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,setModificationTime,(long) → void,org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationTime(long),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,setOperatingSystem,(int) → void,org.apache.commons.compress.compressors.gzip.GzipParameters.setOperatingSystem(int),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,setOS,(org.apache.commons.compress.compressors.gzip.GzipParameters$OS) → void,org.apache.commons.compress.compressors.gzip.GzipParameters.setOS(OS),8,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,setTrailerCrc,(long) → void,org.apache.commons.compress.compressors.gzip.GzipParameters.setTrailerCrc(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,setTrailerISize,(long) → void,org.apache.commons.compress.compressors.gzip.GzipParameters.setTrailerISize(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipParameters,toString,() → java.lang.String,org.apache.commons.compress.compressors.gzip.GzipParameters.toString(),71,0,0.0,0,0,coverage not available since no branches,1,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream,builder,() → org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.builder(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream,matches,"(byte[], int) → boolean","org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(byte[],int)",17,0,0.0,6,0,0.0,4,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream,readToNull,(java.io.DataInput) → byte[],org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readToNull(DataInput),20,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream,<init>,(org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder) → void,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>(Builder),74,0,0.0,6,0,0.0,4,13,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>(InputStream),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream,<init>,"(java.io.InputStream, boolean) → void","org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>(InputStream,boolean)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream,close,() → void,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.close(),17,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream,getCompressedCount,() → long,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.getCompressedCount(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream,getMetaData,() → org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.getMetaData(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream,init,(boolean) → boolean,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(boolean),192,0,0.0,29,0,0.0,16,41,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream,read,() → int,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(),17,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(byte[],int,int)",187,0,0.0,24,0,0.0,13,44,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream,<clinit>,() → void,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<clinit>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/ExtraField$SubField,<init>,"(byte, byte, byte[]) → void","org.apache.commons.compress.compressors.gzip.ExtraField$SubField.<init>(byte,byte,byte[])",12,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/ExtraField$SubField,equals,(java.lang.Object) → boolean,org.apache.commons.compress.compressors.gzip.ExtraField$SubField.equals(Object),39,0,0.0,12,0,0.0,7,8,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/ExtraField$SubField,getId,() → java.lang.String,org.apache.commons.compress.compressors.gzip.ExtraField$SubField.getId(),20,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/ExtraField$SubField,getPayload,() → byte[],org.apache.commons.compress.compressors.gzip.ExtraField$SubField.getPayload(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/ExtraField$SubField,hashCode,() → int,org.apache.commons.compress.compressors.gzip.ExtraField$SubField.hashCode(),34,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipUtils,getCompressedFilename,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFilename(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipUtils,getCompressedFileName,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFileName(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipUtils,getUncompressedFilename,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFilename(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipUtils,getUncompressedFileName,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFileName(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipUtils,isCompressedFilename,(java.lang.String) → boolean,org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFilename(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipUtils,isCompressedFileName,(java.lang.String) → boolean,org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFileName(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipUtils,<clinit>,() → void,org.apache.commons.compress.compressors.gzip.GzipUtils.<clinit>(),0,68,1.0,0,0,coverage not available since no branches,1,0,15,1.0,0,1,1.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream$Builder,<init>,() → void,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.<init>(),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream$Builder,get,() → org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.get(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream$Builder,setDecompressConcatenated,(boolean) → org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.setDecompressConcatenated(boolean),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream$Builder,setFileNameCharset,(java.nio.charset.Charset) → org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.setFileNameCharset(Charset),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream$Builder,setOnMemberEnd,(org.apache.commons.io.function.IOConsumer) → org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.setOnMemberEnd(IOConsumer),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/gzip,org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream$Builder,setOnMemberStart,(org.apache.commons.io.function.IOConsumer) → org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.setOnMemberStart(IOConsumer),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/parallel,org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore,<init>,(java.io.File) → void,org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.<init>(File),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/parallel,org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore,<init>,(java.nio.file.Path) → void,org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.<init>(Path),22,0,0.0,0,0,coverage not available since no branches,1,9,0,0.0,1,0,0.0
org/apache/commons/compress/parallel,org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore,close,() → void,org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.close(),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/parallel,org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore,closeForWriting,() → void,org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.closeForWriting(),10,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/parallel,org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore,getInputStream,() → java.io.InputStream,org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.getInputStream(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/parallel,org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore,writeOut,"(byte[], int, int) → void","org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.writeOut(byte[],int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.<init>(OutputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream,<init>,"(java.io.OutputStream, org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters) → void","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.<init>(OutputStream,Parameters)",46,0,0.0,4,0,0.0,3,10,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream,appendToBlockDependencyBuffer,"(byte[], int, int) → void","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.appendToBlockDependencyBuffer(byte[],int,int)",42,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream,close,() → void,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.close(),5,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream,finish,() → void,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.finish(),10,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream,flushBlock,() → void,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.flushBlock(),130,0,0.0,14,0,0.0,8,25,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.write(byte[],int,int)",59,0,0.0,6,0,0.0,4,15,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream,write,(int) → void,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.write(int),13,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream,writeFrameDescriptor,() → void,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.writeFrameDescriptor(),66,0,0.0,6,0,0.0,4,15,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream,writeTrailer,() → void,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.writeTrailer(),16,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream,<clinit>,() → void,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.<clinit>(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/XXHash32,<init>,() → void,org.apache.commons.compress.compressors.lz4.XXHash32.<init>(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/XXHash32,<init>,(int) → void,org.apache.commons.compress.compressors.lz4.XXHash32.<init>(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair,<init>,() → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.<init>(),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair,lengths,"(int, int) → int","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.lengths(int,int)",24,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair,writeLength,"(int, java.io.OutputStream) → void","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.writeLength(int,OutputStream)",12,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair,addLiteral,(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock) → byte[],org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.addLiteral(LiteralBlock),25,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair,backReferenceLength,() → int,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.backReferenceLength(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair,canBeWritten,(int) → boolean,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.canBeWritten(int),10,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair,hasBackReference,() → boolean,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.hasBackReference(),7,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair,hasBeenWritten,() → boolean,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.hasBeenWritten(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair,length,() → int,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.length(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair,literalLength,() → int,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.literalLength(),30,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair,prependLiteral,(byte[]) → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.prependLiteral(byte[]),12,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair,prependTo,(org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair) → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.prependTo(Pair),14,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair,setBackReference,(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference) → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.setBackReference(BackReference),16,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair,splitWithNewBackReferenceLengthOf,(int) → org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.splitWithNewBackReferenceLengthOf(int),19,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream$Pair,writeTo,(java.io.OutputStream) → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.writeTo(OutputStream),59,0,0.0,8,0,0.0,5,13,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.<init>(InputStream),8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream,initializeBackReference,() → boolean,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.initializeBackReference(),56,0,0.0,6,0,0.0,4,17,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.read(byte[],int,int)",79,0,0.0,18,0,0.0,12,17,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream,readSizeBytes,() → long,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.readSizeBytes(),23,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream,readSizes,() → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.readSizes(),48,0,0.0,6,0,0.0,4,12,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,createParameterBuilder,() → org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder(),13,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.<init>(OutputStream),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,<init>,"(java.io.OutputStream, org.apache.commons.compress.compressors.lz77support.Parameters) → void","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.<init>(OutputStream,Parameters)",26,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,addBackReference,(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference) → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.addBackReference(BackReference),14,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,addLiteralBlock,(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock) → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.addLiteralBlock(LiteralBlock),13,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,clearUnusedBlocks,() → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.clearUnusedBlocks(),42,0,0.0,6,0,0.0,4,12,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,clearUnusedBlocksAndPairs,() → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.clearUnusedBlocksAndPairs(),5,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,clearUnusedPairs,() → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.clearUnusedPairs(),51,0,0.0,8,0,0.0,5,16,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,close,() → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.close(),5,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,expand,"(int, int) → byte[]","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.expand(int,int)",31,0,0.0,4,0,0.0,3,9,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,expandFromList,"(byte[], int, int) → void","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.expandFromList(byte[],int,int)",100,0,0.0,10,0,0.0,6,27,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,finish,() → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.finish(),9,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,prefill,"(byte[], int, int) → void","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.prefill(byte[],int,int)",17,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,recordBackReference,(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference) → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.recordBackReference(BackReference),10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,recordLiteral,(byte[]) → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.recordLiteral(byte[]),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,rewriteLastPairs,() → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.rewriteLastPairs(),147,0,0.0,18,0,0.0,10,33,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.write(byte[],int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,write,(int) → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.write(int),13,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,writeBlocksAndReturnUnfinishedPair,(int) → org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.writeBlocksAndReturnUnfinishedPair(int),23,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,writeFinalLiteralBlock,() → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.writeFinalLiteralBlock(),25,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,writeWritablePairs,(int) → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.writeWritablePairs(int),54,0,0.0,10,0,0.0,6,16,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream,lambda$new$0,(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block) → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.lambda$new$0(Block),19,0,0.0,4,0,0.0,4,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream,isSkippableFrameSignature,(byte[]) → boolean,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.isSkippableFrameSignature(byte[]),29,0,0.0,6,0,0.0,4,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream,matches,"(byte[], int) → boolean","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.matches(byte[],int)",22,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<init>(InputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream,<init>,"(java.io.InputStream, boolean) → void","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<init>(InputStream,boolean)",34,0,0.0,0,0,coverage not available since no branches,1,9,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream,appendToBlockDependencyBuffer,"(byte[], int, int) → void","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.appendToBlockDependencyBuffer(byte[],int,int)",32,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream,close,() → void,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.close(),10,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream,getCompressedCount,() → long,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.getCompressedCount(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream,init,(boolean) → void,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.init(boolean),9,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream,maybeFinishCurrentBlock,() → void,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.maybeFinishCurrentBlock(),21,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream,nextBlock,() → void,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.nextBlock(),89,0,0.0,12,0,0.0,7,26,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream,read,() → int,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.read(),17,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.read(byte[],int,int)",51,0,0.0,14,0,0.0,8,15,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream,readFrameDescriptor,() → void,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.readFrameDescriptor(),158,0,0.0,26,0,0.0,14,33,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream,readOnce,"(byte[], int, int) → int","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.readOnce(byte[],int,int)",37,0,0.0,2,0,0.0,2,9,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream,readOneByte,() → int,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.readOneByte(),16,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream,readSignature,(boolean) → boolean,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.readSignature(boolean),63,0,0.0,16,0,0.0,9,16,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream,skipSkippableFrame,(byte[]) → int,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.skipSkippableFrame(byte[]),50,0,0.0,8,0,0.0,5,13,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream,verifyChecksum,"(org.apache.commons.codec.digest.XXHash32, java.lang.String) → void","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.verifyChecksum(XXHash32,String)",49,0,0.0,4,0,0.0,3,9,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream,verifyContentChecksum,() → void,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.verifyContentChecksum(),12,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream,<clinit>,() → void,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<clinit>(),35,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream$Parameters,<init>,(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$BlockSize) → void,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream$Parameters,<init>,"(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$BlockSize, boolean, boolean, boolean) → void","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize,boolean,boolean,boolean)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream$Parameters,<init>,"(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$BlockSize, boolean, boolean, boolean, org.apache.commons.compress.compressors.lz77support.Parameters) → void","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize,boolean,boolean,boolean,Parameters)",18,0,0.0,0,0,coverage not available since no branches,1,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream$Parameters,<init>,"(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$BlockSize, org.apache.commons.compress.compressors.lz77support.Parameters) → void","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize,Parameters)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream$Parameters,toString,() → java.lang.String,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.toString(),25,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream$Parameters,<clinit>,() → void,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<clinit>(),9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream$BlockSize,<init>,"(java.lang.String, int, int, int) → void","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$BlockSize.<init>(String,int,int,int)",11,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream$BlockSize,getIndex,() → int,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$BlockSize.getIndex(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream$BlockSize,getSize,() → int,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$BlockSize.getSize(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream$BlockSize,<clinit>,() → void,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$BlockSize.<clinit>(),52,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz4,org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream$State,<clinit>,() → void,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream$State.<clinit>(),54,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils$1,<init>,() → void,org.apache.commons.compress.archivers.tar.TarUtils$1.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils$1,canEncode,(java.lang.String) → boolean,org.apache.commons.compress.archivers.tar.TarUtils$1.canEncode(String),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils$1,decode,(byte[]) → java.lang.String,org.apache.commons.compress.archivers.tar.TarUtils$1.decode(byte[]),37,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils$1,encode,(java.lang.String) → java.nio.ByteBuffer,org.apache.commons.compress.archivers.tar.TarUtils$1.encode(String),23,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveStructSparse,<init>,"(long, long) → void","org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.<init>(long,long)",10,17,0.6296296296296297,2,2,0.5,3,2,6,0.75,0,1,1.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveStructSparse,equals,(java.lang.Object) → boolean,org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.equals(Object),0,33,1.0,0,10,1.0,6,0,6,1.0,0,1,1.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveStructSparse,getNumbytes,() → long,org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.getNumbytes(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveStructSparse,getOffset,() → long,org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.getOffset(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveStructSparse,hashCode,() → int,org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.hashCode(),16,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveStructSparse,toString,() → java.lang.String,org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.toString(),17,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry,<init>,(byte[]) → void,org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.<init>(byte[]),20,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry,getSparseHeaders,() → java.util.List,org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.getSparseHeaders(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveSparseEntry,isExtended,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.isExtended(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,fileTimeFromOptionalSeconds,(long) → java.nio.file.attribute.FileTime,org.apache.commons.compress.archivers.tar.TarArchiveEntry.fileTimeFromOptionalSeconds(long),9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,normalizeFileName,"(java.lang.String, boolean) → java.lang.String","org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(String,boolean)",81,0,0.0,26,0,0.0,14,19,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,parseInstantFromDecimalSeconds,(java.lang.String) → java.time.Instant,org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseInstantFromDecimalSeconds(String),54,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,<init>,(boolean) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(boolean),51,0,0.0,2,0,0.0,2,16,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,<init>,(byte[]) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,<init>,"(byte[], org.apache.commons.compress.archivers.zip.ZipEncoding) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,<init>,"(byte[], org.apache.commons.compress.archivers.zip.ZipEncoding, boolean) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,<init>,"(byte[], org.apache.commons.compress.archivers.zip.ZipEncoding, boolean, long) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean,long)",9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,<init>,(java.io.File) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(File),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,<init>,"(java.io.File, java.lang.String) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(File,String)",72,0,0.0,2,0,0.0,2,23,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,<init>,"(java.util.Map, byte[], org.apache.commons.compress.archivers.zip.ZipEncoding, boolean) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean)",11,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,<init>,"(java.util.Map, byte[], org.apache.commons.compress.archivers.zip.ZipEncoding, boolean, long) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean,long)",10,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,<init>,(java.nio.file.Path) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Path),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,<init>,"(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Path,String,LinkOption[])",56,0,0.0,2,0,0.0,2,16,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,<init>,(java.lang.String) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,<init>,"(java.lang.String, boolean) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,boolean)",36,0,0.0,4,0,0.0,3,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,<init>,"(java.lang.String, byte) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,byte)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,<init>,"(java.lang.String, byte, boolean) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,byte,boolean)",17,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,addPaxHeader,"(java.lang.String, java.lang.String) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.addPaxHeader(String,String)",13,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,clearExtraPaxHeaders,() → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.clearExtraPaxHeaders(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,equals,(java.lang.Object) → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(Object),14,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,equals,(org.apache.commons.compress.archivers.tar.TarArchiveEntry) → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(TarArchiveEntry),12,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,evaluateType,"(java.util.Map, byte[]) → int","org.apache.commons.compress.archivers.tar.TarArchiveEntry.evaluateType(Map,byte[])",25,0,0.0,6,0,0.0,4,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,fill,"(byte, int, byte[], int) → int","org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(byte,int,byte[],int)",17,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,fill,"(int, int, byte[], int) → int","org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(int,int,byte[],int)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,fillGNUSparse0xData,(java.util.Map) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse0xData(Map),22,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,fillGNUSparse1xData,(java.util.Map) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse1xData(Map),29,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,fillStarSparseData,(java.util.Map) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillStarSparseData(Map),15,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getCreationTime,() → java.nio.file.attribute.FileTime,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getCreationTime(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getDataOffset,() → long,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDataOffset(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getDevMajor,() → int,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMajor(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getDevMinor,() → int,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMinor(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getDirectoryEntries,() → org.apache.commons.compress.archivers.tar.TarArchiveEntry[],org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDirectoryEntries(),45,0,0.0,6,0,0.0,4,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getExtraPaxHeader,(java.lang.String) → java.lang.String,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getExtraPaxHeader(String),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getExtraPaxHeaders,() → java.util.Map,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getExtraPaxHeaders(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getFile,() → java.io.File,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getFile(),9,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getGroupId,() → int,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getGroupId(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getGroupName,() → java.lang.String,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getGroupName(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getLastAccessTime,() → java.nio.file.attribute.FileTime,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastAccessTime(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getLastModifiedDate,() → java.util.Date,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastModifiedDate(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getLastModifiedTime,() → java.nio.file.attribute.FileTime,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastModifiedTime(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getLinkFlag,() → byte,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLinkFlag(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getLinkName,() → java.lang.String,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLinkName(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getLongGroupId,() → long,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongGroupId(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getLongUserId,() → long,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongUserId(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getMode,() → int,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getMode(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getModTime,() → java.util.Date,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getModTime(),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getName,() → java.lang.String,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getOrderedSparseHeaders,() → java.util.List,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getOrderedSparseHeaders(),119,0,0.0,16,0,0.0,9,16,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getPath,() → java.nio.file.Path,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getPath(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getRealSize,() → long,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getRealSize(),9,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getSize,() → long,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getSparseHeaders,() → java.util.List,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSparseHeaders(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getStatusChangeTime,() → java.nio.file.attribute.FileTime,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getStatusChangeTime(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getUserId,() → int,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getUserId(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,getUserName,() → java.lang.String,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getUserName(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,hashCode,() → int,org.apache.commons.compress.archivers.tar.TarArchiveEntry.hashCode(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isBlockDevice,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isBlockDevice(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isCharacterDevice,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isCharacterDevice(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isCheckSumOK,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isCheckSumOK(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isDescendent,(org.apache.commons.compress.archivers.tar.TarArchiveEntry) → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDescendent(TarArchiveEntry),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isDirectory,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory(),30,0,0.0,10,0,0.0,6,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isExtended,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isExtended(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isFIFO,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isFIFO(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isFile,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isFile(),31,0,0.0,10,0,0.0,6,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isGlobalPaxHeader,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGlobalPaxHeader(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isGNULongLinkEntry,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNULongLinkEntry(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isGNULongNameEntry,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNULongNameEntry(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isGNUSparse,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNUSparse(),10,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isInvalidPrefix,(byte[]) → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isInvalidPrefix(byte[]),26,0,0.0,8,0,0.0,5,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isInvalidXtarTime,"(byte[], int, int) → boolean","org.apache.commons.compress.archivers.tar.TarArchiveEntry.isInvalidXtarTime(byte[],int,int)",46,0,0.0,12,0,0.0,7,10,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isLink,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isLink(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isOldGNUSparse,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isOldGNUSparse(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isPaxGNU1XSparse,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxGNU1XSparse(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isPaxGNUSparse,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxGNUSparse(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isPaxHeader,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxHeader(),12,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isSparse,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSparse(),10,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isStarSparse,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isStarSparse(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isStreamContiguous,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isStreamContiguous(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isSymbolicLink,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSymbolicLink(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,isXstar,"(java.util.Map, byte[]) → boolean","org.apache.commons.compress.archivers.tar.TarArchiveEntry.isXstar(Map,byte[])",47,0,0.0,14,0,0.0,8,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,parseOctalOrBinary,"(byte[], int, int, boolean) → long","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseOctalOrBinary(byte[],int,int,boolean)",15,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,parseTarHeader,(byte[]) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[]),20,0,0.0,0,0,coverage not available since no branches,1,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,parseTarHeader,"(byte[], org.apache.commons.compress.archivers.zip.ZipEncoding) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,parseTarHeader,"(byte[], org.apache.commons.compress.archivers.zip.ZipEncoding, boolean, boolean) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding,boolean,boolean)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,parseTarHeader,"(java.util.Map, byte[], org.apache.commons.compress.archivers.zip.ZipEncoding, boolean, boolean) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(Map,byte[],ZipEncoding,boolean,boolean)",16,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,parseTarHeaderUnwrapped,"(java.util.Map, byte[], org.apache.commons.compress.archivers.zip.ZipEncoding, boolean, boolean) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeaderUnwrapped(Map,byte[],ZipEncoding,boolean,boolean)",331,0,0.0,29,0,0.0,16,67,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,processPaxHeader,"(java.lang.String, java.lang.String) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.processPaxHeader(String,String)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,processPaxHeader,"(java.lang.String, java.lang.String, java.util.Map) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.processPaxHeader(String,String,Map)",125,0,0.0,25,0,0.0,21,44,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,readFileMode,"(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.readFileMode(Path,String,LinkOption[])",51,0,0.0,6,0,0.0,4,13,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,readOsSpecificProperties,"(java.nio.file.Path, java.nio.file.LinkOption[]) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.readOsSpecificProperties(Path,LinkOption[])",113,0,0.0,6,0,0.0,4,27,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setCreationTime,(java.nio.file.attribute.FileTime) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setCreationTime(FileTime),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setDataOffset,(long) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDataOffset(long),13,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setDevMajor,(int) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMajor(int),18,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setDevMinor,(int) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMinor(int),18,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setGroupId,(int) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(int),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setGroupId,(long) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setGroupName,(java.lang.String) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupName(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setIds,"(int, int) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.setIds(int,int)",7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setLastAccessTime,(java.nio.file.attribute.FileTime) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLastAccessTime(FileTime),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setLastModifiedTime,(java.nio.file.attribute.FileTime) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLastModifiedTime(FileTime),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setLinkName,(java.lang.String) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLinkName(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setMode,(int) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setMode(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setModTime,(java.util.Date) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(Date),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setModTime,(java.nio.file.attribute.FileTime) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(FileTime),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setModTime,(long) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(long),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setName,(java.lang.String) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setName(String),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setNames,"(java.lang.String, java.lang.String) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.setNames(String,String)",7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setSize,(long) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(long),20,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setSparseHeaders,(java.util.List) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSparseHeaders(List),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setStatusChangeTime,(java.nio.file.attribute.FileTime) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setStatusChangeTime(FileTime),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setUserId,(int) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(int),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setUserId,(long) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,setUserName,(java.lang.String) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserName(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,updateEntryFromPaxHeaders,(java.util.Map) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.updateEntryFromPaxHeaders(Map),22,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,writeEntryHeader,(byte[]) → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[]),20,0,0.0,0,0,coverage not available since no branches,1,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,writeEntryHeader,"(byte[], org.apache.commons.compress.archivers.zip.ZipEncoding, boolean) → void","org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[],ZipEncoding,boolean)",189,0,0.0,2,0,0.0,2,27,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,writeEntryHeaderField,"(long, byte[], int, int, boolean) → int","org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean)",28,0,0.0,6,0,0.0,4,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,writeEntryHeaderOptionalTimeField,"(java.nio.file.attribute.FileTime, int, byte[], int) → int","org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderOptionalTimeField(FileTime,int,byte[],int)",21,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,lambda$getOrderedSparseHeaders$0,(org.apache.commons.compress.archivers.tar.TarArchiveStructSparse) → boolean,org.apache.commons.compress.archivers.tar.TarArchiveEntry.lambda$getOrderedSparseHeaders$0(TarArchiveStructSparse),14,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveEntry,<clinit>,() → void,org.apache.commons.compress.archivers.tar.TarArchiveEntry.<clinit>(),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarGnuSparseKeys,<init>,() → void,org.apache.commons.compress.archivers.tar.TarGnuSparseKeys.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream,<init>,() → void,org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream,read,() → int,org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream.read(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveSparseZeroInputStream,skip,(long) → long,org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream.skip(long),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,<init>,"(java.io.OutputStream, int) → void","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,<init>,"(java.io.OutputStream, int, int) → void","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,<init>,"(java.io.OutputStream, int, int, java.lang.String) → void","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int,String)",21,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,<init>,"(java.io.OutputStream, int, java.lang.String) → void","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,String)",67,0,0.0,6,0,0.0,4,14,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,<init>,"(java.io.OutputStream, java.lang.String) → void","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,String)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,addFileTimePaxHeader,"(java.util.Map, java.lang.String, java.nio.file.attribute.FileTime) → void","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeader(Map,String,FileTime)",27,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,addFileTimePaxHeaderForBigNumber,"(java.util.Map, java.lang.String, java.nio.file.attribute.FileTime, long) → void","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeaderForBigNumber(Map,String,FileTime,long)",27,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,addInstantPaxHeader,"(java.util.Map, java.lang.String, long, int) → void","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addInstantPaxHeader(Map,String,long,int)",23,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,addPaxHeaderForBigNumber,"(java.util.Map, java.lang.String, long, long) → void","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(Map,String,long,long)",15,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,addPaxHeadersForBigNumbers,"(java.util.Map, org.apache.commons.compress.archivers.tar.TarArchiveEntry) → void","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(Map,TarArchiveEntry)",80,0,0.0,2,0,0.0,2,13,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,close,() → void,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(),8,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,closeArchiveEntry,() → void,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(),71,0,0.0,6,0,0.0,4,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,createArchiveEntry,"(java.io.File, java.lang.String) → org.apache.commons.compress.archivers.tar.TarArchiveEntry","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(File,String)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,createArchiveEntry,"(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) → org.apache.commons.compress.archivers.tar.TarArchiveEntry","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,encodeExtendedPaxHeadersContents,(java.util.Map) → byte[],org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.encodeExtendedPaxHeadersContents(Map),13,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,failForBigNumber,"(java.lang.String, long, long) → void","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,failForBigNumber,"(java.lang.String, long, long, java.lang.String) → void","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long,String)",31,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,failForBigNumbers,(org.apache.commons.compress.archivers.tar.TarArchiveEntry) → void,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(TarArchiveEntry),47,0,0.0,0,0,coverage not available since no branches,1,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,failForBigNumberWithPosixMessage,"(java.lang.String, long, long) → void","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumberWithPosixMessage(String,long,long)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,finish,() → void,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finish(),22,0,0.0,2,0,0.0,2,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,getBytesWritten,() → long,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getBytesWritten(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,getCount,() → int,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getCount(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,getRecordSize,() → int,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getRecordSize(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,handleLongName,"(org.apache.commons.compress.archivers.tar.TarArchiveEntry, java.lang.String, java.util.Map, java.lang.String, byte, java.lang.String) → boolean","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String)",87,0,0.0,8,0,0.0,5,17,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,padAsNeeded,() → void,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.padAsNeeded(),21,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,putArchiveEntry,(org.apache.commons.compress.archivers.tar.TarArchiveEntry) → void,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(TarArchiveEntry),185,0,0.0,36,0,0.0,19,39,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,setAddPaxHeadersForNonAsciiNames,(boolean) → void,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setAddPaxHeadersForNonAsciiNames(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,setBigNumberMode,(int) → void,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setBigNumberMode(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,setLongFileMode,(int) → void,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,shouldBeReplaced,(char) → boolean,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.shouldBeReplaced(char),12,0,0.0,6,0,0.0,4,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,stripTo7Bits,(java.lang.String) → java.lang.String,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.stripTo7Bits(String),38,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,transferModTime,"(org.apache.commons.compress.archivers.tar.TarArchiveEntry, org.apache.commons.compress.archivers.tar.TarArchiveEntry) → void","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.transferModTime(TarArchiveEntry,TarArchiveEntry)",19,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(byte[],int,int)",55,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,writeEOFRecord,() → void,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeEOFRecord(),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,writePaxHeaders,"(org.apache.commons.compress.archivers.tar.TarArchiveEntry, java.lang.String, java.util.Map) → void","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(TarArchiveEntry,String,Map)",48,0,0.0,2,0,0.0,2,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,writeRecord,(byte[]) → void,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(byte[]),34,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,lambda$encodeExtendedPaxHeadersContents$0,"(java.io.StringWriter, java.lang.String, java.lang.String) → void","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.lambda$encodeExtendedPaxHeadersContents$0(StringWriter,String,String)",64,0,0.0,2,0,0.0,2,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveOutputStream,<clinit>,() → void,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<clinit>(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,matches,"(byte[], int) → boolean","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byte[],int)",63,0,0.0,16,0,0.0,9,15,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,<init>,"(java.io.InputStream, boolean) → void","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,boolean)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,<init>,"(java.io.InputStream, int) → void","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,<init>,"(java.io.InputStream, int, int) → void","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,<init>,"(java.io.InputStream, int, int, java.lang.String) → void","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,<init>,"(java.io.InputStream, int, int, java.lang.String, boolean) → void","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String,boolean)",33,0,0.0,0,0,coverage not available since no branches,1,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,<init>,"(java.io.InputStream, int, java.lang.String) → void","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,String)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,<init>,"(java.io.InputStream, java.lang.String) → void","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,String)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,applyPaxHeadersToCurrentEntry,"(java.util.Map, java.util.List) → void","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(Map,List)",9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,available,() → int,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.available(),21,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,buildSparseInputStreams,() → void,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.buildSparseInputStreams(),95,0,0.0,10,0,0.0,6,24,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,canReadEntryData,(org.apache.commons.compress.archivers.ArchiveEntry) → boolean,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.canReadEntryData(ArchiveEntry),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,close,() → void,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(),21,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,consumeRemainderOfLastBlock,() → void,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.consumeRemainderOfLastBlock(),22,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,getActuallySkipped,"(long, long, long) → long","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getActuallySkipped(long,long,long)",21,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,getCurrentEntry,() → org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getCurrentEntry(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,getLongNameData,() → byte[],org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getLongNameData(),54,0,0.0,10,0,0.0,6,14,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,getNextEntry,() → org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextEntry(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,getNextTarEntry,() → org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(),154,0,0.0,26,0,0.0,14,41,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,getRecord,() → byte[],org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecord(),21,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,getRecordSize,() → int,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecordSize(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,isAtEOF,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isAtEOF(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,isDirectory,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isDirectory(),11,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,isEOFRecord,(byte[]) → boolean,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isEOFRecord(byte[]),11,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,mark,(int) → void,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.mark(int),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,markSupported,() → boolean,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.markSupported(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,paxHeaders,() → void,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.paxHeaders(),57,0,0.0,6,0,0.0,4,13,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(byte[],int,int)",80,0,0.0,16,0,0.0,9,20,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,readGlobalPaxHeaders,() → void,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readGlobalPaxHeaders(),22,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,readOldGNUSparse,() → void,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readOldGNUSparse(),32,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,readRecord,() → byte[],org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readRecord(),18,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,readSparse,"(byte[], int, int) → int","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readSparse(byte[],int,int)",90,0,0.0,14,0,0.0,8,18,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,reset,() → void,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.reset(),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,setAtEOF,(boolean) → void,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.setAtEOF(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,setCurrentEntry,(org.apache.commons.compress.archivers.tar.TarArchiveEntry) → void,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.setCurrentEntry(TarArchiveEntry),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,skip,(long) → long,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skip(long),56,0,0.0,6,0,0.0,4,12,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,skipRecordPadding,() → void,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipRecordPadding(),55,0,0.0,6,0,0.0,4,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,skipSparse,(long) → long,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipSparse(long),52,0,0.0,10,0,0.0,6,10,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarArchiveInputStream,tryToConsumeSecondEOFRecord,() → void,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.tryToConsumeSecondEOFRecord(),35,0,0.0,8,0,0.0,5,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream,<init>,"(org.apache.commons.compress.archivers.tar.TarFile, org.apache.commons.compress.archivers.tar.TarArchiveEntry, java.nio.channels.SeekableByteChannel) → void","org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.<init>(TarFile,TarArchiveEntry,SeekableByteChannel)",30,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream,read,"(long, java.nio.ByteBuffer) → int","org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.read(long,ByteBuffer)",56,0,0.0,8,0,0.0,5,12,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream,readArchive,"(long, java.nio.ByteBuffer) → int","org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.readArchive(long,ByteBuffer)",10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile$BoundedTarEntryInputStream,readSparse,"(long, java.nio.ByteBuffer, int) → int","org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.readSparse(long,ByteBuffer,int)",107,0,0.0,16,0,0.0,9,22,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,computeCheckSum,(byte[]) → long,org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byte[]),27,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,exceptionMessage,"(byte[], int, int, int, byte) → java.lang.String","org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte)",36,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,formatBigIntegerBinary,"(long, byte[], int, int, boolean) → void","org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean)",65,0,0.0,6,0,0.0,4,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,formatCheckSumOctalBytes,"(long, byte[], int, int) → int","org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(long,byte[],int,int)",26,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,formatLongBinary,"(long, byte[], int, int, boolean) → void","org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean)",79,0,0.0,8,0,0.0,5,13,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,formatLongOctalBytes,"(long, byte[], int, int) → int","org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int)",19,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,formatLongOctalOrBinaryBytes,"(long, byte[], int, int) → int","org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int)",56,0,0.0,12,0,0.0,7,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,formatNameBytes,"(java.lang.String, byte[], int, int) → int","org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int)",21,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,formatNameBytes,"(java.lang.String, byte[], int, int, org.apache.commons.compress.archivers.zip.ZipEncoding) → int","org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding)",53,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,formatOctalBytes,"(long, byte[], int, int) → int","org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(long,byte[],int,int)",26,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,formatUnsignedOctalString,"(long, byte[], int, int) → void","org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int)",76,0,0.0,10,0,0.0,6,13,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,parseBinaryBigInteger,"(byte[], int, int, boolean) → long","org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(byte[],int,int,boolean)",59,0,0.0,6,0,0.0,4,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,parseBinaryLong,"(byte[], int, int, boolean) → long","org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean)",70,0,0.0,8,0,0.0,5,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,parseBoolean,"(byte[], int) → boolean","org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byte[],int)",9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,parseFromPAX01SparseHeaders,(java.lang.String) → java.util.List,org.apache.commons.compress.archivers.tar.TarUtils.parseFromPAX01SparseHeaders(String),68,0,0.0,8,0,0.0,5,13,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,parseName,"(byte[], int, int) → java.lang.String","org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int)",19,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,parseName,"(byte[], int, int, org.apache.commons.compress.archivers.zip.ZipEncoding) → java.lang.String","org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding)",31,0,0.0,6,0,0.0,4,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,parseOctal,"(byte[], int, int) → long","org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int)",100,0,0.0,20,0,0.0,11,21,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,parseOctalOrBinary,"(byte[], int, int) → long","org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byte[],int,int)",35,0,0.0,6,0,0.0,4,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,parsePAX01SparseHeaders,(java.lang.String) → java.util.List,org.apache.commons.compress.archivers.tar.TarUtils.parsePAX01SparseHeaders(String),11,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,parsePAX1XSparseHeaders,"(java.io.InputStream, int) → java.util.List","org.apache.commons.compress.archivers.tar.TarUtils.parsePAX1XSparseHeaders(InputStream,int)",103,0,0.0,8,0,0.0,5,23,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,parsePaxHeaders,"(java.io.InputStream, java.util.List, java.util.Map) → java.util.Map","org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,parsePaxHeaders,"(java.io.InputStream, java.util.List, java.util.Map, long) → java.util.Map","org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map,long)",269,0,0.0,46,0,0.0,24,62,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,parseSparse,"(byte[], int) → org.apache.commons.compress.archivers.tar.TarArchiveStructSparse","org.apache.commons.compress.archivers.tar.TarUtils.parseSparse(byte[],int)",18,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,readLineOfNumberForPax1X,(java.io.InputStream) → long[],org.apache.commons.compress.archivers.tar.TarUtils.readLineOfNumberForPax1X(InputStream),58,0,0.0,8,0,0.0,5,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,readSparseStructs,"(byte[], int, int) → java.util.List","org.apache.commons.compress.archivers.tar.TarUtils.readSparseStructs(byte[],int,int)",54,0,0.0,6,0,0.0,4,12,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,verifyCheckSum,(byte[]) → boolean,org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byte[]),53,0,0.0,10,0,0.0,6,10,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarUtils,<clinit>,() → void,org.apache.commons.compress.archivers.tar.TarUtils.<clinit>(),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,<init>,(byte[]) → void,org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,<init>,"(byte[], boolean) → void","org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[],boolean)",11,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,<init>,"(byte[], java.lang.String) → void","org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[],String)",11,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,<init>,(java.io.File) → void,org.apache.commons.compress.archivers.tar.TarFile.<init>(File),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,<init>,"(java.io.File, boolean) → void","org.apache.commons.compress.archivers.tar.TarFile.<init>(File,boolean)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,<init>,"(java.io.File, java.lang.String) → void","org.apache.commons.compress.archivers.tar.TarFile.<init>(File,String)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,<init>,(java.nio.file.Path) → void,org.apache.commons.compress.archivers.tar.TarFile.<init>(Path),11,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,<init>,"(java.nio.file.Path, boolean) → void","org.apache.commons.compress.archivers.tar.TarFile.<init>(Path,boolean)",11,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,<init>,"(java.nio.file.Path, java.lang.String) → void","org.apache.commons.compress.archivers.tar.TarFile.<init>(Path,String)",11,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,<init>,(java.nio.channels.SeekableByteChannel) → void,org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,<init>,"(java.nio.channels.SeekableByteChannel, int, int, java.lang.String, boolean) → void","org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel,int,int,String,boolean)",59,0,0.0,2,0,0.0,2,15,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,applyPaxHeadersToCurrentEntry,"(java.util.Map, java.util.List) → void","org.apache.commons.compress.archivers.tar.TarFile.applyPaxHeadersToCurrentEntry(Map,List)",9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,buildSparseInputStreams,() → void,org.apache.commons.compress.archivers.tar.TarFile.buildSparseInputStreams(),112,0,0.0,10,0,0.0,6,21,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,close,() → void,org.apache.commons.compress.archivers.tar.TarFile.close(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,consumeRemainderOfLastBlock,() → void,org.apache.commons.compress.archivers.tar.TarFile.consumeRemainderOfLastBlock(),20,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,getEntries,() → java.util.List,org.apache.commons.compress.archivers.tar.TarFile.getEntries(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,getInputStream,(org.apache.commons.compress.archivers.tar.TarArchiveEntry) → java.io.InputStream,org.apache.commons.compress.archivers.tar.TarFile.getInputStream(TarArchiveEntry),15,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,getLongNameData,() → byte[],org.apache.commons.compress.archivers.tar.TarFile.getLongNameData(),59,0,0.0,10,0,0.0,6,14,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,getNextTarEntry,() → org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarFile.getNextTarEntry(),155,0,0.0,26,0,0.0,14,40,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,getRecord,() → java.nio.ByteBuffer,org.apache.commons.compress.archivers.tar.TarFile.getRecord(),21,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,isAtEOF,() → boolean,org.apache.commons.compress.archivers.tar.TarFile.isAtEOF(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,isDirectory,() → boolean,org.apache.commons.compress.archivers.tar.TarFile.isDirectory(),11,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,isEOFRecord,(java.nio.ByteBuffer) → boolean,org.apache.commons.compress.archivers.tar.TarFile.isEOFRecord(ByteBuffer),12,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,paxHeaders,() → void,org.apache.commons.compress.archivers.tar.TarFile.paxHeaders(),81,0,0.0,6,0,0.0,4,16,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,readGlobalPaxHeaders,() → void,org.apache.commons.compress.archivers.tar.TarFile.readGlobalPaxHeaders(),30,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,readOldGNUSparse,() → void,org.apache.commons.compress.archivers.tar.TarFile.readOldGNUSparse(),43,0,0.0,6,0,0.0,4,10,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,readRecord,() → java.nio.ByteBuffer,org.apache.commons.compress.archivers.tar.TarFile.readRecord(),19,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,repositionForwardBy,(long) → void,org.apache.commons.compress.archivers.tar.TarFile.repositionForwardBy(long),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,repositionForwardTo,(long) → void,org.apache.commons.compress.archivers.tar.TarFile.repositionForwardTo(long),19,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,setAtEOF,(boolean) → void,org.apache.commons.compress.archivers.tar.TarFile.setAtEOF(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,skipRecordPadding,() → void,org.apache.commons.compress.archivers.tar.TarFile.skipRecordPadding(),45,0,0.0,6,0,0.0,4,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,throwExceptionIfPositionIsNotInArchive,() → void,org.apache.commons.compress.archivers.tar.TarFile.throwExceptionIfPositionIsNotInArchive(),14,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/tar,org/apache/commons/compress/archivers/tar/TarFile,tryToConsumeSecondEOFRecord,() → void,org.apache.commons.compress.archivers.tar.TarFile.tryToConsumeSecondEOFRecord(),25,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/brotli,org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.<init>(InputStream),16,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/brotli,org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStream,available,() → int,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.available(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/brotli,org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStream,close,() → void,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.close(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/brotli,org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStream,getCompressedCount,() → long,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.getCompressedCount(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/brotli,org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStream,mark,(int) → void,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.mark(int),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/brotli,org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStream,markSupported,() → boolean,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.markSupported(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/brotli,org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStream,read,() → int,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.read(),14,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/brotli,org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStream,read,(byte[]) → int,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.read(byte[]),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/brotli,org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.read(byte[],int,int)",12,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/brotli,org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStream,reset,() → void,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.reset(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/brotli,org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStream,skip,(long) → long,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.skip(long),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/brotli,org/apache/commons/compress/compressors/brotli/BrotliCompressorInputStream,toString,() → java.lang.String,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.toString(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/brotli,org/apache/commons/compress/compressors/brotli/BrotliUtils$CachedAvailability,<clinit>,() → void,org.apache.commons.compress.compressors.brotli.BrotliUtils$CachedAvailability.<clinit>(),0,34,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/compressors/brotli,org/apache/commons/compress/compressors/brotli/BrotliUtils,getCachedBrotliAvailability,() → org.apache.commons.compress.compressors.brotli.BrotliUtils$CachedAvailability,org.apache.commons.compress.compressors.brotli.BrotliUtils.getCachedBrotliAvailability(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/brotli,org/apache/commons/compress/compressors/brotli/BrotliUtils,internalIsBrotliCompressionAvailable,() → boolean,org.apache.commons.compress.compressors.brotli.BrotliUtils.internalIsBrotliCompressionAvailable(),3,5,0.625,0,0,coverage not available since no branches,1,2,2,0.5,0,1,1.0
org/apache/commons/compress/compressors/brotli,org/apache/commons/compress/compressors/brotli/BrotliUtils,isBrotliCompressionAvailable,() → boolean,org.apache.commons.compress.compressors.brotli.BrotliUtils.isBrotliCompressionAvailable(),3,11,0.7857142857142857,2,2,0.5,3,1,3,0.75,0,1,1.0
org/apache/commons/compress/compressors/brotli,org/apache/commons/compress/compressors/brotli/BrotliUtils,setCacheBrotliAvailablity,(boolean) → void,org.apache.commons.compress.compressors.brotli.BrotliUtils.setCacheBrotliAvailablity(boolean),4,13,0.7647058823529411,3,3,0.5,4,1,5,0.8333333333333334,0,1,1.0
org/apache/commons/compress/compressors/brotli,org/apache/commons/compress/compressors/brotli/BrotliUtils,<clinit>,() → void,org.apache.commons.compress.compressors.brotli.BrotliUtils.<clinit>(),1,8,0.8888888888888888,1,1,0.5,2,0,3,1.0,0,1,1.0
org/apache/commons/compress/harmony/archive/internal/nls,org/apache/commons/compress/harmony/archive/internal/nls/Messages,<init>,() → void,org.apache.commons.compress.harmony.archive.internal.nls.Messages.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/archive/internal/nls,org/apache/commons/compress/harmony/archive/internal/nls/Messages,format,"(java.lang.String, java.lang.Object[]) → java.lang.String","org.apache.commons.compress.harmony.archive.internal.nls.Messages.format(String,Object[])",151,0,0.0,18,0,0.0,10,25,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/archive/internal/nls,org/apache/commons/compress/harmony/archive/internal/nls/Messages,getString,(java.lang.String) → java.lang.String,org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String),18,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/archive/internal/nls,org/apache/commons/compress/harmony/archive/internal/nls/Messages,getString,"(java.lang.String, char) → java.lang.String","org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,char)",10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/archive/internal/nls,org/apache/commons/compress/harmony/archive/internal/nls/Messages,getString,"(java.lang.String, int) → java.lang.String","org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,int)",10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/archive/internal/nls,org/apache/commons/compress/harmony/archive/internal/nls/Messages,getString,"(java.lang.String, java.lang.Object) → java.lang.String","org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object)",9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/archive/internal/nls,org/apache/commons/compress/harmony/archive/internal/nls/Messages,getString,"(java.lang.String, java.lang.Object, java.lang.Object) → java.lang.String","org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object,Object)",13,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/archive/internal/nls,org/apache/commons/compress/harmony/archive/internal/nls/Messages,getString,"(java.lang.String, java.lang.Object[]) → java.lang.String","org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object[])",10,4,0.2857142857142857,1,1,0.5,2,4,2,0.3333333333333333,0,1,1.0
org/apache/commons/compress/harmony/archive/internal/nls,org/apache/commons/compress/harmony/archive/internal/nls/Messages,setLocale,"(java.util.Locale, java.lang.String) → java.util.ResourceBundle","org.apache.commons.compress.harmony.archive.internal.nls.Messages.setLocale(Locale,String)",7,5,0.4166666666666667,0,0,coverage not available since no branches,1,1,3,0.75,0,1,1.0
org/apache/commons/compress/harmony/archive/internal/nls,org/apache/commons/compress/harmony/archive/internal/nls/Messages,lambda$setLocale$1,"(java.lang.String, java.util.Locale, java.lang.ClassLoader) → java.lang.Object","org.apache.commons.compress.harmony.archive.internal.nls.Messages.lambda$setLocale$1(String,Locale,ClassLoader)",4,5,0.5555555555555556,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/archive/internal/nls,org/apache/commons/compress/harmony/archive/internal/nls/Messages,lambda$format$0,"(java.lang.Object[], int) → java.lang.String","org.apache.commons.compress.harmony.archive.internal.nls.Messages.lambda$format$0(Object[],int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/archive/internal/nls,org/apache/commons/compress/harmony/archive/internal/nls/Messages,<clinit>,() → void,org.apache.commons.compress.harmony.archive.internal.nls.Messages.<clinit>(),3,6,0.6666666666666666,0,0,coverage not available since no branches,1,2,3,0.6,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Replication,<init>,"(org.apache.commons.compress.harmony.unpack200.NewAttributeBands, java.lang.String, java.lang.String) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.<init>(NewAttributeBands,String,String)",36,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Replication,addToAttribute,"(int, org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.addToAttribute(int,NewAttribute)",56,0,0.0,6,0,0.0,4,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Replication,getCountElement,() → org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.getCountElement(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Replication,getLayoutElements,() → java.util.List,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.getLayoutElements(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Replication,readBands,"(java.io.InputStream, int) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.readBands(InputStream,int)",38,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,<init>,"(java.lang.String, int, java.lang.String, java.lang.String, int, int, int, int) → void","org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int)",0,50,1.0,0,4,1.0,3,0,18,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,computeOuterIsAnonymous,() → boolean,org.apache.commons.compress.harmony.unpack200.IcTuple.computeOuterIsAnonymous(),0,37,1.0,0,6,1.0,4,0,7,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,equals,(java.lang.Object) → boolean,org.apache.commons.compress.harmony.unpack200.IcTuple.equals(Object),34,0,0.0,10,0,0.0,6,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,generateHashCode,() → void,org.apache.commons.compress.harmony.unpack200.IcTuple.generateHashCode(),0,31,1.0,3,3,0.5,4,0,9,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,getC,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.IcTuple.getC(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,getC2,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.IcTuple.getC2(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,getF,() → int,org.apache.commons.compress.harmony.unpack200.IcTuple.getF(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,getN,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.IcTuple.getN(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,getTupleIndex,() → int,org.apache.commons.compress.harmony.unpack200.IcTuple.getTupleIndex(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,hashCode,() → int,org.apache.commons.compress.harmony.unpack200.IcTuple.hashCode(),0,8,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,initializeClassStrings,() → void,org.apache.commons.compress.harmony.unpack200.IcTuple.initializeClassStrings(),13,127,0.9071428571428571,4,22,0.8461538461538461,14,5,29,0.8529411764705882,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,innerBreakAtDollar,(java.lang.String) → java.lang.String[],org.apache.commons.compress.harmony.unpack200.IcTuple.innerBreakAtDollar(String),0,45,1.0,0,6,1.0,4,0,11,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,isAllDigits,(java.lang.String) → boolean,org.apache.commons.compress.harmony.unpack200.IcTuple.isAllDigits(String),4,18,0.8181818181818182,2,4,0.6666666666666666,4,1,5,0.8333333333333334,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,isAnonymous,() → boolean,org.apache.commons.compress.harmony.unpack200.IcTuple.isAnonymous(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,isMember,() → boolean,org.apache.commons.compress.harmony.unpack200.IcTuple.isMember(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,nestedExplicitFlagSet,() → boolean,org.apache.commons.compress.harmony.unpack200.IcTuple.nestedExplicitFlagSet(),2,8,0.8,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,nullSafeEquals,"(java.lang.String, java.lang.String) → boolean","org.apache.commons.compress.harmony.unpack200.IcTuple.nullSafeEquals(String,String)",14,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,outerClassIndex,() → int,org.apache.commons.compress.harmony.unpack200.IcTuple.outerClassIndex(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,outerClassString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.IcTuple.outerClassString(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,outerIsAnonymous,() → boolean,org.apache.commons.compress.harmony.unpack200.IcTuple.outerIsAnonymous(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,predicted,() → boolean,org.apache.commons.compress.harmony.unpack200.IcTuple.predicted(),0,10,1.0,0,4,1.0,3,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,simpleClassName,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.IcTuple.simpleClassName(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,simpleClassNameIndex,() → int,org.apache.commons.compress.harmony.unpack200.IcTuple.simpleClassNameIndex(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,thisClassIndex,() → int,org.apache.commons.compress.harmony.unpack200.IcTuple.thisClassIndex(),2,6,0.75,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,thisClassString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.IcTuple.thisClassString(),19,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.IcTuple.toString(),17,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcTuple,<clinit>,() → void,org.apache.commons.compress.harmony.unpack200.IcTuple.<clinit>(),0,7,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Callable,<init>,(java.util.List) → void,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.<init>(List),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Callable,addCount,(int) → void,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.addCount(int),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Callable,addNextToAttribute,(org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute) → void,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.addNextToAttribute(NewAttribute),24,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Callable,addToAttribute,"(int, org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.addToAttribute(int,NewAttribute)",27,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Callable,getBody,() → java.util.List,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.getBody(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Callable,isBackwardsCallable,() → boolean,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.isBackwardsCallable(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Callable,readBands,"(java.io.InputStream, int) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.readBands(InputStream,int)",29,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Callable,setBackwardsCallable,() → void,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.setBackwardsCallable(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Callable,setFirstCallable,(boolean) → void,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.setFirstCallable(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Call,<init>,"(org.apache.commons.compress.harmony.unpack200.NewAttributeBands, int) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.<init>(NewAttributeBands,int)",10,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Call,addToAttribute,"(int, org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.addToAttribute(int,NewAttribute)",5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Call,getCallable,() → org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.getCallable(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Call,getCallableIndex,() → int,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.getCallableIndex(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Call,readBands,"(java.io.InputStream, int) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.readBands(InputStream,int)",8,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Call,setCallable,(org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable) → void,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.setCallable(Callable),10,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$UnionCase,<init>,"(org.apache.commons.compress.harmony.unpack200.NewAttributeBands, java.util.List) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.<init>(NewAttributeBands,List)",10,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$UnionCase,<init>,"(org.apache.commons.compress.harmony.unpack200.NewAttributeBands, java.util.List, java.util.List) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.<init>(NewAttributeBands,List,List)",13,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$UnionCase,addToAttribute,"(int, org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.addToAttribute(int,NewAttribute)",20,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$UnionCase,getBody,() → java.util.List,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.getBody(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$UnionCase,hasTag,(int) → boolean,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.hasTag(int),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$UnionCase,hasTag,(long) → boolean,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.hasTag(long),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$UnionCase,readBands,"(java.io.InputStream, int) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.readBands(InputStream,int)",20,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,<init>,(org.apache.commons.compress.harmony.unpack200.Segment) → void,org.apache.commons.compress.harmony.unpack200.BandSet.<init>(Segment),10,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,decodeBandInt,"(java.lang.String, java.io.InputStream, org.apache.commons.compress.harmony.pack200.BHSDCodec, int) → int[]","org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int)",185,0,0.0,36,0,0.0,19,31,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,decodeBandInt,"(java.lang.String, java.io.InputStream, org.apache.commons.compress.harmony.pack200.BHSDCodec, int[]) → int[][]","org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int[])",82,0,0.0,8,0,0.0,5,14,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,getReferences,"(int[], java.lang.String[]) → java.lang.String[]","org.apache.commons.compress.harmony.unpack200.BandSet.getReferences(int[],String[])",9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,getReferences,"(int[][], java.lang.String[]) → java.lang.String[][]","org.apache.commons.compress.harmony.unpack200.BandSet.getReferences(int[][],String[])",44,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,parseCPClassReferences,"(java.lang.String, java.io.InputStream, org.apache.commons.compress.harmony.pack200.BHSDCodec, int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPClass[]","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPClassReferences(String,InputStream,BHSDCodec,int)",20,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,parseCPDescriptorReferences,"(java.lang.String, java.io.InputStream, org.apache.commons.compress.harmony.pack200.BHSDCodec, int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType[]","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDescriptorReferences(String,InputStream,BHSDCodec,int)",20,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,parseCPDoubleReferences,"(java.lang.String, java.io.InputStream, org.apache.commons.compress.harmony.pack200.BHSDCodec, int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble[]","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDoubleReferences(String,InputStream,BHSDCodec,int)",20,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,parseCPFieldRefReferences,"(java.lang.String, java.io.InputStream, org.apache.commons.compress.harmony.pack200.BHSDCodec, int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef[]","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFieldRefReferences(String,InputStream,BHSDCodec,int)",20,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,parseCPFloatReferences,"(java.lang.String, java.io.InputStream, org.apache.commons.compress.harmony.pack200.BHSDCodec, int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat[]","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFloatReferences(String,InputStream,BHSDCodec,int)",20,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,parseCPInterfaceMethodRefReferences,"(java.lang.String, java.io.InputStream, org.apache.commons.compress.harmony.pack200.BHSDCodec, int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef[]","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPInterfaceMethodRefReferences(String,InputStream,BHSDCodec,int)",20,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,parseCPIntReferences,"(java.lang.String, java.io.InputStream, org.apache.commons.compress.harmony.pack200.BHSDCodec, int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger[]","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPIntReferences(String,InputStream,BHSDCodec,int)",60,0,0.0,6,0,0.0,4,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,parseCPLongReferences,"(java.lang.String, java.io.InputStream, org.apache.commons.compress.harmony.pack200.BHSDCodec, int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPLong[]","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPLongReferences(String,InputStream,BHSDCodec,int)",60,0,0.0,6,0,0.0,4,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,parseCPMethodRefReferences,"(java.lang.String, java.io.InputStream, org.apache.commons.compress.harmony.pack200.BHSDCodec, int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef[]","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPMethodRefReferences(String,InputStream,BHSDCodec,int)",20,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,parseCPSignatureReferences,"(java.lang.String, java.io.InputStream, org.apache.commons.compress.harmony.pack200.BHSDCodec, int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[]","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int)",20,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,parseCPSignatureReferences,"(java.lang.String, java.io.InputStream, org.apache.commons.compress.harmony.pack200.BHSDCodec, int[]) → org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[][]","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int[])",78,0,0.0,4,0,0.0,3,14,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,parseCPStringReferences,"(java.lang.String, java.io.InputStream, org.apache.commons.compress.harmony.pack200.BHSDCodec, int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPString[]","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPStringReferences(String,InputStream,BHSDCodec,int)",20,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,parseCPUTF8References,"(java.lang.String, java.io.InputStream, org.apache.commons.compress.harmony.pack200.BHSDCodec, int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[]","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int)",20,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,parseCPUTF8References,"(java.lang.String, java.io.InputStream, org.apache.commons.compress.harmony.pack200.BHSDCodec, int[]) → org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[][]","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int[])",79,0,0.0,4,0,0.0,3,15,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,parseFlags,"(java.lang.String, java.io.InputStream, int, org.apache.commons.compress.harmony.pack200.BHSDCodec, org.apache.commons.compress.harmony.pack200.BHSDCodec) → long[]","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec)",15,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,parseFlags,"(java.lang.String, java.io.InputStream, int, org.apache.commons.compress.harmony.pack200.BHSDCodec, boolean) → long[]","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,boolean)",19,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,parseFlags,"(java.lang.String, java.io.InputStream, int[], org.apache.commons.compress.harmony.pack200.BHSDCodec, org.apache.commons.compress.harmony.pack200.BHSDCodec) → long[][]","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec)",108,0,0.0,12,0,0.0,7,20,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,parseFlags,"(java.lang.String, java.io.InputStream, int[], org.apache.commons.compress.harmony.pack200.BHSDCodec, boolean) → long[][]","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,boolean)",12,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,parseReferences,"(java.lang.String, java.io.InputStream, org.apache.commons.compress.harmony.pack200.BHSDCodec, int, java.lang.String[]) → java.lang.String[]","org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int,String[])",15,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,parseReferences,"(java.lang.String, java.io.InputStream, org.apache.commons.compress.harmony.pack200.BHSDCodec, int[], java.lang.String[]) → java.lang.String[][]","org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int[],String[])",113,0,0.0,12,0,0.0,7,21,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,unpack,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.BandSet.unpack(InputStream),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,lambda$parseCPUTF8References$12,"(org.apache.commons.compress.harmony.unpack200.CpBands, int[], int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8","org.apache.commons.compress.harmony.unpack200.BandSet.lambda$parseCPUTF8References$12(CpBands,int[],int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,lambda$parseCPUTF8References$11,"(org.apache.commons.compress.harmony.unpack200.CpBands, int[], int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8","org.apache.commons.compress.harmony.unpack200.BandSet.lambda$parseCPUTF8References$11(CpBands,int[],int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,lambda$parseCPStringReferences$10,"(org.apache.commons.compress.harmony.unpack200.CpBands, int[], int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPString","org.apache.commons.compress.harmony.unpack200.BandSet.lambda$parseCPStringReferences$10(CpBands,int[],int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,lambda$parseCPSignatureReferences$9,"(org.apache.commons.compress.harmony.unpack200.CpBands, int[], int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8","org.apache.commons.compress.harmony.unpack200.BandSet.lambda$parseCPSignatureReferences$9(CpBands,int[],int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,lambda$parseCPSignatureReferences$8,"(org.apache.commons.compress.harmony.unpack200.CpBands, int[], int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8","org.apache.commons.compress.harmony.unpack200.BandSet.lambda$parseCPSignatureReferences$8(CpBands,int[],int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,lambda$parseCPMethodRefReferences$7,"(org.apache.commons.compress.harmony.unpack200.CpBands, int[], int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef","org.apache.commons.compress.harmony.unpack200.BandSet.lambda$parseCPMethodRefReferences$7(CpBands,int[],int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,lambda$parseCPInterfaceMethodRefReferences$6,"(org.apache.commons.compress.harmony.unpack200.CpBands, int[], int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef","org.apache.commons.compress.harmony.unpack200.BandSet.lambda$parseCPInterfaceMethodRefReferences$6(CpBands,int[],int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,lambda$parseCPFloatReferences$5,"(org.apache.commons.compress.harmony.unpack200.CpBands, int[], int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat","org.apache.commons.compress.harmony.unpack200.BandSet.lambda$parseCPFloatReferences$5(CpBands,int[],int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,lambda$parseCPFieldRefReferences$4,"(org.apache.commons.compress.harmony.unpack200.CpBands, int[], int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef","org.apache.commons.compress.harmony.unpack200.BandSet.lambda$parseCPFieldRefReferences$4(CpBands,int[],int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,lambda$parseCPDoubleReferences$3,"(org.apache.commons.compress.harmony.unpack200.CpBands, int[], int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble","org.apache.commons.compress.harmony.unpack200.BandSet.lambda$parseCPDoubleReferences$3(CpBands,int[],int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,lambda$parseCPDescriptorReferences$2,"(org.apache.commons.compress.harmony.unpack200.CpBands, int[], int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType","org.apache.commons.compress.harmony.unpack200.BandSet.lambda$parseCPDescriptorReferences$2(CpBands,int[],int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,lambda$parseCPClassReferences$1,"(org.apache.commons.compress.harmony.unpack200.CpBands, int[], int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPClass","org.apache.commons.compress.harmony.unpack200.BandSet.lambda$parseCPClassReferences$1(CpBands,int[],int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BandSet,lambda$getReferences$0,"(java.lang.String[], int[], int) → java.lang.String","org.apache.commons.compress.harmony.unpack200.BandSet.lambda$getReferences$0(String[],int[],int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Pack200UnpackerAdapter,<init>,() → void,org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Pack200UnpackerAdapter,newBoundedInputStream,(java.io.File) → org.apache.commons.io.input.BoundedInputStream,org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(File),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Pack200UnpackerAdapter,newBoundedInputStream,(java.io.FileInputStream) → org.apache.commons.io.input.BoundedInputStream,org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(FileInputStream),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Pack200UnpackerAdapter,newBoundedInputStream,(java.io.InputStream) → org.apache.commons.io.input.BoundedInputStream,org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(InputStream),38,0,0.0,8,0,0.0,5,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Pack200UnpackerAdapter,newBoundedInputStream,(java.nio.file.Path) → org.apache.commons.io.input.BoundedInputStream,org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(Path),19,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Pack200UnpackerAdapter,newBoundedInputStream,"(java.lang.String, java.lang.String[]) → org.apache.commons.io.input.BoundedInputStream","org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(String,String[])",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Pack200UnpackerAdapter,newBoundedInputStream,(java.net.URL) → org.apache.commons.io.input.BoundedInputStream,org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(URL),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Pack200UnpackerAdapter,readField,"(java.lang.Object, java.lang.String) → java.lang.Object","org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.readField(Object,String)",8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Pack200UnpackerAdapter,readPathString,(java.io.FileInputStream) → java.lang.String,org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.readPathString(FileInputStream),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Pack200UnpackerAdapter,unwrap,(java.io.FilterInputStream) → java.io.InputStream,org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unwrap(FilterInputStream),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Pack200UnpackerAdapter,unwrap,(java.io.InputStream) → java.io.InputStream,org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unwrap(InputStream),9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Pack200UnpackerAdapter,unpack,"(java.io.File, java.util.jar.JarOutputStream) → void","org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unpack(File,JarOutputStream)",47,0,0.0,8,0,0.0,5,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Pack200UnpackerAdapter,unpack,"(java.io.InputStream, java.util.jar.JarOutputStream) → void","org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unpack(InputStream,JarOutputStream)",41,0,0.0,4,0,0.0,3,11,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentConstantPoolArrayCache$CachedArray,<init>,"(org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache, java.lang.String[]) → void","org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache$CachedArray.<init>(SegmentConstantPoolArrayCache,String[])",22,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentConstantPoolArrayCache$CachedArray,cacheIndexes,() → void,org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache$CachedArray.cacheIndexes(),25,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentConstantPoolArrayCache$CachedArray,indexesForKey,(java.lang.String) → java.util.List,org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache$CachedArray.indexesForKey(String),12,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentConstantPoolArrayCache$CachedArray,lastKnownSize,() → int,org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache$CachedArray.lastKnownSize(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentConstantPoolArrayCache$CachedArray,lambda$cacheIndexes$0,(java.lang.String) → java.util.List,org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache$CachedArray.lambda$cacheIndexes$0(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,<init>,(org.apache.commons.compress.harmony.unpack200.Segment) → void,org.apache.commons.compress.harmony.unpack200.BcBands.<init>(Segment),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,endsWithLoad,(int) → boolean,org.apache.commons.compress.harmony.unpack200.BcBands.endsWithLoad(int),10,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,endsWithStore,(int) → boolean,org.apache.commons.compress.harmony.unpack200.BcBands.endsWithStore(int),10,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getBcByte,() → int[],org.apache.commons.compress.harmony.unpack200.BcBands.getBcByte(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getBcCaseCount,() → int[],org.apache.commons.compress.harmony.unpack200.BcBands.getBcCaseCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getBcCaseValue,() → int[],org.apache.commons.compress.harmony.unpack200.BcBands.getBcCaseValue(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getBcClassRef,() → int[],org.apache.commons.compress.harmony.unpack200.BcBands.getBcClassRef(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getBcDoubleRef,() → int[],org.apache.commons.compress.harmony.unpack200.BcBands.getBcDoubleRef(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getBcFieldRef,() → int[],org.apache.commons.compress.harmony.unpack200.BcBands.getBcFieldRef(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getBcFloatRef,() → int[],org.apache.commons.compress.harmony.unpack200.BcBands.getBcFloatRef(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getBcIMethodRef,() → int[],org.apache.commons.compress.harmony.unpack200.BcBands.getBcIMethodRef(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getBcInitRef,() → int[],org.apache.commons.compress.harmony.unpack200.BcBands.getBcInitRef(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getBcIntRef,() → int[],org.apache.commons.compress.harmony.unpack200.BcBands.getBcIntRef(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getBcLabel,() → int[],org.apache.commons.compress.harmony.unpack200.BcBands.getBcLabel(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getBcLocal,() → int[],org.apache.commons.compress.harmony.unpack200.BcBands.getBcLocal(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getBcLongRef,() → int[],org.apache.commons.compress.harmony.unpack200.BcBands.getBcLongRef(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getBcMethodRef,() → int[],org.apache.commons.compress.harmony.unpack200.BcBands.getBcMethodRef(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getBcShort,() → int[],org.apache.commons.compress.harmony.unpack200.BcBands.getBcShort(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getBcStringRef,() → int[],org.apache.commons.compress.harmony.unpack200.BcBands.getBcStringRef(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getBcSuperField,() → int[],org.apache.commons.compress.harmony.unpack200.BcBands.getBcSuperField(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getBcSuperMethod,() → int[],org.apache.commons.compress.harmony.unpack200.BcBands.getBcSuperMethod(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getBcThisField,() → int[],org.apache.commons.compress.harmony.unpack200.BcBands.getBcThisField(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getBcThisMethod,() → int[],org.apache.commons.compress.harmony.unpack200.BcBands.getBcThisMethod(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,getMethodByteCodePacked,() → byte[][][],org.apache.commons.compress.harmony.unpack200.BcBands.getMethodByteCodePacked(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,read,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.BcBands.read(InputStream),561,0,0.0,60,0,0.0,43,144,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,startsWithIf,(int) → boolean,org.apache.commons.compress.harmony.unpack200.BcBands.startsWithIf(int),16,0,0.0,8,0,0.0,5,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/BcBands,unpack,() → void,org.apache.commons.compress.harmony.unpack200.BcBands.unpack(),401,0,0.0,32,0,0.0,17,70,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,<init>,(org.apache.commons.compress.harmony.unpack200.Segment) → void,org.apache.commons.compress.harmony.unpack200.ClassBands.<init>(Segment),23,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getCallCount,"(int[][], long[][], int) → int","org.apache.commons.compress.harmony.unpack200.ClassBands.getCallCount(int[][],long[][],int)",111,0,0.0,12,0,0.0,7,14,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getClassAttributes,() → java.util.ArrayList[],org.apache.commons.compress.harmony.unpack200.ClassBands.getClassAttributes(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getClassFieldCount,() → int[],org.apache.commons.compress.harmony.unpack200.ClassBands.getClassFieldCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getClassFlags,() → long[],org.apache.commons.compress.harmony.unpack200.ClassBands.getClassFlags(),60,0,0.0,10,0,0.0,6,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getClassInterfacesInts,() → int[][],org.apache.commons.compress.harmony.unpack200.ClassBands.getClassInterfacesInts(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getClassMethodCount,() → int[],org.apache.commons.compress.harmony.unpack200.ClassBands.getClassMethodCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getClassSuperInts,() → int[],org.apache.commons.compress.harmony.unpack200.ClassBands.getClassSuperInts(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getClassThisInts,() → int[],org.apache.commons.compress.harmony.unpack200.ClassBands.getClassThisInts(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getClassVersionMajor,() → int[],org.apache.commons.compress.harmony.unpack200.ClassBands.getClassVersionMajor(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getClassVersionMinor,() → int[],org.apache.commons.compress.harmony.unpack200.ClassBands.getClassVersionMinor(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getCodeHandlerCatchPO,() → int[][],org.apache.commons.compress.harmony.unpack200.ClassBands.getCodeHandlerCatchPO(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getCodeHandlerClassRCN,() → int[][],org.apache.commons.compress.harmony.unpack200.ClassBands.getCodeHandlerClassRCN(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getCodeHandlerCount,() → int[],org.apache.commons.compress.harmony.unpack200.ClassBands.getCodeHandlerCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getCodeHandlerEndPO,() → int[][],org.apache.commons.compress.harmony.unpack200.ClassBands.getCodeHandlerEndPO(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getCodeHandlerStartP,() → int[][],org.apache.commons.compress.harmony.unpack200.ClassBands.getCodeHandlerStartP(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getCodeHasAttributes,() → boolean[],org.apache.commons.compress.harmony.unpack200.ClassBands.getCodeHasAttributes(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getCodeMaxNALocals,() → int[],org.apache.commons.compress.harmony.unpack200.ClassBands.getCodeMaxNALocals(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getCodeMaxStack,() → int[],org.apache.commons.compress.harmony.unpack200.ClassBands.getCodeMaxStack(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getFieldAttributes,() → java.util.ArrayList[][],org.apache.commons.compress.harmony.unpack200.ClassBands.getFieldAttributes(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getFieldDescrInts,() → int[][],org.apache.commons.compress.harmony.unpack200.ClassBands.getFieldDescrInts(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getFieldFlags,() → long[][],org.apache.commons.compress.harmony.unpack200.ClassBands.getFieldFlags(),85,0,0.0,12,0,0.0,7,12,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getIcLocal,() → org.apache.commons.compress.harmony.unpack200.IcTuple[][],org.apache.commons.compress.harmony.unpack200.ClassBands.getIcLocal(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getMethodAttributes,() → java.util.ArrayList[][],org.apache.commons.compress.harmony.unpack200.ClassBands.getMethodAttributes(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getMethodDescr,() → java.lang.String[][],org.apache.commons.compress.harmony.unpack200.ClassBands.getMethodDescr(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getMethodDescrInts,() → int[][],org.apache.commons.compress.harmony.unpack200.ClassBands.getMethodDescrInts(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getMethodFlags,() → long[][],org.apache.commons.compress.harmony.unpack200.ClassBands.getMethodFlags(),85,0,0.0,12,0,0.0,7,12,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getOrderedCodeAttributes,() → java.util.ArrayList,org.apache.commons.compress.harmony.unpack200.ClassBands.getOrderedCodeAttributes(),10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,getRawClassFlags,() → long[],org.apache.commons.compress.harmony.unpack200.ClassBands.getRawClassFlags(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,parseClassAttrBands,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.ClassBands.parseClassAttrBands(InputStream),771,0,0.0,62,0,0.0,32,142,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,parseClassMetadataBands,"(java.io.InputStream, int[]) → int","org.apache.commons.compress.harmony.unpack200.ClassBands.parseClassMetadataBands(InputStream,int[])",152,0,0.0,12,0,0.0,7,28,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,parseCodeAttrBands,"(java.io.InputStream, int) → void","org.apache.commons.compress.harmony.unpack200.ClassBands.parseCodeAttrBands(InputStream,int)",470,0,0.0,32,0,0.0,17,72,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,parseCodeBands,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.ClassBands.parseCodeBands(InputStream),272,0,0.0,22,0,0.0,12,50,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,parseFieldAttrBands,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.ClassBands.parseFieldAttrBands(InputStream),482,0,0.0,48,0,0.0,25,74,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,parseFieldBands,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.ClassBands.parseFieldBands(InputStream),22,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,parseFieldMetadataBands,"(java.io.InputStream, int[]) → int","org.apache.commons.compress.harmony.unpack200.ClassBands.parseFieldMetadataBands(InputStream,int[])",171,0,0.0,14,0,0.0,8,29,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,parseMetadata,"(java.io.InputStream, java.lang.String[], int[], int[], java.lang.String) → org.apache.commons.compress.harmony.unpack200.MetadataBandGroup[]","org.apache.commons.compress.harmony.unpack200.ClassBands.parseMetadata(InputStream,String[],int[],int[],String)",565,0,0.0,24,0,0.0,17,62,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,parseMethodAttrBands,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.ClassBands.parseMethodAttrBands(InputStream),483,0,0.0,46,0,0.0,24,75,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,parseMethodBands,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.ClassBands.parseMethodBands(InputStream),22,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,parseMethodMetadataBands,"(java.io.InputStream, int[]) → int","org.apache.commons.compress.harmony.unpack200.ClassBands.parseMethodMetadataBands(InputStream,int[])",232,0,0.0,14,0,0.0,8,30,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,read,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.ClassBands.read(InputStream),73,0,0.0,0,0,coverage not available since no branches,1,13,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,unpack,() → void,org.apache.commons.compress.harmony.unpack200.ClassBands.unpack(),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,lambda$parseMethodMetadataBands$2,"(org.apache.commons.compress.harmony.unpack200.AttributeLayout[], int) → int","org.apache.commons.compress.harmony.unpack200.ClassBands.lambda$parseMethodMetadataBands$2(AttributeLayout[],int)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,lambda$parseCodeBands$1,(int) → java.util.List,org.apache.commons.compress.harmony.unpack200.ClassBands.lambda$parseCodeBands$1(int),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/ClassBands,lambda$parseClassAttrBands$0,(int) → java.util.ArrayList,org.apache.commons.compress.harmony.unpack200.ClassBands.lambda$parseClassAttrBands$0(int),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/FileBands,<init>,(org.apache.commons.compress.harmony.unpack200.Segment) → void,org.apache.commons.compress.harmony.unpack200.FileBands.<init>(Segment),9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/FileBands,getFileBits,() → byte[][],org.apache.commons.compress.harmony.unpack200.FileBands.getFileBits(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/FileBands,getFileModtime,() → int[],org.apache.commons.compress.harmony.unpack200.FileBands.getFileModtime(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/FileBands,getFileName,() → java.lang.String[],org.apache.commons.compress.harmony.unpack200.FileBands.getFileName(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/FileBands,getFileOptions,() → int[],org.apache.commons.compress.harmony.unpack200.FileBands.getFileOptions(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/FileBands,getFileSize,() → long[],org.apache.commons.compress.harmony.unpack200.FileBands.getFileSize(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/FileBands,processFileBits,() → void,org.apache.commons.compress.harmony.unpack200.FileBands.processFileBits(),57,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/FileBands,read,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.FileBands.read(InputStream),64,0,0.0,4,0,0.0,3,12,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/FileBands,unpack,() → void,org.apache.commons.compress.harmony.unpack200.FileBands.unpack(),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands,<init>,"(org.apache.commons.compress.harmony.unpack200.Segment, org.apache.commons.compress.harmony.unpack200.AttributeLayout) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands.<init>(Segment,AttributeLayout)",13,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands,getBackwardsCallCount,() → int,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.getBackwardsCallCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands,getCodec,(java.lang.String) → org.apache.commons.compress.harmony.pack200.BHSDCodec,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.getCodec(String),34,0,0.0,12,0,0.0,7,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands,getOneAttribute,"(int, java.util.List) → org.apache.commons.compress.harmony.unpack200.bytecode.Attribute","org.apache.commons.compress.harmony.unpack200.NewAttributeBands.getOneAttribute(int,List)",31,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands,getStreamUpToMatchingBracket,(java.io.StringReader) → java.io.StringReader,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.getStreamUpToMatchingBracket(StringReader),39,0,0.0,10,0,0.0,6,15,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands,parseAttributes,"(java.io.InputStream, int) → java.util.List","org.apache.commons.compress.harmony.unpack200.NewAttributeBands.parseAttributes(InputStream,int)",38,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands,parseLayout,() → void,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.parseLayout(),30,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands,read,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.read(InputStream),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands,readBody,(java.io.StringReader) → java.util.List,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readBody(StringReader),17,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands,readNextAttributeElement,(java.io.StringReader) → org.apache.commons.compress.harmony.unpack200.NewAttributeBands$AttributeLayoutElement,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readNextAttributeElement(StringReader),29,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands,readNextLayoutElement,(java.io.StringReader) → org.apache.commons.compress.harmony.unpack200.NewAttributeBands$LayoutElement,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readNextLayoutElement(StringReader),279,0,0.0,23,0,0.0,16,46,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands,readNextUnionCase,(java.io.StringReader) → org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readNextUnionCase(StringReader),78,0,0.0,10,0,0.0,6,22,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands,readNumber,(java.io.StringReader) → java.lang.Integer,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readNumber(StringReader),75,0,0.0,14,0,0.0,8,17,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands,readUpToMatchingBracket,(java.io.StringReader) → java.lang.String,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readUpToMatchingBracket(StringReader),36,0,0.0,10,0,0.0,6,15,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands,resolveCalls,() → void,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.resolveCalls(),52,0,0.0,8,0,0.0,5,12,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands,resolveCallsForElement,"(int, org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable, org.apache.commons.compress.harmony.unpack200.NewAttributeBands$LayoutElement) → int","org.apache.commons.compress.harmony.unpack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement)",104,0,0.0,22,0,0.0,12,29,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands,setBackwardsCalls,(int[]) → void,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.setBackwardsCalls(int[]),31,0,0.0,6,0,0.0,4,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands,unpack,() → void,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.unpack(),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Integral,<init>,"(org.apache.commons.compress.harmony.unpack200.NewAttributeBands, java.lang.String) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.<init>(NewAttributeBands,String)",10,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Integral,addToAttribute,"(int, org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.addToAttribute(int,NewAttribute)",148,0,0.0,19,0,0.0,14,37,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Integral,getTag,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.getTag(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Integral,getValue,(int) → int,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.getValue(int),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Integral,readBands,"(java.io.InputStream, int) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.readBands(InputStream,int)",27,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentConstantPool,regexMatches,"(java.lang.String, java.lang.String) → boolean","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.regexMatches(String,String)",37,0,0.0,6,0,0.0,4,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentConstantPool,<init>,(org.apache.commons.compress.harmony.unpack200.CpBands) → void,org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<init>(CpBands),0,11,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentConstantPool,getClassPoolEntry,(java.lang.String) → org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry,org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getClassPoolEntry(String),27,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentConstantPool,getClassSpecificPoolEntry,"(int, long, java.lang.String) → org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getClassSpecificPoolEntry(int,long,String)",46,0,0.0,4,0,0.0,4,12,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentConstantPool,getConstantPoolEntry,"(int, long) → org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getConstantPoolEntry(int,long)",82,0,0.0,17,0,0.0,15,19,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentConstantPool,getInitMethodPoolEntry,"(int, long, java.lang.String) → org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getInitMethodPoolEntry(int,long,String)",29,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentConstantPool,getValue,"(int, long) → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getValue(int,long)",59,15,0.20270270270270271,11,3,0.21428571428571427,12,11,5,0.3125,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentConstantPool,matchSpecificPoolEntryIndex,"(java.lang.String[], java.lang.String, int) → int","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String,int)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentConstantPool,matchSpecificPoolEntryIndex,"(java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, int) → int","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String[],String,String,int)",41,0,0.0,8,0,0.0,5,12,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcBands,<init>,(org.apache.commons.compress.harmony.unpack200.Segment) → void,org.apache.commons.compress.harmony.unpack200.IcBands.<init>(Segment),14,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcBands,getIcTuples,() → org.apache.commons.compress.harmony.unpack200.IcTuple[],org.apache.commons.compress.harmony.unpack200.IcBands.getIcTuples(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcBands,getRelevantIcTuples,"(java.lang.String, org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool) → org.apache.commons.compress.harmony.unpack200.IcTuple[]","org.apache.commons.compress.harmony.unpack200.IcBands.getRelevantIcTuples(String,ClassConstantPool)",155,0,0.0,24,0,0.0,13,33,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcBands,read,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.IcBands.read(InputStream),181,0,0.0,12,0,0.0,7,35,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcBands,unpack,() → void,org.apache.commons.compress.harmony.unpack200.IcBands.unpack(),69,0,0.0,10,0,0.0,6,11,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcBands,lambda$unpack$1,(java.lang.String) → java.util.List,org.apache.commons.compress.harmony.unpack200.IcBands.lambda$unpack$1(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/IcBands,lambda$getRelevantIcTuples$0,"(org.apache.commons.compress.harmony.unpack200.IcTuple, org.apache.commons.compress.harmony.unpack200.IcTuple) → int","org.apache.commons.compress.harmony.unpack200.IcBands.lambda$getRelevantIcTuples$0(IcTuple,IcTuple)",12,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentUtils,<init>,() → void,org.apache.commons.compress.harmony.unpack200.SegmentUtils.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentUtils,countArgs,(java.lang.String) → int,org.apache.commons.compress.harmony.unpack200.SegmentUtils.countArgs(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentUtils,countArgs,"(java.lang.String, int) → int","org.apache.commons.compress.harmony.unpack200.SegmentUtils.countArgs(String,int)",89,0,0.0,26,0,0.0,14,25,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentUtils,countBit16,(int[]) → int,org.apache.commons.compress.harmony.unpack200.SegmentUtils.countBit16(int[]),25,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentUtils,countBit16,(long[]) → int,org.apache.commons.compress.harmony.unpack200.SegmentUtils.countBit16(long[]),27,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentUtils,countBit16,(long[][]) → int,org.apache.commons.compress.harmony.unpack200.SegmentUtils.countBit16(long[][]),43,0,0.0,6,0,0.0,4,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentUtils,countInvokeInterfaceArgs,(java.lang.String) → int,org.apache.commons.compress.harmony.unpack200.SegmentUtils.countInvokeInterfaceArgs(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentUtils,countMatches,"(long[], org.apache.commons.compress.harmony.unpack200.IMatcher) → int","org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[],IMatcher)",25,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentUtils,countMatches,"(long[][], org.apache.commons.compress.harmony.unpack200.IMatcher) → int","org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[][],IMatcher)",26,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentConstantPoolArrayCache,<init>,() → void,org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.<init>(),0,9,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentConstantPoolArrayCache,arrayIsCached,(java.lang.String[]) → boolean,org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.arrayIsCached(String[]),17,0,0.0,4,0,0.0,3,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentConstantPoolArrayCache,cacheArray,(java.lang.String[]) → void,org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.cacheArray(String[]),23,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentConstantPoolArrayCache,indexesForArrayKey,"(java.lang.String[], java.lang.String) → java.util.List","org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.indexesForArrayKey(String[],String)",36,0,0.0,6,0,0.0,4,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Reference,<init>,"(org.apache.commons.compress.harmony.unpack200.NewAttributeBands, java.lang.String) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.<init>(NewAttributeBands,String)",20,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Reference,addToAttribute,"(int, org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.addToAttribute(int,NewAttribute)",192,0,0.0,24,0,0.0,13,25,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Reference,getTag,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.getTag(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Reference,readBands,"(java.io.InputStream, int) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.readBands(InputStream,int)",216,0,0.0,24,0,0.0,13,25,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/MetadataBandGroup,setRiaAttributeName,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRiaAttributeName(CPUTF8),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/MetadataBandGroup,setRipaAttributeName,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRipaAttributeName(CPUTF8),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/MetadataBandGroup,setRvaAttributeName,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRvaAttributeName(CPUTF8),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/MetadataBandGroup,setRvpaAttributeName,(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8) → void,org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRvpaAttributeName(CPUTF8),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/MetadataBandGroup,<init>,"(java.lang.String, org.apache.commons.compress.harmony.unpack200.CpBands) → void","org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.<init>(String,CpBands)",9,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/MetadataBandGroup,getAnnotation,"(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8, int, java.util.Iterator) → org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation","org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAnnotation(CPUTF8,int,Iterator)",49,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/MetadataBandGroup,getAttribute,"(int, org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[], int[], java.util.Iterator) → org.apache.commons.compress.harmony.unpack200.bytecode.Attribute","org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAttribute(int,CPUTF8[],int[],Iterator)",23,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/MetadataBandGroup,getAttributes,() → java.util.List,org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAttributes(),183,0,0.0,22,0,0.0,12,30,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/MetadataBandGroup,getNextValue,(int) → java.lang.Object,org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getNextValue(int),177,0,0.0,12,0,0.0,11,19,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/MetadataBandGroup,getParameterAttribute,"(int, java.util.Iterator) → org.apache.commons.compress.harmony.unpack200.bytecode.Attribute","org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getParameterAttribute(int,Iterator)",61,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/MetadataBandGroup,lambda$getParameterAttribute$1,"(int[], java.util.Iterator, int) → org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation","org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.lambda$getParameterAttribute$1(int[],Iterator,int)",16,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/MetadataBandGroup,lambda$getAttribute$0,"(org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8[], int[], java.util.Iterator, int) → org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation","org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.lambda$getAttribute$0(CPUTF8[],int[],Iterator,int)",10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Union,<init>,"(org.apache.commons.compress.harmony.unpack200.NewAttributeBands, java.lang.String, java.util.List, java.util.List) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.<init>(NewAttributeBands,String,List,List)",20,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Union,addToAttribute,"(int, org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.addToAttribute(int,NewAttribute)",110,0,0.0,22,0,0.0,12,28,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Union,getDefaultCaseBody,() → java.util.List,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.getDefaultCaseBody(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Union,getUnionCases,() → java.util.List,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.getUnionCases(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Union,getUnionTag,() → org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.getUnionTag(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$Union,readBands,"(java.io.InputStream, int) → void","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.readBands(InputStream,int)",130,0,0.0,18,0,0.0,10,22,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/NewAttributeBands$LayoutElement,getLength,(char) → int,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$LayoutElement.getLength(char),17,0,0.0,5,0,0.0,5,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,<init>,() → void,org.apache.commons.compress.harmony.unpack200.Segment.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,buildClassFile,(int) → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile,org.apache.commons.compress.harmony.unpack200.Segment.buildClassFile(int),657,0,0.0,56,0,0.0,29,113,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,computeIcStored,"(org.apache.commons.compress.harmony.unpack200.IcTuple[], org.apache.commons.compress.harmony.unpack200.IcTuple[]) → java.util.List","org.apache.commons.compress.harmony.unpack200.Segment.computeIcStored(IcTuple[],IcTuple[])",82,0,0.0,10,0,0.0,6,13,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,getAttrDefinitionBands,() → org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands,org.apache.commons.compress.harmony.unpack200.Segment.getAttrDefinitionBands(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,getClassBands,() → org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.Segment.getClassBands(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,getConstantPool,() → org.apache.commons.compress.harmony.unpack200.SegmentConstantPool,org.apache.commons.compress.harmony.unpack200.Segment.getConstantPool(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,getCpBands,() → org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.Segment.getCpBands(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,getIcBands,() → org.apache.commons.compress.harmony.unpack200.IcBands,org.apache.commons.compress.harmony.unpack200.Segment.getIcBands(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,getSegmentHeader,() → org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.Segment.getSegmentHeader(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,log,"(int, java.lang.String) → void","org.apache.commons.compress.harmony.unpack200.Segment.log(int,String)",9,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,overrideDeflateHint,(boolean) → void,org.apache.commons.compress.harmony.unpack200.Segment.overrideDeflateHint(boolean),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,parseSegment,() → void,org.apache.commons.compress.harmony.unpack200.Segment.parseSegment(),171,0,0.0,22,0,0.0,12,36,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,readSegment,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.Segment.readSegment(InputStream),68,0,0.0,0,0,coverage not available since no branches,1,15,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,setLogLevel,(int) → void,org.apache.commons.compress.harmony.unpack200.Segment.setLogLevel(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,setLogStream,(java.io.OutputStream) → void,org.apache.commons.compress.harmony.unpack200.Segment.setLogStream(OutputStream),12,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,setPreRead,(boolean) → void,org.apache.commons.compress.harmony.unpack200.Segment.setPreRead(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,unpack,"(java.io.InputStream, java.util.jar.JarOutputStream) → void","org.apache.commons.compress.harmony.unpack200.Segment.unpack(InputStream,JarOutputStream)",9,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,unpackProcess,() → void,org.apache.commons.compress.harmony.unpack200.Segment.unpackProcess(),10,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,unpackRead,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.Segment.unpackRead(InputStream),52,0,0.0,4,0,0.0,3,11,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,unpackWrite,(java.util.jar.JarOutputStream) → void,org.apache.commons.compress.harmony.unpack200.Segment.unpackWrite(JarOutputStream),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Segment,writeJar,(java.util.jar.JarOutputStream) → void,org.apache.commons.compress.harmony.unpack200.Segment.writeJar(JarOutputStream),145,0,0.0,8,0,0.0,5,31,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,<init>,(org.apache.commons.compress.harmony.unpack200.Segment) → void,org.apache.commons.compress.harmony.unpack200.SegmentHeader.<init>(Segment),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,decodeScalar,"(java.lang.String, java.io.InputStream, org.apache.commons.compress.harmony.pack200.BHSDCodec) → int","org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec)",22,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,decodeScalar,"(java.lang.String, java.io.InputStream, org.apache.commons.compress.harmony.pack200.BHSDCodec, int) → int[]","org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec,int)",23,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getArchiveModtime,() → long,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getArchiveModtime(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getArchiveSize,() → long,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getArchiveSize(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getArchiveSizeOffset,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getArchiveSizeOffset(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getAttributeDefinitionCount,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getAttributeDefinitionCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getBandHeadersInputStream,() → java.io.InputStream,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getBandHeadersInputStream(),12,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getBandHeadersSize,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getBandHeadersSize(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getClassCount,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getClassCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getCpClassCount,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpClassCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getCpDescriptorCount,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpDescriptorCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getCpDoubleCount,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpDoubleCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getCpFieldCount,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpFieldCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getCpFloatCount,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpFloatCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getCpIMethodCount,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpIMethodCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getCpIntCount,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpIntCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getCpLongCount,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpLongCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getCpMethodCount,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpMethodCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getCpSignatureCount,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpSignatureCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getCpStringCount,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpStringCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getCpUTF8Count,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpUTF8Count(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getDefaultClassMajorVersion,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getDefaultClassMajorVersion(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getDefaultClassMinorVersion,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getDefaultClassMinorVersion(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getInnerClassCount,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getInnerClassCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getNumberOfFiles,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getNumberOfFiles(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getOptions,() → org.apache.commons.compress.harmony.unpack200.SegmentOptions,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getOptions(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,getSegmentsRemaining,() → int,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getSegmentsRemaining(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,parseArchiveFileCounts,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.SegmentHeader.parseArchiveFileCounts(InputStream),49,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,parseArchiveSpecialCounts,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.SegmentHeader.parseArchiveSpecialCounts(InputStream),20,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,parseClassCounts,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.SegmentHeader.parseClassCounts(InputStream),29,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,parseCpCounts,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.SegmentHeader.parseCpCounts(InputStream),89,0,0.0,2,0,0.0,2,14,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,read,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.SegmentHeader.read(InputStream),81,0,0.0,6,0,0.0,4,15,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,setArchiveMajorVersion,(int) → void,org.apache.commons.compress.harmony.unpack200.SegmentHeader.setArchiveMajorVersion(int),19,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,setArchiveMinorVersion,(int) → void,org.apache.commons.compress.harmony.unpack200.SegmentHeader.setArchiveMinorVersion(int),12,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,setArchiveModtime,(long) → void,org.apache.commons.compress.harmony.unpack200.SegmentHeader.setArchiveModtime(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,setArchiveSize,(long) → void,org.apache.commons.compress.harmony.unpack200.SegmentHeader.setArchiveSize(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,setAttributeDefinitionCount,(long) → void,org.apache.commons.compress.harmony.unpack200.SegmentHeader.setAttributeDefinitionCount(long),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,setBandHeadersData,(byte[]) → void,org.apache.commons.compress.harmony.unpack200.SegmentHeader.setBandHeadersData(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,setSegmentsRemaining,(long) → void,org.apache.commons.compress.harmony.unpack200.SegmentHeader.setSegmentsRemaining(long),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,unpack,() → void,org.apache.commons.compress.harmony.unpack200.SegmentHeader.unpack(),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentHeader,<clinit>,() → void,org.apache.commons.compress.harmony.unpack200.SegmentHeader.<clinit>(),23,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentOptions,<init>,(int) → void,org.apache.commons.compress.harmony.unpack200.SegmentOptions.<init>(int),0,15,1.0,0,2,1.0,2,0,5,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentOptions,hasAllCodeFlags,() → boolean,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasAllCodeFlags(),9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentOptions,hasArchiveFileCounts,() → boolean,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasArchiveFileCounts(),9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentOptions,hasClassFlagsHi,() → boolean,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasClassFlagsHi(),9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentOptions,hasCodeFlagsHi,() → boolean,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasCodeFlagsHi(),9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentOptions,hasCPNumberCounts,() → boolean,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasCPNumberCounts(),9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentOptions,hasFieldFlagsHi,() → boolean,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasFieldFlagsHi(),9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentOptions,hasFileModtime,() → boolean,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasFileModtime(),9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentOptions,hasFileOptions,() → boolean,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasFileOptions(),2,7,0.7777777777777778,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentOptions,hasFileSizeHi,() → boolean,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasFileSizeHi(),9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentOptions,hasMethodFlagsHi,() → boolean,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasMethodFlagsHi(),1,8,0.8888888888888888,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentOptions,hasSpecialFormats,() → boolean,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasSpecialFormats(),0,9,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/SegmentOptions,shouldDeflate,() → boolean,org.apache.commons.compress.harmony.unpack200.SegmentOptions.shouldDeflate(),9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Archive,<init>,"(java.io.InputStream, java.util.jar.JarOutputStream) → void","org.apache.commons.compress.harmony.unpack200.Archive.<init>(InputStream,JarOutputStream)",37,0,0.0,2,0,0.0,2,11,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Archive,<init>,"(java.lang.String, java.lang.String) → void","org.apache.commons.compress.harmony.unpack200.Archive.<init>(String,String)",47,0,0.0,0,0,coverage not available since no branches,1,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Archive,available,(java.io.InputStream) → boolean,org.apache.commons.compress.harmony.unpack200.Archive.available(InputStream),15,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Archive,setDeflateHint,(boolean) → void,org.apache.commons.compress.harmony.unpack200.Archive.setDeflateHint(boolean),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Archive,setLogFile,(java.lang.String) → void,org.apache.commons.compress.harmony.unpack200.Archive.setLogFile(String),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Archive,setLogFile,"(java.lang.String, boolean) → void","org.apache.commons.compress.harmony.unpack200.Archive.setLogFile(String,boolean)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Archive,setQuiet,(boolean) → void,org.apache.commons.compress.harmony.unpack200.Archive.setQuiet(boolean),9,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Archive,setRemovePackFile,(boolean) → void,org.apache.commons.compress.harmony.unpack200.Archive.setRemovePackFile(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Archive,setVerbose,(boolean) → void,org.apache.commons.compress.harmony.unpack200.Archive.setVerbose(boolean),14,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Archive,unpack,() → void,org.apache.commons.compress.harmony.unpack200.Archive.unpack(),237,0,0.0,30,0,0.0,16,49,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/Archive,<clinit>,() → void,org.apache.commons.compress.harmony.unpack200.Archive.<clinit>(),20,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayout,getValue,"(java.lang.String, long, org.apache.commons.compress.harmony.unpack200.SegmentConstantPool) → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry","org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(String,long,SegmentConstantPool)",78,0,0.0,16,0,0.0,11,16,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayout,<init>,"(java.lang.String, int, java.lang.String, int) → void","org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayout,<init>,"(java.lang.String, int, java.lang.String, int, boolean) → void","org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int,boolean)",67,0,0.0,14,0,0.0,8,16,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayout,getCodec,() → org.apache.commons.compress.harmony.pack200.Codec,org.apache.commons.compress.harmony.unpack200.AttributeLayout.getCodec(),40,0,0.0,12,0,0.0,7,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayout,getContext,() → int,org.apache.commons.compress.harmony.unpack200.AttributeLayout.getContext(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayout,getIndex,() → int,org.apache.commons.compress.harmony.unpack200.AttributeLayout.getIndex(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayout,getLayout,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.AttributeLayout.getLayout(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayout,getName,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.AttributeLayout.getName(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayout,getValue,"(long, org.apache.commons.compress.harmony.unpack200.SegmentConstantPool) → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry","org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(long,SegmentConstantPool)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayout,getValue,"(long, java.lang.String, org.apache.commons.compress.harmony.unpack200.SegmentConstantPool) → org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry","org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(long,String,SegmentConstantPool)",37,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayout,hashCode,() → int,org.apache.commons.compress.harmony.unpack200.AttributeLayout.hashCode(),42,0,0.0,4,0,0.0,3,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayout,isDefaultLayout,() → boolean,org.apache.commons.compress.harmony.unpack200.AttributeLayout.isDefaultLayout(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayout,matches,(long) → boolean,org.apache.commons.compress.harmony.unpack200.AttributeLayout.matches(long),11,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayout,numBackwardsCallables,() → int,org.apache.commons.compress.harmony.unpack200.AttributeLayout.numBackwardsCallables(),10,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayout,setBackwardsCallCount,(int) → void,org.apache.commons.compress.harmony.unpack200.AttributeLayout.setBackwardsCallCount(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayout,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.AttributeLayout.toString(),15,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayout,<clinit>,() → void,org.apache.commons.compress.harmony.unpack200.AttributeLayout.<clinit>(),20,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,<init>,(org.apache.commons.compress.harmony.unpack200.Segment) → void,org.apache.commons.compress.harmony.unpack200.CpBands.<init>(Segment),50,0,0.0,0,0,coverage not available since no branches,1,11,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,cpClassValue,(int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPClass,org.apache.commons.compress.harmony.unpack200.CpBands.cpClassValue(int),25,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,cpClassValue,(java.lang.String) → org.apache.commons.compress.harmony.unpack200.bytecode.CPClass,org.apache.commons.compress.harmony.unpack200.CpBands.cpClassValue(String),38,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,cpDoubleValue,(int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble,org.apache.commons.compress.harmony.unpack200.CpBands.cpDoubleValue(int),13,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,cpFieldValue,(int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef,org.apache.commons.compress.harmony.unpack200.CpBands.cpFieldValue(int),20,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,cpFloatValue,(int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat,org.apache.commons.compress.harmony.unpack200.CpBands.cpFloatValue(int),13,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,cpIMethodValue,(int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef,org.apache.commons.compress.harmony.unpack200.CpBands.cpIMethodValue(int),20,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,cpIntegerValue,(int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger,org.apache.commons.compress.harmony.unpack200.CpBands.cpIntegerValue(int),13,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,cpLongValue,(int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPLong,org.apache.commons.compress.harmony.unpack200.CpBands.cpLongValue(int),13,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,cpMethodValue,(int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef,org.apache.commons.compress.harmony.unpack200.CpBands.cpMethodValue(int),20,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,cpNameAndTypeValue,(int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType,org.apache.commons.compress.harmony.unpack200.CpBands.cpNameAndTypeValue(int),14,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,cpNameAndTypeValue,(java.lang.String) → org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType,org.apache.commons.compress.harmony.unpack200.CpBands.cpNameAndTypeValue(String),64,0,0.0,4,0,0.0,3,13,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,cpSignatureValue,(int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8,org.apache.commons.compress.harmony.unpack200.CpBands.cpSignatureValue(int),28,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,cpStringValue,(int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPString,org.apache.commons.compress.harmony.unpack200.CpBands.cpStringValue(int),25,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,cpUTF8Value,(int) → org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8,org.apache.commons.compress.harmony.unpack200.CpBands.cpUTF8Value(int),35,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,cpUTF8Value,(java.lang.String) → org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8,org.apache.commons.compress.harmony.unpack200.CpBands.cpUTF8Value(String),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,cpUTF8Value,"(java.lang.String, boolean) → org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8","org.apache.commons.compress.harmony.unpack200.CpBands.cpUTF8Value(String,boolean)",54,0,0.0,10,0,0.0,6,14,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,getConstantPool,() → org.apache.commons.compress.harmony.unpack200.SegmentConstantPool,org.apache.commons.compress.harmony.unpack200.CpBands.getConstantPool(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,getCpClass,() → java.lang.String[],org.apache.commons.compress.harmony.unpack200.CpBands.getCpClass(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,getCpDescriptor,() → java.lang.String[],org.apache.commons.compress.harmony.unpack200.CpBands.getCpDescriptor(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,getCpDescriptorNameInts,() → int[],org.apache.commons.compress.harmony.unpack200.CpBands.getCpDescriptorNameInts(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,getCpDescriptorTypeInts,() → int[],org.apache.commons.compress.harmony.unpack200.CpBands.getCpDescriptorTypeInts(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,getCpFieldClass,() → java.lang.String[],org.apache.commons.compress.harmony.unpack200.CpBands.getCpFieldClass(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,getCpIMethodClass,() → java.lang.String[],org.apache.commons.compress.harmony.unpack200.CpBands.getCpIMethodClass(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,getCpInt,() → int[],org.apache.commons.compress.harmony.unpack200.CpBands.getCpInt(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,getCpLong,() → long[],org.apache.commons.compress.harmony.unpack200.CpBands.getCpLong(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,getCpMethodClass,() → java.lang.String[],org.apache.commons.compress.harmony.unpack200.CpBands.getCpMethodClass(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,getCpMethodDescriptor,() → java.lang.String[],org.apache.commons.compress.harmony.unpack200.CpBands.getCpMethodDescriptor(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,getCpSignature,() → java.lang.String[],org.apache.commons.compress.harmony.unpack200.CpBands.getCpSignature(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,getCpUTF8,() → java.lang.String[],org.apache.commons.compress.harmony.unpack200.CpBands.getCpUTF8(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,parseCpClass,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpClass(InputStream),51,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,parseCpDescriptor,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpDescriptor(InputStream),80,0,0.0,2,0,0.0,2,11,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,parseCpDouble,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpDouble(InputStream),23,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,parseCpField,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpField(InputStream),58,0,0.0,2,0,0.0,2,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,parseCpFloat,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpFloat(InputStream),31,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,parseCpIMethod,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpIMethod(InputStream),58,0,0.0,2,0,0.0,2,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,parseCpInt,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpInt(InputStream),13,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,parseCpLong,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpLong(InputStream),14,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,parseCpMethod,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpMethod(InputStream),58,0,0.0,2,0,0.0,2,9,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,parseCpSignature,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpSignature(InputStream),141,0,0.0,12,0,0.0,7,29,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,parseCpString,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpString(InputStream),22,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,parseCpUtf8,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpUtf8(InputStream),289,0,0.0,22,0,0.0,12,38,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,read,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.CpBands.read(InputStream),122,0,0.0,0,0,coverage not available since no branches,1,24,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,unpack,() → void,org.apache.commons.compress.harmony.unpack200.CpBands.unpack(),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,lambda$parseCpString$9,(int) → java.lang.String,org.apache.commons.compress.harmony.unpack200.CpBands.lambda$parseCpString$9(int),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,lambda$parseCpDouble$8,"(long[], int) → double","org.apache.commons.compress.harmony.unpack200.CpBands.lambda$parseCpDouble$8(long[],int)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,lambda$cpStringValue$7,"(int, int, java.lang.String) → org.apache.commons.compress.harmony.unpack200.bytecode.CPString","org.apache.commons.compress.harmony.unpack200.CpBands.lambda$cpStringValue$7(int,int,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,lambda$cpSignatureValue$6,"(int, java.lang.String) → org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8","org.apache.commons.compress.harmony.unpack200.CpBands.lambda$cpSignatureValue$6(int,String)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,lambda$cpNameAndTypeValue$5,"(int, java.lang.String) → org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType","org.apache.commons.compress.harmony.unpack200.CpBands.lambda$cpNameAndTypeValue$5(int,String)",28,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,lambda$cpLongValue$4,"(int, java.lang.Long) → org.apache.commons.compress.harmony.unpack200.bytecode.CPLong","org.apache.commons.compress.harmony.unpack200.CpBands.lambda$cpLongValue$4(int,Long)",9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,lambda$cpIntegerValue$3,"(int, java.lang.Integer) → org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger","org.apache.commons.compress.harmony.unpack200.CpBands.lambda$cpIntegerValue$3(int,Integer)",9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,lambda$cpFloatValue$2,"(int, java.lang.Float) → org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat","org.apache.commons.compress.harmony.unpack200.CpBands.lambda$cpFloatValue$2(int,Float)",13,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,lambda$cpDoubleValue$1,"(int, java.lang.Double) → org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble","org.apache.commons.compress.harmony.unpack200.CpBands.lambda$cpDoubleValue$1(int,Double)",9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/CpBands,lambda$cpClassValue$0,"(int, int, java.lang.String) → org.apache.commons.compress.harmony.unpack200.bytecode.CPClass","org.apache.commons.compress.harmony.unpack200.CpBands.lambda$cpClassValue$0(int,int,String)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayoutMap,getDefaultAttributeLayouts,() → org.apache.commons.compress.harmony.unpack200.AttributeLayout[],org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getDefaultAttributeLayouts(),703,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayoutMap,<init>,() → void,org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.<init>(),71,0,0.0,2,0,0.0,2,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayoutMap,add,(org.apache.commons.compress.harmony.unpack200.AttributeLayout) → void,org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.add(AttributeLayout),11,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayoutMap,add,"(org.apache.commons.compress.harmony.unpack200.AttributeLayout, org.apache.commons.compress.harmony.unpack200.NewAttributeBands) → void","org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.add(AttributeLayout,NewAttributeBands)",10,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayoutMap,checkMap,() → void,org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.checkMap(),97,0,0.0,12,0,0.0,7,13,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayoutMap,getAttributeBands,(org.apache.commons.compress.harmony.unpack200.AttributeLayout) → org.apache.commons.compress.harmony.unpack200.NewAttributeBands,org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeBands(AttributeLayout),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayoutMap,getAttributeLayout,"(int, int) → org.apache.commons.compress.harmony.unpack200.AttributeLayout","org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeLayout(int,int)",10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayoutMap,getAttributeLayout,"(java.lang.String, int) → org.apache.commons.compress.harmony.unpack200.AttributeLayout","org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeLayout(String,int)",25,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttributeLayoutMap,getLayout,(int) → java.util.Map,org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getLayout(int),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttrDefinitionBands,<init>,(org.apache.commons.compress.harmony.unpack200.Segment) → void,org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.<init>(Segment),9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttrDefinitionBands,getAttributeDefinitionMap,() → org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap,org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.getAttributeDefinitionMap(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttrDefinitionBands,read,(java.io.InputStream) → void,org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.read(InputStream),109,0,0.0,6,0,0.0,4,19,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttrDefinitionBands,setupDefaultAttributeNames,() → void,org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.setupDefaultAttributeNames(),97,0,0.0,0,0,coverage not available since no branches,1,17,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200,org/apache/commons/compress/harmony/unpack200/AttrDefinitionBands,unpack,() → void,org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.unpack(),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdCompressorOutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdCompressorOutputStream,<init>,"(java.io.OutputStream, int) → void","org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdCompressorOutputStream,<init>,"(java.io.OutputStream, int, boolean) → void","org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean)",14,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdCompressorOutputStream,<init>,"(java.io.OutputStream, int, boolean, boolean) → void","org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean,boolean)",16,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdCompressorOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.write(byte[],int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdUtils$CachedAvailability,<clinit>,() → void,org.apache.commons.compress.compressors.zstandard.ZstdUtils$CachedAvailability.<clinit>(),34,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.<init>(InputStream),16,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream,<init>,"(java.io.InputStream, com.github.luben.zstd.BufferPool) → void","org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.<init>(InputStream,BufferPool)",17,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream,available,() → int,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.available(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream,close,() → void,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.close(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream,getCompressedCount,() → long,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.getCompressedCount(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream,mark,(int) → void,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.mark(int),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream,markSupported,() → boolean,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.markSupported(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream,read,() → int,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.read(),14,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream,read,(byte[]) → int,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.read(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.read(byte[],int,int)",16,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream,reset,() → void,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.reset(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream,skip,(long) → long,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.skip(long),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdCompressorInputStream,toString,() → java.lang.String,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.toString(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdUtils,getCachedZstdAvailability,() → org.apache.commons.compress.compressors.zstandard.ZstdUtils$CachedAvailability,org.apache.commons.compress.compressors.zstandard.ZstdUtils.getCachedZstdAvailability(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdUtils,internalIsZstdCompressionAvailable,() → boolean,org.apache.commons.compress.compressors.zstandard.ZstdUtils.internalIsZstdCompressionAvailable(),8,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdUtils,isZstdCompressionAvailable,() → boolean,org.apache.commons.compress.compressors.zstandard.ZstdUtils.isZstdCompressionAvailable(),14,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdUtils,matches,"(byte[], int) → boolean","org.apache.commons.compress.compressors.zstandard.ZstdUtils.matches(byte[],int)",60,0,0.0,14,0,0.0,8,15,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdUtils,setCacheZstdAvailablity,(boolean) → void,org.apache.commons.compress.compressors.zstandard.ZstdUtils.setCacheZstdAvailablity(boolean),17,0,0.0,6,0,0.0,4,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/zstandard,org/apache/commons/compress/compressors/zstandard/ZstdUtils,<clinit>,() → void,org.apache.commons.compress.compressors.zstandard.ZstdUtils.<clinit>(),43,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/SuperInitMethodRefForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/SuperInitMethodRefForm,context,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm.context(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/MethodRefForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/MethodRefForm,getOffset,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm.getOffset(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/MethodRefForm,getPoolID,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm.getPoolID(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/FloatRefForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/FloatRefForm,<init>,"(int, java.lang.String, int[], boolean) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[],boolean)",0,9,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/FloatRefForm,getOffset,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.getOffset(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/FloatRefForm,getPoolID,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.getPoolID(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/InitMethodReferenceForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/InitMethodReferenceForm,getOffset,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.getOffset(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/InitMethodReferenceForm,getPoolID,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.getPoolID(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/InitMethodReferenceForm,setNestedEntries,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.setNestedEntries(ByteCode,OperandManager,int)",38,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ThisInitMethodRefForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ThisInitMethodRefForm,context,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm.context(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/FieldRefForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/FieldRefForm,getOffset,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm.getOffset(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/FieldRefForm,getPoolID,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm.getPoolID(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/NarrowClassRefForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/NarrowClassRefForm,<init>,"(int, java.lang.String, int[], boolean) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[],boolean)",0,7,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/NarrowClassRefForm,nestedMustStartClassPool,() → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.nestedMustStartClassPool(),7,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/NarrowClassRefForm,setNestedEntries,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.setNestedEntries(ByteCode,OperandManager,int)",26,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/SingleByteReferenceForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/SingleByteReferenceForm,nestedMustStartClassPool,() → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.nestedMustStartClassPool(),0,7,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/SingleByteReferenceForm,setNestedEntries,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.setNestedEntries(ByteCode,OperandManager,int)",44,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ReferenceForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ReferenceForm,setByteCodeOperands,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setByteCodeOperands(ByteCode,OperandManager,int)",17,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ReferenceForm,setNestedEntries,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setNestedEntries(ByteCode,OperandManager,int)",42,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ShortForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ShortForm,setByteCodeOperands,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.setByteCodeOperands(ByteCode,OperandManager,int)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/IincForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/IincForm,setByteCodeOperands,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.setByteCodeOperands(ByteCode,OperandManager,int)",19,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ClassRefForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ClassRefForm,<init>,"(int, java.lang.String, int[], boolean) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[],boolean)",0,9,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ClassRefForm,getOffset,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.getOffset(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ClassRefForm,getPoolID,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.getPoolID(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ClassRefForm,setNestedEntries,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.setNestedEntries(ByteCode,OperandManager,int)",44,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ThisMethodRefForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ThisMethodRefForm,context,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.context(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ThisMethodRefForm,getOffset,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.getOffset(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ThisMethodRefForm,getPoolID,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.getPoolID(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/WideForm,<init>,"(int, java.lang.String) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.<init>(int,String)",0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/WideForm,setByteCodeOperands,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperands(ByteCode,OperandManager,int)",6,14,0.7,1,1,0.5,2,1,4,0.8,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/WideForm,setByteCodeOperandsFormat1,"(int, org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat1(int,ByteCode,OperandManager,int)",21,8,0.27586206896551724,0,0,coverage not available since no branches,1,6,3,0.3333333333333333,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/WideForm,setByteCodeOperandsFormat2,"(int, org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat2(int,ByteCode,OperandManager,int)",0,38,1.0,0,0,coverage not available since no branches,1,0,12,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/StringRefForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/StringRefForm,<init>,"(int, java.lang.String, int[], boolean) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[],boolean)",0,9,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/StringRefForm,getOffset,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.getOffset(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/StringRefForm,getPoolID,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.getPoolID(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/StringRefForm,setNestedEntries,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.setNestedEntries(ByteCode,OperandManager,int)",57,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/SwitchForm,<init>,"(int, java.lang.String) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm.<init>(int,String)",0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/SwitchForm,fixUpByteCodeTargets,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm.fixUpByteCodeTargets(ByteCode,CodeAttribute)",62,0,0.0,4,0,0.0,3,13,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/VariableInstructionForm,<init>,"(int, java.lang.String) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.<init>(int,String)",0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/VariableInstructionForm,setRewrite2Bytes,"(int, int, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite2Bytes(int,int,int[])",32,27,0.4576271186440678,2,2,0.5,3,2,6,0.75,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/VariableInstructionForm,setRewrite4Bytes,"(int, int, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite4Bytes(int,int,int[])",32,47,0.5949367088607594,2,2,0.5,3,2,8,0.8,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/VariableInstructionForm,setRewrite4Bytes,"(int, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite4Bytes(int,int[])",47,0,0.0,10,0,0.0,6,7,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/SuperFieldRefForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/SuperFieldRefForm,context,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.context(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/SuperFieldRefForm,getOffset,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.getOffset(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/SuperFieldRefForm,getPoolID,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.getPoolID(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/LocalForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/LocalForm,setByteCodeOperands,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.setByteCodeOperands(ByteCode,OperandManager,int)",10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/NewClassRefForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/NewClassRefForm,setByteCodeOperands,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.setByteCodeOperands(ByteCode,OperandManager,int)",61,0,0.0,2,0,0.0,2,13,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/LookupSwitchForm,<init>,"(int, java.lang.String) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.<init>(int,String)",0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/LookupSwitchForm,setByteCodeOperands,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int)",164,0,0.0,4,0,0.0,3,33,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/LookupSwitchForm,lambda$setByteCodeOperands$1,"(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → int","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.lambda$setByteCodeOperands$1(OperandManager,int)",3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/LookupSwitchForm,lambda$setByteCodeOperands$0,"(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → int","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.lambda$setByteCodeOperands$0(OperandManager,int)",3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/LabelForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/LabelForm,<init>,"(int, java.lang.String, int[], boolean) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[],boolean)",0,9,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/LabelForm,fixUpByteCodeTargets,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.fixUpByteCodeTargets(ByteCode,CodeAttribute)",71,0,0.0,2,0,0.0,2,10,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/LabelForm,setByteCodeOperands,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.setByteCodeOperands(ByteCode,OperandManager,int)",10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/LongForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/LongForm,getOffset,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm.getOffset(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/LongForm,getPoolID,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm.getPoolID(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ClassSpecificReferenceForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ClassSpecificReferenceForm,setNestedEntries,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.setNestedEntries(ByteCode,OperandManager,int)",39,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ThisFieldRefForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ThisFieldRefForm,context,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.context(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ThisFieldRefForm,getOffset,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.getOffset(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ThisFieldRefForm,getPoolID,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.getPoolID(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/MultiANewArrayForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/MultiANewArrayForm,setByteCodeOperands,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.setByteCodeOperands(ByteCode,OperandManager,int)",13,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/NewInitMethodRefForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/NewInitMethodRefForm,context,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.context(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/NewInitMethodRefForm,setNestedEntries,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.setNestedEntries(ByteCode,OperandManager,int)",38,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/IntRefForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/IntRefForm,<init>,"(int, java.lang.String, int[], boolean) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[],boolean)",0,9,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/IntRefForm,getOffset,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.getOffset(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/IntRefForm,getPoolID,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.getPoolID(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/IMethodRefForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/IMethodRefForm,getOffset,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.getOffset(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/IMethodRefForm,getPoolID,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.getPoolID(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/IMethodRefForm,setByteCodeOperands,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.setByteCodeOperands(ByteCode,OperandManager,int)",18,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/TableSwitchForm,<init>,"(int, java.lang.String) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.<init>(int,String)",0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/TableSwitchForm,setByteCodeOperands,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int)",0,159,1.0,0,4,1.0,3,0,36,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/TableSwitchForm,lambda$setByteCodeOperands$0,"(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → int","org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.lambda$setByteCodeOperands$0(OperandManager,int)",0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/SuperMethodRefForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/SuperMethodRefForm,context,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.context(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/SuperMethodRefForm,getOffset,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.getOffset(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/SuperMethodRefForm,getPoolID,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.getPoolID(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/NoArgumentForm,<init>,"(int, java.lang.String) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm.<init>(int,String)",0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/NoArgumentForm,setByteCodeOperands,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm.setByteCodeOperands(ByteCode,OperandManager,int)",1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ByteForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ByteForm,setByteCodeOperands,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager, int) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.setByteCodeOperands(ByteCode,OperandManager,int)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/DoubleForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm.<init>(int,String,int[])",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/DoubleForm,getOffset,(org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager) → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm.getOffset(OperandManager),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/DoubleForm,getPoolID,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm.getPoolID(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ByteCodeForm,get,(int) → org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.get(int),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ByteCodeForm,<init>,"(int, java.lang.String) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<init>(int,String)",0,11,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ByteCodeForm,<init>,"(int, java.lang.String, int[]) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<init>(int,String,int[])",0,14,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ByteCodeForm,calculateOperandPosition,() → void,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.calculateOperandPosition(),5,65,0.9285714285714286,1,11,0.9166666666666666,7,1,20,0.9523809523809523,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ByteCodeForm,firstOperandIndex,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.firstOperandIndex(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ByteCodeForm,fixUpByteCodeTargets,"(org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode, org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute) → void","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.fixUpByteCodeTargets(ByteCode,CodeAttribute)",1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ByteCodeForm,getName,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.getName(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ByteCodeForm,getOpcode,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.getOpcode(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ByteCodeForm,getRewrite,() → int[],org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.getRewrite(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ByteCodeForm,getRewriteCopy,() → int[],org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.getRewriteCopy(),0,7,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ByteCodeForm,hasMultipleByteCodes,() → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.hasMultipleByteCodes(),22,0,0.0,6,0,0.0,4,3,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ByteCodeForm,hasNoOperand,() → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.hasNoOperand(),0,2,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ByteCodeForm,nestedMustStartClassPool,() → boolean,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.nestedMustStartClassPool(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ByteCodeForm,operandLength,() → int,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.operandLength(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ByteCodeForm,toString,() → java.lang.String,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.toString(),16,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/harmony/unpack200/bytecode/forms,org/apache/commons/compress/harmony/unpack200/bytecode/forms/ByteCodeForm,<clinit>,() → void,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<clinit>(),0,3237,1.0,0,4,1.0,3,0,248,1.0,0,1,1.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes,<init>,"(org.apache.commons.compress.compressors.deflate64.HuffmanDecoder, org.apache.commons.compress.compressors.deflate64.HuffmanState, int[], int[]) → void","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.<init>(HuffmanDecoder,HuffmanState,int[],int[])",21,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes,available,() → int,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.available(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes,copyFromRunBuffer,"(byte[], int, int) → int","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.copyFromRunBuffer(byte[],int,int)",30,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes,decodeNext,"(byte[], int, int) → int","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.decodeNext(byte[],int,int)",131,0,0.0,10,0,0.0,6,28,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes,hasData,() → boolean,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.hasData(),7,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes,read,"(byte[], int, int) → int","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.read(byte[],int,int)",10,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$HuffmanCodes,state,() → org.apache.commons.compress.compressors.deflate64.HuffmanState,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.state(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode,<init>,(int) → void,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode.<init>(int),9,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode,leaf,(int) → void,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode.leaf(int),10,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode,left,() → org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode.left(),19,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode,right,() → org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode.right(),19,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream,<init>,(org.apache.commons.compress.compressors.deflate64.HuffmanDecoder) → void,org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.<init>(HuffmanDecoder),0,10,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.<init>(InputStream),10,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream,available,() → int,org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.available(),9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream,close,() → void,org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.close(),9,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream,closeDecoder,() → void,org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.closeDecoder(),9,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream,getCompressedCount,() → long,org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.getCompressedCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream,read,() → int,org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.read(),20,9,0.3103448275862069,3,1,0.25,4,3,3,0.5,0,1,1.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.read(byte[],int,int)",30,9,0.23076923076923078,4,2,0.3333333333333333,4,9,4,0.3076923076923077,0,1,1.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder,buildTree,(int[]) → org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.buildTree(int[]),74,0,0.0,10,0,0.0,6,15,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder,getCodes,(int[]) → int[],org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.getCodes(int[]),85,0,0.0,8,0,0.0,5,14,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder,nextSymbol,"(org.apache.commons.compress.utils.BitInputStream, org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode) → int","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.nextSymbol(BitInputStream,BinaryTreeNode)",30,0,0.0,8,0,0.0,5,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder,populateDynamicTables,"(org.apache.commons.compress.utils.BitInputStream, int[], int[]) → void","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.populateDynamicTables(BitInputStream,int[],int[])",117,0,0.0,12,0,0.0,8,30,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder,readBits,"(org.apache.commons.compress.utils.BitInputStream, int) → long","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.readBits(BitInputStream,int)",15,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder,<init>,(java.io.InputStream) → void,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.<init>(InputStream),25,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder,available,() → int,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.available(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder,close,() → void,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.close(),10,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder,decode,(byte[]) → int,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.decode(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder,decode,"(byte[], int, int) → int","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.decode(byte[],int,int)",87,0,0.0,14,0,0.0,9,19,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder,getBytesRead,() → long,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.getBytesRead(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder,readBits,(int) → long,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.readBits(int),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder,readDynamicTables,() → int[][],org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.readDynamicTables(),38,0,0.0,0,0,coverage not available since no branches,1,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder,switchToUncompressedState,() → void,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.switchToUncompressedState(),33,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder,<clinit>,() → void,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.<clinit>(),0,358,1.0,0,0,coverage not available since no branches,1,0,10,1.0,0,1,1.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory,<init>,() → void,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.<init>(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory,<init>,(int) → void,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.<init>(int),16,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory,add,(byte) → byte,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.add(byte),14,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory,add,"(byte[], int, int) → void","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.add(byte[],int,int)",16,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory,incCounter,(int) → int,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.incCounter(int),18,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecodingMemory,recordToBuffer,"(int, int, byte[]) → void","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.recordToBuffer(int,int,byte[])",67,0,0.0,8,0,0.0,5,8,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanState,<clinit>,() → void,org.apache.commons.compress.compressors.deflate64.HuffmanState.<clinit>(),44,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState,<init>,"(org.apache.commons.compress.compressors.deflate64.HuffmanDecoder, long) → void","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState.<init>(HuffmanDecoder,long)",10,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState,available,() → int,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState.available(),14,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState,hasData,() → boolean,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState.hasData(),10,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState,read,"(byte[], int, int) → int","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState.read(byte[],int,int)",87,0,0.0,8,0,0.0,5,18,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$UncompressedState,state,() → org.apache.commons.compress.compressors.deflate64.HuffmanState,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState.state(),10,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState,<init>,() → void,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState.<init>(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState,available,() → int,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState.available(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState,hasData,() → boolean,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState.hasData(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState,read,"(byte[], int, int) → int","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState.read(byte[],int,int)",9,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate64,org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$InitialState,state,() → org.apache.commons.compress.compressors.deflate64.HuffmanState,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState.state(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.<init>(OutputStream),11,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream,finish,() → void,org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.finish(),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream,flush,() → void,org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.flush(),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(byte[],int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMAUtils$CachedAvailability,<clinit>,() → void,org.apache.commons.compress.compressors.lzma.LZMAUtils$CachedAvailability.<clinit>(),0,34,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMAUtils,getCachedLZMAAvailability,() → org.apache.commons.compress.compressors.lzma.LZMAUtils$CachedAvailability,org.apache.commons.compress.compressors.lzma.LZMAUtils.getCachedLZMAAvailability(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMAUtils,getCompressedFilename,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFilename(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMAUtils,getCompressedFileName,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFileName(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMAUtils,getUncompressedFilename,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFilename(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMAUtils,getUncompressedFileName,(java.lang.String) → java.lang.String,org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFileName(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMAUtils,internalIsLZMACompressionAvailable,() → boolean,org.apache.commons.compress.compressors.lzma.LZMAUtils.internalIsLZMACompressionAvailable(),3,6,0.6666666666666666,0,0,coverage not available since no branches,1,2,2,0.5,0,1,1.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMAUtils,isCompressedFilename,(java.lang.String) → boolean,org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFilename(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMAUtils,isCompressedFileName,(java.lang.String) → boolean,org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFileName(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMAUtils,isLZMACompressionAvailable,() → boolean,org.apache.commons.compress.compressors.lzma.LZMAUtils.isLZMACompressionAvailable(),14,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMAUtils,matches,"(byte[], int) → boolean","org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(byte[],int)",0,25,1.0,0,6,1.0,4,0,6,1.0,0,1,1.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMAUtils,setCacheLZMAAvailablity,(boolean) → void,org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(boolean),4,13,0.7647058823529411,3,3,0.5,4,1,5,0.8333333333333334,0,1,1.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMAUtils,<clinit>,() → void,org.apache.commons.compress.compressors.lzma.LZMAUtils.<clinit>(),1,43,0.9772727272727273,1,1,0.5,2,0,8,1.0,0,1,1.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream,matches,"(byte[], int) → boolean","org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byte[],int)",18,4,0.18181818181818182,9,1,0.1,6,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.<init>(InputStream),17,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream,<init>,"(java.io.InputStream, int) → void","org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.<init>(InputStream,int)",29,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream,available,() → int,org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.available(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream,close,() → void,org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.close(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream,getCompressedCount,() → long,org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.getCompressedCount(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream,read,() → int,org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(),14,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(byte[],int,int)",12,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lzma,org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream,skip,(long) → long,org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.skip(long),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveInputStream,<init>,() → void,org.apache.commons.compress.archivers.ArchiveInputStream.<init>(),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveInputStream,<init>,"(java.io.InputStream, java.nio.charset.Charset) → void","org.apache.commons.compress.archivers.ArchiveInputStream.<init>(InputStream,Charset)",12,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveInputStream,<init>,"(java.io.InputStream, java.lang.String) → void","org.apache.commons.compress.archivers.ArchiveInputStream.<init>(InputStream,String)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveInputStream,canReadEntryData,(org.apache.commons.compress.archivers.ArchiveEntry) → boolean,org.apache.commons.compress.archivers.ArchiveInputStream.canReadEntryData(ArchiveEntry),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveInputStream,count,(int) → void,org.apache.commons.compress.archivers.ArchiveInputStream.count(int),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveInputStream,count,(long) → void,org.apache.commons.compress.archivers.ArchiveInputStream.count(long),11,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveInputStream,forEach,(org.apache.commons.io.function.IOConsumer) → void,org.apache.commons.compress.archivers.ArchiveInputStream.forEach(IOConsumer),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveInputStream,getBytesRead,() → long,org.apache.commons.compress.archivers.ArchiveInputStream.getBytesRead(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveInputStream,getCharset,() → java.nio.charset.Charset,org.apache.commons.compress.archivers.ArchiveInputStream.getCharset(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveInputStream,getCount,() → int,org.apache.commons.compress.archivers.ArchiveInputStream.getCount(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveInputStream,iterator,() → org.apache.commons.io.function.IOIterator,org.apache.commons.compress.archivers.ArchiveInputStream.iterator(),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveInputStream,mark,(int) → void,org.apache.commons.compress.archivers.ArchiveInputStream.mark(int),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveInputStream,markSupported,() → boolean,org.apache.commons.compress.archivers.ArchiveInputStream.markSupported(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveInputStream,pushedBackBytes,(long) → void,org.apache.commons.compress.archivers.ArchiveInputStream.pushedBackBytes(long),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveInputStream,read,() → int,org.apache.commons.compress.archivers.ArchiveInputStream.read(),19,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveInputStream,reset,() → void,org.apache.commons.compress.archivers.ArchiveInputStream.reset(),1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,archiveStreamProviderIterable,() → java.lang.Iterable,org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveStreamProviderIterable(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,detect,(java.io.InputStream) → java.lang.String,org.apache.commons.compress.archivers.ArchiveStreamFactory.detect(InputStream),188,0,0.0,40,0,0.0,21,53,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,findAvailableArchiveInputStreamProviders,() → java.util.SortedMap,org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveInputStreamProviders(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,findAvailableArchiveOutputStreamProviders,() → java.util.SortedMap,org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,putAll,"(java.util.Set, org.apache.commons.compress.archivers.ArchiveStreamProvider, java.util.TreeMap) → void","org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(Set,ArchiveStreamProvider,TreeMap)",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,toKey,(java.lang.String) → java.lang.String,org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(String),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,<init>,() → void,org.apache.commons.compress.archivers.ArchiveStreamFactory.<init>(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,<init>,(java.lang.String) → void,org.apache.commons.compress.archivers.ArchiveStreamFactory.<init>(String),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,createArchiveInputStream,(java.io.InputStream) → org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,createArchiveInputStream,"(java.lang.String, java.io.InputStream) → org.apache.commons.compress.archivers.ArchiveInputStream","org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,createArchiveInputStream,"(java.lang.String, java.io.InputStream, java.lang.String) → org.apache.commons.compress.archivers.ArchiveInputStream","org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream,String)",167,0,0.0,36,0,0.0,19,36,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,createArchiveOutputStream,"(java.lang.String, java.io.OutputStream) → org.apache.commons.compress.archivers.ArchiveOutputStream","org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,createArchiveOutputStream,"(java.lang.String, java.io.OutputStream, java.lang.String) → org.apache.commons.compress.archivers.ArchiveOutputStream","org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream,String)",128,0,0.0,26,0,0.0,14,29,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,getArchiveInputStreamProviders,() → java.util.SortedMap,org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveInputStreamProviders(),7,3,0.3,1,1,0.5,2,2,1,0.3333333333333333,0,1,1.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,getArchiveOutputStreamProviders,() → java.util.SortedMap,org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveOutputStreamProviders(),10,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,getEntryEncoding,() → java.lang.String,org.apache.commons.compress.archivers.ArchiveStreamFactory.getEntryEncoding(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,getInputStreamArchiveNames,() → java.util.Set,org.apache.commons.compress.archivers.ArchiveStreamFactory.getInputStreamArchiveNames(),0,36,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,getOutputStreamArchiveNames,() → java.util.Set,org.apache.commons.compress.archivers.ArchiveStreamFactory.getOutputStreamArchiveNames(),28,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,setEntryEncoding,(java.lang.String) → void,org.apache.commons.compress.archivers.ArchiveStreamFactory.setEntryEncoding(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,lambda$putAll$4,"(java.util.TreeMap, org.apache.commons.compress.archivers.ArchiveStreamProvider, java.lang.String) → void","org.apache.commons.compress.archivers.ArchiveStreamFactory.lambda$putAll$4(TreeMap,ArchiveStreamProvider,String)",0,8,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,lambda$findAvailableArchiveOutputStreamProviders$3,() → java.util.SortedMap,org.apache.commons.compress.archivers.ArchiveStreamFactory.lambda$findAvailableArchiveOutputStreamProviders$3(),15,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,lambda$null$2,"(java.util.TreeMap, org.apache.commons.compress.archivers.ArchiveStreamProvider) → void","org.apache.commons.compress.archivers.ArchiveStreamFactory.lambda$null$2(TreeMap,ArchiveStreamProvider)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,lambda$findAvailableArchiveInputStreamProviders$1,() → java.util.SortedMap,org.apache.commons.compress.archivers.ArchiveStreamFactory.lambda$findAvailableArchiveInputStreamProviders$1(),6,9,0.6,0,0,coverage not available since no branches,1,2,2,0.5,0,1,1.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,lambda$null$0,"(java.util.TreeMap, org.apache.commons.compress.archivers.ArchiveStreamProvider) → void","org.apache.commons.compress.archivers.ArchiveStreamFactory.lambda$null$0(TreeMap,ArchiveStreamProvider)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveStreamFactory,<clinit>,() → void,org.apache.commons.compress.archivers.ArchiveStreamFactory.<clinit>(),0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveException,<init>,(java.lang.String) → void,org.apache.commons.compress.archivers.ArchiveException.<init>(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveException,<init>,"(java.lang.String, java.lang.Exception) → void","org.apache.commons.compress.archivers.ArchiveException.<init>(String,Exception)",5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/StreamingNotSupportedException,<init>,(java.lang.String) → void,org.apache.commons.compress.archivers.StreamingNotSupportedException.<init>(String),16,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/StreamingNotSupportedException,getFormat,() → java.lang.String,org.apache.commons.compress.archivers.StreamingNotSupportedException.getFormat(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveOutputStream,<init>,() → void,org.apache.commons.compress.archivers.ArchiveOutputStream.<init>(),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveOutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.archivers.ArchiveOutputStream.<init>(OutputStream),0,8,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveOutputStream,canWriteEntryData,(org.apache.commons.compress.archivers.ArchiveEntry) → boolean,org.apache.commons.compress.archivers.ArchiveOutputStream.canWriteEntryData(ArchiveEntry),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveOutputStream,checkFinished,() → void,org.apache.commons.compress.archivers.ArchiveOutputStream.checkFinished(),5,4,0.4444444444444444,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveOutputStream,count,(int) → void,org.apache.commons.compress.archivers.ArchiveOutputStream.count(int),0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveOutputStream,count,(long) → void,org.apache.commons.compress.archivers.ArchiveOutputStream.count(long),0,11,1.0,1,1,0.5,2,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveOutputStream,createArchiveEntry,"(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) → org.apache.commons.compress.archivers.ArchiveEntry","org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveOutputStream,getBytesWritten,() → long,org.apache.commons.compress.archivers.ArchiveOutputStream.getBytesWritten(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveOutputStream,getCount,() → int,org.apache.commons.compress.archivers.ArchiveOutputStream.getCount(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveOutputStream,write,(int) → void,org.apache.commons.compress.archivers.ArchiveOutputStream.write(int),0,15,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/Lister,createArchiveInputStream,"(java.lang.String[], java.io.InputStream) → org.apache.commons.compress.archivers.ArchiveInputStream","org.apache.commons.compress.archivers.Lister.createArchiveInputStream(String[],InputStream)",15,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/Lister,detectFormat,(java.nio.file.Path) → java.lang.String,org.apache.commons.compress.archivers.Lister.detectFormat(Path),15,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/Lister,main,(java.lang.String[]) → void,org.apache.commons.compress.archivers.Lister.main(String[]),14,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/Lister,usage,() → void,org.apache.commons.compress.archivers.Lister.usage(),10,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/Lister,<init>,() → void,org.apache.commons.compress.archivers.Lister.<init>(),10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/Lister,<init>,"(boolean, java.lang.String[]) → void","org.apache.commons.compress.archivers.Lister.<init>(boolean,String[])",17,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/Lister,go,() → void,org.apache.commons.compress.archivers.Lister.go(),12,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/Lister,list,"(java.nio.file.Path, java.lang.String[]) → void","org.apache.commons.compress.archivers.Lister.list(Path,String[])",73,0,0.0,8,0,0.0,6,14,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/Lister,list7z,(java.nio.file.Path) → void,org.apache.commons.compress.archivers.Lister.list7z(Path),42,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/Lister,listStream,"(java.nio.file.Path, java.lang.String[]) → void","org.apache.commons.compress.archivers.Lister.listStream(Path,String[])",32,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/Lister,listZipUsingTarFile,(java.nio.file.Path) → void,org.apache.commons.compress.archivers.Lister.listZipUsingTarFile(Path),23,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/Lister,listZipUsingZipFile,(java.nio.file.Path) → void,org.apache.commons.compress.archivers.Lister.listZipUsingZipFile(Path),24,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/Lister,println,(org.apache.commons.compress.archivers.ArchiveEntry) → void,org.apache.commons.compress.archivers.Lister.println(ArchiveEntry),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/Lister,println,(java.lang.String) → void,org.apache.commons.compress.archivers.Lister.println(String),7,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/Lister,<clinit>,() → void,org.apache.commons.compress.archivers.Lister.<clinit>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveInputStream$ArchiveEntryIOIterator,<init>,(org.apache.commons.compress.archivers.ArchiveInputStream) → void,org.apache.commons.compress.archivers.ArchiveInputStream$ArchiveEntryIOIterator.<init>(ArchiveInputStream),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveInputStream$ArchiveEntryIOIterator,hasNext,() → boolean,org.apache.commons.compress.archivers.ArchiveInputStream$ArchiveEntryIOIterator.hasNext(),15,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveInputStream$ArchiveEntryIOIterator,next,() → org.apache.commons.compress.archivers.ArchiveEntry,org.apache.commons.compress.archivers.ArchiveInputStream$ArchiveEntryIOIterator.next(),15,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveInputStream$ArchiveEntryIOIterator,unwrap,() → java.util.Iterator,org.apache.commons.compress.archivers.ArchiveInputStream$ArchiveEntryIOIterator.unwrap(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers,org/apache/commons/compress/archivers/ArchiveEntry,resolveIn,(java.nio.file.Path) → java.nio.file.Path,org.apache.commons.compress.archivers.ArchiveEntry.resolveIn(Path),34,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate,org/apache/commons/compress/compressors/deflate/DeflateParameters,<init>,() → void,org.apache.commons.compress.compressors.deflate.DeflateParameters.<init>(),0,9,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/compressors/deflate,org/apache/commons/compress/compressors/deflate/DeflateParameters,getCompressionLevel,() → int,org.apache.commons.compress.compressors.deflate.DeflateParameters.getCompressionLevel(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors/deflate,org/apache/commons/compress/compressors/deflate/DeflateParameters,setCompressionLevel,(int) → void,org.apache.commons.compress.compressors.deflate.DeflateParameters.setCompressionLevel(int),21,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate,org/apache/commons/compress/compressors/deflate/DeflateParameters,setWithZlibHeader,(boolean) → void,org.apache.commons.compress.compressors.deflate.DeflateParameters.setWithZlibHeader(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate,org/apache/commons/compress/compressors/deflate/DeflateParameters,withZlibHeader,() → boolean,org.apache.commons.compress.compressors.deflate.DeflateParameters.withZlibHeader(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/compressors/deflate,org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.<init>(OutputStream),0,7,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/compressors/deflate,org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStream,<init>,"(java.io.OutputStream, org.apache.commons.compress.compressors.deflate.DeflateParameters) → void","org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.<init>(OutputStream,DeflateParameters)",2,22,0.9166666666666666,1,1,0.5,2,0,4,1.0,0,1,1.0
org/apache/commons/compress/compressors/deflate,org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStream,close,() → void,org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.close(),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/compressors/deflate,org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStream,finish,() → void,org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.finish(),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate,org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStream,flush,() → void,org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.flush(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/compressors/deflate,org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(byte[],int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate,org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream,matches,"(byte[], int) → boolean","org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byte[],int)",32,0,0.0,12,0,0.0,7,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate,org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.<init>(InputStream),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate,org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream,<init>,"(java.io.InputStream, org.apache.commons.compress.compressors.deflate.DeflateParameters) → void","org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.<init>(InputStream,DeflateParameters)",31,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate,org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream,available,() → int,org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.available(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate,org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream,close,() → void,org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.close(),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate,org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream,getCompressedCount,() → long,org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.getCompressedCount(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate,org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream,read,() → int,org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(),14,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate,org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(byte[],int,int)",16,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/deflate,org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream,skip,(long) → long,org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.skip(long),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils,<init>,() → void,org.apache.commons.compress.archivers.zip.ExtraFieldUtils.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils,createExtraField,(org.apache.commons.compress.archivers.zip.ZipShort) → org.apache.commons.compress.archivers.zip.ZipExtraField,org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(ZipShort),16,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils,createExtraFieldNoDefault,(org.apache.commons.compress.archivers.zip.ZipShort) → org.apache.commons.compress.archivers.zip.ZipExtraField,org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraFieldNoDefault(ZipShort),13,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils,fillExtraField,"(org.apache.commons.compress.archivers.zip.ZipExtraField, byte[], int, int, boolean) → org.apache.commons.compress.archivers.zip.ZipExtraField","org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean)",30,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils,mergeCentralDirectoryData,(org.apache.commons.compress.archivers.zip.ZipExtraField[]) → byte[],org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(ZipExtraField[]),124,0,0.0,16,0,0.0,9,21,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils,mergeLocalFileDataData,(org.apache.commons.compress.archivers.zip.ZipExtraField[]) → byte[],org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(ZipExtraField[]),16,108,0.8709677419354839,4,12,0.75,9,3,18,0.8571428571428571,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils,parse,(byte[]) → org.apache.commons.compress.archivers.zip.ZipExtraField[],org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[]),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils,parse,"(byte[], boolean) → org.apache.commons.compress.archivers.zip.ZipExtraField[]","org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils,parse,"(byte[], boolean, org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) → org.apache.commons.compress.archivers.zip.ZipExtraField[]","org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,ExtraFieldParsingBehavior)",93,0,0.0,6,0,0.0,4,18,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils,parse,"(byte[], boolean, org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField) → org.apache.commons.compress.archivers.zip.ZipExtraField[]","org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils,register,(java.lang.Class) → void,org.apache.commons.compress.archivers.zip.ExtraFieldUtils.register(Class),36,0,0.0,0,0,coverage not available since no branches,1,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils,lambda$register$0,"(java.lang.reflect.Constructor, java.lang.Class) → org.apache.commons.compress.archivers.zip.ZipExtraField","org.apache.commons.compress.archivers.zip.ExtraFieldUtils.lambda$register$0(Constructor,Class)",14,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils,<clinit>,() → void,org.apache.commons.compress.archivers.zip.ExtraFieldUtils.<clinit>(),0,78,1.0,0,0,coverage not available since no branches,1,0,16,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader,<init>,() → void,org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.<init>(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader,assertDynamicLengthFits,"(java.lang.String, int, int, int) → void","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.assertDynamicLengthFits(String,int,int,int)",30,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader,getEncryptionAlgorithm,() → org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm,org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.getEncryptionAlgorithm(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader,getHashAlgorithm,() → org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm,org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.getHashAlgorithm(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader,getRecordCount,() → long,org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.getRecordCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader,parseCentralDirectoryFormat,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(byte[],int,int)",63,0,0.0,2,0,0.0,2,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader,parseFileFormat,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(byte[],int,int)",426,0,0.0,8,0,0.0,5,44,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader,parseFromCentralDirectoryData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromCentralDirectoryData(byte[],int,int)",11,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader,parseFromLocalFileData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromLocalFileData(byte[],int,int)",11,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader,<clinit>,() → void,org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.<clinit>(),0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ScatterZipOutputStream,fileBased,(java.io.File) → org.apache.commons.compress.archivers.zip.ScatterZipOutputStream,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ScatterZipOutputStream,fileBased,"(java.io.File, int) → org.apache.commons.compress.archivers.zip.ScatterZipOutputStream","org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File,int)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ScatterZipOutputStream,pathBased,(java.nio.file.Path) → org.apache.commons.compress.archivers.zip.ScatterZipOutputStream,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(Path),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ScatterZipOutputStream,pathBased,"(java.nio.file.Path, int) → org.apache.commons.compress.archivers.zip.ScatterZipOutputStream","org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(Path,int)",15,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ScatterZipOutputStream,<init>,"(org.apache.commons.compress.parallel.ScatterGatherBackingStore, org.apache.commons.compress.archivers.zip.StreamCompressor) → void","org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.<init>(ScatterGatherBackingStore,StreamCompressor)",19,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ScatterZipOutputStream,addArchiveEntry,(org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest) → void,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(ZipArchiveEntryRequest),29,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ScatterZipOutputStream,close,() → void,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close(),17,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ScatterZipOutputStream,writeTo,(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream) → void,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(ZipArchiveOutputStream),42,0,0.0,2,0,0.0,2,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ScatterZipOutputStream,zipEntryWriter,() → org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$ZipEntryWriter,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.zipEntryWriter(),12,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64Mode,<clinit>,() → void,org.apache.commons.compress.archivers.zip.Zip64Mode.<clinit>(),44,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField,<init>,() → void,org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField,<init>,"(java.lang.String, byte[]) → void","org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[])",5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField,<init>,"(java.lang.String, byte[], int, int) → void","org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[],int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField,getHeaderId,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.getHeaderId(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField,<clinit>,() → void,org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<clinit>(),0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry,<init>,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry.<init>(),13,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$CurrentEntry,checkInputStream,() → java.io.InputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry.checkInputStream(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$EntryMetaData,<init>,"(long, boolean) → void","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(long,boolean)",9,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,<init>,() → void,org.apache.commons.compress.archivers.zip.AsiExtraField.<init>(),0,11,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,clone,() → java.lang.Object,org.apache.commons.compress.archivers.zip.AsiExtraField.clone(),17,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,getCentralDirectoryData,() → byte[],org.apache.commons.compress.archivers.zip.AsiExtraField.getCentralDirectoryData(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,getCentralDirectoryLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.AsiExtraField.getCentralDirectoryLength(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,getGroupId,() → int,org.apache.commons.compress.archivers.zip.AsiExtraField.getGroupId(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,getHeaderId,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.AsiExtraField.getHeaderId(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,getLinkedFile,() → java.lang.String,org.apache.commons.compress.archivers.zip.AsiExtraField.getLinkedFile(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,getLocalFileDataData,() → byte[],org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataData(),85,0,0.0,0,0,coverage not available since no branches,1,14,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,getLocalFileDataLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataLength(),11,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,getMode,() → int,org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,getMode,(int) → int,org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(int),19,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,getUserId,() → int,org.apache.commons.compress.archivers.zip.AsiExtraField.getUserId(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,isDirectory,() → boolean,org.apache.commons.compress.archivers.zip.AsiExtraField.isDirectory(),5,5,0.5,3,1,0.25,3,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,isLink,() → boolean,org.apache.commons.compress.archivers.zip.AsiExtraField.isLink(),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,parseFromCentralDirectoryData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromCentralDirectoryData(byte[],int,int)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,parseFromLocalFileData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(byte[],int,int)",147,0,0.0,12,0,0.0,7,24,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,setDirectory,(boolean) → void,org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(boolean),10,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,setGroupId,(int) → void,org.apache.commons.compress.archivers.zip.AsiExtraField.setGroupId(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,setLinkedFile,(java.lang.String) → void,org.apache.commons.compress.archivers.zip.AsiExtraField.setLinkedFile(String),10,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,setMode,(int) → void,org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(int),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,setUserId,(int) → void,org.apache.commons.compress.archivers.zip.AsiExtraField.setUserId(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AsiExtraField,<clinit>,() → void,org.apache.commons.compress.archivers.zip.AsiExtraField.<clinit>(),0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter,<init>,(org.apache.commons.compress.archivers.zip.ScatterZipOutputStream) → void,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$ZipEntryWriter.<init>(ScatterZipOutputStream),16,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter,close,() → void,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$ZipEntryWriter.close(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$ZipEntryWriter,writeNextZipEntry,(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream) → void,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$ZipEntryWriter.writeNextZipEntry(ZipArchiveOutputStream),27,0,0.0,0,0,coverage not available since no branches,1,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile,<init>,() → void,org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.<init>(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile,getHashAlgorithm,() → org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm,org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.getHashAlgorithm(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile,getRecordCount,() → int,org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.getRecordCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile,parseFromCentralDirectoryData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.parseFromCentralDirectoryData(byte[],int,int)",23,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile,<clinit>,() → void,org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.<clinit>(),0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0019_EncryptionRecipientCertificateList,<init>,() → void,org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList.<init>(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0019_EncryptionRecipientCertificateList,<clinit>,() → void,org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList.<clinit>(),0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundCountInputStream,<init>,"(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream, java.io.InputStream, long) → void","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.<init>(ZipArchiveInputStream,InputStream,long)",8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundCountInputStream,atMaxLength,() → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.atMaxLength(),15,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundCountInputStream,read,() → int,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.read(),17,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundCountInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.read(byte[],int,int)",35,0,0.0,6,0,0.0,4,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream$BoundCountInputStream,readCount,(int) → int,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.readCount(int),21,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ScatterStatistics,<init>,"(long, long) → void","org.apache.commons.compress.archivers.zip.ScatterStatistics.<init>(long,long)",9,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ScatterStatistics,getCompressionElapsed,() → long,org.apache.commons.compress.archivers.zip.ScatterStatistics.getCompressionElapsed(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ScatterStatistics,getMergingElapsed,() → long,org.apache.commons.compress.archivers.zip.ScatterStatistics.getMergingElapsed(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ScatterStatistics,toString,() → java.lang.String,org.apache.commons.compress.archivers.zip.ScatterStatistics.toString(),17,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64RequiredException,getEntryTooBigMessage,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → java.lang.String,org.apache.commons.compress.archivers.zip.Zip64RequiredException.getEntryTooBigMessage(ZipArchiveEntry),10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64RequiredException,<init>,(java.lang.String) → void,org.apache.commons.compress.archivers.zip.Zip64RequiredException.<init>(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,builder,() → org.apache.commons.compress.archivers.zip.ZipFile$Builder,org.apache.commons.compress.archivers.zip.ZipFile.builder(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,closeQuietly,(org.apache.commons.compress.archivers.zip.ZipFile) → void,org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(ZipFile),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,newReadByteChannel,(java.nio.file.Path) → java.nio.channels.SeekableByteChannel,org.apache.commons.compress.archivers.zip.ZipFile.newReadByteChannel(Path),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,openZipChannel,"(java.nio.file.Path, long, java.nio.file.OpenOption[]) → java.nio.channels.SeekableByteChannel","org.apache.commons.compress.archivers.zip.ZipFile.openZipChannel(Path,long,OpenOption[])",135,0,0.0,6,0,0.0,4,28,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,positionAtEndOfCentralDirectoryRecord,(java.nio.channels.SeekableByteChannel) → boolean,org.apache.commons.compress.archivers.zip.ZipFile.positionAtEndOfCentralDirectoryRecord(SeekableByteChannel),62,0,0.0,6,0,0.0,4,16,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,toPlatform,(int) → int,org.apache.commons.compress.archivers.zip.ZipFile.toPlatform(int),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,tryToLocateSignature,"(java.nio.channels.SeekableByteChannel, long, long, byte[]) → boolean","org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(SeekableByteChannel,long,long,byte[])",89,0,0.0,14,0,0.0,8,26,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,<init>,(java.io.File) → void,org.apache.commons.compress.archivers.zip.ZipFile.<init>(File),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,<init>,"(java.io.File, java.lang.String) → void","org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,<init>,"(java.io.File, java.lang.String, boolean) → void","org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,<init>,"(java.io.File, java.lang.String, boolean, boolean) → void","org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean,boolean)",12,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,<init>,(java.nio.file.Path) → void,org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,<init>,"(java.nio.file.Path, java.lang.String) → void","org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,<init>,"(java.nio.file.Path, java.lang.String, boolean) → void","org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,<init>,"(java.nio.file.Path, java.lang.String, boolean, boolean) → void","org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean,boolean)",12,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,<init>,(java.nio.channels.SeekableByteChannel) → void,org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,<init>,"(java.nio.channels.SeekableByteChannel, java.lang.String) → void","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,<init>,"(java.nio.channels.SeekableByteChannel, java.lang.String, java.nio.charset.Charset, boolean, boolean, boolean) → void","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,Charset,boolean,boolean,boolean)",114,0,0.0,8,0,0.0,5,29,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,<init>,"(java.nio.channels.SeekableByteChannel, java.lang.String, java.lang.String, boolean) → void","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,<init>,"(java.nio.channels.SeekableByteChannel, java.lang.String, java.lang.String, boolean, boolean) → void","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,<init>,"(java.nio.channels.SeekableByteChannel, java.lang.String, java.lang.String, boolean, boolean, boolean) → void","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean,boolean)",10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,<init>,(java.lang.String) → void,org.apache.commons.compress.archivers.zip.ZipFile.<init>(String),9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,<init>,"(java.lang.String, java.lang.String) → void","org.apache.commons.compress.archivers.zip.ZipFile.<init>(String,String)",10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,canReadEntryData,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → boolean,org.apache.commons.compress.archivers.zip.ZipFile.canReadEntryData(ZipArchiveEntry),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,close,() → void,org.apache.commons.compress.archivers.zip.ZipFile.close(),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,copyRawEntries,"(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream, org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate) → void","org.apache.commons.compress.archivers.zip.ZipFile.copyRawEntries(ZipArchiveOutputStream,ZipArchiveEntryPredicate)",22,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,createBoundedInputStream,"(long, long) → org.apache.commons.compress.utils.BoundedArchiveInputStream","org.apache.commons.compress.archivers.zip.ZipFile.createBoundedInputStream(long,long)",40,0,0.0,8,0,0.0,5,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,fillNameMap,() → void,org.apache.commons.compress.archivers.zip.ZipFile.fillNameMap(),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,finalize,() → void,org.apache.commons.compress.archivers.zip.ZipFile.finalize(),8,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,getContentBeforeFirstLocalFileHeader,() → java.io.InputStream,org.apache.commons.compress.archivers.zip.ZipFile.getContentBeforeFirstLocalFileHeader(),13,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,getDataOffset,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → long,org.apache.commons.compress.archivers.zip.ZipFile.getDataOffset(ZipArchiveEntry),16,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,getEncoding,() → java.lang.String,org.apache.commons.compress.archivers.zip.ZipFile.getEncoding(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,getEntries,() → java.util.Enumeration,org.apache.commons.compress.archivers.zip.ZipFile.getEntries(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,getEntries,(java.lang.String) → java.lang.Iterable,org.apache.commons.compress.archivers.zip.ZipFile.getEntries(String),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,getEntriesInPhysicalOrder,() → java.util.Enumeration,org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(),12,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,getEntriesInPhysicalOrder,(java.lang.String) → java.lang.Iterable,org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(String),15,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,getEntry,(java.lang.String) → org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipFile.getEntry(String),14,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,getFirstLocalFileHeaderOffset,() → long,org.apache.commons.compress.archivers.zip.ZipFile.getFirstLocalFileHeaderOffset(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,getInputStream,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → java.io.InputStream,org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(ZipArchiveEntry),97,0,0.0,11,0,0.0,10,18,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,getRawInputStream,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → java.io.InputStream,org.apache.commons.compress.archivers.zip.ZipFile.getRawInputStream(ZipArchiveEntry),21,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,getUnixSymlink,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → java.lang.String,org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry),21,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,populateFromCentralDirectory,() → java.util.Map,org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory(),59,0,0.0,6,0,0.0,4,14,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,positionAtCentralDirectory,() → void,org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory(),12,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,positionAtCentralDirectory32,() → void,org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32(),105,0,0.0,2,0,0.0,2,22,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,positionAtCentralDirectory64,() → void,org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64(),152,0,0.0,6,0,0.0,4,35,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,readCentralDirectoryEntry,(java.util.Map) → void,org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map),293,0,0.0,24,0,0.0,13,76,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,resolveLocalFileHeaderData,(java.util.Map) → void,org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map),76,0,0.0,6,0,0.0,4,18,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,sanityCheckLFHOffset,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → void,org.apache.commons.compress.archivers.zip.ZipFile.sanityCheckLFHOffset(ZipArchiveEntry),93,0,0.0,14,0,0.0,8,12,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,setDataOffset,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → int[],org.apache.commons.compress.archivers.zip.ZipFile.setDataOffset(ZipArchiveEntry),113,0,0.0,4,0,0.0,3,16,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,setSizesAndOffsetFromZip64Extra,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → void,org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(ZipArchiveEntry),132,0,0.0,30,0,0.0,16,29,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,skipBytes,(int) → void,org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(int),25,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,sortByOffset,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry[]) → org.apache.commons.compress.archivers.zip.ZipArchiveEntry[],org.apache.commons.compress.archivers.zip.ZipFile.sortByOffset(ZipArchiveEntry[]),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,startsWithLocalFileHeader,() → boolean,org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader(),20,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,stream,() → org.apache.commons.io.function.IOStream,org.apache.commons.compress.archivers.zip.ZipFile.stream(),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,lambda$fillNameMap$2,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → void,org.apache.commons.compress.archivers.zip.ZipFile.lambda$fillNameMap$2(ZipArchiveEntry),14,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,lambda$null$1,(java.lang.String) → java.util.LinkedList,org.apache.commons.compress.archivers.zip.ZipFile.lambda$null$1(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,lambda$openZipChannel$0,"(long, java.nio.file.Path, java.nio.file.Path, java.lang.String, int) → java.nio.file.Path","org.apache.commons.compress.archivers.zip.ZipFile.lambda$openZipChannel$0(long,Path,Path,String,int)",61,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile,<clinit>,() → void,org.apache.commons.compress.archivers.zip.ZipFile.<clinit>(),18,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy,<init>,(java.lang.String) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.<init>(String),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy,toString,() → java.lang.String,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.toString(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$UnicodeExtraFieldPolicy,<clinit>,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.<clinit>(),16,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,<init>,() → void,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,<init>,"(org.apache.commons.compress.archivers.zip.ZipEightByteInteger, org.apache.commons.compress.archivers.zip.ZipEightByteInteger) → void","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger)",0,7,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,<init>,"(org.apache.commons.compress.archivers.zip.ZipEightByteInteger, org.apache.commons.compress.archivers.zip.ZipEightByteInteger, org.apache.commons.compress.archivers.zip.ZipEightByteInteger, org.apache.commons.compress.archivers.zip.ZipLong) → void","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger,ZipEightByteInteger,ZipLong)",0,15,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,addSizes,(byte[]) → int,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.addSizes(byte[]),0,28,1.0,2,2,0.5,3,0,8,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,getCentralDirectoryData,() → byte[],org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryData(),35,0,0.0,4,0,0.0,3,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,getCentralDirectoryLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryLength(),0,31,1.0,0,8,1.0,5,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,getCompressedSize,() → org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCompressedSize(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,getDiskStartNumber,() → org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getDiskStartNumber(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,getHeaderId,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getHeaderId(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,getLocalFileDataData,() → byte[],org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataData(),0,28,1.0,0,8,1.0,5,0,7,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,getLocalFileDataLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataLength(),0,10,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,getRelativeHeaderOffset,() → org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getRelativeHeaderOffset(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,getSize,() → org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getSize(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,parseFromCentralDirectoryData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(byte[],int,int)",0,64,1.0,0,6,1.0,4,0,13,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,parseFromLocalFileData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(byte[],int,int)",6,50,0.8928571428571429,4,4,0.5,5,2,16,0.8888888888888888,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,reparseCentralDirectoryData,"(boolean, boolean, boolean, boolean) → void","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(boolean,boolean,boolean,boolean)",97,0,0.0,20,0,0.0,11,18,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,setCompressedSize,(org.apache.commons.compress.archivers.zip.ZipEightByteInteger) → void,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setCompressedSize(ZipEightByteInteger),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,setDiskStartNumber,(org.apache.commons.compress.archivers.zip.ZipLong) → void,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setDiskStartNumber(ZipLong),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,setRelativeHeaderOffset,(org.apache.commons.compress.archivers.zip.ZipEightByteInteger) → void,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setRelativeHeaderOffset(ZipEightByteInteger),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,setSize,(org.apache.commons.compress.archivers.zip.ZipEightByteInteger) → void,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setSize(ZipEightByteInteger),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField,<clinit>,() → void,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<clinit>(),0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/BitStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.archivers.zip.BitStream.<init>(InputStream),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/BitStream,nextBit,() → int,org.apache.commons.compress.archivers.zip.BitStream.nextBit(),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/BitStream,nextBits,(int) → long,org.apache.commons.compress.archivers.zip.BitStream.nextBits(int),23,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/BitStream,nextByte,() → int,org.apache.commons.compress.archivers.zip.BitStream.nextByte(),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/BinaryTree,decode,"(java.io.InputStream, int) → org.apache.commons.compress.archivers.zip.BinaryTree","org.apache.commons.compress.archivers.zip.BinaryTree.decode(InputStream,int)",226,0,0.0,28,0,0.0,15,47,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/BinaryTree,<init>,(int) → void,org.apache.commons.compress.archivers.zip.BinaryTree.<init>(int),33,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/BinaryTree,addLeaf,"(int, int, int, int) → void","org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(int,int,int,int)",61,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/BinaryTree,read,(org.apache.commons.compress.archivers.zip.BitStream) → int,org.apache.commons.compress.archivers.zip.BinaryTree.read(BitStream),53,0,0.0,6,0,0.0,4,12,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile$Entry,equals,(java.lang.Object) → boolean,org.apache.commons.compress.archivers.zip.ZipFile$Entry.equals(Object),31,0,0.0,8,0,0.0,5,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile$Entry,hashCode,() → int,org.apache.commons.compress.archivers.zip.ZipFile$Entry.hashCode(),15,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,<init>,() → void,org.apache.commons.compress.archivers.zip.ZipUtil.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,adjustToLong,(int) → long,org.apache.commons.compress.archivers.zip.ZipUtil.adjustToLong(int),10,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,canHandleEntryData,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → boolean,org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(ZipArchiveEntry),10,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,checkRequestedFeatures,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → void,org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(ZipArchiveEntry),31,0,0.0,6,0,0.0,4,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,copy,(byte[]) → byte[],org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[]),5,4,0.4444444444444444,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,copy,"(byte[], byte[], int) → void","org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[],byte[],int)",10,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,dosToJavaDate,(long) → java.util.Date,org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaDate(long),0,67,1.0,0,0,coverage not available since no branches,1,0,9,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,dosToJavaTime,(long) → long,org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(long),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,fromDosTime,(org.apache.commons.compress.archivers.zip.ZipLong) → java.util.Date,org.apache.commons.compress.archivers.zip.ZipUtil.fromDosTime(ZipLong),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,getUnicodeStringIfOriginalMatches,"(org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField, byte[]) → java.lang.String","org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField,byte[])",25,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,isDosTime,(long) → boolean,org.apache.commons.compress.archivers.zip.ZipUtil.isDosTime(long),0,17,1.0,2,4,0.6666666666666666,4,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,javaEpochToLocalDateTime,(long) → java.time.LocalDateTime,org.apache.commons.compress.archivers.zip.ZipUtil.javaEpochToLocalDateTime(long),0,7,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,javaToDosTime,(long) → long,org.apache.commons.compress.archivers.zip.ZipUtil.javaToDosTime(long),0,44,1.0,0,2,1.0,2,0,5,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,longToBig,(long) → java.math.BigInteger,org.apache.commons.compress.archivers.zip.ZipUtil.longToBig(long),33,0,0.0,6,0,0.0,4,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,newZipException,"(java.lang.String, java.lang.Throwable) → java.util.zip.ZipException","org.apache.commons.compress.archivers.zip.ZipUtil.newZipException(String,Throwable)",8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,reverse,(byte[]) → byte[],org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byte[]),20,15,0.42857142857142855,1,1,0.5,2,3,3,0.5,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,setNameAndCommentFromExtraFields,"(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, byte[], byte[]) → void","org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(ZipArchiveEntry,byte[],byte[])",54,0,0.0,12,0,0.0,7,14,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,signedByteToUnsignedInt,(byte) → int,org.apache.commons.compress.archivers.zip.ZipUtil.signedByteToUnsignedInt(byte),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,supportsEncryptionOf,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → boolean,org.apache.commons.compress.archivers.zip.ZipUtil.supportsEncryptionOf(ZipArchiveEntry),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,supportsMethodOf,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → boolean,org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(ZipArchiveEntry),35,0,0.0,16,0,0.0,9,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,toDosTime,(java.util.Date) → org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(Date),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,toDosTime,(long) → byte[],org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long),9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,toDosTime,"(long, byte[], int) → void","org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long,byte[],int)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,toLong,(java.math.BigInteger) → long,org.apache.commons.compress.archivers.zip.ZipUtil.toLong(BigInteger),18,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,unsignedIntToSignedByte,(int) → byte,org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte(int),30,0,0.0,6,0,0.0,4,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipUtil,<clinit>,() → void,org.apache.commons.compress.archivers.zip.ZipUtil.<clinit>(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/PKWareExtraHeader,<init>,(org.apache.commons.compress.archivers.zip.ZipShort) → void,org.apache.commons.compress.archivers.zip.PKWareExtraHeader.<init>(ZipShort),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/PKWareExtraHeader,assertMinimalLength,"(int, int) → void","org.apache.commons.compress.archivers.zip.PKWareExtraHeader.assertMinimalLength(int,int)",24,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/PKWareExtraHeader,getCentralDirectoryData,() → byte[],org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getCentralDirectoryData(),4,6,0.6,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/PKWareExtraHeader,getCentralDirectoryLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getCentralDirectoryLength(),13,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/PKWareExtraHeader,getHeaderId,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getHeaderId(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/PKWareExtraHeader,getLocalFileDataData,() → byte[],org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getLocalFileDataData(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/PKWareExtraHeader,getLocalFileDataLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getLocalFileDataLength(),12,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/PKWareExtraHeader,parseFromCentralDirectoryData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromCentralDirectoryData(byte[],int,int)",17,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/PKWareExtraHeader,parseFromLocalFileData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromLocalFileData(byte[],int,int)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/PKWareExtraHeader,setCentralDirectoryData,(byte[]) → void,org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setCentralDirectoryData(byte[]),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/PKWareExtraHeader,setLocalFileDataData,(byte[]) → void,org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setLocalFileDataData(byte[]),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor$DataOutputCompressor,<init>,"(java.util.zip.Deflater, java.io.DataOutput) → void","org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor.<init>(Deflater,DataOutput)",7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor$DataOutputCompressor,writeOut,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor.writeOut(byte[],int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipShort,getBytes,(int) → byte[],org.apache.commons.compress.archivers.zip.ZipShort.getBytes(int),9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipShort,getValue,(byte[]) → int,org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipShort,getValue,"(byte[], int) → int","org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipShort,putShort,"(int, byte[], int) → void","org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int)",0,7,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipShort,<init>,(byte[]) → void,org.apache.commons.compress.archivers.zip.ZipShort.<init>(byte[]),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipShort,<init>,"(byte[], int) → void","org.apache.commons.compress.archivers.zip.ZipShort.<init>(byte[],int)",8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipShort,<init>,(int) → void,org.apache.commons.compress.archivers.zip.ZipShort.<init>(int),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipShort,clone,() → java.lang.Object,org.apache.commons.compress.archivers.zip.ZipShort.clone(),9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipShort,equals,(java.lang.Object) → boolean,org.apache.commons.compress.archivers.zip.ZipShort.equals(Object),2,13,0.8666666666666667,1,3,0.75,3,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipShort,getBytes,() → byte[],org.apache.commons.compress.archivers.zip.ZipShort.getBytes(),0,12,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipShort,getValue,() → int,org.apache.commons.compress.archivers.zip.ZipShort.getValue(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipShort,hashCode,() → int,org.apache.commons.compress.archivers.zip.ZipShort.hashCode(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipShort,toString,() → java.lang.String,org.apache.commons.compress.archivers.zip.ZipShort.toString(),10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipShort,<clinit>,() → void,org.apache.commons.compress.archivers.zip.ZipShort.<clinit>(),0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnicodePathExtraField,<init>,() → void,org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnicodePathExtraField,<init>,"(java.lang.String, byte[]) → void","org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[])",5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnicodePathExtraField,<init>,"(java.lang.String, byte[], int, int) → void","org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[],int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnicodePathExtraField,getHeaderId,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.UnicodePathExtraField.getHeaderId(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnicodePathExtraField,<clinit>,() → void,org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<clinit>(),0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0014_X509Certificates,<init>,() → void,org.apache.commons.compress.archivers.zip.X0014_X509Certificates.<init>(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0014_X509Certificates,<clinit>,() → void,org.apache.commons.compress.archivers.zip.X0014_X509Certificates.<clinit>(),0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEightByteInteger,getBytes,(java.math.BigInteger) → byte[],org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(BigInteger),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEightByteInteger,getBytes,(long) → byte[],org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(long),0,8,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEightByteInteger,getLongValue,(byte[]) → long,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEightByteInteger,getLongValue,"(byte[], int) → long","org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[],int)",0,7,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEightByteInteger,getValue,(byte[]) → java.math.BigInteger,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEightByteInteger,getValue,"(byte[], int) → java.math.BigInteger","org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[],int)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEightByteInteger,toUnsignedBigInteger,(long) → java.math.BigInteger,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.toUnsignedBigInteger(long),14,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEightByteInteger,<init>,(java.math.BigInteger) → void,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(BigInteger),0,7,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEightByteInteger,<init>,(byte[]) → void,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(byte[]),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEightByteInteger,<init>,"(byte[], int) → void","org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(byte[],int)",0,8,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEightByteInteger,<init>,(long) → void,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(long),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEightByteInteger,equals,(java.lang.Object) → boolean,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.equals(Object),0,16,1.0,0,4,1.0,3,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEightByteInteger,getBytes,() → byte[],org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEightByteInteger,getLongValue,() → long,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEightByteInteger,getValue,() → java.math.BigInteger,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEightByteInteger,hashCode,() → int,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.hashCode(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEightByteInteger,toString,() → java.lang.String,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.toString(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEightByteInteger,<clinit>,() → void,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<clinit>(),0,10,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField,<init>,() → void,org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField,<init>,(int) → void,org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField,<init>,"(int, boolean) → void","org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int,boolean)",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField,<init>,"(int, boolean, int) → void","org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int,boolean,int)",0,44,1.0,0,6,1.0,4,0,9,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField,allowMethodChange,() → boolean,org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.allowMethodChange(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField,getAlignment,() → short,org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.getAlignment(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField,getCentralDirectoryData,() → byte[],org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.getCentralDirectoryData(),11,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField,getCentralDirectoryLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.getCentralDirectoryLength(),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField,getHeaderId,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.getHeaderId(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField,getLocalFileDataData,() → byte[],org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.getLocalFileDataData(),0,20,1.0,0,2,1.0,2,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField,getLocalFileDataLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.getLocalFileDataLength(),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField,parseFromCentralDirectoryData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromCentralDirectoryData(byte[],int,int)",35,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField,parseFromLocalFileData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromLocalFileData(byte[],int,int)",11,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField,<clinit>,() → void,org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<clinit>(),0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,<init>,() → void,org.apache.commons.compress.archivers.zip.X000A_NTFS.<init>(),0,12,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,dateToZip,(java.util.Date) → org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.X000A_NTFS.dateToZip(Date),10,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,fileTimeToZip,(java.nio.file.attribute.FileTime) → org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.X000A_NTFS.fileTimeToZip(FileTime),2,8,0.8,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,zipToDate,(org.apache.commons.compress.archivers.zip.ZipEightByteInteger) → java.util.Date,org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(ZipEightByteInteger),12,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,zipToFileTime,(org.apache.commons.compress.archivers.zip.ZipEightByteInteger) → java.nio.file.attribute.FileTime,org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToFileTime(ZipEightByteInteger),0,12,1.0,1,3,0.75,3,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,equals,(java.lang.Object) → boolean,org.apache.commons.compress.archivers.zip.X000A_NTFS.equals(Object),30,0,0.0,8,0,0.0,5,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,getAccessFileTime,() → java.nio.file.attribute.FileTime,org.apache.commons.compress.archivers.zip.X000A_NTFS.getAccessFileTime(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,getAccessJavaTime,() → java.util.Date,org.apache.commons.compress.archivers.zip.X000A_NTFS.getAccessJavaTime(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,getAccessTime,() → org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.X000A_NTFS.getAccessTime(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,getCentralDirectoryData,() → byte[],org.apache.commons.compress.archivers.zip.X000A_NTFS.getCentralDirectoryData(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,getCentralDirectoryLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.X000A_NTFS.getCentralDirectoryLength(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,getCreateFileTime,() → java.nio.file.attribute.FileTime,org.apache.commons.compress.archivers.zip.X000A_NTFS.getCreateFileTime(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,getCreateJavaTime,() → java.util.Date,org.apache.commons.compress.archivers.zip.X000A_NTFS.getCreateJavaTime(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,getCreateTime,() → org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.X000A_NTFS.getCreateTime(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,getHeaderId,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.X000A_NTFS.getHeaderId(),0,2,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,getLocalFileDataData,() → byte[],org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataData(),0,51,1.0,0,0,coverage not available since no branches,1,0,12,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,getLocalFileDataLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataLength(),0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,getModifyFileTime,() → java.nio.file.attribute.FileTime,org.apache.commons.compress.archivers.zip.X000A_NTFS.getModifyFileTime(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,getModifyJavaTime,() → java.util.Date,org.apache.commons.compress.archivers.zip.X000A_NTFS.getModifyJavaTime(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,getModifyTime,() → org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.X000A_NTFS.getModifyTime(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,hashCode,() → int,org.apache.commons.compress.archivers.zip.X000A_NTFS.hashCode(),35,0,0.0,6,0,0.0,4,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,parseFromCentralDirectoryData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromCentralDirectoryData(byte[],int,int)",8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,parseFromLocalFileData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(byte[],int,int)",44,0,0.0,4,0,0.0,3,12,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,readTimeAttr,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(byte[],int,int)",38,0,0.0,4,0,0.0,3,10,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,reset,() → void,org.apache.commons.compress.archivers.zip.X000A_NTFS.reset(),10,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,setAccessFileTime,(java.nio.file.attribute.FileTime) → void,org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessFileTime(FileTime),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,setAccessJavaTime,(java.util.Date) → void,org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessJavaTime(Date),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,setAccessTime,(org.apache.commons.compress.archivers.zip.ZipEightByteInteger) → void,org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessTime(ZipEightByteInteger),8,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,setCreateFileTime,(java.nio.file.attribute.FileTime) → void,org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateFileTime(FileTime),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,setCreateJavaTime,(java.util.Date) → void,org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateJavaTime(Date),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,setCreateTime,(org.apache.commons.compress.archivers.zip.ZipEightByteInteger) → void,org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateTime(ZipEightByteInteger),8,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,setModifyFileTime,(java.nio.file.attribute.FileTime) → void,org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyFileTime(FileTime),0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,setModifyJavaTime,(java.util.Date) → void,org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyJavaTime(Date),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,setModifyTime,(org.apache.commons.compress.archivers.zip.ZipEightByteInteger) → void,org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyTime(ZipEightByteInteger),0,8,1.0,0,2,1.0,2,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,toString,() → java.lang.String,org.apache.commons.compress.archivers.zip.X000A_NTFS.toString(),28,0,0.0,0,0,coverage not available since no branches,1,12,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X000A_NTFS,<clinit>,() → void,org.apache.commons.compress.archivers.zip.X000A_NTFS.<clinit>(),0,16,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm,getAlgorithmByCode,(int) → org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm,org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode(int),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm,<init>,"(java.lang.String, int, int) → void","org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm.<init>(String,int,int)",0,8,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm,getCode,() → int,org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm.getCode(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/PKWareExtraHeader$HashAlgorithm,<clinit>,() → void,org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm.<clinit>(),0,122,1.0,0,2,1.0,2,0,14,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry$ExtraFieldParsingMode,fillAndMakeUnrecognizedOnError,"(org.apache.commons.compress.archivers.zip.ZipExtraField, byte[], int, int, boolean) → org.apache.commons.compress.archivers.zip.ZipExtraField","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fillAndMakeUnrecognizedOnError(ZipExtraField,byte[],int,int,boolean)",37,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry$ExtraFieldParsingMode,<init>,"(java.lang.String, int, org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField) → void","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.<init>(String,int,UnparseableExtraField)",0,8,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry$ExtraFieldParsingMode,createExtraField,(org.apache.commons.compress.archivers.zip.ZipShort) → org.apache.commons.compress.archivers.zip.ZipExtraField,org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.createExtraField(ZipShort),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry$ExtraFieldParsingMode,fill,"(org.apache.commons.compress.archivers.zip.ZipExtraField, byte[], int, int, boolean) → org.apache.commons.compress.archivers.zip.ZipExtraField","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fill(ZipExtraField,byte[],int,int,boolean)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry$ExtraFieldParsingMode,onUnparseableExtraField,"(byte[], int, int, boolean, int) → org.apache.commons.compress.archivers.zip.ZipExtraField","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.onUnparseableExtraField(byte[],int,int,boolean,int)",9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry$ExtraFieldParsingMode,<clinit>,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.<clinit>(),0,59,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/NioZipEncoding,encodeFully,"(java.nio.charset.CharsetEncoder, java.nio.CharBuffer, java.nio.ByteBuffer) → java.nio.ByteBuffer","org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeFully(CharsetEncoder,CharBuffer,ByteBuffer)",26,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/NioZipEncoding,encodeSurrogate,"(java.nio.CharBuffer, char) → java.nio.CharBuffer","org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeSurrogate(CharBuffer,char)",57,0,0.0,0,0,coverage not available since no branches,1,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/NioZipEncoding,estimateIncrementalEncodingSize,"(java.nio.charset.CharsetEncoder, int) → int","org.apache.commons.compress.archivers.zip.NioZipEncoding.estimateIncrementalEncodingSize(CharsetEncoder,int)",9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/NioZipEncoding,estimateInitialBufferSize,"(java.nio.charset.CharsetEncoder, int) → int","org.apache.commons.compress.archivers.zip.NioZipEncoding.estimateInitialBufferSize(CharsetEncoder,int)",18,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/NioZipEncoding,<init>,"(java.nio.charset.Charset, boolean) → void","org.apache.commons.compress.archivers.zip.NioZipEncoding.<init>(Charset,boolean)",0,9,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/NioZipEncoding,canEncode,(java.lang.String) → boolean,org.apache.commons.compress.archivers.zip.NioZipEncoding.canEncode(String),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/NioZipEncoding,decode,(byte[]) → java.lang.String,org.apache.commons.compress.archivers.zip.NioZipEncoding.decode(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/NioZipEncoding,encode,(java.lang.String) → java.nio.ByteBuffer,org.apache.commons.compress.archivers.zip.NioZipEncoding.encode(String),133,0,0.0,22,0,0.0,12,28,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/NioZipEncoding,getCharset,() → java.nio.charset.Charset,org.apache.commons.compress.archivers.zip.NioZipEncoding.getCharset(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/NioZipEncoding,newDecoder,() → java.nio.charset.CharsetDecoder,org.apache.commons.compress.archivers.zip.NioZipEncoding.newDecoder(),21,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/NioZipEncoding,newEncoder,() → java.nio.charset.CharsetEncoder,org.apache.commons.compress.archivers.zip.NioZipEncoding.newEncoder(),21,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/NioZipEncoding,<clinit>,() → void,org.apache.commons.compress.archivers.zip.NioZipEncoding.<clinit>(),0,78,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel,buildFromLastSplitSegment,(java.io.File) → java.nio.channels.SeekableByteChannel,org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(File),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel,buildFromLastSplitSegment,(java.nio.file.Path) → java.nio.channels.SeekableByteChannel,org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(Path),68,0,0.0,4,0,0.0,3,10,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel,forFiles,(java.io.File[]) → java.nio.channels.SeekableByteChannel,org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forFiles(File[]),34,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel,forFiles,"(java.io.File, java.lang.Iterable) → java.nio.channels.SeekableByteChannel","org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forFiles(File,Iterable)",21,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel,forOrderedSeekableByteChannels,(java.nio.channels.SeekableByteChannel[]) → java.nio.channels.SeekableByteChannel,org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(SeekableByteChannel[]),17,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel,forOrderedSeekableByteChannels,"(java.nio.channels.SeekableByteChannel, java.lang.Iterable) → java.nio.channels.SeekableByteChannel","org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(SeekableByteChannel,Iterable)",30,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel,forPaths,"(java.util.List, java.nio.file.OpenOption[]) → java.nio.channels.SeekableByteChannel","org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(List,OpenOption[])",38,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel,forPaths,(java.nio.file.Path[]) → java.nio.channels.SeekableByteChannel,org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(Path[]),10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel,forPaths,"(java.nio.file.Path, java.lang.Iterable) → java.nio.channels.SeekableByteChannel","org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(Path,Iterable)",29,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel,<init>,(java.util.List) → void,org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.<init>(List),11,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel,assertSplitSignature,(java.util.List) → void,org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.assertSplitSignature(List),43,0,0.0,2,0,0.0,2,10,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel,lambda$forFiles$2,"(java.util.List, java.io.File) → void","org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.lambda$forFiles$2(List,File)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel,lambda$buildFromLastSplitSegment$1,"(java.util.regex.Pattern, java.nio.file.Path) → boolean","org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.lambda$buildFromLastSplitSegment$1(Pattern,Path)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel,lambda$buildFromLastSplitSegment$0,(java.nio.file.Path) → boolean,org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.lambda$buildFromLastSplitSegment$0(Path),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel,<clinit>,() → void,org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.<clinit>(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/CircularBuffer,<init>,(int) → void,org.apache.commons.compress.archivers.zip.CircularBuffer.<init>(int),0,10,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/CircularBuffer,available,() → boolean,org.apache.commons.compress.archivers.zip.CircularBuffer.available(),2,7,0.7777777777777778,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/CircularBuffer,copy,"(int, int) → void","org.apache.commons.compress.archivers.zip.CircularBuffer.copy(int,int)",26,15,0.36585365853658536,1,1,0.5,2,2,4,0.6666666666666666,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/CircularBuffer,get,() → int,org.apache.commons.compress.archivers.zip.CircularBuffer.get(),24,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/CircularBuffer,put,(int) → void,org.apache.commons.compress.archivers.zip.CircularBuffer.put(int),17,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry$CommentSource,<clinit>,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry$CommentSource.<clinit>(),0,24,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnshrinkingInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.<init>(InputStream),34,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnshrinkingInputStream,addEntry,"(int, byte) → int","org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(int,byte)",31,0,0.0,6,0,0.0,4,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnshrinkingInputStream,decompressNextSymbol,() → int,org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.decompressNextSymbol(),81,0,0.0,14,0,0.0,8,22,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnshrinkingInputStream,partialClear,() → void,org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.partialClear(),53,0,0.0,10,0,0.0,6,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitOutputStream,<init>,"(java.io.File, long) → void","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.<init>(File,long)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitOutputStream,<init>,"(java.nio.file.Path, long) → void","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.<init>(Path,long)",63,0,0.0,4,0,0.0,3,14,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitOutputStream,calculateDiskPosition,"(long, long) → long","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.calculateDiskPosition(long,long)",26,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitOutputStream,close,() → void,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.close(),6,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitOutputStream,createNewSplitSegmentFile,(java.lang.Integer) → java.nio.file.Path,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.createNewSplitSegmentFile(Integer),25,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitOutputStream,finish,() → void,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.finish(),40,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitOutputStream,getCurrentSplitSegmentBytesWritten,() → long,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.getCurrentSplitSegmentBytesWritten(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitOutputStream,getCurrentSplitSegmentIndex,() → int,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.getCurrentSplitSegmentIndex(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitOutputStream,getSplitSegmentFileName,(java.lang.Integer) → java.nio.file.Path,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.getSplitSegmentFileName(Integer),66,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitOutputStream,openNewSplitSegment,() → void,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.openNewSplitSegment(),75,0,0.0,2,0,0.0,2,15,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitOutputStream,position,() → long,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.position(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitOutputStream,prepareToWriteUnsplittableContent,(long) → void,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.prepareToWriteUnsplittableContent(long),23,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitOutputStream,write,(byte[]) → void,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(byte[],int,int)",72,0,0.0,6,0,0.0,4,15,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitOutputStream,write,(int) → void,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(int),13,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitOutputStream,writeAll,"(byte[], int, int, long) → void","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeAll(byte[],int,int,long)",117,0,0.0,6,0,0.0,4,21,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitOutputStream,writeToSegment,"(java.nio.file.Path, long, byte[], int, int) → void","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeToSegment(Path,long,byte[],int,int)",19,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitOutputStream,writeZipSplitSignature,() → void,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeZipSplitSignature(),21,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.archivers.zip.ZipFile$StoredStatisticsStream.<init>(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream,getCompressedCount,() → long,org.apache.commons.compress.archivers.zip.ZipFile$StoredStatisticsStream.getCompressedCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream,getUncompressedCount,() → long,org.apache.commons.compress.archivers.zip.ZipFile$StoredStatisticsStream.getUncompressedCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator,compare,"(java.nio.file.Path, java.nio.file.Path) → int","org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator.compare(Path,Path)",34,0,0.0,4,0,0.0,3,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData,<init>,() → void,org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData,getCentralDirectoryData,() → byte[],org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryData(),10,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData,getCentralDirectoryLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryLength(),13,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData,getHeaderId,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getHeaderId(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData,getLocalFileDataData,() → byte[],org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataData(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData,getLocalFileDataLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataLength(),12,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData,parseFromCentralDirectoryData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromCentralDirectoryData(byte[],int,int)",17,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData,parseFromLocalFileData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromLocalFileData(byte[],int,int)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData,<clinit>,() → void,org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.<clinit>(),0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,canConvertToInfoZipExtendedTimestamp,"(java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime) → boolean","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.canConvertToInfoZipExtendedTimestamp(FileTime,FileTime,FileTime)",1,12,0.9230769230769231,3,3,0.5,4,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,isDirectoryEntryName,(java.lang.String) → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectoryEntryName(String),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,toDirectoryEntryName,(java.lang.String) → java.lang.String,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toDirectoryEntryName(String),14,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,toEntryName,"(java.io.File, java.lang.String) → java.lang.String","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(File,String)",3,5,0.625,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,toEntryName,"(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) → java.lang.String","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(Path,String,LinkOption[])",9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,<init>,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(),0,4,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,<init>,"(java.io.File, java.lang.String) → void","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(File,String)",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,<init>,"(java.util.function.Function, java.io.File, java.lang.String) → void","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,File,String)",7,19,0.7307692307692307,1,1,0.5,2,2,6,0.75,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,<init>,"(java.util.function.Function, java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) → void","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,Path,String,LinkOption[])",12,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,<init>,"(java.util.function.Function, java.lang.String) → void","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,String)",0,39,1.0,0,0,coverage not available since no branches,1,0,13,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,<init>,"(java.util.function.Function, java.util.zip.ZipEntry) → void","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,ZipEntry)",63,0,0.0,2,0,0.0,2,19,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,<init>,"(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) → void","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Path,String,LinkOption[])",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,<init>,(java.lang.String) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(String),0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,<init>,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(ZipArchiveEntry),32,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,<init>,(java.util.zip.ZipEntry) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(ZipEntry),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,addAsFirstExtraField,(org.apache.commons.compress.archivers.zip.ZipExtraField) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addAsFirstExtraField(ZipExtraField),56,0,0.0,8,0,0.0,5,12,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,addExtraField,(org.apache.commons.compress.archivers.zip.ZipExtraField) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(ZipExtraField),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,addInfoZipExtendedTimestamp,"(java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime) → void","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addInfoZipExtendedTimestamp(FileTime,FileTime,FileTime)",6,17,0.7391304347826086,3,3,0.5,4,2,7,0.7777777777777778,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,addNTFSTimestamp,"(java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime, java.nio.file.attribute.FileTime) → void","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addNTFSTimestamp(FileTime,FileTime,FileTime)",6,17,0.7391304347826086,3,3,0.5,4,2,7,0.7777777777777778,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,clone,() → java.lang.Object,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.clone(),18,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,copyOf,"(org.apache.commons.compress.archivers.zip.ZipExtraField[], int) → org.apache.commons.compress.archivers.zip.ZipExtraField[]","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(ZipExtraField[],int)",0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,equals,(java.lang.Object) → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(Object),138,0,0.0,44,0,0.0,23,23,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,findMatching,"(org.apache.commons.compress.archivers.zip.ZipShort, java.util.List) → org.apache.commons.compress.archivers.zip.ZipExtraField","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.findMatching(ZipShort,List)",10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,findUnparseable,(java.util.List) → org.apache.commons.compress.archivers.zip.ZipExtraField,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.findUnparseable(List),13,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getAlignment,() → int,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAlignment(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getAllExtraFields,() → org.apache.commons.compress.archivers.zip.ZipExtraField[],org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFields(),6,9,0.6,1,1,0.5,2,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getAllExtraFieldsNoCopy,() → org.apache.commons.compress.archivers.zip.ZipExtraField[],org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFieldsNoCopy(),0,15,1.0,0,4,1.0,3,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getCentralDirectoryExtra,() → byte[],org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCentralDirectoryExtra(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getCommentSource,() → org.apache.commons.compress.archivers.zip.ZipArchiveEntry$CommentSource,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCommentSource(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getDataOffset,() → long,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getDataOffset(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getDiskNumberStart,() → long,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getDiskNumberStart(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getExternalAttributes,() → long,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExternalAttributes(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getExtraField,(org.apache.commons.compress.archivers.zip.ZipShort) → org.apache.commons.compress.archivers.zip.ZipExtraField,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(ZipShort),0,29,1.0,0,6,1.0,4,0,5,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getExtraFields,() → org.apache.commons.compress.archivers.zip.ZipExtraField[],org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getExtraFields,(boolean) → org.apache.commons.compress.archivers.zip.ZipExtraField[],org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(boolean),0,8,1.0,0,2,1.0,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getExtraFields,(org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) → org.apache.commons.compress.archivers.zip.ZipExtraField[],org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(ExtraFieldParsingBehavior),102,0,0.0,14,0,0.0,8,22,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getGeneralPurposeBit,() → org.apache.commons.compress.archivers.zip.GeneralPurposeBit,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getGeneralPurposeBit(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getInternalAttributes,() → int,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getInternalAttributes(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getLastModifiedDate,() → java.util.Date,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLastModifiedDate(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getLocalFileDataExtra,() → byte[],org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLocalFileDataExtra(),9,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getLocalHeaderOffset,() → long,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLocalHeaderOffset(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getMergedFields,() → org.apache.commons.compress.archivers.zip.ZipExtraField[],org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMergedFields(),0,19,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getMethod,() → int,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getName,() → java.lang.String,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(),3,6,0.6666666666666666,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getNameSource,() → org.apache.commons.compress.archivers.zip.ZipArchiveEntry$NameSource,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getNameSource(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getParseableExtraFields,() → org.apache.commons.compress.archivers.zip.ZipExtraField[],org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFields(),6,9,0.6,1,1,0.5,2,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getParseableExtraFieldsNoCopy,() → org.apache.commons.compress.archivers.zip.ZipExtraField[],org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFieldsNoCopy(),3,5,0.625,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getPlatform,() → int,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getPlatform(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getRawFlag,() → int,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getRawFlag(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getRawName,() → byte[],org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getRawName(),7,5,0.4166666666666667,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getSize,() → long,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getTime,() → long,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getTime(),18,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getUnixMode,() → int,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnixMode(),14,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getUnparseableExtraFieldData,() → org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnparseableExtraFieldData(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getUnparseableOnly,() → org.apache.commons.compress.archivers.zip.ZipExtraField[],org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnparseableOnly(),7,6,0.46153846153846156,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getVersionMadeBy,() → int,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getVersionMadeBy(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,getVersionRequired,() → int,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getVersionRequired(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,hashCode,() → int,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.hashCode(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,internalAddExtraField,(org.apache.commons.compress.archivers.zip.ZipExtraField) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAddExtraField(ZipExtraField),9,41,0.82,2,4,0.6666666666666666,4,2,8,0.8,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,internalRemoveExtraField,(org.apache.commons.compress.archivers.zip.ZipShort) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalRemoveExtraField(ZipShort),48,0,0.0,8,0,0.0,5,10,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,internalSetLastModifiedTime,(java.nio.file.attribute.FileTime) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalSetLastModifiedTime(FileTime),0,12,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,isDirectory,() → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectory(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,isStreamContiguous,() → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isStreamContiguous(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,isUnixSymlink,() → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isUnixSymlink(),10,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,mergeExtraFields,"(org.apache.commons.compress.archivers.zip.ZipExtraField[], boolean) → void","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(ZipExtraField[],boolean)",101,0,0.0,14,0,0.0,8,25,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,parseExtraFields,"(byte[], boolean, org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) → org.apache.commons.compress.archivers.zip.ZipExtraField[]","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior)",17,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,removeExtraField,(org.apache.commons.compress.archivers.zip.ZipShort) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(ZipShort),14,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,removeUnparseableExtraFieldData,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeUnparseableExtraFieldData(),13,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,requiresExtraTimeFields,() → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.requiresExtraTimeFields(),2,9,0.8181818181818182,2,2,0.5,3,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setAlignment,(int) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setAlignment(int),25,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setAttributes,"(java.nio.file.Path, java.nio.file.LinkOption[]) → void","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setAttributes(Path,LinkOption[])",30,0,0.0,2,0,0.0,2,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setCentralDirectoryExtra,(byte[]) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCentralDirectoryExtra(byte[]),18,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setCommentSource,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry$CommentSource) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCommentSource(CommentSource),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setCreationTime,(java.nio.file.attribute.FileTime) → java.util.zip.ZipEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCreationTime(FileTime),8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setDataOffset,(long) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setDataOffset(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setDiskNumberStart,(long) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setDiskNumberStart(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setExternalAttributes,(long) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExternalAttributes(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setExtra,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(),0,8,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setExtra,(byte[]) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(byte[]),30,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setExtraFields,(org.apache.commons.compress.archivers.zip.ZipExtraField[]) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(ZipExtraField[]),0,46,1.0,0,6,1.0,4,0,10,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setExtraTimeFields,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraTimeFields(),6,38,0.8636363636363636,3,5,0.625,5,2,11,0.8461538461538461,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setGeneralPurposeBit,(org.apache.commons.compress.archivers.zip.GeneralPurposeBit) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setGeneralPurposeBit(GeneralPurposeBit),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setInternalAttributes,(int) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setInternalAttributes(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setLastAccessTime,(java.nio.file.attribute.FileTime) → java.util.zip.ZipEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setLastAccessTime(FileTime),8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setLastModifiedTime,(java.nio.file.attribute.FileTime) → java.util.zip.ZipEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setLastModifiedTime(FileTime),0,7,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setLocalHeaderOffset,(long) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setLocalHeaderOffset(long),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setMethod,(int) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(int),18,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setName,(java.lang.String) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String),0,18,1.0,3,3,0.5,4,0,4,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setName,"(java.lang.String, byte[]) → void","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String,byte[])",7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setNameSource,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry$NameSource) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setNameSource(NameSource),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setPlatform,(int) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setPlatform(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setRawFlag,(int) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setRawFlag(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setSize,(long) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(long),0,13,1.0,0,2,1.0,2,0,4,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setStreamContiguous,(boolean) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setStreamContiguous(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setTime,(java.nio.file.attribute.FileTime) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setTime(FileTime),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setTime,(long) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setTime(long),0,21,1.0,0,2,1.0,2,0,7,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setUnixMode,(int) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setUnixMode(int),25,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setVersionMadeBy,(int) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionMadeBy(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,setVersionRequired,(int) → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionRequired(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,updateTimeFieldsFromExtraFields,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.updateTimeFieldsFromExtraFields(),0,5,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,updateTimeFromExtendedTimestampField,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.updateTimeFromExtendedTimestampField(),18,28,0.6086956521739131,8,6,0.42857142857142855,8,6,10,0.625,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,updateTimeFromNtfsField,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.updateTimeFromNtfsField(),8,29,0.7837837837837838,3,5,0.625,5,2,11,0.8461538461538461,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,lambda$findMatching$0,"(org.apache.commons.compress.archivers.zip.ZipShort, org.apache.commons.compress.archivers.zip.ZipExtraField) → boolean","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.lambda$findMatching$0(ZipShort,ZipExtraField)",5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry,<clinit>,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<clinit>(),0,8,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/DefaultBackingStoreSupplier,<init>,(java.nio.file.Path) → void,org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier.<init>(Path),11,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/DefaultBackingStoreSupplier,get,() → org.apache.commons.compress.parallel.ScatterGatherBackingStore,org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier.get(),33,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X7875_NewUnix,trimLeadingZeroesForceMinLength,(byte[]) → byte[],org.apache.commons.compress.archivers.zip.X7875_NewUnix.trimLeadingZeroesForceMinLength(byte[]),55,0,0.0,6,0,0.0,4,12,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X7875_NewUnix,<init>,() → void,org.apache.commons.compress.archivers.zip.X7875_NewUnix.<init>(),0,8,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X7875_NewUnix,clone,() → java.lang.Object,org.apache.commons.compress.archivers.zip.X7875_NewUnix.clone(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X7875_NewUnix,equals,(java.lang.Object) → boolean,org.apache.commons.compress.archivers.zip.X7875_NewUnix.equals(Object),29,0,0.0,8,0,0.0,5,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X7875_NewUnix,getCentralDirectoryData,() → byte[],org.apache.commons.compress.archivers.zip.X7875_NewUnix.getCentralDirectoryData(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X7875_NewUnix,getCentralDirectoryLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.X7875_NewUnix.getCentralDirectoryLength(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X7875_NewUnix,getGID,() → long,org.apache.commons.compress.archivers.zip.X7875_NewUnix.getGID(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X7875_NewUnix,getHeaderId,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.X7875_NewUnix.getHeaderId(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X7875_NewUnix,getLocalFileDataData,() → byte[],org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataData(),88,0,0.0,12,0,0.0,7,21,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X7875_NewUnix,getLocalFileDataLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataLength(),33,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X7875_NewUnix,getUID,() → long,org.apache.commons.compress.archivers.zip.X7875_NewUnix.getUID(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X7875_NewUnix,hashCode,() → int,org.apache.commons.compress.archivers.zip.X7875_NewUnix.hashCode(),21,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X7875_NewUnix,parseFromCentralDirectoryData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromCentralDirectoryData(byte[],int,int)",1,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X7875_NewUnix,parseFromLocalFileData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(byte[],int,int)",0,121,1.0,0,6,1.0,4,0,16,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X7875_NewUnix,reset,() → void,org.apache.commons.compress.archivers.zip.X7875_NewUnix.reset(),0,7,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X7875_NewUnix,setGID,(long) → void,org.apache.commons.compress.archivers.zip.X7875_NewUnix.setGID(long),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X7875_NewUnix,setUID,(long) → void,org.apache.commons.compress.archivers.zip.X7875_NewUnix.setUID(long),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X7875_NewUnix,toString,() → java.lang.String,org.apache.commons.compress.archivers.zip.X7875_NewUnix.toString(),15,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X7875_NewUnix,<clinit>,() → void,org.apache.commons.compress.archivers.zip.X7875_NewUnix.<clinit>(),0,14,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource,<clinit>,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveEntry$NameSource.<clinit>(),0,34,1.0,0,0,coverage not available since no branches,1,0,4,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature,<init>,(java.lang.String) → void,org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature.<init>(String),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature,toString,() → java.lang.String,org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature.toString(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException$Feature,<clinit>,() → void,org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature.<clinit>(),26,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest,createZipArchiveEntryRequest,"(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.parallel.InputStreamSupplier) → org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest","org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest,<init>,"(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.parallel.InputStreamSupplier) → void","org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.<init>(ZipArchiveEntry,InputStreamSupplier)",13,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest,getMethod,() → int,org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getMethod(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest,getPayloadStream,() → java.io.InputStream,org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getPayloadStream(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest,getZipArchiveEntry,() → org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getZipArchiveEntry(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/JarMarker,getInstance,() → org.apache.commons.compress.archivers.zip.JarMarker,org.apache.commons.compress.archivers.zip.JarMarker.getInstance(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/JarMarker,<init>,() → void,org.apache.commons.compress.archivers.zip.JarMarker.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/JarMarker,getCentralDirectoryData,() → byte[],org.apache.commons.compress.archivers.zip.JarMarker.getCentralDirectoryData(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/JarMarker,getCentralDirectoryLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.JarMarker.getCentralDirectoryLength(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/JarMarker,getHeaderId,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.JarMarker.getHeaderId(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/JarMarker,getLocalFileDataData,() → byte[],org.apache.commons.compress.archivers.zip.JarMarker.getLocalFileDataData(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/JarMarker,getLocalFileDataLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.JarMarker.getLocalFileDataLength(),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/JarMarker,parseFromCentralDirectoryData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.JarMarker.parseFromCentralDirectoryData(byte[],int,int)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/JarMarker,parseFromLocalFileData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.JarMarker.parseFromLocalFileData(byte[],int,int)",8,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/JarMarker,<clinit>,() → void,org.apache.commons.compress.archivers.zip.JarMarker.<clinit>(),0,15,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream$CurrentEntry,<init>,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(ZipArchiveEntry),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/GeneralPurposeBit,parse,"(byte[], int) → org.apache.commons.compress.archivers.zip.GeneralPurposeBit","org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(byte[],int)",64,0,0.0,12,0,0.0,7,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/GeneralPurposeBit,<init>,() → void,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/GeneralPurposeBit,clone,() → java.lang.Object,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.clone(),10,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/GeneralPurposeBit,encode,() → byte[],org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(),9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/GeneralPurposeBit,encode,"(byte[], int) → void","org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(byte[],int)",31,0,0.0,8,0,0.0,5,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/GeneralPurposeBit,equals,(java.lang.Object) → boolean,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.equals(Object),32,0,0.0,10,0,0.0,6,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/GeneralPurposeBit,getNumberOfShannonFanoTrees,() → int,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getNumberOfShannonFanoTrees(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/GeneralPurposeBit,getSlidingDictionarySize,() → int,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getSlidingDictionarySize(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/GeneralPurposeBit,hashCode,() → int,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.hashCode(),36,0,0.0,8,0,0.0,5,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/GeneralPurposeBit,useDataDescriptor,(boolean) → void,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useDataDescriptor(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/GeneralPurposeBit,useEncryption,(boolean) → void,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useEncryption(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/GeneralPurposeBit,usesDataDescriptor,() → boolean,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesDataDescriptor(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/GeneralPurposeBit,usesEncryption,() → boolean,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesEncryption(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/GeneralPurposeBit,usesStrongEncryption,() → boolean,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesStrongEncryption(),10,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/GeneralPurposeBit,useStrongEncryption,(boolean) → void,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useStrongEncryption(boolean),9,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/GeneralPurposeBit,usesUTF8ForNames,() → boolean,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesUTF8ForNames(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/GeneralPurposeBit,useUTF8ForNames,(boolean) → void,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useUTF8ForNames(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0016_CertificateIdForCentralDirectory,<init>,() → void,org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.<init>(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0016_CertificateIdForCentralDirectory,getHashAlgorithm,() → org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm,org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.getHashAlgorithm(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0016_CertificateIdForCentralDirectory,getRecordCount,() → int,org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.getRecordCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0016_CertificateIdForCentralDirectory,parseFromCentralDirectoryData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.parseFromCentralDirectoryData(byte[],int,int)",18,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X0016_CertificateIdForCentralDirectory,<clinit>,() → void,org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.<clinit>(),0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics,<init>,(java.io.InputStream) → void,org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics,<init>,"(java.io.InputStream, java.util.zip.Inflater) → void","org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream,Inflater)",5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics,<init>,"(java.io.InputStream, java.util.zip.Inflater, int) → void","org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream,Inflater,int)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics,fill,() → void,org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.fill(),12,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics,getCompressedCount,() → long,org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.getCompressedCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics,getUncompressedCount,() → long,org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.getUncompressedCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics,read,() → int,org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.read(),14,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/InflaterInputStreamWithStatistics,read,"(byte[], int, int) → int","org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.read(byte[],int,int)",18,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile$Builder,<init>,() → void,org.apache.commons.compress.archivers.zip.ZipFile$Builder.<init>(),17,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile$Builder,get,() → org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile$Builder.get(),73,0,0.0,8,0,0.0,5,14,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile$Builder,setIgnoreLocalFileHeader,(boolean) → org.apache.commons.compress.archivers.zip.ZipFile$Builder,org.apache.commons.compress.archivers.zip.ZipFile$Builder.setIgnoreLocalFileHeader(boolean),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile$Builder,setMaxNumberOfDisks,(long) → org.apache.commons.compress.archivers.zip.ZipFile$Builder,org.apache.commons.compress.archivers.zip.ZipFile$Builder.setMaxNumberOfDisks(long),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile$Builder,setSeekableByteChannel,(java.nio.channels.SeekableByteChannel) → org.apache.commons.compress.archivers.zip.ZipFile$Builder,org.apache.commons.compress.archivers.zip.ZipFile$Builder.setSeekableByteChannel(SeekableByteChannel),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile$Builder,setUseUnicodeExtraFields,(boolean) → org.apache.commons.compress.archivers.zip.ZipFile$Builder,org.apache.commons.compress.archivers.zip.ZipFile$Builder.setUseUnicodeExtraFields(boolean),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile$Builder,<clinit>,() → void,org.apache.commons.compress.archivers.zip.ZipFile$Builder.<clinit>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipMethod,getMethodByCode,(int) → org.apache.commons.compress.archivers.zip.ZipMethod,org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(int),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipMethod,isZstd,(int) → boolean,org.apache.commons.compress.archivers.zip.ZipMethod.isZstd(int),0,12,1.0,0,4,1.0,3,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipMethod,<init>,"(java.lang.String, int) → void","org.apache.commons.compress.archivers.zip.ZipMethod.<init>(String,int)",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipMethod,<init>,"(java.lang.String, int, int) → void","org.apache.commons.compress.archivers.zip.ZipMethod.<init>(String,int,int)",0,8,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipMethod,getCode,() → int,org.apache.commons.compress.archivers.zip.ZipMethod.getCode(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipMethod,<clinit>,() → void,org.apache.commons.compress.archivers.zip.ZipMethod.<clinit>(),0,243,1.0,0,0,coverage not available since no branches,1,0,24,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEncodingHelper,<init>,() → void,org.apache.commons.compress.archivers.zip.ZipEncodingHelper.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEncodingHelper,getZipEncoding,(java.nio.charset.Charset) → org.apache.commons.compress.archivers.zip.ZipEncoding,org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(Charset),0,9,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEncodingHelper,getZipEncoding,(java.lang.String) → org.apache.commons.compress.archivers.zip.ZipEncoding,org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(String),10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEncodingHelper,growBufferBy,"(java.nio.ByteBuffer, int) → java.nio.ByteBuffer","org.apache.commons.compress.archivers.zip.ZipEncodingHelper.growBufferBy(ByteBuffer,int)",20,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEncodingHelper,isUTF8,(java.nio.charset.Charset) → boolean,org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(Charset),0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEncodingHelper,isUTF8,(java.lang.String) → boolean,org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(String),8,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEncodingHelper,isUTF8Alias,(java.lang.String) → boolean,org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8Alias(String),0,16,1.0,1,3,0.75,3,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEncodingHelper,toSafeCharset,(java.lang.String) → java.nio.charset.Charset,org.apache.commons.compress.archivers.zip.ZipEncodingHelper.toSafeCharset(String),9,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEncodingHelper,lambda$isUTF8Alias$0,"(java.lang.String, java.lang.String) → boolean","org.apache.commons.compress.archivers.zip.ZipEncodingHelper.lambda$isUTF8Alias$0(String,String)",0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipEncodingHelper,<clinit>,() → void,org.apache.commons.compress.archivers.zip.ZipEncodingHelper.<clinit>(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField,<init>,() → void,org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField,<init>,"(java.lang.String, byte[]) → void","org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[])",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField,<init>,"(java.lang.String, byte[], int, int) → void","org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[],int,int)",21,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField,assembleData,() → void,org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.assembleData(),37,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField,getCentralDirectoryData,() → byte[],org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryData(),19,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField,getCentralDirectoryLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryLength(),17,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField,getLocalFileDataData,() → byte[],org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getLocalFileDataData(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField,getLocalFileDataLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getLocalFileDataLength(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField,getNameCRC32,() → long,org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getNameCRC32(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField,getUnicodeName,() → byte[],org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getUnicodeName(),12,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField,parseFromCentralDirectoryData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromCentralDirectoryData(byte[],int,int)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField,parseFromLocalFileData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(byte[],int,int)",57,0,0.0,4,0,0.0,3,10,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField,setNameCRC32,(long) → void,org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.setNameCRC32(long),7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField,setUnicodeName,(byte[]) → void,org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.setUnicodeName(byte[]),16,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator$1,<init>,(org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator) → void,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator$1.<init>(ParallelScatterZipCreator),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator$1,initialValue,() → org.apache.commons.compress.archivers.zip.ScatterZipOutputStream,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator$1.initialValue(),21,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment,<init>,"(byte[], byte[]) → void","org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment.<init>(byte[],byte[])",9,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream,<init>,"(long, long, java.nio.channels.FileChannel) → void","org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream.<init>(long,long,FileChannel)",8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream,read,"(long, java.nio.ByteBuffer) → int","org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream.read(long,ByteBuffer)",11,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry$1,<init>,"(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) → void","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$1.<init>(ZipArchiveEntry,ExtraFieldParsingBehavior)",9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry$1,createExtraField,(org.apache.commons.compress.archivers.zip.ZipShort) → org.apache.commons.compress.archivers.zip.ZipExtraField,org.apache.commons.compress.archivers.zip.ZipArchiveEntry$1.createExtraField(ZipShort),16,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry$1,fill,"(org.apache.commons.compress.archivers.zip.ZipExtraField, byte[], int, int, boolean) → org.apache.commons.compress.archivers.zip.ZipExtraField","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$1.fill(ZipExtraField,byte[],int,int,boolean)",9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry$1,onUnparseableExtraField,"(byte[], int, int, boolean, int) → org.apache.commons.compress.archivers.zip.ZipExtraField","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$1.onUnparseableExtraField(byte[],int,int,boolean,int)",9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor$OutputStreamCompressor,<init>,"(java.util.zip.Deflater, java.io.OutputStream) → void","org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor.<init>(Deflater,OutputStream)",7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor$OutputStreamCompressor,writeOut,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor.writeOut(byte[],int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/FileRandomAccessOutputStream,<init>,(java.nio.channels.FileChannel) → void,org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.<init>(FileChannel),9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/FileRandomAccessOutputStream,<init>,(java.nio.file.Path) → void,org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.<init>(Path),18,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/FileRandomAccessOutputStream,<init>,"(java.nio.file.Path, java.nio.file.OpenOption[]) → void","org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.<init>(Path,OpenOption[])",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/FileRandomAccessOutputStream,channel,() → java.nio.channels.FileChannel,org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.channel(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/FileRandomAccessOutputStream,close,() → void,org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.close(),8,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/FileRandomAccessOutputStream,position,() → long,org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.position(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/FileRandomAccessOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.write(byte[],int,int)",15,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/FileRandomAccessOutputStream,writeAll,"(byte[], int, int, long) → void","org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.writeAll(byte[],int,int,long)",16,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor,<init>,"(java.util.zip.Deflater, java.nio.channels.SeekableByteChannel) → void","org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor.<init>(Deflater,SeekableByteChannel)",7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor$SeekableByteChannelCompressor,writeOut,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor.writeOut(byte[],int,int)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils$1,<init>,(org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField) → void,org.apache.commons.compress.archivers.zip.ExtraFieldUtils$1.<init>(UnparseableExtraField),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils$1,createExtraField,(org.apache.commons.compress.archivers.zip.ZipShort) → org.apache.commons.compress.archivers.zip.ZipExtraField,org.apache.commons.compress.archivers.zip.ExtraFieldUtils$1.createExtraField(ZipShort),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils$1,fill,"(org.apache.commons.compress.archivers.zip.ZipExtraField, byte[], int, int, boolean) → org.apache.commons.compress.archivers.zip.ZipExtraField","org.apache.commons.compress.archivers.zip.ExtraFieldUtils$1.fill(ZipExtraField,byte[],int,int,boolean)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils$1,onUnparseableExtraField,"(byte[], int, int, boolean, int) → org.apache.commons.compress.archivers.zip.ZipExtraField","org.apache.commons.compress.archivers.zip.ExtraFieldUtils$1.onUnparseableExtraField(byte[],int,int,boolean,int)",9,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor$ScatterGatherBackingStoreCompressor,<init>,"(java.util.zip.Deflater, org.apache.commons.compress.parallel.ScatterGatherBackingStore) → void","org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor.<init>(Deflater,ScatterGatherBackingStore)",7,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor$ScatterGatherBackingStoreCompressor,writeOut,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor.writeOut(byte[],int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,checkSig,"(byte[], byte[]) → boolean","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.checkSig(byte[],byte[])",19,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,matches,"(byte[], int) → boolean","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byte[],int)",27,0,0.0,10,0,0.0,6,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,<init>,(java.io.InputStream) → void,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,<init>,"(java.io.InputStream, java.lang.String) → void","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,<init>,"(java.io.InputStream, java.lang.String, boolean) → void","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,<init>,"(java.io.InputStream, java.lang.String, boolean, boolean) → void","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,<init>,"(java.io.InputStream, java.lang.String, boolean, boolean, boolean) → void","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean,boolean)",62,0,0.0,0,0,coverage not available since no branches,1,15,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,bufferContainsSignature,"(java.io.ByteArrayOutputStream, int, int, int) → boolean","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(ByteArrayOutputStream,int,int,int)",139,0,0.0,24,0,0.0,13,15,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,cacheBytesRead,"(java.io.ByteArrayOutputStream, int, int, int) → int","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(ByteArrayOutputStream,int,int,int)",40,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,canReadEntryData,(org.apache.commons.compress.archivers.ArchiveEntry) → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.canReadEntryData(ArchiveEntry),23,0,0.0,8,0,0.0,5,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,close,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(),13,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,closeEntry,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(),102,0,0.0,18,0,0.0,10,22,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,currentEntryHasOutstandingBytes,() → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.currentEntryHasOutstandingBytes(),17,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,drainCurrentEntryData,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.drainCurrentEntryData(),58,0,0.0,4,0,0.0,3,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,fill,() → int,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.fill(),39,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,findEocdRecord,() → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.findEocdRecord(),74,0,0.0,18,0,0.0,10,25,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,getBytesInflated,() → long,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getBytesInflated(),25,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,getCompressedCount,() → long,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getCompressedCount(),41,0,0.0,12,0,0.0,7,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,getNextEntry,() → org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextEntry(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,getNextZipEntry,() → org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(),402,0,0.0,44,0,0.0,25,92,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,getUncompressedCount,() → long,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getUncompressedCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,isApkSigningBlock,(byte[]) → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isApkSigningBlock(byte[]),84,0,0.0,8,0,0.0,5,21,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,isFirstByteOfEocdSig,(int) → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(int),9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,processZip64Extra,"(org.apache.commons.compress.archivers.zip.ZipLong, org.apache.commons.compress.archivers.zip.ZipLong) → void","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(ZipLong,ZipLong)",127,0,0.0,30,0,0.0,16,26,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,pushback,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(byte[],int,int)",27,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,read,"(byte[], int, int) → int","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(byte[],int,int)",150,0,0.0,36,0,0.0,19,28,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,readDataDescriptor,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(),131,0,0.0,14,0,0.0,8,28,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,readDeflated,"(byte[], int, int) → int","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated(byte[],int,int)",33,0,0.0,8,0,0.0,5,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,readFirstLocalFileHeader,() → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFirstLocalFileHeader(),168,0,0.0,22,0,0.0,12,30,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,readFromInflater,"(byte[], int, int) → int","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(byte[],int,int)",52,0,0.0,10,0,0.0,6,13,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,readFully,(byte[]) → void,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(byte[]),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,readFully,"(byte[], int) → void","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(byte[],int)",23,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,readOneByte,() → int,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte(),12,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,readRange,(int) → byte[],org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readRange(int),19,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,readStored,"(byte[], int, int) → int","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(byte[],int,int)",122,0,0.0,12,0,0.0,7,22,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,readStoredEntry,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStoredEntry(),102,0,0.0,14,0,0.0,8,22,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,realSkip,(long) → void,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(long),53,0,0.0,8,0,0.0,5,12,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,setExtraFieldSupport,(java.util.function.Function) → org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.setExtraFieldSupport(Function),2,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,skip,(long) → long,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(long),52,0,0.0,8,0,0.0,5,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,skipRemainderOfArchive,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive(),40,0,0.0,6,0,0.0,4,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,supportsCompressedSizeFor,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsCompressedSizeFor(ZipArchiveEntry),35,0,0.0,16,0,0.0,9,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,supportsDataDescriptorFor,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsDataDescriptorFor(ZipArchiveEntry),30,0,0.0,14,0,0.0,8,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveInputStream,<clinit>,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<clinit>(),0,80,1.0,0,0,coverage not available since no branches,1,0,5,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/SeekableChannelRandomAccessOutputStream,<init>,(java.nio.channels.SeekableByteChannel) → void,org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.<init>(SeekableByteChannel),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/SeekableChannelRandomAccessOutputStream,close,() → void,org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.close(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/SeekableChannelRandomAccessOutputStream,position,() → long,org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.position(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/SeekableChannelRandomAccessOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.write(byte[],int,int)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/SeekableChannelRandomAccessOutputStream,writeAll,"(byte[], int, int, long) → void","org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.writeAll(byte[],int,int,long)",22,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipIoUtil,writeAll,"(java.nio.channels.FileChannel, java.nio.ByteBuffer, long) → void","org.apache.commons.compress.archivers.zip.ZipIoUtil.writeAll(FileChannel,ByteBuffer,long)",42,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipIoUtil,writeAll,"(java.nio.channels.WritableByteChannel, java.nio.ByteBuffer) → void","org.apache.commons.compress.archivers.zip.ZipIoUtil.writeAll(WritableByteChannel,ByteBuffer)",34,0,0.0,4,0,0.0,3,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator,<init>,() → void,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator,<init>,(java.util.concurrent.ExecutorService) → void,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator,<init>,"(java.util.concurrent.ExecutorService, org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) → void","org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService,ScatterGatherBackingStoreSupplier)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator,<init>,"(java.util.concurrent.ExecutorService, org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier, int) → void","org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService,ScatterGatherBackingStoreSupplier,int)",44,0,0.0,6,0,0.0,4,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator,addArchiveEntry,"(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.parallel.InputStreamSupplier) → void","org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntry,InputStreamSupplier)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator,addArchiveEntry,(org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier) → void,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntryRequestSupplier),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator,closeAll,() → void,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.closeAll(),15,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator,createCallable,"(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.parallel.InputStreamSupplier) → java.util.concurrent.Callable","org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntry,InputStreamSupplier)",26,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator,createCallable,(org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier) → java.util.concurrent.Callable,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntryRequestSupplier),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator,createDeferred,(org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) → org.apache.commons.compress.archivers.zip.ScatterZipOutputStream,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createDeferred(ScatterGatherBackingStoreSupplier),14,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator,getStatisticsMessage,() → org.apache.commons.compress.archivers.zip.ScatterStatistics,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.getStatisticsMessage(),14,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator,submit,(java.util.concurrent.Callable) → void,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submit(Callable),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator,submitStreamAwareCallable,(java.util.concurrent.Callable) → void,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submitStreamAwareCallable(Callable),9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator,writeTo,(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream) → void,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(ZipArchiveOutputStream),67,0,0.0,6,0,0.0,4,16,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator,lambda$submit$2,(java.util.concurrent.Callable) → org.apache.commons.compress.archivers.zip.ScatterZipOutputStream,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.lambda$submit$2(Callable),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator,lambda$createCallable$1,(org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier) → org.apache.commons.compress.archivers.zip.ScatterZipOutputStream,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.lambda$createCallable$1(ZipArchiveEntryRequestSupplier),11,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator,lambda$createCallable$0,(org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest) → org.apache.commons.compress.archivers.zip.ScatterZipOutputStream,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.lambda$createCallable$0(ZipArchiveEntryRequest),10,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/RandomAccessOutputStream,<init>,() → void,org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.<init>(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/RandomAccessOutputStream,write,(int) → void,org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.write(int),10,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/RandomAccessOutputStream,writeAll,"(byte[], long) → void","org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],long)",8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,<init>,(java.io.File) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(File),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,<init>,"(java.io.File, long) → void","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(File,long)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,<init>,(java.io.OutputStream) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(OutputStream),67,0,0.0,0,0,coverage not available since no branches,1,18,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,<init>,"(java.nio.file.Path, long) → void","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Path,long)",72,0,0.0,0,0,coverage not available since no branches,1,18,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,<init>,"(java.nio.file.Path, java.nio.file.OpenOption[]) → void","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Path,OpenOption[])",80,0,0.0,2,0,0.0,2,18,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,<init>,(java.nio.channels.SeekableByteChannel) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(SeekableByteChannel),71,0,0.0,0,0,coverage not available since no branches,1,18,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,addRawArchiveEntry,"(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, java.io.InputStream) → void","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(ZipArchiveEntry,InputStream)",43,0,0.0,8,0,0.0,5,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,addUnicodeExtraFields,"(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, boolean, java.nio.ByteBuffer) → void","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer)",63,0,0.0,12,0,0.0,7,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,canWriteEntryData,(org.apache.commons.compress.archivers.ArchiveEntry) → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(ArchiveEntry),25,0,0.0,8,0,0.0,5,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,checkIfNeedsZip64,(org.apache.commons.compress.archivers.zip.Zip64Mode) → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Zip64Mode),22,0,0.0,4,0,0.0,3,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,close,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(),8,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,closeArchiveEntry,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(),43,0,0.0,0,0,coverage not available since no branches,1,10,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,closeCopiedEntry,(boolean) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(boolean),25,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,closeEntry,"(boolean, boolean) → void","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(boolean,boolean)",20,0,0.0,6,0,0.0,4,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,copyFromZipInputStream,"(java.io.InputStream, boolean) → void","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(InputStream,boolean)",38,0,0.0,6,0,0.0,4,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,createArchiveEntry,"(java.io.File, java.lang.String) → org.apache.commons.compress.archivers.zip.ZipArchiveEntry","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(File,String)",14,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,createArchiveEntry,"(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) → org.apache.commons.compress.archivers.zip.ZipArchiveEntry","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])",16,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,createCentralFileHeader,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → byte[],org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry),68,0,0.0,18,0,0.0,10,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,createCentralFileHeader,"(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, java.nio.ByteBuffer, org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData, boolean) → byte[]","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean)",266,0,0.0,28,0,0.0,15,46,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,createLocalFileHeader,"(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, java.nio.ByteBuffer, boolean, boolean, long) → byte[]","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)",271,0,0.0,40,0,0.0,21,45,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,deflate,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.deflate(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,destroy,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy(),6,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,finish,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish(),90,0,0.0,8,0,0.0,5,24,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,flush,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flush(),7,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,flushDeflater,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater(),10,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,getBytesWritten,() → long,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getBytesWritten(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,getEffectiveZip64Mode,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → org.apache.commons.compress.archivers.zip.Zip64Mode,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(ZipArchiveEntry),22,0,0.0,8,0,0.0,5,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,getEncoding,() → java.lang.String,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEncoding(),9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,getEntryEncoding,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → org.apache.commons.compress.archivers.zip.ZipEncoding,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(ZipArchiveEntry),16,0,0.0,4,0,0.0,3,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,getGeneralPurposeBits,"(boolean, boolean) → org.apache.commons.compress.archivers.zip.GeneralPurposeBit","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(boolean,boolean)",21,0,0.0,6,0,0.0,4,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,getName,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → java.nio.ByteBuffer,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(ZipArchiveEntry),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,getZip64Extra,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(ZipArchiveEntry),39,0,0.0,8,0,0.0,5,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,handleSizesAndCrc,"(long, long, org.apache.commons.compress.archivers.zip.Zip64Mode) → boolean","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode)",135,0,0.0,12,0,0.0,7,18,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,handleZip64Extra,"(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, long, boolean) → void","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(ZipArchiveEntry,long,boolean)",92,0,0.0,24,0,0.0,13,15,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,hasZip64Extra,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(ZipArchiveEntry),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,isSeekable,() → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,isTooLargeForZip32,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLargeForZip32(ZipArchiveEntry),14,0,0.0,4,0,0.0,3,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,isZip64Required,"(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.Zip64Mode) → boolean","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(ZipArchiveEntry,Zip64Mode)",14,0,0.0,6,0,0.0,4,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,preClose,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose(),26,0,0.0,6,0,0.0,4,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,putArchiveEntry,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ZipArchiveEntry),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,putArchiveEntry,"(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, boolean) → void","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ZipArchiveEntry,boolean)",132,0,0.0,16,0,0.0,9,25,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,rewriteSizesAndCrc,(boolean) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(boolean),173,0,0.0,12,0,0.0,7,27,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,setComment,(java.lang.String) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setComment(String),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,setCreateUnicodeExtraFields,(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setCreateUnicodeExtraFields(UnicodeExtraFieldPolicy),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,setDefaults,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(ZipArchiveEntry),17,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,setEncoding,(java.nio.charset.Charset) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Charset),17,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,setEncoding,(java.lang.String) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(String),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,setFallbackToUTF8,(boolean) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setFallbackToUTF8(boolean),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,setLevel,(int) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(int),30,0,0.0,6,0,0.0,4,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,setMethod,(int) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setMethod(int),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,setUseLanguageEncodingFlag,(boolean) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(boolean),12,0,0.0,4,0,0.0,3,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,setUseZip64,(org.apache.commons.compress.archivers.zip.Zip64Mode) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(Zip64Mode),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,shouldAddZip64Extra,"(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.Zip64Mode) → boolean","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode)",32,0,0.0,14,0,0.0,8,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,shouldUseZip64EOCD,() → boolean,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldUseZip64EOCD(),50,0,0.0,14,0,0.0,8,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,usesDataDescriptor,"(int, boolean) → boolean","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(int,boolean)",13,0,0.0,6,0,0.0,4,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,validateIfZip64IsNeededInEOCD,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateIfZip64IsNeededInEOCD(),82,0,0.0,16,0,0.0,9,19,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,validateSizeInformation,(org.apache.commons.compress.archivers.zip.Zip64Mode) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Zip64Mode),67,0,0.0,14,0,0.0,8,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,versionNeededToExtract,"(int, boolean, boolean) → int","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(int,boolean,boolean)",12,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,versionNeededToExtractMethod,(int) → int,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtractMethod(int),7,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,write,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(byte[],int,int)",27,0,0.0,2,0,0.0,2,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,writeCentralDirectoryEnd,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(),111,0,0.0,8,0,0.0,5,22,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,writeCentralDirectoryInChunks,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks(),43,0,0.0,4,0,0.0,3,12,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,writeCentralFileHeader,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(ZipArchiveEntry),8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,writeCounted,(byte[]) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted(byte[]),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,writeDataDescriptor,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(ZipArchiveEntry),41,0,0.0,4,0,0.0,3,10,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,writeLocalFileHeader,(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(ZipArchiveEntry),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,writeLocalFileHeader,"(org.apache.commons.compress.archivers.zip.ZipArchiveEntry, boolean) → void","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(ZipArchiveEntry,boolean)",79,0,0.0,4,0,0.0,3,15,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,writeOut,(byte[]) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(byte[]),8,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,writeOut,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(byte[],int,int)",7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,writePreamble,(byte[]) → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writePreamble(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,writePreamble,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writePreamble(byte[],int,int)",15,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,writeZip64CentralDirectory,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory(),162,0,0.0,18,0,0.0,10,41,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,lambda$createCentralFileHeader$0,"(java.lang.Integer, java.lang.Integer) → java.lang.Integer","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.lambda$createCentralFileHeader$0(Integer,Integer)",10,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream,<clinit>,() → void,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<clinit>(),0,54,1.0,0,0,coverage not available since no branches,1,0,10,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnrecognizedExtraField,<init>,() → void,org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnrecognizedExtraField,getCentralDirectoryData,() → byte[],org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryData(),4,6,0.6,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnrecognizedExtraField,getCentralDirectoryLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryLength(),13,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnrecognizedExtraField,getHeaderId,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getHeaderId(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnrecognizedExtraField,getLocalFileDataData,() → byte[],org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataData(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnrecognizedExtraField,getLocalFileDataLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataLength(),12,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnrecognizedExtraField,parseFromCentralDirectoryData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromCentralDirectoryData(byte[],int,int)",17,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnrecognizedExtraField,parseFromLocalFileData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromLocalFileData(byte[],int,int)",9,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnrecognizedExtraField,setCentralDirectoryData,(byte[]) → void,org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setCentralDirectoryData(byte[]),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnrecognizedExtraField,setHeaderId,(org.apache.commons.compress.archivers.zip.ZipShort) → void,org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setHeaderId(ZipShort),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnrecognizedExtraField,setLocalFileDataData,(byte[]) → void,org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setLocalFileDataData(byte[]),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField,<init>,(int) → void,org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.<init>(int),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField,getKey,() → int,org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.getKey(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField,onUnparseableExtraField,"(byte[], int, int, boolean, int) → org.apache.commons.compress.archivers.zip.ZipExtraField","org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.onUnparseableExtraField(byte[],int,int,boolean,int)",61,0,0.0,6,0,0.0,5,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExtraFieldUtils$UnparseableExtraField,<clinit>,() → void,org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.<clinit>(),0,16,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile$1,<init>,"(org.apache.commons.compress.archivers.zip.ZipFile, java.io.InputStream, java.util.zip.Inflater, java.util.zip.Inflater) → void","org.apache.commons.compress.archivers.zip.ZipFile$1.<init>(ZipFile,InputStream,Inflater,Inflater)",11,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipFile$1,close,() → void,org.apache.commons.compress.archivers.zip.ZipFile$1.close(),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipLong,getBytes,(long) → byte[],org.apache.commons.compress.archivers.zip.ZipLong.getBytes(long),0,9,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipLong,getValue,(byte[]) → long,org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[]),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipLong,getValue,"(byte[], int) → long","org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int)",0,5,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipLong,putLong,"(long, byte[], int) → void","org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int)",0,6,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipLong,<init>,(byte[]) → void,org.apache.commons.compress.archivers.zip.ZipLong.<init>(byte[]),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipLong,<init>,"(byte[], int) → void","org.apache.commons.compress.archivers.zip.ZipLong.<init>(byte[],int)",0,8,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipLong,<init>,(int) → void,org.apache.commons.compress.archivers.zip.ZipLong.<init>(int),0,7,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipLong,<init>,(long) → void,org.apache.commons.compress.archivers.zip.ZipLong.<init>(long),0,6,1.0,0,0,coverage not available since no branches,1,0,3,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipLong,clone,() → java.lang.Object,org.apache.commons.compress.archivers.zip.ZipLong.clone(),9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipLong,equals,(java.lang.Object) → boolean,org.apache.commons.compress.archivers.zip.ZipLong.equals(Object),16,0,0.0,4,0,0.0,3,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipLong,getBytes,() → byte[],org.apache.commons.compress.archivers.zip.ZipLong.getBytes(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipLong,getIntValue,() → int,org.apache.commons.compress.archivers.zip.ZipLong.getIntValue(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipLong,getValue,() → long,org.apache.commons.compress.archivers.zip.ZipLong.getValue(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipLong,hashCode,() → int,org.apache.commons.compress.archivers.zip.ZipLong.hashCode(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipLong,putLong,"(byte[], int) → void","org.apache.commons.compress.archivers.zip.ZipLong.putLong(byte[],int)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipLong,toString,() → java.lang.String,org.apache.commons.compress.archivers.zip.ZipLong.toString(),10,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipLong,<clinit>,() → void,org.apache.commons.compress.archivers.zip.ZipLong.<clinit>(),0,31,1.0,0,0,coverage not available since no branches,1,0,6,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm,getAlgorithmByCode,(int) → org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm,org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode(int),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm,<init>,"(java.lang.String, int, int) → void","org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm.<init>(String,int,int)",8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm,getCode,() → int,org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm.getCode(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/PKWareExtraHeader$EncryptionAlgorithm,<clinit>,() → void,org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm.<clinit>(),144,0,0.0,2,0,0.0,2,16,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry,<init>,"(org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest, long, long, long) → void","org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry.<init>(ZipArchiveEntryRequest,long,long,long)",15,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ScatterZipOutputStream$CompressedEntry,transferToArchiveEntry,() → org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry.transferToArchiveEntry(),23,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException,<init>,(org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature) → void,org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(Feature),19,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException,<init>,"(org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature, org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → void","org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(Feature,ZipArchiveEntry)",22,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException,<init>,"(org.apache.commons.compress.archivers.zip.ZipMethod, org.apache.commons.compress.archivers.zip.ZipArchiveEntry) → void","org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(ZipMethod,ZipArchiveEntry)",28,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException,getEntry,() → org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.getEntry(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException,getFeature,() → org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature,org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.getFeature(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry$ExtraFieldParsingMode$1,<init>,"(java.lang.String, int, org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField) → void","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode$1.<init>(String,int,UnparseableExtraField)",0,7,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry$ExtraFieldParsingMode$1,fill,"(org.apache.commons.compress.archivers.zip.ZipExtraField, byte[], int, int, boolean) → org.apache.commons.compress.archivers.zip.ZipExtraField","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode$1.fill(ZipExtraField,byte[],int,int,boolean)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExplodingInputStream,<init>,"(int, int, java.io.InputStream) → void","org.apache.commons.compress.archivers.zip.ExplodingInputStream.<init>(int,int,InputStream)",43,0,0.0,8,0,0.0,5,11,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExplodingInputStream,close,() → void,org.apache.commons.compress.archivers.zip.ExplodingInputStream.close(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExplodingInputStream,fillBuffer,() → void,org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer(),104,0,0.0,18,0,0.0,10,27,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExplodingInputStream,getCompressedCount,() → long,org.apache.commons.compress.archivers.zip.ExplodingInputStream.getCompressedCount(),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExplodingInputStream,getUncompressedCount,() → long,org.apache.commons.compress.archivers.zip.ExplodingInputStream.getUncompressedCount(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExplodingInputStream,init,() → void,org.apache.commons.compress.archivers.zip.ExplodingInputStream.init(),47,0,0.0,4,0,0.0,3,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ExplodingInputStream,read,() → int,org.apache.commons.compress.archivers.zip.ExplodingInputStream.read(),29,0,0.0,4,0,0.0,3,9,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry$ExtraFieldParsingMode$2,<init>,"(java.lang.String, int, org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField) → void","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode$2.<init>(String,int,UnparseableExtraField)",0,7,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/ZipArchiveEntry$ExtraFieldParsingMode$2,fill,"(org.apache.commons.compress.archivers.zip.ZipExtraField, byte[], int, int, boolean) → org.apache.commons.compress.archivers.zip.ZipExtraField","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode$2.fill(ZipExtraField,byte[],int,int,boolean)",7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,dateToZipLong,(java.util.Date) → org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.dateToZipLong(Date),10,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,fileTimeToZipLong,(java.nio.file.attribute.FileTime) → org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.fileTimeToZipLong(FileTime),2,6,0.75,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,unixTimeToFileTime,(org.apache.commons.compress.archivers.zip.ZipLong) → java.nio.file.attribute.FileTime,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.unixTimeToFileTime(ZipLong),1,8,0.8888888888888888,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,unixTimeToZipLong,(long) → org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.unixTimeToZipLong(long),12,8,0.4,1,1,0.5,2,1,2,0.6666666666666666,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,zipLongToDate,(org.apache.commons.compress.archivers.zip.ZipLong) → java.util.Date,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.zipLongToDate(ZipLong),13,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,<init>,() → void,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.<init>(),0,3,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,clone,() → java.lang.Object,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.clone(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,equals,(java.lang.Object) → boolean,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.equals(Object),1,38,0.9743589743589743,4,6,0.6,6,0,5,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,getAccessFileTime,() → java.nio.file.attribute.FileTime,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessFileTime(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,getAccessJavaTime,() → java.util.Date,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessJavaTime(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,getAccessTime,() → org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessTime(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,getCentralDirectoryData,() → byte[],org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryData(),7,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,getCentralDirectoryLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryLength(),2,10,0.8333333333333334,1,1,0.5,2,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,getCreateFileTime,() → java.nio.file.attribute.FileTime,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateFileTime(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,getCreateJavaTime,() → java.util.Date,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateJavaTime(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,getCreateTime,() → org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateTime(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,getFlags,() → byte,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getFlags(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,getHeaderId,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getHeaderId(),0,2,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,getLocalFileDataData,() → byte[],org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataData(),40,40,0.5,7,3,0.3,6,6,10,0.625,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,getLocalFileDataLength,() → org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataLength(),10,22,0.6875,6,4,0.4,6,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,getModifyFileTime,() → java.nio.file.attribute.FileTime,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyFileTime(),0,4,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,getModifyJavaTime,() → java.util.Date,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyJavaTime(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,getModifyTime,() → org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyTime(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,hashCode,() → int,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.hashCode(),40,0,0.0,6,0,0.0,4,8,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,isBit0_modifyTimePresent,() → boolean,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit0_modifyTimePresent(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,isBit1_accessTimePresent,() → boolean,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit1_accessTimePresent(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,isBit2_createTimePresent,() → boolean,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit2_createTimePresent(),0,3,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,parseFromCentralDirectoryData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromCentralDirectoryData(byte[],int,int)",8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,parseFromLocalFileData,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(byte[],int,int)",90,0,0.0,14,0,0.0,8,18,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,reset,() → void,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.reset(),13,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,setAccessFileTime,(java.nio.file.attribute.FileTime) → void,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessFileTime(FileTime),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,setAccessJavaTime,(java.util.Date) → void,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessJavaTime(Date),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,setAccessTime,(org.apache.commons.compress.archivers.zip.ZipLong) → void,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessTime(ZipLong),0,25,1.0,0,4,1.0,3,0,4,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,setCreateFileTime,(java.nio.file.attribute.FileTime) → void,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateFileTime(FileTime),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,setCreateJavaTime,(java.util.Date) → void,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateJavaTime(Date),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,setCreateTime,(org.apache.commons.compress.archivers.zip.ZipLong) → void,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateTime(ZipLong),0,25,1.0,0,4,1.0,3,0,4,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,setFlags,(byte) → void,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(byte),0,34,1.0,0,6,1.0,4,0,5,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,setModifyFileTime,(java.nio.file.attribute.FileTime) → void,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyFileTime(FileTime),0,5,1.0,0,0,coverage not available since no branches,1,0,2,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,setModifyJavaTime,(java.util.Date) → void,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyJavaTime(Date),5,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,setModifyTime,(org.apache.commons.compress.archivers.zip.ZipLong) → void,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyTime(ZipLong),5,20,0.8,2,2,0.5,3,0,4,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,toString,() → java.lang.String,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.toString(),71,0,0.0,12,0,0.0,7,13,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp,<clinit>,() → void,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.<clinit>(),0,6,1.0,0,0,coverage not available since no branches,1,0,1,1.0,0,1,1.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,create,"(java.io.DataOutput, java.util.zip.Deflater) → org.apache.commons.compress.archivers.zip.StreamCompressor","org.apache.commons.compress.archivers.zip.StreamCompressor.create(DataOutput,Deflater)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,create,"(int, org.apache.commons.compress.parallel.ScatterGatherBackingStore) → org.apache.commons.compress.archivers.zip.StreamCompressor","org.apache.commons.compress.archivers.zip.StreamCompressor.create(int,ScatterGatherBackingStore)",12,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,create,(java.io.OutputStream) → org.apache.commons.compress.archivers.zip.StreamCompressor,org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream),8,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,create,"(java.io.OutputStream, java.util.zip.Deflater) → org.apache.commons.compress.archivers.zip.StreamCompressor","org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream,Deflater)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,create,(org.apache.commons.compress.parallel.ScatterGatherBackingStore) → org.apache.commons.compress.archivers.zip.StreamCompressor,org.apache.commons.compress.archivers.zip.StreamCompressor.create(ScatterGatherBackingStore),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,create,"(java.nio.channels.SeekableByteChannel, java.util.zip.Deflater) → org.apache.commons.compress.archivers.zip.StreamCompressor","org.apache.commons.compress.archivers.zip.StreamCompressor.create(SeekableByteChannel,Deflater)",6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,<init>,(java.util.zip.Deflater) → void,org.apache.commons.compress.archivers.zip.StreamCompressor.<init>(Deflater),19,0,0.0,0,0,coverage not available since no branches,1,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,close,() → void,org.apache.commons.compress.archivers.zip.StreamCompressor.close(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,deflate,() → void,org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(),19,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,deflate,"(java.io.InputStream, int) → void","org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(InputStream,int)",28,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,deflateUntilInputIsNeeded,() → void,org.apache.commons.compress.archivers.zip.StreamCompressor.deflateUntilInputIsNeeded(),8,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,flushDeflater,() → void,org.apache.commons.compress.archivers.zip.StreamCompressor.flushDeflater(),11,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,getBytesRead,() → long,org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesRead(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,getBytesWrittenForLastEntry,() → long,org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesWrittenForLastEntry(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,getCrc32,() → long,org.apache.commons.compress.archivers.zip.StreamCompressor.getCrc32(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,getTotalBytesWritten,() → long,org.apache.commons.compress.archivers.zip.StreamCompressor.getTotalBytesWritten(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,reset,() → void,org.apache.commons.compress.archivers.zip.StreamCompressor.reset(),13,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,write,"(byte[], int, int, int) → long","org.apache.commons.compress.archivers.zip.StreamCompressor.write(byte[],int,int,int)",35,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,writeCounted,(byte[]) → void,org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,writeCounted,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[],int,int)",20,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/archivers/zip,org/apache/commons/compress/archivers/zip/StreamCompressor,writeDeflated,"(byte[], int, int) → void","org.apache.commons.compress.archivers.zip.StreamCompressor.writeDeflated(byte[],int,int)",61,0,0.0,10,0,0.0,6,13,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream,<init>,"(java.io.InputStream, int) → void","org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.<init>(InputStream,int)",45,0,0.0,2,0,0.0,2,11,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream,available,() → int,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.available(),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream,close,() → void,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.close(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream,getCompressedCount,() → long,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.getCompressedCount(),4,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream,getSize,() → int,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.getSize(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream,hasMoreDataInBlock,() → boolean,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.hasMoreDataInBlock(),9,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream,prefill,(byte[]) → void,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.prefill(byte[]),37,0,0.0,2,0,0.0,2,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream,read,() → int,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.read(),17,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream,readBackReference,"(byte[], int, int) → int","org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readBackReference(byte[],int,int)",17,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream,readFromBuffer,"(byte[], int, int) → int","org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readFromBuffer(byte[],int,int)",38,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream,readLiteral,"(byte[], int, int) → int","org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readLiteral(byte[],int,int)",17,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream,readOneByte,() → int,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readOneByte(),16,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream,slideBuffer,() → void,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.slideBuffer(),27,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream,startBackReference,"(int, long) → void","org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.startBackReference(int,long)",27,0,0.0,6,0,0.0,4,7,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream,startLiteral,(long) → void,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.startLiteral(long),13,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream,tryToCopy,(int) → void,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.tryToCopy(int),139,0,0.0,10,0,0.0,6,19,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream,tryToReadLiteral,(int) → void,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.tryToReadLiteral(int),52,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor$Block,<init>,() → void,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block.<init>(),6,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor$Block,<init>,(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block$BlockType) → void,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block.<init>(BlockType),8,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor$Block,getType,() → org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block$BlockType,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block.getType(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor$Block,toString,() → java.lang.String,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block.toString(),14,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters$Builder,<init>,(int) → void,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.<init>(int),33,0,0.0,4,0,0.0,3,9,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters$Builder,build,() → org.apache.commons.compress.compressors.lz77support.Parameters,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.build(),73,0,0.0,12,0,0.0,7,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters$Builder,tunedForCompressionRatio,() → org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.tunedForCompressionRatio(),23,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters$Builder,tunedForSpeed,() → org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.tunedForSpeed(),30,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters$Builder,withLazyMatching,(boolean) → org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withLazyMatching(boolean),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters$Builder,withLazyThreshold,(int) → org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withLazyThreshold(int),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters$Builder,withMaxBackReferenceLength,(int) → org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMaxBackReferenceLength(int),17,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters$Builder,withMaxLiteralLength,(int) → org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMaxLiteralLength(int),14,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters$Builder,withMaxNumberOfCandidates,(int) → org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMaxNumberOfCandidates(int),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters$Builder,withMaxOffset,(int) → org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMaxOffset(int),18,0,0.0,2,0,0.0,2,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters$Builder,withMinBackReferenceLength,(int) → org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMinBackReferenceLength(int),26,0,0.0,4,0,0.0,3,6,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters$Builder,withNiceBackReferenceLength,(int) → org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withNiceBackReferenceLength(int),6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor$EOD,<init>,() → void,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$EOD.<init>(),4,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor$EOD,<clinit>,() → void,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$EOD.<clinit>(),5,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor$AbstractReference,<init>,"(org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block$BlockType, int, int) → void","org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference.<init>(BlockType,int,int)",10,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor$AbstractReference,getLength,() → int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference.getLength(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor$AbstractReference,getOffset,() → int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference.getOffset(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor$AbstractReference,toString,() → java.lang.String,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference.toString(),18,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor$LiteralBlock,<init>,"(byte[], int, int) → void","org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock.<init>(byte[],int,int)",9,0,0.0,0,0,coverage not available since no branches,1,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor$LiteralBlock,getData,() → byte[],org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock.getData(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor,<init>,"(org.apache.commons.compress.compressors.lz77support.Parameters, org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Callback) → void","org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<init>(Parameters,Callback)",44,0,0.0,0,0,coverage not available since no branches,1,12,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor,catchUpMissedInserts,() → void,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.catchUpMissedInserts(),18,0,0.0,2,0,0.0,2,3,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor,compress,() → void,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.compress(),118,0,0.0,18,0,0.0,10,27,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor,compress,(byte[]) → void,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.compress(byte[]),7,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor,compress,"(byte[], int, int) → void","org.apache.commons.compress.compressors.lz77support.LZ77Compressor.compress(byte[],int,int)",29,0,0.0,4,0,0.0,3,8,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor,doCompress,"(byte[], int, int) → void","org.apache.commons.compress.compressors.lz77support.LZ77Compressor.doCompress(byte[],int,int)",49,0,0.0,8,0,0.0,5,10,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor,finish,() → void,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.finish(),22,0,0.0,4,0,0.0,3,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor,flushBackReference,(int) → void,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.flushBackReference(int),13,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor,flushLiteralBlock,() → void,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.flushLiteralBlock(),16,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor,initialize,() → void,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.initialize(),21,0,0.0,2,0,0.0,2,4,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor,insertString,(int) → int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.insertString(int),36,0,0.0,0,0,coverage not available since no branches,1,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor,insertStringsInMatch,(int) → void,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.insertStringsInMatch(int),31,0,0.0,2,0,0.0,2,5,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor,longestMatch,(int) → int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.longestMatch(int),91,0,0.0,12,0,0.0,7,19,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor,longestMatchForNextPosition,(int) → int,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.longestMatchForNextPosition(int),67,0,0.0,2,0,0.0,2,15,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor,nextHash,"(int, byte) → int","org.apache.commons.compress.compressors.lz77support.LZ77Compressor.nextHash(int,byte)",12,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor,prefill,(byte[]) → void,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.prefill(byte[]),64,0,0.0,8,0,0.0,5,14,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor,slide,() → void,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.slide(),94,0,0.0,12,0,0.0,7,15,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor$BackReference,<init>,"(int, int) → void","org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference.<init>(int,int)",6,0,0.0,0,0,coverage not available since no branches,1,2,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters,builder,(int) → org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters.builder(int),6,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters,isPowerOfTwo,(int) → boolean,org.apache.commons.compress.compressors.lz77support.Parameters.isPowerOfTwo(int),10,0,0.0,2,0,0.0,2,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters,<init>,"(int, int, int, int, int, int, int, boolean, int) → void","org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int)",30,0,0.0,0,0,coverage not available since no branches,1,11,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters,getLazyMatching,() → boolean,org.apache.commons.compress.compressors.lz77support.Parameters.getLazyMatching(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters,getLazyMatchingThreshold,() → int,org.apache.commons.compress.compressors.lz77support.Parameters.getLazyMatchingThreshold(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters,getMaxBackReferenceLength,() → int,org.apache.commons.compress.compressors.lz77support.Parameters.getMaxBackReferenceLength(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters,getMaxCandidates,() → int,org.apache.commons.compress.compressors.lz77support.Parameters.getMaxCandidates(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters,getMaxLiteralLength,() → int,org.apache.commons.compress.compressors.lz77support.Parameters.getMaxLiteralLength(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters,getMaxOffset,() → int,org.apache.commons.compress.compressors.lz77support.Parameters.getMaxOffset(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters,getMinBackReferenceLength,() → int,org.apache.commons.compress.compressors.lz77support.Parameters.getMinBackReferenceLength(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters,getNiceBackReferenceLength,() → int,org.apache.commons.compress.compressors.lz77support.Parameters.getNiceBackReferenceLength(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/Parameters,getWindowSize,() → int,org.apache.commons.compress.compressors.lz77support.Parameters.getWindowSize(),3,0,0.0,0,0,coverage not available since no branches,1,1,0,0.0,1,0,0.0
org/apache/commons/compress/compressors/lz77support,org/apache/commons/compress/compressors/lz77support/LZ77Compressor$Block$BlockType,<clinit>,() → void,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block$BlockType.<clinit>(),34,0,0.0,0,0,coverage not available since no branches,1,4,0,0.0,1,0,0.0
