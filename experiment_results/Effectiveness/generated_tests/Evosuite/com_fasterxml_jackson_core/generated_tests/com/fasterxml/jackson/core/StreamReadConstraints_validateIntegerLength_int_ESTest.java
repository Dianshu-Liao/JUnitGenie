/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 13:17:39 GMT 2025
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.StreamReadConstraints;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class StreamReadConstraints_validateIntegerLength_int_ESTest extends StreamReadConstraints_validateIntegerLength_int_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = new StreamReadConstraints((-1134), (-1134), (-1134), (-1134), (-1134), (-1134));
      try { 
        streamReadConstraints0.validateIntegerLength(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Number value length (2) exceeds the maximum allowed (-1134, from `StreamReadConstraints.getMaxNumberLength()`)
         //
         verifyException("com.fasterxml.jackson.core.StreamReadConstraints", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = new StreamReadConstraints(0, 0L, 0, 0);
      streamReadConstraints0.validateIntegerLength(0);
      assertEquals(0, streamReadConstraints0.getMaxNestingDepth());
      assertEquals(0L, streamReadConstraints0.getMaxDocumentLength());
      assertEquals((-1L), streamReadConstraints0.getMaxTokenCount());
      assertEquals(0, streamReadConstraints0.getMaxStringLength());
      assertEquals(0, streamReadConstraints0.getMaxNumberLength());
      assertEquals(50000, streamReadConstraints0.getMaxNameLength());
  }
}
