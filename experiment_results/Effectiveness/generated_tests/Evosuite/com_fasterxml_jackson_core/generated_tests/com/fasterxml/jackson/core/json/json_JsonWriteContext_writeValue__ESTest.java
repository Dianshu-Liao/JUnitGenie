/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 15:22:39 GMT 2025
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.JsonWriteContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class json_JsonWriteContext_writeValue__ESTest extends json_JsonWriteContext_writeValue__ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DupDetector dupDetector0 = mock(DupDetector.class, new ViolatedAssumptionAnswer());
      JsonWriteContext jsonWriteContext0 = new JsonWriteContext(5, (JsonWriteContext) null, dupDetector0, (Object) null);
      jsonWriteContext0.writeValue();
      int int0 = jsonWriteContext0.writeValue();
      assertEquals(2, jsonWriteContext0.getEntryCount());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DupDetector dupDetector0 = mock(DupDetector.class, new ViolatedAssumptionAnswer());
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter.Inclusion tokenFilter_Inclusion0 = TokenFilter.Inclusion.INCLUDE_NON_NULL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, tokenFilter_Inclusion0, false);
      JsonWriteContext jsonWriteContext0 = new JsonWriteContext(0, (JsonWriteContext) null, dupDetector0, filteringGeneratorDelegate0);
      DupDetector dupDetector1 = mock(DupDetector.class, new ViolatedAssumptionAnswer());
      JsonWriteContext jsonWriteContext1 = new JsonWriteContext(1, jsonWriteContext0, dupDetector1);
      jsonWriteContext1.writeValue();
      int int0 = jsonWriteContext1.writeValue();
      assertEquals(1, jsonWriteContext1.getCurrentIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DupDetector dupDetector0 = mock(DupDetector.class, new ViolatedAssumptionAnswer());
      TokenFilter.Inclusion tokenFilter_Inclusion0 = TokenFilter.Inclusion.INCLUDE_NON_NULL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, tokenFilter_Inclusion0, true);
      JsonWriteContext jsonWriteContext0 = new JsonWriteContext(5, (JsonWriteContext) null, dupDetector0, filteringGeneratorDelegate0);
      JsonWriteContext jsonWriteContext1 = new JsonWriteContext(2, jsonWriteContext0, dupDetector0);
      jsonWriteContext1._gotName = true;
      int int0 = jsonWriteContext1.writeValue();
      assertEquals(1, jsonWriteContext1.getEntryCount());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DupDetector dupDetector0 = mock(DupDetector.class, new ViolatedAssumptionAnswer());
      TokenFilter.Inclusion tokenFilter_Inclusion0 = TokenFilter.Inclusion.INCLUDE_NON_NULL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, tokenFilter_Inclusion0, true);
      JsonWriteContext jsonWriteContext0 = new JsonWriteContext(5, (JsonWriteContext) null, dupDetector0, filteringGeneratorDelegate0);
      JsonWriteContext jsonWriteContext1 = new JsonWriteContext(2, jsonWriteContext0, (DupDetector) null);
      int int0 = jsonWriteContext1.writeValue();
      assertEquals("?", jsonWriteContext0.typeDesc());
      assertEquals(0, jsonWriteContext1.getEntryCount());
      assertEquals(1, jsonWriteContext1.getNestingDepth());
      assertEquals(0, jsonWriteContext0.getEntryCount());
      assertEquals(5, int0);
  }
}
