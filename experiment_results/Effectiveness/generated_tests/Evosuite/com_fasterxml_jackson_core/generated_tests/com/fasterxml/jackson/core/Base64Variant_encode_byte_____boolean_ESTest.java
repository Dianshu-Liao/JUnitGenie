/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 13:33:36 GMT 2025
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.core.Base64Variant;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Base64Variant_encode_byte_____boolean_ESTest extends Base64Variant_encode_byte_____boolean_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("BmXf]+", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, '~', 255);
      byte[] byteArray0 = new byte[1];
      String string0 = base64Variant0.encode(byteArray0, true);
      assertEquals(255, base64Variant0.getMaxLineLength());
      assertEquals("BmXf]+", base64Variant0.getName());
      assertEquals("\"AA~~\"", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("J=>aC", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", false, ')', 255);
      byte[] byteArray0 = new byte[8];
      String string0 = base64Variant0.encode(byteArray0, false);
      assertEquals(')', base64Variant0.getPaddingChar());
      assertEquals("AAAAAAAAAAA", string0);
      assertEquals(255, base64Variant0.getMaxLineLength());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("BmXf]+", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", true, '~', 275);
      byte[] byteArray0 = new byte[3];
      Base64Variant base64Variant1 = new Base64Variant(base64Variant0, "BmXf]+", true, '^', (-512));
      String string0 = base64Variant1.encode(byteArray0, true);
      assertEquals('^', base64Variant1.getPaddingChar());
      assertEquals("\"AAAA\\n\"", string0);
      assertEquals(275, base64Variant0.getMaxLineLength());
      assertTrue(base64Variant1.requiresPaddingOnRead());
  }
}
