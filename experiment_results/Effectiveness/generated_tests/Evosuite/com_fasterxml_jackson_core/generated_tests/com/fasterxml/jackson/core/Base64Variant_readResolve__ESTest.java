/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 13:33:24 GMT 2025
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.core.Base64Variant;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Base64Variant_readResolve__ESTest extends Base64Variant_readResolve__ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("MIME", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklwnopqrstuvwxyz012345U7^9+/", true, 'B', 'B');
      Base64Variant base64Variant1 = new Base64Variant(base64Variant0, "MIME", true, '=', 'B');
      Base64Variant base64Variant2 = (Base64Variant)base64Variant1.readResolve();
      assertTrue(base64Variant2.equals((Object)base64Variant1));
      assertEquals(66, base64Variant2.getMaxLineLength());
      assertEquals((byte)66, base64Variant0.getPaddingByte());
      assertEquals(66, base64Variant0.getMaxLineLength());
      assertEquals('=', base64Variant2.getPaddingChar());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("i`GeB($&/?b97;;1kC ", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklwnopqrstuvwxyz012345U7^9+/", false, '2', 1346);
      Base64Variant base64Variant1 = new Base64Variant(base64Variant0, "MIME-NO-LINEFEEDS", true, '=', 1371);
      Base64Variant base64Variant2 = (Base64Variant)base64Variant1.readResolve();
      assertEquals((byte)61, base64Variant2.getPaddingByte());
      assertEquals(1346, base64Variant0.getMaxLineLength());
      assertEquals(1371, base64Variant2.getMaxLineLength());
      assertEquals((byte)50, base64Variant0.getPaddingByte());
      assertTrue(base64Variant2.equals((Object)base64Variant1));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("MIME", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklwnopqrstuvwxyz012345U7^9+/", true, 'L', 'L');
      Base64Variant base64Variant1 = new Base64Variant(base64Variant0, "MIME", true, '=', 'L');
      Base64Variant base64Variant2 = (Base64Variant)base64Variant1.readResolve();
      assertTrue(base64Variant2.equals((Object)base64Variant1));
      assertEquals(76, base64Variant2.getMaxLineLength());
      assertEquals(76, base64Variant0.getMaxLineLength());
      assertNotSame(base64Variant2, base64Variant1);
      assertEquals((byte)61, base64Variant2.getPaddingByte());
      assertEquals('L', base64Variant0.getPaddingChar());
      assertTrue(base64Variant2.acceptsPaddingOnRead());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("MIME", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklwnopqrstuvwxyz012345U7^9+/", true, 'L', 'L');
      assertEquals("MIME", base64Variant0.toString());
      
      Base64Variant base64Variant1 = (Base64Variant)base64Variant0.readResolve();
      assertTrue(base64Variant1.equals((Object)base64Variant0));
      assertEquals(76, base64Variant0.getMaxLineLength());
      assertEquals('L', base64Variant0.getPaddingChar());
      assertEquals(Base64Variant.PaddingReadBehaviour.PADDING_REQUIRED, base64Variant1.paddingReadBehaviour());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Base64Variant base64Variant0 = new Base64Variant("i`GeB($&/?b97;;1kC ", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklwnopqrstuvwxyz012345U7^9+/", false, '2', 1346);
      Base64Variant base64Variant1 = new Base64Variant(base64Variant0, "MIME-NO-LINEFEEDS", false, '2', 1371);
      Base64Variant base64Variant2 = (Base64Variant)base64Variant1.readResolve();
      assertEquals(1346, base64Variant0.getMaxLineLength());
      assertEquals((byte)50, base64Variant2.getPaddingByte());
      assertTrue(base64Variant2.equals((Object)base64Variant1));
      assertEquals(1371, base64Variant2.getMaxLineLength());
      assertFalse(base64Variant2.requiresPaddingOnRead());
      assertEquals("i`GeB($&/?b97;;1kC ", base64Variant0.toString());
  }
}
