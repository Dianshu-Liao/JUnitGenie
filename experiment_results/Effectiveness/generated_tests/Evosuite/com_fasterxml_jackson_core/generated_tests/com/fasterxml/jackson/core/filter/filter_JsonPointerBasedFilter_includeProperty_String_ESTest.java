/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 15:57:25 GMT 2025
 */

package com.fasterxml.jackson.core.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.core.filter.JsonPointerBasedFilter;
import com.fasterxml.jackson.core.filter.TokenFilter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class filter_JsonPointerBasedFilter_includeProperty_String_ESTest extends filter_JsonPointerBasedFilter_includeProperty_String_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JsonPointer jsonPointer0 = mock(JsonPointer.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(jsonPointer0).matches();
      doReturn((String) null, (String) null).when(jsonPointer0).toString();
      JsonPointer jsonPointer1 = mock(JsonPointer.class, new ViolatedAssumptionAnswer());
      doReturn(jsonPointer0).when(jsonPointer1).matchProperty(anyString());
      JsonPointerBasedFilter jsonPointerBasedFilter0 = new JsonPointerBasedFilter(jsonPointer1);
      TokenFilter tokenFilter0 = jsonPointerBasedFilter0.includeProperty("");
      assertFalse(tokenFilter0.includeBinary());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JsonPointerBasedFilter jsonPointerBasedFilter0 = new JsonPointerBasedFilter((String) null);
      TokenFilter tokenFilter0 = jsonPointerBasedFilter0.includeProperty("");
      assertNull(tokenFilter0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JsonPointer jsonPointer0 = mock(JsonPointer.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(jsonPointer0).matches();
      JsonPointer jsonPointer1 = mock(JsonPointer.class, new ViolatedAssumptionAnswer());
      doReturn(jsonPointer0).when(jsonPointer1).matchProperty(anyString());
      JsonPointerBasedFilter jsonPointerBasedFilter0 = new JsonPointerBasedFilter(jsonPointer1, false);
      TokenFilter tokenFilter0 = jsonPointerBasedFilter0.includeProperty("~0");
      assertTrue(tokenFilter0.includeBinary());
  }
}
