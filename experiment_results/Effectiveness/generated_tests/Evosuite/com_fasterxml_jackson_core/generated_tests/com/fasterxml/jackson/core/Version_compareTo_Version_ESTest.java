/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 13:33:46 GMT 2025
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.core.Version;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Version_compareTo_Version_ESTest extends Version_compareTo_Version_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Version version0 = new Version(45, 45, 45, "]y#,JHfywva>");
      Version version1 = new Version(45, 45, 45, (String) null, "", "");
      int int0 = version1.compareTo(version0);
      assertEquals(45, version1.getMinorVersion());
      assertEquals(45, version1.getMajorVersion());
      assertEquals(1, int0);
      assertEquals(45, version1.getPatchLevel());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Version version0 = new Version(45, 45, 45, "]y#,JHfywva>");
      Version version1 = new Version(45, 45, 45, "]y#,JHfywva>", "", "");
      int int0 = version0.compareTo(version1);
      assertEquals(0, int0);
      assertEquals(45, version1.getMajorVersion());
      assertEquals(45, version1.getPatchLevel());
      assertEquals(45, version1.getMinorVersion());
      assertTrue(version1.isSnapshot());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Version version0 = new Version(45, 45, 45, "]y#,JHfywva>");
      Version version1 = new Version(45, 45, 45, (String) null, "", "");
      assertFalse(version1.isSnapshot());
      
      int int0 = version0.compareTo(version1);
      assertEquals(45, version1.getPatchLevel());
      assertEquals(45, version1.getMajorVersion());
      assertTrue(version0.isSnapshot());
      assertEquals((-1), int0);
      assertEquals(45, version1.getMinorVersion());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Version version0 = new Version(1, 61, (-1584), "");
      Version version1 = new Version(1, 61, 1843, "");
      int int0 = version0.compareTo(version1);
      assertEquals(61, version1.getMinorVersion());
      assertEquals(1, version1.getMajorVersion());
      assertEquals(1843, version1.getPatchLevel());
      assertEquals((-3427), int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Version version0 = new Version((-267), (-267), (-1), "");
      Version version1 = new Version((-267), (-2993), (-267), "u+L`#h&iJbPEr9x");
      int int0 = version0.compareTo(version1);
      assertEquals((-1), version0.getPatchLevel());
      assertEquals(2726, int0);
      assertTrue(version1.isSnapshot());
      assertEquals((-2993), version1.getMinorVersion());
      assertEquals((-267), version1.getMajorVersion());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Version version0 = new Version(45, 45, 45, "]y#,JHfywva>");
      Version version1 = new Version((-1292), (-1292), (-1292), "]y#,JHfywva>", "", "");
      int int0 = version0.compareTo(version1);
      assertTrue(version1.isSnapshot());
      assertEquals((-1292), version1.getMajorVersion());
      assertEquals((-1292), version1.getPatchLevel());
      assertEquals((-1292), version1.getMinorVersion());
      assertEquals(1337, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Version version0 = new Version(45, 45, 45, "]y#,JHfywva>");
      Version version1 = new Version(45, (-3021), (-1718), "]y#,JHfywva>", "", "]y#,JHfywva>");
      int int0 = version1.compareTo(version0);
      assertEquals("", version1.getGroupId());
      assertEquals("]y#,JHfywva>", version1.getArtifactId());
      assertTrue(version0.isSnapshot());
      assertEquals((-3021), version1.getMinorVersion());
      assertEquals(45, version1.getMajorVersion());
      assertEquals((-1718), version1.getPatchLevel());
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Version version0 = new Version(1, 1, 1, "g_NhvQ'LWuXhIVy", "g_NhvQ'LWuXhIVy", "grS");
      Version version1 = new Version(1, 1, 1, "grS");
      int int0 = version0.compareTo(version1);
      assertEquals(1, version1.getMajorVersion());
      assertTrue(version1.isSnapshot());
      assertEquals(1, version1.getPatchLevel());
      assertEquals(15, int0);
      assertEquals("grS", version0.getArtifactId());
      assertEquals("g_NhvQ'LWuXhIVy", version0.getGroupId());
      assertEquals(1, version1.getMinorVersion());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Version version0 = new Version(1146, 1146, 0, "", "", "");
      int int0 = version0.compareTo(version0);
      assertEquals(0, version0.getPatchLevel());
      assertEquals(1146, version0.getMinorVersion());
      assertEquals(1146, version0.getMajorVersion());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Version version0 = new Version((-1501), (-1501), (-1501), "");
      Version version1 = new Version((-1501), (-1501), (-1501), "", "", "");
      int int0 = version0.compareTo(version1);
      assertEquals((-1501), version1.getMajorVersion());
      assertTrue(version1.equals((Object)version0));
      assertEquals((-1501), version1.getMinorVersion());
      assertFalse(version1.isSnapshot());
      assertEquals((-1501), version1.getPatchLevel());
      assertEquals(0, int0);
  }
}
