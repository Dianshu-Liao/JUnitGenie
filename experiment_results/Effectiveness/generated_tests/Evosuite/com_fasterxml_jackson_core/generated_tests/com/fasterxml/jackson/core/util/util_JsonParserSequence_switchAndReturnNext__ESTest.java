/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 14:02:08 GMT 2025
 */

package com.fasterxml.jackson.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.ErrorReportConfiguration;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.StreamReadConstraints;
import com.fasterxml.jackson.core.StreamWriteConstraints;
import com.fasterxml.jackson.core.io.ContentReference;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import java.io.DataInput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class util_JsonParserSequence_switchAndReturnNext__ESTest extends util_JsonParserSequence_switchAndReturnNext__ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JsonParser[] jsonParserArray0 = new JsonParser[2];
      StreamReadConstraints streamReadConstraints0 = mock(StreamReadConstraints.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(streamReadConstraints0).hasMaxTokenCount();
      StreamWriteConstraints streamWriteConstraints0 = mock(StreamWriteConstraints.class, new ViolatedAssumptionAnswer());
      ErrorReportConfiguration errorReportConfiguration0 = mock(ErrorReportConfiguration.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ContentReference contentReference0 = mock(ContentReference.class, new ViolatedAssumptionAnswer());
      doReturn(bufferRecycler0).when(contentReference0).getRawContent();
      IOContext iOContext0 = new IOContext(streamReadConstraints0, streamWriteConstraints0, errorReportConfiguration0, bufferRecycler0, contentReference0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = mock(ByteQuadsCanonicalizer.class, new ViolatedAssumptionAnswer());
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 1, (DataInput) null, objectCodec0, byteQuadsCanonicalizer0, 1);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(uTF8DataInputJsonParser0);
      jsonParserArray0[0] = (JsonParser) jsonParserDelegate0;
      JsonParserSequence jsonParserSequence0 = new JsonParserSequence(jsonParserArray0);
      jsonParserArray0[1] = (JsonParser) jsonParserSequence0;
      JsonParserSequence jsonParserSequence1 = new JsonParserSequence(true, jsonParserArray0);
      // Undeclared exception!
      try { 
        jsonParserSequence1.switchAndReturnNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8DataInputJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JsonParser[] jsonParserArray0 = new JsonParser[2];
      JsonParserSequence jsonParserSequence0 = new JsonParserSequence(false, jsonParserArray0);
      jsonParserArray0[1] = (JsonParser) jsonParserSequence0;
      JsonParserSequence jsonParserSequence1 = new JsonParserSequence(jsonParserArray0);
      jsonParserSequence1.switchAndReturnNext();
  }
}
