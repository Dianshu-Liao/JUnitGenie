/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 13:24:16 GMT 2025
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.Base64Variants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Base64Variants_valueOf_String_ESTest extends Base64Variants_valueOf_String_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      try { 
        Base64Variants.valueOf((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No Base64Variant with name <null>
         //
         verifyException("com.fasterxml.jackson.core.Base64Variants", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      try { 
        Base64Variants.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No Base64Variant with name ''
         //
         verifyException("com.fasterxml.jackson.core.Base64Variants", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Base64Variant base64Variant0 = Base64Variants.valueOf("PEM");
      assertEquals("PEM", base64Variant0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Base64Variant base64Variant0 = Base64Variants.valueOf("MIME-NO-LINEFEEDS");
      assertEquals("MIME-NO-LINEFEEDS", base64Variant0.getName());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Base64Variant base64Variant0 = Base64Variants.valueOf("MIME");
      assertEquals("MIME", base64Variant0.getName());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Base64Variant base64Variant0 = Base64Variants.valueOf("MODIFIED-FOR-URL");
      assertFalse(base64Variant0.acceptsPaddingOnRead());
  }
}
