/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 13:17:36 GMT 2025
 */

package com.fasterxml.jackson.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.StreamReadConstraints;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class StreamReadConstraints_validateFPLength_int_ESTest extends StreamReadConstraints_validateFPLength_int_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = new StreamReadConstraints(0, 1L, 0, 0);
      try { 
        streamReadConstraints0.validateFPLength(739);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Number value length (739) exceeds the maximum allowed (0, from `StreamReadConstraints.getMaxNumberLength()`)
         //
         verifyException("com.fasterxml.jackson.core.StreamReadConstraints", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StreamReadConstraints streamReadConstraints0 = new StreamReadConstraints(2190, 1117L, 2190, 2190);
      streamReadConstraints0.validateFPLength(2190);
      assertEquals(2190, streamReadConstraints0.getMaxNumberLength());
      assertEquals(2190, streamReadConstraints0.getMaxStringLength());
      assertTrue(streamReadConstraints0.hasMaxDocumentLength());
      assertEquals(2190, streamReadConstraints0.getMaxNestingDepth());
      assertEquals((-1L), streamReadConstraints0.getMaxTokenCount());
      assertEquals(50000, streamReadConstraints0.getMaxNameLength());
  }
}
