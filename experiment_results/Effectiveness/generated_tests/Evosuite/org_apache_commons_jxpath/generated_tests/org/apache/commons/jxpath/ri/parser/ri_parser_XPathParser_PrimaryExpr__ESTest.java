/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 05:09:10 GMT 2025
 */

package org.apache.commons.jxpath.ri.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import org.apache.commons.jxpath.ri.parser.XPathParser;
import org.apache.commons.jxpath.ri.parser.XPathParserTokenManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class ri_parser_XPathParser_PrimaryExpr__ESTest extends ri_parser_XPathParser_PrimaryExpr__ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":|gsrBX@{}4(@Dr");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PrimaryExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \":\" at line 1, column 1.
         // Was expecting one of:
         //     \"$\" ...
         //     <Literal> ...
         //     <Number> ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"(\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StringReader stringReader0 = new StringReader("xD>b");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.PrimaryExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringReader stringReader0 = new StringReader("format-number");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PrimaryExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"format-number <EOF>\" at line 1, column 1.
         // Was expecting one of:
         //     \"$\" ...
         //     <Literal> ...
         //     <Number> ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     <NCName> ...
         //     \"(\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"key\" ...
         //     \"format-number\" \":\" ...
         //     \"format-number\" \"(\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StringReader stringReader0 = new StringReader("floor");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PrimaryExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"floor <EOF>\" at line 1, column 1.
         // Was expecting one of:
         //     \"$\" ...
         //     <Literal> ...
         //     <Number> ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     <NCName> ...
         //     \"(\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" \":\" ...
         //     \"floor\" \"(\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PrimaryExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"not <EOF>\" at line 1, column 1.
         // Was expecting one of:
         //     \"$\" ...
         //     <Literal> ...
         //     <Number> ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     <NCName> ...
         //     \"(\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" \":\" ...
         //     \"not\" \"(\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StringReader stringReader0 = new StringReader("self::");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PrimaryExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"self::\" at line 1, column 1.
         // Was expecting one of:
         //     \"$\" ...
         //     <Literal> ...
         //     <Number> ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"(\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(tN,_8N2[-)!loT7co");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.PrimaryExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6^jD");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.PrimaryExpr();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"^\" (94), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      StringReader stringReader0 = new StringReader("namespace::");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PrimaryExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"namespace::\" at line 1, column 1.
         // Was expecting one of:
         //     \"$\" ...
         //     <Literal> ...
         //     <Number> ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"(\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.jxpath.ri.parser.XPathParser$JJCalls");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      XPathParser xPathParser1 = new XPathParser((XPathParserTokenManager) xPathParser0.token_source);
      // Undeclared exception!
      try { 
        xPathParser1.PrimaryExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }
}
