/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 06:34:16 GMT 2025
 */

package org.apache.commons.jxpath.ri.model;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class ri_model_VariablePointer_equals_Object_ESTest extends ri_model_VariablePointer_equals_Object_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QName qName0 = new QName("B", ">YE]!c\"0z]o'7");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      variablePointer0.index = 91;
      VariablePointer variablePointer1 = new VariablePointer(qName0);
      boolean boolean0 = variablePointer0.equals(variablePointer1);
      assertFalse(variablePointer1.isActual());
      assertFalse(variablePointer1.equals((Object)variablePointer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      QName qName0 = new QName("@}'qU", "=Z\"eB}`\"/P9");
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName1 = new QName("@}'qU", "");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
      VariablePointer variablePointer1 = new VariablePointer(basicVariables0, qName0);
      boolean boolean0 = variablePointer0.equals(variablePointer1);
      assertTrue(variablePointer1.isActual());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("Factory did not assign a collection to variable '");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      VariablePointer variablePointer1 = new VariablePointer(basicVariables0, qName0);
      boolean boolean0 = variablePointer0.equals(variablePointer1);
      assertTrue(boolean0);
      assertTrue(variablePointer1.isActual());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      VariablePointer variablePointer1 = new VariablePointer(qName0);
      boolean boolean0 = variablePointer0.equals(variablePointer1);
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer1.isActual());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      boolean boolean0 = variablePointer0.equals(variablePointer0);
      assertFalse(variablePointer0.isActual());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      QName qName0 = new QName("@}'qU", "@}'qU");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      boolean boolean0 = variablePointer0.equals(qName0);
      assertFalse(boolean0);
      assertFalse(variablePointer0.isActual());
  }
}
