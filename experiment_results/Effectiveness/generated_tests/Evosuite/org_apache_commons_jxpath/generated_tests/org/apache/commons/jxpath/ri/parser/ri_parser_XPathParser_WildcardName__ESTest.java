/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 05:19:30 GMT 2025
 */

package org.apache.commons.jxpath.ri.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import org.apache.commons.jxpath.ri.parser.XPathParser;
import org.apache.commons.jxpath.ri.parser.XPathParserTokenManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class ri_parser_XPathParser_WildcardName__ESTest extends ri_parser_XPathParser_WildcardName__ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v7yFE:>JV ");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \">\" at line 1, column 7.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QN:[|7a");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"[\" at line 1, column 4.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m:)z->G");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \")\" at line 1, column 3.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("coTc:za9B6");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*<G&7;T5&<");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \",\" at line 1, column 1.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]?UTH7K|.e)q");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"?\" (63), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KIK[;2_G%w!&!W");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      XPathParser xPathParser1 = new XPathParser((XPathParserTokenManager) xPathParser0.token_source);
      // Undeclared exception!
      try { 
        xPathParser1.WildcardName();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: \";\" (59), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("..");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"..\" at line 1, column 1.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".w> YA+p8[L>x");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \".\" at line 1, column 1.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("('.3hVT\"We;");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 12.  Encountered: <EOF> after : \"\\'.3hVT\\\"We;\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":)z>G");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \":\" at line 1, column 1.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ceiling");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sum");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("normalize-space");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("substring");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("contains");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ends-with");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("namespace-uri");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ancestor::");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"ancestor::\" at line 1, column 1.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ancesto::");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.WildcardName();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \":\" at line 1, column 9.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }
}
