/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 05:12:21 GMT 2025
 */

package org.apache.commons.jxpath.ri.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import org.apache.commons.jxpath.ri.parser.Token;
import org.apache.commons.jxpath.ri.parser.XPathParser;
import org.apache.commons.jxpath.ri.parser.XPathParserTokenManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class ri_parser_XPathParser_PathExpr__ESTest extends ri_parser_XPathParser_PathExpr__ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 0, column 0.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     \"$\" ...
         //     \"(\" ...
         //     <Literal> ...
         //     <Number> ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*B_OV");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",T;EdMw<64Wv$");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \",\" at line 1, column 1.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     \"$\" ...
         //     \"(\" ...
         //     <Literal> ...
         //     <Number> ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@O#}p{8_Hc1");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]dHZ@O");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"]\" at line 1, column 1.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     \"$\" ...
         //     \"(\" ...
         //     <Literal> ...
         //     <Number> ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[96d");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"[\" at line 1, column 1.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     \"$\" ...
         //     \"(\" ...
         //     <Literal> ...
         //     <Number> ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".JQPk@*k-e'Xg");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")or");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \")\" at line 1, column 1.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     \"$\" ...
         //     \"(\" ...
         //     <Literal> ...
         //     <Number> ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(T");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      xPathParser0.PathExpr();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":fy");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \":\" at line 1, column 1.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     \"$\" ...
         //     \"(\" ...
         //     <Literal> ...
         //     <Number> ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("g 6}WpPIy0|ir%wsvi");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ceiling");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("floor");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("translate");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("normalize-space");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("string-length");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("substring");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("namespace-uri");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("processing-struction");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      Token token0 = null;
      try {  
      token0 = xPathParser0.token.next;
      } catch(IllegalArgumentException e) {}
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("preceding-sibling::");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 1, column 19.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ancestor::");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 1, column 10.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("child::");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 1, column 7.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("processing-instruction");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 1, column 22.
         // Was expecting one of:
         //     \"(\" ...
         //     \":\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("and");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9|&RJ#J|)U&b\"^H2}");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"text\"");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      xPathParser0.token = xPathParser0.jj_nt;
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 1, column 6.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     \"$\" ...
         //     \"(\" ...
         //     <Literal> ...
         //     <Number> ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$+d5>-");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"$ +\" at line 1, column 1.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     \"$\" <NCName> ...
         //     \"$\" \"or\" ...
         //     \"$\" \"and\" ...
         //     \"$\" \"mod\" ...
         //     \"$\" \"div\" ...
         //     \"$\" \"node\" ...
         //     \"$\" \"text\" ...
         //     \"$\" \"comment\" ...
         //     \"$\" \"processing-instruction\" ...
         //     \"$\" \"last\" ...
         //     \"$\" \"position\" ...
         //     \"$\" \"count\" ...
         //     \"$\" \"id\" ...
         //     \"$\" \"local-name\" ...
         //     \"$\" \"namespace-uri\" ...
         //     \"$\" \"name\" ...
         //     \"$\" \"string\" ...
         //     \"$\" \"concat\" ...
         //     \"$\" \"starts-with\" ...
         //     \"$\" \"ends-with\" ...
         //     \"$\" \"contains\" ...
         //     \"$\" \"substring-before\" ...
         //     \"$\" \"substring-after\" ...
         //     \"$\" \"substring\" ...
         //     \"$\" \"string-length\" ...
         //     \"$\" \"normalize-space\" ...
         //     \"$\" \"translate\" ...
         //     \"$\" \"boolean\" ...
         //     \"$\" \"not\" ...
         //     \"$\" \"true\" ...
         //     \"$\" \"false\" ...
         //     \"$\" \"null\" ...
         //     \"$\" \"lang\" ...
         //     \"$\" \"number\" ...
         //     \"$\" \"sum\" ...
         //     \"$\" \"floor\" ...
         //     \"$\" \"ceiling\" ...
         //     \"$\" \"round\" ...
         //     \"$\" \"key\" ...
         //     \"$\" \"format-number\" ...
         //     \"(\" ...
         //     <Literal> ...
         //     <Number> ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">yoK,/s|c1)");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \">\" at line 1, column 1.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     \"$\" ...
         //     \"(\" ...
         //     <Literal> ...
         //     <Number> ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<Number>");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<\" at line 1, column 1.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     \"$\" ...
         //     \"(\" ...
         //     <Literal> ...
         //     <Number> ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader(") =? i1");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      XPathParser xPathParser1 = new XPathParser((XPathParserTokenManager) xPathParser0.token_source);
      // Undeclared exception!
      try { 
        xPathParser1.PathExpr();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"?\" (63), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"-\" at line 1, column 1.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     \"$\" ...
         //     \"(\" ...
         //     <Literal> ...
         //     <Number> ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+Ai<");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"+\" at line 1, column 1.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     \"$\" ...
         //     \"(\" ...
         //     <Literal> ...
         //     <Number> ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ce|iling");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      XPathParser xPathParser1 = new XPathParser((XPathParserTokenManager) xPathParser0.token_source);
      try { 
        xPathParser1.PathExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"|\" at line 1, column 3.
         // Was expecting one of:
         //     \"/\" ...
         //     \"//\" ...
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"self::\" ...
         //     \"child::\" ...
         //     \"parent::\" ...
         //     \"ancestor::\" ...
         //     \"attribute::\" ...
         //     \"namespace::\" ...
         //     \"preceding::\" ...
         //     \"following::\" ...
         //     \"descendant::\" ...
         //     \"ancestor-or-self::\" ...
         //     \"following-sibling::\" ...
         //     \"preceding-sibling::\" ...
         //     \"descendant-or-self::\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \".\" ...
         //     \"..\" ...
         //     \"@\" ...
         //     \"*\" ...
         //     \"$\" ...
         //     \"(\" ...
         //     <Literal> ...
         //     <Number> ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/DEFULT");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6d");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      // Undeclared exception!
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("following-sibling::");
      XPathParser xPathParser0 = new XPathParser(stringReader0);
      try { 
        xPathParser0.PathExpr();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Encountered \"<EOF>\" at line 1, column 19.
         // Was expecting one of:
         //     \"or\" ...
         //     \"and\" ...
         //     \"mod\" ...
         //     \"div\" ...
         //     \"node\" ...
         //     \"text\" ...
         //     \"comment\" ...
         //     \"processing-instruction\" ...
         //     \"last\" ...
         //     \"position\" ...
         //     \"count\" ...
         //     \"id\" ...
         //     \"key\" ...
         //     \"local-name\" ...
         //     \"namespace-uri\" ...
         //     \"name\" ...
         //     \"string\" ...
         //     \"concat\" ...
         //     \"starts-with\" ...
         //     \"ends-with\" ...
         //     \"contains\" ...
         //     \"substring-before\" ...
         //     \"substring-after\" ...
         //     \"substring\" ...
         //     \"string-length\" ...
         //     \"normalize-space\" ...
         //     \"translate\" ...
         //     \"boolean\" ...
         //     \"not\" ...
         //     \"true\" ...
         //     \"false\" ...
         //     \"null\" ...
         //     \"lang\" ...
         //     \"number\" ...
         //     \"sum\" ...
         //     \"floor\" ...
         //     \"ceiling\" ...
         //     \"round\" ...
         //     \"format-number\" ...
         //     <NCName> ...
         //     \"*\" ...
         //     
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParser", e);
      }
  }
}
