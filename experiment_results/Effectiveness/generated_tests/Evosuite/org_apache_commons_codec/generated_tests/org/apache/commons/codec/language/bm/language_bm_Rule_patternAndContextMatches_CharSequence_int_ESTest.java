/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 04:54:15 GMT 2025
 */

package org.apache.commons.codec.language.bm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.codec.language.bm.Languages;
import org.apache.commons.codec.language.bm.Rule;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class language_bm_Rule_patternAndContextMatches_CharSequence_int_ESTest extends language_bm_Rule_patternAndContextMatches_CharSequence_int_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Rule.Phoneme> linkedList0 = new LinkedList<Rule.Phoneme>();
      Rule.PhonemeList rule_PhonemeList0 = new Rule.PhonemeList(linkedList0);
      Rule rule0 = new Rule("/org/apache/commons/codec/language/bm/%s_languages.txt", "/org/apache/commons/codec/language/bm/%s_languages.txt", "(v", rule_PhonemeList0);
      boolean boolean0 = rule0.patternAndContextMatches("/org/apache/commons/codec/language/bm/%s_languages.txt", 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Languages.LanguageSet languages_LanguageSet0 = mock(Languages.LanguageSet.class, new ViolatedAssumptionAnswer());
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("ALL", languages_LanguageSet0);
      Rule rule0 = new Rule("ash", "@&d:`{>:c8jlKnFcZ", "@&d:`{>:c8jlKnFcZ", rule_Phoneme0);
      boolean boolean0 = rule0.patternAndContextMatches("@&d:`{>:c8jlKnFcZ", 1);
      assertEquals("ash", rule0.getPattern());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Rule.Phoneme> linkedList0 = new LinkedList<Rule.Phoneme>();
      Rule.PhonemeList rule_PhonemeList0 = new Rule.PhonemeList(linkedList0);
      Rule rule0 = new Rule("", "", "", rule_PhonemeList0);
      boolean boolean0 = rule0.patternAndContextMatches("", 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Rule.Phoneme> linkedList0 = new LinkedList<Rule.Phoneme>();
      Rule.PhonemeList rule_PhonemeList0 = new Rule.PhonemeList(linkedList0);
      Rule rule0 = new Rule("", "", "", rule_PhonemeList0);
      // Undeclared exception!
      try { 
        rule0.patternAndContextMatches("", (-1642));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Can not match pattern at negative indexes
         //
         verifyException("org.apache.commons.codec.language.bm.Rule", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Rule.Phoneme rule_Phoneme0 = new Rule.Phoneme("ALL", (Languages.LanguageSet) null);
      Rule rule0 = new Rule("ash", "x.Y8.GBb3P", "ash", rule_Phoneme0);
      rule0.patternAndContextMatches("ash", 125);
      assertEquals("ash", rule0.getPattern());
  }
}
