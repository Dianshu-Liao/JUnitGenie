/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 04:28:20 GMT 2025
 */

package org.apache.commons.codec.digest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.FileSystem;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.spi.FileSystemProvider;
import java.security.MessageDigest;
import org.apache.commons.codec.digest.DigestUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class digest_DigestUtils_updateDigest_MessageDigest_Path_OpenOption_____ESTest extends digest_DigestUtils_updateDigest_MessageDigest_Path_OpenOption_____ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MessageDigest messageDigest0 = mock(MessageDigest.class, new ViolatedAssumptionAnswer());
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      FileSystemProvider fileSystemProvider0 = mock(FileSystemProvider.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(fileSystemProvider0).newInputStream(any(java.nio.file.Path.class) , any(java.nio.file.OpenOption[].class));
      FileSystem fileSystem0 = mock(FileSystem.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystemProvider0).when(fileSystem0).provider();
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystem0).when(path0).getFileSystem();
      OpenOption[] openOptionArray0 = new OpenOption[9];
      try { 
        DigestUtils.updateDigest(messageDigest0, path0, openOptionArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MessageDigest messageDigest0 = mock(MessageDigest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(messageDigest0).toString();
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      FileSystemProvider fileSystemProvider0 = mock(FileSystemProvider.class, new ViolatedAssumptionAnswer());
      doReturn(inputStream0).when(fileSystemProvider0).newInputStream(any(java.nio.file.Path.class) , any(java.nio.file.OpenOption[].class));
      FileSystem fileSystem0 = mock(FileSystem.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystemProvider0).when(fileSystem0).provider();
      Path path0 = mock(Path.class, new ViolatedAssumptionAnswer());
      doReturn(fileSystem0).when(path0).getFileSystem();
      MessageDigest messageDigest1 = DigestUtils.updateDigest(messageDigest0, path0, (OpenOption[]) null);
      assertSame(messageDigest1, messageDigest0);
  }
}
