/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 05:42:48 GMT 2025
 */

package org.apache.commons.lang3.tuple;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.MutablePair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class tuple_Pair_equals_Object_ESTest extends tuple_Pair_equals_Object_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ImmutablePair<Throwable, Throwable> immutablePair0 = new ImmutablePair<Throwable, Throwable>((Throwable) null, (Throwable) null);
      MutablePair<Throwable, ImmutablePair<Throwable, Throwable>> mutablePair0 = new MutablePair<Throwable, ImmutablePair<Throwable, Throwable>>();
      boolean boolean0 = mutablePair0.equals(immutablePair0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ImmutablePair<Throwable, Throwable> immutablePair0 = new ImmutablePair<Throwable, Throwable>(mockThrowable0, mockThrowable0);
      MutablePair<Throwable, ImmutablePair<Throwable, Throwable>> mutablePair0 = new MutablePair<Throwable, ImmutablePair<Throwable, Throwable>>(mockThrowable0, immutablePair0);
      boolean boolean0 = mutablePair0.equals(immutablePair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ImmutablePair<Throwable, Throwable> immutablePair0 = new ImmutablePair<Throwable, Throwable>(mockThrowable0, mockThrowable0);
      MutablePair<ImmutablePair<Throwable, Throwable>, ImmutablePair<Throwable, Throwable>> mutablePair0 = new MutablePair<ImmutablePair<Throwable, Throwable>, ImmutablePair<Throwable, Throwable>>(immutablePair0, immutablePair0);
      boolean boolean0 = mutablePair0.equals(immutablePair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      ImmutablePair<Throwable, Throwable> immutablePair0 = new ImmutablePair<Throwable, Throwable>(mockThrowable0, mockThrowable0);
      boolean boolean0 = immutablePair0.equals(immutablePair0);
      assertTrue(boolean0);
  }
}
