/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 06:07:21 GMT 2025
 */

package org.apache.commons.lang3.concurrent;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ConcurrentSkipListMap;
import org.apache.commons.lang3.concurrent.AtomicSafeInitializer;
import org.apache.commons.lang3.concurrent.ConcurrentInitializer;
import org.apache.commons.lang3.concurrent.ConcurrentUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class concurrent_ConcurrentUtils_createIfAbsentUnchecked_ConcurrentMap_Object_ConcurrentInitializer_ESTest extends concurrent_ConcurrentUtils_createIfAbsentUnchecked_ConcurrentMap_Object_ConcurrentInitializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConcurrentSkipListMap<Integer, Integer> concurrentSkipListMap0 = new ConcurrentSkipListMap<Integer, Integer>();
      Integer integer0 = new Integer(1677);
      AtomicSafeInitializer<Integer> atomicSafeInitializer0 = new AtomicSafeInitializer<Integer>();
      // Undeclared exception!
      try { 
        ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<Integer, Integer>) concurrentSkipListMap0, integer0, (ConcurrentInitializer<Integer>) atomicSafeInitializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);
      }
  }
}
