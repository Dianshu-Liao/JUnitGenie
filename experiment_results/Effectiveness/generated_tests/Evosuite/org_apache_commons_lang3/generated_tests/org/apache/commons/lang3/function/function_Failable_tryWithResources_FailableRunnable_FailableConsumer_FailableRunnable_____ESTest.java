/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 05:56:56 GMT 2025
 */

package org.apache.commons.lang3.function;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.lang.reflect.Array;
import org.apache.commons.lang3.function.Failable;
import org.apache.commons.lang3.function.FailableConsumer;
import org.apache.commons.lang3.function.FailableRunnable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class function_Failable_tryWithResources_FailableRunnable_FailableConsumer_FailableRunnable_____ESTest extends function_Failable_tryWithResources_FailableRunnable_FailableConsumer_FailableRunnable_____ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FailableRunnable<IOException> failableRunnable0 = (FailableRunnable<IOException>) mock(FailableRunnable.class, new ViolatedAssumptionAnswer());
      FailableConsumer<Throwable, IOException> failableConsumer0 = (FailableConsumer<Throwable, IOException>) mock(FailableConsumer.class, new ViolatedAssumptionAnswer());
      FailableRunnable<IOException>[] failableRunnableArray0 = (FailableRunnable<IOException>[]) Array.newInstance(FailableRunnable.class, 1);
      failableRunnableArray0[0] = failableRunnable0;
      Failable.tryWithResources(failableRunnable0, failableConsumer0, failableRunnableArray0);
      assertEquals(1, failableRunnableArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        Failable.tryWithResources((FailableRunnable<? extends Throwable>) null, (FailableConsumer<Throwable, ? extends Throwable>) null, (FailableRunnable<? extends Throwable>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.function.Failable", e);
      }
  }
}
