/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 06:30:17 GMT 2025
 */

package org.apache.commons.lang3.text.translate;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang3.text.translate.OctalUnescaper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class text_translate_OctalUnescaper_translate_CharSequence_int_Writer_ESTest extends text_translate_OctalUnescaper_translate_CharSequence_int_Writer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OctalUnescaper octalUnescaper0 = new OctalUnescaper();
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn('\\', '6', '\\', '6', '6').when(charSequence0).charAt(anyInt());
      doReturn((int)'\\').when(charSequence0).length();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        octalUnescaper0.translate(charSequence0, (int) '6', (Writer) stringWriter0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\\6\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      OctalUnescaper octalUnescaper0 = new OctalUnescaper();
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn('\\', '2', '\\', '2', '2').when(charSequence0).charAt(anyInt());
      doReturn((int)'\\').when(charSequence0).length();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        octalUnescaper0.translate(charSequence0, 89, (Writer) stringWriter0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\\2\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OctalUnescaper octalUnescaper0 = new OctalUnescaper();
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn('\\', '2', 'a', 'a').when(charSequence0).charAt(anyInt());
      doReturn((int)'\\').when(charSequence0).length();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        octalUnescaper0.translate(charSequence0, 83, (Writer) stringWriter0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"a\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OctalUnescaper octalUnescaper0 = new OctalUnescaper();
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn('\\', '2', '\\').when(charSequence0).charAt(anyInt());
      doReturn((int)'\\').when(charSequence0).length();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        octalUnescaper0.translate(charSequence0, 90, (Writer) stringWriter0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\\\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OctalUnescaper octalUnescaper0 = new OctalUnescaper();
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn('\\', '\\').when(charSequence0).charAt(anyInt());
      doReturn((int)'\\').when(charSequence0).length();
      StringWriter stringWriter0 = new StringWriter();
      int int0 = octalUnescaper0.translate(charSequence0, 48, (Writer) stringWriter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OctalUnescaper octalUnescaper0 = new OctalUnescaper();
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn('\\').when(charSequence0).charAt(anyInt());
      doReturn((int)'\\').when(charSequence0).length();
      StringWriter stringWriter0 = new StringWriter();
      int int0 = octalUnescaper0.translate(charSequence0, (int) '\\', (Writer) stringWriter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OctalUnescaper octalUnescaper0 = new OctalUnescaper();
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn('\\', 'a').when(charSequence0).charAt(anyInt());
      doReturn((int)'\\').when(charSequence0).length();
      StringWriter stringWriter0 = new StringWriter();
      octalUnescaper0.translate(charSequence0, (int) '2', (Writer) stringWriter0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      OctalUnescaper octalUnescaper0 = new OctalUnescaper();
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn('a').when(charSequence0).charAt(anyInt());
      doReturn(0).when(charSequence0).length();
      StringWriter stringWriter0 = new StringWriter();
      int int0 = octalUnescaper0.translate(charSequence0, (-118), (Writer) stringWriter0);
      assertEquals(0, int0);
  }
}
