/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 06:27:48 GMT 2025
 */

package org.apache.commons.lang3.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.apache.commons.lang3.text.WordUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class text_WordUtils_containsAllWords_CharSequence_CharSequence_____ESTest extends text_WordUtils_containsAllWords_CharSequence_CharSequence_____ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn(160, 0).when(charSequence0).length();
      doReturn((String) null).when(charSequence0).toString();
      CharSequence charSequence1 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn('a').when(charSequence1).charAt(anyInt());
      doReturn(160).when(charSequence1).length();
      doReturn((String) null).when(charSequence1).toString();
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = charSequence1;
      boolean boolean0 = WordUtils.containsAllWords(charSequence0, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn(863, 0).when(charSequence0).length();
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = charSequence0;
      charSequenceArray0[1] = charSequence0;
      charSequenceArray0[2] = charSequence0;
      charSequenceArray0[3] = charSequence0;
      charSequenceArray0[4] = charSequence0;
      charSequenceArray0[5] = charSequence0;
      charSequenceArray0[6] = charSequence0;
      charSequenceArray0[7] = charSequence0;
      boolean boolean0 = WordUtils.containsAllWords(charSequence0, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CharSequence charSequence0 = mock(CharSequence.class, new ViolatedAssumptionAnswer());
      doReturn(7).when(charSequence0).length();
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = WordUtils.containsAllWords(charSequence0, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = WordUtils.containsAllWords((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
  }
}
