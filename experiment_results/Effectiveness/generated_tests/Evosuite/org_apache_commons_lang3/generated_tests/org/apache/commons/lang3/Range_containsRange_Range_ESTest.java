/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 05:31:02 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.Comparator;
import org.apache.commons.lang3.Range;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Range_containsRange_Range_ESTest extends Range_containsRange_Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = new Range<Object>(object0, object0, comparator0);
      boolean boolean0 = range0.containsRange(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(319, 3584, (-352), (-27), 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = new Range<Object>(object0, object0, comparator0);
      boolean boolean0 = range0.containsRange(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      boolean boolean1 = range0.containsRange(range0);
      //  // Unstable assertion: assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = new Range<Object>(object0, object0, comparator0);
      boolean boolean0 = range0.containsRange((Range<Object>) null);
      assertFalse(boolean0);
  }
}
