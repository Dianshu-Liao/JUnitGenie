/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 05:42:15 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.CharSetUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class CharSetUtils_squeeze_String_String_____ESTest extends CharSetUtils_squeeze_String_String_____ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "x9";
      String string0 = CharSetUtils.squeeze("...", stringArray0);
      assertEquals("...", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "d05yF000|i'";
      String string0 = CharSetUtils.squeeze("d05yF000|i'", stringArray0);
      assertEquals("d05yF0|i'", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string0 = CharSetUtils.squeeze("Aborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0);
      assertEquals("Aborting to protect against StackOverflowEror - output of one lop is the input of another", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "x9";
      String string0 = CharSetUtils.squeeze("offset cannot be negative", stringArray0);
      assertEquals("offset cannot be negative", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = CharSetUtils.squeeze("offset cannot be negative", stringArray0);
      assertEquals("offset cannot be negative", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = CharSetUtils.squeeze("", stringArray0);
      assertEquals("", string0);
  }
}
