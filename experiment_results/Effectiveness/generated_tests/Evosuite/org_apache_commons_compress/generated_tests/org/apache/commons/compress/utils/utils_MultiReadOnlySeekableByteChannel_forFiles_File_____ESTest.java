/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 06:52:36 GMT 2025
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.nio.channels.SeekableByteChannel;
import org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class utils_MultiReadOnlySeekableByteChannel_forFiles_File_____ESTest extends utils_MultiReadOnlySeekableByteChannel_forFiles_File_____ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      File[] fileArray0 = new File[1];
      // Undeclared exception!
      try { 
        MultiReadOnlySeekableByteChannel.forFiles(fileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      File[] fileArray0 = new File[0];
      SeekableByteChannel seekableByteChannel0 = MultiReadOnlySeekableByteChannel.forFiles(fileArray0);
      assertEquals(0L, seekableByteChannel0.position());
  }
}
