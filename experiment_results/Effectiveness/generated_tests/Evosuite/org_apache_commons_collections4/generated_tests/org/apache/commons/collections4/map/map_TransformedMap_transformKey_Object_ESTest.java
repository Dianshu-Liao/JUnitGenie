/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 05:43:18 GMT 2025
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.HashMap;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.map.TransformedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class map_TransformedMap_transformKey_Object_ESTest extends map_TransformedMap_transformKey_Object_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> hashMap0 = new HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Transformer<HashMap<Integer, Integer>, HashMap<Integer, Integer>> transformer0 = (Transformer<HashMap<Integer, Integer>, HashMap<Integer, Integer>>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> transformedMap0 = new TransformedMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>(hashMap0, (Transformer<? super HashMap<Integer, Integer>, ? extends HashMap<Integer, Integer>>) null, transformer0);
      HashMap<Integer, Integer> hashMap2 = transformedMap0.transformKey(hashMap1);
      assertSame(hashMap1, hashMap2);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> hashMap0 = new HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      Transformer<HashMap<Integer, Integer>, HashMap<Integer, Integer>> transformer0 = (Transformer<HashMap<Integer, Integer>, HashMap<Integer, Integer>>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(transformer0).apply(any(java.util.HashMap.class));
      TransformedMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> transformedMap0 = new TransformedMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>(hashMap0, transformer0, transformer0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap2 = transformedMap0.transformKey(hashMap1);
      assertNull(hashMap2);
  }
}
