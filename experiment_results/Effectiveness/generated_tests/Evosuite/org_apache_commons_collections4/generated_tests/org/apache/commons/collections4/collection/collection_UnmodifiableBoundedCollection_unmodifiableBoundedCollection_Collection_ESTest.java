/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 04:23:39 GMT 2025
 */

package org.apache.commons.collections4.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.collections4.BoundedCollection;
import org.apache.commons.collections4.collection.SynchronizedCollection;
import org.apache.commons.collections4.collection.UnmodifiableBoundedCollection;
import org.apache.commons.collections4.list.UnmodifiableList;
import org.apache.commons.collections4.queue.CircularFifoQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class collection_UnmodifiableBoundedCollection_unmodifiableBoundedCollection_Collection_ESTest extends collection_UnmodifiableBoundedCollection_unmodifiableBoundedCollection_Collection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      UnmodifiableList<Integer> unmodifiableList0 = new UnmodifiableList<Integer>(linkedList0);
      SynchronizedCollection<Integer> synchronizedCollection0 = new SynchronizedCollection<Integer>(unmodifiableList0, linkedList0);
      // Undeclared exception!
      try { 
        UnmodifiableBoundedCollection.unmodifiableBoundedCollection((Collection<? extends Integer>) synchronizedCollection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Collection is not a bounded collection.
         //
         verifyException("org.apache.commons.collections4.collection.UnmodifiableBoundedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CircularFifoQueue<Object> circularFifoQueue0 = new CircularFifoQueue<Object>();
      BoundedCollection<Object> boundedCollection0 = UnmodifiableBoundedCollection.unmodifiableBoundedCollection((Collection<?>) circularFifoQueue0);
      assertFalse(boundedCollection0.isFull());
  }
}
