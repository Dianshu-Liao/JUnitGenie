/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 05:06:22 GMT 2025
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.HashMap;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.map.PredicatedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class map_PredicatedMap_isSetValueChecking__ESTest extends map_PredicatedMap_isSetValueChecking__ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Predicate<Integer> predicate0 = (Predicate<Integer>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      PredicatedMap<Integer, Integer> predicatedMap0 = new PredicatedMap<Integer, Integer>(hashMap0, predicate0, predicate0);
      boolean boolean0 = predicatedMap0.isSetValueChecking();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> hashMap0 = new HashMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>();
      Predicate<HashMap<Integer, Integer>> predicate0 = (Predicate<HashMap<Integer, Integer>>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      PredicatedMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>> predicatedMap0 = new PredicatedMap<HashMap<Integer, Integer>, HashMap<Integer, Integer>>(hashMap0, predicate0, (Predicate<? super HashMap<Integer, Integer>>) null);
      boolean boolean0 = predicatedMap0.isSetValueChecking();
      assertFalse(boolean0);
  }
}
