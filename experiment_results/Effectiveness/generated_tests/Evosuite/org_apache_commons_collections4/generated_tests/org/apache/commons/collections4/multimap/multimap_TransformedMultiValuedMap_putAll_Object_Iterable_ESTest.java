/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 05:55:10 GMT 2025
 */

package org.apache.commons.collections4.multimap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.AbstractMap;
import java.util.Stack;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.multimap.ArrayListValuedLinkedHashMap;
import org.apache.commons.collections4.multimap.TransformedMultiValuedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class multimap_TransformedMultiValuedMap_putAll_Object_Iterable_ESTest extends multimap_TransformedMultiValuedMap_putAll_Object_Iterable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ArrayListValuedLinkedHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> arrayListValuedLinkedHashMap0 = new ArrayListValuedLinkedHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Transformer<Integer, Integer> transformer0 = (Transformer<Integer, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> transformer1 = (Transformer<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> transformedMultiValuedMap0 = new TransformedMultiValuedMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(arrayListValuedLinkedHashMap0, transformer0, transformer1);
      Stack<AbstractMap.SimpleImmutableEntry<Integer, Integer>> stack0 = new Stack<AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      boolean boolean0 = transformedMultiValuedMap0.putAll((Integer) null, (Iterable<? extends AbstractMap.SimpleImmutableEntry<Integer, Integer>>) stack0);
      assertFalse(boolean0);
  }
}
