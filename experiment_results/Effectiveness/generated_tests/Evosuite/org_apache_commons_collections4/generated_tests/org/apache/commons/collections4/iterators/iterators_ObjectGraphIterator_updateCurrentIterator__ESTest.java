/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 07:10:43 GMT 2025
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.Iterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.iterators.ObjectGraphIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class iterators_ObjectGraphIterator_updateCurrentIterator__ESTest extends iterators_ObjectGraphIterator_updateCurrentIterator__ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>((Iterator<? extends Integer>) null);
      ObjectGraphIterator<Integer> objectGraphIterator1 = new ObjectGraphIterator<Integer>(objectGraphIterator0);
      objectGraphIterator1.updateCurrentIterator();
      assertNotSame(objectGraphIterator1, objectGraphIterator0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      Transformer<Object, Object> transformer0 = (Transformer<Object, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(transformer0).apply(any());
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(object0, transformer0);
      objectGraphIterator0.updateCurrentIterator();
      objectGraphIterator0.updateCurrentIterator();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Transformer<Object, Object> transformer0 = (Transformer<Object, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(transformer0, (Transformer<? super Object, ?>) null);
      objectGraphIterator0.updateCurrentIterator();
  }
}
