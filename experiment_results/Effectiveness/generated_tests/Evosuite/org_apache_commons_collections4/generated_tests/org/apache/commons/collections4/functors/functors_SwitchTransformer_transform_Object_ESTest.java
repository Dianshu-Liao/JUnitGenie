/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 04:39:11 GMT 2025
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class functors_SwitchTransformer_transform_Object_ESTest extends functors_SwitchTransformer_transform_Object_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Predicate<Integer>[] predicateArray0 = (Predicate<Integer>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Integer> predicate0 = (Predicate<Integer>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(predicate0).test(anyInt());
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      Integer integer0 = new Integer(0);
      Transformer<Integer, Integer> transformer0 = (Transformer<Integer, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      SwitchTransformer<Integer, Integer> switchTransformer0 = new SwitchTransformer<Integer, Integer>(predicateArray0, (Transformer<? super Integer, ? extends Integer>[]) null, transformer0);
      // Undeclared exception!
      try { 
        switchTransformer0.transform(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Predicate<Integer>[] predicateArray0 = (Predicate<Integer>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Integer> predicate0 = (Predicate<Integer>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(predicate0).test(anyInt());
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      Transformer<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>[] transformerArray0 = (Transformer<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>[]) Array.newInstance(Transformer.class, 1);
      Transformer<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> transformer0 = (Transformer<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(transformer0).apply(anyInt());
      SwitchTransformer<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> switchTransformer0 = new SwitchTransformer<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(predicateArray0, transformerArray0, transformer0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = switchTransformer0.transform((Integer) null);
      assertNull(abstractMap_SimpleImmutableEntry0);
  }
}
