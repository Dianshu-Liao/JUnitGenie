/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 06:12:26 GMT 2025
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.apache.commons.collections4.list.AbstractLinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class list_AbstractLinkedList_remove_Object_ESTest extends list_AbstractLinkedList_remove_Object_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>();
      AbstractLinkedList<Object> abstractLinkedList0 = (AbstractLinkedList<Object>) mock(AbstractLinkedList.class, CALLS_REAL_METHODS);
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(abstractLinkedList0, 0, 0);
      AbstractLinkedList.LinkedSubListIterator<Object> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<Object>(abstractLinkedList_LinkedSubList0, 0);
      AbstractLinkedList.Node<Object> abstractLinkedList_Node1 = new AbstractLinkedList.Node<Object>(abstractLinkedList_Node0, abstractLinkedList_Node0, abstractLinkedList_LinkedSubList0);
      abstractLinkedList_Node0.next = abstractLinkedList_Node1;
      abstractLinkedList_Node1.value = (Object) abstractLinkedList_Node0;
      AbstractLinkedList<Object> abstractLinkedList1 = abstractLinkedList_LinkedSubListIterator0.parent;
      assertNotNull(abstractLinkedList1);
      
      abstractLinkedList1.header = abstractLinkedList_Node0;
      boolean boolean0 = abstractLinkedList1.remove((Object) abstractLinkedList_LinkedSubList0);
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasNext());
      assertEquals(0, abstractLinkedList1.size());
      assertEquals(0, abstractLinkedList_LinkedSubListIterator0.nextIndex());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>();
      AbstractLinkedList<Object> abstractLinkedList0 = (AbstractLinkedList<Object>) mock(AbstractLinkedList.class, CALLS_REAL_METHODS);
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(abstractLinkedList0, 0, 0);
      AbstractLinkedList.LinkedSubListIterator<Object> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<Object>(abstractLinkedList_LinkedSubList0, 0);
      AbstractLinkedList.Node<Object> abstractLinkedList_Node1 = new AbstractLinkedList.Node<Object>(abstractLinkedList_Node0, abstractLinkedList_Node0, abstractLinkedList_LinkedSubList0);
      abstractLinkedList_Node0.next = abstractLinkedList_Node1;
      AbstractLinkedList<Object> abstractLinkedList1 = abstractLinkedList_LinkedSubListIterator0.parent;
      abstractLinkedList1.header = abstractLinkedList_Node0;
      boolean boolean0 = abstractLinkedList1.remove((Object) abstractLinkedList_LinkedSubList0);
      assertFalse(abstractLinkedList1.isEmpty());
      assertTrue(boolean0);
  }
}
