/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 05:47:55 GMT 2025
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.AbstractMap;
import java.util.HashMap;
import org.apache.commons.collections4.keyvalue.TiedMapEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class keyvalue_TiedMapEntry_equals_Object_ESTest extends keyvalue_TiedMapEntry_equals_Object_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      TiedMapEntry<Integer, Integer> tiedMapEntry0 = new TiedMapEntry<Integer, Integer>(hashMap0, (Integer) null);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(tiedMapEntry0);
      boolean boolean0 = tiedMapEntry0.equals(abstractMap_SimpleImmutableEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(1655);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      TiedMapEntry<Integer, Integer> tiedMapEntry0 = new TiedMapEntry<Integer, Integer>(hashMap0, integer0);
      boolean boolean0 = tiedMapEntry0.equals(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Integer integer0 = new Integer((-786));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Integer) null, integer0);
      TiedMapEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> tiedMapEntry0 = new TiedMapEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(hashMap0, abstractMap_SimpleImmutableEntry0);
      boolean boolean0 = tiedMapEntry0.equals(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Integer integer0 = new Integer(364);
      TiedMapEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>> tiedMapEntry0 = new TiedMapEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(hashMap0, integer0);
      boolean boolean0 = tiedMapEntry0.equals(tiedMapEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      TiedMapEntry<Integer, Integer> tiedMapEntry0 = new TiedMapEntry<Integer, Integer>(hashMap0, (Integer) null);
      boolean boolean0 = tiedMapEntry0.equals((Object) null);
      assertFalse(boolean0);
  }
}
