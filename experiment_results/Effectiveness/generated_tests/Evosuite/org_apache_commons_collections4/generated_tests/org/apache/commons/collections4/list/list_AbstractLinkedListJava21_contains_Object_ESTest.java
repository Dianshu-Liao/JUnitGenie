/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 06:03:53 GMT 2025
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.LinkedList;
import org.apache.commons.collections4.list.AbstractLinkedListJava21;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class list_AbstractLinkedListJava21_contains_Object_ESTest extends list_AbstractLinkedListJava21_contains_Object_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AbstractLinkedListJava21<LinkedList<Object>> abstractLinkedListJava21_0 = (AbstractLinkedListJava21<LinkedList<Object>>) mock(AbstractLinkedListJava21.class, CALLS_REAL_METHODS);
      AbstractLinkedListJava21.LinkedSubList<LinkedList<Object>> abstractLinkedListJava21_LinkedSubList0 = new AbstractLinkedListJava21.LinkedSubList<LinkedList<Object>>(abstractLinkedListJava21_0, 0, 0);
      AbstractLinkedListJava21.LinkedSubListIterator<LinkedList<Object>> abstractLinkedListJava21_LinkedSubListIterator0 = new AbstractLinkedListJava21.LinkedSubListIterator<LinkedList<Object>>(abstractLinkedListJava21_LinkedSubList0, 0);
      AbstractLinkedListJava21<LinkedList<Object>> abstractLinkedListJava21_1 = abstractLinkedListJava21_LinkedSubListIterator0.parent;
      AbstractLinkedListJava21.Node<LinkedList<Object>> abstractLinkedListJava21_Node0 = new AbstractLinkedListJava21.Node<LinkedList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      AbstractLinkedListJava21.Node<LinkedList<Object>> abstractLinkedListJava21_Node1 = new AbstractLinkedListJava21.Node<LinkedList<Object>>(linkedList0);
      abstractLinkedListJava21_Node0.next = abstractLinkedListJava21_Node1;
      abstractLinkedListJava21_1.header = abstractLinkedListJava21_Node0;
      assertFalse(abstractLinkedListJava21_LinkedSubListIterator0.hasNext());
      
      boolean boolean0 = abstractLinkedListJava21_1.contains(abstractLinkedListJava21_LinkedSubList0);
      assertTrue(boolean0);
      assertFalse(abstractLinkedListJava21_LinkedSubListIterator0.hasPrevious());
      assertTrue(abstractLinkedListJava21_1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AbstractLinkedListJava21<LinkedList<Object>> abstractLinkedListJava21_0 = (AbstractLinkedListJava21<LinkedList<Object>>) mock(AbstractLinkedListJava21.class, CALLS_REAL_METHODS);
      AbstractLinkedListJava21.LinkedSubList<LinkedList<Object>> abstractLinkedListJava21_LinkedSubList0 = new AbstractLinkedListJava21.LinkedSubList<LinkedList<Object>>(abstractLinkedListJava21_0, 0, 0);
      AbstractLinkedListJava21.LinkedSubListIterator<LinkedList<Object>> abstractLinkedListJava21_LinkedSubListIterator0 = new AbstractLinkedListJava21.LinkedSubListIterator<LinkedList<Object>>(abstractLinkedListJava21_LinkedSubList0, 0);
      AbstractLinkedListJava21<LinkedList<Object>> abstractLinkedListJava21_1 = abstractLinkedListJava21_LinkedSubListIterator0.parent;
      assertNotNull(abstractLinkedListJava21_1);
      
      AbstractLinkedListJava21.Node<LinkedList<Object>> abstractLinkedListJava21_Node0 = new AbstractLinkedListJava21.Node<LinkedList<Object>>();
      abstractLinkedListJava21_1.header = abstractLinkedListJava21_Node0;
      boolean boolean0 = abstractLinkedListJava21_1.contains(abstractLinkedListJava21_LinkedSubList0);
      assertFalse(abstractLinkedListJava21_LinkedSubListIterator0.hasNext());
      assertEquals(0, abstractLinkedListJava21_1.size());
      assertFalse(boolean0);
      assertFalse(abstractLinkedListJava21_LinkedSubListIterator0.hasPrevious());
  }
}
