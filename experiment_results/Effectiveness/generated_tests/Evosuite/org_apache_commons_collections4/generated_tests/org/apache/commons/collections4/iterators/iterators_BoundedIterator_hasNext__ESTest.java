/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 07:02:39 GMT 2025
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.Iterator;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class iterators_BoundedIterator_hasNext__ESTest extends iterators_BoundedIterator_hasNext__ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      BoundedIterator<Object> boundedIterator0 = new BoundedIterator<Object>(iterator0, 0L, 0L);
      boolean boolean0 = boundedIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iterator0).hasNext();
      BoundedIterator<Object> boundedIterator0 = new BoundedIterator<Object>(iterator0, 2215L, 2215L);
      boolean boolean0 = boundedIterator0.hasNext();
      assertFalse(boolean0);
  }
}
