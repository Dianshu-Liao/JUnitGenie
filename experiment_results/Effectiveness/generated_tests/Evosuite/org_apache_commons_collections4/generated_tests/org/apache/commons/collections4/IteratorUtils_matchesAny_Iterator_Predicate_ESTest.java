/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 03:54:47 GMT 2025
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.StringTokenizer;
import org.apache.commons.collections4.IteratorUtils;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.SingletonIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class IteratorUtils_matchesAny_Iterator_Predicate_ESTest extends IteratorUtils_matchesAny_Iterator_Predicate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SingletonIterator<HashMap<StringTokenizer, StringTokenizer>> singletonIterator0 = new SingletonIterator<HashMap<StringTokenizer, StringTokenizer>>((HashMap<StringTokenizer, StringTokenizer>) null, true);
      Predicate<HashMap<StringTokenizer, StringTokenizer>> predicate0 = (Predicate<HashMap<StringTokenizer, StringTokenizer>>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).test(any(java.util.HashMap.class));
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<HashMap<StringTokenizer, StringTokenizer>>) singletonIterator0, (Predicate<? super HashMap<StringTokenizer, StringTokenizer>>) predicate0);
      assertFalse(singletonIterator0.hasNext());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Hashtable<Class<StringTokenizer>, StringTokenizer> hashtable0 = new Hashtable<Class<StringTokenizer>, StringTokenizer>();
      EntrySetMapIterator<Class<StringTokenizer>, StringTokenizer> entrySetMapIterator0 = new EntrySetMapIterator<Class<StringTokenizer>, StringTokenizer>(hashtable0);
      Predicate<Class<StringTokenizer>> predicate0 = (Predicate<Class<StringTokenizer>>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = IteratorUtils.matchesAny((Iterator<Class<StringTokenizer>>) entrySetMapIterator0, (Predicate<? super Class<StringTokenizer>>) predicate0);
      assertFalse(boolean0);
  }
}
