/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 04:02:15 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationFieldType;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.Partial;
import org.joda.time.ReadablePeriod;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Partial_withPeriodAdded_ReadablePeriod_int_ESTest extends Partial_withPeriodAdded_ReadablePeriod_int_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((DurationFieldType) null).when(dateTimeFieldType0).getDurationType();
      doReturn((String) null).when(dateTimeFieldType0).toString();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[2];
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      Months months0 = Months.EIGHT;
      // Undeclared exception!
      try { 
        partial0.withPeriodAdded(months0, 18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(chronology0).when(chronology1).withUTC();
      Partial partial0 = new Partial(chronology1);
      Months months0 = Months.ZERO;
      Partial partial1 = partial0.withPeriodAdded(months0, 0);
      assertSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(chronology0).when(chronology1).withUTC();
      Partial partial0 = new Partial(chronology1);
      assertEquals(0, partial0.size());
      
      Minutes minutes0 = Minutes.MAX_VALUE;
      Partial partial1 = partial0.withPeriodAdded(minutes0, (-186));
      assertNotSame(partial1, partial0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((Chronology) null).when(chronology0).withUTC();
      Partial partial0 = new Partial(chronology0);
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) null, 10080);
      assertEquals(0, partial1.size());
  }
}
