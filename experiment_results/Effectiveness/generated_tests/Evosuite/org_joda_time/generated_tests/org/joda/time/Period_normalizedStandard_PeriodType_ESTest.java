/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 05:22:26 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DurationFieldType;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Period_normalizedStandard_PeriodType_ESTest extends Period_normalizedStandard_PeriodType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Period period0 = new Period();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[2];
      PeriodType periodType0 = new PeriodType("a^9|A]MtooL=L", durationFieldTypeArray0, intArray0);
      Period period1 = period0.normalizedStandard(periodType0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Period period0 = new Period(0, (-2339), (-588), (-652), 5, (-652), 292272708, 0);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("\"tViV4I*rJ", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: P-2339M-588W-652DT5H-652M292272708S
         //
         verifyException("org.joda.time.Period", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Period period0 = new Period(811, 811, 811, 811, 811, 811, 811, 28);
      Period period1 = period0.normalizedStandard((PeriodType) null);
      assertFalse(period1.equals((Object)period0));
  }
}
