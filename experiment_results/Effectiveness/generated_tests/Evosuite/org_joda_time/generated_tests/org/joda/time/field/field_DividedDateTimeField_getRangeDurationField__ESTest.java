/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 06:06:33 GMT 2025
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.PreciseDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.field.ScaledDurationField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class field_DividedDateTimeField_getRangeDurationField__ESTest extends field_DividedDateTimeField_getRangeDurationField__ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1603L);
      DurationFieldType durationFieldType1 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(durationFieldType1).getName();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(preciseDurationField0, durationFieldType1, 85);
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, preciseDurationField0, scaledDurationField0);
      DurationFieldType durationFieldType2 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn(durationFieldType2).when(dateTimeFieldType1).getDurationType();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(preciseDateTimeField0, dateTimeFieldType1, 85);
      dividedDateTimeField0.getRangeDurationField();
      assertEquals(85, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1603L);
      DurationFieldType durationFieldType1 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(durationFieldType1).getName();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(preciseDurationField0, durationFieldType1, 85);
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, preciseDurationField0, scaledDurationField0);
      DurationFieldType durationFieldType2 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn(durationFieldType2).when(dateTimeFieldType1).getDurationType();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(preciseDateTimeField0, dateTimeFieldType1, 85);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0);
      DateTimeFieldType dateTimeFieldType2 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      DividedDateTimeField dividedDateTimeField1 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType2);
      DurationField durationField0 = dividedDateTimeField1.getRangeDurationField();
      assertEquals(0, dividedDateTimeField1.getMinimumValue());
      assertNotNull(durationField0);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals(85, dividedDateTimeField1.getDivisor());
      assertEquals(0, dividedDateTimeField1.getMaximumValue());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
  }
}
