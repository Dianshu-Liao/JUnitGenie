/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 05:01:21 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class IllegalFieldValueException_getIllegalValueAsString__ESTest extends IllegalFieldValueException_getIllegalValueAsString__ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      Double double0 = new Double((-1.0));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, double0, double0, double0);
      String string0 = illegalFieldValueException0.getIllegalValueAsString();
      assertNotNull(string0);
      assertEquals("Value -1.0 for hours must be in the range [-1.0,-1.0]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("I\t/M/W", "I\t/M/W");
      String string0 = illegalFieldValueException0.getIllegalValueAsString();
      assertEquals("Value \"I\t/M/W\" for I\t/M/W is not supported", illegalFieldValueException0.getMessage());
      assertEquals("I\t/M/W", string0);
  }
}
