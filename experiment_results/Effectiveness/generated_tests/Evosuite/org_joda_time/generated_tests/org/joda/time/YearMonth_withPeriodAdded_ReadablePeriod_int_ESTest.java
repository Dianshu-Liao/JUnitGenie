/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 04:40:32 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.Period;
import org.joda.time.ReadablePeriod;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.YearMonth;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class YearMonth_withPeriodAdded_ReadablePeriod_int_ESTest extends YearMonth_withPeriodAdded_ReadablePeriod_int_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) uTCDateTimeZone0);
      Period period0 = new Period();
      YearMonth yearMonth1 = yearMonth0.withPeriodAdded(period0, 1);
      assertNotSame(yearMonth1, yearMonth0);
      assertEquals(2, yearMonth1.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) uTCDateTimeZone0);
      Period period0 = new Period();
      YearMonth yearMonth1 = yearMonth0.withPeriodAdded(period0, 0);
      assertEquals(2, yearMonth1.size());
      assertSame(yearMonth1, yearMonth0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-1L), (Chronology) null);
      YearMonth yearMonth1 = yearMonth0.withPeriodAdded((ReadablePeriod) null, 0);
      assertEquals(2, yearMonth1.size());
  }
}
