/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 04:21:49 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateTimeComparator;
import org.joda.time.DateTimeFieldType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class DateTimeComparator_toString__ESTest extends DateTimeComparator_toString__ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn("d").when(dateTimeFieldType0).getName();
      DateTimeComparator dateTimeComparator0 = new DateTimeComparator((DateTimeFieldType) null, dateTimeFieldType0);
      String string0 = dateTimeComparator0.toString();
      assertEquals("DateTimeComparator[-d]", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType0).getName();
      DateTimeComparator dateTimeComparator0 = new DateTimeComparator(dateTimeFieldType0, dateTimeFieldType0);
      String string0 = dateTimeComparator0.toString();
      assertEquals("DateTimeComparator[null]", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateTimeComparator dateTimeComparator0 = new DateTimeComparator((DateTimeFieldType) null, (DateTimeFieldType) null);
      String string0 = dateTimeComparator0.toString();
      assertEquals("DateTimeComparator[]", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dateTimeFieldType0).getName();
      DateTimeComparator dateTimeComparator0 = new DateTimeComparator(dateTimeFieldType0, (DateTimeFieldType) null);
      String string0 = dateTimeComparator0.toString();
      assertEquals("DateTimeComparator[null-]", string0);
  }
}
