/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 06:08:17 GMT 2025
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationFieldType;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.PreciseDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.field.SkipDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class field_RemainderDateTimeField_get_long_ESTest extends field_RemainderDateTimeField_get_long_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 604799971L);
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, millisDurationField0, preciseDurationField0);
      DurationFieldType durationFieldType1 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn(durationFieldType1).when(dateTimeFieldType1).getRangeDurationType();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(preciseDateTimeField0, dateTimeFieldType1, 1170);
      int int0 = remainderDateTimeField0.get(604799971L);
      assertEquals(0, int0);
      assertEquals(1170, remainderDateTimeField0.getDivisor());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 604800000L);
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, millisDurationField0, preciseDurationField0);
      DurationFieldType durationFieldType1 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn(durationFieldType1).when(dateTimeFieldType1).getRangeDurationType();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) null, preciseDateTimeField0, 1170);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(skipDateTimeField0, dateTimeFieldType1, 1170);
      int int0 = remainderDateTimeField0.get(0L);
      assertEquals(1169, int0);
  }
}
