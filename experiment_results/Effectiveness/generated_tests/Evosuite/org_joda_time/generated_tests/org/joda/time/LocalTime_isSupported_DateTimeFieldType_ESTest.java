/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 04:35:01 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class LocalTime_isSupported_DateTimeFieldType_ESTest extends LocalTime_isSupported_DateTimeFieldType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = new LocalTime(localTime0);
      assertTrue(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      DurationFieldType durationFieldType1 = DurationFieldType.HOURS_TYPE;
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn(durationFieldType1).when(dateTimeFieldType0).getDurationType();
      doReturn(durationFieldType0).when(dateTimeFieldType0).getRangeDurationType();
      boolean boolean0 = localTime0.isSupported(dateTimeFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      boolean boolean0 = localTime0.isSupported((DateTimeFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      doReturn(durationFieldType0).when(dateTimeFieldType0).getDurationType();
      boolean boolean0 = localTime0.isSupported(dateTimeFieldType0);
      assertFalse(boolean0);
  }
}
