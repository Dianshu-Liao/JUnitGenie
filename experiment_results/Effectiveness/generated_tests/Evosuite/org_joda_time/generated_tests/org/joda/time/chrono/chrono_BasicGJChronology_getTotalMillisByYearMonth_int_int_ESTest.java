/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 05:53:52 GMT 2025
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DurationField;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class chrono_BasicGJChronology_getTotalMillisByYearMonth_int_int_ESTest extends chrono_BasicGJChronology_getTotalMillisByYearMonth_int_int_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(durationField0).isSupported();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(dateTimeField0).isSupported();
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(durationField1).isSupported();
      DateTimeField dateTimeField1 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(dateTimeField1).isSupported();
      DateTimeField dateTimeField2 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(durationField0).when(chronology0).centuries();
      doReturn(dateTimeField0).when(chronology0).centuryOfEra();
      doReturn(dateTimeField0).when(chronology0).clockhourOfDay();
      doReturn(dateTimeField0).when(chronology0).clockhourOfHalfday();
      doReturn(dateTimeField0).when(chronology0).dayOfMonth();
      doReturn(dateTimeField0).when(chronology0).dayOfWeek();
      doReturn(dateTimeField0).when(chronology0).dayOfYear();
      doReturn(durationField0).when(chronology0).days();
      doReturn(dateTimeField0).when(chronology0).era();
      doReturn(durationField0).when(chronology0).eras();
      doReturn(dateTimeField0).when(chronology0).halfdayOfDay();
      doReturn(durationField1).when(chronology0).halfdays();
      doReturn(dateTimeField0, dateTimeField0).when(chronology0).hourOfDay();
      doReturn(dateTimeField1).when(chronology0).hourOfHalfday();
      doReturn(durationField1).when(chronology0).hours();
      doReturn(durationField1).when(chronology0).millis();
      doReturn(dateTimeField1, dateTimeField1).when(chronology0).millisOfDay();
      doReturn(dateTimeField1).when(chronology0).millisOfSecond();
      doReturn(dateTimeField1).when(chronology0).minuteOfDay();
      doReturn(dateTimeField0).when(chronology0).minuteOfHour();
      doReturn((DurationField) null).when(chronology0).minutes();
      doReturn(dateTimeField0).when(chronology0).monthOfYear();
      doReturn((DurationField) null).when(chronology0).months();
      doReturn(dateTimeField1).when(chronology0).secondOfDay();
      doReturn(dateTimeField0).when(chronology0).secondOfMinute();
      doReturn((DurationField) null).when(chronology0).seconds();
      doReturn(dateTimeField1).when(chronology0).weekOfWeekyear();
      doReturn(durationField1).when(chronology0).weeks();
      doReturn(dateTimeField1).when(chronology0).weekyear();
      doReturn(dateTimeField1).when(chronology0).weekyearOfCentury();
      doReturn(durationField0).when(chronology0).weekyears();
      doReturn(dateTimeField0, dateTimeField2).when(chronology0).year();
      doReturn(dateTimeField1).when(chronology0).yearOfCentury();
      doReturn(dateTimeField1).when(chronology0).yearOfEra();
      doReturn(durationField1).when(chronology0).years();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = new IslamicChronology(chronology0, (Object) null, islamicChronology_LeapYearPatternType0);
      CopticChronology copticChronology0 = new CopticChronology(islamicChronology0, islamicChronology_LeapYearPatternType0, 1);
      JulianChronology julianChronology0 = new JulianChronology(copticChronology0, islamicChronology_LeapYearPatternType0, 1);
      // Undeclared exception!
      try { 
        julianChronology0.getTotalMillisByYearMonth(12, (-2830));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2831
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(chronology0).centuries();
      doReturn((DateTimeField) null).when(chronology0).centuryOfEra();
      doReturn((DateTimeField) null).when(chronology0).clockhourOfDay();
      doReturn((DateTimeField) null).when(chronology0).clockhourOfHalfday();
      doReturn((DateTimeField) null).when(chronology0).dayOfMonth();
      doReturn((DateTimeField) null).when(chronology0).dayOfWeek();
      doReturn((DateTimeField) null).when(chronology0).dayOfYear();
      doReturn((DurationField) null).when(chronology0).days();
      doReturn((DateTimeField) null).when(chronology0).era();
      doReturn((DurationField) null).when(chronology0).eras();
      doReturn((DateTimeField) null).when(chronology0).halfdayOfDay();
      doReturn((DurationField) null).when(chronology0).halfdays();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).hourOfDay();
      doReturn((DateTimeField) null).when(chronology0).hourOfHalfday();
      doReturn((DurationField) null).when(chronology0).hours();
      doReturn((DurationField) null).when(chronology0).millis();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).millisOfDay();
      doReturn((DateTimeField) null).when(chronology0).millisOfSecond();
      doReturn((DateTimeField) null).when(chronology0).minuteOfDay();
      doReturn((DateTimeField) null).when(chronology0).minuteOfHour();
      doReturn((DurationField) null).when(chronology0).minutes();
      doReturn((DateTimeField) null).when(chronology0).monthOfYear();
      doReturn((DurationField) null).when(chronology0).months();
      doReturn((DateTimeField) null).when(chronology0).secondOfDay();
      doReturn((DateTimeField) null).when(chronology0).secondOfMinute();
      doReturn((DurationField) null).when(chronology0).seconds();
      doReturn((DateTimeField) null).when(chronology0).weekOfWeekyear();
      doReturn((DurationField) null).when(chronology0).weeks();
      doReturn((DateTimeField) null).when(chronology0).weekyear();
      doReturn((DateTimeField) null).when(chronology0).weekyearOfCentury();
      doReturn((DurationField) null).when(chronology0).weekyears();
      doReturn((DateTimeField) null, (DateTimeField) null).when(chronology0).year();
      doReturn((DateTimeField) null).when(chronology0).yearOfCentury();
      doReturn((DateTimeField) null).when(chronology0).yearOfEra();
      doReturn((DurationField) null).when(chronology0).years();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = new IslamicChronology(chronology0, (Object) null, islamicChronology_LeapYearPatternType0);
      CopticChronology copticChronology0 = new CopticChronology(islamicChronology0, islamicChronology_LeapYearPatternType0, 1);
      EthiopicChronology ethiopicChronology0 = new EthiopicChronology(copticChronology0, (Object) null, 1);
      Object object0 = new Object();
      JulianChronology julianChronology0 = new JulianChronology(ethiopicChronology0, object0, 1);
      // Undeclared exception!
      try { 
        julianChronology0.getTotalMillisByYearMonth(1, 1892);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1891
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }
}
