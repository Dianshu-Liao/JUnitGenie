/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 04:43:24 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeUtils;
import org.joda.time.MutableInterval;
import org.joda.time.ReadableInterval;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class DateTimeUtils_getIntervalChronology_ReadableInterval_ESTest extends DateTimeUtils_getIntervalChronology_ReadableInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInterval) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(chronology0).toString();
      MutableInterval mutableInterval0 = new MutableInterval(1196L, 1196L, chronology0);
      Chronology chronology1 = DateTimeUtils.getIntervalChronology((ReadableInterval) mutableInterval0);
      assertSame(chronology1, chronology0);
  }
}
