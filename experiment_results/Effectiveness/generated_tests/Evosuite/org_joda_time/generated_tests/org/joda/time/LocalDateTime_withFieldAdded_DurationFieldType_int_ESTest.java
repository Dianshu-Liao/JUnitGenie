/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 04:26:56 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalDateTime;
import org.joda.time.UTCDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class LocalDateTime_withFieldAdded_DurationFieldType_int_ESTest extends LocalDateTime_withFieldAdded_DurationFieldType_int_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) uTCDateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, 23);
      assertNotSame(localDateTime1, localDateTime0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        localDateTime0.withFieldAdded((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, 0);
      assertSame(localDateTime0, localDateTime1);
  }
}
