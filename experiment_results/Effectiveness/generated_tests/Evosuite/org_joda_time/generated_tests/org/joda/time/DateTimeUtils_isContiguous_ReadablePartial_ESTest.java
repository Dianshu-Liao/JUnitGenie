/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 04:45:01 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeUtils;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.MonthDay;
import org.joda.time.Partial;
import org.joda.time.ReadablePartial;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class DateTimeUtils_isContiguous_ReadablePartial_ESTest extends DateTimeUtils_isContiguous_ReadablePartial_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[1];
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn(durationFieldType0).when(durationField0).getType();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((DurationFieldType) null).when(durationField1).getType();
      DateTimeField dateTimeField1 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(durationField1, durationField1).when(dateTimeField1).getRangeDurationField();
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(dateTimeField1).when(chronology0).dayOfMonth();
      doReturn(dateTimeField0).when(chronology0).monthOfYear();
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(chronology1).get(any(org.joda.time.ReadablePartial.class) , anyLong());
      doReturn((String) null).when(chronology1).toString();
      doReturn(chronology0).when(chronology1).withUTC();
      MonthDay monthDay0 = new MonthDay(1944L, chronology1);
      boolean boolean0 = DateTimeUtils.isContiguous(monthDay0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimeUtils dateTimeUtils0 = new DateTimeUtils();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils0.SYSTEM_MILLIS_PROVIDER);
      DateTimeUtils.setCurrentMillisSystem();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils0.SYSTEM_MILLIS_PROVIDER);
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils0.SYSTEM_MILLIS_PROVIDER);
      int[] intArray0 = null;
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn((DurationFieldType) null).when(durationField0).getType();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      DurationField durationField1 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      DateTimeField dateTimeField1 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(durationField1, (DurationField) null).when(dateTimeField1).getRangeDurationField();
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(dateTimeField1).when(chronology0).dayOfMonth();
      doReturn(dateTimeField0).when(chronology0).monthOfYear();
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(chronology1).get(any(org.joda.time.ReadablePartial.class) , anyLong());
      doReturn((String) null).when(chronology1).toString();
      doReturn(chronology0).when(chronology1).withUTC();
      MonthDay monthDay0 = new MonthDay(0L, chronology1);
      // Undeclared exception!
      try { 
        DateTimeUtils.isContiguous(monthDay0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int[] intArray0 = new int[1];
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      DurationField durationField0 = mock(DurationField.class, new ViolatedAssumptionAnswer());
      doReturn(durationFieldType0).when(durationField0).getType();
      DateTimeField dateTimeField0 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn(durationField0).when(dateTimeField0).getDurationField();
      DateTimeField dateTimeField1 = mock(DateTimeField.class, new ViolatedAssumptionAnswer());
      doReturn((DurationField) null).when(dateTimeField1).getRangeDurationField();
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(dateTimeField1).when(chronology0).dayOfMonth();
      doReturn(dateTimeField0).when(chronology0).monthOfYear();
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(chronology1).get(any(org.joda.time.ReadablePartial.class) , anyLong());
      doReturn((String) null).when(chronology1).toString();
      doReturn(chronology0).when(chronology1).withUTC();
      MonthDay monthDay0 = new MonthDay(1944L, chronology1);
      boolean boolean0 = DateTimeUtils.isContiguous(monthDay0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(chronology0).toString();
      doReturn((Chronology) null).when(chronology0).withUTC();
      Partial partial0 = new Partial(chronology0);
      boolean boolean0 = DateTimeUtils.isContiguous(partial0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.isContiguous((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Partial must not be null
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }
}
