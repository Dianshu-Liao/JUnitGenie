/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 06:02:24 GMT 2025
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationFieldType;
import org.joda.time.field.DecoratedDurationField;
import org.joda.time.field.DelegatedDurationField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.PreciseDateTimeField;
import org.joda.time.field.ScaledDurationField;
import org.joda.time.field.SkipDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class field_OffsetDateTimeField__init__DateTimeField_DateTimeFieldType_int_int_int_ESTest extends field_OffsetDateTimeField__init__DateTimeField_DateTimeFieldType_int_int_int_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(delegatedDurationField0, durationFieldType0);
      DurationFieldType durationFieldType1 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(millisDurationField0, durationFieldType1, 292272708);
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, decoratedDurationField0, scaledDurationField0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(chronology0, preciseDateTimeField0, (-2889));
      DateTimeFieldType dateTimeFieldType1 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipDateTimeField0, dateTimeFieldType1, (-2889), (-2889), (-1218));
      assertEquals((-2889), offsetDateTimeField0.getOffset());
      assertEquals((-2889), offsetDateTimeField0.getMinimumValue());
      assertEquals((-1218), offsetDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(delegatedDurationField0, durationFieldType0);
      DurationFieldType durationFieldType1 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(millisDurationField0, durationFieldType1, 292272708);
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, decoratedDurationField0, scaledDurationField0);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(chronology0, preciseDateTimeField0, (-2889));
      OffsetDateTimeField offsetDateTimeField0 = null;
      try {
        offsetDateTimeField0 = new OffsetDateTimeField(skipDateTimeField0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offset cannot be zero
         //
         verifyException("org.joda.time.field.OffsetDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = mock(DateTimeFieldType.class, new ViolatedAssumptionAnswer());
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(millisDurationField0);
      DurationFieldType durationFieldType0 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(delegatedDurationField0, durationFieldType0);
      DurationFieldType durationFieldType1 = mock(DurationFieldType.class, new ViolatedAssumptionAnswer());
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(millisDurationField0, durationFieldType1, 292272708);
      PreciseDateTimeField preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, decoratedDurationField0, scaledDurationField0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(preciseDateTimeField0, 292272708);
      assertEquals(292272708, offsetDateTimeField0.getMinimumValue());
      assertEquals(584545415, offsetDateTimeField0.getMaximumValue());
      assertEquals(292272708, offsetDateTimeField0.getOffset());
  }
}
