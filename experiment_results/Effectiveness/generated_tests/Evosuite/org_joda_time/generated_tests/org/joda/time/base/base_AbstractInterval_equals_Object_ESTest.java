/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 06:41:43 GMT 2025
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Interval;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class base_AbstractInterval_equals_Object_ESTest extends base_AbstractInterval_equals_Object_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L, chronology0);
      MutableInterval mutableInterval1 = new MutableInterval(0L, 0L);
      boolean boolean0 = mutableInterval0.equals(mutableInterval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1532L);
      Months months0 = Months.TWELVE;
      Interval interval0 = new Interval(dateTime0, months0);
      MutableInterval mutableInterval0 = new MutableInterval((ReadableDuration) null, dateTime0);
      boolean boolean0 = interval0.equals(mutableInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L, chronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      Duration duration0 = new Duration(mutableInterval0);
      MutableInterval mutableInterval1 = new MutableInterval(mutableDateTime0, duration0);
      boolean boolean0 = mutableInterval0.equals(mutableInterval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Duration duration0 = new Duration((ReadableInstant) null, (ReadableInstant) null);
      Interval interval0 = new Interval((ReadableInstant) null, duration0);
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      boolean boolean0 = mutableInterval0.equals(interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      Interval interval0 = new Interval((-2561L), 1661L, chronology0);
      boolean boolean0 = interval0.equals(interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Duration duration0 = new Duration((ReadableInstant) null, (ReadableInstant) null);
      Interval interval0 = new Interval((ReadableInstant) null, duration0);
      Object object0 = new Object();
      boolean boolean0 = interval0.equals(object0);
      assertFalse(boolean0);
  }
}
