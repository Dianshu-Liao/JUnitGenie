/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 20 04:50:10 GMT 2025
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.YearMonthDay;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class YearMonthDay_withChronologyRetainFields_Chronology_ESTest extends YearMonthDay_withChronologyRetainFields_Chronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(chronology0).get(any(org.joda.time.ReadablePartial.class) , anyLong());
      doReturn((Chronology) null).when(chronology0).withUTC();
      YearMonthDay yearMonthDay0 = new YearMonthDay(2276L, chronology0);
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((Chronology) null).when(chronology1).withUTC();
      YearMonthDay yearMonthDay1 = yearMonthDay0.withChronologyRetainFields(chronology1);
      assertSame(yearMonthDay1, yearMonthDay0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[0];
      Chronology chronology0 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      Chronology chronology1 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(chronology1).get(any(org.joda.time.ReadablePartial.class) , anyLong());
      doReturn(chronology0).when(chronology1).withUTC();
      YearMonthDay yearMonthDay0 = new YearMonthDay((-2153L), chronology1);
      Chronology chronology2 = mock(Chronology.class, new ViolatedAssumptionAnswer());
      doReturn((Chronology) null).when(chronology2).withUTC();
      // Undeclared exception!
      try { 
        yearMonthDay0.withChronologyRetainFields(chronology2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BasePartial", e);
      }
  }
}
