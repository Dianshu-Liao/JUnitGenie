package org.apache.commons.compress.archivers.zip;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.EOFException;
import java.lang.reflect.Method;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.mockito.*;
import org.junit.jupiter.api.*;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.apache.commons.compress.archivers.zip.ZipConstants.DWORD;
import static org.apache.commons.compress.archivers.zip.ZipConstants.SHORT;
import static org.apache.commons.compress.archivers.zip.ZipConstants.WORD;
import static org.apache.commons.compress.archivers.zip.ZipConstants.ZIP64_MAGIC;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.Objects;
import java.util.function.Function;
import java.util.zip.CRC32;
import java.util.zip.DataFormatException;
import java.util.zip.Inflater;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream;
import org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.apache.commons.compress.utils.IOUtils;
import org.apache.commons.compress.utils.InputStreamStatistics;
import org.apache.commons.io.input.BoundedInputStream;

public class ZipArchiveInputStream_readFully_25_0_Test {

    private ZipArchiveInputStream zipArchiveInputStream;

    private ByteArrayInputStream byteArrayInputStream;

    @BeforeEach
    public void setUp() {
        // Example ZIP header
        byteArrayInputStream = new ByteArrayInputStream(new byte[] { 0x50, 0x4B, 0x03, 0x04 });
        zipArchiveInputStream = new ZipArchiveInputStream(byteArrayInputStream);
    }

    @Test
    public void testReadFully_ValidInput() {
        byte[] buffer = new byte[4];
        try {
            invokeReadFully(buffer);
            assertArrayEquals(new byte[] { 0x50, 0x4B, 0x03, 0x04 }, buffer);
        } catch (IOException e) {
            fail("IOException should not have been thrown");
        } catch (Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    @Test
    public void testReadFully_EOFException() {
        // Larger than available data
        byte[] buffer = new byte[10];
        assertThrows(EOFException.class, () -> {
            invokeReadFully(buffer);
        });
    }

    @Test
    public void testReadFully_EmptyInput() {
        zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        byte[] buffer = new byte[4];
        assertThrows(EOFException.class, () -> {
            invokeReadFully(buffer);
        });
    }

    @Test
    public void testReadFully_PartialRead() {
        byte[] buffer = new byte[5];
        zipArchiveInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[] { 0x50, 0x4B, 0x03, 0x04 }));
        assertThrows(EOFException.class, () -> {
            invokeReadFully(buffer);
        });
    }

    private void invokeReadFully(byte[] buffer) throws Exception {
        Method method = ZipArchiveInputStream.class.getDeclaredMethod("readFully", byte[].class);
        method.setAccessible(true);
        method.invoke(zipArchiveInputStream, (Object) buffer);
    }
}
