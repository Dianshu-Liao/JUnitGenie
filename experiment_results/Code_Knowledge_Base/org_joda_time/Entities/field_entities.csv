FEN:ID,:LABEL,Comment,Source Code,Signature,Modifiers
org.joda.time.MutablePeriod.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 3436451121567212165L;,long serialVersionUID,"private , static , final "
org.joda.time.Minutes.ZERO,Field,Constant representing zero minutes.,public static final Minutes ZERO = new Minutes(0);,org.joda.time.Minutes ZERO,"public , static , final "
org.joda.time.Minutes.ONE,Field,Constant representing one minute.,public static final Minutes ONE = new Minutes(1);,org.joda.time.Minutes ONE,"public , static , final "
org.joda.time.Minutes.TWO,Field,Constant representing two minutes.,public static final Minutes TWO = new Minutes(2);,org.joda.time.Minutes TWO,"public , static , final "
org.joda.time.Minutes.THREE,Field,Constant representing three minutes.,public static final Minutes THREE = new Minutes(3);,org.joda.time.Minutes THREE,"public , static , final "
org.joda.time.Minutes.MAX_VALUE,Field,Constant representing the maximum number of minutes that can be stored in this object.,public static final Minutes MAX_VALUE = new Minutes(Integer.MAX_VALUE);,org.joda.time.Minutes MAX_VALUE,"public , static , final "
org.joda.time.Minutes.MIN_VALUE,Field,Constant representing the minimum number of minutes that can be stored in this object.,public static final Minutes MIN_VALUE = new Minutes(Integer.MIN_VALUE);,org.joda.time.Minutes MIN_VALUE,"public , static , final "
org.joda.time.Minutes.PARSER,Field,The parser to use for this class.,private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.minutes());,org.joda.time.format.PeriodFormatter PARSER,"private , static , final "
org.joda.time.Minutes.serialVersionUID,Field,Serialization version.,private static final long serialVersionUID = 87525275727380863L;,long serialVersionUID,"private , static , final "
org.joda.time.MutableInterval.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = -5982824024992428470L;,long serialVersionUID,"private , static , final "
org.joda.time.Partial.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 12324121189002L;,long serialVersionUID,"private , static , final "
org.joda.time.Partial.iChronology,Field,The chronology in use.,private final Chronology iChronology;,org.joda.time.Chronology iChronology,"private , final "
org.joda.time.Partial.iTypes,Field,The set of field types.,private final DateTimeFieldType[] iTypes;,org.joda.time.DateTimeFieldType[] iTypes,"private , final "
org.joda.time.Partial.iValues,Field,The values of each field in this partial.,private final int[] iValues;,int[] iValues,"private , final "
org.joda.time.Partial.iFormatter,Field,"The formatter to use, [0] may miss some fields, [1] doesn't miss any fields.",private transient DateTimeFormatter[] iFormatter;,org.joda.time.format.DateTimeFormatter[] iFormatter,"private , transient "
org.joda.time.Partial$Property.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 53278362873888L;,long serialVersionUID,"private , static , final "
org.joda.time.Partial$Property.iPartial,Field,The partial,private final Partial iPartial;,org.joda.time.Partial iPartial,"private , final "
org.joda.time.Partial$Property.iFieldIndex,Field,The field index,private final int iFieldIndex;,int iFieldIndex,"private , final "
org.joda.time.Duration.ZERO,Field,Constant representing zero millisecond duration,public static final Duration ZERO = new Duration(0L);,org.joda.time.Duration ZERO,"public , static , final "
org.joda.time.Duration.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 2471658376918L;,long serialVersionUID,"private , static , final "
org.joda.time.DateMidnight.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = 156371964018738L;,long serialVersionUID,"private , static , final "
org.joda.time.DateMidnight$Property.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = 257629620L;,long serialVersionUID,"private , static , final "
org.joda.time.DateMidnight$Property.iInstant,Field,The instant this property is working against,private DateMidnight iInstant;,org.joda.time.DateMidnight iInstant,private 
org.joda.time.DateMidnight$Property.iField,Field,The field this property is working against,private DateTimeField iField;,org.joda.time.DateTimeField iField,private 
org.joda.time.PeriodType.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 2274324892792009998L;,long serialVersionUID,"private , static , final "
org.joda.time.PeriodType.cTypes,Field,Cache of all the known types.,"private static final Map<PeriodType, Object> cTypes = new HashMap<PeriodType, Object>(32);",java.util.Map cTypes,"private , static , final "
org.joda.time.PeriodType.YEAR_INDEX,Field,No Comment,static int YEAR_INDEX = 0;,int YEAR_INDEX,static 
org.joda.time.PeriodType.MONTH_INDEX,Field,No Comment,static int MONTH_INDEX = 1;,int MONTH_INDEX,static 
org.joda.time.PeriodType.WEEK_INDEX,Field,No Comment,static int WEEK_INDEX = 2;,int WEEK_INDEX,static 
org.joda.time.PeriodType.DAY_INDEX,Field,No Comment,static int DAY_INDEX = 3;,int DAY_INDEX,static 
org.joda.time.PeriodType.HOUR_INDEX,Field,No Comment,static int HOUR_INDEX = 4;,int HOUR_INDEX,static 
org.joda.time.PeriodType.MINUTE_INDEX,Field,No Comment,static int MINUTE_INDEX = 5;,int MINUTE_INDEX,static 
org.joda.time.PeriodType.SECOND_INDEX,Field,No Comment,static int SECOND_INDEX = 6;,int SECOND_INDEX,static 
org.joda.time.PeriodType.MILLI_INDEX,Field,No Comment,static int MILLI_INDEX = 7;,int MILLI_INDEX,static 
org.joda.time.PeriodType.cStandard,Field,No Comment,private static PeriodType cStandard;,org.joda.time.PeriodType cStandard,"private , static "
org.joda.time.PeriodType.cYMDTime,Field,No Comment,private static PeriodType cYMDTime;,org.joda.time.PeriodType cYMDTime,"private , static "
org.joda.time.PeriodType.cYMD,Field,No Comment,private static PeriodType cYMD;,org.joda.time.PeriodType cYMD,"private , static "
org.joda.time.PeriodType.cYWDTime,Field,No Comment,private static PeriodType cYWDTime;,org.joda.time.PeriodType cYWDTime,"private , static "
org.joda.time.PeriodType.cYWD,Field,No Comment,private static PeriodType cYWD;,org.joda.time.PeriodType cYWD,"private , static "
org.joda.time.PeriodType.cYDTime,Field,No Comment,private static PeriodType cYDTime;,org.joda.time.PeriodType cYDTime,"private , static "
org.joda.time.PeriodType.cYD,Field,No Comment,private static PeriodType cYD;,org.joda.time.PeriodType cYD,"private , static "
org.joda.time.PeriodType.cDTime,Field,No Comment,private static PeriodType cDTime;,org.joda.time.PeriodType cDTime,"private , static "
org.joda.time.PeriodType.cTime,Field,No Comment,private static PeriodType cTime;,org.joda.time.PeriodType cTime,"private , static "
org.joda.time.PeriodType.cYears,Field,No Comment,private static PeriodType cYears;,org.joda.time.PeriodType cYears,"private , static "
org.joda.time.PeriodType.cMonths,Field,No Comment,private static PeriodType cMonths;,org.joda.time.PeriodType cMonths,"private , static "
org.joda.time.PeriodType.cWeeks,Field,No Comment,private static PeriodType cWeeks;,org.joda.time.PeriodType cWeeks,"private , static "
org.joda.time.PeriodType.cDays,Field,No Comment,private static PeriodType cDays;,org.joda.time.PeriodType cDays,"private , static "
org.joda.time.PeriodType.cHours,Field,No Comment,private static PeriodType cHours;,org.joda.time.PeriodType cHours,"private , static "
org.joda.time.PeriodType.cMinutes,Field,No Comment,private static PeriodType cMinutes;,org.joda.time.PeriodType cMinutes,"private , static "
org.joda.time.PeriodType.cSeconds,Field,No Comment,private static PeriodType cSeconds;,org.joda.time.PeriodType cSeconds,"private , static "
org.joda.time.PeriodType.cMillis,Field,No Comment,private static PeriodType cMillis;,org.joda.time.PeriodType cMillis,"private , static "
org.joda.time.PeriodType.iName,Field,The name of the type,private final String iName;,java.lang.String iName,"private , final "
org.joda.time.PeriodType.iTypes,Field,The array of types,private final DurationFieldType[] iTypes;,org.joda.time.DurationFieldType[] iTypes,"private , final "
org.joda.time.PeriodType.iIndices,Field,The array of indices,private final int[] iIndices;,int[] iIndices,"private , final "
org.joda.time.Instant.EPOCH,Field,* The Java epoch of 1970-01-01T00:00:00Z.\n     * @since 2.10,public static final Instant EPOCH = new Instant(0L);,org.joda.time.Instant EPOCH,"public , static , final "
org.joda.time.Instant.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = 3299096530934209741L;,long serialVersionUID,"private , static , final "
org.joda.time.Instant.iMillis,Field,The millis from 1970-01-01T00:00:00Z,private final long iMillis;,long iMillis,"private , final "
org.joda.time.chrono.GregorianChronology.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = -861407383323710522L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.GregorianChronology.MILLIS_PER_YEAR,Field,No Comment,private static final long MILLIS_PER_YEAR = (long) (365.2425 * DateTimeConstants.MILLIS_PER_DAY);,long MILLIS_PER_YEAR,"private , static , final "
org.joda.time.chrono.GregorianChronology.MILLIS_PER_MONTH,Field,No Comment,private static final long MILLIS_PER_MONTH = (long) (365.2425 * DateTimeConstants.MILLIS_PER_DAY / 12);,long MILLIS_PER_MONTH,"private , static , final "
org.joda.time.chrono.GregorianChronology.DAYS_0000_TO_1970,Field,No Comment,private static final int DAYS_0000_TO_1970 = 719527;,int DAYS_0000_TO_1970,"private , static , final "
org.joda.time.chrono.GregorianChronology.MIN_YEAR,Field,The lowest year that can be fully supported.,private static final int MIN_YEAR = -292275054;,int MIN_YEAR,"private , static , final "
org.joda.time.chrono.GregorianChronology.MAX_YEAR,Field,The highest year that can be fully supported.,private static final int MAX_YEAR = 292278993;,int MAX_YEAR,"private , static , final "
org.joda.time.chrono.GregorianChronology.INSTANCE_UTC,Field,Singleton instance of a UTC GregorianChronology,private static final GregorianChronology INSTANCE_UTC;,org.joda.time.chrono.GregorianChronology INSTANCE_UTC,"private , static , final "
org.joda.time.chrono.GregorianChronology.cCache,Field,Cache of zone to chronology arrays,"private static final ConcurrentHashMap<DateTimeZone, GregorianChronology[]> cCache = new ConcurrentHashMap<DateTimeZone, GregorianChronology[]>();",java.util.concurrent.ConcurrentHashMap cCache,"private , static , final "
org.joda.time.chrono.GJLocaleSymbols.cCache,Field,No Comment,"private static ConcurrentMap<Locale, GJLocaleSymbols> cCache = new ConcurrentHashMap<Locale, GJLocaleSymbols>();",java.util.concurrent.ConcurrentMap cCache,"private , static "
org.joda.time.chrono.GJLocaleSymbols.iEras,Field,No Comment,private final String[] iEras;,java.lang.String[] iEras,"private , final "
org.joda.time.chrono.GJLocaleSymbols.iDaysOfWeek,Field,No Comment,private final String[] iDaysOfWeek;,java.lang.String[] iDaysOfWeek,"private , final "
org.joda.time.chrono.GJLocaleSymbols.iShortDaysOfWeek,Field,No Comment,private final String[] iShortDaysOfWeek;,java.lang.String[] iShortDaysOfWeek,"private , final "
org.joda.time.chrono.GJLocaleSymbols.iMonths,Field,No Comment,private final String[] iMonths;,java.lang.String[] iMonths,"private , final "
org.joda.time.chrono.GJLocaleSymbols.iShortMonths,Field,No Comment,private final String[] iShortMonths;,java.lang.String[] iShortMonths,"private , final "
org.joda.time.chrono.GJLocaleSymbols.iHalfday,Field,No Comment,private final String[] iHalfday;,java.lang.String[] iHalfday,"private , final "
org.joda.time.chrono.GJLocaleSymbols.iParseEras,Field,No Comment,"private final TreeMap<String, Integer> iParseEras;",java.util.TreeMap iParseEras,"private , final "
org.joda.time.chrono.GJLocaleSymbols.iParseDaysOfWeek,Field,No Comment,"private final TreeMap<String, Integer> iParseDaysOfWeek;",java.util.TreeMap iParseDaysOfWeek,"private , final "
org.joda.time.chrono.GJLocaleSymbols.iParseMonths,Field,No Comment,"private final TreeMap<String, Integer> iParseMonths;",java.util.TreeMap iParseMonths,"private , final "
org.joda.time.chrono.GJLocaleSymbols.iMaxEraLength,Field,No Comment,private final int iMaxEraLength;,int iMaxEraLength,"private , final "
org.joda.time.chrono.GJLocaleSymbols.iMaxDayOfWeekLength,Field,No Comment,private final int iMaxDayOfWeekLength;,int iMaxDayOfWeekLength,"private , final "
org.joda.time.chrono.GJLocaleSymbols.iMaxShortDayOfWeekLength,Field,No Comment,private final int iMaxShortDayOfWeekLength;,int iMaxShortDayOfWeekLength,"private , final "
org.joda.time.chrono.GJLocaleSymbols.iMaxMonthLength,Field,No Comment,private final int iMaxMonthLength;,int iMaxMonthLength,"private , final "
org.joda.time.chrono.GJLocaleSymbols.iMaxShortMonthLength,Field,No Comment,private final int iMaxShortMonthLength;,int iMaxShortMonthLength,"private , final "
org.joda.time.chrono.GJLocaleSymbols.iMaxHalfdayLength,Field,No Comment,private final int iMaxHalfdayLength;,int iMaxHalfdayLength,"private , final "
org.joda.time.chrono.BasicYearDateTimeField.serialVersionUID,Field,Serialization version.,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = -98628754872287L;",long serialVersionUID,"private , static , final "
org.joda.time.chrono.BasicYearDateTimeField.iChronology,Field,The underlying basic chronology.,protected final BasicChronology iChronology;,org.joda.time.chrono.BasicChronology iChronology,"protected , final "
org.joda.time.chrono.BasicWeekyearDateTimeField.serialVersionUID,Field,No Comment,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = 6215066916806820644L;",long serialVersionUID,"private , static , final "
org.joda.time.chrono.BasicWeekyearDateTimeField.WEEK_53,Field,No Comment,private static final long WEEK_53 = (53L - 1) * DateTimeConstants.MILLIS_PER_WEEK;,long WEEK_53,"private , static , final "
org.joda.time.chrono.BasicWeekyearDateTimeField.iChronology,Field,No Comment,private final BasicChronology iChronology;,org.joda.time.chrono.BasicChronology iChronology,"private , final "
org.joda.time.chrono.GJEraDateTimeField.serialVersionUID,Field,Serialization version,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = 4240986525305515528L;",long serialVersionUID,"private , static , final "
org.joda.time.chrono.GJEraDateTimeField.iChronology,Field,No Comment,private final BasicChronology iChronology;,org.joda.time.chrono.BasicChronology iChronology,"private , final "
org.joda.time.chrono.BasicChronology.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = 8283225332206808863L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.BasicChronology.cMillisField,Field,No Comment,private static final DurationField cMillisField;,org.joda.time.DurationField cMillisField,"private , static , final "
org.joda.time.chrono.BasicChronology.cSecondsField,Field,No Comment,private static final DurationField cSecondsField;,org.joda.time.DurationField cSecondsField,"private , static , final "
org.joda.time.chrono.BasicChronology.cMinutesField,Field,No Comment,private static final DurationField cMinutesField;,org.joda.time.DurationField cMinutesField,"private , static , final "
org.joda.time.chrono.BasicChronology.cHoursField,Field,No Comment,private static final DurationField cHoursField;,org.joda.time.DurationField cHoursField,"private , static , final "
org.joda.time.chrono.BasicChronology.cHalfdaysField,Field,No Comment,private static final DurationField cHalfdaysField;,org.joda.time.DurationField cHalfdaysField,"private , static , final "
org.joda.time.chrono.BasicChronology.cDaysField,Field,No Comment,private static final DurationField cDaysField;,org.joda.time.DurationField cDaysField,"private , static , final "
org.joda.time.chrono.BasicChronology.cWeeksField,Field,No Comment,private static final DurationField cWeeksField;,org.joda.time.DurationField cWeeksField,"private , static , final "
org.joda.time.chrono.BasicChronology.cMillisOfSecondField,Field,No Comment,private static final DateTimeField cMillisOfSecondField;,org.joda.time.DateTimeField cMillisOfSecondField,"private , static , final "
org.joda.time.chrono.BasicChronology.cMillisOfDayField,Field,No Comment,private static final DateTimeField cMillisOfDayField;,org.joda.time.DateTimeField cMillisOfDayField,"private , static , final "
org.joda.time.chrono.BasicChronology.cSecondOfMinuteField,Field,No Comment,private static final DateTimeField cSecondOfMinuteField;,org.joda.time.DateTimeField cSecondOfMinuteField,"private , static , final "
org.joda.time.chrono.BasicChronology.cSecondOfDayField,Field,No Comment,private static final DateTimeField cSecondOfDayField;,org.joda.time.DateTimeField cSecondOfDayField,"private , static , final "
org.joda.time.chrono.BasicChronology.cMinuteOfHourField,Field,No Comment,private static final DateTimeField cMinuteOfHourField;,org.joda.time.DateTimeField cMinuteOfHourField,"private , static , final "
org.joda.time.chrono.BasicChronology.cMinuteOfDayField,Field,No Comment,private static final DateTimeField cMinuteOfDayField;,org.joda.time.DateTimeField cMinuteOfDayField,"private , static , final "
org.joda.time.chrono.BasicChronology.cHourOfDayField,Field,No Comment,private static final DateTimeField cHourOfDayField;,org.joda.time.DateTimeField cHourOfDayField,"private , static , final "
org.joda.time.chrono.BasicChronology.cHourOfHalfdayField,Field,No Comment,private static final DateTimeField cHourOfHalfdayField;,org.joda.time.DateTimeField cHourOfHalfdayField,"private , static , final "
org.joda.time.chrono.BasicChronology.cClockhourOfDayField,Field,No Comment,private static final DateTimeField cClockhourOfDayField;,org.joda.time.DateTimeField cClockhourOfDayField,"private , static , final "
org.joda.time.chrono.BasicChronology.cClockhourOfHalfdayField,Field,No Comment,private static final DateTimeField cClockhourOfHalfdayField;,org.joda.time.DateTimeField cClockhourOfHalfdayField,"private , static , final "
org.joda.time.chrono.BasicChronology.cHalfdayOfDayField,Field,No Comment,private static final DateTimeField cHalfdayOfDayField;,org.joda.time.DateTimeField cHalfdayOfDayField,"private , static , final "
org.joda.time.chrono.BasicChronology.CACHE_SIZE,Field,No Comment,private static final int CACHE_SIZE = 1 << 10;,int CACHE_SIZE,"private , static , final "
org.joda.time.chrono.BasicChronology.CACHE_MASK,Field,No Comment,private static final int CACHE_MASK = CACHE_SIZE - 1;,int CACHE_MASK,"private , static , final "
org.joda.time.chrono.BasicChronology.iYearInfoCache,Field,No Comment,private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];,org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache,"private , transient , final "
org.joda.time.chrono.BasicChronology.iMinDaysInFirstWeek,Field,No Comment,private final int iMinDaysInFirstWeek;,int iMinDaysInFirstWeek,"private , final "
org.joda.time.chrono.BasicChronology$HalfdayField.serialVersionUID,Field,No Comment,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = 581601443656929254L;",long serialVersionUID,"private , static , final "
org.joda.time.chrono.BasicChronology$YearInfo.iYear,Field,No Comment,public final int iYear;,int iYear,"public , final "
org.joda.time.chrono.BasicChronology$YearInfo.iFirstDayMillis,Field,No Comment,public final long iFirstDayMillis;,long iFirstDayMillis,"public , final "
org.joda.time.chrono.BasicDayOfYearDateTimeField.serialVersionUID,Field,No Comment,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = -6821236822336841037L;",long serialVersionUID,"private , static , final "
org.joda.time.chrono.BasicDayOfYearDateTimeField.iChronology,Field,No Comment,private final BasicChronology iChronology;,org.joda.time.chrono.BasicChronology iChronology,"private , final "
org.joda.time.chrono.IslamicChronology.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = -3663823829888L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.IslamicChronology.AH,Field,"* Constant value for 'Anno Hegirae', equivalent\n     * to the value returned for AD/CE.",public static final int AH = DateTimeConstants.CE;,int AH,"public , static , final "
org.joda.time.chrono.IslamicChronology.ERA_FIELD,Field,A singleton era field.,"private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""AH"");",org.joda.time.DateTimeField ERA_FIELD,"private , static , final "
org.joda.time.chrono.IslamicChronology.LEAP_YEAR_15_BASED,Field,Leap year 15-based pattern.,"public static final LeapYearPatternType LEAP_YEAR_15_BASED = new LeapYearPatternType(0, 623158436);",org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_15_BASED,"public , static , final "
org.joda.time.chrono.IslamicChronology.LEAP_YEAR_16_BASED,Field,Leap year 16-based pattern.,"public static final LeapYearPatternType LEAP_YEAR_16_BASED = new LeapYearPatternType(1, 623191204);",org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_16_BASED,"public , static , final "
org.joda.time.chrono.IslamicChronology.LEAP_YEAR_INDIAN,Field,Leap year Indian pattern.,"public static final LeapYearPatternType LEAP_YEAR_INDIAN = new LeapYearPatternType(2, 690562340);",org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_INDIAN,"public , static , final "
org.joda.time.chrono.IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB,Field,Leap year Habash al-Hasib pattern.,"public static final LeapYearPatternType LEAP_YEAR_HABASH_AL_HASIB = new LeapYearPatternType(3, 153692453);",org.joda.time.chrono.IslamicChronology$LeapYearPatternType LEAP_YEAR_HABASH_AL_HASIB,"public , static , final "
org.joda.time.chrono.IslamicChronology.MIN_YEAR,Field,The lowest year that can be fully supported.,private static final int MIN_YEAR = -292269337;,int MIN_YEAR,"private , static , final "
org.joda.time.chrono.IslamicChronology.MAX_YEAR,Field,"* The highest year that can be fully supported.\n     * Although calculateFirstDayOfYearMillis can go higher without\n     * overflowing, the getYear method overflows when it adds the\n     * approximate millis at the epoch.",private static final int MAX_YEAR = 292271022;,int MAX_YEAR,"private , static , final "
org.joda.time.chrono.IslamicChronology.MONTH_PAIR_LENGTH,Field,The days in a pair of months.,private static final int MONTH_PAIR_LENGTH = 59;,int MONTH_PAIR_LENGTH,"private , static , final "
org.joda.time.chrono.IslamicChronology.LONG_MONTH_LENGTH,Field,The length of the long month.,private static final int LONG_MONTH_LENGTH = 30;,int LONG_MONTH_LENGTH,"private , static , final "
org.joda.time.chrono.IslamicChronology.SHORT_MONTH_LENGTH,Field,The length of the short month.,private static final int SHORT_MONTH_LENGTH = 29;,int SHORT_MONTH_LENGTH,"private , static , final "
org.joda.time.chrono.IslamicChronology.MILLIS_PER_MONTH_PAIR,Field,The length of the long month in millis.,private static final long MILLIS_PER_MONTH_PAIR = 59L * DateTimeConstants.MILLIS_PER_DAY;,long MILLIS_PER_MONTH_PAIR,"private , static , final "
org.joda.time.chrono.IslamicChronology.MILLIS_PER_MONTH,Field,The length of the long month in millis.,private static final long MILLIS_PER_MONTH = (long) (29.53056 * DateTimeConstants.MILLIS_PER_DAY);,long MILLIS_PER_MONTH,"private , static , final "
org.joda.time.chrono.IslamicChronology.MILLIS_PER_LONG_MONTH,Field,The length of the long month in millis.,private static final long MILLIS_PER_LONG_MONTH = 30L * DateTimeConstants.MILLIS_PER_DAY;,long MILLIS_PER_LONG_MONTH,"private , static , final "
org.joda.time.chrono.IslamicChronology.MILLIS_PER_YEAR,Field,The typical millis per year.,private static final long MILLIS_PER_YEAR = (long) (354.36667 * DateTimeConstants.MILLIS_PER_DAY);,long MILLIS_PER_YEAR,"private , static , final "
org.joda.time.chrono.IslamicChronology.MILLIS_PER_SHORT_YEAR,Field,The typical millis per year.,private static final long MILLIS_PER_SHORT_YEAR = 354L * DateTimeConstants.MILLIS_PER_DAY;,long MILLIS_PER_SHORT_YEAR,"private , static , final "
org.joda.time.chrono.IslamicChronology.MILLIS_PER_LONG_YEAR,Field,The typical millis per year.,private static final long MILLIS_PER_LONG_YEAR = 355L * DateTimeConstants.MILLIS_PER_DAY;,long MILLIS_PER_LONG_YEAR,"private , static , final "
org.joda.time.chrono.IslamicChronology.MILLIS_YEAR_1,Field,The millis of 0001-01-01.,private static final long MILLIS_YEAR_1 = -42521587200000L;,long MILLIS_YEAR_1,"private , static , final "
org.joda.time.chrono.IslamicChronology.CYCLE,Field,The length of the cycle of leap years.,private static final int CYCLE = 30;,int CYCLE,"private , static , final "
org.joda.time.chrono.IslamicChronology.MILLIS_PER_CYCLE,Field,The millis of a 30 year cycle.,private static final long MILLIS_PER_CYCLE = ((19L * 354L + 11L * 355L) * DateTimeConstants.MILLIS_PER_DAY);,long MILLIS_PER_CYCLE,"private , static , final "
org.joda.time.chrono.IslamicChronology.cCache,Field,Cache of zone to chronology arrays,"private static final ConcurrentHashMap<DateTimeZone, IslamicChronology[]> cCache = new ConcurrentHashMap<DateTimeZone, IslamicChronology[]>();",java.util.concurrent.ConcurrentHashMap cCache,"private , static , final "
org.joda.time.chrono.IslamicChronology.INSTANCE_UTC,Field,Singleton instance of a UTC IslamicChronology,private static final IslamicChronology INSTANCE_UTC;,org.joda.time.chrono.IslamicChronology INSTANCE_UTC,"private , static , final "
org.joda.time.chrono.IslamicChronology.iLeapYears,Field,The leap years to use.,private final LeapYearPatternType iLeapYears;,org.joda.time.chrono.IslamicChronology$LeapYearPatternType iLeapYears,"private , final "
org.joda.time.chrono.IslamicChronology$LeapYearPatternType.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = 26581275372698L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.IslamicChronology$LeapYearPatternType.index,Field,The index.,final byte index;,byte index,final 
org.joda.time.chrono.IslamicChronology$LeapYearPatternType.pattern,Field,"The leap year pattern, a bit-based 1=true pattern.",final int pattern;,int pattern,final 
org.joda.time.chrono.ISOYearOfEraDateTimeField.serialVersionUID,Field,No Comment,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = 7037524068969447317L;",long serialVersionUID,"private , static , final "
org.joda.time.chrono.ISOYearOfEraDateTimeField.INSTANCE,Field,* Singleton instance,static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();,org.joda.time.DateTimeField INSTANCE,"static , final "
org.joda.time.chrono.LimitChronology.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = 7670866536893052522L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.LimitChronology.iLowerLimit,Field,No Comment,final DateTime iLowerLimit;,org.joda.time.DateTime iLowerLimit,final 
org.joda.time.chrono.LimitChronology.iUpperLimit,Field,No Comment,final DateTime iUpperLimit;,org.joda.time.DateTime iUpperLimit,final 
org.joda.time.chrono.LimitChronology.iWithUTC,Field,No Comment,private transient LimitChronology iWithUTC;,org.joda.time.chrono.LimitChronology iWithUTC,"private , transient "
org.joda.time.chrono.LimitChronology$LimitException.serialVersionUID,Field,No Comment,private static final long serialVersionUID = -5924689995607498581L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.LimitChronology$LimitException.iIsLow,Field,No Comment,private final boolean iIsLow;,boolean iIsLow,"private , final "
org.joda.time.chrono.LimitChronology$LimitDurationField.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 8049297699408782284L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.LimitChronology$LimitDateTimeField.serialVersionUID,Field,No Comment,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = -2435306746995699312L;",long serialVersionUID,"private , static , final "
org.joda.time.chrono.LimitChronology$LimitDateTimeField.iDurationField,Field,No Comment,private final DurationField iDurationField;,org.joda.time.DurationField iDurationField,"private , final "
org.joda.time.chrono.LimitChronology$LimitDateTimeField.iRangeDurationField,Field,No Comment,private final DurationField iRangeDurationField;,org.joda.time.DurationField iRangeDurationField,"private , final "
org.joda.time.chrono.LimitChronology$LimitDateTimeField.iLeapDurationField,Field,No Comment,private final DurationField iLeapDurationField;,org.joda.time.DurationField iLeapDurationField,"private , final "
org.joda.time.chrono.GJCacheKey.zone,Field,No Comment,private final DateTimeZone zone;,org.joda.time.DateTimeZone zone,"private , final "
org.joda.time.chrono.GJCacheKey.cutoverInstant,Field,No Comment,private final Instant cutoverInstant;,org.joda.time.Instant cutoverInstant,"private , final "
org.joda.time.chrono.GJCacheKey.minDaysInFirstWeek,Field,No Comment,private final int minDaysInFirstWeek;,int minDaysInFirstWeek,"private , final "
org.joda.time.chrono.EthiopicChronology.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = -5972804258688333942L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.EthiopicChronology.EE,Field,"* Constant value for 'Ethiopean Era', equivalent\n     * to the value returned for AD/CE.",public static final int EE = DateTimeConstants.CE;,int EE,"public , static , final "
org.joda.time.chrono.EthiopicChronology.ERA_FIELD,Field,A singleton era field.,"private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""EE"");",org.joda.time.DateTimeField ERA_FIELD,"private , static , final "
org.joda.time.chrono.EthiopicChronology.MIN_YEAR,Field,The lowest year that can be fully supported.,private static final int MIN_YEAR = -292269337;,int MIN_YEAR,"private , static , final "
org.joda.time.chrono.EthiopicChronology.MAX_YEAR,Field,The highest year that can be fully supported.,private static final int MAX_YEAR = 292272984;,int MAX_YEAR,"private , static , final "
org.joda.time.chrono.EthiopicChronology.cCache,Field,Cache of zone to chronology arrays,"private static final ConcurrentHashMap<DateTimeZone, EthiopicChronology[]> cCache = new ConcurrentHashMap<DateTimeZone, EthiopicChronology[]>();",java.util.concurrent.ConcurrentHashMap cCache,"private , static , final "
org.joda.time.chrono.EthiopicChronology.INSTANCE_UTC,Field,Singleton instance of a UTC EthiopicChronology,private static final EthiopicChronology INSTANCE_UTC;,org.joda.time.chrono.EthiopicChronology INSTANCE_UTC,"private , static , final "
org.joda.time.chrono.LenientChronology.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = -3148237568046877177L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.LenientChronology.iWithUTC,Field,No Comment,private transient Chronology iWithUTC;,org.joda.time.Chronology iWithUTC,"private , transient "
org.joda.time.chrono.BasicMonthOfYearDateTimeField.serialVersionUID,Field,Serialization version,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = -8258715387168736L;",long serialVersionUID,"private , static , final "
org.joda.time.chrono.BasicMonthOfYearDateTimeField.MIN,Field,No Comment,private static final int MIN = DateTimeConstants.JANUARY;,int MIN,"private , static , final "
org.joda.time.chrono.BasicMonthOfYearDateTimeField.iChronology,Field,No Comment,private final BasicChronology iChronology;,org.joda.time.chrono.BasicChronology iChronology,"private , final "
org.joda.time.chrono.BasicMonthOfYearDateTimeField.iMax,Field,No Comment,private final int iMax;,int iMax,"private , final "
org.joda.time.chrono.BasicMonthOfYearDateTimeField.iLeapMonth,Field,No Comment,private final int iLeapMonth;,int iLeapMonth,"private , final "
org.joda.time.chrono.GJYearOfEraDateTimeField.serialVersionUID,Field,No Comment,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = -5961050944769862059L;",long serialVersionUID,"private , static , final "
org.joda.time.chrono.GJYearOfEraDateTimeField.iChronology,Field,No Comment,private final BasicChronology iChronology;,org.joda.time.chrono.BasicChronology iChronology,"private , final "
org.joda.time.chrono.ZonedChronology.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = -1079258847191166848L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.ZonedChronology.NEAR_ZERO,Field,* Avoid calculation errors near zero.,private static final long NEAR_ZERO = 7L * 24 * 60 * 60 * 1000;,long NEAR_ZERO,"private , static , final "
org.joda.time.chrono.ZonedChronology$ZonedDurationField.serialVersionUID,Field,No Comment,private static final long serialVersionUID = -485345310999208286L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.ZonedChronology$ZonedDurationField.iField,Field,No Comment,final DurationField iField;,org.joda.time.DurationField iField,final 
org.joda.time.chrono.ZonedChronology$ZonedDurationField.iTimeField,Field,No Comment,final boolean iTimeField;,boolean iTimeField,final 
org.joda.time.chrono.ZonedChronology$ZonedDurationField.iZone,Field,No Comment,final DateTimeZone iZone;,org.joda.time.DateTimeZone iZone,final 
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.serialVersionUID,Field,No Comment,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = -3968986277775529794L;",long serialVersionUID,"private , static , final "
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iField,Field,No Comment,final DateTimeField iField;,org.joda.time.DateTimeField iField,final 
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iZone,Field,No Comment,final DateTimeZone iZone;,org.joda.time.DateTimeZone iZone,final 
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iDurationField,Field,No Comment,final DurationField iDurationField;,org.joda.time.DurationField iDurationField,final 
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iTimeField,Field,No Comment,final boolean iTimeField;,boolean iTimeField,final 
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iRangeDurationField,Field,No Comment,final DurationField iRangeDurationField;,org.joda.time.DurationField iRangeDurationField,final 
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.iLeapDurationField,Field,No Comment,final DurationField iLeapDurationField;,org.joda.time.DurationField iLeapDurationField,final 
org.joda.time.chrono.JulianChronology.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = -8731039522547897247L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.JulianChronology.MILLIS_PER_YEAR,Field,No Comment,private static final long MILLIS_PER_YEAR = (long) (365.25 * DateTimeConstants.MILLIS_PER_DAY);,long MILLIS_PER_YEAR,"private , static , final "
org.joda.time.chrono.JulianChronology.MILLIS_PER_MONTH,Field,No Comment,private static final long MILLIS_PER_MONTH = (long) (365.25 * DateTimeConstants.MILLIS_PER_DAY / 12);,long MILLIS_PER_MONTH,"private , static , final "
org.joda.time.chrono.JulianChronology.MIN_YEAR,Field,The lowest year that can be fully supported.,private static final int MIN_YEAR = -292269054;,int MIN_YEAR,"private , static , final "
org.joda.time.chrono.JulianChronology.MAX_YEAR,Field,The highest year that can be fully supported.,private static final int MAX_YEAR = 292272992;,int MAX_YEAR,"private , static , final "
org.joda.time.chrono.JulianChronology.INSTANCE_UTC,Field,Singleton instance of a UTC JulianChronology,private static final JulianChronology INSTANCE_UTC;,org.joda.time.chrono.JulianChronology INSTANCE_UTC,"private , static , final "
org.joda.time.chrono.JulianChronology.cCache,Field,Cache of zone to chronology arrays,"private static final ConcurrentHashMap<DateTimeZone, JulianChronology[]> cCache = new ConcurrentHashMap<DateTimeZone, JulianChronology[]>();",java.util.concurrent.ConcurrentHashMap cCache,"private , static , final "
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.serialVersionUID,Field,No Comment,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = -1587436826395135328L;",long serialVersionUID,"private , static , final "
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.iChronology,Field,No Comment,private final BasicChronology iChronology;,org.joda.time.chrono.BasicChronology iChronology,"private , final "
org.joda.time.chrono.BaseChronology.serialVersionUID,Field,Serialization version.,private static final long serialVersionUID = -7310865996721419676L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.AssembledChronology.serialVersionUID,Field,No Comment,private static final long serialVersionUID = -6728465968995518215L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.AssembledChronology.iBase,Field,No Comment,private final Chronology iBase;,org.joda.time.Chronology iBase,"private , final "
org.joda.time.chrono.AssembledChronology.iParam,Field,No Comment,private final Object iParam;,java.lang.Object iParam,"private , final "
org.joda.time.chrono.AssembledChronology.iMillis,Field,No Comment,private transient DurationField iMillis;,org.joda.time.DurationField iMillis,"private , transient "
org.joda.time.chrono.AssembledChronology.iSeconds,Field,No Comment,private transient DurationField iSeconds;,org.joda.time.DurationField iSeconds,"private , transient "
org.joda.time.chrono.AssembledChronology.iMinutes,Field,No Comment,private transient DurationField iMinutes;,org.joda.time.DurationField iMinutes,"private , transient "
org.joda.time.chrono.AssembledChronology.iHours,Field,No Comment,private transient DurationField iHours;,org.joda.time.DurationField iHours,"private , transient "
org.joda.time.chrono.AssembledChronology.iHalfdays,Field,No Comment,private transient DurationField iHalfdays;,org.joda.time.DurationField iHalfdays,"private , transient "
org.joda.time.chrono.AssembledChronology.iDays,Field,No Comment,private transient DurationField iDays;,org.joda.time.DurationField iDays,"private , transient "
org.joda.time.chrono.AssembledChronology.iWeeks,Field,No Comment,private transient DurationField iWeeks;,org.joda.time.DurationField iWeeks,"private , transient "
org.joda.time.chrono.AssembledChronology.iWeekyears,Field,No Comment,private transient DurationField iWeekyears;,org.joda.time.DurationField iWeekyears,"private , transient "
org.joda.time.chrono.AssembledChronology.iMonths,Field,No Comment,private transient DurationField iMonths;,org.joda.time.DurationField iMonths,"private , transient "
org.joda.time.chrono.AssembledChronology.iYears,Field,No Comment,private transient DurationField iYears;,org.joda.time.DurationField iYears,"private , transient "
org.joda.time.chrono.AssembledChronology.iCenturies,Field,No Comment,private transient DurationField iCenturies;,org.joda.time.DurationField iCenturies,"private , transient "
org.joda.time.chrono.AssembledChronology.iEras,Field,No Comment,private transient DurationField iEras;,org.joda.time.DurationField iEras,"private , transient "
org.joda.time.chrono.AssembledChronology.iMillisOfSecond,Field,No Comment,private transient DateTimeField iMillisOfSecond;,org.joda.time.DateTimeField iMillisOfSecond,"private , transient "
org.joda.time.chrono.AssembledChronology.iMillisOfDay,Field,No Comment,private transient DateTimeField iMillisOfDay;,org.joda.time.DateTimeField iMillisOfDay,"private , transient "
org.joda.time.chrono.AssembledChronology.iSecondOfMinute,Field,No Comment,private transient DateTimeField iSecondOfMinute;,org.joda.time.DateTimeField iSecondOfMinute,"private , transient "
org.joda.time.chrono.AssembledChronology.iSecondOfDay,Field,No Comment,private transient DateTimeField iSecondOfDay;,org.joda.time.DateTimeField iSecondOfDay,"private , transient "
org.joda.time.chrono.AssembledChronology.iMinuteOfHour,Field,No Comment,private transient DateTimeField iMinuteOfHour;,org.joda.time.DateTimeField iMinuteOfHour,"private , transient "
org.joda.time.chrono.AssembledChronology.iMinuteOfDay,Field,No Comment,private transient DateTimeField iMinuteOfDay;,org.joda.time.DateTimeField iMinuteOfDay,"private , transient "
org.joda.time.chrono.AssembledChronology.iHourOfDay,Field,No Comment,private transient DateTimeField iHourOfDay;,org.joda.time.DateTimeField iHourOfDay,"private , transient "
org.joda.time.chrono.AssembledChronology.iClockhourOfDay,Field,No Comment,private transient DateTimeField iClockhourOfDay;,org.joda.time.DateTimeField iClockhourOfDay,"private , transient "
org.joda.time.chrono.AssembledChronology.iHourOfHalfday,Field,No Comment,private transient DateTimeField iHourOfHalfday;,org.joda.time.DateTimeField iHourOfHalfday,"private , transient "
org.joda.time.chrono.AssembledChronology.iClockhourOfHalfday,Field,No Comment,private transient DateTimeField iClockhourOfHalfday;,org.joda.time.DateTimeField iClockhourOfHalfday,"private , transient "
org.joda.time.chrono.AssembledChronology.iHalfdayOfDay,Field,No Comment,private transient DateTimeField iHalfdayOfDay;,org.joda.time.DateTimeField iHalfdayOfDay,"private , transient "
org.joda.time.chrono.AssembledChronology.iDayOfWeek,Field,No Comment,private transient DateTimeField iDayOfWeek;,org.joda.time.DateTimeField iDayOfWeek,"private , transient "
org.joda.time.chrono.AssembledChronology.iDayOfMonth,Field,No Comment,private transient DateTimeField iDayOfMonth;,org.joda.time.DateTimeField iDayOfMonth,"private , transient "
org.joda.time.chrono.AssembledChronology.iDayOfYear,Field,No Comment,private transient DateTimeField iDayOfYear;,org.joda.time.DateTimeField iDayOfYear,"private , transient "
org.joda.time.chrono.AssembledChronology.iWeekOfWeekyear,Field,No Comment,private transient DateTimeField iWeekOfWeekyear;,org.joda.time.DateTimeField iWeekOfWeekyear,"private , transient "
org.joda.time.chrono.AssembledChronology.iWeekyear,Field,No Comment,private transient DateTimeField iWeekyear;,org.joda.time.DateTimeField iWeekyear,"private , transient "
org.joda.time.chrono.AssembledChronology.iWeekyearOfCentury,Field,No Comment,private transient DateTimeField iWeekyearOfCentury;,org.joda.time.DateTimeField iWeekyearOfCentury,"private , transient "
org.joda.time.chrono.AssembledChronology.iMonthOfYear,Field,No Comment,private transient DateTimeField iMonthOfYear;,org.joda.time.DateTimeField iMonthOfYear,"private , transient "
org.joda.time.chrono.AssembledChronology.iYear,Field,No Comment,private transient DateTimeField iYear;,org.joda.time.DateTimeField iYear,"private , transient "
org.joda.time.chrono.AssembledChronology.iYearOfEra,Field,No Comment,private transient DateTimeField iYearOfEra;,org.joda.time.DateTimeField iYearOfEra,"private , transient "
org.joda.time.chrono.AssembledChronology.iYearOfCentury,Field,No Comment,private transient DateTimeField iYearOfCentury;,org.joda.time.DateTimeField iYearOfCentury,"private , transient "
org.joda.time.chrono.AssembledChronology.iCenturyOfEra,Field,No Comment,private transient DateTimeField iCenturyOfEra;,org.joda.time.DateTimeField iCenturyOfEra,"private , transient "
org.joda.time.chrono.AssembledChronology.iEra,Field,No Comment,private transient DateTimeField iEra;,org.joda.time.DateTimeField iEra,"private , transient "
org.joda.time.chrono.AssembledChronology.iBaseFlags,Field,"bit 3 set: year, monthOfYear, and dayOfMonth fields",private transient int iBaseFlags;,int iBaseFlags,"private , transient "
org.joda.time.chrono.AssembledChronology$Fields.millis,Field,No Comment,public DurationField millis;,org.joda.time.DurationField millis,public 
org.joda.time.chrono.AssembledChronology$Fields.seconds,Field,No Comment,public DurationField seconds;,org.joda.time.DurationField seconds,public 
org.joda.time.chrono.AssembledChronology$Fields.minutes,Field,No Comment,public DurationField minutes;,org.joda.time.DurationField minutes,public 
org.joda.time.chrono.AssembledChronology$Fields.hours,Field,No Comment,public DurationField hours;,org.joda.time.DurationField hours,public 
org.joda.time.chrono.AssembledChronology$Fields.halfdays,Field,No Comment,public DurationField halfdays;,org.joda.time.DurationField halfdays,public 
org.joda.time.chrono.AssembledChronology$Fields.days,Field,No Comment,public DurationField days;,org.joda.time.DurationField days,public 
org.joda.time.chrono.AssembledChronology$Fields.weeks,Field,No Comment,public DurationField weeks;,org.joda.time.DurationField weeks,public 
org.joda.time.chrono.AssembledChronology$Fields.weekyears,Field,No Comment,public DurationField weekyears;,org.joda.time.DurationField weekyears,public 
org.joda.time.chrono.AssembledChronology$Fields.months,Field,No Comment,public DurationField months;,org.joda.time.DurationField months,public 
org.joda.time.chrono.AssembledChronology$Fields.years,Field,No Comment,public DurationField years;,org.joda.time.DurationField years,public 
org.joda.time.chrono.AssembledChronology$Fields.centuries,Field,No Comment,public DurationField centuries;,org.joda.time.DurationField centuries,public 
org.joda.time.chrono.AssembledChronology$Fields.eras,Field,No Comment,public DurationField eras;,org.joda.time.DurationField eras,public 
org.joda.time.chrono.AssembledChronology$Fields.millisOfSecond,Field,No Comment,public DateTimeField millisOfSecond;,org.joda.time.DateTimeField millisOfSecond,public 
org.joda.time.chrono.AssembledChronology$Fields.millisOfDay,Field,No Comment,public DateTimeField millisOfDay;,org.joda.time.DateTimeField millisOfDay,public 
org.joda.time.chrono.AssembledChronology$Fields.secondOfMinute,Field,No Comment,public DateTimeField secondOfMinute;,org.joda.time.DateTimeField secondOfMinute,public 
org.joda.time.chrono.AssembledChronology$Fields.secondOfDay,Field,No Comment,public DateTimeField secondOfDay;,org.joda.time.DateTimeField secondOfDay,public 
org.joda.time.chrono.AssembledChronology$Fields.minuteOfHour,Field,No Comment,public DateTimeField minuteOfHour;,org.joda.time.DateTimeField minuteOfHour,public 
org.joda.time.chrono.AssembledChronology$Fields.minuteOfDay,Field,No Comment,public DateTimeField minuteOfDay;,org.joda.time.DateTimeField minuteOfDay,public 
org.joda.time.chrono.AssembledChronology$Fields.hourOfDay,Field,No Comment,public DateTimeField hourOfDay;,org.joda.time.DateTimeField hourOfDay,public 
org.joda.time.chrono.AssembledChronology$Fields.clockhourOfDay,Field,No Comment,public DateTimeField clockhourOfDay;,org.joda.time.DateTimeField clockhourOfDay,public 
org.joda.time.chrono.AssembledChronology$Fields.hourOfHalfday,Field,No Comment,public DateTimeField hourOfHalfday;,org.joda.time.DateTimeField hourOfHalfday,public 
org.joda.time.chrono.AssembledChronology$Fields.clockhourOfHalfday,Field,No Comment,public DateTimeField clockhourOfHalfday;,org.joda.time.DateTimeField clockhourOfHalfday,public 
org.joda.time.chrono.AssembledChronology$Fields.halfdayOfDay,Field,No Comment,public DateTimeField halfdayOfDay;,org.joda.time.DateTimeField halfdayOfDay,public 
org.joda.time.chrono.AssembledChronology$Fields.dayOfWeek,Field,No Comment,public DateTimeField dayOfWeek;,org.joda.time.DateTimeField dayOfWeek,public 
org.joda.time.chrono.AssembledChronology$Fields.dayOfMonth,Field,No Comment,public DateTimeField dayOfMonth;,org.joda.time.DateTimeField dayOfMonth,public 
org.joda.time.chrono.AssembledChronology$Fields.dayOfYear,Field,No Comment,public DateTimeField dayOfYear;,org.joda.time.DateTimeField dayOfYear,public 
org.joda.time.chrono.AssembledChronology$Fields.weekOfWeekyear,Field,No Comment,public DateTimeField weekOfWeekyear;,org.joda.time.DateTimeField weekOfWeekyear,public 
org.joda.time.chrono.AssembledChronology$Fields.weekyear,Field,No Comment,public DateTimeField weekyear;,org.joda.time.DateTimeField weekyear,public 
org.joda.time.chrono.AssembledChronology$Fields.weekyearOfCentury,Field,No Comment,public DateTimeField weekyearOfCentury;,org.joda.time.DateTimeField weekyearOfCentury,public 
org.joda.time.chrono.AssembledChronology$Fields.monthOfYear,Field,No Comment,public DateTimeField monthOfYear;,org.joda.time.DateTimeField monthOfYear,public 
org.joda.time.chrono.AssembledChronology$Fields.year,Field,No Comment,public DateTimeField year;,org.joda.time.DateTimeField year,public 
org.joda.time.chrono.AssembledChronology$Fields.yearOfEra,Field,No Comment,public DateTimeField yearOfEra;,org.joda.time.DateTimeField yearOfEra,public 
org.joda.time.chrono.AssembledChronology$Fields.yearOfCentury,Field,No Comment,public DateTimeField yearOfCentury;,org.joda.time.DateTimeField yearOfCentury,public 
org.joda.time.chrono.AssembledChronology$Fields.centuryOfEra,Field,No Comment,public DateTimeField centuryOfEra;,org.joda.time.DateTimeField centuryOfEra,public 
org.joda.time.chrono.AssembledChronology$Fields.era,Field,No Comment,public DateTimeField era;,org.joda.time.DateTimeField era,public 
org.joda.time.chrono.GJMonthOfYearDateTimeField.serialVersionUID,Field,Serialization version,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = -4748157875845286249L;",long serialVersionUID,"private , static , final "
org.joda.time.chrono.CopticChronology.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = -5972804258688333942L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.CopticChronology.AM,Field,"* Constant value for 'Anno Martyrum' or 'Era of the Martyrs', equivalent\n     * to the value returned for AD/CE.",public static final int AM = DateTimeConstants.CE;,int AM,"public , static , final "
org.joda.time.chrono.CopticChronology.ERA_FIELD,Field,A singleton era field.,"private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""AM"");",org.joda.time.DateTimeField ERA_FIELD,"private , static , final "
org.joda.time.chrono.CopticChronology.MIN_YEAR,Field,The lowest year that can be fully supported.,private static final int MIN_YEAR = -292269337;,int MIN_YEAR,"private , static , final "
org.joda.time.chrono.CopticChronology.MAX_YEAR,Field,The highest year that can be fully supported.,private static final int MAX_YEAR = 292272708;,int MAX_YEAR,"private , static , final "
org.joda.time.chrono.CopticChronology.cCache,Field,Cache of zone to chronology arrays,"private static final ConcurrentHashMap<DateTimeZone, CopticChronology[]> cCache = new ConcurrentHashMap<DateTimeZone, CopticChronology[]>();",java.util.concurrent.ConcurrentHashMap cCache,"private , static , final "
org.joda.time.chrono.CopticChronology.INSTANCE_UTC,Field,Singleton instance of a UTC CopticChronology,private static final CopticChronology INSTANCE_UTC;,org.joda.time.chrono.CopticChronology INSTANCE_UTC,"private , static , final "
org.joda.time.chrono.BasicFixedMonthChronology.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = 261387371998L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.BasicFixedMonthChronology.MONTH_LENGTH,Field,The length of the month.,static final int MONTH_LENGTH = 30;,int MONTH_LENGTH,"static , final "
org.joda.time.chrono.BasicFixedMonthChronology.MILLIS_PER_YEAR,Field,The typical millis per year.,static final long MILLIS_PER_YEAR = (long) (365.25 * DateTimeConstants.MILLIS_PER_DAY);,long MILLIS_PER_YEAR,"static , final "
org.joda.time.chrono.BasicFixedMonthChronology.MILLIS_PER_MONTH,Field,The length of the month in millis.,static final long MILLIS_PER_MONTH = ((long) MONTH_LENGTH) * DateTimeConstants.MILLIS_PER_DAY;,long MILLIS_PER_MONTH,"static , final "
org.joda.time.chrono.ISOChronology.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = -6212696554273812441L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.ISOChronology.INSTANCE_UTC,Field,Singleton instance of a UTC ISOChronology,private static final ISOChronology INSTANCE_UTC;,org.joda.time.chrono.ISOChronology INSTANCE_UTC,"private , static , final "
org.joda.time.chrono.ISOChronology.cCache,Field,Cache of zone to chronology,"private static final ConcurrentHashMap<DateTimeZone, ISOChronology> cCache = new ConcurrentHashMap<DateTimeZone, ISOChronology>();",java.util.concurrent.ConcurrentHashMap cCache,"private , static , final "
org.joda.time.chrono.ISOChronology$Stub.serialVersionUID,Field,No Comment,private static final long serialVersionUID = -6212696554273812441L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.ISOChronology$Stub.iZone,Field,No Comment,private transient DateTimeZone iZone;,org.joda.time.DateTimeZone iZone,"private , transient "
org.joda.time.chrono.BasicGJChronology.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = 538276888268L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.BasicGJChronology.MIN_DAYS_PER_MONTH_ARRAY,Field,automatically checked.,"private static final int[] MIN_DAYS_PER_MONTH_ARRAY = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };",int[] MIN_DAYS_PER_MONTH_ARRAY,"private , static , final "
org.joda.time.chrono.BasicGJChronology.MAX_DAYS_PER_MONTH_ARRAY,Field,No Comment,"private static final int[] MAX_DAYS_PER_MONTH_ARRAY = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };",int[] MAX_DAYS_PER_MONTH_ARRAY,"private , static , final "
org.joda.time.chrono.BasicGJChronology.MIN_TOTAL_MILLIS_BY_MONTH_ARRAY,Field,No Comment,private static final long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY;,long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY,"private , static , final "
org.joda.time.chrono.BasicGJChronology.MAX_TOTAL_MILLIS_BY_MONTH_ARRAY,Field,No Comment,private static final long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY;,long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY,"private , static , final "
org.joda.time.chrono.BasicGJChronology.FEB_29,Field,No Comment,private static final long FEB_29 = (31L + 29 - 1) * DateTimeConstants.MILLIS_PER_DAY;,long FEB_29,"private , static , final "
org.joda.time.chrono.GJChronology.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = -2545574827706931671L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.GJChronology.DEFAULT_CUTOVER,Field,* The default GregorianJulian cutover point.,static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,org.joda.time.Instant DEFAULT_CUTOVER,"static , final "
org.joda.time.chrono.GJChronology.cCache,Field,Cache of zone to chronology list,"private static final ConcurrentHashMap<GJCacheKey, GJChronology> cCache = new ConcurrentHashMap<GJCacheKey, GJChronology>();",java.util.concurrent.ConcurrentHashMap cCache,"private , static , final "
org.joda.time.chrono.GJChronology.iJulianChronology,Field,-----------------------------------------------------------------------,private JulianChronology iJulianChronology;,org.joda.time.chrono.JulianChronology iJulianChronology,private 
org.joda.time.chrono.GJChronology.iGregorianChronology,Field,No Comment,private GregorianChronology iGregorianChronology;,org.joda.time.chrono.GregorianChronology iGregorianChronology,private 
org.joda.time.chrono.GJChronology.iCutoverInstant,Field,No Comment,private Instant iCutoverInstant;,org.joda.time.Instant iCutoverInstant,private 
org.joda.time.chrono.GJChronology.iCutoverMillis,Field,No Comment,private long iCutoverMillis;,long iCutoverMillis,private 
org.joda.time.chrono.GJChronology.iGapDuration,Field,No Comment,private long iGapDuration;,long iGapDuration,private 
org.joda.time.chrono.GJChronology$CutoverField.serialVersionUID,Field,No Comment,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = 3528501219481026402L;",long serialVersionUID,"private , static , final "
org.joda.time.chrono.GJChronology$CutoverField.iJulianField,Field,No Comment,final DateTimeField iJulianField;,org.joda.time.DateTimeField iJulianField,final 
org.joda.time.chrono.GJChronology$CutoverField.iGregorianField,Field,No Comment,final DateTimeField iGregorianField;,org.joda.time.DateTimeField iGregorianField,final 
org.joda.time.chrono.GJChronology$CutoverField.iCutover,Field,No Comment,final long iCutover;,long iCutover,final 
org.joda.time.chrono.GJChronology$CutoverField.iConvertByWeekyear,Field,No Comment,final boolean iConvertByWeekyear;,boolean iConvertByWeekyear,final 
org.joda.time.chrono.GJChronology$CutoverField.iDurationField,Field,No Comment,protected DurationField iDurationField;,org.joda.time.DurationField iDurationField,protected 
org.joda.time.chrono.GJChronology$CutoverField.iRangeDurationField,Field,No Comment,protected DurationField iRangeDurationField;,org.joda.time.DurationField iRangeDurationField,protected 
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.serialVersionUID,Field,No Comment,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = 3410248757173576441L;",long serialVersionUID,"private , static , final "
org.joda.time.chrono.GJChronology$LinkedDurationField.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 4097975388007713084L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.GJChronology$LinkedDurationField.iField,Field,No Comment,private final ImpreciseCutoverField iField;,org.joda.time.chrono.GJChronology$ImpreciseCutoverField iField,"private , final "
org.joda.time.chrono.StrictChronology.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = 6633006628097111960L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.StrictChronology.iWithUTC,Field,No Comment,private transient Chronology iWithUTC;,org.joda.time.Chronology iWithUTC,"private , transient "
org.joda.time.chrono.BuddhistChronology.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = -3474595157769370126L;,long serialVersionUID,"private , static , final "
org.joda.time.chrono.BuddhistChronology.BE,Field,"* Constant value for 'Buddhist Era', equivalent to the value returned\n     * for AD/CE. Note that this differs from the constant in BuddhistCalendar.",public static final int BE = DateTimeConstants.CE;,int BE,"public , static , final "
org.joda.time.chrono.BuddhistChronology.ERA_FIELD,Field,A singleton era field.,"private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",org.joda.time.DateTimeField ERA_FIELD,"private , static , final "
org.joda.time.chrono.BuddhistChronology.BUDDHIST_OFFSET,Field,Number of years difference in calendars.,private static final int BUDDHIST_OFFSET = 543;,int BUDDHIST_OFFSET,"private , static , final "
org.joda.time.chrono.BuddhistChronology.cCache,Field,Cache of zone to chronology,"private static final ConcurrentHashMap<DateTimeZone, BuddhistChronology> cCache = new ConcurrentHashMap<DateTimeZone, BuddhistChronology>();",java.util.concurrent.ConcurrentHashMap cCache,"private , static , final "
org.joda.time.chrono.BuddhistChronology.INSTANCE_UTC,Field,UTC instance of the chronology,private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,org.joda.time.chrono.BuddhistChronology INSTANCE_UTC,"private , static , final "
org.joda.time.chrono.BasicSingleEraDateTimeField.ERA_VALUE,Field,"* Value of the era, which will be the same as DateTimeConstants.CE.",private static final int ERA_VALUE = DateTimeConstants.CE;,int ERA_VALUE,"private , static , final "
org.joda.time.chrono.BasicSingleEraDateTimeField.iEraText,Field,* Text value of the era.,private final String iEraText;,java.lang.String iEraText,"private , final "
org.joda.time.chrono.GJDayOfWeekDateTimeField.serialVersionUID,Field,Serialization version,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = -3857947176719041436L;",long serialVersionUID,"private , static , final "
org.joda.time.chrono.GJDayOfWeekDateTimeField.iChronology,Field,No Comment,private final BasicChronology iChronology;,org.joda.time.chrono.BasicChronology iChronology,"private , final "
org.joda.time.chrono.BasicDayOfMonthDateTimeField.serialVersionUID,Field,No Comment,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = -4677223814028011723L;",long serialVersionUID,"private , static , final "
org.joda.time.chrono.BasicDayOfMonthDateTimeField.iChronology,Field,No Comment,private final BasicChronology iChronology;,org.joda.time.chrono.BasicChronology iChronology,"private , final "
org.joda.time.Interval.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 4922451897541386752L;,long serialVersionUID,"private , static , final "
org.joda.time.DateTimeComparator.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = -6097339773320178364L;,long serialVersionUID,"private , static , final "
org.joda.time.DateTimeComparator.ALL_INSTANCE,Field,Singleton instance,"private static final DateTimeComparator ALL_INSTANCE = new DateTimeComparator(null, null);",org.joda.time.DateTimeComparator ALL_INSTANCE,"private , static , final "
org.joda.time.DateTimeComparator.DATE_INSTANCE,Field,Singleton instance,"private static final DateTimeComparator DATE_INSTANCE = new DateTimeComparator(DateTimeFieldType.dayOfYear(), null);",org.joda.time.DateTimeComparator DATE_INSTANCE,"private , static , final "
org.joda.time.DateTimeComparator.TIME_INSTANCE,Field,Singleton instance,"private static final DateTimeComparator TIME_INSTANCE = new DateTimeComparator(null, DateTimeFieldType.dayOfYear());",org.joda.time.DateTimeComparator TIME_INSTANCE,"private , static , final "
org.joda.time.DateTimeComparator.iLowerLimit,Field,"The lower limit of fields to compare, null if no limit",private final DateTimeFieldType iLowerLimit;,org.joda.time.DateTimeFieldType iLowerLimit,"private , final "
org.joda.time.DateTimeComparator.iUpperLimit,Field,"The upper limit of fields to compare, null if no limit",private final DateTimeFieldType iUpperLimit;,org.joda.time.DateTimeFieldType iUpperLimit,"private , final "
org.joda.time.LocalDateTime.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = -268716875315837168L;,long serialVersionUID,"private , static , final "
org.joda.time.LocalDateTime.YEAR,Field,The index of the year field in the field array,private static final int YEAR = 0;,int YEAR,"private , static , final "
org.joda.time.LocalDateTime.MONTH_OF_YEAR,Field,The index of the monthOfYear field in the field array,private static final int MONTH_OF_YEAR = 1;,int MONTH_OF_YEAR,"private , static , final "
org.joda.time.LocalDateTime.DAY_OF_MONTH,Field,The index of the dayOfMonth field in the field array,private static final int DAY_OF_MONTH = 2;,int DAY_OF_MONTH,"private , static , final "
org.joda.time.LocalDateTime.MILLIS_OF_DAY,Field,The index of the millis field in the field array,private static final int MILLIS_OF_DAY = 3;,int MILLIS_OF_DAY,"private , static , final "
org.joda.time.LocalDateTime.iLocalMillis,Field,The local millis from 1970-01-01T00:00:00,private final long iLocalMillis;,long iLocalMillis,"private , final "
org.joda.time.LocalDateTime.iChronology,Field,The chronology to use in UTC,private final Chronology iChronology;,org.joda.time.Chronology iChronology,"private , final "
org.joda.time.LocalDateTime$Property.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = -358138762846288L;,long serialVersionUID,"private , static , final "
org.joda.time.LocalDateTime$Property.iInstant,Field,The instant this property is working against,private transient LocalDateTime iInstant;,org.joda.time.LocalDateTime iInstant,"private , transient "
org.joda.time.LocalDateTime$Property.iField,Field,The field this property is working against,private transient DateTimeField iField;,org.joda.time.DateTimeField iField,"private , transient "
org.joda.time.DateTimeFieldType.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = -42615285973990L;,long serialVersionUID,"private , static , final "
org.joda.time.DateTimeFieldType.ERA,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte ERA,"static , final "
org.joda.time.DateTimeFieldType.YEAR_OF_ERA,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte YEAR_OF_ERA,"static , final "
org.joda.time.DateTimeFieldType.CENTURY_OF_ERA,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte CENTURY_OF_ERA,"static , final "
org.joda.time.DateTimeFieldType.YEAR_OF_CENTURY,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte YEAR_OF_CENTURY,"static , final "
org.joda.time.DateTimeFieldType.YEAR,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte YEAR,"static , final "
org.joda.time.DateTimeFieldType.DAY_OF_YEAR,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte DAY_OF_YEAR,"static , final "
org.joda.time.DateTimeFieldType.MONTH_OF_YEAR,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte MONTH_OF_YEAR,"static , final "
org.joda.time.DateTimeFieldType.DAY_OF_MONTH,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte DAY_OF_MONTH,"static , final "
org.joda.time.DateTimeFieldType.WEEKYEAR_OF_CENTURY,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte WEEKYEAR_OF_CENTURY,"static , final "
org.joda.time.DateTimeFieldType.WEEKYEAR,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte WEEKYEAR,"static , final "
org.joda.time.DateTimeFieldType.WEEK_OF_WEEKYEAR,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte WEEK_OF_WEEKYEAR,"static , final "
org.joda.time.DateTimeFieldType.DAY_OF_WEEK,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte DAY_OF_WEEK,"static , final "
org.joda.time.DateTimeFieldType.HALFDAY_OF_DAY,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte HALFDAY_OF_DAY,"static , final "
org.joda.time.DateTimeFieldType.HOUR_OF_HALFDAY,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte HOUR_OF_HALFDAY,"static , final "
org.joda.time.DateTimeFieldType.CLOCKHOUR_OF_HALFDAY,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte CLOCKHOUR_OF_HALFDAY,"static , final "
org.joda.time.DateTimeFieldType.CLOCKHOUR_OF_DAY,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte CLOCKHOUR_OF_DAY,"static , final "
org.joda.time.DateTimeFieldType.HOUR_OF_DAY,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte HOUR_OF_DAY,"static , final "
org.joda.time.DateTimeFieldType.MINUTE_OF_DAY,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte MINUTE_OF_DAY,"static , final "
org.joda.time.DateTimeFieldType.MINUTE_OF_HOUR,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte MINUTE_OF_HOUR,"static , final "
org.joda.time.DateTimeFieldType.SECOND_OF_DAY,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte SECOND_OF_DAY,"static , final "
org.joda.time.DateTimeFieldType.SECOND_OF_MINUTE,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte SECOND_OF_MINUTE,"static , final "
org.joda.time.DateTimeFieldType.MILLIS_OF_DAY,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte MILLIS_OF_DAY,"static , final "
org.joda.time.DateTimeFieldType.MILLIS_OF_SECOND,Field,Ordinal values for standard field types.,"static final byte ERA = 1, YEAR_OF_ERA = 2, CENTURY_OF_ERA = 3, YEAR_OF_CENTURY = 4, YEAR = 5, DAY_OF_YEAR = 6, MONTH_OF_YEAR = 7, DAY_OF_MONTH = 8, WEEKYEAR_OF_CENTURY = 9, WEEKYEAR = 10, WEEK_OF_WEEKYEAR = 11, DAY_OF_WEEK = 12, HALFDAY_OF_DAY = 13, HOUR_OF_HALFDAY = 14, CLOCKHOUR_OF_HALFDAY = 15, CLOCKHOUR_OF_DAY = 16, HOUR_OF_DAY = 17, MINUTE_OF_DAY = 18, MINUTE_OF_HOUR = 19, SECOND_OF_DAY = 20, SECOND_OF_MINUTE = 21, MILLIS_OF_DAY = 22, MILLIS_OF_SECOND = 23;",byte MILLIS_OF_SECOND,"static , final "
org.joda.time.DateTimeFieldType.ERA_TYPE,Field,The era field type.,"private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(""era"", ERA, DurationFieldType.eras(), null);",org.joda.time.DateTimeFieldType ERA_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.YEAR_OF_ERA_TYPE,Field,The yearOfEra field type.,"private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(""yearOfEra"", YEAR_OF_ERA, DurationFieldType.years(), DurationFieldType.eras());",org.joda.time.DateTimeFieldType YEAR_OF_ERA_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.CENTURY_OF_ERA_TYPE,Field,The centuryOfEra field type.,"private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(""centuryOfEra"", CENTURY_OF_ERA, DurationFieldType.centuries(), DurationFieldType.eras());",org.joda.time.DateTimeFieldType CENTURY_OF_ERA_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.YEAR_OF_CENTURY_TYPE,Field,The yearOfCentury field type.,"private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(""yearOfCentury"", YEAR_OF_CENTURY, DurationFieldType.years(), DurationFieldType.centuries());",org.joda.time.DateTimeFieldType YEAR_OF_CENTURY_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.YEAR_TYPE,Field,The year field type.,"private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(""year"", YEAR, DurationFieldType.years(), null);",org.joda.time.DateTimeFieldType YEAR_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.DAY_OF_YEAR_TYPE,Field,The dayOfYear field type.,"private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(""dayOfYear"", DAY_OF_YEAR, DurationFieldType.days(), DurationFieldType.years());",org.joda.time.DateTimeFieldType DAY_OF_YEAR_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.MONTH_OF_YEAR_TYPE,Field,The monthOfYear field type.,"private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(""monthOfYear"", MONTH_OF_YEAR, DurationFieldType.months(), DurationFieldType.years());",org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.DAY_OF_MONTH_TYPE,Field,The dayOfMonth field type.,"private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(""dayOfMonth"", DAY_OF_MONTH, DurationFieldType.days(), DurationFieldType.months());",org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.WEEKYEAR_OF_CENTURY_TYPE,Field,The weekyearOfCentury field type.,"private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(""weekyearOfCentury"", WEEKYEAR_OF_CENTURY, DurationFieldType.weekyears(), DurationFieldType.centuries());",org.joda.time.DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.WEEKYEAR_TYPE,Field,The weekyear field type.,"private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(""weekyear"", WEEKYEAR, DurationFieldType.weekyears(), null);",org.joda.time.DateTimeFieldType WEEKYEAR_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.WEEK_OF_WEEKYEAR_TYPE,Field,The weekOfWeekyear field type.,"private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(""weekOfWeekyear"", WEEK_OF_WEEKYEAR, DurationFieldType.weeks(), DurationFieldType.weekyears());",org.joda.time.DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.DAY_OF_WEEK_TYPE,Field,The dayOfWeek field type.,"private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(""dayOfWeek"", DAY_OF_WEEK, DurationFieldType.days(), DurationFieldType.weeks());",org.joda.time.DateTimeFieldType DAY_OF_WEEK_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.HALFDAY_OF_DAY_TYPE,Field,The halfday field type.,"private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(""halfdayOfDay"", HALFDAY_OF_DAY, DurationFieldType.halfdays(), DurationFieldType.days());",org.joda.time.DateTimeFieldType HALFDAY_OF_DAY_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.HOUR_OF_HALFDAY_TYPE,Field,The hourOfHalfday field type.,"private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(""hourOfHalfday"", HOUR_OF_HALFDAY, DurationFieldType.hours(), DurationFieldType.halfdays());",org.joda.time.DateTimeFieldType HOUR_OF_HALFDAY_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.CLOCKHOUR_OF_HALFDAY_TYPE,Field,The clockhourOfHalfday field type.,"private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(""clockhourOfHalfday"", CLOCKHOUR_OF_HALFDAY, DurationFieldType.hours(), DurationFieldType.halfdays());",org.joda.time.DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.CLOCKHOUR_OF_DAY_TYPE,Field,The clockhourOfDay field type.,"private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(""clockhourOfDay"", CLOCKHOUR_OF_DAY, DurationFieldType.hours(), DurationFieldType.days());",org.joda.time.DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.HOUR_OF_DAY_TYPE,Field,The hourOfDay field type.,"private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(""hourOfDay"", HOUR_OF_DAY, DurationFieldType.hours(), DurationFieldType.days());",org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.MINUTE_OF_DAY_TYPE,Field,The minuteOfDay field type.,"private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(""minuteOfDay"", MINUTE_OF_DAY, DurationFieldType.minutes(), DurationFieldType.days());",org.joda.time.DateTimeFieldType MINUTE_OF_DAY_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.MINUTE_OF_HOUR_TYPE,Field,The minuteOfHour field type.,"private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(""minuteOfHour"", MINUTE_OF_HOUR, DurationFieldType.minutes(), DurationFieldType.hours());",org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.SECOND_OF_DAY_TYPE,Field,The secondOfDay field type.,"private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(""secondOfDay"", SECOND_OF_DAY, DurationFieldType.seconds(), DurationFieldType.days());",org.joda.time.DateTimeFieldType SECOND_OF_DAY_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.SECOND_OF_MINUTE_TYPE,Field,The secondOfMinute field type.,"private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(""secondOfMinute"", SECOND_OF_MINUTE, DurationFieldType.seconds(), DurationFieldType.minutes());",org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.MILLIS_OF_DAY_TYPE,Field,The millisOfDay field type.,"private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(""millisOfDay"", MILLIS_OF_DAY, DurationFieldType.millis(), DurationFieldType.days());",org.joda.time.DateTimeFieldType MILLIS_OF_DAY_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.MILLIS_OF_SECOND_TYPE,Field,The millisOfSecond field type.,"private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(""millisOfSecond"", MILLIS_OF_SECOND, DurationFieldType.millis(), DurationFieldType.seconds());",org.joda.time.DateTimeFieldType MILLIS_OF_SECOND_TYPE,"private , static , final "
org.joda.time.DateTimeFieldType.iName,Field,The name of the field.,private final String iName;,java.lang.String iName,"private , final "
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = -9937958251642L;,long serialVersionUID,"private , static , final "
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.iOrdinal,Field,"The ordinal of the standard field type, for switch statements",private final byte iOrdinal;,byte iOrdinal,"private , final "
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.iUnitType,Field,The unit duration of the field.,private final transient DurationFieldType iUnitType;,org.joda.time.DurationFieldType iUnitType,"private , final , transient "
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.iRangeType,Field,The range duration of the field.,private final transient DurationFieldType iRangeType;,org.joda.time.DurationFieldType iRangeType,"private , final , transient "
org.joda.time.Months.ZERO,Field,Constant representing zero months.,public static final Months ZERO = new Months(0);,org.joda.time.Months ZERO,"public , static , final "
org.joda.time.Months.ONE,Field,Constant representing one month.,public static final Months ONE = new Months(1);,org.joda.time.Months ONE,"public , static , final "
org.joda.time.Months.TWO,Field,Constant representing two months.,public static final Months TWO = new Months(2);,org.joda.time.Months TWO,"public , static , final "
org.joda.time.Months.THREE,Field,Constant representing three months.,public static final Months THREE = new Months(3);,org.joda.time.Months THREE,"public , static , final "
org.joda.time.Months.FOUR,Field,Constant representing four months.,public static final Months FOUR = new Months(4);,org.joda.time.Months FOUR,"public , static , final "
org.joda.time.Months.FIVE,Field,Constant representing five months.,public static final Months FIVE = new Months(5);,org.joda.time.Months FIVE,"public , static , final "
org.joda.time.Months.SIX,Field,Constant representing six months.,public static final Months SIX = new Months(6);,org.joda.time.Months SIX,"public , static , final "
org.joda.time.Months.SEVEN,Field,Constant representing seven months.,public static final Months SEVEN = new Months(7);,org.joda.time.Months SEVEN,"public , static , final "
org.joda.time.Months.EIGHT,Field,Constant representing eight months.,public static final Months EIGHT = new Months(8);,org.joda.time.Months EIGHT,"public , static , final "
org.joda.time.Months.NINE,Field,Constant representing nine months.,public static final Months NINE = new Months(9);,org.joda.time.Months NINE,"public , static , final "
org.joda.time.Months.TEN,Field,Constant representing ten months.,public static final Months TEN = new Months(10);,org.joda.time.Months TEN,"public , static , final "
org.joda.time.Months.ELEVEN,Field,Constant representing eleven months.,public static final Months ELEVEN = new Months(11);,org.joda.time.Months ELEVEN,"public , static , final "
org.joda.time.Months.TWELVE,Field,Constant representing twelve months.,public static final Months TWELVE = new Months(12);,org.joda.time.Months TWELVE,"public , static , final "
org.joda.time.Months.MAX_VALUE,Field,Constant representing the maximum number of months that can be stored in this object.,public static final Months MAX_VALUE = new Months(Integer.MAX_VALUE);,org.joda.time.Months MAX_VALUE,"public , static , final "
org.joda.time.Months.MIN_VALUE,Field,Constant representing the minimum number of months that can be stored in this object.,public static final Months MIN_VALUE = new Months(Integer.MIN_VALUE);,org.joda.time.Months MIN_VALUE,"public , static , final "
org.joda.time.Months.PARSER,Field,The parser to use for this class.,private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.months());,org.joda.time.format.PeriodFormatter PARSER,"private , static , final "
org.joda.time.Months.serialVersionUID,Field,Serialization version.,private static final long serialVersionUID = 87525275727380867L;,long serialVersionUID,"private , static , final "
org.joda.time.LocalTime.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = -12873158713873L;,long serialVersionUID,"private , static , final "
org.joda.time.LocalTime.MIDNIGHT,Field,Constant for midnight.,"public static final LocalTime MIDNIGHT = new LocalTime(0, 0, 0, 0);",org.joda.time.LocalTime MIDNIGHT,"public , static , final "
org.joda.time.LocalTime.HOUR_OF_DAY,Field,The index of the hourOfDay field in the field array,private static final int HOUR_OF_DAY = 0;,int HOUR_OF_DAY,"private , static , final "
org.joda.time.LocalTime.MINUTE_OF_HOUR,Field,The index of the minuteOfHour field in the field array,private static final int MINUTE_OF_HOUR = 1;,int MINUTE_OF_HOUR,"private , static , final "
org.joda.time.LocalTime.SECOND_OF_MINUTE,Field,The index of the secondOfMinute field in the field array,private static final int SECOND_OF_MINUTE = 2;,int SECOND_OF_MINUTE,"private , static , final "
org.joda.time.LocalTime.MILLIS_OF_SECOND,Field,The index of the millisOfSecond field in the field array,private static final int MILLIS_OF_SECOND = 3;,int MILLIS_OF_SECOND,"private , static , final "
org.joda.time.LocalTime.TIME_DURATION_TYPES,Field,Set of known duration types.,private static final Set<DurationFieldType> TIME_DURATION_TYPES = new HashSet<DurationFieldType>();,java.util.Set TIME_DURATION_TYPES,"private , static , final "
org.joda.time.LocalTime.iLocalMillis,Field,The local millis from 1970-01-01T00:00:00,private final long iLocalMillis;,long iLocalMillis,"private , final "
org.joda.time.LocalTime.iChronology,Field,"The chronology to use, in UTC",private final Chronology iChronology;,org.joda.time.Chronology iChronology,"private , final "
org.joda.time.LocalTime$Property.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = -325842547277223L;,long serialVersionUID,"private , static , final "
org.joda.time.LocalTime$Property.iInstant,Field,The instant this property is working against,private transient LocalTime iInstant;,org.joda.time.LocalTime iInstant,"private , transient "
org.joda.time.LocalTime$Property.iField,Field,The field this property is working against,private transient DateTimeField iField;,org.joda.time.DateTimeField iField,"private , transient "
org.joda.time.Weeks.ZERO,Field,Constant representing zero weeks.,public static final Weeks ZERO = new Weeks(0);,org.joda.time.Weeks ZERO,"public , static , final "
org.joda.time.Weeks.ONE,Field,Constant representing one week.,public static final Weeks ONE = new Weeks(1);,org.joda.time.Weeks ONE,"public , static , final "
org.joda.time.Weeks.TWO,Field,Constant representing two weeks.,public static final Weeks TWO = new Weeks(2);,org.joda.time.Weeks TWO,"public , static , final "
org.joda.time.Weeks.THREE,Field,Constant representing three weeks.,public static final Weeks THREE = new Weeks(3);,org.joda.time.Weeks THREE,"public , static , final "
org.joda.time.Weeks.MAX_VALUE,Field,Constant representing the maximum number of weeks that can be stored in this object.,public static final Weeks MAX_VALUE = new Weeks(Integer.MAX_VALUE);,org.joda.time.Weeks MAX_VALUE,"public , static , final "
org.joda.time.Weeks.MIN_VALUE,Field,Constant representing the minimum number of weeks that can be stored in this object.,public static final Weeks MIN_VALUE = new Weeks(Integer.MIN_VALUE);,org.joda.time.Weeks MIN_VALUE,"public , static , final "
org.joda.time.Weeks.PARSER,Field,The parser to use for this class.,private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.weeks());,org.joda.time.format.PeriodFormatter PARSER,"private , static , final "
org.joda.time.Weeks.serialVersionUID,Field,Serialization version.,private static final long serialVersionUID = 87525275727380866L;,long serialVersionUID,"private , static , final "
org.joda.time.Hours.ZERO,Field,Constant representing zero hours.,public static final Hours ZERO = new Hours(0);,org.joda.time.Hours ZERO,"public , static , final "
org.joda.time.Hours.ONE,Field,Constant representing one hour.,public static final Hours ONE = new Hours(1);,org.joda.time.Hours ONE,"public , static , final "
org.joda.time.Hours.TWO,Field,Constant representing two hours.,public static final Hours TWO = new Hours(2);,org.joda.time.Hours TWO,"public , static , final "
org.joda.time.Hours.THREE,Field,Constant representing three hours.,public static final Hours THREE = new Hours(3);,org.joda.time.Hours THREE,"public , static , final "
org.joda.time.Hours.FOUR,Field,Constant representing four hours.,public static final Hours FOUR = new Hours(4);,org.joda.time.Hours FOUR,"public , static , final "
org.joda.time.Hours.FIVE,Field,Constant representing five hours.,public static final Hours FIVE = new Hours(5);,org.joda.time.Hours FIVE,"public , static , final "
org.joda.time.Hours.SIX,Field,Constant representing six hours.,public static final Hours SIX = new Hours(6);,org.joda.time.Hours SIX,"public , static , final "
org.joda.time.Hours.SEVEN,Field,Constant representing seven hours.,public static final Hours SEVEN = new Hours(7);,org.joda.time.Hours SEVEN,"public , static , final "
org.joda.time.Hours.EIGHT,Field,Constant representing eight hours.,public static final Hours EIGHT = new Hours(8);,org.joda.time.Hours EIGHT,"public , static , final "
org.joda.time.Hours.MAX_VALUE,Field,Constant representing the maximum number of hours that can be stored in this object.,public static final Hours MAX_VALUE = new Hours(Integer.MAX_VALUE);,org.joda.time.Hours MAX_VALUE,"public , static , final "
org.joda.time.Hours.MIN_VALUE,Field,Constant representing the minimum number of hours that can be stored in this object.,public static final Hours MIN_VALUE = new Hours(Integer.MIN_VALUE);,org.joda.time.Hours MIN_VALUE,"public , static , final "
org.joda.time.Hours.PARSER,Field,The parser to use for this class.,private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.hours());,org.joda.time.format.PeriodFormatter PARSER,"private , static , final "
org.joda.time.Hours.serialVersionUID,Field,Serialization version.,private static final long serialVersionUID = 87525275727380864L;,long serialVersionUID,"private , static , final "
org.joda.time.field.OffsetDateTimeField.serialVersionUID,Field,No Comment,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = 3145790132623583142L;",long serialVersionUID,"private , static , final "
org.joda.time.field.OffsetDateTimeField.iOffset,Field,No Comment,private final int iOffset;,int iOffset,"private , final "
org.joda.time.field.OffsetDateTimeField.iMin,Field,No Comment,private final int iMin;,int iMin,"private , final "
org.joda.time.field.OffsetDateTimeField.iMax,Field,No Comment,private final int iMax;,int iMax,"private , final "
org.joda.time.field.SkipDateTimeField.serialVersionUID,Field,Serialization version.,private static final long serialVersionUID = -8869148464118507846L;,long serialVersionUID,"private , static , final "
org.joda.time.field.SkipDateTimeField.iChronology,Field,The chronology to wrap.,private final Chronology iChronology;,org.joda.time.Chronology iChronology,"private , final "
org.joda.time.field.SkipDateTimeField.iSkip,Field,The value to skip.,private final int iSkip;,int iSkip,"private , final "
org.joda.time.field.SkipDateTimeField.iMinValue,Field,The calculated minimum value.,private transient int iMinValue;,int iMinValue,"private , transient "
org.joda.time.field.SkipUndoDateTimeField.serialVersionUID,Field,Serialization version.,private static final long serialVersionUID = -5875876968979L;,long serialVersionUID,"private , static , final "
org.joda.time.field.SkipUndoDateTimeField.iChronology,Field,The chronology to wrap.,private final Chronology iChronology;,org.joda.time.Chronology iChronology,"private , final "
org.joda.time.field.SkipUndoDateTimeField.iSkip,Field,The value to skip.,private final int iSkip;,int iSkip,"private , final "
org.joda.time.field.SkipUndoDateTimeField.iMinValue,Field,The calculated minimum value.,private transient int iMinValue;,int iMinValue,"private , transient "
org.joda.time.field.ScaledDurationField.serialVersionUID,Field,No Comment,private static final long serialVersionUID = -3205227092378684157L;,long serialVersionUID,"private , static , final "
org.joda.time.field.ScaledDurationField.iScalar,Field,No Comment,private final int iScalar;,int iScalar,"private , final "
org.joda.time.field.PreciseDateTimeField.serialVersionUID,Field,No Comment,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = -5586801265774496376L;",long serialVersionUID,"private , static , final "
org.joda.time.field.PreciseDateTimeField.iRange,Field,The maximum range in the correct units,private final int iRange;,int iRange,"private , final "
org.joda.time.field.PreciseDateTimeField.iRangeField,Field,No Comment,private final DurationField iRangeField;,org.joda.time.DurationField iRangeField,"private , final "
org.joda.time.field.AbstractReadableInstantFieldProperty.serialVersionUID,Field,Serialization version.,private static final long serialVersionUID = 1971226328211649661L;,long serialVersionUID,"private , static , final "
org.joda.time.field.MillisDurationField.serialVersionUID,Field,Serialization lock.,private static final long serialVersionUID = 2656707858124633367L;,long serialVersionUID,"private , static , final "
org.joda.time.field.MillisDurationField.INSTANCE,Field,Singleton instance.,public static final DurationField INSTANCE = new MillisDurationField();,org.joda.time.DurationField INSTANCE,"public , static , final "
org.joda.time.field.PreciseDurationDateTimeField.serialVersionUID,Field,No Comment,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = 5004523158306266035L;",long serialVersionUID,"private , static , final "
org.joda.time.field.PreciseDurationDateTimeField.iUnitMillis,Field,The fractional unit in millis,final long iUnitMillis;,long iUnitMillis,final 
org.joda.time.field.PreciseDurationDateTimeField.iUnitField,Field,No Comment,private final DurationField iUnitField;,org.joda.time.DurationField iUnitField,"private , final "
org.joda.time.field.StrictDateTimeField.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 3154803964207950910L;,long serialVersionUID,"private , static , final "
org.joda.time.field.PreciseDurationField.serialVersionUID,Field,No Comment,private static final long serialVersionUID = -8346152187724495365L;,long serialVersionUID,"private , static , final "
org.joda.time.field.PreciseDurationField.iUnitMillis,Field,The size of the unit,private final long iUnitMillis;,long iUnitMillis,"private , final "
org.joda.time.field.ZeroIsMaxDateTimeField.serialVersionUID,Field,No Comment,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = 961749798233026866L;",long serialVersionUID,"private , static , final "
org.joda.time.field.DecoratedDurationField.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 8019982251647420015L;,long serialVersionUID,"private , static , final "
org.joda.time.field.DecoratedDurationField.iField,Field,The DurationField being wrapped,private final DurationField iField;,org.joda.time.DurationField iField,"private , final "
org.joda.time.field.DividedDateTimeField.serialVersionUID,Field,No Comment,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = 8318475124230605365L;",long serialVersionUID,"private , static , final "
org.joda.time.field.DividedDateTimeField.iDivisor,Field,Shared with RemainderDateTimeField.,final int iDivisor;,int iDivisor,final 
org.joda.time.field.DividedDateTimeField.iDurationField,Field,No Comment,final DurationField iDurationField;,org.joda.time.DurationField iDurationField,final 
org.joda.time.field.DividedDateTimeField.iRangeDurationField,Field,No Comment,final DurationField iRangeDurationField;,org.joda.time.DurationField iRangeDurationField,final 
org.joda.time.field.DividedDateTimeField.iMin,Field,No Comment,private final int iMin;,int iMin,"private , final "
org.joda.time.field.DividedDateTimeField.iMax,Field,No Comment,private final int iMax;,int iMax,"private , final "
org.joda.time.field.RemainderDateTimeField.serialVersionUID,Field,No Comment,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = 5708241235177666790L;",long serialVersionUID,"private , static , final "
org.joda.time.field.RemainderDateTimeField.iDivisor,Field,Shared with DividedDateTimeField.,final int iDivisor;,int iDivisor,final 
org.joda.time.field.RemainderDateTimeField.iDurationField,Field,No Comment,final DurationField iDurationField;,org.joda.time.DurationField iDurationField,final 
org.joda.time.field.RemainderDateTimeField.iRangeField,Field,No Comment,final DurationField iRangeField;,org.joda.time.DurationField iRangeField,final 
org.joda.time.field.DecoratedDateTimeField.serialVersionUID,Field,Serialization version,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = 203115783733757597L;",long serialVersionUID,"private , static , final "
org.joda.time.field.DecoratedDateTimeField.iField,Field,The DateTimeField being wrapped,private final DateTimeField iField;,org.joda.time.DateTimeField iField,"private , final "
org.joda.time.field.LenientDateTimeField.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 8714085824173290599L;,long serialVersionUID,"private , static , final "
org.joda.time.field.LenientDateTimeField.iBase,Field,No Comment,private final Chronology iBase;,org.joda.time.Chronology iBase,"private , final "
org.joda.time.field.DelegatedDurationField.serialVersionUID,Field,Serialization lock.,private static final long serialVersionUID = -5576443481242007829L;,long serialVersionUID,"private , static , final "
org.joda.time.field.DelegatedDurationField.iField,Field,The DurationField being wrapped,private final DurationField iField;,org.joda.time.DurationField iField,"private , final "
org.joda.time.field.DelegatedDurationField.iType,Field,The field type,private final DurationFieldType iType;,org.joda.time.DurationFieldType iType,"private , final "
org.joda.time.field.BaseDurationField.serialVersionUID,Field,Serialization lock.,private static final long serialVersionUID = -2554245107589433218L;,long serialVersionUID,"private , static , final "
org.joda.time.field.BaseDurationField.iType,Field,A descriptive name for the field.,private final DurationFieldType iType;,org.joda.time.DurationFieldType iType,"private , final "
org.joda.time.field.UnsupportedDurationField.serialVersionUID,Field,Serialization lock.,private static final long serialVersionUID = -6390301302770925357L;,long serialVersionUID,"private , static , final "
org.joda.time.field.UnsupportedDurationField.cCache,Field,The cache of unsupported duration field instances,"private static HashMap<DurationFieldType, UnsupportedDurationField> cCache;",java.util.HashMap cCache,"private , static "
org.joda.time.field.UnsupportedDurationField.iType,Field,The name of the field,private final DurationFieldType iType;,org.joda.time.DurationFieldType iType,"private , final "
org.joda.time.field.UnsupportedDateTimeField.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = -1934618396111902255L;,long serialVersionUID,"private , static , final "
org.joda.time.field.UnsupportedDateTimeField.cCache,Field,The cache of unsupported datetime field instances,"private static HashMap<DateTimeFieldType, UnsupportedDateTimeField> cCache;",java.util.HashMap cCache,"private , static "
org.joda.time.field.UnsupportedDateTimeField.iType,Field,The field type,private final DateTimeFieldType iType;,org.joda.time.DateTimeFieldType iType,"private , final "
org.joda.time.field.UnsupportedDateTimeField.iDurationField,Field,The duration of the datetime field,private final DurationField iDurationField;,org.joda.time.DurationField iDurationField,"private , final "
org.joda.time.field.BaseDateTimeField.iType,Field,The field type.,private final DateTimeFieldType iType;,org.joda.time.DateTimeFieldType iType,"private , final "
org.joda.time.field.ImpreciseDateTimeField.serialVersionUID,Field,No Comment,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = 7190739608550251860L;",long serialVersionUID,"private , static , final "
org.joda.time.field.ImpreciseDateTimeField.iUnitMillis,Field,No Comment,final long iUnitMillis;,long iUnitMillis,final 
org.joda.time.field.ImpreciseDateTimeField.iDurationField,Field,No Comment,private final DurationField iDurationField;,org.joda.time.DurationField iDurationField,"private , final "
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.serialVersionUID,Field,No Comment,private static final long serialVersionUID = -203813474600094134L;,long serialVersionUID,"private , static , final "
org.joda.time.field.DelegatedDateTimeField.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = -4730164440214502503L;,long serialVersionUID,"private , static , final "
org.joda.time.field.DelegatedDateTimeField.iField,Field,The DateTimeField being wrapped.,private final DateTimeField iField;,org.joda.time.DateTimeField iField,"private , final "
org.joda.time.field.DelegatedDateTimeField.iRangeDurationField,Field,The range duration.,private final DurationField iRangeDurationField;,org.joda.time.DurationField iRangeDurationField,"private , final "
org.joda.time.field.DelegatedDateTimeField.iType,Field,The override field type.,private final DateTimeFieldType iType;,org.joda.time.DateTimeFieldType iType,"private , final "
org.joda.time.YearMonth.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 797544782896179L;,long serialVersionUID,"private , static , final "
org.joda.time.YearMonth.FIELD_TYPES,Field,The singleton set of field types,"private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };",org.joda.time.DateTimeFieldType[] FIELD_TYPES,"private , static , final "
org.joda.time.YearMonth.YEAR,Field,The index of the year field in the field array,public static final int YEAR = 0;,int YEAR,"public , static , final "
org.joda.time.YearMonth.MONTH_OF_YEAR,Field,The index of the monthOfYear field in the field array,public static final int MONTH_OF_YEAR = 1;,int MONTH_OF_YEAR,"public , static , final "
org.joda.time.YearMonth$Property.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 5727734012190224363L;,long serialVersionUID,"private , static , final "
org.joda.time.YearMonth$Property.iBase,Field,The partial,private final YearMonth iBase;,org.joda.time.YearMonth iBase,"private , final "
org.joda.time.YearMonth$Property.iFieldIndex,Field,The field index,private final int iFieldIndex;,int iFieldIndex,"private , final "
org.joda.time.DateTimeUtils.SYSTEM_MILLIS_PROVIDER,Field,* The singleton instance of the system millisecond provider.,public static final MillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,org.joda.time.DateTimeUtils$MillisProvider SYSTEM_MILLIS_PROVIDER,"public , static , final "
org.joda.time.DateTimeUtils.cMillisProvider,Field,The millisecond provider currently in use.,private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,org.joda.time.DateTimeUtils$MillisProvider cMillisProvider,"private , static , volatile "
org.joda.time.DateTimeUtils.cZoneNames,Field,* The default names.\n     * This is lazily initialized to reduce risks of race conditions at startup.,"private static final AtomicReference<Map<String, DateTimeZone>> cZoneNames = new AtomicReference<Map<String, DateTimeZone>>();",java.util.concurrent.atomic.AtomicReference cZoneNames,"private , static , final "
org.joda.time.DateTimeUtils$FixedMillisProvider.iMillis,Field,The fixed millis value.,private final long iMillis;,long iMillis,"private , final "
org.joda.time.DateTimeUtils$OffsetMillisProvider.iMillis,Field,The millis offset.,private final long iMillis;,long iMillis,"private , final "
org.joda.time.UTCDateTimeZone.INSTANCE,Field,No Comment,static final DateTimeZone INSTANCE = new UTCDateTimeZone();,org.joda.time.DateTimeZone INSTANCE,"static , final "
org.joda.time.UTCDateTimeZone.serialVersionUID,Field,No Comment,private static final long serialVersionUID = -3513011772763289092L;,long serialVersionUID,"private , static , final "
org.joda.time.MonthDay.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 2954560699050434609L;,long serialVersionUID,"private , static , final "
org.joda.time.MonthDay.FIELD_TYPES,Field,The singleton set of field types,"private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] { DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() };",org.joda.time.DateTimeFieldType[] FIELD_TYPES,"private , static , final "
org.joda.time.MonthDay.PARSER,Field,The singleton set of field types,"private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder().appendOptional(ISODateTimeFormat.localDateParser().getParser()).appendOptional(DateTimeFormat.forPattern(""--MM-dd"").getParser()).toFormatter();",org.joda.time.format.DateTimeFormatter PARSER,"private , static , final "
org.joda.time.MonthDay.MONTH_OF_YEAR,Field,The index of the monthOfYear field in the field array,public static final int MONTH_OF_YEAR = 0;,int MONTH_OF_YEAR,"public , static , final "
org.joda.time.MonthDay.DAY_OF_MONTH,Field,The index of the day field in the field array,public static final int DAY_OF_MONTH = 1;,int DAY_OF_MONTH,"public , static , final "
org.joda.time.MonthDay$Property.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 5727734012190224363L;,long serialVersionUID,"private , static , final "
org.joda.time.MonthDay$Property.iBase,Field,The partial,private final MonthDay iBase;,org.joda.time.MonthDay iBase,"private , final "
org.joda.time.MonthDay$Property.iFieldIndex,Field,The field index,private final int iFieldIndex;,int iFieldIndex,"private , final "
org.joda.time.TimeOfDay.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 3633353405803318660L;,long serialVersionUID,"private , static , final "
org.joda.time.TimeOfDay.FIELD_TYPES,Field,The singleton set of field types,"private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] { DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(), DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond() };",org.joda.time.DateTimeFieldType[] FIELD_TYPES,"private , static , final "
org.joda.time.TimeOfDay.MIDNIGHT,Field,Constant for midnight.,"public static final TimeOfDay MIDNIGHT = new TimeOfDay(0, 0, 0, 0);",org.joda.time.TimeOfDay MIDNIGHT,"public , static , final "
org.joda.time.TimeOfDay.HOUR_OF_DAY,Field,The index of the hourOfDay field in the field array,public static final int HOUR_OF_DAY = 0;,int HOUR_OF_DAY,"public , static , final "
org.joda.time.TimeOfDay.MINUTE_OF_HOUR,Field,The index of the minuteOfHour field in the field array,public static final int MINUTE_OF_HOUR = 1;,int MINUTE_OF_HOUR,"public , static , final "
org.joda.time.TimeOfDay.SECOND_OF_MINUTE,Field,The index of the secondOfMinute field in the field array,public static final int SECOND_OF_MINUTE = 2;,int SECOND_OF_MINUTE,"public , static , final "
org.joda.time.TimeOfDay.MILLIS_OF_SECOND,Field,The index of the millisOfSecond field in the field array,public static final int MILLIS_OF_SECOND = 3;,int MILLIS_OF_SECOND,"public , static , final "
org.joda.time.TimeOfDay$Property.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 5598459141741063833L;,long serialVersionUID,"private , static , final "
org.joda.time.TimeOfDay$Property.iTimeOfDay,Field,The partial,private final TimeOfDay iTimeOfDay;,org.joda.time.TimeOfDay iTimeOfDay,"private , final "
org.joda.time.TimeOfDay$Property.iFieldIndex,Field,The field index,private final int iFieldIndex;,int iFieldIndex,"private , final "
org.joda.time.YearMonthDay.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 797544782896179L;,long serialVersionUID,"private , static , final "
org.joda.time.YearMonthDay.FIELD_TYPES,Field,The singleton set of field types,"private static final DateTimeFieldType[] FIELD_TYPES = new DateTimeFieldType[] { DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth() };",org.joda.time.DateTimeFieldType[] FIELD_TYPES,"private , static , final "
org.joda.time.YearMonthDay.YEAR,Field,The index of the year field in the field array,public static final int YEAR = 0;,int YEAR,"public , static , final "
org.joda.time.YearMonthDay.MONTH_OF_YEAR,Field,The index of the monthOfYear field in the field array,public static final int MONTH_OF_YEAR = 1;,int MONTH_OF_YEAR,"public , static , final "
org.joda.time.YearMonthDay.DAY_OF_MONTH,Field,The index of the dayOfMonth field in the field array,public static final int DAY_OF_MONTH = 2;,int DAY_OF_MONTH,"public , static , final "
org.joda.time.YearMonthDay$Property.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 5727734012190224363L;,long serialVersionUID,"private , static , final "
org.joda.time.YearMonthDay$Property.iYearMonthDay,Field,The partial,private final YearMonthDay iYearMonthDay;,org.joda.time.YearMonthDay iYearMonthDay,"private , final "
org.joda.time.YearMonthDay$Property.iFieldIndex,Field,The field index,private final int iFieldIndex;,int iFieldIndex,"private , final "
org.joda.time.JodaTimePermission.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 1408944367355875472L;,long serialVersionUID,"private , static , final "
org.joda.time.DateTimeZone.serialVersionUID,Field,Serialization version.,private static final long serialVersionUID = 5546345482340108586L;,long serialVersionUID,"private , static , final "
org.joda.time.DateTimeZone.UTC,Field,The time zone for Universal Coordinated Time,public static final DateTimeZone UTC = UTCDateTimeZone.INSTANCE;,org.joda.time.DateTimeZone UTC,"public , static , final "
org.joda.time.DateTimeZone.MAX_MILLIS,Field,Maximum offset.,private static final int MAX_MILLIS = (86400 * 1000) - 1;,int MAX_MILLIS,"private , static , final "
org.joda.time.DateTimeZone.cProvider,Field,* The instance that is providing time zones.\n     * This is lazily initialized to reduce risks of race conditions at startup.,private static final AtomicReference<Provider> cProvider = new AtomicReference<Provider>();,java.util.concurrent.atomic.AtomicReference cProvider,"private , static , final "
org.joda.time.DateTimeZone.cNameProvider,Field,* The instance that is providing time zone names.\n     * This is lazily initialized to reduce risks of race conditions at startup.,private static final AtomicReference<NameProvider> cNameProvider = new AtomicReference<NameProvider>();,java.util.concurrent.atomic.AtomicReference cNameProvider,"private , static , final "
org.joda.time.DateTimeZone.cDefault,Field,* The default time zone.\n     * This is lazily initialized to reduce risks of race conditions at startup.,private static final AtomicReference<DateTimeZone> cDefault = new AtomicReference<DateTimeZone>();,java.util.concurrent.atomic.AtomicReference cDefault,"private , static , final "
org.joda.time.DateTimeZone.DEFAULT_TZ_DATA_PATH,Field,* The default TZ data path\n     * This is the default classpath location containing the compiled data files.,"public static final String DEFAULT_TZ_DATA_PATH = ""org/joda/time/tz/data"";",java.lang.String DEFAULT_TZ_DATA_PATH,"public , static , final "
org.joda.time.DateTimeZone.iID,Field,No Comment,private final String iID;,java.lang.String iID,"private , final "
org.joda.time.DateTimeZone$Stub.serialVersionUID,Field,Serialization lock.,private static final long serialVersionUID = -6471952376487863581L;,long serialVersionUID,"private , static , final "
org.joda.time.DateTimeZone$Stub.iID,Field,The ID of the zone.,private transient String iID;,java.lang.String iID,"private , transient "
org.joda.time.DateTimeZone$LazyInit.CONVERSION_MAP,Field,Cache of old zone IDs to new zone IDs,"static final Map<String, String> CONVERSION_MAP = buildMap();",java.util.Map CONVERSION_MAP,"static , final "
org.joda.time.DateTimeZone$LazyInit.OFFSET_FORMATTER,Field,Time zone offset formatter.,static final DateTimeFormatter OFFSET_FORMATTER = buildFormatter();,org.joda.time.format.DateTimeFormatter OFFSET_FORMATTER,"static , final "
org.joda.time.Days.ZERO,Field,Constant representing zero days.,public static final Days ZERO = new Days(0);,org.joda.time.Days ZERO,"public , static , final "
org.joda.time.Days.ONE,Field,Constant representing one day.,public static final Days ONE = new Days(1);,org.joda.time.Days ONE,"public , static , final "
org.joda.time.Days.TWO,Field,Constant representing two days.,public static final Days TWO = new Days(2);,org.joda.time.Days TWO,"public , static , final "
org.joda.time.Days.THREE,Field,Constant representing three days.,public static final Days THREE = new Days(3);,org.joda.time.Days THREE,"public , static , final "
org.joda.time.Days.FOUR,Field,Constant representing four days.,public static final Days FOUR = new Days(4);,org.joda.time.Days FOUR,"public , static , final "
org.joda.time.Days.FIVE,Field,Constant representing five days.,public static final Days FIVE = new Days(5);,org.joda.time.Days FIVE,"public , static , final "
org.joda.time.Days.SIX,Field,Constant representing six days.,public static final Days SIX = new Days(6);,org.joda.time.Days SIX,"public , static , final "
org.joda.time.Days.SEVEN,Field,Constant representing seven days.,public static final Days SEVEN = new Days(7);,org.joda.time.Days SEVEN,"public , static , final "
org.joda.time.Days.MAX_VALUE,Field,Constant representing the maximum number of days that can be stored in this object.,public static final Days MAX_VALUE = new Days(Integer.MAX_VALUE);,org.joda.time.Days MAX_VALUE,"public , static , final "
org.joda.time.Days.MIN_VALUE,Field,Constant representing the minimum number of days that can be stored in this object.,public static final Days MIN_VALUE = new Days(Integer.MIN_VALUE);,org.joda.time.Days MIN_VALUE,"public , static , final "
org.joda.time.Days.PARSER,Field,The parser to use for this class.,private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.days());,org.joda.time.format.PeriodFormatter PARSER,"private , static , final "
org.joda.time.Days.serialVersionUID,Field,Serialization version.,private static final long serialVersionUID = 87525275727380865L;,long serialVersionUID,"private , static , final "
org.joda.time.format.DateTimeParserBucket.iChrono,Field,The chronology to use for parsing.,private final Chronology iChrono;,org.joda.time.Chronology iChrono,"private , final "
org.joda.time.format.DateTimeParserBucket.iMillis,Field,The initial millis.,private final long iMillis;,long iMillis,"private , final "
org.joda.time.format.DateTimeParserBucket.iLocale,Field,The locale to use for parsing.,private final Locale iLocale;,java.util.Locale iLocale,"private , final "
org.joda.time.format.DateTimeParserBucket.iDefaultYear,Field,Used for parsing month/day without year.,private final int iDefaultYear;,int iDefaultYear,"private , final "
org.joda.time.format.DateTimeParserBucket.iDefaultZone,Field,The default zone from the constructor.,private final DateTimeZone iDefaultZone;,org.joda.time.DateTimeZone iDefaultZone,"private , final "
org.joda.time.format.DateTimeParserBucket.iDefaultPivotYear,Field,The default pivot year from the constructor.,private final Integer iDefaultPivotYear;,java.lang.Integer iDefaultPivotYear,"private , final "
org.joda.time.format.DateTimeParserBucket.iZone,Field,"The parsed zone, initialised to formatter zone.",private DateTimeZone iZone;,org.joda.time.DateTimeZone iZone,private 
org.joda.time.format.DateTimeParserBucket.iOffset,Field,The parsed offset.,private Integer iOffset;,java.lang.Integer iOffset,private 
org.joda.time.format.DateTimeParserBucket.iPivotYear,Field,Used for parsing two-digit years.,private Integer iPivotYear;,java.lang.Integer iPivotYear,private 
org.joda.time.format.DateTimeParserBucket.iSavedFields,Field,No Comment,private SavedField[] iSavedFields;,org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields,private 
org.joda.time.format.DateTimeParserBucket.iSavedFieldsCount,Field,No Comment,private int iSavedFieldsCount;,int iSavedFieldsCount,private 
org.joda.time.format.DateTimeParserBucket.iSavedFieldsShared,Field,No Comment,private boolean iSavedFieldsShared;,boolean iSavedFieldsShared,private 
org.joda.time.format.DateTimeParserBucket.iSavedState,Field,No Comment,private Object iSavedState;,java.lang.Object iSavedState,private 
org.joda.time.format.DateTimeParserBucket$SavedState.iZone,Field,No Comment,final DateTimeZone iZone;,org.joda.time.DateTimeZone iZone,final 
org.joda.time.format.DateTimeParserBucket$SavedState.iOffset,Field,No Comment,final Integer iOffset;,java.lang.Integer iOffset,final 
org.joda.time.format.DateTimeParserBucket$SavedState.iSavedFields,Field,No Comment,final SavedField[] iSavedFields;,org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields,final 
org.joda.time.format.DateTimeParserBucket$SavedState.iSavedFieldsCount,Field,No Comment,final int iSavedFieldsCount;,int iSavedFieldsCount,final 
org.joda.time.format.DateTimeParserBucket$SavedField.iField,Field,No Comment,DateTimeField iField;,org.joda.time.DateTimeField iField,default
org.joda.time.format.DateTimeParserBucket$SavedField.iValue,Field,No Comment,int iValue;,int iValue,default
org.joda.time.format.DateTimeParserBucket$SavedField.iText,Field,No Comment,String iText;,java.lang.String iText,default
org.joda.time.format.DateTimeParserBucket$SavedField.iLocale,Field,No Comment,Locale iLocale;,java.util.Locale iLocale,default
org.joda.time.format.PeriodFormatterBuilder.PRINT_ZERO_RARELY_FIRST,Field,No Comment,private static final int PRINT_ZERO_RARELY_FIRST = 1;,int PRINT_ZERO_RARELY_FIRST,"private , static , final "
org.joda.time.format.PeriodFormatterBuilder.PRINT_ZERO_RARELY_LAST,Field,No Comment,private static final int PRINT_ZERO_RARELY_LAST = 2;,int PRINT_ZERO_RARELY_LAST,"private , static , final "
org.joda.time.format.PeriodFormatterBuilder.PRINT_ZERO_IF_SUPPORTED,Field,No Comment,private static final int PRINT_ZERO_IF_SUPPORTED = 3;,int PRINT_ZERO_IF_SUPPORTED,"private , static , final "
org.joda.time.format.PeriodFormatterBuilder.PRINT_ZERO_ALWAYS,Field,No Comment,private static final int PRINT_ZERO_ALWAYS = 4;,int PRINT_ZERO_ALWAYS,"private , static , final "
org.joda.time.format.PeriodFormatterBuilder.PRINT_ZERO_NEVER,Field,No Comment,private static final int PRINT_ZERO_NEVER = 5;,int PRINT_ZERO_NEVER,"private , static , final "
org.joda.time.format.PeriodFormatterBuilder.YEARS,Field,No Comment,private static final int YEARS = 0;,int YEARS,"private , static , final "
org.joda.time.format.PeriodFormatterBuilder.MONTHS,Field,No Comment,private static final int MONTHS = 1;,int MONTHS,"private , static , final "
org.joda.time.format.PeriodFormatterBuilder.WEEKS,Field,No Comment,private static final int WEEKS = 2;,int WEEKS,"private , static , final "
org.joda.time.format.PeriodFormatterBuilder.DAYS,Field,No Comment,private static final int DAYS = 3;,int DAYS,"private , static , final "
org.joda.time.format.PeriodFormatterBuilder.HOURS,Field,No Comment,private static final int HOURS = 4;,int HOURS,"private , static , final "
org.joda.time.format.PeriodFormatterBuilder.MINUTES,Field,No Comment,private static final int MINUTES = 5;,int MINUTES,"private , static , final "
org.joda.time.format.PeriodFormatterBuilder.SECONDS,Field,No Comment,private static final int SECONDS = 6;,int SECONDS,"private , static , final "
org.joda.time.format.PeriodFormatterBuilder.MILLIS,Field,No Comment,private static final int MILLIS = 7;,int MILLIS,"private , static , final "
org.joda.time.format.PeriodFormatterBuilder.SECONDS_MILLIS,Field,No Comment,private static final int SECONDS_MILLIS = 8;,int SECONDS_MILLIS,"private , static , final "
org.joda.time.format.PeriodFormatterBuilder.SECONDS_OPTIONAL_MILLIS,Field,No Comment,private static final int SECONDS_OPTIONAL_MILLIS = 9;,int SECONDS_OPTIONAL_MILLIS,"private , static , final "
org.joda.time.format.PeriodFormatterBuilder.MAX_FIELD,Field,No Comment,private static final int MAX_FIELD = SECONDS_OPTIONAL_MILLIS;,int MAX_FIELD,"private , static , final "
org.joda.time.format.PeriodFormatterBuilder.PATTERNS,Field,No Comment,"private static final ConcurrentMap<String, Pattern> PATTERNS = new ConcurrentHashMap<String, Pattern>();",java.util.concurrent.ConcurrentMap PATTERNS,"private , static , final "
org.joda.time.format.PeriodFormatterBuilder.iMinPrintedDigits,Field,No Comment,private int iMinPrintedDigits;,int iMinPrintedDigits,private 
org.joda.time.format.PeriodFormatterBuilder.iPrintZeroSetting,Field,No Comment,private int iPrintZeroSetting;,int iPrintZeroSetting,private 
org.joda.time.format.PeriodFormatterBuilder.iMaxParsedDigits,Field,No Comment,private int iMaxParsedDigits;,int iMaxParsedDigits,private 
org.joda.time.format.PeriodFormatterBuilder.iRejectSignedValues,Field,No Comment,private boolean iRejectSignedValues;,boolean iRejectSignedValues,private 
org.joda.time.format.PeriodFormatterBuilder.iPrefix,Field,No Comment,private PeriodFieldAffix iPrefix;,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix,private 
org.joda.time.format.PeriodFormatterBuilder.iElementPairs,Field,List of Printers and Parsers used to build a final formatter.,private List<Object> iElementPairs;,java.util.List iElementPairs,private 
org.joda.time.format.PeriodFormatterBuilder.iNotPrinter,Field,Set to true if the formatter is not a printer.,private boolean iNotPrinter;,boolean iNotPrinter,private 
org.joda.time.format.PeriodFormatterBuilder.iNotParser,Field,Set to true if the formatter is not a parser.,private boolean iNotParser;,boolean iNotParser,private 
org.joda.time.format.PeriodFormatterBuilder.iFieldFormatters,Field,Last PeriodFormatter appended of each field type.,private FieldFormatter[] iFieldFormatters;,org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters,private 
org.joda.time.format.PeriodFormatterBuilder$IgnorableAffix.iOtherAffixes,Field,No Comment,private volatile String[] iOtherAffixes;,java.lang.String[] iOtherAffixes,"private , volatile "
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.iText,Field,No Comment,private final String iText;,java.lang.String iText,"private , final "
org.joda.time.format.PeriodFormatterBuilder$PluralAffix.iSingularText,Field,No Comment,private final String iSingularText;,java.lang.String iSingularText,"private , final "
org.joda.time.format.PeriodFormatterBuilder$PluralAffix.iPluralText,Field,No Comment,private final String iPluralText;,java.lang.String iPluralText,"private , final "
org.joda.time.format.PeriodFormatterBuilder$RegExAffix.LENGTH_DESC_COMPARATOR,Field,No Comment,"private static final Comparator<String> LENGTH_DESC_COMPARATOR = new Comparator<String>() {\n\n    public int compare(String o1, String o2) {\n        return o2.length() - o1.length();\n    }\n};",java.util.Comparator LENGTH_DESC_COMPARATOR,"private , static , final "
org.joda.time.format.PeriodFormatterBuilder$RegExAffix.iSuffixes,Field,No Comment,private final String[] iSuffixes;,java.lang.String[] iSuffixes,"private , final "
org.joda.time.format.PeriodFormatterBuilder$RegExAffix.iPatterns,Field,No Comment,private final Pattern[] iPatterns;,java.util.regex.Pattern[] iPatterns,"private , final "
org.joda.time.format.PeriodFormatterBuilder$RegExAffix.iSuffixesSortedDescByLength,Field,Otherwise it might consume not enough characters.,private final String[] iSuffixesSortedDescByLength;,java.lang.String[] iSuffixesSortedDescByLength,"private , final "
org.joda.time.format.PeriodFormatterBuilder$CompositeAffix.iLeft,Field,No Comment,private final PeriodFieldAffix iLeft;,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iLeft,"private , final "
org.joda.time.format.PeriodFormatterBuilder$CompositeAffix.iRight,Field,No Comment,private final PeriodFieldAffix iRight;,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iRight,"private , final "
org.joda.time.format.PeriodFormatterBuilder$CompositeAffix.iLeftRightCombinations,Field,No Comment,private final String[] iLeftRightCombinations;,java.lang.String[] iLeftRightCombinations,"private , final "
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.iMinPrintedDigits,Field,No Comment,private final int iMinPrintedDigits;,int iMinPrintedDigits,"private , final "
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.iPrintZeroSetting,Field,No Comment,private final int iPrintZeroSetting;,int iPrintZeroSetting,"private , final "
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.iMaxParsedDigits,Field,No Comment,private final int iMaxParsedDigits;,int iMaxParsedDigits,"private , final "
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.iRejectSignedValues,Field,No Comment,private final boolean iRejectSignedValues;,boolean iRejectSignedValues,"private , final "
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.iFieldType,Field,"The index of the field type, 0=year, etc.",private final int iFieldType;,int iFieldType,"private , final "
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.iFieldFormatters,Field,* The array of the latest formatter added for each type.\n         * This is shared between all the field formatters in a formatter.,private final FieldFormatter[] iFieldFormatters;,org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters,"private , final "
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.iPrefix,Field,No Comment,private final PeriodFieldAffix iPrefix;,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix,"private , final "
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.iSuffix,Field,No Comment,private final PeriodFieldAffix iSuffix;,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix,"private , final "
org.joda.time.format.PeriodFormatterBuilder$Literal.EMPTY,Field,No Comment,"static final Literal EMPTY = new Literal("""");",org.joda.time.format.PeriodFormatterBuilder$Literal EMPTY,"static , final "
org.joda.time.format.PeriodFormatterBuilder$Literal.iText,Field,No Comment,private final String iText;,java.lang.String iText,"private , final "
org.joda.time.format.PeriodFormatterBuilder$Separator.iText,Field,No Comment,private final String iText;,java.lang.String iText,"private , final "
org.joda.time.format.PeriodFormatterBuilder$Separator.iFinalText,Field,No Comment,private final String iFinalText;,java.lang.String iFinalText,"private , final "
org.joda.time.format.PeriodFormatterBuilder$Separator.iParsedForms,Field,No Comment,private final String[] iParsedForms;,java.lang.String[] iParsedForms,"private , final "
org.joda.time.format.PeriodFormatterBuilder$Separator.iUseBefore,Field,No Comment,private final boolean iUseBefore;,boolean iUseBefore,"private , final "
org.joda.time.format.PeriodFormatterBuilder$Separator.iUseAfter,Field,No Comment,private final boolean iUseAfter;,boolean iUseAfter,"private , final "
org.joda.time.format.PeriodFormatterBuilder$Separator.iBeforePrinter,Field,No Comment,private final PeriodPrinter iBeforePrinter;,org.joda.time.format.PeriodPrinter iBeforePrinter,"private , final "
org.joda.time.format.PeriodFormatterBuilder$Separator.iAfterPrinter,Field,No Comment,private volatile PeriodPrinter iAfterPrinter;,org.joda.time.format.PeriodPrinter iAfterPrinter,"private , volatile "
org.joda.time.format.PeriodFormatterBuilder$Separator.iBeforeParser,Field,No Comment,private final PeriodParser iBeforeParser;,org.joda.time.format.PeriodParser iBeforeParser,"private , final "
org.joda.time.format.PeriodFormatterBuilder$Separator.iAfterParser,Field,No Comment,private volatile PeriodParser iAfterParser;,org.joda.time.format.PeriodParser iAfterParser,"private , volatile "
org.joda.time.format.PeriodFormatterBuilder$Composite.iPrinters,Field,No Comment,private final PeriodPrinter[] iPrinters;,org.joda.time.format.PeriodPrinter[] iPrinters,"private , final "
org.joda.time.format.PeriodFormatterBuilder$Composite.iParsers,Field,No Comment,private final PeriodParser[] iParsers;,org.joda.time.format.PeriodParser[] iParsers,"private , final "
org.joda.time.format.FormatUtils.LOG_10,Field,No Comment,private static final double LOG_10 = Math.log(10);,double LOG_10,"private , static , final "
org.joda.time.format.DateTimeFormatterBuilder.iElementPairs,Field,Array of printers and parsers (alternating).,private ArrayList<Object> iElementPairs;,java.util.ArrayList iElementPairs,private 
org.joda.time.format.DateTimeFormatterBuilder.iFormatter,Field,Cache of the last returned formatter.,private Object iFormatter;,java.lang.Object iFormatter,private 
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.iValue,Field,No Comment,private final char iValue;,char iValue,"private , final "
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.iValue,Field,No Comment,private final String iValue;,java.lang.String iValue,"private , final "
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.iFieldType,Field,No Comment,protected final DateTimeFieldType iFieldType;,org.joda.time.DateTimeFieldType iFieldType,"protected , final "
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.iMaxParsedDigits,Field,No Comment,protected final int iMaxParsedDigits;,int iMaxParsedDigits,"protected , final "
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.iSigned,Field,No Comment,protected final boolean iSigned;,boolean iSigned,"protected , final "
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.iMinPrintedDigits,Field,No Comment,protected final int iMinPrintedDigits;,int iMinPrintedDigits,"protected , final "
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.iType,Field,The field to print/parse.,private final DateTimeFieldType iType;,org.joda.time.DateTimeFieldType iType,"private , final "
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.iPivot,Field,The pivot year.,private final int iPivot;,int iPivot,"private , final "
org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear.iLenientParse,Field,No Comment,private final boolean iLenientParse;,boolean iLenientParse,"private , final "
org.joda.time.format.DateTimeFormatterBuilder$TextField.cParseCache,Field,No Comment,"private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache = new ConcurrentHashMap<Locale, Map<DateTimeFieldType, Object[]>>();",java.util.Map cParseCache,"private , static "
org.joda.time.format.DateTimeFormatterBuilder$TextField.iFieldType,Field,No Comment,private final DateTimeFieldType iFieldType;,org.joda.time.DateTimeFieldType iFieldType,"private , final "
org.joda.time.format.DateTimeFormatterBuilder$TextField.iShort,Field,No Comment,private final boolean iShort;,boolean iShort,"private , final "
org.joda.time.format.DateTimeFormatterBuilder$Fraction.iFieldType,Field,No Comment,private final DateTimeFieldType iFieldType;,org.joda.time.DateTimeFieldType iFieldType,"private , final "
org.joda.time.format.DateTimeFormatterBuilder$Fraction.iMinDigits,Field,No Comment,protected int iMinDigits;,int iMinDigits,protected 
org.joda.time.format.DateTimeFormatterBuilder$Fraction.iMaxDigits,Field,No Comment,protected int iMaxDigits;,int iMaxDigits,protected 
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iZeroOffsetPrintText,Field,No Comment,private final String iZeroOffsetPrintText;,java.lang.String iZeroOffsetPrintText,"private , final "
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iZeroOffsetParseText,Field,No Comment,private final String iZeroOffsetParseText;,java.lang.String iZeroOffsetParseText,"private , final "
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iShowSeparators,Field,No Comment,private final boolean iShowSeparators;,boolean iShowSeparators,"private , final "
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iMinFields,Field,No Comment,private final int iMinFields;,int iMinFields,"private , final "
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.iMaxFields,Field,No Comment,private final int iMaxFields;,int iMaxFields,"private , final "
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.LONG_NAME,Field,No Comment,static final int LONG_NAME = 0;,int LONG_NAME,"static , final "
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.SHORT_NAME,Field,No Comment,static final int SHORT_NAME = 1;,int SHORT_NAME,"static , final "
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.iParseLookup,Field,No Comment,"private final Map<String, DateTimeZone> iParseLookup;",java.util.Map iParseLookup,"private , final "
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.iType,Field,No Comment,private final int iType;,int iType,"private , final "
org.joda.time.format.DateTimeFormatterBuilder$Composite.iPrinters,Field,No Comment,private final InternalPrinter[] iPrinters;,org.joda.time.format.InternalPrinter[] iPrinters,"private , final "
org.joda.time.format.DateTimeFormatterBuilder$Composite.iParsers,Field,No Comment,private final InternalParser[] iParsers;,org.joda.time.format.InternalParser[] iParsers,"private , final "
org.joda.time.format.DateTimeFormatterBuilder$Composite.iPrintedLengthEstimate,Field,No Comment,private final int iPrintedLengthEstimate;,int iPrintedLengthEstimate,"private , final "
org.joda.time.format.DateTimeFormatterBuilder$Composite.iParsedLengthEstimate,Field,No Comment,private final int iParsedLengthEstimate;,int iParsedLengthEstimate,"private , final "
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.iParsers,Field,No Comment,private final InternalParser[] iParsers;,org.joda.time.format.InternalParser[] iParsers,"private , final "
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.iParsedLengthEstimate,Field,No Comment,private final int iParsedLengthEstimate;,int iParsedLengthEstimate,"private , final "
org.joda.time.format.ISOPeriodFormat.cStandard,Field,Cache of standard format.,private static PeriodFormatter cStandard;,org.joda.time.format.PeriodFormatter cStandard,"private , static "
org.joda.time.format.ISOPeriodFormat.cAlternate,Field,Cache of alternate months format.,private static PeriodFormatter cAlternate;,org.joda.time.format.PeriodFormatter cAlternate,"private , static "
org.joda.time.format.ISOPeriodFormat.cAlternateExtended,Field,Cache of alternate extended months format.,private static PeriodFormatter cAlternateExtended;,org.joda.time.format.PeriodFormatter cAlternateExtended,"private , static "
org.joda.time.format.ISOPeriodFormat.cAlternateWithWeeks,Field,Cache of alternate weeks format.,private static PeriodFormatter cAlternateWithWeeks;,org.joda.time.format.PeriodFormatter cAlternateWithWeeks,"private , static "
org.joda.time.format.ISOPeriodFormat.cAlternateExtendedWihWeeks,Field,Cache of alternate extended weeks format.,private static PeriodFormatter cAlternateExtendedWihWeeks;,org.joda.time.format.PeriodFormatter cAlternateExtendedWihWeeks,"private , static "
org.joda.time.format.PeriodFormat.BUNDLE_NAME,Field,* The resource bundle name.,"private static final String BUNDLE_NAME = ""org.joda.time.format.messages"";",java.lang.String BUNDLE_NAME,"private , static , final "
org.joda.time.format.PeriodFormat.FORMATTERS,Field,* The created formatters.,"private static final ConcurrentMap<Locale, PeriodFormatter> FORMATTERS = new ConcurrentHashMap<Locale, PeriodFormatter>();",java.util.concurrent.ConcurrentMap FORMATTERS,"private , static , final "
org.joda.time.format.PeriodFormat$DynamicWordBased.iFormatter,Field,The formatter with the locale selected at construction time.,private final PeriodFormatter iFormatter;,org.joda.time.format.PeriodFormatter iFormatter,"private , final "
org.joda.time.format.DateTimeFormatter.iPrinter,Field,The internal printer used to output the datetime.,private final InternalPrinter iPrinter;,org.joda.time.format.InternalPrinter iPrinter,"private , final "
org.joda.time.format.DateTimeFormatter.iParser,Field,The internal parser used to output the datetime.,private final InternalParser iParser;,org.joda.time.format.InternalParser iParser,"private , final "
org.joda.time.format.DateTimeFormatter.iLocale,Field,The locale to use for printing and parsing.,private final Locale iLocale;,java.util.Locale iLocale,"private , final "
org.joda.time.format.DateTimeFormatter.iOffsetParsed,Field,Whether the offset is parsed.,private final boolean iOffsetParsed;,boolean iOffsetParsed,"private , final "
org.joda.time.format.DateTimeFormatter.iChrono,Field,The chronology to use as an override.,private final Chronology iChrono;,org.joda.time.Chronology iChrono,"private , final "
org.joda.time.format.DateTimeFormatter.iZone,Field,The zone to use as an override.,private final DateTimeZone iZone;,org.joda.time.DateTimeZone iZone,"private , final "
org.joda.time.format.DateTimeFormatter.iPivotYear,Field,The pivot year to use for two-digit year parsing.,private final Integer iPivotYear;,java.lang.Integer iPivotYear,"private , final "
org.joda.time.format.DateTimeFormatter.iDefaultYear,Field,The default year for parsing month/day without year.,private final int iDefaultYear;,int iDefaultYear,"private , final "
org.joda.time.format.DateTimeParserInternalParser.underlying,Field,No Comment,private final DateTimeParser underlying;,org.joda.time.format.DateTimeParser underlying,"private , final "
org.joda.time.format.InternalPrinterDateTimePrinter.underlying,Field,No Comment,private final InternalPrinter underlying;,org.joda.time.format.InternalPrinter underlying,"private , final "
org.joda.time.format.ISODateTimeFormat$Constants.ye,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter ye,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.mye,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter mye,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.dme,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter dme,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.we,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter we,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.wwe,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter wwe,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.dwe,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter dwe,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.dye,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter dye,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.hde,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter hde,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.mhe,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter mhe,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.sme,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter sme,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.fse,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter fse,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.ze,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter ze,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.lte,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter lte,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.ym,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter ym,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.ymd,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter ymd,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.ww,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter ww,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.wwd,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter wwd,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.hm,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter hm,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.hms,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter hms,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.hmsl,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter hmsl,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.hmsf,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter hmsf,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.dh,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter dh,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.dhm,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter dhm,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.dhms,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter dhms,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.dhmsl,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter dhmsl,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.dhmsf,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter dhmsf,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.t,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter t,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.tx,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter tx,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.tt,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter tt,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.ttx,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter ttx,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.dt,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter dt,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.dtx,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter dtx,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.wdt,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter wdt,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.wdtx,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter wdtx,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.od,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter od,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.odt,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter odt,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.odtx,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter odtx,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.bd,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter bd,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.bt,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter bt,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.btx,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter btx,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.btt,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter btt,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.bttx,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter bttx,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.bdt,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter bdt,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.bdtx,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter bdtx,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.bod,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter bod,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.bodt,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter bodt,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.bodtx,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter bodtx,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.bwd,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter bwd,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.bwdt,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter bwdt,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.bwdtx,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter bwdtx,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.dpe,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter dpe,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.tpe,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter tpe,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.dp,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter dp,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.ldp,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter ldp,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.tp,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter tp,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.ltp,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter ltp,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.dtp,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter dtp,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.dotp,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter dotp,"private , static , final "
org.joda.time.format.ISODateTimeFormat$Constants.ldotp,Field,No Comment,"private static final DateTimeFormatter // year element (yyyy)\nye = yearElement(), // monthOfYear element (-MM)\nmye = monthElement(), // dayOfMonth element (-dd)\ndme = dayOfMonthElement(), // weekyear element (xxxx)\nwe = weekyearElement(), // weekOfWeekyear element (-ww)\nwwe = weekElement(), // dayOfWeek element (-ee)\ndwe = dayOfWeekElement(), // dayOfYear element (-DDD)\ndye = dayOfYearElement(), // hourOfDay element (HH)\nhde = hourElement(), // minuteOfHour element (:mm)\nmhe = minuteElement(), // secondOfMinute element (:ss)\nsme = secondElement(), // fractionOfSecond element (.SSSSSSSSS)\nfse = fractionElement(), // zone offset element\nze = offsetElement(), // literal 'T' element\nlte = literalTElement(), //y,   // year (same as year element)\n// year month\nym = yearMonth(), // year month day\nymd = yearMonthDay(), //w,   // weekyear (same as weekyear element)\n// weekyear week\nww = weekyearWeek(), // weekyear week day\nwwd = weekyearWeekDay(), //h,    // hour (same as hour element)\n// hour minute\nhm = hourMinute(), // hour minute second\nhms = hourMinuteSecond(), // hour minute second millis\nhmsl = hourMinuteSecondMillis(), // hour minute second fraction\nhmsf = hourMinuteSecondFraction(), // date hour\ndh = dateHour(), // date hour minute\ndhm = dateHourMinute(), // date hour minute second\ndhms = dateHourMinuteSecond(), // date hour minute second millis\ndhmsl = dateHourMinuteSecondMillis(), // date hour minute second fraction\ndhmsf = dateHourMinuteSecondFraction(), //d,  // date (same as ymd)\n// time\nt = time(), // time no millis\ntx = timeNoMillis(), // Ttime\ntt = tTime(), // Ttime no millis\nttx = tTimeNoMillis(), // date time\ndt = dateTime(), // date time no millis\ndtx = dateTimeNoMillis(), //wd,  // week date (same as wwd)\n// week date time\nwdt = weekDateTime(), // week date time no millis\nwdtx = weekDateTimeNoMillis(), // ordinal date (same as yd)\nod = ordinalDate(), // ordinal date time\nodt = ordinalDateTime(), // ordinal date time no millis\nodtx = ordinalDateTimeNoMillis(), // basic date\nbd = basicDate(), // basic time\nbt = basicTime(), // basic time no millis\nbtx = basicTimeNoMillis(), // basic Ttime\nbtt = basicTTime(), // basic Ttime no millis\nbttx = basicTTimeNoMillis(), // basic date time\nbdt = basicDateTime(), // basic date time no millis\nbdtx = basicDateTimeNoMillis(), // basic ordinal date\nbod = basicOrdinalDate(), // basic ordinal date time\nbodt = basicOrdinalDateTime(), // basic ordinal date time no millis\nbodtx = basicOrdinalDateTimeNoMillis(), // basic week date\nbwd = basicWeekDate(), // basic week date time\nbwdt = basicWeekDateTime(), // basic week date time no millis\nbwdtx = basicWeekDateTimeNoMillis(), // date parser element\ndpe = dateElementParser(), // time parser element\ntpe = timeElementParser(), // date parser\ndp = dateParser(), // local date parser\nldp = localDateParser(), // time parser\ntp = timeParser(), // local time parser\nltp = localTimeParser(), // date time parser\ndtp = dateTimeParser(), // date optional time parser\ndotp = dateOptionalTimeParser(), // local date optional time parser\nldotp = localDateOptionalTimeParser();",org.joda.time.format.DateTimeFormatter ldotp,"private , static , final "
org.joda.time.format.InternalParserDateTimeParser.underlying,Field,No Comment,private final InternalParser underlying;,org.joda.time.format.InternalParser underlying,"private , final "
org.joda.time.format.DateTimeFormat.FULL,Field,DateFormat.FULL,static final int FULL = 0;,int FULL,"static , final "
org.joda.time.format.DateTimeFormat.LONG,Field,DateFormat.LONG,static final int LONG = 1;,int LONG,"static , final "
org.joda.time.format.DateTimeFormat.MEDIUM,Field,DateFormat.MEDIUM,static final int MEDIUM = 2;,int MEDIUM,"static , final "
org.joda.time.format.DateTimeFormat.SHORT,Field,DateFormat.SHORT,static final int SHORT = 3;,int SHORT,"static , final "
org.joda.time.format.DateTimeFormat.NONE,Field,Style constant for NONE.,static final int NONE = 4;,int NONE,"static , final "
org.joda.time.format.DateTimeFormat.DATE,Field,Type constant for DATE only.,static final int DATE = 0;,int DATE,"static , final "
org.joda.time.format.DateTimeFormat.TIME,Field,Type constant for TIME only.,static final int TIME = 1;,int TIME,"static , final "
org.joda.time.format.DateTimeFormat.DATETIME,Field,Type constant for DATETIME.,static final int DATETIME = 2;,int DATETIME,"static , final "
org.joda.time.format.DateTimeFormat.PATTERN_CACHE_SIZE,Field,Maximum size of the pattern cache.,private static final int PATTERN_CACHE_SIZE = 500;,int PATTERN_CACHE_SIZE,"private , static , final "
org.joda.time.format.DateTimeFormat.cPatternCache,Field,"Maps patterns to formatters, patterns don't vary by locale. Size capped at PATTERN_CACHE_SIZE","private static final ConcurrentHashMap<String, DateTimeFormatter> cPatternCache = new ConcurrentHashMap<String, DateTimeFormatter>();",java.util.concurrent.ConcurrentHashMap cPatternCache,"private , static , final "
org.joda.time.format.DateTimeFormat.cStyleCache,Field,"Maps patterns to formatters, patterns don't vary by locale.",private static final AtomicReferenceArray<DateTimeFormatter> cStyleCache = new AtomicReferenceArray<DateTimeFormatter>(25);,java.util.concurrent.atomic.AtomicReferenceArray cStyleCache,"private , static , final "
org.joda.time.format.DateTimeFormat$StyleFormatter.cCache,Field,No Comment,"private static final ConcurrentHashMap<StyleFormatterCacheKey, DateTimeFormatter> cCache = new ConcurrentHashMap<StyleFormatterCacheKey, DateTimeFormatter>();",java.util.concurrent.ConcurrentHashMap cCache,"private , static , final "
org.joda.time.format.DateTimeFormat$StyleFormatter.iDateStyle,Field,No Comment,private final int iDateStyle;,int iDateStyle,"private , final "
org.joda.time.format.DateTimeFormat$StyleFormatter.iTimeStyle,Field,No Comment,private final int iTimeStyle;,int iTimeStyle,"private , final "
org.joda.time.format.DateTimeFormat$StyleFormatter.iType,Field,No Comment,private final int iType;,int iType,"private , final "
org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey.combinedTypeAndStyle,Field,No Comment,private final int combinedTypeAndStyle;,int combinedTypeAndStyle,"private , final "
org.joda.time.format.DateTimeFormat$StyleFormatterCacheKey.locale,Field,No Comment,private final Locale locale;,java.util.Locale locale,"private , final "
org.joda.time.format.PeriodFormatter.iPrinter,Field,The internal printer used to output the datetime.,private final PeriodPrinter iPrinter;,org.joda.time.format.PeriodPrinter iPrinter,"private , final "
org.joda.time.format.PeriodFormatter.iParser,Field,The internal parser used to output the datetime.,private final PeriodParser iParser;,org.joda.time.format.PeriodParser iParser,"private , final "
org.joda.time.format.PeriodFormatter.iLocale,Field,The locale to use for printing and parsing.,private final Locale iLocale;,java.util.Locale iLocale,"private , final "
org.joda.time.format.PeriodFormatter.iParseType,Field,The period type used in parsing.,private final PeriodType iParseType;,org.joda.time.PeriodType iParseType,"private , final "
org.joda.time.format.DateTimePrinterInternalPrinter.underlying,Field,No Comment,private final DateTimePrinter underlying;,org.joda.time.format.DateTimePrinter underlying,"private , final "
org.joda.time.DateTimeConstants.JANUARY,Field,"Constant (1) representing January, the first month (ISO)",public static final int JANUARY = 1;,int JANUARY,"public , static , final "
org.joda.time.DateTimeConstants.FEBRUARY,Field,"Constant (2) representing February, the second month (ISO)",public static final int FEBRUARY = 2;,int FEBRUARY,"public , static , final "
org.joda.time.DateTimeConstants.MARCH,Field,"Constant (3) representing March, the third month (ISO)",public static final int MARCH = 3;,int MARCH,"public , static , final "
org.joda.time.DateTimeConstants.APRIL,Field,"Constant (4) representing April, the fourth month (ISO)",public static final int APRIL = 4;,int APRIL,"public , static , final "
org.joda.time.DateTimeConstants.MAY,Field,"Constant (5) representing May, the fifth month (ISO)",public static final int MAY = 5;,int MAY,"public , static , final "
org.joda.time.DateTimeConstants.JUNE,Field,"Constant (6) representing June, the sixth month (ISO)",public static final int JUNE = 6;,int JUNE,"public , static , final "
org.joda.time.DateTimeConstants.JULY,Field,"Constant (7) representing July, the seventh month (ISO)",public static final int JULY = 7;,int JULY,"public , static , final "
org.joda.time.DateTimeConstants.AUGUST,Field,"Constant (8) representing August, the eighth month (ISO)",public static final int AUGUST = 8;,int AUGUST,"public , static , final "
org.joda.time.DateTimeConstants.SEPTEMBER,Field,"Constant (9) representing September, the nineth month (ISO)",public static final int SEPTEMBER = 9;,int SEPTEMBER,"public , static , final "
org.joda.time.DateTimeConstants.OCTOBER,Field,"Constant (10) representing October, the tenth month (ISO)",public static final int OCTOBER = 10;,int OCTOBER,"public , static , final "
org.joda.time.DateTimeConstants.NOVEMBER,Field,"Constant (11) representing November, the eleventh month (ISO)",public static final int NOVEMBER = 11;,int NOVEMBER,"public , static , final "
org.joda.time.DateTimeConstants.DECEMBER,Field,"Constant (12) representing December, the twelfth month (ISO)",public static final int DECEMBER = 12;,int DECEMBER,"public , static , final "
org.joda.time.DateTimeConstants.MONDAY,Field,"Constant (1) representing Monday, the first day of the week (ISO)",public static final int MONDAY = 1;,int MONDAY,"public , static , final "
org.joda.time.DateTimeConstants.TUESDAY,Field,"Constant (2) representing Tuesday, the second day of the week (ISO)",public static final int TUESDAY = 2;,int TUESDAY,"public , static , final "
org.joda.time.DateTimeConstants.WEDNESDAY,Field,"Constant (3) representing Wednesday, the third day of the week (ISO)",public static final int WEDNESDAY = 3;,int WEDNESDAY,"public , static , final "
org.joda.time.DateTimeConstants.THURSDAY,Field,"Constant (4) representing Thursday, the fourth day of the week (ISO)",public static final int THURSDAY = 4;,int THURSDAY,"public , static , final "
org.joda.time.DateTimeConstants.FRIDAY,Field,"Constant (5) representing Friday, the fifth day of the week (ISO)",public static final int FRIDAY = 5;,int FRIDAY,"public , static , final "
org.joda.time.DateTimeConstants.SATURDAY,Field,"Constant (6) representing Saturday, the sixth day of the week (ISO)",public static final int SATURDAY = 6;,int SATURDAY,"public , static , final "
org.joda.time.DateTimeConstants.SUNDAY,Field,"Constant (7) representing Sunday, the seventh day of the week (ISO)",public static final int SUNDAY = 7;,int SUNDAY,"public , static , final "
org.joda.time.DateTimeConstants.AM,Field,"Constant (0) representing AM, the morning (from Calendar)",public static final int AM = 0;,int AM,"public , static , final "
org.joda.time.DateTimeConstants.PM,Field,"Constant (1) representing PM, the afternoon (from Calendar)",public static final int PM = 1;,int PM,"public , static , final "
org.joda.time.DateTimeConstants.BC,Field,"Constant (0) representing BC, years before zero (from Calendar)",public static final int BC = 0;,int BC,"public , static , final "
org.joda.time.DateTimeConstants.BCE,Field,"Alternative constant (0) representing BCE, Before Common Era (secular)",public static final int BCE = 0;,int BCE,"public , static , final "
org.joda.time.DateTimeConstants.AD,Field,"* Constant (1) representing AD, years after zero (from Calendar).\n     * <p>\n     * All new chronologies with different Era values should try to assign\n     * eras as follows. The era that was in force at 1970-01-01 (ISO) is assigned\n     * the value 1. Earlier eras are assigned sequentially smaller numbers.\n     * Later eras are assigned sequentially greater numbers.",public static final int AD = 1;,int AD,"public , static , final "
org.joda.time.DateTimeConstants.CE,Field,"* Alternative constant (1) representing CE, Common Era (secular).\n     * <p>\n     * All new chronologies with different Era values should try to assign\n     * eras as follows. The era that was in force at 1970-01-01 (ISO) is assigned\n     * the value 1. Earlier eras are assigned sequentially smaller numbers.\n     * Later eras are assigned sequentially greater numbers.",public static final int CE = 1;,int CE,"public , static , final "
org.joda.time.DateTimeConstants.MILLIS_PER_SECOND,Field,Milliseconds in one second (1000) (ISO),public static final int MILLIS_PER_SECOND = 1000;,int MILLIS_PER_SECOND,"public , static , final "
org.joda.time.DateTimeConstants.SECONDS_PER_MINUTE,Field,Seconds in one minute (60) (ISO),public static final int SECONDS_PER_MINUTE = 60;,int SECONDS_PER_MINUTE,"public , static , final "
org.joda.time.DateTimeConstants.MILLIS_PER_MINUTE,Field,Milliseconds in one minute (ISO),public static final int MILLIS_PER_MINUTE = MILLIS_PER_SECOND * SECONDS_PER_MINUTE;,int MILLIS_PER_MINUTE,"public , static , final "
org.joda.time.DateTimeConstants.MINUTES_PER_HOUR,Field,Minutes in one hour (ISO),public static final int MINUTES_PER_HOUR = 60;,int MINUTES_PER_HOUR,"public , static , final "
org.joda.time.DateTimeConstants.SECONDS_PER_HOUR,Field,Seconds in one hour (ISO),public static final int SECONDS_PER_HOUR = SECONDS_PER_MINUTE * MINUTES_PER_HOUR;,int SECONDS_PER_HOUR,"public , static , final "
org.joda.time.DateTimeConstants.MILLIS_PER_HOUR,Field,Milliseconds in one hour (ISO),public static final int MILLIS_PER_HOUR = MILLIS_PER_MINUTE * MINUTES_PER_HOUR;,int MILLIS_PER_HOUR,"public , static , final "
org.joda.time.DateTimeConstants.HOURS_PER_DAY,Field,"Hours in a typical day (24) (ISO). Due to time zone offset changes, the\n     * number of hours per day can vary.",public static final int HOURS_PER_DAY = 24;,int HOURS_PER_DAY,"public , static , final "
org.joda.time.DateTimeConstants.MINUTES_PER_DAY,Field,"Minutes in a typical day (ISO). Due to time zone offset changes, the number\n     * of minutes per day can vary.",public static final int MINUTES_PER_DAY = MINUTES_PER_HOUR * HOURS_PER_DAY;,int MINUTES_PER_DAY,"public , static , final "
org.joda.time.DateTimeConstants.SECONDS_PER_DAY,Field,"Seconds in a typical day (ISO). Due to time zone offset changes, the number\n     * of seconds per day can vary.",public static final int SECONDS_PER_DAY = SECONDS_PER_HOUR * HOURS_PER_DAY;,int SECONDS_PER_DAY,"public , static , final "
org.joda.time.DateTimeConstants.MILLIS_PER_DAY,Field,"Milliseconds in a typical day (ISO). Due to time zone offset changes, the\n     * number of milliseconds per day can vary.",public static final int MILLIS_PER_DAY = MILLIS_PER_HOUR * HOURS_PER_DAY;,int MILLIS_PER_DAY,"public , static , final "
org.joda.time.DateTimeConstants.DAYS_PER_WEEK,Field,Days in one week (7) (ISO),public static final int DAYS_PER_WEEK = 7;,int DAYS_PER_WEEK,"public , static , final "
org.joda.time.DateTimeConstants.HOURS_PER_WEEK,Field,"Hours in a typical week. Due to time zone offset changes, the number of\n     * hours per week can vary.",public static final int HOURS_PER_WEEK = HOURS_PER_DAY * DAYS_PER_WEEK;,int HOURS_PER_WEEK,"public , static , final "
org.joda.time.DateTimeConstants.MINUTES_PER_WEEK,Field,"Minutes in a typical week (ISO). Due to time zone offset changes, the number\n     * of minutes per week can vary.",public static final int MINUTES_PER_WEEK = MINUTES_PER_DAY * DAYS_PER_WEEK;,int MINUTES_PER_WEEK,"public , static , final "
org.joda.time.DateTimeConstants.SECONDS_PER_WEEK,Field,"Seconds in a typical week (ISO). Due to time zone offset changes, the number\n     * of seconds per week can vary.",public static final int SECONDS_PER_WEEK = SECONDS_PER_DAY * DAYS_PER_WEEK;,int SECONDS_PER_WEEK,"public , static , final "
org.joda.time.DateTimeConstants.MILLIS_PER_WEEK,Field,"Milliseconds in a typical week (ISO). Due to time zone offset changes, the\n     * number of milliseconds per week can vary.",public static final int MILLIS_PER_WEEK = MILLIS_PER_DAY * DAYS_PER_WEEK;,int MILLIS_PER_WEEK,"public , static , final "
org.joda.time.IllegalFieldValueException.serialVersionUID,Field,Serialization lock.,private static final long serialVersionUID = 6305711765985447737L;,long serialVersionUID,"private , static , final "
org.joda.time.IllegalFieldValueException.iDateTimeFieldType,Field,No Comment,private final DateTimeFieldType iDateTimeFieldType;,org.joda.time.DateTimeFieldType iDateTimeFieldType,"private , final "
org.joda.time.IllegalFieldValueException.iDurationFieldType,Field,No Comment,private final DurationFieldType iDurationFieldType;,org.joda.time.DurationFieldType iDurationFieldType,"private , final "
org.joda.time.IllegalFieldValueException.iFieldName,Field,No Comment,private final String iFieldName;,java.lang.String iFieldName,"private , final "
org.joda.time.IllegalFieldValueException.iNumberValue,Field,No Comment,private final Number iNumberValue;,java.lang.Number iNumberValue,"private , final "
org.joda.time.IllegalFieldValueException.iStringValue,Field,No Comment,private final String iStringValue;,java.lang.String iStringValue,"private , final "
org.joda.time.IllegalFieldValueException.iLowerBound,Field,No Comment,private final Number iLowerBound;,java.lang.Number iLowerBound,"private , final "
org.joda.time.IllegalFieldValueException.iUpperBound,Field,No Comment,private final Number iUpperBound;,java.lang.Number iUpperBound,"private , final "
org.joda.time.IllegalFieldValueException.iMessage,Field,No Comment,private String iMessage;,java.lang.String iMessage,private 
org.joda.time.DurationFieldType.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 8765135187319L;,long serialVersionUID,"private , static , final "
org.joda.time.DurationFieldType.ERAS,Field,Ordinals for standard field types.,"static final byte ERAS = 1, CENTURIES = 2, WEEKYEARS = 3, YEARS = 4, MONTHS = 5, WEEKS = 6, DAYS = 7, HALFDAYS = 8, HOURS = 9, MINUTES = 10, SECONDS = 11, MILLIS = 12;",byte ERAS,"static , final "
org.joda.time.DurationFieldType.CENTURIES,Field,Ordinals for standard field types.,"static final byte ERAS = 1, CENTURIES = 2, WEEKYEARS = 3, YEARS = 4, MONTHS = 5, WEEKS = 6, DAYS = 7, HALFDAYS = 8, HOURS = 9, MINUTES = 10, SECONDS = 11, MILLIS = 12;",byte CENTURIES,"static , final "
org.joda.time.DurationFieldType.WEEKYEARS,Field,Ordinals for standard field types.,"static final byte ERAS = 1, CENTURIES = 2, WEEKYEARS = 3, YEARS = 4, MONTHS = 5, WEEKS = 6, DAYS = 7, HALFDAYS = 8, HOURS = 9, MINUTES = 10, SECONDS = 11, MILLIS = 12;",byte WEEKYEARS,"static , final "
org.joda.time.DurationFieldType.YEARS,Field,Ordinals for standard field types.,"static final byte ERAS = 1, CENTURIES = 2, WEEKYEARS = 3, YEARS = 4, MONTHS = 5, WEEKS = 6, DAYS = 7, HALFDAYS = 8, HOURS = 9, MINUTES = 10, SECONDS = 11, MILLIS = 12;",byte YEARS,"static , final "
org.joda.time.DurationFieldType.MONTHS,Field,Ordinals for standard field types.,"static final byte ERAS = 1, CENTURIES = 2, WEEKYEARS = 3, YEARS = 4, MONTHS = 5, WEEKS = 6, DAYS = 7, HALFDAYS = 8, HOURS = 9, MINUTES = 10, SECONDS = 11, MILLIS = 12;",byte MONTHS,"static , final "
org.joda.time.DurationFieldType.WEEKS,Field,Ordinals for standard field types.,"static final byte ERAS = 1, CENTURIES = 2, WEEKYEARS = 3, YEARS = 4, MONTHS = 5, WEEKS = 6, DAYS = 7, HALFDAYS = 8, HOURS = 9, MINUTES = 10, SECONDS = 11, MILLIS = 12;",byte WEEKS,"static , final "
org.joda.time.DurationFieldType.DAYS,Field,Ordinals for standard field types.,"static final byte ERAS = 1, CENTURIES = 2, WEEKYEARS = 3, YEARS = 4, MONTHS = 5, WEEKS = 6, DAYS = 7, HALFDAYS = 8, HOURS = 9, MINUTES = 10, SECONDS = 11, MILLIS = 12;",byte DAYS,"static , final "
org.joda.time.DurationFieldType.HALFDAYS,Field,Ordinals for standard field types.,"static final byte ERAS = 1, CENTURIES = 2, WEEKYEARS = 3, YEARS = 4, MONTHS = 5, WEEKS = 6, DAYS = 7, HALFDAYS = 8, HOURS = 9, MINUTES = 10, SECONDS = 11, MILLIS = 12;",byte HALFDAYS,"static , final "
org.joda.time.DurationFieldType.HOURS,Field,Ordinals for standard field types.,"static final byte ERAS = 1, CENTURIES = 2, WEEKYEARS = 3, YEARS = 4, MONTHS = 5, WEEKS = 6, DAYS = 7, HALFDAYS = 8, HOURS = 9, MINUTES = 10, SECONDS = 11, MILLIS = 12;",byte HOURS,"static , final "
org.joda.time.DurationFieldType.MINUTES,Field,Ordinals for standard field types.,"static final byte ERAS = 1, CENTURIES = 2, WEEKYEARS = 3, YEARS = 4, MONTHS = 5, WEEKS = 6, DAYS = 7, HALFDAYS = 8, HOURS = 9, MINUTES = 10, SECONDS = 11, MILLIS = 12;",byte MINUTES,"static , final "
org.joda.time.DurationFieldType.SECONDS,Field,Ordinals for standard field types.,"static final byte ERAS = 1, CENTURIES = 2, WEEKYEARS = 3, YEARS = 4, MONTHS = 5, WEEKS = 6, DAYS = 7, HALFDAYS = 8, HOURS = 9, MINUTES = 10, SECONDS = 11, MILLIS = 12;",byte SECONDS,"static , final "
org.joda.time.DurationFieldType.MILLIS,Field,Ordinals for standard field types.,"static final byte ERAS = 1, CENTURIES = 2, WEEKYEARS = 3, YEARS = 4, MONTHS = 5, WEEKS = 6, DAYS = 7, HALFDAYS = 8, HOURS = 9, MINUTES = 10, SECONDS = 11, MILLIS = 12;",byte MILLIS,"static , final "
org.joda.time.DurationFieldType.ERAS_TYPE,Field,The eras field type.,"static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);",org.joda.time.DurationFieldType ERAS_TYPE,"static , final "
org.joda.time.DurationFieldType.CENTURIES_TYPE,Field,The centuries field type.,"static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);",org.joda.time.DurationFieldType CENTURIES_TYPE,"static , final "
org.joda.time.DurationFieldType.WEEKYEARS_TYPE,Field,The weekyears field type.,"static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);",org.joda.time.DurationFieldType WEEKYEARS_TYPE,"static , final "
org.joda.time.DurationFieldType.YEARS_TYPE,Field,The years field type.,"static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);",org.joda.time.DurationFieldType YEARS_TYPE,"static , final "
org.joda.time.DurationFieldType.MONTHS_TYPE,Field,The months field type.,"static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);",org.joda.time.DurationFieldType MONTHS_TYPE,"static , final "
org.joda.time.DurationFieldType.WEEKS_TYPE,Field,The weeks field type.,"static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);",org.joda.time.DurationFieldType WEEKS_TYPE,"static , final "
org.joda.time.DurationFieldType.DAYS_TYPE,Field,The days field type.,"static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);",org.joda.time.DurationFieldType DAYS_TYPE,"static , final "
org.joda.time.DurationFieldType.HALFDAYS_TYPE,Field,The halfdays field type.,"static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);",org.joda.time.DurationFieldType HALFDAYS_TYPE,"static , final "
org.joda.time.DurationFieldType.HOURS_TYPE,Field,The hours field type.,"static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);",org.joda.time.DurationFieldType HOURS_TYPE,"static , final "
org.joda.time.DurationFieldType.MINUTES_TYPE,Field,The minutes field type.,"static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);",org.joda.time.DurationFieldType MINUTES_TYPE,"static , final "
org.joda.time.DurationFieldType.SECONDS_TYPE,Field,The seconds field type.,"static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);",org.joda.time.DurationFieldType SECONDS_TYPE,"static , final "
org.joda.time.DurationFieldType.MILLIS_TYPE,Field,The millis field type.,"static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);",org.joda.time.DurationFieldType MILLIS_TYPE,"static , final "
org.joda.time.DurationFieldType.iName,Field,The name of the field type.,private final String iName;,java.lang.String iName,"private , final "
org.joda.time.DurationFieldType$StandardDurationFieldType.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 31156755687123L;,long serialVersionUID,"private , static , final "
org.joda.time.DurationFieldType$StandardDurationFieldType.iOrdinal,Field,"The ordinal of the standard field type, for switch statements",private final byte iOrdinal;,byte iOrdinal,"private , final "
org.joda.time.DateTime.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = -5171125899451703815L;,long serialVersionUID,"private , static , final "
org.joda.time.DateTime$Property.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = -6983323811635733510L;,long serialVersionUID,"private , static , final "
org.joda.time.DateTime$Property.iInstant,Field,The instant this property is working against,private DateTime iInstant;,org.joda.time.DateTime iInstant,private 
org.joda.time.DateTime$Property.iField,Field,The field this property is working against,private DateTimeField iField;,org.joda.time.DateTimeField iField,private 
org.joda.time.Years.ZERO,Field,Constant representing zero years.,public static final Years ZERO = new Years(0);,org.joda.time.Years ZERO,"public , static , final "
org.joda.time.Years.ONE,Field,Constant representing one year.,public static final Years ONE = new Years(1);,org.joda.time.Years ONE,"public , static , final "
org.joda.time.Years.TWO,Field,Constant representing two years.,public static final Years TWO = new Years(2);,org.joda.time.Years TWO,"public , static , final "
org.joda.time.Years.THREE,Field,Constant representing three years.,public static final Years THREE = new Years(3);,org.joda.time.Years THREE,"public , static , final "
org.joda.time.Years.MAX_VALUE,Field,Constant representing the maximum number of years that can be stored in this object.,public static final Years MAX_VALUE = new Years(Integer.MAX_VALUE);,org.joda.time.Years MAX_VALUE,"public , static , final "
org.joda.time.Years.MIN_VALUE,Field,Constant representing the minimum number of years that can be stored in this object.,public static final Years MIN_VALUE = new Years(Integer.MIN_VALUE);,org.joda.time.Years MIN_VALUE,"public , static , final "
org.joda.time.Years.PARSER,Field,The parser to use for this class.,private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.years());,org.joda.time.format.PeriodFormatter PARSER,"private , static , final "
org.joda.time.Years.serialVersionUID,Field,Serialization version.,private static final long serialVersionUID = 87525275727380868L;,long serialVersionUID,"private , static , final "
org.joda.time.tz.ZoneInfoCompiler.cStartOfYear,Field,No Comment,static DateTimeOfYear cStartOfYear;,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear cStartOfYear,static 
org.joda.time.tz.ZoneInfoCompiler.cLenientISO,Field,No Comment,static Chronology cLenientISO;,org.joda.time.Chronology cLenientISO,static 
org.joda.time.tz.ZoneInfoCompiler.RULE_LOOKUP,Field,abbreviation must be unambiguous in context.,"static final Set<String> RULE_LOOKUP = expand(""rule"", ""r"");",java.util.Set RULE_LOOKUP,"static , final "
org.joda.time.tz.ZoneInfoCompiler.ZONE_LOOKUP,Field,No Comment,"static final Set<String> ZONE_LOOKUP = expand(""zone"", ""z"");",java.util.Set ZONE_LOOKUP,"static , final "
org.joda.time.tz.ZoneInfoCompiler.LINK_LOOKUP,Field,No Comment,"static final Set<String> LINK_LOOKUP = expand(""link"", ""l"");",java.util.Set LINK_LOOKUP,"static , final "
org.joda.time.tz.ZoneInfoCompiler.MIN_YEAR_LOOKUP,Field,No Comment,"static final Set<String> MIN_YEAR_LOOKUP = expand(""minimum"", ""mi"");",java.util.Set MIN_YEAR_LOOKUP,"static , final "
org.joda.time.tz.ZoneInfoCompiler.MAX_YEAR_LOOKUP,Field,No Comment,"static final Set<String> MAX_YEAR_LOOKUP = expand(""maximum"", ""ma"");",java.util.Set MAX_YEAR_LOOKUP,"static , final "
org.joda.time.tz.ZoneInfoCompiler.ONLY_YEAR_LOOKUP,Field,No Comment,"static final Set<String> ONLY_YEAR_LOOKUP = expand(""only"", ""o"");",java.util.Set ONLY_YEAR_LOOKUP,"static , final "
org.joda.time.tz.ZoneInfoCompiler.MONTH_LOOKUP,Field,No Comment,"static final Map<String, Integer> MONTH_LOOKUP = new HashMap<String, Integer>();",java.util.Map MONTH_LOOKUP,"static , final "
org.joda.time.tz.ZoneInfoCompiler.DOW_LOOKUP,Field,No Comment,"static final Map<String, Integer> DOW_LOOKUP = new HashMap<String, Integer>();",java.util.Map DOW_LOOKUP,"static , final "
org.joda.time.tz.ZoneInfoCompiler.iRuleSets,Field,Maps names to RuleSets.,"private Map<String, RuleSet> iRuleSets;",java.util.Map iRuleSets,private 
org.joda.time.tz.ZoneInfoCompiler.iZones,Field,List of Zone objects.,private List<Zone> iZones;,java.util.List iZones,private 
org.joda.time.tz.ZoneInfoCompiler.iGoodLinks,Field,List String pairs to link.,private List<String> iGoodLinks;,java.util.List iGoodLinks,private 
org.joda.time.tz.ZoneInfoCompiler.iBackLinks,Field,List String pairs to link.,private List<String> iBackLinks;,java.util.List iBackLinks,private 
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.iMonthOfYear,Field,No Comment,public final int iMonthOfYear;,int iMonthOfYear,"public , final "
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.iDayOfMonth,Field,No Comment,public final int iDayOfMonth;,int iDayOfMonth,"public , final "
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.iDayOfWeek,Field,No Comment,public final int iDayOfWeek;,int iDayOfWeek,"public , final "
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.iAdvanceDayOfWeek,Field,No Comment,public final boolean iAdvanceDayOfWeek;,boolean iAdvanceDayOfWeek,"public , final "
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.iMillisOfDay,Field,No Comment,public final int iMillisOfDay;,int iMillisOfDay,"public , final "
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.iZoneChar,Field,No Comment,public final char iZoneChar;,char iZoneChar,"public , final "
org.joda.time.tz.ZoneInfoCompiler$Rule.iName,Field,No Comment,public final String iName;,java.lang.String iName,"public , final "
org.joda.time.tz.ZoneInfoCompiler$Rule.iFromYear,Field,No Comment,public final int iFromYear;,int iFromYear,"public , final "
org.joda.time.tz.ZoneInfoCompiler$Rule.iToYear,Field,No Comment,public final int iToYear;,int iToYear,"public , final "
org.joda.time.tz.ZoneInfoCompiler$Rule.iType,Field,No Comment,public final String iType;,java.lang.String iType,"public , final "
org.joda.time.tz.ZoneInfoCompiler$Rule.iDateTimeOfYear,Field,No Comment,public final DateTimeOfYear iDateTimeOfYear;,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iDateTimeOfYear,"public , final "
org.joda.time.tz.ZoneInfoCompiler$Rule.iSaveMillis,Field,No Comment,public final int iSaveMillis;,int iSaveMillis,"public , final "
org.joda.time.tz.ZoneInfoCompiler$Rule.iLetterS,Field,No Comment,public final String iLetterS;,java.lang.String iLetterS,"public , final "
org.joda.time.tz.ZoneInfoCompiler$RuleSet.iRules,Field,No Comment,private List<Rule> iRules;,java.util.List iRules,private 
org.joda.time.tz.ZoneInfoCompiler$Zone.iName,Field,No Comment,public final String iName;,java.lang.String iName,"public , final "
org.joda.time.tz.ZoneInfoCompiler$Zone.iOffsetMillis,Field,No Comment,public final int iOffsetMillis;,int iOffsetMillis,"public , final "
org.joda.time.tz.ZoneInfoCompiler$Zone.iRules,Field,No Comment,public final String iRules;,java.lang.String iRules,"public , final "
org.joda.time.tz.ZoneInfoCompiler$Zone.iFormat,Field,No Comment,public final String iFormat;,java.lang.String iFormat,"public , final "
org.joda.time.tz.ZoneInfoCompiler$Zone.iUntilYear,Field,No Comment,public final int iUntilYear;,int iUntilYear,"public , final "
org.joda.time.tz.ZoneInfoCompiler$Zone.iUntilDateTimeOfYear,Field,No Comment,public final DateTimeOfYear iUntilDateTimeOfYear;,org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iUntilDateTimeOfYear,"public , final "
org.joda.time.tz.ZoneInfoCompiler$Zone.iNext,Field,No Comment,private Zone iNext;,org.joda.time.tz.ZoneInfoCompiler$Zone iNext,private 
org.joda.time.tz.CachedDateTimeZone.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 5472298452022250685L;,long serialVersionUID,"private , static , final "
org.joda.time.tz.CachedDateTimeZone.cInfoCacheMask,Field,No Comment,private static final int cInfoCacheMask;,int cInfoCacheMask,"private , static , final "
org.joda.time.tz.CachedDateTimeZone.iZone,Field,No Comment,private final DateTimeZone iZone;,org.joda.time.DateTimeZone iZone,"private , final "
org.joda.time.tz.CachedDateTimeZone.iInfoCache,Field,No Comment,private final transient Info[] iInfoCache = new Info[cInfoCacheMask + 1];,org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache,"private , final , transient "
org.joda.time.tz.CachedDateTimeZone$Info.iPeriodStart,Field,"For first Info in chain, iPeriodStart's lower 32 bits are clear.",public final long iPeriodStart;,long iPeriodStart,"public , final "
org.joda.time.tz.CachedDateTimeZone$Info.iZoneRef,Field,No Comment,public final DateTimeZone iZoneRef;,org.joda.time.DateTimeZone iZoneRef,"public , final "
org.joda.time.tz.CachedDateTimeZone$Info.iNextInfo,Field,No Comment,Info iNextInfo;,org.joda.time.tz.CachedDateTimeZone$Info iNextInfo,default
org.joda.time.tz.CachedDateTimeZone$Info.iNameKey,Field,No Comment,private String iNameKey;,java.lang.String iNameKey,private 
org.joda.time.tz.CachedDateTimeZone$Info.iOffset,Field,No Comment,private int iOffset = Integer.MIN_VALUE;,int iOffset,private 
org.joda.time.tz.CachedDateTimeZone$Info.iStandardOffset,Field,No Comment,private int iStandardOffset = Integer.MIN_VALUE;,int iStandardOffset,private 
org.joda.time.tz.ZoneInfoProvider.iFileDir,Field,The directory where the files are held.,private final File iFileDir;,java.io.File iFileDir,"private , final "
org.joda.time.tz.ZoneInfoProvider.iResourcePath,Field,The resource path.,private final String iResourcePath;,java.lang.String iResourcePath,"private , final "
org.joda.time.tz.ZoneInfoProvider.iLoader,Field,The class loader to use.,private final ClassLoader iLoader;,java.lang.ClassLoader iLoader,"private , final "
org.joda.time.tz.ZoneInfoProvider.iZoneInfoMap,Field,Maps ids to strings or SoftReferences to DateTimeZones.,"private final Map<String, Object> iZoneInfoMap;",java.util.Map iZoneInfoMap,"private , final "
org.joda.time.tz.ZoneInfoProvider.iZoneInfoKeys,Field,Maps ids to strings or SoftReferences to DateTimeZones.,private final Set<String> iZoneInfoKeys;,java.util.Set iZoneInfoKeys,"private , final "
org.joda.time.tz.DefaultNameProvider.iByLocaleCache,Field,"locale -> (id -> (nameKey -> [shortName, name]))","private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();",java.util.HashMap iByLocaleCache,private 
org.joda.time.tz.DefaultNameProvider.iByLocaleCache2,Field,No Comment,"private HashMap<Locale, Map<String, Map<Boolean, Object>>> iByLocaleCache2 = createCache();",java.util.HashMap iByLocaleCache2,private 
org.joda.time.tz.DateTimeZoneBuilder.iRuleSets,Field,List of RuleSets.,private final ArrayList<RuleSet> iRuleSets;,java.util.ArrayList iRuleSets,"private , final "
org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMode,Field,"Is 'u', 'w', or 's'.",final char iMode;,char iMode,final 
org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMonthOfYear,Field,No Comment,final int iMonthOfYear;,int iMonthOfYear,final 
org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfMonth,Field,No Comment,final int iDayOfMonth;,int iDayOfMonth,final 
org.joda.time.tz.DateTimeZoneBuilder$OfYear.iDayOfWeek,Field,No Comment,final int iDayOfWeek;,int iDayOfWeek,final 
org.joda.time.tz.DateTimeZoneBuilder$OfYear.iAdvance,Field,No Comment,final boolean iAdvance;,boolean iAdvance,final 
org.joda.time.tz.DateTimeZoneBuilder$OfYear.iMillisOfDay,Field,No Comment,final int iMillisOfDay;,int iMillisOfDay,final 
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.iOfYear,Field,No Comment,final OfYear iOfYear;,org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear,final 
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.iNameKey,Field,No Comment,final String iNameKey;,java.lang.String iNameKey,final 
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.iSaveMillis,Field,No Comment,final int iSaveMillis;,int iSaveMillis,final 
org.joda.time.tz.DateTimeZoneBuilder$Rule.iRecurrence,Field,No Comment,final Recurrence iRecurrence;,org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence,final 
org.joda.time.tz.DateTimeZoneBuilder$Rule.iFromYear,Field,inclusive,final int iFromYear;,int iFromYear,final 
org.joda.time.tz.DateTimeZoneBuilder$Rule.iToYear,Field,inclusive,final int iToYear;,int iToYear,final 
org.joda.time.tz.DateTimeZoneBuilder$Transition.iMillis,Field,No Comment,private final long iMillis;,long iMillis,"private , final "
org.joda.time.tz.DateTimeZoneBuilder$Transition.iNameKey,Field,No Comment,private final String iNameKey;,java.lang.String iNameKey,"private , final "
org.joda.time.tz.DateTimeZoneBuilder$Transition.iWallOffset,Field,No Comment,private final int iWallOffset;,int iWallOffset,"private , final "
org.joda.time.tz.DateTimeZoneBuilder$Transition.iStandardOffset,Field,No Comment,private final int iStandardOffset;,int iStandardOffset,"private , final "
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.YEAR_LIMIT,Field,No Comment,private static final int YEAR_LIMIT;,int YEAR_LIMIT,"private , static , final "
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iStandardOffset,Field,No Comment,private int iStandardOffset;,int iStandardOffset,private 
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iRules,Field,No Comment,private ArrayList<Rule> iRules;,java.util.ArrayList iRules,private 
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iInitialNameKey,Field,Optional.,private String iInitialNameKey;,java.lang.String iInitialNameKey,private 
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iInitialSaveMillis,Field,No Comment,private int iInitialSaveMillis;,int iInitialSaveMillis,private 
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iUpperYear,Field,Upper limit is exclusive.,private int iUpperYear;,int iUpperYear,private 
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.iUpperOfYear,Field,No Comment,private OfYear iUpperOfYear;,org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear,private 
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 6941492635554961361L;,long serialVersionUID,"private , static , final "
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStandardOffset,Field,No Comment,final int iStandardOffset;,int iStandardOffset,final 
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iStartRecurrence,Field,No Comment,final Recurrence iStartRecurrence;,org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence,final 
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.iEndRecurrence,Field,No Comment,final Recurrence iEndRecurrence;,org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence,final 
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 7811976468055766265L;,long serialVersionUID,"private , static , final "
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTransitions,Field,No Comment,private final long[] iTransitions;,long[] iTransitions,"private , final "
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iWallOffsets,Field,No Comment,private final int[] iWallOffsets;,int[] iWallOffsets,"private , final "
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iStandardOffsets,Field,No Comment,private final int[] iStandardOffsets;,int[] iStandardOffsets,"private , final "
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iNameKeys,Field,No Comment,private final String[] iNameKeys;,java.lang.String[] iNameKeys,"private , final "
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.iTailZone,Field,No Comment,private final DSTZone iTailZone;,org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone,"private , final "
org.joda.time.tz.ZoneInfoLogger.cVerbose,Field,No Comment,static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>() {\n\n    @Override\n    protected Boolean initialValue() {\n        return Boolean.FALSE;\n    }\n};,java.lang.ThreadLocal cVerbose,static 
org.joda.time.tz.UTCProvider.AVAILABLE_IDS,Field,* The available IDs.,"private static final Set<String> AVAILABLE_IDS = Collections.singleton(""UTC"");",java.util.Set AVAILABLE_IDS,"private , static , final "
org.joda.time.tz.FixedDateTimeZone.serialVersionUID,Field,No Comment,private static final long serialVersionUID = -3513011772763289092L;,long serialVersionUID,"private , static , final "
org.joda.time.tz.FixedDateTimeZone.iNameKey,Field,No Comment,private final String iNameKey;,java.lang.String iNameKey,"private , final "
org.joda.time.tz.FixedDateTimeZone.iWallOffset,Field,No Comment,private final int iWallOffset;,int iWallOffset,"private , final "
org.joda.time.tz.FixedDateTimeZone.iStandardOffset,Field,No Comment,private final int iStandardOffset;,int iStandardOffset,"private , final "
org.joda.time.LocalDate.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = -8775358157899L;,long serialVersionUID,"private , static , final "
org.joda.time.LocalDate.YEAR,Field,The index of the year field in the field array,private static final int YEAR = 0;,int YEAR,"private , static , final "
org.joda.time.LocalDate.MONTH_OF_YEAR,Field,The index of the monthOfYear field in the field array,private static final int MONTH_OF_YEAR = 1;,int MONTH_OF_YEAR,"private , static , final "
org.joda.time.LocalDate.DAY_OF_MONTH,Field,The index of the dayOfMonth field in the field array,private static final int DAY_OF_MONTH = 2;,int DAY_OF_MONTH,"private , static , final "
org.joda.time.LocalDate.DATE_DURATION_TYPES,Field,Set of known duration types.,private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();,java.util.Set DATE_DURATION_TYPES,"private , static , final "
org.joda.time.LocalDate.iLocalMillis,Field,The local millis from 1970-01-01T00:00:00,private final long iLocalMillis;,long iLocalMillis,"private , final "
org.joda.time.LocalDate.iChronology,Field,The chronology to use in UTC.,private final Chronology iChronology;,org.joda.time.Chronology iChronology,"private , final "
org.joda.time.LocalDate.iHash,Field,The cached hash code.,private transient int iHash;,int iHash,"private , transient "
org.joda.time.LocalDate$Property.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = -3193829732634L;,long serialVersionUID,"private , static , final "
org.joda.time.LocalDate$Property.iInstant,Field,The instant this property is working against,private transient LocalDate iInstant;,org.joda.time.LocalDate iInstant,"private , transient "
org.joda.time.LocalDate$Property.iField,Field,The field this property is working against,private transient DateTimeField iField;,org.joda.time.DateTimeField iField,"private , transient "
org.joda.time.IllegalInstantException.serialVersionUID,Field,Serialization lock.,private static final long serialVersionUID = 2858712538216L;,long serialVersionUID,"private , static , final "
org.joda.time.Period.ZERO,Field,* A period of zero length and standard period type.\n     * @since 1.4,public static final Period ZERO = new Period();,org.joda.time.Period ZERO,"public , static , final "
org.joda.time.Period.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 741052353876488155L;,long serialVersionUID,"private , static , final "
org.joda.time.base.BasePartial.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 2353678632973660L;,long serialVersionUID,"private , static , final "
org.joda.time.base.BasePartial.iChronology,Field,The chronology in use,private final Chronology iChronology;,org.joda.time.Chronology iChronology,"private , final "
org.joda.time.base.BasePartial.iValues,Field,The values of each field in this partial,private final int[] iValues;,int[] iValues,"private , final "
org.joda.time.base.BaseDateTime.serialVersionUID,Field,Serialization lock,private static final long serialVersionUID = -6728882245981L;,long serialVersionUID,"private , static , final "
org.joda.time.base.BaseDateTime.iMillis,Field,The millis from 1970-01-01T00:00:00Z,private volatile long iMillis;,long iMillis,"private , volatile "
org.joda.time.base.BaseDateTime.iChronology,Field,The chronology to use,private volatile Chronology iChronology;,org.joda.time.Chronology iChronology,"private , volatile "
org.joda.time.base.BasePeriod.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = -2110953284060001145L;,long serialVersionUID,"private , static , final "
org.joda.time.base.BasePeriod.DUMMY_PERIOD,Field,Serialization version,private static final ReadablePeriod DUMMY_PERIOD = new AbstractPeriod() {\n\n    public int getValue(int index) {\n        return 0;\n    }\n\n    public PeriodType getPeriodType() {\n        return PeriodType.time();\n    }\n};,org.joda.time.ReadablePeriod DUMMY_PERIOD,"private , static , final "
org.joda.time.base.BasePeriod.iType,Field,The type of period,private final PeriodType iType;,org.joda.time.PeriodType iType,"private , final "
org.joda.time.base.BasePeriod.iValues,Field,The values,private final int[] iValues;,int[] iValues,"private , final "
org.joda.time.base.BaseInterval.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 576586928732749278L;,long serialVersionUID,"private , static , final "
org.joda.time.base.BaseInterval.iChronology,Field,The chronology of the interval,private volatile Chronology iChronology;,org.joda.time.Chronology iChronology,"private , volatile "
org.joda.time.base.BaseInterval.iStartMillis,Field,The start of the interval,private volatile long iStartMillis;,long iStartMillis,"private , volatile "
org.joda.time.base.BaseInterval.iEndMillis,Field,The end of the interval,private volatile long iEndMillis;,long iEndMillis,"private , volatile "
org.joda.time.base.BaseDuration.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 2581698638990L;,long serialVersionUID,"private , static , final "
org.joda.time.base.BaseDuration.iMillis,Field,The duration length,private volatile long iMillis;,long iMillis,"private , volatile "
org.joda.time.base.BaseSingleFieldPeriod.serialVersionUID,Field,Serialization version.,private static final long serialVersionUID = 9386874258972L;,long serialVersionUID,"private , static , final "
org.joda.time.base.BaseSingleFieldPeriod.START_1972,Field,The start of 1972.,private static final long START_1972 = 2L * 365L * 86400L * 1000L;,long START_1972,"private , static , final "
org.joda.time.base.BaseSingleFieldPeriod.iPeriod,Field,The period in the units of this period.,private volatile int iPeriod;,int iPeriod,"private , volatile "
org.joda.time.base.BaseLocal.serialVersionUID,Field,Serialization version,"@SuppressWarnings(""unused"")\nprivate static final long serialVersionUID = 276453175381783L;",long serialVersionUID,"private , static , final "
org.joda.time.convert.ReadablePartialConverter.INSTANCE,Field,* Singleton instance.,static final ReadablePartialConverter INSTANCE = new ReadablePartialConverter();,org.joda.time.convert.ReadablePartialConverter INSTANCE,"static , final "
org.joda.time.convert.LongConverter.INSTANCE,Field,* Singleton instance.,static final LongConverter INSTANCE = new LongConverter();,org.joda.time.convert.LongConverter INSTANCE,"static , final "
org.joda.time.convert.StringConverter.INSTANCE,Field,* Singleton instance.,static final StringConverter INSTANCE = new StringConverter();,org.joda.time.convert.StringConverter INSTANCE,"static , final "
org.joda.time.convert.NullConverter.INSTANCE,Field,* Singleton instance.,static final NullConverter INSTANCE = new NullConverter();,org.joda.time.convert.NullConverter INSTANCE,"static , final "
org.joda.time.convert.ReadableIntervalConverter.INSTANCE,Field,* Singleton instance.,static final ReadableIntervalConverter INSTANCE = new ReadableIntervalConverter();,org.joda.time.convert.ReadableIntervalConverter INSTANCE,"static , final "
org.joda.time.convert.ReadableDurationConverter.INSTANCE,Field,* Singleton instance.,static final ReadableDurationConverter INSTANCE = new ReadableDurationConverter();,org.joda.time.convert.ReadableDurationConverter INSTANCE,"static , final "
org.joda.time.convert.DateConverter.INSTANCE,Field,* Singleton instance.,static final DateConverter INSTANCE = new DateConverter();,org.joda.time.convert.DateConverter INSTANCE,"static , final "
org.joda.time.convert.ConverterManager.iInstantConverters,Field,No Comment,private ConverterSet iInstantConverters;,org.joda.time.convert.ConverterSet iInstantConverters,private 
org.joda.time.convert.ConverterManager.iPartialConverters,Field,No Comment,private ConverterSet iPartialConverters;,org.joda.time.convert.ConverterSet iPartialConverters,private 
org.joda.time.convert.ConverterManager.iDurationConverters,Field,No Comment,private ConverterSet iDurationConverters;,org.joda.time.convert.ConverterSet iDurationConverters,private 
org.joda.time.convert.ConverterManager.iPeriodConverters,Field,No Comment,private ConverterSet iPeriodConverters;,org.joda.time.convert.ConverterSet iPeriodConverters,private 
org.joda.time.convert.ConverterManager.iIntervalConverters,Field,No Comment,private ConverterSet iIntervalConverters;,org.joda.time.convert.ConverterSet iIntervalConverters,private 
org.joda.time.convert.ConverterManager$LazyConverterManagerHolder.INSTANCE,Field,No Comment,static final ConverterManager INSTANCE = new ConverterManager();,org.joda.time.convert.ConverterManager INSTANCE,"static , final "
org.joda.time.convert.ConverterSet.iConverters,Field,No Comment,private final Converter[] iConverters;,org.joda.time.convert.Converter[] iConverters,"private , final "
org.joda.time.convert.ConverterSet.iSelectEntries,Field,"power of 2, at least one null slot.",private Entry[] iSelectEntries;,org.joda.time.convert.ConverterSet$Entry[] iSelectEntries,private 
org.joda.time.convert.ConverterSet$Entry.iType,Field,No Comment,final Class<?> iType;,java.lang.Class iType,final 
org.joda.time.convert.ConverterSet$Entry.iConverter,Field,No Comment,final Converter iConverter;,org.joda.time.convert.Converter iConverter,final 
org.joda.time.convert.ReadableInstantConverter.INSTANCE,Field,* Singleton instance.,static final ReadableInstantConverter INSTANCE = new ReadableInstantConverter();,org.joda.time.convert.ReadableInstantConverter INSTANCE,"static , final "
org.joda.time.convert.ReadablePeriodConverter.INSTANCE,Field,* Singleton instance.,static final ReadablePeriodConverter INSTANCE = new ReadablePeriodConverter();,org.joda.time.convert.ReadablePeriodConverter INSTANCE,"static , final "
org.joda.time.convert.CalendarConverter.INSTANCE,Field,* Singleton instance.,static final CalendarConverter INSTANCE = new CalendarConverter();,org.joda.time.convert.CalendarConverter INSTANCE,"static , final "
org.joda.time.MutableDateTime.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = 2852608688135209575L;,long serialVersionUID,"private , static , final "
org.joda.time.MutableDateTime.ROUND_NONE,Field,Rounding is disabled,public static final int ROUND_NONE = 0;,int ROUND_NONE,"public , static , final "
org.joda.time.MutableDateTime.ROUND_FLOOR,Field,Rounding mode as described by {@link DateTimeField#roundFloor},public static final int ROUND_FLOOR = 1;,int ROUND_FLOOR,"public , static , final "
org.joda.time.MutableDateTime.ROUND_CEILING,Field,Rounding mode as described by {@link DateTimeField#roundCeiling},public static final int ROUND_CEILING = 2;,int ROUND_CEILING,"public , static , final "
org.joda.time.MutableDateTime.ROUND_HALF_FLOOR,Field,Rounding mode as described by {@link DateTimeField#roundHalfFloor},public static final int ROUND_HALF_FLOOR = 3;,int ROUND_HALF_FLOOR,"public , static , final "
org.joda.time.MutableDateTime.ROUND_HALF_CEILING,Field,Rounding mode as described by {@link DateTimeField#roundHalfCeiling},public static final int ROUND_HALF_CEILING = 4;,int ROUND_HALF_CEILING,"public , static , final "
org.joda.time.MutableDateTime.ROUND_HALF_EVEN,Field,Rounding mode as described by {@link DateTimeField#roundHalfEven},public static final int ROUND_HALF_EVEN = 5;,int ROUND_HALF_EVEN,"public , static , final "
org.joda.time.MutableDateTime.iRoundingField,Field,The field to round on,private DateTimeField iRoundingField;,org.joda.time.DateTimeField iRoundingField,private 
org.joda.time.MutableDateTime.iRoundingMode,Field,The mode of rounding,private int iRoundingMode;,int iRoundingMode,private 
org.joda.time.MutableDateTime$Property.serialVersionUID,Field,Serialization version,private static final long serialVersionUID = -4481126543819298617L;,long serialVersionUID,"private , static , final "
org.joda.time.MutableDateTime$Property.iInstant,Field,The instant this property is working against,private MutableDateTime iInstant;,org.joda.time.MutableDateTime iInstant,private 
org.joda.time.MutableDateTime$Property.iField,Field,The field this property is working against,private DateTimeField iField;,org.joda.time.DateTimeField iField,private 
org.joda.time.Seconds.ZERO,Field,Constant representing zero seconds.,public static final Seconds ZERO = new Seconds(0);,org.joda.time.Seconds ZERO,"public , static , final "
org.joda.time.Seconds.ONE,Field,Constant representing one second.,public static final Seconds ONE = new Seconds(1);,org.joda.time.Seconds ONE,"public , static , final "
org.joda.time.Seconds.TWO,Field,Constant representing two seconds.,public static final Seconds TWO = new Seconds(2);,org.joda.time.Seconds TWO,"public , static , final "
org.joda.time.Seconds.THREE,Field,Constant representing three seconds.,public static final Seconds THREE = new Seconds(3);,org.joda.time.Seconds THREE,"public , static , final "
org.joda.time.Seconds.MAX_VALUE,Field,Constant representing the maximum number of seconds that can be stored in this object.,public static final Seconds MAX_VALUE = new Seconds(Integer.MAX_VALUE);,org.joda.time.Seconds MAX_VALUE,"public , static , final "
org.joda.time.Seconds.MIN_VALUE,Field,Constant representing the minimum number of seconds that can be stored in this object.,public static final Seconds MIN_VALUE = new Seconds(Integer.MIN_VALUE);,org.joda.time.Seconds MIN_VALUE,"public , static , final "
org.joda.time.Seconds.PARSER,Field,The parser to use for this class.,private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.seconds());,org.joda.time.format.PeriodFormatter PARSER,"private , static , final "
org.joda.time.Seconds.serialVersionUID,Field,Serialization version.,private static final long serialVersionUID = 87525275727380862L;,long serialVersionUID,"private , static , final "
