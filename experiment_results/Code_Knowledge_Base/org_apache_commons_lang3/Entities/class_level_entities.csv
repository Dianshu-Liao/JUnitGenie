FEN:ID,:LABEL,Comment,Modifiers,Extends,Implements
org.apache.commons.lang3.LocaleUtils,Class,* Operations to assist when working with a {@link Locale}.\n *\n * <p>This class tries to handle {@code null} input gracefully.\n * An exception will not be thrown for a {@code null} input.\n * Each method documents its behavior in more detail.</p>\n *\n * @since 2.2,public ,,
org.apache.commons.lang3.LocaleUtils$SyncAvoid,Class,"* Avoids synchronization, inits on demand.","private , static , final ",,
org.apache.commons.lang3.SerializationUtils,Class,* Assists with the serialization process and performs additional functionality based\n * on serialization.\n *\n * <ul>\n * <li>Deep clone using serialization\n * <li>Serialize managing finally and IOException\n * <li>Deserialize managing finally and IOException\n * </ul>\n *\n * <p>This class throws exceptions for invalid {@code null} inputs.\n * Each method documents its behavior in more detail.</p>\n *\n * <p>#ThreadSafe#</p>\n * @since 1.0,public ,,
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream,Class,"* Custom specialization of the standard JDK {@link ObjectInputStream}\n     * that uses a custom  {@link ClassLoader} to resolve a class.\n     * If the specified {@link ClassLoader} is not able to resolve the class,\n     * the context classloader of the current thread will be used.\n     * This way, the standard deserialization work also in web-application\n     * containers and application servers, no matter in which of the\n     * {@link ClassLoader} the particular class that encapsulates\n     * serialization/deserialization lives.\n     *\n     * <p>For more in-depth information about the problem for which this\n     * class here is a workaround, see the JIRA issue LANG-626.</p>","static , final ",java.io.ObjectInputStream,
org.apache.commons.lang3.DoubleRange,Class,* Specializes {@link NumberRange} for {@link Double}s.\n *\n * <p>\n * This class is not designed to interoperate with other NumberRanges\n * </p>\n *\n * @since 3.13.0,"public , final ",org.apache.commons.lang3.NumberRange,
org.apache.commons.lang3.Conversion,Class,"* Static methods to convert a type into another, with endianness and bit ordering awareness.\n *\n * <p>\n * The methods names follow a naming rule:<br>\n * {@code <source type>[source endianness][source bit ordering]To<destination type>[destination endianness][destination bit ordering]}\n * </p>\n * <p>\n * Source/destination type fields is one of the following:\n * </p>\n * <ul>\n * <li>binary: an array of booleans</li>\n * <li>byte or byteArray</li>\n * <li>int or intArray</li>\n * <li>long or longArray</li>\n * <li>hex: a String containing hexadecimal digits (lowercase in destination)</li>\n * <li>hexDigit: a Char containing a hexadecimal digit (lowercase in destination)</li>\n * <li>uuid</li>\n * </ul>\n * <p>\n * Endianness field: little-endian is the default, in this case the field is absent. In case of\n * big-endian, the field is ""Be"".<br> Bit ordering: Lsb0 is the default, in this case the field\n * is absent. In case of Msb0, the field is ""Msb0"".\n * </p>\n * <p>\n * Example: intBeMsb0ToHex convert an int with big-endian byte order and Msb0 bit order into its\n * hexadecimal string representation\n * </p>\n * <p>\n * Most of the methods provide only default encoding for destination, this limits the number of\n * ways to do one thing. Unless you are dealing with data from/to outside of the JVM platform,\n * you should not need to use ""Be"" and ""Msb0"" methods.\n * </p>\n * <p>\n * Development status: work on going, only a part of the little-endian, Lsb0 methods implemented\n * so far.\n * </p>\n *\n * @since 3.2",public ,,
org.apache.commons.lang3.SystemUtils,Class,"* Helpers for {@link System}.\n *\n * <p>\n * If a system property cannot be read due to security restrictions, the corresponding field in this class will be set to {@code null} and a message will be\n * written to {@code System.err}.\n * </p>\n * <p>\n * #ThreadSafe#\n * </p>\n *\n * @since 1.0\n * @see SystemProperties",public ,,
org.apache.commons.lang3.mutable.MutableByte,Class,"* A mutable {@code byte} wrapper.\n * <p>\n * Note that as MutableByte does not extend Byte, it is not treated by String.format as a Byte parameter.\n * </p>\n *\n * @see Byte\n * @since 2.1",public ,java.lang.Number,java.lang.Comparable;org.apache.commons.lang3.mutable.Mutable
org.apache.commons.lang3.mutable.MutableBoolean,Class,"* A mutable {@code boolean} wrapper.\n * <p>\n * Note that as MutableBoolean does not extend Boolean, it is not treated by String.format as a Boolean parameter.\n * </p>\n *\n * @see Boolean\n * @since 2.2",public ,,org.apache.commons.lang3.mutable.Mutable;java.io.Serializable;java.lang.Comparable
org.apache.commons.lang3.mutable.MutableLong,Class,"* A mutable {@code long} wrapper.\n * <p>\n * Note that as MutableLong does not extend Long, it is not treated by String.format as a Long parameter.\n * </p>\n *\n * @see Long\n * @since 2.1",public ,java.lang.Number,java.lang.Comparable;org.apache.commons.lang3.mutable.Mutable
org.apache.commons.lang3.mutable.Mutable,Interface,* Provides mutable access to a value.\n * <p>\n * {@link Mutable} is used as a generic interface to the implementations in this package.\n * </p>\n * <p>\n * A typical use case would be to enable a primitive or string to be passed to a method and allow that method to\n * effectively change the value of the primitive/string. Another use case is to store a frequently changing primitive in\n * a collection (for example a total in a map) without needing to create new Integer/Long wrapper objects.\n * </p>\n *\n * @param <T> the type to set and get\n * @since 2.1,public ,,
org.apache.commons.lang3.mutable.MutableDouble,Class,"* A mutable {@code double} wrapper.\n * <p>\n * Note that as MutableDouble does not extend Double, it is not treated by String.format as a Double parameter.\n * </p>\n *\n * @see Double\n * @since 2.1",public ,java.lang.Number,java.lang.Comparable;org.apache.commons.lang3.mutable.Mutable
org.apache.commons.lang3.mutable.MutableInt,Class,"* A mutable {@code int} wrapper.\n * <p>\n * Note that as MutableInt does not extend Integer, it is not treated by String.format as an Integer parameter.\n * </p>\n *\n * @see Integer\n * @since 2.1",public ,java.lang.Number,java.lang.Comparable;org.apache.commons.lang3.mutable.Mutable
org.apache.commons.lang3.mutable.MutableObject,Class,* A mutable {@link Object} wrapper.\n *\n * @param <T> the type to set and get\n * @since 2.1,public ,,org.apache.commons.lang3.mutable.Mutable;java.io.Serializable
org.apache.commons.lang3.mutable.MutableFloat,Class,"* A mutable {@code float} wrapper.\n * <p>\n * Note that as MutableFloat does not extend Float, it is not treated by String.format as a Float parameter.\n * </p>\n *\n * @see Float\n * @since 2.1",public ,java.lang.Number,java.lang.Comparable;org.apache.commons.lang3.mutable.Mutable
org.apache.commons.lang3.mutable.MutableShort,Class,"* A mutable {@code short} wrapper.\n * <p>\n * Note that as MutableShort does not extend Short, it is not treated by String.format as a Short parameter.\n * </p>\n *\n * @see Short\n * @since 2.1",public ,java.lang.Number,java.lang.Comparable;org.apache.commons.lang3.mutable.Mutable
org.apache.commons.lang3.StringUtils,Class,@Immutable,public ,,
org.apache.commons.lang3.Functions,Class,"* This class provides utility functions, and classes for working with the {@code java.util.function} package, or more\n * generally, with Java 8 lambdas. More specifically, it attempts to address the fact that lambdas are supposed not to\n * throw Exceptions, at least not checked Exceptions, AKA instances of {@link Exception}. This enforces the use of\n * constructs like:\n *\n * <pre>\n * {@code\n *     Consumer<java.lang.reflect.Method> consumer = m -> {\n *         try {\n *             m.invoke(o, args);\n *         } catch (Throwable t) {\n *             throw Functions.rethrow(t);\n *         }\n *     };\n * }</pre>\n *\n * <p>\n * By replacing a {@link java.util.function.Consumer Consumer&lt;O&gt;} with a {@link FailableConsumer\n * FailableConsumer&lt;O,? extends Throwable&gt;}, this can be written like follows:\n * </p>\n *\n * <pre>\n * {@code\n *   Functions.accept((m) -> m.invoke(o,args));\n * }</pre>\n *\n * <p>\n * Obviously, the second version is much more concise and the spirit of Lambda expressions is met better than the second\n * version.\n * </p>\n * @since 3.9\n * @deprecated Use {@link org.apache.commons.lang3.function.Failable}.",public ,,
org.apache.commons.lang3.Functions$FailableBiConsumer,Interface,* A functional interface like {@link BiConsumer} that declares a {@link Throwable}.\n     *\n     * <p>TODO for 4.0: Move to org.apache.commons.lang3.function.</p>\n     *\n     * @param <O1> Consumed type 1.\n     * @param <O2> Consumed type 2.\n     * @param <T> Thrown exception.\n     * @deprecated Use {@link org.apache.commons.lang3.function.FailableBiConsumer}.,public ,,
org.apache.commons.lang3.Functions$FailableBiFunction,Interface,* A functional interface like {@link BiFunction} that declares a {@link Throwable}.\n     *\n     * <p>TODO for 4.0: Move to org.apache.commons.lang3.function.</p>\n     *\n     * @param <O1> Input type 1.\n     * @param <O2> Input type 2.\n     * @param <R> Return type.\n     * @param <T> Thrown exception.\n     * @deprecated Use {@link org.apache.commons.lang3.function.FailableBiFunction}.,public ,,
org.apache.commons.lang3.Functions$FailableBiPredicate,Interface,* A functional interface like {@link BiPredicate} that declares a {@link Throwable}.\n     *\n     * <p>TODO for 4.0: Move to org.apache.commons.lang3.function.</p>\n     *\n     * @param <O1> Predicate type 1.\n     * @param <O2> Predicate type 2.\n     * @param <T> Thrown exception.\n     * @deprecated Use {@link org.apache.commons.lang3.function.FailableBiPredicate}.,public ,,
org.apache.commons.lang3.Functions$FailableCallable,Interface,* A functional interface like {@link java.util.concurrent.Callable} that declares a {@link Throwable}.\n     *\n     * <p>TODO for 4.0: Move to org.apache.commons.lang3.function.</p>\n     *\n     * @param <R> Return type.\n     * @param <T> Thrown exception.\n     * @deprecated Use {@link org.apache.commons.lang3.function.FailableCallable}.,public ,,
org.apache.commons.lang3.Functions$FailableConsumer,Interface,* A functional interface like {@link Consumer} that declares a {@link Throwable}.\n     *\n     * <p>TODO for 4.0: Move to org.apache.commons.lang3.function.</p>\n     *\n     * @param <O> Consumed type 1.\n     * @param <T> Thrown exception.\n     * @deprecated Use {@link org.apache.commons.lang3.function.FailableConsumer}.,public ,,
org.apache.commons.lang3.Functions$FailableFunction,Interface,* A functional interface like {@link Function} that declares a {@link Throwable}.\n     *\n     * <p>TODO for 4.0: Move to org.apache.commons.lang3.function.</p>\n     *\n     * @param <I> Input type 1.\n     * @param <R> Return type.\n     * @param <T> Thrown exception.\n     * @deprecated Use {@link org.apache.commons.lang3.function.FailableFunction}.,public ,,
org.apache.commons.lang3.Functions$FailablePredicate,Interface,* A functional interface like {@link Predicate} that declares a {@link Throwable}.\n     *\n     * <p>TODO for 4.0: Move to org.apache.commons.lang3.function.</p>\n     *\n     * @param <I> Predicate type 1.\n     * @param <T> Thrown exception.\n     * @deprecated Use {@link org.apache.commons.lang3.function.FailablePredicate}.,public ,,
org.apache.commons.lang3.Functions$FailableRunnable,Interface,* A functional interface like {@link Runnable} that declares a {@link Throwable}.\n     *\n     * <p>TODO for 4.0: Move to org.apache.commons.lang3.function.</p>\n     *\n     * @param <T> Thrown exception.\n     * @deprecated Use {@link org.apache.commons.lang3.function.FailableRunnable}.,public ,,
org.apache.commons.lang3.Functions$FailableSupplier,Interface,* A functional interface like {@link Supplier} that declares a {@link Throwable}.\n     *\n     * <p>TODO for 4.0: Move to org.apache.commons.lang3.function.</p>\n     *\n     * @param <R> Return type.\n     * @param <T> Thrown exception.\n     * @deprecated Use {@link org.apache.commons.lang3.function.FailableSupplier}.,public ,,
org.apache.commons.lang3.util.FluentBitSet,Class,* A fluent {@link BitSet} with additional operations.\n * <p>\n * Originally from Apache Commons VFS with more added to act as a fluent replacement for {@link java.util.BitSet}.\n * </p>\n * @since 3.13.0,"public , final ",,java.lang.Cloneable;java.io.Serializable
org.apache.commons.lang3.util.IterableStringTokenizer,Class,* A {@link StringTokenizer} that implements {@link Iterable}{@code <String>} and conversion methods {@link #toList()} and {@link #toStream()}.\n *\n * @since 3.18.0,public ,java.util.StringTokenizer,java.lang.Iterable
org.apache.commons.lang3.RuntimeEnvironment,Class,* Helps query the runtime environment.\n *\n * @since 3.15.0,public ,,
org.apache.commons.lang3.StringEscapeUtils,Class,"* Escapes and unescapes {@link String}s for\n * Java, Java Script, HTML and XML.\n *\n * <p>#ThreadSafe#</p>\n * @since 2.0\n * @deprecated As of 3.6, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/StringEscapeUtils.html"">\n * StringEscapeUtils</a> instead",public ,,
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper,Class,No Comment,static ,org.apache.commons.lang3.text.translate.CharSequenceTranslator,
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper,Class,No Comment,static ,org.apache.commons.lang3.text.translate.CharSequenceTranslator,
org.apache.commons.lang3.tuple.Pair,Abstract Class,"* A pair consisting of two elements.\n *\n * <p>This class is an abstract implementation defining the basic API.\n * It refers to the elements as 'left' and 'right'. It also implements the\n * {@code Map.Entry} interface where the key is 'left' and the value is 'right'.</p>\n *\n * <p>Subclass implementations may be mutable or immutable.\n * However, there is no restriction on the type of the stored objects that may be stored.\n * If mutable objects are stored in the pair, then the pair itself effectively becomes mutable.</p>\n *\n * @param <L> the left element type\n * @param <R> the right element type\n * @since 3.0","public , abstract ",,java.util.Map.Entry;java.lang.Comparable;java.io.Serializable
org.apache.commons.lang3.tuple.MutableTriple,Class,* A mutable triple consisting of three {@link Object} elements.\n *\n * <p>Not #ThreadSafe#</p>\n *\n * @param <L> the left element type\n * @param <M> the middle element type\n * @param <R> the right element type\n * @since 3.2,public ,org.apache.commons.lang3.tuple.Triple,
org.apache.commons.lang3.tuple.MutablePair,Class,* A mutable pair consisting of two {@link Object} elements.\n *\n * <p>Not #ThreadSafe#</p>\n *\n * @param <L> the left element type\n * @param <R> the right element type\n * @since 3.0,public ,org.apache.commons.lang3.tuple.Pair,
org.apache.commons.lang3.tuple.ImmutableTriple,Class,"* An immutable triple consisting of three {@link Object} elements.\n *\n * <p>Although the implementation is immutable, there is no restriction on the objects\n * that may be stored. If mutable objects are stored in the triple, then the triple\n * itself effectively becomes mutable.</p>\n *\n * <p>#ThreadSafe# if all three objects are thread-safe</p>\n *\n * @param <L> the left element type\n * @param <M> the middle element type\n * @param <R> the right element type\n * @since 3.2",public ,org.apache.commons.lang3.tuple.Triple,
org.apache.commons.lang3.tuple.ImmutablePair,Class,"* An immutable pair consisting of two {@link Object} elements.\n *\n * <p>Although the implementation is immutable, there is no restriction on the objects\n * that may be stored. If mutable objects are stored in the pair, then the pair\n * itself effectively becomes mutable.</p>\n *\n * <p>#ThreadSafe# if both paired objects are thread-safe</p>\n *\n * @param <L> the left element type\n * @param <R> the right element type\n * @since 3.0",public ,org.apache.commons.lang3.tuple.Pair,
org.apache.commons.lang3.tuple.Triple,Abstract Class,"* A triple consisting of three elements.\n *\n * <p>This class is an abstract implementation defining the basic API.\n * It refers to the elements as 'left', 'middle' and 'right'.</p>\n *\n * <p>Subclass implementations may be mutable or immutable.\n * However, there is no restriction on the type of the stored objects that may be stored.\n * If mutable objects are stored in the triple, then the triple itself effectively becomes mutable.</p>\n *\n * @param <L> the left element type\n * @param <M> the middle element type\n * @param <R> the right element type\n * @since 3.2","public , abstract ",,java.lang.Comparable;java.io.Serializable
org.apache.commons.lang3.Charsets,Class,* Internal use only.\n * <p>\n * Provides utilities for {@link Charset}.\n * </p>\n * <p>\n * Package private since Apache Commons IO already provides a Charsets because {@link Charset} is in\n * {@code java.nio.charset}.\n * </p>\n *\n * @since 3.10,final ,,
org.apache.commons.lang3.Strings,Abstract Class,* String operations where you choose case-sensitive {@link #CS} vs. case-insensitive {@link #CI} through a singleton instance.\n *\n * @see CharSequenceUtils\n * @see StringUtils\n * @since 3.18.0,"public , abstract ",,
org.apache.commons.lang3.Strings$Builder,Class,* Builds {@link Strings} instances.,"public , static ",org.apache.commons.lang3.builder.AbstractSupplier,
org.apache.commons.lang3.Strings$CiStrings,Class,* Case-insensitive extension.,"private , static , final ",org.apache.commons.lang3.Strings,
org.apache.commons.lang3.Strings$CsStrings,Class,* Case-sentive extension.,"private , static , final ",org.apache.commons.lang3.Strings,
org.apache.commons.lang3.CharSet,Class,"* A set of characters.\n *\n * <p>Instances are immutable, but instances of subclasses may not be.</p>\n *\n * <p>#ThreadSafe#</p>\n * @since 1.0",public ,,java.io.Serializable
org.apache.commons.lang3.BitField,Class,"* Supports operations on bit-mapped fields. Instances of this class can be\n * used to store a flag or data within an {@code int}, {@code short} or\n * {@code byte}.\n *\n * <p>Each {@link BitField} is constructed with a mask value, which indicates\n * the bits that will be used to store and retrieve the data for that field.\n * For instance, the mask {@code 0xFF} indicates the least-significant byte\n * should be used to store the data.</p>\n *\n * <p>As an example, consider a car painting machine that accepts\n * paint instructions as integers. Bit fields can be used to encode this:</p>\n *\n *<pre>\n *    // blue, green and red are 1 byte values (0-255) stored in the three least\n *    // significant bytes\n *    BitField blue = new BitField(0xFF);\n *    BitField green = new BitField(0xFF00);\n *    BitField red = new BitField(0xFF0000);\n *\n *    // anyColor is a flag triggered if any color is used\n *    BitField anyColor = new BitField(0xFFFFFF);\n *\n *    // isMetallic is a single bit flag\n *    BitField isMetallic = new BitField(0x1000000);\n *</pre>\n *\n * <p>Using these {@link BitField} instances, a paint instruction can be\n * encoded into an integer:</p>\n *\n *<pre>\n *    int paintInstruction = 0;\n *    paintInstruction = red.setValue(paintInstruction, 35);\n *    paintInstruction = green.setValue(paintInstruction, 100);\n *    paintInstruction = blue.setValue(paintInstruction, 255);\n *</pre>\n *\n * <p>Flags and data can be retrieved from the integer:</p>\n *\n *<pre>\n *    // Prints true if red, green or blue is non-zero\n *    System.out.println(anyColor.isSet(paintInstruction));   // prints true\n *\n *    // Prints value of red, green and blue\n *    System.out.println(red.getValue(paintInstruction));     // prints 35\n *    System.out.println(green.getValue(paintInstruction));   // prints 100\n *    System.out.println(blue.getValue(paintInstruction));    // prints 255\n *\n *    // Prints true if isMetallic was set\n *    System.out.println(isMetallic.isSet(paintInstruction)); // prints false\n *</pre>\n *\n * @since 2.0",public ,,
org.apache.commons.lang3.CharRange,Class,to depend on Range.,final ,,java.lang.Iterable;java.io.Serializable
org.apache.commons.lang3.CharRange$CharacterIterator,Class,* Character {@link Iterator}.\n     * <p>#NotThreadSafe#</p>,"private , static , final ",,java.util.Iterator
org.apache.commons.lang3.stream.LangCollectors,Class,* Implementations of {@link Collector} that implement various reduction operations.\n * <p>\n * This class is called {@code LangCollectors} instead of {@code Collectors} to avoid clashes with {@link Collectors}.\n * </p>\n *\n * @since 3.13.0,"public , final ",,
org.apache.commons.lang3.stream.LangCollectors$SimpleCollector,Class,* Simple implementation class for {@code Collector}.\n     *\n     * @param <T> the type of elements to be collected\n     * @param <R> the type of the result,"private , static , final ",,java.util.stream.Collector
org.apache.commons.lang3.stream.IntStreams,Class,* Factory for {@link IntStream}.\n * <p>\n * <small> Only a factory for now but could hold other functionality.</small>\n * </p>\n *\n * @since 3.13.0,public ,,
org.apache.commons.lang3.stream.Streams,Class,"* Provides utility functions, and classes for working with the {@link java.util.stream} package, or more generally, with Java 8 lambdas. More specifically, it\n * attempts to address the fact that lambdas are supposed not to throw Exceptions, at least not checked Exceptions, AKA instances of {@link Exception}. This\n * enforces the use of constructs like:\n *\n * <pre>{@code\n * Consumer<java.lang.reflect.Method> consumer = m -> {\n *     try {\n *         m.invoke(o, args);\n *     } catch (Throwable t) {\n *         throw Failable.rethrow(t);\n *     }\n * };\n * stream.forEach(consumer);\n * }</pre>\n * <p>\n * Using a {@link FailableStream}, this can be rewritten as follows:\n * </p>\n *\n * <pre>{@code\n * Streams.failable(stream).forEach(m -> m.invoke(o, args));\n * }</pre>\n * <p>\n * Obviously, the second version is much more concise and the spirit of Lambda expressions is met better than in the first version.\n * </p>\n *\n * @see Stream\n * @see Failable\n * @since 3.11",public ,,
org.apache.commons.lang3.stream.Streams$ArrayCollector,Class,* A Collector type for arrays.\n     *\n     * @param <E> The array type.,"public , static ",,java.util.stream.Collector
org.apache.commons.lang3.stream.Streams$EnumerationSpliterator,Class,* Helps implement {@link Streams#of(Enumeration)}.\n     *\n     * @param <T> The element type.,"private , static , final ",java.util.Spliterators.AbstractSpliterator,
org.apache.commons.lang3.stream.Streams$FailableStream,Class,"* A reduced, and simplified version of a {@link Stream} with failable method signatures.\n     *\n     * @param <T> The streams element type.","public , static ",,
org.apache.commons.lang3.ClassUtils,Class,"* Operates on classes without using reflection.\n *\n * <p>\n * This class handles invalid {@code null} inputs as best it can. Each method documents its behavior in more detail.\n * </p>\n *\n * <p>\n * The notion of a {@code canonical name} includes the human readable name for the type, for example {@code int[]}. The\n * non-canonical method variants work with the JVM names, such as {@code [I}.\n * </p>\n *\n * @since 2.0",public ,,
org.apache.commons.lang3.ClassUtils$Interfaces,Enum,"* Inclusivity literals for {@link #hierarchy(Class, Interfaces)}.\n     *\n     * @since 3.2",public ,enum has no extends,
org.apache.commons.lang3.ArrayUtils,Class,"* Operations on arrays, primitive arrays (like {@code int[]}) and\n * primitive wrapper arrays (like {@code Integer[]}).\n * <p>\n * This class tries to handle {@code null} input gracefully.\n * An exception will not be thrown for a {@code null}\n * array input. However, an Object array that contains a {@code null}\n * element may throw an exception. Each method documents its behavior.\n * </p>\n * <p>\n * #ThreadSafe#\n * </p>\n * @since 2.0",public ,,
org.apache.commons.lang3.reflect.TypeUtils,Class,"* Utility methods focusing on type inspection, particularly with regard to generics.\n *\n * @since 3.0",public ,,
org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl,Class,* GenericArrayType implementation class.,"private , static , final ",,java.lang.reflect.GenericArrayType
org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl,Class,* ParameterizedType implementation class.,"private , static , final ",,java.lang.reflect.ParameterizedType
org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder,Class,* {@link WildcardType} builder.\n     *\n     * @since 3.2,"public , static ",,org.apache.commons.lang3.builder.Builder
org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeImpl,Class,* WildcardType implementation class.,"private , static , final ",,java.lang.reflect.WildcardType
org.apache.commons.lang3.reflect.InheritanceUtils,Class,* Utility methods focusing on inheritance.\n *\n * @since 3.2,public ,,
org.apache.commons.lang3.reflect.MethodUtils,Class,"* Utility reflection methods focused on {@link Method}s, originally from Commons BeanUtils.\n * Differences from the BeanUtils version may be noted, especially where similar functionality\n * already existed within Lang.\n *\n * <h2>Known Limitations</h2>\n * <h3>Accessing Public Methods In A Default Access Superclass</h3>\n * <p>There is an issue when invoking {@code public} methods contained in a default access superclass on JREs prior to 1.4.\n * Reflection locates these methods fine and correctly assigns them as {@code public}.\n * However, an {@link IllegalAccessException} is thrown if the method is invoked.</p>\n *\n * <p>{@link MethodUtils} contains a workaround for this situation.\n * It will attempt to call {@link java.lang.reflect.AccessibleObject#setAccessible(boolean)} on this method.\n * If this call succeeds, then the method can be invoked as normal.\n * This call will only succeed when the application has sufficient security privileges.\n * If this call fails then the method may fail.</p>\n *\n * @since 2.5",public ,,
org.apache.commons.lang3.reflect.Typed,Interface,"* Generalization of ""has a type.""\n *\n * @param <T> the type\n * @see TypeLiteral\n * @since 3.2",public ,,
org.apache.commons.lang3.reflect.MemberUtils,Class,"* Contains common code for working with {@link java.lang.reflect.Method Methods}/{@link java.lang.reflect.Constructor Constructors},\n * extracted and refactored from {@link MethodUtils} when it was imported from Commons BeanUtils.\n *\n * @since 2.5",final ,,
org.apache.commons.lang3.reflect.MemberUtils$Executable,Class,"*  A class providing a subset of the API of java.lang.reflect.Executable in Java 1.8,\n     * providing a common representation for function signatures for Constructors and Methods.","private , static , final ",,
org.apache.commons.lang3.reflect.TypeLiteral,Abstract Class,"* Type literal comparable to {@code javax.enterprise.util.TypeLiteral},\n * made generally available outside the JEE context. Allows the passing around of\n * a ""token"" that represents a type in a typesafe manner, as opposed to\n * passing the (non-parameterized) {@link Type} object itself. Consider:\n * <p>\n * You might see such a typesafe API as:\n * <pre>{@code\n * class Typesafe {\n *   <T> T obtain(Class<T> type, ...);\n * }\n * }\n * </pre>\n * Consumed in the manner of:\n * <pre>\n * Foo foo = typesafe.obtain(Foo.class, ...);\n * </pre>\n * Yet, you run into problems when you want to do this with a parameterized type:\n * <pre>{@code\n * List<String> listOfString = typesafe.obtain(List.class, ...); // could only give us a raw List\n * }</pre>\n * {@link java.lang.reflect.Type} might provide some value:\n * <pre>{@code\n * Type listOfStringType = ...; // firstly, how to obtain this? Doable, but not straightforward.\n * List<String> listOfString = (List<String>) typesafe.obtain(listOfStringType, ...); // nongeneric Type would necessitate a cast\n * }</pre>\n * The ""type literal"" concept was introduced to provide an alternative, i.e.:\n * <pre>{@code\n * class Typesafe {\n *   <T> T obtain(TypeLiteral<T> type, ...);\n * }\n * }</pre>\n * Consuming code looks like:\n * <pre>{@code\n * List<String> listOfString = typesafe.obtain(new TypeLiteral<List<String>>() {}, ...);\n * }</pre>\n * <p>\n * This has the effect of ""jumping up"" a level to tie a {@link java.lang.reflect.Type}\n * to a type variable while simultaneously making it short work to obtain a\n * {@link Type} instance for any given type, inline.\n * </p>\n * <p>Additionally {@link TypeLiteral} implements the {@link Typed} interface which\n * is a generalization of this concept, and which may be implemented in custom classes.\n * It is suggested that APIs be defined in terms of the interface, in the following manner:\n * </p>\n * <pre>{@code\n *   <T> T obtain(Typed<T> typed, ...);\n * }</pre>\n *\n * @param <T> the type\n * @since 3.2","public , abstract ",,org.apache.commons.lang3.reflect.Typed
org.apache.commons.lang3.reflect.ConstructorUtils,Class,"*  Utility reflection methods focused on constructors, modeled after\n * {@link MethodUtils}.\n *\n * <h2>Known Limitations</h2>\n * <h3>Accessing Public Constructors In A Default Access Superclass</h3>\n * <p>There is an issue when invoking {@code public} constructors\n * contained in a default access superclass. Reflection correctly locates these\n * constructors and assigns them as {@code public}. However, an\n * {@link IllegalAccessException} is thrown if the constructor is\n * invoked.</p>\n *\n * <p>{@link ConstructorUtils} contains a workaround for this situation: it\n * will attempt to call {@link java.lang.reflect.AccessibleObject#setAccessible(boolean)} on this constructor. If this\n * call succeeds, then the method can be invoked as normal. This call will only\n * succeed when the application has sufficient security privileges. If this call\n * fails then a warning will be logged and the method may fail.</p>\n *\n * @since 2.5",public ,,
org.apache.commons.lang3.reflect.FieldUtils,Class,* Utilities for working with {@link Field}s by reflection. Adapted and refactored from the dormant [reflect] Commons\n * sandbox component.\n * <p>\n * The ability is provided to break the scoping restrictions coded by the programmer. This can allow fields to be\n * changed that shouldn't be. This facility should be used with care.\n * </p>\n * @since 2.5,public ,,
org.apache.commons.lang3.ArraySorter,Class,"* Sorts and returns arrays in the fluent style.\n *\n * TODO For 4.0, rename to ArraySort, since we cover the sort() method here, see also ArrayFill.\n * @since 3.12.0",public ,,
org.apache.commons.lang3.NotImplementedException,Class,"* Thrown to indicate that a block of code has not been implemented.\n * This exception supplements {@link UnsupportedOperationException}\n * by providing a more semantically rich description of the problem.\n *\n * <p>{@link NotImplementedException} represents the case where the\n * author has yet to implement the logic at this point in the program.\n * This can act as an exception based TODO tag.</p>\n *\n * <pre>\n * public void foo() {\n *   try {\n *     // do something that throws an Exception\n *   } catch (Exception ex) {\n *     // don't know what to do here yet\n *     throw new NotImplementedException(""TODO"", ex);\n *   }\n * }\n * </pre>\n *\n * This class was originally added in Lang 2.0, but removed in 3.0.\n *\n * @since 3.2",public ,java.lang.UnsupportedOperationException,
org.apache.commons.lang3.RandomStringUtils,Class,"* Generates random {@link String}s.\n * <p>\n * Use {@link #secure()} to get the singleton instance based on {@link SecureRandom#SecureRandom()} which uses a secure random number generator implementing the\n * default random number algorithm.\n * </p>\n * <p>\n * Use {@link #secureStrong()} to get the singleton instance based on {@link SecureRandom#getInstanceStrong()} which uses an instance that was selected by using\n * the algorithms/providers specified in the {@code securerandom.strongAlgorithms} {@link Security} property.\n * </p>\n * <p>\n * Use {@link #insecure()} to get the singleton instance based on {@link ThreadLocalRandom#current()} <strong>which is not cryptographically secure</strong>. In addition,\n * instances do not use a cryptographically random seed unless the {@linkplain System#getProperty system property} {@code java.util.secureRandomSeed} is set to\n * {@code true}.\n * </p>\n * <p>\n * Starting in version 3.17.0, the method {@link #secure()} uses {@link SecureRandom#SecureRandom()} instead of {@link SecureRandom#getInstanceStrong()}, and\n * adds {@link #secureStrong()}.\n * </p>\n * <p>\n * Starting in version 3.16.0, this class uses {@link #secure()} for static methods and adds {@link #insecure()}.\n * </p>\n * <p>\n * Starting in version 3.15.0, this class uses {@link SecureRandom#getInstanceStrong()} for static methods.\n * </p>\n * <p>\n * Before version 3.15.0, this class used {@link ThreadLocalRandom#current()} for static methods, which is not cryptographically secure.\n * </p>\n * <p>\n * RandomStringUtils is intended for simple use cases. For more advanced use cases consider using Apache Commons Text's\n * <a href= ""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/RandomStringGenerator.html""> RandomStringGenerator</a>\n * instead.\n * </p>\n * <p>\n * The Apache Commons project provides <a href=""https://commons.apache.org/proper/commons-rng/"">Commons RNG</a> dedicated to pseudo-random number generation,\n * that may be a better choice for applications with more stringent requirements (performance and/or correctness).\n * </p>\n * <p>\n * Note that <em>private high surrogate</em> characters are ignored. These are Unicode characters that fall between the values 56192 (db80) and 56319 (dbff) as\n * we don't know how to handle them. High and low surrogates are correctly dealt with - that is if a high surrogate is randomly chosen, 55296 (d800) to 56191\n * (db7f) then it is followed by a low surrogate. If a low surrogate is chosen, 56320 (dc00) to 57343 (dfff) then it is placed after a randomly chosen high\n * surrogate.\n * </p>\n * <p>\n * #ThreadSafe#\n * </p>\n *\n * @see #secure()\n * @see #secureStrong()\n * @see #insecure()\n * @see SecureRandom#SecureRandom()\n * @see SecureRandom#getInstanceStrong()\n * @see ThreadLocalRandom#current()\n * @see RandomUtils\n * @since 1.0",public ,,
org.apache.commons.lang3.function.FailableBooleanSupplier,Interface,* A functional interface like {@link BooleanSupplier} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableRunnable,Interface,* A functional interface like {@link Runnable} that declares a kind of {@link Throwable}.\n *\n * @param <E> The kind of {@link Throwable}.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableIntSupplier,Interface,* A functional interface like {@link IntSupplier} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableBiConsumer,Interface,* A functional interface like {@link BiConsumer} that declares a {@link Throwable}.\n *\n * @param <T> Consumed type 1.\n * @param <U> Consumed type 2.\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableIntToDoubleFunction,Interface,* A functional interface like {@link IntToDoubleFunction} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.Suppliers,Class,* Helps use {@link Supplier}.\n *\n * @since 3.13.0,public ,,
org.apache.commons.lang3.function.FailableLongUnaryOperator,Interface,* A functional interface like {@link LongUnaryOperator} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.Functions,Class,* Factory for {@link Function}.\n *\n * @since 3.14.0,"public , final ",,
org.apache.commons.lang3.function.FailableObjIntConsumer,Interface,* A functional interface like {@link ObjIntConsumer} that declares a {@link Throwable}.\n *\n * @param <T> the type of the object argument to the operation.\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableObjLongConsumer,Interface,* A functional interface like {@link ObjLongConsumer} that declares a {@link Throwable}.\n *\n * @param <T> the type of the object argument to the operation.\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableToLongBiFunction,Interface,* A functional interface like {@link ToLongBiFunction} that declares a {@link Throwable}.\n *\n * @param <T> the type of the first argument to the function\n * @param <U> the type of the second argument to the function\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableDoubleSupplier,Interface,* A functional interface like {@link DoubleSupplier} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableBiPredicate,Interface,* A functional interface like {@link BiPredicate} that declares a {@link Throwable}.\n *\n * @param <T> Predicate type 1.\n * @param <U> Predicate type 2.\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableDoubleToLongFunction,Interface,* A functional interface like {@link DoubleToLongFunction} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableIntPredicate,Interface,* A functional interface like {@link IntPredicate} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableConsumer,Interface,* A functional interface like {@link Consumer} that declares a {@link Throwable}.\n *\n * <p>\n * This is a functional interface whose functional method is {@link #accept(Object)}.\n * </p>\n *\n * @param <T> the type of the input to the operation\n * @param <E> Thrown exception type.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableDoubleUnaryOperator,Interface,* A functional interface like {@link DoubleUnaryOperator} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableFunction,Interface,* A functional interface like {@link Function} that declares a {@link Throwable}.\n *\n * @param <T> Input type 1.\n * @param <R> Return type.\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableIntUnaryOperator,Interface,* A functional interface like {@link IntUnaryOperator} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableDoubleBinaryOperator,Interface,* A functional interface like {@link DoubleBinaryOperator} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableLongSupplier,Interface,* A functional interface like {@link LongSupplier} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableBiFunction,Interface,* A functional interface like {@link BiFunction} that declares a {@link Throwable}.\n *\n * @param <T> Input type 1.\n * @param <U> Input type 2.\n * @param <R> Return type.\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableToIntBiFunction,Interface,* A functional interface like {@link ToIntBiFunction} that declares a {@link Throwable}.\n *\n * @param <T> the type of the first argument to the function\n * @param <U> the type of the second argument to the function\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailablePredicate,Interface,* A functional interface like {@link Predicate} that declares a {@link Throwable}.\n *\n * @param <T> Predicate type.\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.TriFunction,Interface,"* Represents a function that accepts three arguments and produces a result. This is the three-arity specialization of\n * {@link Function}.\n *\n * <p>\n * This is a <a href=""package-summary.html"">functional interface</a> whose functional method is\n * {@link #apply(Object, Object, Object)}.\n * </p>\n *\n * @param <T> the type of the first argument to the function\n * @param <U> the type of the second argument to the function\n * @param <V> the type of the third argument to the function\n * @param <R> the type of the result of the function\n * @see Function\n * @since 3.12.0",public ,,
org.apache.commons.lang3.function.FailableLongBinaryOperator,Interface,* A functional interface like {@link LongBinaryOperator} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.IntToCharFunction,Interface,"* Represents a function that accepts an int-valued argument and produces a char-valued result. This is the {@code int}-to-{@code char} primitive specialization\n * for {@link Function}.\n *\n * <p>\n * This is a <a href=""package-summary.html"">functional interface</a> whose functional method is {@link #applyAsChar(int)}.\n * </p>\n *\n * @see Function\n * @since 3.13.0",public ,,
org.apache.commons.lang3.function.FailableDoubleFunction,Interface,* A functional interface like {@link DoubleFunction} that declares a {@link Throwable}.\n *\n * @param <R> Return type.\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableIntToLongFunction,Interface,* A functional interface like {@link IntToLongFunction} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableObjDoubleConsumer,Interface,* A functional interface like {@link ObjDoubleConsumer} that declares a {@link Throwable}.\n *\n * @param <T> the type of the object argument to the operation.\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.ToBooleanBiFunction,Interface,* A function that accepts two arguments and produces a boolean result. This is the {@code boolean}-producing primitive\n * specialization for {@link BiFunction}.\n *\n * @param <T> the type of the first argument to the function.\n * @param <U> the type of the second argument to the function.\n * @see BiFunction\n * @since 3.12.0,public ,,
org.apache.commons.lang3.function.FailableLongConsumer,Interface,* A functional interface like {@link LongConsumer} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableToDoubleBiFunction,Interface,* A functional interface like {@link ToDoubleBiFunction} that declares a {@link Throwable}.\n *\n * @param <T> the type of the first argument to the function\n * @param <U> the type of the second argument to the function\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableLongToIntFunction,Interface,* A functional interface like {@link LongToIntFunction} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.BooleanConsumer,Interface,* A functional interface like {@link IntConsumer} but for {@code boolean}.\n *\n * @see IntConsumer\n * @since 3.13.0,public ,,
org.apache.commons.lang3.function.FailableIntFunction,Interface,* A functional interface like {@link IntFunction} that declares a {@link Throwable}.\n *\n * @param <R> Return type.\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableLongPredicate,Interface,* A functional interface like {@link LongPredicate} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableCallable,Interface,* A functional interface like {@link java.util.concurrent.Callable} that declares a {@link Throwable}.\n *\n * @param <R> Return type.\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.Predicates,Class,* Factory for {@link Predicate}.\n *\n * @since 3.18.0,public ,,
org.apache.commons.lang3.function.MethodInvokers,Class,"* Converts {@link Method} objects to lambdas.\n * <p>\n * More specifically, produces instances of single-method interfaces which redirect calls to methods; see\n * {@link #asInterfaceInstance(Class, Method)}.\n * </p>\n * <h2>Calling supplier methods with no arguments</h2>\n * <p>\n * If the interface's single-method defines no arguments, use {@link #asFunction(Method)} and then apply the function\n * passing in the object to receive the method call.\n * </p>\n * <p>\n * For example to invoke {@link String#length()}:\n * </p>\n *\n * <pre>{@code\n * final Method method = String.class.getMethod(""length"");\n * final Function<String, Integer> function = MethodInvokers.asFunction(method);\n * assertEquals(3, function.apply(""ABC""));\n * }</pre>\n *\n * <h2>Calling function methods with one argument</h2>\n * <p>\n * If the interface's single-method defines one argument, use {@link #asBiFunction(Method)} and then apply the function\n * passing in the object to receive the method call. The second argument to the function is the only argument to the\n * method.\n * </p>\n * <p>\n * For example to invoke {@link String#charAt(int)}:\n * </p>\n *\n * <pre>{@code\n * final Method method = String.class.getMethod(""charAt"", int.class);\n * final BiFunction<String, Integer, Character> function = MethodInvokers.asBiFunction(method);\n * assertEquals('C', function.apply(""ABC"", 2));\n * }</pre>\n *\n * @since 3.13.0","public , final ",,
org.apache.commons.lang3.function.FailableIntBinaryOperator,Interface,* A functional interface like {@link IntBinaryOperator} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableToDoubleFunction,Interface,* A functional interface like {@link ToDoubleFunction} that declares a {@link Throwable}.\n *\n * @param <T> the type of the argument to the function\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableLongFunction,Interface,* A functional interface like {@link LongFunction} that declares a {@link Throwable}.\n *\n * @param <R> Return type.\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableLongToDoubleFunction,Interface,* A functional interface like {@link LongToDoubleFunction} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.Failable,Class,"* This class provides utility functions, and classes for working with the {@code java.util.function} package, or more\n * generally, with Java 8 lambdas. More specifically, it attempts to address the fact that lambdas are supposed not to\n * throw Exceptions, at least not checked Exceptions, AKA instances of {@link Exception}. This enforces the use of\n * constructs like:\n *\n * <pre>{@code\n * Consumer<java.lang.reflect.Method> consumer = m -&gt; {\n *     try {\n *         m.invoke(o, args);\n *     } catch (Throwable t) {\n *         throw Failable.rethrow(t);\n *     }\n * };\n * }\n * </pre>\n *\n * <p>\n * By replacing a {@link java.util.function.Consumer Consumer&lt;O&gt;} with a {@link FailableConsumer\n * FailableConsumer&lt;O,? extends Throwable&gt;}, this can be written like follows:\n * </p>\n *\n * <pre>\n * Functions.accept((m) -&gt; m.invoke(o, args));\n * </pre>\n *\n * <p>\n * Obviously, the second version is much more concise and the spirit of Lambda expressions is met better than the second\n * version.\n * </p>\n *\n * @since 3.11",public ,,
org.apache.commons.lang3.function.FailableToLongFunction,Interface,* A functional interface like {@link ToLongFunction} that declares a {@link Throwable}.\n *\n * @param <T> the type of the first argument to the function\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableIntConsumer,Interface,* A functional interface like {@link IntConsumer} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableIntToFloatFunction,Interface,* A functional interface like {@link IntToDoubleFunction} but for {@code float} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.18.0,public ,,
org.apache.commons.lang3.function.FailableToIntFunction,Interface,* A functional interface like {@link ToIntFunction} that declares a {@link Throwable}.\n *\n * @param <T> the type of the argument to the function\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableDoubleToIntFunction,Interface,* A functional interface like {@link DoubleToIntFunction} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.TriConsumer,Interface,"* Represents an operation that accepts three input arguments and returns no result. This is the three-arity\n * specialization of {@link Consumer}. Unlike most other functional interfaces, {@link TriConsumer} is expected to\n * operate via side effects.\n *\n * <p>\n * This is a {@link FunctionalInterface} whose functional method is {@link #accept(Object, Object, Object)}.\n * </p>\n * <p>\n * Provenance: Apache Log4j 2.7\n * </p>\n *\n * @param <T> type of the first argument\n * @param <U> type of the second argument\n * @param <V> type of the third argument\n * @since 3.13.0",public ,,
org.apache.commons.lang3.function.FailableShortSupplier,Interface,* A functional interface like {@link IntSupplier} but for {@code short} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.12.0,public ,,
org.apache.commons.lang3.function.Consumers,Class,* Provides {@link Consumer} instances.\n *\n * @since 3.13.0,public ,,
org.apache.commons.lang3.function.FailableSupplier,Interface,* A functional interface like {@link Supplier} that declares a {@link Throwable}.\n *\n * @param <T> The type of results supplied by this supplier.\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableDoubleConsumer,Interface,* A functional interface like {@link DoubleConsumer} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableDoublePredicate,Interface,* A functional interface like {@link DoublePredicate} that declares a {@link Throwable}.\n *\n * @param <E> The kind of thrown exception or error.\n * @since 3.11,public ,,
org.apache.commons.lang3.function.FailableToBooleanFunction,Interface,* A functional interface like a {@code ToBooleanFunction} that declares a {@link Throwable}.\n *\n * @param <T> the type of the argument to the function\n * @param <E> The kind of thrown exception or error.\n * @since 3.18,public ,,
org.apache.commons.lang3.LongRange,Class,* Specializes {@link NumberRange} for {@link Long}s.\n *\n * <p>\n * This class is not designed to interoperate with other NumberRanges\n * </p>\n *\n * @since 3.13.0,"public , final ",org.apache.commons.lang3.NumberRange,
org.apache.commons.lang3.AppendableJoiner,Class,"* Joins an array or {@link Iterable} into an existing {@link Appendable} like a {@link StringBuilder}; with the goal for call sites to avoid creating\n * intermediary Strings. This is like {@link String#join(CharSequence, CharSequence...)}, {@link String#join(CharSequence, Iterable)}, and {@link StringJoiner}.\n * <p>\n * Keep an instance in a (static) variable for efficient joining into an {@link Appendable} or {@link StringBuilder} without creating temporary Strings.\n * </p>\n * <p>\n * Use the builder and instance methods to reuse the same kind of joining prefix, suffix, delimiter, and string conversion.\n * </p>\n * <p>\n * For example:\n * </p>\n *\n * <pre>{@code\n * // A reuseable instance\n * private static final AppendableJoiner<Object> JOINER = AppendableJoiner.builder()\n *     .setPrefix(""["")\n *     .setSuffix(""]"")\n *     .setDelimiter("", "")\n *     .get();\n * }\n * ...\n * // Builds straight into a StringBuilder:\n * StringBuilder sbuilder = new StringBuilder(""1"");\n * JOINER.join(sbuilder, ""A"", ""B"");\n * sbuilder.append(""2"");\n * JOINER.join(sbuilder, ""C"", ""D"");\n * sbuilder.append(""3"");\n * // Returns ""1[A, B]2[C, D]3""\n * return sbuilder.toString();\n * }</pre>\n * <p>\n * To provide a custom Object element to {@link CharSequence} converter, call {@link Builder#setElementAppender(FailableBiConsumer)}, for example:\n * </p>\n *\n * <pre>{@code\n * private static final AppendableJoiner<Item> JOINER = AppendableJoiner.builder()\n *     .setElementAppender(e -> (a, e) -> a.append(e.getFoo())\n *                                        a.append(e.getBar())\n *                                        a.append('!'))\n *     ...\n *     .get();\n * }\n * }</pre>\n * <p>\n * This class is immutable and thread-safe.\n * </p>\n *\n * @param <T> the type of elements to join.\n * @see Appendable\n * @see StringBuilder\n * @see String#join(CharSequence, CharSequence...)\n * @see String#join(CharSequence, Iterable)\n * @see StringJoiner\n * @since 3.15.0","public , final ",,
org.apache.commons.lang3.AppendableJoiner$Builder,Class,* Builds instances of {@link AppendableJoiner}.\n     *\n     * @param <T> the type of elements to join.,"public , static , final ",,java.util.function.Supplier
org.apache.commons.lang3.math.Fraction,Class,"* {@link Fraction} is a {@link Number} implementation that\n * stores fractions accurately.\n *\n * <p>This class is immutable, and interoperable with most methods that accept\n * a {@link Number}.</p>\n *\n * <p>Note that this class is intended for common use cases, it is <em>int</em>\n * based and thus suffers from various overflow issues. For a BigInteger based\n * equivalent, please see the Commons Math BigFraction class.</p>\n *\n * @since 2.0","public , final ",java.lang.Number,java.lang.Comparable
org.apache.commons.lang3.math.NumberUtils,Class,* Provides extra functionality for Java Number classes.\n *\n * @since 2.0,public ,,
org.apache.commons.lang3.math.IEEE754rUtils,Class,"* Provides IEEE-754r variants of NumberUtils methods.\n *\n * <p>See: <a href=""https://en.wikipedia.org/wiki/IEEE_754r"">https://en.wikipedia.org/wiki/IEEE_754r</a></p>\n *\n * @since 2.4",public ,,
org.apache.commons.lang3.time.FastDateParser,Class,"* FastDateParser is a fast and thread-safe version of {@link java.text.SimpleDateFormat}.\n *\n * <p>\n * To obtain a proxy to a FastDateParser, use {@link FastDateFormat#getInstance(String, TimeZone, Locale)} or another variation of the factory methods of\n * {@link FastDateFormat}.\n * </p>\n *\n * <p>\n * Since FastDateParser is thread safe, you can use a static member instance:\n * </p>\n * {@code\n *     private static final DateParser DATE_PARSER = FastDateFormat.getInstance(""yyyy-MM-dd"");\n * }\n *\n * <p>\n * This class can be used as a direct replacement for {@link SimpleDateFormat} in most parsing situations. This class is especially useful in multi-threaded\n * server environments. {@link SimpleDateFormat} is not thread-safe in any JDK version, nor will it be as Sun has closed the\n * <a href=""https://bugs.openjdk.org/browse/JDK-4228335"">bug</a>/RFE.\n * </p>\n *\n * <p>\n * Only parsing is supported by this class, but all patterns are compatible with SimpleDateFormat.\n * </p>\n *\n * <p>\n * The class operates in lenient mode, so for example a time of 90 minutes is treated as 1 hour 30 minutes.\n * </p>\n *\n * <p>\n * Timing tests indicate this class is as about as fast as SimpleDateFormat in single thread applications and about 25% faster in multi-thread applications.\n * </p>\n *\n * @since 3.2\n * @see FastDatePrinter",public ,,org.apache.commons.lang3.time.DateParser;java.io.Serializable
org.apache.commons.lang3.time.FastDateParser$CaseInsensitiveTextStrategy,Class,* A strategy that handles a text field in the parsing pattern,"private , static , final ",org.apache.commons.lang3.time.FastDateParser.PatternStrategy,
org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy,Class,* A strategy that copies the static or quoted field in the parsing pattern,"private , static , final ",org.apache.commons.lang3.time.FastDateParser.Strategy,
org.apache.commons.lang3.time.FastDateParser$ISO8601TimeZoneStrategy,Class,No Comment,"private , static , final ",org.apache.commons.lang3.time.FastDateParser.PatternStrategy,
org.apache.commons.lang3.time.FastDateParser$NumberStrategy,Class,* A strategy that handles a number field in the parsing pattern,"private , static ",org.apache.commons.lang3.time.FastDateParser.Strategy,
org.apache.commons.lang3.time.FastDateParser$StrategyAndWidth,Class,* Holds strategy and field width,"private , static , final ",,
org.apache.commons.lang3.time.FastDateParser$StrategyParser,Class,* Parse format into Strategies,"private , final ",,
org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy,Class,* A strategy that handles a time zone field in the parsing pattern,static ,org.apache.commons.lang3.time.FastDateParser.PatternStrategy,
org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy$TzInfo,Class,No Comment,"private , static , final ",,
org.apache.commons.lang3.time.FastDateParser$PatternStrategy,Abstract Class,* A strategy to parse a single field from the parsing pattern,"private , abstract , static ",org.apache.commons.lang3.time.FastDateParser.Strategy,
org.apache.commons.lang3.time.FastDateParser$Strategy,Abstract Class,* A strategy to parse a single field from the parsing pattern,"private , abstract , static ",,
org.apache.commons.lang3.time.FastDateParser$TimeZoneStrategy.TzInfo,Class,No Comment,"private , static , final ",,
org.apache.commons.lang3.time.FastDateFormat,Class,"* FastDateFormat is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.\n *\n * <p>To obtain an instance of FastDateFormat, use one of the static factory methods:\n * {@link #getInstance(String, TimeZone, Locale)}, {@link #getDateInstance(int, TimeZone, Locale)},\n * {@link #getTimeInstance(int, TimeZone, Locale)}, or {@link #getDateTimeInstance(int, int, TimeZone, Locale)}\n * </p>\n *\n * <p>Since FastDateFormat is thread safe, you can use a static member instance:</p>\n * {@code\n *   private static final FastDateFormat DATE_FORMATTER = FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.SHORT);\n * }\n *\n * <p>This class can be used as a direct replacement to\n * {@link SimpleDateFormat} in most formatting and parsing situations.\n * This class is especially useful in multi-threaded server environments.\n * {@link SimpleDateFormat} is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>All patterns are compatible with\n * SimpleDateFormat (except time zones and some year patterns - see below).</p>\n *\n * <p>Since 3.2, FastDateFormat supports parsing as well as printing.</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, {@code 'Z'}, to represent\n * time zones in RFC822 format (eg. {@code +0800} or {@code -1100}).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern {@code 'ZZ'} has been made to represent\n * ISO 8601 extended format time zones (eg. {@code +08:00} or {@code -11:00}).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * <p>Javadoc cites for the year pattern: <i>For formatting, if the number of\n * pattern letters is 2, the year is truncated to 2 digits; otherwise it is\n * interpreted as a number.</i> Starting with Java 1.7 a pattern of 'Y' or\n * 'YYY' will be formatted as '2003', while it was '03' in former Java\n * versions. FastDateFormat implements the behavior of Java 7.</p>\n *\n * @since 2.0",public ,java.text.Format,org.apache.commons.lang3.time.DateParser;org.apache.commons.lang3.time.DatePrinter
org.apache.commons.lang3.time.StopWatch,Class,"* {@link StopWatch} provides a convenient API for timings.\n *\n * <p>\n * To start the watch, call {@link #start()} or {@link StopWatch#createStarted()}. At this point you can:\n * </p>\n * <ul>\n * <li>{@link #split()} the watch to get the time whilst the watch continues in the background. {@link #unsplit()} will remove the effect of the split. At this\n * point, these three options are available again.</li>\n * <li>{@link #suspend()} the watch to pause it. {@link #resume()} allows the watch to continue. Any time between the suspend and resume will not be counted in\n * the total. At this point, these three options are available again.</li>\n * <li>{@link #stop()} the watch to complete the timing session.</li>\n * </ul>\n *\n * <p>\n * It is intended that the output methods {@link #toString()} and {@link #getTime()} should only be called after stop, split or suspend, however a suitable\n * result will be returned at other points.\n * </p>\n *\n * <p>\n * NOTE: As from v2.1, the methods protect against inappropriate calls. Thus you cannot now call stop before start, resume before suspend or unsplit before\n * split.\n * </p>\n *\n * <ol>\n * <li>{@link #split()}, {@link #suspend()}, or {@link #stop()} cannot be invoked twice</li>\n * <li>{@link #unsplit()} may only be called if the watch has been {@link #split()}</li>\n * <li>{@link #resume()} may only be called if the watch has been {@link #suspend()}</li>\n * <li>{@link #start()} cannot be called twice without calling {@link #reset()}</li>\n * </ol>\n *\n * <p>\n * This class is not thread-safe\n * </p>\n *\n * @see DurationUtils#of(FailableRunnable)\n * @see DurationUtils#of(FailableConsumer)\n * @since 2.0",public ,,
org.apache.commons.lang3.time.StopWatch$SplitState,Enum,* Enumeration type which indicates the split status of a StopWatch.,private ,enum has no extends,
org.apache.commons.lang3.time.StopWatch$State,Enum,* Enumeration type which indicates the status of a StopWatch.,private ,enum has no extends,
org.apache.commons.lang3.time.GmtTimeZone,Class,* Custom time zone that contains offset from GMT.\n *\n * @since 3.7,final ,java.util.TimeZone,
org.apache.commons.lang3.time.TimeZones,Class,* Helps to deal with {@link java.util.TimeZone}s.\n *\n * @since 3.7,public ,,
org.apache.commons.lang3.time.DateParser,Interface,"* DateParser is the ""missing"" interface for the parsing methods of\n * {@link java.text.DateFormat}. You can obtain an object implementing this\n * interface by using one of the FastDateFormat factory methods.\n * <p>\n * Warning: Since binary compatible methods may be added to this interface in any\n * release, developers are not expected to implement this interface.\n *\n * @since 3.2",public ,,
org.apache.commons.lang3.time.CalendarUtils,Class,* Helps use {@link Calendar}s.\n *\n * @since 3.10,public ,,
org.apache.commons.lang3.time.DurationUtils,Class,* Utilities for {@link Duration}.\n *\n * @since 3.12.0,public ,,
org.apache.commons.lang3.time.DateUtils,Class,"* A suite of utilities surrounding the use of the\n * {@link java.util.Calendar} and {@link java.util.Date} object.\n *\n * <p>DateUtils contains a lot of common methods considering manipulations\n * of Dates or Calendars. Some methods require some extra explanation.\n * The truncate, ceiling and round methods could be considered the Math.floor(),\n * Math.ceil() or Math.round versions for dates\n * This way date-fields will be ignored in bottom-up order.\n * As a complement to these methods we've introduced some fragment-methods.\n * With these methods the Date-fields will be ignored in top-down order.\n * Since a date without a year is not a valid date, you have to decide in what\n * kind of date-field you want your result, for instance milliseconds or days.\n * </p>\n * <p>\n * Several methods are provided for adding to {@link Date} objects, of the form\n * {@code addXXX(Date date, int amount)}. It is important to note these methods\n * use a {@link Calendar} internally (with default time zone and locale) and may\n * be affected by changes to daylight saving time (DST).\n * </p>\n *\n * @since 2.0",public ,,
org.apache.commons.lang3.time.DateUtils$DateIterator,Class,* Date iterator.,static ,,java.util.Iterator
org.apache.commons.lang3.time.DateUtils$ModifyType,Enum,* Calendar modification types.,private ,enum has no extends,
org.apache.commons.lang3.time.FastDatePrinter,Class,"* FastDatePrinter is a fast and thread-safe version of\n * {@link java.text.SimpleDateFormat}.\n *\n * <p>To obtain a FastDatePrinter, use {@link FastDateFormat#getInstance(String, TimeZone, Locale)}\n * or another variation of the factory methods of {@link FastDateFormat}.</p>\n *\n * <p>Since FastDatePrinter is thread safe, you can use a static member instance:</p>\n * {@code\n *     private static final DatePrinter DATE_PRINTER = FastDateFormat.getInstance(""yyyy-MM-dd"");\n * }\n *\n * <p>This class can be used as a direct replacement to\n * {@link SimpleDateFormat} in most formatting situations.\n * This class is especially useful in multi-threaded server environments.\n * {@link SimpleDateFormat} is not thread-safe in any JDK version,\n * nor will it be as Sun have closed the bug/RFE.\n * </p>\n *\n * <p>Only formatting is supported by this class, but all patterns are compatible with\n * SimpleDateFormat (except time zones and some year patterns - see below).</p>\n *\n * <p>Java 1.4 introduced a new pattern letter, {@code 'Z'}, to represent\n * time zones in RFC822 format (eg. {@code +0800} or {@code -1100}).\n * This pattern letter can be used here (on all JDK versions).</p>\n *\n * <p>In addition, the pattern {@code 'ZZ'} has been made to represent\n * ISO 8601 extended format time zones (eg. {@code +08:00} or {@code -11:00}).\n * This introduces a minor incompatibility with Java 1.4, but at a gain of\n * useful functionality.</p>\n *\n * <p>Starting with JDK7, ISO 8601 support was added using the pattern {@code 'X'}.\n * To maintain compatibility, {@code 'ZZ'} will continue to be supported, but using\n * one of the {@code 'X'} formats is recommended.\n *\n * <p>Javadoc cites for the year pattern: <i>For formatting, if the number of\n * pattern letters is 2, the year is truncated to 2 digits; otherwise it is\n * interpreted as a number.</i> Starting with Java 1.7 a pattern of 'Y' or\n * 'YYY' will be formatted as '2003', while it was '03' in former Java\n * versions. FastDatePrinter implements the behavior of Java 7.</p>\n *\n * @since 3.2\n * @see FastDateParser",public ,,org.apache.commons.lang3.time.DatePrinter;java.io.Serializable
org.apache.commons.lang3.time.FastDatePrinter$CharacterLiteral,Class,* Inner class to output a constant single character.,"private , static ",,org.apache.commons.lang3.time.FastDatePrinter.Rule
org.apache.commons.lang3.time.FastDatePrinter$DayInWeekField,Class,* Inner class to output the numeric day in week.,"private , static ",,org.apache.commons.lang3.time.FastDatePrinter.NumberRule
org.apache.commons.lang3.time.FastDatePrinter$Iso8601_Rule,Class,* Inner class to output a time zone as a number {@code +/-HHMM}\n     * or {@code +/-HH:MM}.,"private , static ",,org.apache.commons.lang3.time.FastDatePrinter.Rule
org.apache.commons.lang3.time.FastDatePrinter$NumberRule,Interface,* Inner class defining a numeric rule.,private ,org.apache.commons.lang3.time.FastDatePrinter.Rule,
org.apache.commons.lang3.time.FastDatePrinter$PaddedNumberField,Class,* Inner class to output a padded number.,"private , static , final ",,org.apache.commons.lang3.time.FastDatePrinter.NumberRule
org.apache.commons.lang3.time.FastDatePrinter$Rule,Interface,* Inner class defining a rule.,private ,,
org.apache.commons.lang3.time.FastDatePrinter$StringLiteral,Class,* Inner class to output a constant string.,"private , static ",,org.apache.commons.lang3.time.FastDatePrinter.Rule
org.apache.commons.lang3.time.FastDatePrinter$TextField,Class,* Inner class to output one of a set of values.,"private , static ",,org.apache.commons.lang3.time.FastDatePrinter.Rule
org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey,Class,* Inner class that acts as a compound key for time zone names.,"private , static ",,
org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule,Class,* Inner class to output a time zone name.,"private , static ",,org.apache.commons.lang3.time.FastDatePrinter.Rule
org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNumberRule,Class,* Inner class to output a time zone as a number {@code +/-HHMM}\n     * or {@code +/-HH:MM}.,"private , static ",,org.apache.commons.lang3.time.FastDatePrinter.Rule
org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField,Class,* Inner class to output the twelve hour field.,"private , static ",,org.apache.commons.lang3.time.FastDatePrinter.NumberRule
org.apache.commons.lang3.time.FastDatePrinter$TwentyFourHourField,Class,* Inner class to output the twenty four hour field.,"private , static ",,org.apache.commons.lang3.time.FastDatePrinter.NumberRule
org.apache.commons.lang3.time.FastDatePrinter$TwoDigitMonthField,Class,* Inner class to output a two digit month.,"private , static ",,org.apache.commons.lang3.time.FastDatePrinter.NumberRule
org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField,Class,* Inner class to output a two digit number.,"private , static ",,org.apache.commons.lang3.time.FastDatePrinter.NumberRule
org.apache.commons.lang3.time.FastDatePrinter$TwoDigitYearField,Class,* Inner class to output a two digit year.,"private , static ",,org.apache.commons.lang3.time.FastDatePrinter.NumberRule
org.apache.commons.lang3.time.FastDatePrinter$UnpaddedMonthField,Class,* Inner class to output an unpadded month.,"private , static ",,org.apache.commons.lang3.time.FastDatePrinter.NumberRule
org.apache.commons.lang3.time.FastDatePrinter$UnpaddedNumberField,Class,* Inner class to output an unpadded number.,"private , static ",,org.apache.commons.lang3.time.FastDatePrinter.NumberRule
org.apache.commons.lang3.time.FastDatePrinter$WeekYear,Class,* Inner class to output the numeric day in week.,"private , static ",,org.apache.commons.lang3.time.FastDatePrinter.NumberRule
org.apache.commons.lang3.time.DatePrinter,Interface,"* DatePrinter is the ""missing"" interface for the format methods of\n * {@link java.text.DateFormat}. You can obtain an object implementing this\n * interface by using one of the FastDateFormat factory methods.\n * <p>\n * Warning: Since binary compatible methods may be added to this interface in any\n * release, developers are not expected to implement this interface.\n *\n * @since 3.2",public ,,
org.apache.commons.lang3.time.FastTimeZone,Class,* Faster methods to produce custom time zones.\n *\n * @since 3.7,public ,,
org.apache.commons.lang3.time.DurationFormatUtils,Class,"* Duration formatting utilities and constants. The following table describes the tokens\n * used in the pattern language for formatting.\n * <table border=""1"">\n *  <caption>Pattern Tokens</caption>\n *  <tr><th>character</th><th>duration element</th></tr>\n *  <tr><td>y</td><td>years</td></tr>\n *  <tr><td>M</td><td>months</td></tr>\n *  <tr><td>d</td><td>days</td></tr>\n *  <tr><td>H</td><td>hours</td></tr>\n *  <tr><td>m</td><td>minutes</td></tr>\n *  <tr><td>s</td><td>seconds</td></tr>\n *  <tr><td>S</td><td>milliseconds</td></tr>\n *  <tr><td>'text'</td><td>arbitrary text content</td></tr>\n * </table>\n *\n * <strong>Note: It's not currently possible to include a single-quote in a format.</strong>\n * <br>\n * Token values are printed using decimal digits.\n * A token character can be repeated to ensure that the field occupies a certain minimum\n * size. Values will be left-padded with 0 unless padding is disabled in the method invocation.\n * <br>\n * Tokens can be marked as optional by surrounding them with brackets [ ]. These tokens will\n * only be printed if the token value is non-zero. Literals within optional blocks will only be\n * printed if the preceding non-literal token is non-zero. Leading optional literals will only\n * be printed if the following non-literal is non-zero.\n * Multiple optional blocks can be used to group literals with the desired token.\n * <p>\n * Notes on Optional Tokens:<br>\n * <strong>Multiple optional tokens without literals can result in impossible to understand output.</strong><br>\n * <strong>Patterns where all tokens are optional can produce empty strings.</strong><br>\n * (See examples below)\n * </p>\n * <br>\n * <table border=""1"">\n * <caption>Example Output</caption>\n * <tr><th>pattern</th><th>Duration.ofDays(1)</th><th>Duration.ofHours(1)</th><th>Duration.ofMinutes(1)</th><th>Duration.ZERO</th></tr>\n * <tr><td>d'd'H'h'm'm's's'</td><td>1d0h0m0s</td><td>0d1h0m0s</td><td>0d0h1m0s</td><td>0d0h0m0s</td></tr>\n * <tr><td>d'd'[H'h'm'm']s's'</td><td>1d0s</td><td>0d1h0s</td><td>0d1m0s</td><td>0d0s</td></tr>\n * <tr><td>[d'd'H'h'm'm']s's'</td><td>1d0s</td><td>1h0s</td><td>1m0s</td><td>0s</td></tr>\n * <tr><td>[d'd'H'h'm'm's's']</td><td>1d</td><td>1h</td><td>1m</td><td></td></tr>\n * <tr><td>['{'d'}']HH':'mm</td><td>{1}00:00</td><td>01:00</td><td>00:01</td><td>00:00</td></tr>\n * <tr><td>['{'dd'}']['&lt;'HH'&gt;']['('mm')']</td><td>{01}</td><td>&lt;01&gt;</td><td>(00)</td><td></td></tr>\n * <tr><td>[dHms]</td><td>1</td><td>1</td><td>1</td><td></td></tr>\n * </table>\n * <strong>Note: Optional blocks cannot be nested.</strong>\n *\n * @since 2.1",public ,,
org.apache.commons.lang3.time.DurationFormatUtils$Token,Class,* Element that is parsed from the format pattern.,static ,,
org.apache.commons.lang3.time.DateFormatUtils,Class,"* Date and time formatting utilities and constants.\n *\n * <p>Formatting is performed using the thread-safe\n * {@link org.apache.commons.lang3.time.FastDateFormat} class.</p>\n *\n * <p>Note that the JDK has a bug wherein calling Calendar.get(int) will\n * override any previously called Calendar.clear() calls. See LANG-755.</p>\n *\n * <p>Note that when using capital YYYY instead of lowercase yyyy, the formatter\n * will assume current year as week year is not supported. See {@link java.util.GregorianCalendar}\n * Week Year section for an explanation on the difference between calendar and week years.</p>\n *\n * @since 2.0",public ,,
org.apache.commons.lang3.time.AbstractFormatCache,Abstract Class,"TODO: Before making public move from getDateTimeInstance(Integer, ...) to int; or some other approach.",abstract ,,
org.apache.commons.lang3.time.AbstractFormatCache$ArrayKey,Class,* Helper class to hold multipart Map keys as arrays.,"private , static , final ",,
org.apache.commons.lang3.ClassLoaderUtils,Class,* Helps work with {@link ClassLoader}.\n *\n * @since 3.10,public ,,
org.apache.commons.lang3.SystemProperties,Class,"* Accesses current system property names and values.\n *\n * @see <a href=""https://docs.oracle.com/en/java/javase/22/docs/api/system-properties.html"">System Properties</a>\n * @since 3.13.0","public , final ",,
org.apache.commons.lang3.IntegerRange,Class,* Specializes {@link NumberRange} for {@link Integer}s.\n *\n * <p>\n * This class is not designed to interoperate with other NumberRanges\n * </p>\n *\n * @since 3.13.0,"public , final ",org.apache.commons.lang3.NumberRange,
org.apache.commons.lang3.CachedRandomBits,Class,"* Generates random integers of specific bit length.\n *\n * <p>\n * It is more efficient than calling Random.nextInt(1 << nbBits). It uses a cache of cacheSize random bytes that it replenishes when it gets empty. This is\n * especially beneficial for SecureRandom Drbg implementations, which incur a constant cost at each randomness generation.\n * </p>\n *\n * <p>\n * Used internally by RandomStringUtils.\n * </p>\n *\n * <p>\n * #NotThreadSafe#\n * </p>",final ,,
org.apache.commons.lang3.CharSequenceUtils,Class,* Operations on {@link CharSequence} that are\n * {@code null} safe.\n *\n * @see CharSequence\n * @since 3.0,public ,,
org.apache.commons.lang3.CharEncoding,Class,"* Character encoding names required of every implementation of the Java platform.\n *\n * <p>According to <a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html"">JRE character\n * encoding names</a>:</p>\n *\n * <p><cite>Every implementation of the Java platform is required to support the following character encodings.\n * Consult the release documentation for your implementation to see if any other encodings are supported.\n * </cite></p>\n *\n * @see <a href=""https://docs.oracle.com/javase/8/docs/technotes/guides/intl/encoding.doc.html"">JRE character encoding names</a>\n * @since 2.1\n * @deprecated Java 7 introduced {@link java.nio.charset.StandardCharsets}, which defines these constants as\n * {@link Charset} objects. Use {@link Charset#name()} to get the string values provided in this class.\n * This class will be removed in a future release.",public ,,
org.apache.commons.lang3.ArchUtils,Class,"* Provides methods for identifying the architecture of the current JVM based on the {@code ""os.arch""} system property.\n * <p>\n * Important: The {@code ""os.arch""} system property returns the architecture used by the JVM not of the operating system.\n * </p>\n *\n * @since 3.6",public ,,
org.apache.commons.lang3.CharUtils,Class,* Operations on char primitives and Character objects.\n *\n * <p>This class tries to handle {@code null} input gracefully.\n * An exception will not be thrown for a {@code null} input.\n * Each method documents its behavior in more detail.</p>\n *\n * <p>#ThreadSafe#</p>\n * @since 2.1,public ,,
org.apache.commons.lang3.SerializationException,Class,* Exception thrown when the Serialization process fails.\n *\n * <p>The original error is wrapped within this one.</p>\n *\n * <p>#NotThreadSafe# because Throwable is not thread-safe</p>\n * @since 1.0,public ,java.lang.RuntimeException,
org.apache.commons.lang3.JavaVersion,Enum,* An enum representing all the versions of the Java specification.\n * This is intended to mirror available values from the\n * <em>java.specification.version</em> System property.\n *\n * @since 3.0,public ,enum has no extends,
org.apache.commons.lang3.arch.Processor,Class,* The {@link Processor} represents a microprocessor and defines\n * some properties like architecture and type of the microprocessor.\n *\n * @since 3.6,public ,,
org.apache.commons.lang3.arch.Processor$Arch,Enum,* The {@link Arch} enum defines the architecture of\n     * a microprocessor. The architecture represents the bit value\n     * of the microprocessor.\n     * The following architectures are defined:\n     * <ul>\n     *     <li>32-bit</li>\n     *     <li>64-bit</li>\n     *     <li>Unknown</li>\n     * </ul>,public ,enum has no extends,
org.apache.commons.lang3.arch.Processor$Type,Enum,* The {@link Type} enum defines types of a microprocessor.\n     * The following types are defined:\n     * <ul>\n     *     <li>AArch64</li>\n     *     <li>x86</li>\n     *     <li>ia64</li>\n     *     <li>PPC</li>\n     *     <li>RISCV</li>\n     *     <li>Unknown</li>\n     * </ul>,public ,enum has no extends,
org.apache.commons.lang3.concurrent.CircuitBreaker,Interface,"* An interface describing a <a\n * href=""https://martinfowler.com/bliki/CircuitBreaker.html"">Circuit Breaker</a> component.\n *\n * <p>\n * A <em>circuit breaker</em> can be used to protect an application against unreliable\n * services or unexpected load. It typically monitors a specific resource. As long as this\n * resource works as expected, it stays in state <em>closed</em>, meaning that the\n * resource can be used. If problems are encountered when using the resource, the circuit\n * breaker can switch into state <em>open</em>; then access to this resource is\n * prohibited. Depending on a concrete implementation, it is possible that the circuit\n * breaker switches back to state <em>closed</em> when the resource becomes available\n * again.\n * </p>\n * <p>\n * This interface defines a generic protocol of a circuit breaker component. It should be\n * sufficiently generic to be applied to multiple different use cases.\n * </p>\n *\n * @param <T> the type of the value monitored by this circuit breaker\n * @since 3.5",public ,,
org.apache.commons.lang3.concurrent.AtomicInitializer,Class,"* A specialized implementation of the {@link ConcurrentInitializer} interface\n * based on an {@link AtomicReference} variable.\n *\n * <p>\n * This class maintains a member field of type {@link AtomicReference}. It\n * implements the following algorithm to create and initialize an object in its\n * {@link #get()} method:\n * </p>\n * <ul>\n * <li>First it is checked whether the {@link AtomicReference} variable contains\n * already a value. If this is the case, the value is directly returned.</li>\n * <li>Otherwise the {@link #initialize()} method is called. This method must be\n * defined in concrete subclasses to actually create the managed object.</li>\n * <li>After the object was created by {@link #initialize()} it is checked\n * whether the {@link AtomicReference} variable is still undefined. This has to\n * be done because in the meantime another thread may have initialized the\n * object. If the reference is still empty, the newly created object is stored\n * in it and returned by this method.</li>\n * <li>Otherwise the value stored in the {@link AtomicReference} is returned.</li>\n * </ul>\n * <p>\n * Because atomic variables are used this class does not need any\n * synchronization. So there is no danger of deadlock, and access to the managed\n * object is efficient. However, if multiple threads access the {@code\n * AtomicInitializer} object before it has been initialized almost at the same\n * time, it can happen that {@link #initialize()} is called multiple times. The\n * algorithm outlined above guarantees that {@link #get()} always returns the\n * same object though.\n * </p>\n * <p>\n * Compared with the {@link LazyInitializer} class, this class can be more\n * efficient because it does not need synchronization. The drawback is that the\n * {@link #initialize()} method can be called multiple times which may be\n * problematic if the creation of the managed object is expensive. As a rule of\n * thumb this initializer implementation is preferable if there are not too many\n * threads involved and the probability that multiple threads access an\n * uninitialized object is small. If there is high parallelism,\n * {@link LazyInitializer} is more appropriate.\n * </p>\n *\n * @since 3.0\n * @param <T> the type of the object managed by this initializer class",public ,org.apache.commons.lang3.concurrent.AbstractConcurrentInitializer,
org.apache.commons.lang3.concurrent.AtomicInitializer$Builder,Class,* Builds a new instance.\n     *\n     * @param <T> The type of results supplied by this builder.\n     * @param <I> The type of the initializer managed by this builder.\n     * @since 3.14.0,"public , static ",org.apache.commons.lang3.concurrent.AbstractConcurrentInitializer.AbstractBuilder,
org.apache.commons.lang3.concurrent.locks.LockingVisitors,Class,"* Combines the monitor and visitor pattern to work with {@link java.util.concurrent.locks.Lock locked objects}. Locked\n * objects are an alternative to synchronization. This, on Wikipedia, is known as the Visitor pattern\n * (https://en.wikipedia.org/wiki/Visitor_pattern), and from the ""Gang of Four"" ""Design Patterns"" book's Visitor pattern\n * [Gamma, E., Helm, R., &amp; Johnson, R. (1998). Visitor. In Design patterns elements of reusable object oriented software (pp. 331-344). Reading: Addison Wesley.].\n *\n * <p>\n * Locking is preferable, if there is a distinction between read access (multiple threads may have read access\n * concurrently), and write access (only one thread may have write access at any given time). In comparison,\n * synchronization doesn't support read access, because synchronized access is exclusive.\n * </p>\n * <p>\n * Using this class is fairly straightforward:\n * </p>\n * <ol>\n * <li>While still in single thread mode, create an instance of {@link LockingVisitors.StampedLockVisitor} by calling\n * {@link #stampedLockVisitor(Object)}, passing the object which needs to be locked. Discard all references to the\n * locked object. Instead, use references to the lock.</li>\n * <li>If you want to access the locked object, create a {@link FailableConsumer}. The consumer will receive the locked\n * object as a parameter. For convenience, the consumer may be implemented as a Lambda. Then invoke\n * {@link LockingVisitors.StampedLockVisitor#acceptReadLocked(FailableConsumer)}, or\n * {@link LockingVisitors.StampedLockVisitor#acceptWriteLocked(FailableConsumer)}, passing the consumer.</li>\n * <li>As an alternative, if you need to produce a result object, you may use a {@link FailableFunction}. This function\n * may also be implemented as a Lambda. To have the function executed, invoke\n * {@link LockingVisitors.StampedLockVisitor#applyReadLocked(FailableFunction)}, or\n * {@link LockingVisitors.StampedLockVisitor#applyWriteLocked(FailableFunction)}.</li>\n * </ol>\n * <p>\n * Example: A thread safe logger class.\n * </p>\n *\n * <pre>{@code\n *   public class SimpleLogger {\n *\n *     private final StampedLockVisitor<PrintStream> lock;\n *\n *     public SimpleLogger(OutputStream out) {\n *         lock = LockingVisitors.stampedLockVisitor(new PrintStream(out));\n *     }\n *\n *     public void log(String message) {\n *         lock.acceptWriteLocked(ps -> ps.println(message));\n *     }\n *\n *     public void log(byte[] buffer) {\n *         lock.acceptWriteLocked(ps -> { ps.write(buffer); ps.println(); });\n *     }\n * }\n * }\n * </pre>\n *\n * @since 3.11",public ,,
org.apache.commons.lang3.concurrent.locks.LockingVisitors$LockVisitor,Class,* Wraps a domain object and a lock for access by lambdas.\n     *\n     * @param <O> the wrapped object type.\n     * @param <L> the wrapped lock type.,"public , static ",,
org.apache.commons.lang3.concurrent.locks.LockingVisitors$ReadWriteLockVisitor,Class,"* This class implements a wrapper for a locked (hidden) object, and provides the means to access it. The basic\n     * idea, is that the user code forsakes all references to the locked object, using only the wrapper object, and the\n     * accessor methods {@link #acceptReadLocked(FailableConsumer)}, {@link #acceptWriteLocked(FailableConsumer)},\n     * {@link #applyReadLocked(FailableFunction)}, and {@link #applyWriteLocked(FailableFunction)}. By doing so, the\n     * necessary protections are guaranteed.\n     *\n     * @param <O> The locked (hidden) objects type.","public , static ",org.apache.commons.lang3.concurrent.locks.LockingVisitors.LockVisitor,
org.apache.commons.lang3.concurrent.locks.LockingVisitors$StampedLockVisitor,Class,"* This class implements a wrapper for a locked (hidden) object, and provides the means to access it. The basic\n     * idea is that the user code forsakes all references to the locked object, using only the wrapper object, and the\n     * accessor methods {@link #acceptReadLocked(FailableConsumer)}, {@link #acceptWriteLocked(FailableConsumer)},\n     * {@link #applyReadLocked(FailableFunction)}, and {@link #applyWriteLocked(FailableFunction)}. By doing so, the\n     * necessary protections are guaranteed.\n     *\n     * @param <O> The locked (hidden) objects type.","public , static ",org.apache.commons.lang3.concurrent.locks.LockingVisitors.LockVisitor,
org.apache.commons.lang3.concurrent.ConstantInitializer,Class,* A very simple implementation of the {@link ConcurrentInitializer} interface\n * which always returns the same object.\n *\n * <p>\n * An instance of this class is passed a reference to an object when it is\n * constructed. The {@link #get()} method just returns this object. No\n * synchronization is required.\n * </p>\n * <p>\n * This class is useful for instance for unit testing or in cases where a\n * specific object has to be passed to an object which expects a\n * {@link ConcurrentInitializer}.\n * </p>\n *\n * @since 3.0\n * @param <T> the type of the object managed by this initializer,public ,,org.apache.commons.lang3.concurrent.ConcurrentInitializer
org.apache.commons.lang3.concurrent.TimedSemaphore,Class,"* A specialized <em>semaphore</em> implementation that provides a number of\n * permits in a given time frame.\n *\n * <p>\n * This class is similar to the {@link java.util.concurrent.Semaphore} class\n * provided by the JDK in that it manages a configurable number of permits.\n * Using the {@link #acquire()} method a permit can be requested by a thread.\n * However, there is an additional timing dimension: there is no {@code\n * release()} method for freeing a permit, but all permits are automatically\n * released at the end of a configurable time frame. If a thread calls\n * {@link #acquire()} and the available permits are already exhausted for this\n * time frame, the thread is blocked. When the time frame ends all permits\n * requested so far are restored, and blocking threads are waked up again, so\n * that they can try to acquire a new permit. This basically means that in the\n * specified time frame only the given number of operations is possible.\n * </p>\n * <p>\n * A use case for this class is to artificially limit the load produced by a\n * process. As an example consider an application that issues database queries\n * on a production system in a background process to gather statistical\n * information. This background processing should not produce so much database\n * load that the functionality and the performance of the production system are\n * impacted. Here a {@link TimedSemaphore} could be installed to guarantee that\n * only a given number of database queries are issued per second.\n * </p>\n * <p>\n * A thread class for performing database queries could look as follows:\n * </p>\n *\n * <pre>\n * public class StatisticsThread extends Thread {\n *     // The semaphore for limiting database load.\n *     private final TimedSemaphore semaphore;\n *     // Create an instance and set the semaphore\n *     public StatisticsThread(TimedSemaphore timedSemaphore) {\n *         semaphore = timedSemaphore;\n *     }\n *     // Gather statistics\n *     public void run() {\n *         try {\n *             while (true) {\n *                 semaphore.acquire();   // limit database load\n *                 performQuery();        // issue a query\n *             }\n *         } catch (InterruptedException) {\n *             // fall through\n *         }\n *     }\n *     ...\n * }\n * </pre>\n *\n * <p>\n * The following code fragment shows how a {@link TimedSemaphore} is created\n * that allows only 10 operations per second and passed to the statistics\n * thread:\n * </p>\n *\n * <pre>\n * TimedSemaphore sem = new TimedSemaphore(1, TimeUnit.SECOND, 10);\n * StatisticsThread thread = new StatisticsThread(sem);\n * thread.start();\n * </pre>\n *\n * <p>\n * When creating an instance the time period for the semaphore must be\n * specified. {@link TimedSemaphore} uses an executor service with a\n * corresponding period to monitor this interval. The {@code\n * ScheduledExecutorService} to be used for this purpose can be provided at\n * construction time. Alternatively the class creates an internal executor\n * service.\n * </p>\n * <p>\n * Client code that uses {@link TimedSemaphore} has to call the\n * {@link #acquire()} method in each processing step. {@link TimedSemaphore}\n * keeps track of the number of invocations of the {@link #acquire()} method and\n * blocks the calling thread if the counter exceeds the limit specified. When\n * the timer signals the end of the time period the counter is reset and all\n * waiting threads are released. Then another cycle can start.\n * </p>\n * <p>\n * An alternative to {@code acquire()} is the {@link #tryAcquire()} method. This\n * method checks whether the semaphore is under the specified limit and\n * increases the internal counter if this is the case. The return value is then\n * <strong>true</strong>, and the calling thread can continue with its action.\n * If the semaphore is already at its limit, {@code tryAcquire()} immediately\n * returns <strong>false</strong> without blocking; the calling thread must\n * then abort its action. This usage scenario prevents blocking of threads.\n * </p>\n * <p>\n * It is possible to modify the limit at any time using the\n * {@link #setLimit(int)} method. This is useful if the load produced by an\n * operation has to be adapted dynamically. In the example scenario with the\n * thread collecting statistics it may make sense to specify a low limit during\n * day time while allowing a higher load in the night time. Reducing the limit\n * takes effect immediately by blocking incoming callers. If the limit is\n * increased, waiting threads are not released immediately, but wake up when the\n * timer runs out. Then, in the next period more processing steps can be\n * performed without blocking. By setting the limit to 0 the semaphore can be\n * switched off: in this mode the {@link #acquire()} method never blocks, but\n * lets all callers pass directly.\n * </p>\n * <p>\n * When the {@link TimedSemaphore} is no more needed its {@link #shutdown()}\n * method should be called. This causes the periodic task that monitors the time\n * interval to be canceled. If the {@link ScheduledExecutorService} has been\n * created by the semaphore at construction time, it is also shut down.\n * resources. After that {@link #acquire()} must not be called any more.\n * </p>\n *\n * @since 3.0",public ,,
org.apache.commons.lang3.concurrent.Computable,Interface,"* Definition of an interface for a wrapper around a calculation that takes a single parameter and returns a result.\n *\n * <p>This interface allows for wrapping a calculation into a class so that it maybe passed around an application.</p>\n *\n * <p>See also {@code FailableFunction<I, O, InterruptedException>}.</p>\n *\n * @param <I> the type of the input to the calculation\n * @param <O> the type of the output of the calculation\n * @see FailableFunction\n * @since 3.6",public ,,
org.apache.commons.lang3.concurrent.AbstractConcurrentInitializer,Abstract Class,* Abstracts and defines operations for {@link ConcurrentInitializer} implementations.\n *\n * @param <T> the type of the object managed by this initializer class.\n * @param <E> The exception type thrown by {@link #initialize()}.\n * @since 3.14.0,"public , abstract ",,org.apache.commons.lang3.concurrent.ConcurrentInitializer
org.apache.commons.lang3.concurrent.AbstractConcurrentInitializer$AbstractBuilder,Abstract Class,* Builds a new instance for subclasses.\n     *\n     * @param <I> The type of results supplied by this builder.\n     * @param <T> The type of the object managed by the initializer class.\n     * @param <B> The type of builder.\n     * @param <E> The exception type thrown by {@link #initialize()}.,"public , abstract , static ",org.apache.commons.lang3.builder.AbstractSupplier,
org.apache.commons.lang3.concurrent.ConcurrentException,Class,"* An exception class used for reporting error conditions related to accessing data of background tasks.\n *\n * <p>\n * The purpose of this exception class is analogous to the default JDK exception class {@link ExecutionException}, i.e.\n * it wraps an exception that occurred during the execution of a task. However, in contrast to\n * {@link ExecutionException}, it wraps only checked exceptions. Runtime exceptions are thrown directly.\n * </p>\n *\n * @since 3.0",public ,java.lang.Exception,
org.apache.commons.lang3.concurrent.ConcurrentUtils,Class,* A utility class providing functionality related to the {@code\n * java.util.concurrent} package.\n *\n * @since 3.0,public ,,
org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture,Class,* A specialized {@link Future} implementation which wraps a constant value.\n     * @param <T> the type of the value wrapped by this class,"static , final ",,java.util.concurrent.Future
org.apache.commons.lang3.concurrent.ConcurrentRuntimeException,Class,"* An exception class used for reporting runtime error conditions related to\n * accessing data of background tasks.\n *\n * <p>\n * This class is an analogue of the {@link ConcurrentException} exception class.\n * However, it is a runtime exception and thus does not need explicit catch\n * clauses. Some methods of {@link ConcurrentUtils} throw {@code\n * ConcurrentRuntimeException} exceptions rather than\n * {@link ConcurrentException} exceptions. They can be used by client code that\n * does not want to be bothered with checked exceptions.\n * </p>\n *\n * @since 3.0",public ,java.lang.RuntimeException,
org.apache.commons.lang3.concurrent.ThresholdCircuitBreaker,Class,"* A simple implementation of the <a\n * href=""https://martinfowler.com/bliki/CircuitBreaker.html"">Circuit Breaker</a> pattern\n * that opens if the requested increment amount is greater than a given threshold.\n *\n * <p>\n * It contains an internal counter that starts in zero, and each call increments the counter by a given amount.\n * If the threshold is zero, the circuit breaker will be in a permanent <em>open</em> state.\n * </p>\n *\n * <p>\n * An example of use case could be a memory circuit breaker.\n * </p>\n *\n * <pre>\n * long threshold = 10L;\n * ThresholdCircuitBreaker breaker = new ThresholdCircuitBreaker(10L);\n * ...\n * public void handleRequest(Request request) {\n *     long memoryUsed = estimateMemoryUsage(request);\n *     if (breaker.incrementAndCheckState(memoryUsed)) {\n *         // actually handle this request\n *     } else {\n *         // do something else, e.g. send an error code\n *     }\n * }\n * </pre>\n *\n * <p>#Thread safe#</p>\n * @since 3.5",public ,org.apache.commons.lang3.concurrent.AbstractCircuitBreaker,
org.apache.commons.lang3.concurrent.BackgroundInitializer,Class,"* A class that allows complex initialization operations in a background task.\n *\n * <p>\n * Applications often have to do some expensive initialization steps when they\n * are started, e.g. constructing a connection to a database, reading a\n * configuration file, etc. Doing these things in parallel can enhance\n * performance as the CPU load can be improved. However, when access to the\n * resources initialized in a background thread is actually required,\n * synchronization has to be performed to ensure that their initialization is\n * complete.\n * </p>\n * <p>\n * This abstract base class provides support for this use case. A concrete\n * subclass must implement the {@link #initialize()} method. Here an arbitrary\n * initialization can be implemented, and a result object can be returned. With\n * this method in place the basic usage of this class is as follows (where\n * {@code MyBackgroundInitializer} is a concrete subclass):\n * </p>\n *\n * <pre>\n * MyBackgroundInitializer initializer = new MyBackgroundInitializer();\n * initializer.start();\n * // Now do some other things. Initialization runs in a parallel thread\n * ...\n * // Wait for the end of initialization and access the result object\n * Object result = initializer.get();\n * </pre>\n *\n * <p>\n * After the construction of a {@link BackgroundInitializer} object its\n * {@link #start()} method has to be called. This starts the background\n * processing. The application can now continue to do other things. When it\n * needs access to the object produced by the {@link BackgroundInitializer} it\n * calls its {@link #get()} method. If initialization is already complete,\n * {@link #get()} returns the result object immediately. Otherwise it blocks\n * until the result object is fully constructed.\n * </p>\n * <p>\n * {@link BackgroundInitializer} is a thin wrapper around a {@link Future}\n * object and uses an {@link ExecutorService} for running the background\n * initialization task. It is possible to pass in an {@link ExecutorService} at\n * construction time or set one using {@code setExternalExecutor()} before\n * {@code start()} was called. Then this object is used to spawn the background\n * task. If no {@link ExecutorService} has been provided, {@code\n * BackgroundInitializer} creates a temporary {@link ExecutorService} and\n * destroys it when initialization is complete.\n * </p>\n * <p>\n * The methods provided by {@link BackgroundInitializer} provide for minimal\n * interaction with the wrapped {@link Future} object. It is also possible to\n * obtain the {@link Future} object directly. Then the enhanced functionality\n * offered by {@link Future} can be used, e.g. to check whether the background\n * operation is complete or to cancel the operation.\n * </p>\n *\n * @since 3.0\n * @param <T> the type of the object managed by this initializer class",public ,org.apache.commons.lang3.concurrent.AbstractConcurrentInitializer,
org.apache.commons.lang3.concurrent.BackgroundInitializer$Builder,Class,* Builds a new instance.\n     *\n     * @param <T> The type of results supplied by this builder.\n     * @param <I> The type of the initializer managed by this builder.\n     * @since 3.14.0,"public , static ",org.apache.commons.lang3.concurrent.AbstractConcurrentInitializer.AbstractBuilder,
org.apache.commons.lang3.concurrent.BackgroundInitializer$InitializationTask,Class,No Comment,"private , final ",,java.util.concurrent.Callable
org.apache.commons.lang3.concurrent.BasicThreadFactory,Class,"* An implementation of the {@link ThreadFactory} interface that provides some\n * configuration options for the threads it creates.\n * <p>\n * A {@link ThreadFactory} is used for instance by an {@link ExecutorService} to\n * create the threads it uses for executing tasks. In many cases users do not\n * have to care about a {@link ThreadFactory} because the default one used by an\n * {@link ExecutorService} will do. However, if there are special requirements\n * for the threads, a custom {@link ThreadFactory} has to be created.\n * </p>\n * <p>\n * This class provides some frequently needed configuration options for the\n * threads it creates. These are the following:\n * </p>\n * <ul>\n * <li>A name pattern for the threads created by this factory can be specified.\n * This is often useful if an application uses multiple executor services for\n * different purposes. If the names of the threads used by these services have\n * meaningful names, log output or exception traces can be much easier to read.\n * Naming patterns are <em>format strings</em> as used by the {@code\n * String.format()} method. The string can contain the place holder {@code %d}\n * which will be replaced by the number of the current thread ({@code\n * ThreadFactoryImpl} keeps a counter of the threads it has already created).\n * For instance, the naming pattern {@code ""My %d. worker thread""} will result\n * in thread names like {@code ""My 1. worker thread""}, {@code\n * ""My 2. worker thread""} and so on.</li>\n * <li>A flag whether the threads created by this factory should be daemon\n * threads. This can impact the exit behavior of the current Java application\n * because the JVM shuts down if there are only daemon threads running.</li>\n * <li>The priority of the thread. Here an integer value can be provided. The\n * {@link Thread} class defines constants for valid ranges of priority\n * values.</li>\n * <li>The {@link UncaughtExceptionHandler} for the thread. This handler is\n * called if an uncaught exception occurs within the thread.</li>\n * </ul>\n * <p>\n * {@link BasicThreadFactory} wraps another thread factory which actually\n * creates new threads. The configuration options are set on the threads created\n * by the wrapped thread factory. On construction time the factory to be wrapped\n * can be specified. If none is provided, a default {@link ThreadFactory} is\n * used.\n * </p>\n * <p>\n * Instances of {@link BasicThreadFactory} are not created directly, but the\n * nested {@link Builder} class is used for this purpose. Using the builder only\n * the configuration options an application is interested in need to be set. The\n * following example shows how a {@link BasicThreadFactory} is created and\n * installed in an {@link ExecutorService}:\n * </p>\n *\n * <pre>\n * // Create a factory that produces daemon threads with a naming pattern and\n * // a priority\n * BasicThreadFactory factory = new BasicThreadFactory.Builder()\n *     .namingPattern(&quot;workerthread-%d&quot;)\n *     .daemon(true)\n *     .priority(Thread.MAX_PRIORITY)\n *     .build();\n * // Create an executor service for single-threaded execution\n * ExecutorService exec = Executors.newSingleThreadExecutor(factory);\n * </pre>\n *\n * @since 3.0",public ,,java.util.concurrent.ThreadFactory
org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder,Class,* A <em>builder</em> class for creating instances of {@code\n     * BasicThreadFactory}.\n     * <p>\n     * Using this builder class instances of {@link BasicThreadFactory} can be\n     * created and initialized. The class provides methods that correspond to\n     * the configuration options supported by {@link BasicThreadFactory}. Method\n     * chaining is supported. Refer to the documentation of {@code\n     * BasicThreadFactory} for a usage example.\n     * </p>,"public , static ",,org.apache.commons.lang3.builder.Builder
org.apache.commons.lang3.concurrent.UncheckedFutureImpl,Class,"* An {@link Future} implementation that throws unchecked instead of checked exceptions.\n *\n * @param <V> The result type returned by this UncheckedFuture's {@link #get()} and {@link #get(long, TimeUnit)} methods.\n * @see Future\n * @since 3.13.0",final ,org.apache.commons.lang3.concurrent.AbstractFutureProxy,org.apache.commons.lang3.concurrent.UncheckedFuture
org.apache.commons.lang3.concurrent.UncheckedTimeoutException,Class,* Unchecked {@link TimeoutException}.\n *\n * @since 3.13.0,public ,org.apache.commons.lang3.exception.UncheckedException,
org.apache.commons.lang3.concurrent.ConcurrentInitializer,Interface,"* Defines the thread-safe initialization of objects.\n * <p>\n * The idea behind this interface is to provide access to an object in a thread-safe manner. A {@link ConcurrentInitializer} can be passed to multiple threads\n * which can all access the object produced by the initializer. Through the {@link #get()} method the object can be queried.\n * </p>\n * <p>\n * Concrete implementations of this interface will use different strategies for the creation of the managed object, e.g. lazy initialization or initialization\n * in a background thread. This is completely transparent to client code, so it is possible to change the initialization strategy without affecting clients.\n * </p>\n * <p>\n * An implementation of {@link #get()} returns the fully initialized object produced by this {@code\n * ConcurrentInitializer}. A concrete implementation here returns the results of the initialization process. This method may block until results are available.\n * Typically, once created the result object is always the same.\n * </p>\n * <p>\n * An implementation throws {@link ConcurrentException} if an error occurred during initialization of the object.\n * </p>\n *\n * @since 3.0\n * @param <T> the type of the object managed by this initializer class.",public ,org.apache.commons.lang3.function.FailableSupplier,
org.apache.commons.lang3.concurrent.AbstractCircuitBreaker,Abstract Class,* Base class for circuit breakers.\n *\n * @param <T> the type of the value monitored by this circuit breaker\n * @since 3.5,"public , abstract ",,org.apache.commons.lang3.concurrent.CircuitBreaker
org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State,Enum,* An internal enumeration representing the different states of a circuit\n     * breaker. This class also contains some logic for performing state\n     * transitions. This is done to avoid complex if-conditions in the code of\n     * {@link CircuitBreaker}.,protected ,enum has no extends,
org.apache.commons.lang3.concurrent.LazyInitializer,Class,"* This class provides a generic implementation of the lazy initialization pattern.\n *\n * <p>\n * Sometimes an application has to deal with an object only under certain circumstances, e.g. when the user selects a specific menu item or if a special event\n * is received. If the creation of the object is costly or the consumption of memory or other system resources is significant, it may make sense to defer the\n * creation of this object until it is really needed. This is a use case for the lazy initialization pattern.\n * </p>\n * <p>\n * This abstract base class provides an implementation of the double-check idiom for an instance field as discussed in Joshua Bloch's ""Effective Java"", 2nd\n * edition, item 71. The class already implements all necessary synchronization. A concrete subclass has to implement the {@code initialize()} method, which\n * actually creates the wrapped data object.\n * </p>\n * <p>\n * As an usage example consider that we have a class {@code ComplexObject} whose instantiation is a complex operation. In order to apply lazy initialization to\n * this class, a subclass of {@link LazyInitializer} has to be created:\n * </p>\n *\n * <pre>{@code\n * public class ComplexObjectInitializer extends LazyInitializer<ComplexObject> {\n *     &#064;Override\n *     protected ComplexObject initialize() {\n *         return new ComplexObject();\n *     }\n * }\n * }\n * </pre>\n *\n * <p>\n * Access to the data object is provided through the {@code get()} method. So, code that wants to obtain the {@code ComplexObject} instance would simply look\n * like this:\n * </p>\n *\n * <pre>\n * // Create an instance of the lazy initializer\n * ComplexObjectInitializer initializer = new ComplexObjectInitializer();\n * ...\n * // When the object is actually needed:\n * ComplexObject cobj = initializer.get();\n * </pre>\n *\n * <p>\n * If multiple threads call the {@code get()} method when the object has not yet been created, they are blocked until initialization completes. The algorithm\n * guarantees that only a single instance of the wrapped object class is created, which is passed to all callers. Once initialized, calls to the {@code get()}\n * method are pretty fast because no synchronization is needed (only an access to a <strong>volatile</strong> member field).\n * </p>\n *\n * @since 3.0\n * @param <T> the type of the object managed by the initializer.",public ,org.apache.commons.lang3.concurrent.AbstractConcurrentInitializer,
org.apache.commons.lang3.concurrent.LazyInitializer$Builder,Class,* Builds a new instance.\n     *\n     * @param <T> The type of results supplied by this builder.\n     * @param <I> The type of the initializer managed by this builder.\n     * @since 3.14.0,"public , static ",org.apache.commons.lang3.concurrent.AbstractConcurrentInitializer.AbstractBuilder,
org.apache.commons.lang3.concurrent.CircuitBreakingException,Class,* An exception class used for reporting runtime error conditions related to\n * circuit breakers.\n *\n * @since 3.5,public ,java.lang.RuntimeException,
org.apache.commons.lang3.concurrent.AbstractFutureProxy,Abstract Class,"* Proxies to a {@link Future} for subclassing.\n *\n * @param <V> The result type returned by this Future's {@link #get()} and {@link #get(long, TimeUnit)} methods.\n * @since 3.13.0","public , abstract ",,java.util.concurrent.Future
org.apache.commons.lang3.concurrent.UncheckedFuture,Interface,"* An {@link Future} that throws unchecked instead checked exceptions.\n *\n * @param <V> The result type returned by this Future's {@link #get()} and {@link #get(long, TimeUnit)} methods.\n * @see Future\n * @see Exception\n * @since 3.13.0",public ,java.util.concurrent.Future,
org.apache.commons.lang3.concurrent.MultiBackgroundInitializer,Class,"* A specialized {@link BackgroundInitializer} implementation that can deal with\n * multiple background initialization tasks.\n *\n * <p>\n * This class has a similar purpose as {@link BackgroundInitializer}. However,\n * it is not limited to a single background initialization task. Rather it\n * manages an arbitrary number of {@link BackgroundInitializer} objects,\n * executes them, and waits until they are completely initialized. This is\n * useful for applications that have to perform multiple initialization tasks\n * that can run in parallel (i.e. that do not depend on each other). This class\n * takes care about the management of an {@link ExecutorService} and shares it\n * with the {@link BackgroundInitializer} objects it is responsible for; so the\n * using application need not bother with these details.\n * </p>\n * <p>\n * The typical usage scenario for {@link MultiBackgroundInitializer} is as\n * follows:\n * </p>\n * <ul>\n * <li>Create a new instance of the class. Optionally pass in a pre-configured\n * {@link ExecutorService}. Alternatively {@link MultiBackgroundInitializer} can\n * create a temporary {@link ExecutorService} and delete it after initialization\n * is complete.</li>\n * <li>Create specialized {@link BackgroundInitializer} objects for the\n * initialization tasks to be performed and add them to the {@code\n * MultiBackgroundInitializer} using the\n * {@link #addInitializer(String, BackgroundInitializer)} method.</li>\n * <li>After all initializers have been added, call the {@link #start()} method.\n * </li>\n * <li>When access to the result objects produced by the {@code\n * BackgroundInitializer} objects is needed call the {@link #get()} method. The\n * object returned here provides access to all result objects created during\n * initialization. It also stores information about exceptions that have\n * occurred.</li>\n * </ul>\n * <p>\n * {@link MultiBackgroundInitializer} starts a special controller task that\n * starts all {@link BackgroundInitializer} objects added to the instance.\n * Before the an initializer is started it is checked whether this initializer\n * already has an {@link ExecutorService} set. If this is the case, this {@code\n * ExecutorService} is used for running the background task. Otherwise the\n * current {@link ExecutorService} of this {@link MultiBackgroundInitializer} is\n * shared with the initializer.\n * </p>\n * <p>\n * The easiest way of using this class is to let it deal with the management of\n * an {@link ExecutorService} itself: If no external {@link ExecutorService} is\n * provided, the class creates a temporary {@link ExecutorService} (that is\n * capable of executing all background tasks in parallel) and destroys it at the\n * end of background processing.\n * </p>\n * <p>\n * Alternatively an external {@link ExecutorService} can be provided - either at\n * construction time or later by calling the\n * {@link #setExternalExecutor(ExecutorService)} method. In this case all\n * background tasks are scheduled at this external {@link ExecutorService}.\n * <strong>Important note:</strong> When using an external {@code\n * ExecutorService} be sure that the number of threads managed by the service is\n * large enough. Otherwise a deadlock can happen! This is the case in the\n * following scenario: {@link MultiBackgroundInitializer} starts a task that\n * starts all registered {@link BackgroundInitializer} objects and waits for\n * their completion. If for instance a single threaded {@link ExecutorService}\n * is used, none of the background tasks can be executed, and the task created\n * by {@link MultiBackgroundInitializer} waits forever.\n * </p>\n *\n * @since 3.0",public ,org.apache.commons.lang3.concurrent.BackgroundInitializer,
org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults,Class,"* A data class for storing the results of the background initialization\n     * performed by {@link MultiBackgroundInitializer}. Objects of this inner\n     * class are returned by {@link MultiBackgroundInitializer#initialize()}.\n     * They allow access to all result objects produced by the\n     * {@link BackgroundInitializer} objects managed by the owning instance. It\n     * is also possible to retrieve status information about single\n     * {@link BackgroundInitializer}s, i.e. whether they completed normally or\n     * caused an exception.","public , static ",,
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker,Class,"* A simple implementation of the <a\n * href=""https://martinfowler.com/bliki/CircuitBreaker.html"">Circuit Breaker</a> pattern\n * that counts specific events.\n *\n * <p>\n * A <em>circuit breaker</em> can be used to protect an application against unreliable\n * services or unexpected load. A newly created {@link EventCountCircuitBreaker} object is\n * initially in state <em>closed</em> meaning that no problem has been detected. When the\n * application encounters specific events (like errors or service timeouts), it tells the\n * circuit breaker to increment an internal counter. If the number of events reported in a\n * specific time interval exceeds a configurable threshold, the circuit breaker changes\n * into state <em>open</em>. This means that there is a problem with the associated sub\n * system; the application should no longer call it, but give it some time to settle down.\n * The circuit breaker can be configured to switch back to <em>closed</em> state after a\n * certain time frame if the number of events received goes below a threshold.\n * </p>\n * <p>\n * When a {@link EventCountCircuitBreaker} object is constructed the following parameters\n * can be provided:\n * </p>\n * <ul>\n * <li>A threshold for the number of events that causes a state transition to\n * <em>open</em> state. If more events are received in the configured check interval, the\n * circuit breaker switches to <em>open</em> state.</li>\n * <li>The interval for checks whether the circuit breaker should open. So it is possible\n * to specify something like ""The circuit breaker should open if more than 10 errors are\n * encountered in a minute.""</li>\n * <li>The same parameters can be specified for automatically closing the circuit breaker\n * again, as in ""If the number of requests goes down to 100 per minute, the circuit\n * breaker should close itself again"". Depending on the use case, it may make sense to use\n * a slightly lower threshold for closing the circuit breaker than for opening it to avoid\n * continuously flipping when the number of events received is close to the threshold.</li>\n * </ul>\n * <p>\n * This class supports the following typical use cases:\n * </p>\n * <p>\n * <strong>Protecting against load peaks</strong>\n * </p>\n * <p>\n * Imagine you have a server which can handle a certain number of requests per minute.\n * Suddenly, the number of requests increases significantly - maybe because a connected\n * partner system is going mad or due to a denial of service attack. A\n * {@link EventCountCircuitBreaker} can be configured to stop the application from\n * processing requests when a sudden peak load is detected and to start request processing\n * again when things calm down. The following code fragment shows a typical example of\n * such a scenario. Here the {@link EventCountCircuitBreaker} allows up to 1000 requests\n * per minute before it interferes. When the load goes down again to 800 requests per\n * second it switches back to state <em>closed</em>:\n * </p>\n *\n * <pre>\n * EventCountCircuitBreaker breaker = new EventCountCircuitBreaker(1000, 1, TimeUnit.MINUTE, 800);\n * ...\n * public void handleRequest(Request request) {\n *     if (breaker.incrementAndCheckState()) {\n *         // actually handle this request\n *     } else {\n *         // do something else, e.g. send an error code\n *     }\n * }\n * </pre>\n * <p>\n * <strong>Deal with an unreliable service</strong>\n * </p>\n * <p>\n * In this scenario, an application uses an external service which may fail from time to\n * time. If there are too many errors, the service is considered down and should not be\n * called for a while. This can be achieved using the following pattern - in this concrete\n * example we accept up to 5 errors in 2 minutes; if this limit is reached, the service is\n * given a rest time of 10 minutes:\n * </p>\n *\n * <pre>\n * EventCountCircuitBreaker breaker = new EventCountCircuitBreaker(5, 2, TimeUnit.MINUTE, 5, 10, TimeUnit.MINUTE);\n * ...\n * public void handleRequest(Request request) {\n *     if (breaker.checkState()) {\n *         try {\n *             service.doSomething();\n *         } catch (ServiceException ex) {\n *             breaker.incrementAndCheckState();\n *         }\n *     } else {\n *         // return an error code, use an alternative service, etc.\n *     }\n * }\n * </pre>\n * <p>\n * In addition to automatic state transitions, the state of a circuit breaker can be\n * changed manually using the methods {@link #open()} and {@link #close()}. It is also\n * possible to register {@link PropertyChangeListener} objects that get notified whenever\n * a state transition occurs. This is useful, for instance to directly react on a freshly\n * detected error condition.\n * </p>\n * <p>\n * <em>Implementation notes:</em>\n * </p>\n * <ul>\n * <li>This implementation uses non-blocking algorithms to update the internal counter and\n * state. This should be pretty efficient if there is not too much contention.</li>\n * <li>This implementation is not intended to operate as a high-precision timer in very\n * short check intervals. It is deliberately kept simple to avoid complex and\n * time-consuming state checks. It should work well in time intervals from a few seconds\n * up to minutes and longer. If the intervals become too short, there might be race\n * conditions causing spurious state transitions.</li>\n * <li>The handling of check intervals is a bit simplistic. Therefore, there is no\n * guarantee that the circuit breaker is triggered at a specific point in time; there may\n * be some delay (less than a check interval).</li>\n * </ul>\n * @since 3.5",public ,org.apache.commons.lang3.concurrent.AbstractCircuitBreaker,
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData,Class,"* An internally used data class holding information about the checks performed by\n     * this class. Basically, the number of received events and the start time of the\n     * current check interval are stored.","private , static , final ",,
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategyClosed,Class,* A specialized {@link StateStrategy} implementation for the state closed.,"private , static , final ",org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.StateStrategy,
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategyOpen,Class,* A specialized {@link StateStrategy} implementation for the state open.,"private , static , final ",org.apache.commons.lang3.concurrent.EventCountCircuitBreaker.StateStrategy,
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy,Abstract Class,* Internally used class for executing check logic based on the current state of the\n     * circuit breaker. Having this logic extracted into special classes avoids complex\n     * if-then-else cascades.,"private , abstract , static ",,
org.apache.commons.lang3.concurrent.UncheckedExecutionException,Class,* Unchecked {@link ExecutionException}.\n *\n * @since 3.13.0,public ,org.apache.commons.lang3.exception.UncheckedException,
org.apache.commons.lang3.concurrent.CallableBackgroundInitializer,Class,"* A specialized {@link BackgroundInitializer} implementation that wraps a\n * {@link Callable} object.\n *\n * <p>\n * An instance of this class is initialized with a {@link Callable} object when\n * it is constructed. The implementation of the {@link #initialize()} method\n * defined in the super class delegates to this {@link Callable} so that the\n * {@link Callable} is executed in the background thread.\n * </p>\n * <p>\n * The {@link java.util.concurrent.Callable} interface is a standard mechanism\n * of the JDK to define tasks to be executed by another thread. The {@code\n * CallableBackgroundInitializer} class allows combining this standard interface\n * with the background initializer API.\n * </p>\n * <p>\n * Usage of this class is very similar to the default usage pattern of the\n * {@link BackgroundInitializer} class: Just create an instance and provide the\n * {@link Callable} object to be executed, then call the initializer's\n * {@link #start()} method. This causes the {@link Callable} to be executed in\n * another thread. When the results of the {@link Callable} are needed the\n * initializer's {@link #get()} method can be called (which may block until\n * background execution is complete). The following code fragment shows a\n * typical usage example:\n * </p>\n *\n * <pre>{@code\n * // a Callable that performs a complex computation\n * Callable<Integer> computationCallable = new MyComputationCallable();\n * // setup the background initializer\n * CallableBackgroundInitializer<Integer> initializer =\n *     new CallableBackgroundInitializer(computationCallable);\n * initializer.start();\n * // Now do some other things. Initialization runs in a parallel thread\n * ...\n * // Wait for the end of initialization and access the result\n * Integer result = initializer.get();\n * }\n * </pre>\n *\n * @since 3.0\n * @param <T> the type of the object managed by this initializer class",public ,org.apache.commons.lang3.concurrent.BackgroundInitializer,
org.apache.commons.lang3.concurrent.AtomicSafeInitializer,Class,"* A specialized {@link ConcurrentInitializer} implementation which is similar\n * to {@link AtomicInitializer}, but ensures that the {@link #initialize()}\n * method is called only once.\n *\n * <p>\n * As {@link AtomicInitializer} this class is based on atomic variables, so it\n * can create an object under concurrent access without synchronization.\n * However, it implements an additional check to guarantee that the\n * {@link #initialize()} method which actually creates the object cannot be\n * called multiple times.\n * </p>\n * <p>\n * Because of this additional check this implementation is slightly less\n * efficient than {@link AtomicInitializer}, but if the object creation in the\n * {@code initialize()} method is expensive or if multiple invocations of\n * {@code initialize()} are problematic, it is the better alternative.\n * </p>\n * <p>\n * From its semantics this class has the same properties as\n * {@link LazyInitializer}. It is a &quot;save&quot; implementation of the lazy\n * initializer pattern. Comparing both classes in terms of efficiency is\n * difficult because which one is faster depends on multiple factors. Because\n * {@link AtomicSafeInitializer} does not use synchronization at all it probably\n * outruns {@link LazyInitializer}, at least under low or moderate concurrent\n * access. Developers should run their own benchmarks on the expected target\n * platform to decide which implementation is suitable for their specific use\n * case.\n * </p>\n *\n * @since 3.0\n * @param <T> the type of the object managed by this initializer class",public ,org.apache.commons.lang3.concurrent.AbstractConcurrentInitializer,
org.apache.commons.lang3.concurrent.AtomicSafeInitializer$Builder,Class,* Builds a new instance.\n     *\n     * @param <T> The type of results supplied by this builder.\n     * @param <I> The type of the initializer managed by this builder.\n     * @since 3.14.0,"public , static ",org.apache.commons.lang3.concurrent.AbstractConcurrentInitializer.AbstractBuilder,
org.apache.commons.lang3.concurrent.FutureTasks,Class,* Consists of utility methods that work with {@link FutureTask}.\n *\n * @since 3.13.0,public ,,
org.apache.commons.lang3.concurrent.Memoizer,Class,"* Definition of an interface for a wrapper around a calculation that takes a single parameter and returns a result. The\n * results for the calculation will be cached for future requests.\n *\n * <p>\n * This is not a fully functional cache, there is no way of limiting or removing results once they have been generated.\n * However, it is possible to get the implementation to regenerate the result for a given parameter, if an error was\n * thrown during the previous calculation, by setting the option during the construction of the class. If this is not\n * set the class will return the cached exception.\n * </p>\n * <p>\n * Thanks go to Brian Goetz, Tim Peierls and the members of JCP JSR-166 Expert Group for coming up with the\n * original implementation of the class. It was also published within Java Concurrency in Practice as a sample.\n * </p>\n *\n * @param <I> the type of the input to the calculation\n * @param <O> the type of the output of the calculation\n * @since 3.6",public ,,org.apache.commons.lang3.concurrent.Computable
org.apache.commons.lang3.Validate,Class,"* This class assists in validating arguments. The validation methods are\n * based along the following principles:\n * <ul>\n *   <li>An invalid {@code null} argument causes a {@link NullPointerException}.</li>\n *   <li>A non-{@code null} argument causes an {@link IllegalArgumentException}.</li>\n *   <li>An invalid index into an array/collection/map/string causes an {@link IndexOutOfBoundsException}.</li>\n * </ul>\n *\n * <p>All exceptions messages are\n * <a href=""https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax"">format strings</a>\n * as defined by the Java platform. For example:\n *\n * <pre>\n * Validate.isTrue(i &gt; 0, ""The value must be greater than zero: %d"", i);\n * Validate.notNull(surname, ""The surname must not be %s"", null);\n * </pre>\n *\n * <p>#ThreadSafe#</p>\n * @see String#format(String, Object...)\n * @since 2.0",public ,,
org.apache.commons.lang3.RandomUtils,Class,"* Supplements the standard {@link Random} class.\n * <p>\n * Use {@link #secure()} to get the singleton instance based on {@link SecureRandom#SecureRandom()} which uses a secure random number generator implementing the\n * default random number algorithm.\n * </p>\n * <p>\n * Use {@link #secureStrong()} to get the singleton instance based on {@link SecureRandom#getInstanceStrong()} which uses an instance that was selected by using\n * the algorithms/providers specified in the {@code securerandom.strongAlgorithms} {@link Security} property.\n * </p>\n * <p>\n * Use {@link #insecure()} to get the singleton instance based on {@link ThreadLocalRandom#current()} <strong>which is not cryptographically secure</strong>. In addition,\n * instances do not use a cryptographically random seed unless the {@linkplain System#getProperty system property} {@code java.util.secureRandomSeed} is set to\n * {@code true}.\n * </p>\n * <p>\n * Starting in version 3.17.0, the method {@link #secure()} uses {@link SecureRandom#SecureRandom()} instead of {@link SecureRandom#getInstanceStrong()}, and\n * adds {@link #secureStrong()}.\n * </p>\n * <p>\n * Starting in version 3.16.0, this class uses {@link #secure()} for static methods and adds {@link #insecure()}.\n * </p>\n * <p>\n * Starting in version 3.15.0, this class uses {@link SecureRandom#getInstanceStrong()} for static methods.\n * </p>\n * <p>\n * Before version 3.15.0, this class used {@link ThreadLocalRandom#current()} for static methods, which is not cryptographically secure.\n * </p>\n * <p>\n * Please note that the Apache Commons project provides a component dedicated to pseudo-random number generation, namely\n * <a href=""https://commons.apache.org/proper/commons-rng/"">Commons RNG</a>, that may be a better choice for applications with more stringent requirements\n * (performance and/or correctness).\n * </p>\n *\n * @see #secure()\n * @see #secureStrong()\n * @see #insecure()\n * @see SecureRandom#SecureRandom()\n * @see SecureRandom#getInstanceStrong()\n * @see ThreadLocalRandom#current()\n * @see RandomStringUtils\n * @since 3.3",public ,,
org.apache.commons.lang3.RegExUtils,Class,* Helpers to process Strings using regular expressions.\n *\n * @see java.util.regex.Pattern\n * @since 3.8,public ,,
org.apache.commons.lang3.Range,Class,* An immutable range of objects from a minimum to maximum point inclusive.\n *\n * <p>The objects need to either be implementations of {@link Comparable}\n * or you need to supply a {@link Comparator}.</p>\n *\n * <p>#ThreadSafe# if the objects and comparator are thread-safe.</p>\n *\n * @param <T> The type of range values.\n * @since 3.0,public ,,java.io.Serializable
org.apache.commons.lang3.Range$ComparableComparator,Enum,No Comment,private ,enum has no extends,java.util.Comparator
org.apache.commons.lang3.compare.ObjectToStringComparator,Class,* Compares Object's {@link Object#toString()} values.\n *\n * This class is stateless.\n *\n * @since 3.10,"public , final ",,java.util.Comparator;java.io.Serializable
org.apache.commons.lang3.compare.ComparableUtils,Class,* Utility library to provide helper methods for translating {@link Comparable#compareTo} result into a boolean.\n *\n * <p>Example: {@code boolean x = is(myComparable).lessThanOrEqualTo(otherComparable)}</p>\n *\n * <p>#ThreadSafe#</p>\n *\n * @since 3.10,public ,,
org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder,Class,* Provides access to the available methods\n     *\n     * @param <A> the type of objects that this object may be compared against.,"public , static ",,
org.apache.commons.lang3.ObjectUtils,Class,@Immutable,public ,,
org.apache.commons.lang3.ObjectUtils$Null,Class,"* Class used as a null placeholder where {@code null}\n     * has another meaning.\n     *\n     * <p>For example, in a {@link HashMap} the\n     * {@link java.util.HashMap#get(Object)} method returns\n     * {@code null} if the {@link Map} contains {@code null} or if there is\n     * no matching key. The {@code null} placeholder can be used to distinguish\n     * between these two cases.</p>\n     *\n     * <p>Another example is {@link Hashtable}, where {@code null}\n     * cannot be stored.</p>","public , static ",,java.io.Serializable
org.apache.commons.lang3.text.StrSubstitutor,Class,"* Substitutes variables within a string by values.\n * <p>\n * This class takes a piece of text and substitutes all the variables within it.\n * The default definition of a variable is {@code ${variableName}}.\n * The prefix and suffix can be changed via constructors and set methods.\n * </p>\n * <p>\n * Variable values are typically resolved from a map, but could also be resolved\n * from system properties, or by supplying a custom variable resolver.\n * </p>\n * <p>\n * The simplest example is to use this class to replace Java System properties. For example:\n * </p>\n * <pre>\n * StrSubstitutor.replaceSystemProperties(\n *      ""You are running with java.version = ${java.version} and os.name = ${os.name}."");\n * </pre>\n * <p>\n * Typical usage of this class follows the following pattern: First an instance is created\n * and initialized with the map that contains the values for the available variables.\n * If a prefix and/or suffix for variables should be used other than the default ones,\n * the appropriate settings can be performed. After that the {@code replace()}\n * method can be called passing in the source text for interpolation. In the returned\n * text all variable references (as long as their values are known) will be resolved.\n * The following example demonstrates this:\n * </p>\n * <pre>\n * Map valuesMap = HashMap();\n * valuesMap.put(&quot;animal&quot;, &quot;quick brown fox&quot;);\n * valuesMap.put(&quot;target&quot;, &quot;lazy dog&quot;);\n * String templateString = &quot;The ${animal} jumps over the ${target}.&quot;;\n * StrSubstitutor sub = new StrSubstitutor(valuesMap);\n * String resolvedString = sub.replace(templateString);\n * </pre>\n * yielding:\n * <pre>\n *      The quick brown fox jumps over the lazy dog.\n * </pre>\n * <p>\n * Also, this class allows to set a default value for unresolved variables.\n * The default value for a variable can be appended to the variable name after the variable\n * default value delimiter. The default value of the variable default value delimiter is ':-',\n * as in bash and other *nix shells, as those are arguably where the default ${} delimiter set originated.\n * The variable default value delimiter can be manually set by calling {@link #setValueDelimiterMatcher(StrMatcher)},\n * {@link #setValueDelimiter(char)} or {@link #setValueDelimiter(String)}.\n * The following shows an example with variable default value settings:\n * </p>\n * <pre>\n * Map valuesMap = HashMap();\n * valuesMap.put(&quot;animal&quot;, &quot;quick brown fox&quot;);\n * valuesMap.put(&quot;target&quot;, &quot;lazy dog&quot;);\n * String templateString = &quot;The ${animal} jumps over the ${target}. ${undefined.number:-1234567890}.&quot;;\n * StrSubstitutor sub = new StrSubstitutor(valuesMap);\n * String resolvedString = sub.replace(templateString);\n * </pre>\n * <p>\n * yielding:\n * </p>\n * <pre>\n *      The quick brown fox jumps over the lazy dog. 1234567890.\n * </pre>\n * <p>\n * In addition to this usage pattern there are some static convenience methods that\n * cover the most common use cases. These methods can be used without the need of\n * manually creating an instance. However if multiple replace operations are to be\n * performed, creating and reusing an instance of this class will be more efficient.\n * </p>\n * <p>\n * Variable replacement works in a recursive way. Thus, if a variable value contains\n * a variable then that variable will also be replaced. Cyclic replacements are\n * detected and will cause an exception to be thrown.\n * </p>\n * <p>\n * Sometimes the interpolation's result must contain a variable prefix. As an example\n * take the following source text:\n * </p>\n * <pre>\n *   The variable ${${name}} must be used.\n * </pre>\n * <p>\n * Here only the variable's name referred to in the text should be replaced resulting\n * in the text (assuming that the value of the {@code name} variable is {@code x}):\n * </p>\n * <pre>\n *   The variable ${x} must be used.\n * </pre>\n * <p>\n * To achieve this effect there are two possibilities: Either set a different prefix\n * and suffix for variables which do not conflict with the result text you want to\n * produce. The other possibility is to use the escape character, by default '$'.\n * If this character is placed before a variable reference, this reference is ignored\n * and won't be replaced. For example:\n * </p>\n * <pre>\n *   The variable $${${name}} must be used.\n * </pre>\n * <p>\n * In some complex scenarios you might even want to perform substitution in the\n * names of variables, for instance:\n * </p>\n * <pre>\n * ${jre-${java.specification.version}}\n * </pre>\n * <p>\n * {@link StrSubstitutor} supports this recursive substitution in variable\n * names, but it has to be enabled explicitly by setting the\n * {@link #setEnableSubstitutionInVariables(boolean) enableSubstitutionInVariables}\n * property to <strong>true</strong>.\n * </p>\n * <p>\n * This class is <strong>not</strong> thread safe.\n * </p>\n *\n * @since 2.2\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/StringSubstitutor.html"">\n * StringSubstitutor</a>.",public ,,
org.apache.commons.lang3.text.translate.NumericEntityUnescaper,Class,"* Translate XML numeric entities of the form &amp;#[xX]?\d+;? to the specific code point.\n *\n * Note that the semicolon is optional.\n *\n * @since 3.0\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n *             <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/translate/NumericEntityUnescaper.html"">\n *             NumericEntityUnescaper</a>.",public ,org.apache.commons.lang3.text.translate.CharSequenceTranslator,
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION,Enum,"* Enumerates NumericEntityUnescaper options for unescaping.\n     *\n     * @deprecated As of 3.18.0, use Apache Commons Text <a href=\n     *             ""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/translate/NumericEntityUnescaper.OPTION.html"">\n     *             NumericEntityUnescaper.OPTION</a>.",public ,enum has no extends,
org.apache.commons.lang3.text.translate.AggregateTranslator,Class,"* Executes a sequence of translators one after the other. Execution ends whenever\n * the first translator consumes code points from the input.\n *\n * @since 3.0\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/translate/AggregateTranslator.html"">\n * AggregateTranslator</a>.",public ,org.apache.commons.lang3.text.translate.CharSequenceTranslator,
org.apache.commons.lang3.text.translate.CharSequenceTranslator,Abstract Class,"* An API for translating text.\n * Its core use is to escape and unescape text. Because escaping and unescaping\n * is completely contextual, the API does not present two separate signatures.\n *\n * @since 3.0\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/translate/CharSequenceTranslator.html"">\n * CharSequenceTranslator</a>.","public , abstract ",,
org.apache.commons.lang3.text.translate.OctalUnescaper,Class,"* Translate escaped octal Strings back to their octal values.\n *\n * For example, ""\45"" should go back to being the specific value (a %).\n *\n * Note that this currently only supports the viable range of octal for Java; namely\n * 1 to 377. This is because parsing Java is the main use case.\n *\n * @since 3.0\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/translate/OctalUnescaper.html"">\n * OctalUnescaper</a>.",public ,org.apache.commons.lang3.text.translate.CharSequenceTranslator,
org.apache.commons.lang3.text.translate.JavaUnicodeEscaper,Class,"* Translates code points to their Unicode escaped value suitable for Java source.\n *\n * @since 3.2\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/translate/UnicodeEscaper.html"">\n * UnicodeEscaper</a>.",public ,org.apache.commons.lang3.text.translate.UnicodeEscaper,
org.apache.commons.lang3.text.translate.LookupTranslator,Class,"* Translates a value using a lookup table.\n *\n * @since 3.0\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/translate/LookupTranslator.html"">\n * LookupTranslator</a>.",public ,org.apache.commons.lang3.text.translate.CharSequenceTranslator,
org.apache.commons.lang3.text.translate.UnicodeUnescaper,Class,"* Translates escaped Unicode values of the form \\u+\d\d\d\d back to\n * Unicode. It supports multiple 'u' characters and will work with or\n * without the +.\n *\n * @since 3.0\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/translate/UnicodeUnescaper.html"">\n * UnicodeUnescaper</a>.",public ,org.apache.commons.lang3.text.translate.CharSequenceTranslator,
org.apache.commons.lang3.text.translate.UnicodeEscaper,Class,"* Translates code points to their Unicode escaped value.\n *\n * @since 3.0\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/translate/UnicodeEscaper.html"">\n * UnicodeEscaper</a>.",public ,org.apache.commons.lang3.text.translate.CodePointTranslator,
org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemover,Class,"* Helper subclass to CharSequenceTranslator to remove unpaired surrogates.\n *\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/translate/UnicodeUnpairedSurrogateRemover.html"">\n * UnicodeUnpairedSurrogateRemover</a>.",public ,org.apache.commons.lang3.text.translate.CodePointTranslator,
org.apache.commons.lang3.text.translate.EntityArrays,Class,"* Class holding various entity data for HTML and XML - generally for use with\n * the LookupTranslator.\n * All arrays are of length [*][2].\n *\n * @since 3.0\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/translate/CodePointTranslator.html"">\n * EntityArrays</a>.",public ,,
org.apache.commons.lang3.text.translate.NumericEntityEscaper,Class,"* Translates code points to their XML numeric entity escaped value.\n *\n * @since 3.0\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/translate/NumericEntityEscaper.html"">\n * NumericEntityEscaper</a>.",public ,org.apache.commons.lang3.text.translate.CodePointTranslator,
org.apache.commons.lang3.text.translate.CodePointTranslator,Abstract Class,"* Helper subclass to CharSequenceTranslator to allow for translations that\n * will replace up to one character at a time.\n *\n * @since 3.0\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/translate/CodePointTranslator.html"">\n * CharSequenceTranslator</a>.","public , abstract ",org.apache.commons.lang3.text.translate.CharSequenceTranslator,
org.apache.commons.lang3.text.StrBuilder,Class,"* Builds a string from constituent parts providing a more flexible and powerful API\n * than StringBuffer.\n * <p>\n * The main differences from StringBuffer/StringBuilder are:\n * </p>\n * <ul>\n * <li>Not synchronized</li>\n * <li>Not final</li>\n * <li>Subclasses have direct access to character array</li>\n * <li>Additional methods\n *  <ul>\n *   <li>appendWithSeparators - adds an array of values, with a separator</li>\n *   <li>appendPadding - adds a length padding characters</li>\n *   <li>appendFixedLength - adds a fixed width field to the builder</li>\n *   <li>toCharArray/getChars - simpler ways to get a range of the character array</li>\n *   <li>delete - delete char or string</li>\n *   <li>replace - search and replace for a char or string</li>\n *   <li>leftString/rightString/midString - substring without exceptions</li>\n *   <li>contains - whether the builder contains a char or string</li>\n *   <li>size/clear/isEmpty - collections style API methods</li>\n *  </ul>\n * </li>\n * <li>Views\n *  <ul>\n *   <li>asTokenizer - uses the internal buffer as the source of a StrTokenizer</li>\n *   <li>asReader - uses the internal buffer as the source of a Reader</li>\n *   <li>asWriter - allows a Writer to write directly to the internal buffer</li>\n *  </ul>\n * </li>\n * </ul>\n * <p>\n * The aim has been to provide an API that mimics very closely what StringBuffer\n * provides, but with additional methods. It should be noted that some edge cases,\n * with invalid indices or null input, have been altered - see individual methods.\n * The biggest of these changes is that by default, null will not output the text\n * 'null'. This can be controlled by a property, {@link #setNullText(String)}.\n * </p>\n * <p>\n * Prior to 3.0, this class implemented Cloneable but did not implement the\n * clone method so could not be used. From 3.0 onwards it no longer implements\n * the interface.\n * </p>\n *\n * @since 2.2\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/TextStringBuilder.html"">\n * TextStringBuilder</a>.",public ,,java.lang.CharSequence;java.lang.Appendable;java.io.Serializable;org.apache.commons.lang3.builder.Builder
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader,Class,* Inner class to allow StrBuilder to operate as a reader.,final ,java.io.Reader,
org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer,Class,* Inner class to allow StrBuilder to operate as a tokenizer.,final ,org.apache.commons.lang3.text.StrTokenizer,
org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter,Class,* Inner class to allow StrBuilder to operate as a writer.,final ,java.io.Writer,
org.apache.commons.lang3.text.CompositeFormat,Class,"* Formats using one formatter and parses using a different formatter. An\n * example of use for this would be a webapp where data is taken in one way and\n * stored in a database another way.\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/CompositeFormat.html"">\n * CompositeFormat</a>.",public ,java.text.Format,
org.apache.commons.lang3.text.StrTokenizer,Class,"* Tokenizes a string based on delimiters (separators)\n * and supporting quoting and ignored character concepts.\n * <p>\n * This class can split a String into many smaller strings. It aims\n * to do a similar job to {@link java.util.StringTokenizer StringTokenizer},\n * however it offers much more control and flexibility including implementing\n * the {@link ListIterator} interface. By default, it is set up\n * like {@link StringTokenizer}.\n * </p>\n * <p>\n * The input String is split into a number of <em>tokens</em>.\n * Each token is separated from the next String by a <em>delimiter</em>.\n * One or more delimiter characters must be specified.\n * </p>\n * <p>\n * Each token may be surrounded by quotes.\n * The <em>quote</em> matcher specifies the quote character(s).\n * A quote may be escaped within a quoted section by duplicating itself.\n * </p>\n * <p>\n * Between each token and the delimiter are potentially characters that need trimming.\n * The <em>trimmer</em> matcher specifies these characters.\n * One usage might be to trim whitespace characters.\n * </p>\n * <p>\n * At any point outside the quotes there might potentially be invalid characters.\n * The <em>ignored</em> matcher specifies these characters to be removed.\n * One usage might be to remove new line characters.\n * </p>\n * <p>\n * Empty tokens may be removed or returned as null.\n * </p>\n * <pre>\n * ""a,b,c""         - Three tokens ""a"",""b"",""c""   (comma delimiter)\n * "" a, b , c ""    - Three tokens ""a"",""b"",""c""   (default CSV processing trims whitespace)\n * ""a, "", b ,"", c"" - Three tokens ""a, "" , "" b "", "", c"" (quoted text untouched)\n * </pre>\n *\n * <table>\n *  <caption>StrTokenizer properties and options</caption>\n *  <tr>\n *   <th>Property</th><th>Type</th><th>Default</th>\n *  </tr>\n *  <tr>\n *   <td>delim</td><td>CharSetMatcher</td><td>{ \t\n\r\f}</td>\n *  </tr>\n *  <tr>\n *   <td>quote</td><td>NoneMatcher</td><td>{}</td>\n *  </tr>\n *  <tr>\n *   <td>ignore</td><td>NoneMatcher</td><td>{}</td>\n *  </tr>\n *  <tr>\n *   <td>emptyTokenAsNull</td><td>boolean</td><td>false</td>\n *  </tr>\n *  <tr>\n *   <td>ignoreEmptyTokens</td><td>boolean</td><td>true</td>\n *  </tr>\n * </table>\n *\n * @since 2.2\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/StringTokenizer.html"">\n * StringTokenizer</a>.",public ,,java.util.ListIterator;java.lang.Cloneable
org.apache.commons.lang3.text.StrMatcher,Abstract Class,"* A matcher class that can be queried to determine if a character array\n * portion matches.\n * <p>\n * This class comes complete with various factory methods.\n * If these do not suffice, you can subclass and implement your own matcher.\n * </p>\n *\n * @since 2.2\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/matcher/StringMatcherFactory.html"">\n * StringMatcherFactory</a>.","public , abstract ",,
org.apache.commons.lang3.text.StrMatcher$CharMatcher,Class,* Class used to define a character for matching purposes.,"static , final ",org.apache.commons.lang3.text.StrMatcher,
org.apache.commons.lang3.text.StrMatcher$CharSetMatcher,Class,* Class used to define a set of characters for matching purposes.,"static , final ",org.apache.commons.lang3.text.StrMatcher,
org.apache.commons.lang3.text.StrMatcher$NoMatcher,Class,* Class used to match no characters.,"static , final ",org.apache.commons.lang3.text.StrMatcher,
org.apache.commons.lang3.text.StrMatcher$StringMatcher,Class,* Class used to define a set of characters for matching purposes.,"static , final ",org.apache.commons.lang3.text.StrMatcher,
org.apache.commons.lang3.text.StrMatcher$TrimMatcher,Class,* Class used to match whitespace as per trim().,"static , final ",org.apache.commons.lang3.text.StrMatcher,
org.apache.commons.lang3.text.FormattableUtils,Class,"* Provides utilities for working with the {@link Formattable} interface.\n *\n * <p>The {@link Formattable} interface provides basic control over formatting\n * when using a {@link Formatter}. It is primarily concerned with numeric precision\n * and padding, and is not designed to allow generalized alternate formats.</p>\n *\n * @since 3.0\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/FormattableUtils.html"">\n * FormattableUtils</a>.",public ,,
org.apache.commons.lang3.text.FormatFactory,Interface,"* Format factory.\n *\n * @since 2.4\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/FormatFactory.html"">\n * FormatFactory</a>.",public ,,
org.apache.commons.lang3.text.ExtendedMessageFormat,Class,"* Extends {@link java.text.MessageFormat} to allow pluggable/additional formatting\n * options for embedded format elements.  Client code should specify a registry\n * of {@link FormatFactory} instances associated with {@link String}\n * format names.  This registry will be consulted when the format elements are\n * parsed from the message pattern.  In this way custom patterns can be specified,\n * and the formats supported by {@link java.text.MessageFormat} can be overridden\n * at the format and/or format style level (see MessageFormat).  A ""format element""\n * embedded in the message pattern is specified (<strong>()?</strong> signifies optionality):<br>\n * <code>{</code><em>argument-number</em><strong>(</strong>{@code ,}<em>format-name</em><b>\n * (</b>{@code ,}<em>format-style</em><strong>)?)?</strong><code>}</code>\n *\n * <p>\n * <em>format-name</em> and <em>format-style</em> values are trimmed of surrounding whitespace\n * in the manner of {@link java.text.MessageFormat}.  If <em>format-name</em> denotes\n * {@code FormatFactory formatFactoryInstance} in {@code registry}, a {@link Format}\n * matching <em>format-name</em> and <em>format-style</em> is requested from\n * {@code formatFactoryInstance}.  If this is successful, the {@link Format}\n * found is used for this format element.\n * </p>\n *\n * <p><strong>NOTICE:</strong> The various subformat mutator methods are considered unnecessary; they exist on the parent\n * class to allow the type of customization which it is the job of this class to provide in\n * a configurable fashion.  These methods have thus been disabled and will throw\n * {@link UnsupportedOperationException} if called.\n * </p>\n *\n * <p>Limitations inherited from {@link java.text.MessageFormat}:</p>\n * <ul>\n * <li>When using ""choice"" subformats, support for nested formatting instructions is limited\n *     to that provided by the base class.</li>\n * <li>Thread-safety of {@link Format}s, including {@link MessageFormat} and thus\n *     {@link ExtendedMessageFormat}, is not guaranteed.</li>\n * </ul>\n *\n * @since 2.4\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/ExtendedMessageFormat.html"">\n * ExtendedMessageFormat</a>.",public ,java.text.MessageFormat,
org.apache.commons.lang3.text.WordUtils,Class,"* Operations on Strings that contain words.\n *\n * <p>This class tries to handle {@code null} input gracefully.\n * An exception will not be thrown for a {@code null} input.\n * Each method documents its behavior in more detail.</p>\n *\n * @since 2.0\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/WordUtils.html"">\n * WordUtils</a>.",public ,,
org.apache.commons.lang3.text.StrLookup,Abstract Class,"* Lookup a String key to a String value.\n * <p>\n * This class represents the simplest form of a string to string map.\n * It has a benefit over a map in that it can create the result on\n * demand based on the key.\n * </p>\n * <p>\n * This class comes complete with various factory methods.\n * If these do not suffice, you can subclass and implement your own matcher.\n * </p>\n * <p>\n * For example, it would be possible to implement a lookup that used the\n * key as a primary key, and looked up the value on demand from the database.\n * </p>\n *\n * @param <V> Unused.\n * @since 2.2\n * @deprecated As of <a href=""https://commons.apache.org/proper/commons-lang/changes-report.html#a3.6"">3.6</a>, use Apache Commons Text\n * <a href=""https://commons.apache.org/proper/commons-text/javadocs/api-release/org/apache/commons/text/lookup/StringLookupFactory.html"">\n * StringLookupFactory</a>.","public , abstract ",,
org.apache.commons.lang3.text.StrLookup$MapStrLookup,Class,* Lookup implementation that uses a Map.\n     *\n     * @param <V> the type of mapped values.,static ,org.apache.commons.lang3.text.StrLookup,
org.apache.commons.lang3.text.StrLookup$SystemPropertiesStrLookup,Class,* Lookup implementation based on system properties.,"private , static , final ",org.apache.commons.lang3.text.StrLookup,
org.apache.commons.lang3.AnnotationUtils,Class,"* Helper methods for working with {@link Annotation} instances.\n *\n * <p>This class contains various utility methods that make working with\n * annotations simpler.</p>\n *\n * <p>{@link Annotation} instances are always proxy objects; unfortunately\n * dynamic proxies cannot be depended upon to know how to implement certain\n * methods in the same manner as would be done by ""natural"" {@link Annotation}s.\n * The methods presented in this class can be used to avoid that possibility. It\n * is of course also possible for dynamic proxies to actually delegate their\n * e.g. {@link Annotation#equals(Object)}/{@link Annotation#hashCode()}/\n * {@link Annotation#toString()} implementations to {@link AnnotationUtils}.</p>\n *\n * <p>#ThreadSafe#</p>\n *\n * @since 3.0",public ,,
org.apache.commons.lang3.Streams,Class,"* Provides utility functions, and classes for working with the\n * {@code java.util.stream} package, or more generally, with Java 8 lambdas. More\n * specifically, it attempts to address the fact that lambdas are supposed\n * not to throw Exceptions, at least not checked Exceptions, AKA instances\n * of {@link Exception}. This enforces the use of constructs like\n * <pre>{@code\n *     Consumer<java.lang.reflect.Method> consumer = m -> {\n *         try {\n *             m.invoke(o, args);\n *         } catch (Throwable t) {\n *             throw Functions.rethrow(t);\n *         }\n *    };\n *    stream.forEach(consumer);\n * }</pre>\n * Using a {@link FailableStream}, this can be rewritten as follows:\n * <pre>{@code\n *     Streams.failable(stream).forEach(m -> m.invoke(o, args));\n * }</pre>\n * Obviously, the second version is much more concise and the spirit of\n * Lambda expressions is met better than in the first version.\n *\n * @see Stream\n * @see Functions\n * @since 3.10\n * @deprecated Use {@link org.apache.commons.lang3.stream.Streams}.",public ,,
org.apache.commons.lang3.Streams$ArrayCollector,Class,* A Collector type for arrays.\n     *\n     * @param <O> The array type.\n     * @deprecated Use {@link org.apache.commons.lang3.stream.Streams.ArrayCollector}.,"public , static ",,java.util.stream.Collector
org.apache.commons.lang3.Streams$FailableStream,Class,"* A reduced, and simplified version of a {@link Stream} with\n     * failable method signatures.\n     * @param <O> The streams element type.\n     * @deprecated Use {@link org.apache.commons.lang3.stream.Streams.FailableStream}.","public , static ",,
org.apache.commons.lang3.ArrayFill,Class,* Fills and returns arrays in the fluent style.\n *\n * @since 3.14.0,"public , final ",,
org.apache.commons.lang3.BooleanUtils,Class,* Operations on boolean primitives and Boolean objects.\n *\n * <p>This class tries to handle {@code null} input gracefully.\n * An exception will not be thrown for a {@code null} input.\n * Each method documents its behavior in more detail.</p>\n *\n * <p>#ThreadSafe#</p>\n * @since 2.0,public ,,
org.apache.commons.lang3.ClassPathUtils,Class,@Immutable,public ,,
org.apache.commons.lang3.builder.AbstractSupplier,Abstract Class,* Abstracts supplying an instance of {@code T}. Use to implement the builder pattern.\n *\n * @param <T> The type of results supplied by this supplier.\n * @param <B> the type of builder.\n * @param <E> The kind of thrown exception or error.\n * @since 3.14.0,"public , abstract ",,org.apache.commons.lang3.function.FailableSupplier
org.apache.commons.lang3.builder.RecursiveToStringStyle,Class,"* Works with {@link ToStringBuilder} to create a ""deep"" {@code toString}.\n *\n * <p>To use this class write code as follows:</p>\n *\n * <pre>\n * public class Job {\n *   String title;\n *   ...\n * }\n *\n * public class Person {\n *   String name;\n *   int age;\n *   boolean smoker;\n *   Job job;\n *\n *   ...\n *\n *   public String toString() {\n *     return new ReflectionToStringBuilder(this, new RecursiveToStringStyle()).toString();\n *   }\n * }\n * </pre>\n *\n * <p>This will produce a toString of the format:\n * {@code Person@7f54[name=Stephen,age=29,smoker=false,job=Job@43cd2[title=Manager]]}</p>\n *\n * @since 3.2",public ,org.apache.commons.lang3.builder.ToStringStyle,
org.apache.commons.lang3.builder.Builder,Interface,"* The Builder interface is designed to designate a class as a <em>builder</em>\n * object in the Builder design pattern. Builders are capable of creating and\n * configuring objects or results that normally take multiple steps to construct\n * or are very complex to derive.\n *\n * <p>\n * The builder interface defines a single method, {@link #build()}, that\n * classes must implement. The result of this method should be the final\n * configured object or result after all building operations are performed.\n * </p>\n *\n * <p>\n * It is a recommended practice that the methods supplied to configure the\n * object or result being built return a reference to {@code this} so that\n * method calls can be chained together.\n * </p>\n *\n * <p>\n * Example Builder:\n * <pre>{@code\n * class FontBuilder implements Builder<Font> {\n *     private Font font;\n *\n *     public FontBuilder(String fontName) {\n *         this.font = new Font(fontName, Font.PLAIN, 12);\n *     }\n *\n *     public FontBuilder bold() {\n *         this.font = this.font.deriveFont(Font.BOLD);\n *         return this; // Reference returned so calls can be chained\n *     }\n *\n *     public FontBuilder size(float pointSize) {\n *         this.font = this.font.deriveFont(pointSize);\n *         return this; // Reference returned so calls can be chained\n *     }\n *\n *     // Other Font construction methods\n *\n *     public Font build() {\n *         return this.font;\n *     }\n * }\n * }</pre>\n *\n * Example Builder Usage:\n * <pre>{@code\n * Font bold14ptSansSerifFont = new FontBuilder(Font.SANS_SERIF).bold()\n *                                                              .size(14.0f)\n *                                                              .build();\n * }</pre>\n *\n * @param <T> the type of object that the builder will construct or compute.\n * @since 3.0",public ,,
org.apache.commons.lang3.builder.Reflection,Class,* Package-private reflection code.,final ,,
org.apache.commons.lang3.builder.ReflectionToStringBuilder,Class,"* Assists in implementing {@link Object#toString()} methods using reflection.\n *\n * <p>\n * This class uses reflection to determine the fields to append. Because these fields are usually private, the class\n * uses {@link java.lang.reflect.AccessibleObject#setAccessible(java.lang.reflect.AccessibleObject[], boolean)} to\n * change the visibility of the fields. This will fail under a security manager, unless the appropriate permissions are\n * set up correctly.\n * </p>\n * <p>\n * Using reflection to access (private) fields circumvents any synchronization protection guarding access to these\n * fields. If a toString method cannot safely read a field, you should exclude it from the toString method, or use\n * synchronization consistent with the class' lock management around the invocation of the method. Take special care to\n * exclude non-thread-safe collection classes, because these classes may throw ConcurrentModificationException if\n * modified while the toString method is executing.\n * </p>\n * <p>\n * A typical invocation for this method would look like:\n * </p>\n * <pre>\n * public String toString() {\n *     return ReflectionToStringBuilder.toString(this);\n * }\n * </pre>\n * <p>\n * You can also use the builder to debug 3rd party objects:\n * </p>\n * <pre>\n * System.out.println(&quot;An object: &quot; + ReflectionToStringBuilder.toString(anObject));\n * </pre>\n * <p>\n * A subclass can control field output by overriding the methods:\n * </p>\n * <ul>\n * <li>{@link #accept(java.lang.reflect.Field)}</li>\n * <li>{@link #getValue(java.lang.reflect.Field)}</li>\n * </ul>\n * <p>\n * For example, this method does <em>not</em> include the {@code password} field in the returned {@link String}:\n * </p>\n * <pre>\n * public String toString() {\n *     return (new ReflectionToStringBuilder(this) {\n *         protected boolean accept(Field f) {\n *             return super.accept(f) &amp;&amp; !f.getName().equals(&quot;password&quot;);\n *         }\n *     }).toString();\n * }\n * </pre>\n * <p>\n * Alternatively the {@link ToStringExclude} annotation can be used to exclude fields from being incorporated in the\n * result.\n * </p>\n * <p>\n * It is also possible to use the {@link ToStringSummary} annotation to output the summary information instead of the\n * detailed information of a field.\n * </p>\n * <p>\n * The exact format of the {@code toString} is determined by the {@link ToStringStyle} passed into the constructor.\n * </p>\n *\n * <p>\n * <strong>Note:</strong> the default {@link ToStringStyle} will only do a ""shallow"" formatting, i.e. composed objects are not\n * further traversed. To get ""deep"" formatting, use an instance of {@link RecursiveToStringStyle}.\n * </p>\n *\n * @since 2.0",public ,org.apache.commons.lang3.builder.ToStringBuilder,
org.apache.commons.lang3.builder.StandardToStringStyle,Class,"* Works with {@link ToStringBuilder} to create a {@code toString}.\n *\n * <p>This class is intended to be used as a singleton.\n * There is no need to instantiate a new style each time.\n * Simply instantiate the class once, customize the values as required, and\n * store the result in a public static final variable for the rest of the\n * program to access.</p>\n *\n * @since 1.0",public ,org.apache.commons.lang3.builder.ToStringStyle,
org.apache.commons.lang3.builder.ToStringStyle,Abstract Class,"* Controls {@link String} formatting for {@link ToStringBuilder}.\n * The main public interface is always via {@link ToStringBuilder}.\n *\n * <p>These classes are intended to be used as <em>singletons</em>.\n * There is no need to instantiate a new style each time. A program\n * will generally use one of the predefined constants on this class.\n * Alternatively, the {@link StandardToStringStyle} class can be used\n * to set the individual settings. Thus most styles can be achieved\n * without subclassing.</p>\n *\n * <p>If required, a subclass can override as many or as few of the\n * methods as it requires. Each object type (from {@code boolean}\n * to {@code long} to {@link Object} to {@code int[]}) has\n * its own methods to output it. Most have two versions, detail and summary.\n *\n * <p>For example, the detail version of the array based methods will\n * output the whole array, whereas the summary method will just output\n * the array length.</p>\n *\n * <p>If you want to format the output of certain objects, such as dates, you\n * must create a subclass and override a method.\n * </p>\n * <pre>\n * public class MyStyle extends ToStringStyle {\n *   protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\n *     if (value instanceof Date) {\n *       value = new SimpleDateFormat(""yyyy-MM-dd"").format(value);\n *     }\n *     buffer.append(value);\n *   }\n * }\n * </pre>\n *\n * @since 1.0","public , abstract ",,java.io.Serializable
org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle,Class,* Default {@link ToStringStyle}.\n     *\n     * <p>This is an inner class rather than using\n     * {@link StandardToStringStyle} to ensure its immutability.</p>,"private , static , final ",org.apache.commons.lang3.builder.ToStringStyle,
org.apache.commons.lang3.builder.ToStringStyle$JsonToStringStyle,Class,"* {@link ToStringStyle} that outputs with JSON format.\n     *\n     * <p>\n     * This is an inner class rather than using\n     * {@link StandardToStringStyle} to ensure its immutability.\n     * </p>\n     *\n     * @since 3.4\n     * @see <a href=""https://www.json.org/"">json.org</a>","private , static , final ",org.apache.commons.lang3.builder.ToStringStyle,
org.apache.commons.lang3.builder.ToStringStyle$MultiLineToStringStyle,Class,* {@link ToStringStyle} that outputs on multiple lines.\n     *\n     * <p>This is an inner class rather than using\n     * {@link StandardToStringStyle} to ensure its immutability.</p>,"private , static , final ",org.apache.commons.lang3.builder.ToStringStyle,
org.apache.commons.lang3.builder.ToStringStyle$NoClassNameToStringStyle,Class,* {@link ToStringStyle} that does not print out the class name\n     * and identity hash code but prints content start and field names.\n     *\n     * <p>This is an inner class rather than using\n     * {@link StandardToStringStyle} to ensure its immutability.</p>,"private , static , final ",org.apache.commons.lang3.builder.ToStringStyle,
org.apache.commons.lang3.builder.ToStringStyle$NoFieldNameToStringStyle,Class,* {@link ToStringStyle} that does not print out\n     * the field names.\n     *\n     * <p>This is an inner class rather than using\n     * {@link StandardToStringStyle} to ensure its immutability.,"private , static , final ",org.apache.commons.lang3.builder.ToStringStyle,
org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle,Class,* {@link ToStringStyle} that prints out the short\n     * class name and no identity hash code.\n     *\n     * <p>This is an inner class rather than using\n     * {@link StandardToStringStyle} to ensure its immutability.</p>,"private , static , final ",org.apache.commons.lang3.builder.ToStringStyle,
org.apache.commons.lang3.builder.ToStringStyle$SimpleToStringStyle,Class,"* {@link ToStringStyle} that does not print out the\n     * class name, identity hash code, content start or field name.\n     *\n     * <p>This is an inner class rather than using\n     * {@link StandardToStringStyle} to ensure its immutability.</p>","private , static , final ",org.apache.commons.lang3.builder.ToStringStyle,
org.apache.commons.lang3.builder.HashCodeBuilder,Class,"* Assists in implementing {@link Object#hashCode()} methods.\n *\n * <p>\n * This class enables a good {@code hashCode} method to be built for any class. It follows the rules laid out in\n * the book <a href=""https://www.oracle.com/technetwork/java/effectivejava-136174.html"">Effective Java</a> by Joshua Bloch. Writing a\n * good {@code hashCode} method is actually quite difficult. This class aims to simplify the process.\n * </p>\n *\n * <p>\n * The following is the approach taken. When appending a data field, the current total is multiplied by the\n * multiplier then a relevant value\n * for that data type is added. For example, if the current hashCode is 17, and the multiplier is 37, then\n * appending the integer 45 will create a hash code of 674, namely 17 * 37 + 45.\n * </p>\n *\n * <p>\n * All relevant fields from the object should be included in the {@code hashCode} method. Derived fields may be\n * excluded. In general, any field used in the {@code equals} method must be used in the {@code hashCode}\n * method.\n * </p>\n *\n * <p>\n * To use this class write code as follows:\n * </p>\n *\n * <pre>\n * public class Person {\n *   String name;\n *   int age;\n *   boolean smoker;\n *   ...\n *\n *   public int hashCode() {\n *     // you pick a hard-coded, randomly chosen, non-zero, odd number\n *     // ideally different for each class\n *     return new HashCodeBuilder(17, 37).\n *       append(name).\n *       append(age).\n *       append(smoker).\n *       toHashCode();\n *   }\n * }\n * </pre>\n *\n * <p>\n * If required, the superclass {@code hashCode()} can be added using {@link #appendSuper}.\n * </p>\n *\n * <p>\n * Alternatively, there is a method that uses reflection to determine the fields to test. Because these fields are\n * usually private, the method, {@code reflectionHashCode}, uses {@code AccessibleObject.setAccessible}\n * to change the visibility of the fields. This will fail under a security manager, unless the appropriate permissions\n * are set up correctly. It is also slower than testing explicitly.\n * </p>\n *\n * <p>\n * A typical invocation for this method would look like:\n * </p>\n *\n * <pre>\n * public int hashCode() {\n *   return HashCodeBuilder.reflectionHashCode(this);\n * }\n * </pre>\n *\n * <p>The {@link HashCodeExclude} annotation can be used to exclude fields from being\n * used by the {@code reflectionHashCode} methods.</p>\n *\n * @since 1.0",public ,,org.apache.commons.lang3.builder.Builder
org.apache.commons.lang3.builder.CompareToBuilder,Class,"* Assists in implementing {@link Comparable#compareTo(Object)} methods.\n *\n * <p>It is consistent with {@code equals(Object)} and\n * {@code hashCode()} built with {@link EqualsBuilder} and\n * {@link HashCodeBuilder}.</p>\n *\n * <p>Two Objects that compare equal using {@code equals(Object)} should normally\n * also compare equal using {@code compareTo(Object)}.</p>\n *\n * <p>All relevant fields should be included in the calculation of the\n * comparison. Derived fields may be ignored. The same fields, in the same\n * order, should be used in both {@code compareTo(Object)} and\n * {@code equals(Object)}.</p>\n *\n * <p>To use this class write code as follows:</p>\n *\n * <pre>\n * public class MyClass {\n *   String field1;\n *   int field2;\n *   boolean field3;\n *\n *   ...\n *\n *   public int compareTo(Object o) {\n *     MyClass myClass = (MyClass) o;\n *     return new CompareToBuilder()\n *       .appendSuper(super.compareTo(o)\n *       .append(this.field1, myClass.field1)\n *       .append(this.field2, myClass.field2)\n *       .append(this.field3, myClass.field3)\n *       .toComparison();\n *   }\n * }\n * </pre>\n *\n * <p>Values are compared in the order they are appended to the builder. If any comparison returns\n * a non-zero result, then that value will be the result returned by {@code toComparison()} and all\n * subsequent comparisons are skipped.</p>\n *\n * <p>Alternatively, there are {@link #reflectionCompare(Object, Object) reflectionCompare} methods that use\n * reflection to determine the fields to append. Because fields can be private,\n * {@code reflectionCompare} uses {@link java.lang.reflect.AccessibleObject#setAccessible(boolean)} to\n * bypass normal access control checks. This will fail under a security manager,\n * unless the appropriate permissions are set up correctly. It is also\n * slower than appending explicitly.</p>\n *\n * <p>A typical implementation of {@code compareTo(Object)} using\n * {@code reflectionCompare} looks like:</p>\n\n * <pre>\n * public int compareTo(Object o) {\n *   return CompareToBuilder.reflectionCompare(this, o);\n * }\n * </pre>\n *\n * <p>The reflective methods compare object fields in the order returned by\n * {@link Class#getDeclaredFields()}. The fields of the class are compared first, followed by those\n * of its parent classes (in order from the bottom to the top of the class hierarchy).</p>\n *\n * @see Comparable\n * @see Object#equals(Object)\n * @see Object#hashCode()\n * @see EqualsBuilder\n * @see HashCodeBuilder\n * @since 1.0",public ,,org.apache.commons.lang3.builder.Builder
org.apache.commons.lang3.builder.DiffResult,Class,"* A {@link DiffResult} contains a collection of the differences between two\n * {@link Diffable} objects. Typically these differences are displayed using\n * {@link #toString()} method, which returns a string describing the fields that\n * differ between the objects.\n *\n * <p>\n * Use a {@link DiffBuilder} to build a {@link DiffResult} comparing two objects.\n * </p>\n * @param <T> type of the left and right object.\n * @since 3.3",public ,,java.lang.Iterable
org.apache.commons.lang3.builder.DiffBuilder,Class,"* Assists in implementing {@link Diffable#diff(Object)} methods.\n *\n * <p>\n * To use this class, write code as follows:\n * </p>\n *\n * <pre>{@code\n * public class Person implements Diffable<Person> {\n *   String name;\n *   int age;\n *   boolean smoker;\n *\n *   ...\n *\n *   public DiffResult diff(Person obj) {\n *     // No need for null check, as NullPointerException correct if obj is null\n *     return new DiffBuilder.<Person>builder()\n *         .setLeft(this)\n *         .setRight(obj)\n *         .setStyle(ToStringStyle.SHORT_PREFIX_STYLE))\n *         .build()\n *       .append(""name"", this.name, obj.name)\n *       .append(""age"", this.age, obj.age)\n *       .append(""smoker"", this.smoker, obj.smoker)\n *       .build();\n *   }\n * }\n * }</pre>\n *\n * <p>\n * The {@link ToStringStyle} passed to the constructor is embedded in the returned {@link DiffResult} and influences the style of the\n * {@code DiffResult.toString()} method. This style choice can be overridden by calling {@link DiffResult#toString(ToStringStyle)}.\n * </p>\n * <p>\n * See {@link ReflectionDiffBuilder} for a reflection based version of this class.\n * </p>\n *\n * @param <T> type of the left and right object.\n * @see Diffable\n * @see Diff\n * @see DiffResult\n * @see ToStringStyle\n * @see ReflectionDiffBuilder\n * @since 3.3",public ,,org.apache.commons.lang3.builder.Builder
org.apache.commons.lang3.builder.DiffBuilder$Builder,Class,* Constructs a new instance.\n     *\n     * @param <T> type of the left and right object.\n     * @since 3.15.0,"public , static , final ",,
org.apache.commons.lang3.builder.DiffBuilder$SDiff,Class,No Comment,"private , static , final ",org.apache.commons.lang3.builder.Diff,
org.apache.commons.lang3.builder.DiffBuilder$SerializableSupplier,Interface,* Private interface while we still have to support serialization.\n     *\n     * @param <T> the type of results supplied by this supplier.,private ,java.util.function.Supplier;java.io.Serializable,
org.apache.commons.lang3.builder.Diffable,Interface,"* {@link Diffable} classes can be compared with other objects\n * for differences. The {@link DiffResult} object retrieved can be queried\n * for a list of differences or printed using the {@link DiffResult#toString()}.\n *\n * <p>The calculation of the differences is <em>consistent with equals</em> if\n * and only if {@code d1.equals(d2)} implies {@code d1.diff(d2) == """"}.\n * It is strongly recommended that implementations are consistent with equals\n * to avoid confusion. Note that {@code null} is not an instance of any class\n * and {@code d1.diff(null)} should throw a {@link NullPointerException}.</p>\n *\n * <p>\n * {@link Diffable} classes lend themselves well to unit testing, in which a\n * easily readable description of the differences between an anticipated result and\n * an actual result can be retrieved. For example:\n * </p>\n * <pre>\n * Assert.assertEquals(expected.diff(result), expected, result);\n * </pre>\n *\n * @param <T> the type of objects that this object may be differentiated against\n * @since 3.3",public ,,
org.apache.commons.lang3.builder.ReflectionDiffBuilder,Class,"* Assists in implementing {@link Diffable#diff(Object)} methods.\n *\n * <p>\n * All non-static, non-transient fields (including inherited fields) of the objects to diff are discovered using reflection and compared for differences.\n * </p>\n *\n * <p>\n * To use this class, write code as follows:\n * </p>\n *\n * <pre>{@code\n * public class Person implements Diffable<Person> {\n *   String name;\n *   int age;\n *   boolean smoker;\n *   ...\n *\n *   public DiffResult diff(Person obj) {\n *     // No need for null check, as NullPointerException correct if obj is null\n *     return new ReflectionDiffBuilder.<Person>builder()\n *       .setDiffBuilder(DiffBuilder.<Person>builder()\n *           .setLeft(this)\n *           .setRight(obj)\n *           .setStyle(ToStringStyle.SHORT_PREFIX_STYLE)\n *           .build())\n *       .setExcludeFieldNames(""userName"", ""password"")\n *       .build();\n *   }\n * }\n * }</pre>\n *\n * <p>\n * The {@link ToStringStyle} passed to the constructor is embedded in the returned {@link DiffResult} and influences the style of the\n * {@code DiffResult.toString()} method. This style choice can be overridden by calling {@link DiffResult#toString(ToStringStyle)}.\n * </p>\n * <p>\n * See {@link DiffBuilder} for a non-reflection based version of this class.\n * </p>\n *\n * @param <T> type of the left and right object to diff.\n * @see Diffable\n * @see Diff\n * @see DiffResult\n * @see ToStringStyle\n * @see DiffBuilder\n * @since 3.6",public ,,org.apache.commons.lang3.builder.Builder
org.apache.commons.lang3.builder.ReflectionDiffBuilder$Builder,Class,* Constructs a new instance.\n     *\n     * @param <T> type of the left and right object.\n     * @since 3.15.0,"public , static , final ",,
org.apache.commons.lang3.builder.ToStringBuilder,Class,"* Assists in implementing {@link Object#toString()} methods.\n *\n * <p>This class enables a good and consistent {@code toString()} to be built for any\n * class or object. This class aims to simplify the process by:</p>\n * <ul>\n *  <li>allowing field names</li>\n *  <li>handling all types consistently</li>\n *  <li>handling nulls consistently</li>\n *  <li>outputting arrays and multi-dimensional arrays</li>\n *  <li>enabling the detail level to be controlled for Objects and Collections</li>\n *  <li>handling class hierarchies</li>\n * </ul>\n *\n * <p>To use this class write code as follows:</p>\n *\n * <pre>\n * public class Person {\n *   String name;\n *   int age;\n *   boolean smoker;\n *\n *   ...\n *\n *   public String toString() {\n *     return new ToStringBuilder(this).\n *       append(""name"", name).\n *       append(""age"", age).\n *       append(""smoker"", smoker).\n *       toString();\n *   }\n * }\n * </pre>\n *\n * <p>This will produce a toString of the format:\n * {@code Person@7f54[name=Stephen,age=29,smoker=false]}</p>\n *\n * <p>To add the superclass {@code toString}, use {@link #appendSuper}.\n * To append the {@code toString} from an object that is delegated\n * to (or any other object), use {@link #appendToString}.</p>\n *\n * <p>Alternatively, there is a method that uses reflection to determine\n * the fields to test. Because these fields are usually private, the method,\n * {@code reflectionToString}, uses {@code AccessibleObject.setAccessible} to\n * change the visibility of the fields. This will fail under a security manager,\n * unless the appropriate permissions are set up correctly. It is also\n * slower than testing explicitly.</p>\n *\n * <p>A typical invocation for this method would look like:</p>\n *\n * <pre>\n * public String toString() {\n *   return ToStringBuilder.reflectionToString(this);\n * }\n * </pre>\n *\n * <p>You can also use the builder to debug 3rd party objects:</p>\n *\n * <pre>\n * System.out.println(""An object: "" + ToStringBuilder.reflectionToString(anObject));\n * </pre>\n *\n * <p>The exact format of the {@code toString} is determined by\n * the {@link ToStringStyle} passed into the constructor.</p>\n *\n * @since 1.0",public ,,org.apache.commons.lang3.builder.Builder
org.apache.commons.lang3.builder.Diff,Abstract Class,"* A {@link Diff} contains the differences between two {@link Diffable} class\n * fields.\n *\n * <p>\n * Typically, {@link Diff}s are retrieved by using a {@link DiffBuilder} to\n * produce a {@link DiffResult}, containing the differences between two objects.\n * </p>\n *\n * @param <T>\n *            The type of object contained within this {@link Diff}. Differences\n *            between primitive objects are stored as their Object wrapper\n *            equivalent.\n * @since 3.3","public , abstract ",org.apache.commons.lang3.tuple.Pair,
org.apache.commons.lang3.builder.MultilineRecursiveToStringStyle,Class,"* Works with {@link ToStringBuilder} to create a ""deep"" {@code toString}.\n * But instead a single line like the {@link RecursiveToStringStyle} this creates a multiline String\n * similar to the {@link ToStringStyle#MULTI_LINE_STYLE}.\n *\n * <p>To use this class write code as follows:</p>\n *\n * <pre>\n * public class Job {\n *   String title;\n *   ...\n * }\n *\n * public class Person {\n *   String name;\n *   int age;\n *   boolean smoker;\n *   Job job;\n *\n *   ...\n *\n *   public String toString() {\n *     return new ReflectionToStringBuilder(this, new MultilineRecursiveToStringStyle()).toString();\n *   }\n * }\n * </pre>\n *\n * <p>\n * This will produce a toString of the format:<br>\n * {@code Person@7f54[ <br>\n * &nbsp; name=Stephen, <br>\n * &nbsp; age=29, <br>\n * &nbsp; smokealse, <br>\n * &nbsp; job=Job@43cd2[ <br>\n * &nbsp; &nbsp; title=Manager <br>\n * &nbsp;  ] <br>\n * ]\n * }\n * </p>\n *\n * @since 3.4",public ,org.apache.commons.lang3.builder.RecursiveToStringStyle,
org.apache.commons.lang3.builder.EqualsBuilder,Class,"* Assists in implementing {@link Object#equals(Object)} methods.\n *\n * <p>This class provides methods to build a good equals method for any\n * class. It follows rules laid out in\n * <a href=""https://www.oracle.com/java/technologies/effectivejava.html"">Effective Java</a>\n * , by Joshua Bloch. In particular the rule for comparing {@code doubles},\n * {@code floats}, and arrays can be tricky. Also, making sure that\n * {@code equals()} and {@code hashCode()} are consistent can be\n * difficult.</p>\n *\n * <p>Two Objects that compare as equals must generate the same hash code,\n * but two Objects with the same hash code do not have to be equal.</p>\n *\n * <p>All relevant fields should be included in the calculation of equals.\n * Derived fields may be ignored. In particular, any field used in\n * generating a hash code must be used in the equals method, and vice\n * versa.</p>\n *\n * <p>Typical use for the code is as follows:</p>\n * <pre>\n * public boolean equals(Object obj) {\n *   if (obj == null) { return false; }\n *   if (obj == this) { return true; }\n *   if (obj.getClass() != getClass()) {\n *     return false;\n *   }\n *   MyClass rhs = (MyClass) obj;\n *   return new EqualsBuilder()\n *                 .appendSuper(super.equals(obj))\n *                 .append(field1, rhs.field1)\n *                 .append(field2, rhs.field2)\n *                 .append(field3, rhs.field3)\n *                 .isEquals();\n *  }\n * </pre>\n *\n * <p>Alternatively, there is a method that uses reflection to determine\n * the fields to test. Because these fields are usually private, the method,\n * {@code reflectionEquals}, uses {@code AccessibleObject.setAccessible} to\n * change the visibility of the fields. This will fail under a security\n * manager, unless the appropriate permissions are set up correctly. It is\n * also slower than testing explicitly.  Non-primitive fields are compared using\n * {@code equals()}.</p>\n *\n * <p>A typical invocation for this method would look like:</p>\n * <pre>\n * public boolean equals(Object obj) {\n *   return EqualsBuilder.reflectionEquals(this, obj);\n * }\n * </pre>\n *\n * <p>The {@link EqualsExclude} annotation can be used to exclude fields from being\n * used by the {@code reflectionEquals} methods.</p>\n *\n * @since 1.0",public ,,org.apache.commons.lang3.builder.Builder
org.apache.commons.lang3.builder.IDKey,Class,* Wrap an identity key (System.identityHashCode()) so that an object can only be equal() to itself.\n *\n * This is necessary to disambiguate the occasional duplicate identityHashCodes that can occur.,final ,,
org.apache.commons.lang3.ThreadUtils,Class,* Helpers for {@link Thread} and {@link ThreadGroup}.\n *\n * <p>\n * #ThreadSafe#\n * </p>\n *\n * @see Thread\n * @see ThreadGroup\n * @since 3.5,public ,,
org.apache.commons.lang3.ThreadUtils$AlwaysTruePredicate,Class,* A predicate implementation which always returns true.\n     *\n     * @deprecated Use a {@link Predicate}.,"private , static , final ",,org.apache.commons.lang3.ThreadUtils.ThreadPredicate;org.apache.commons.lang3.ThreadUtils.ThreadGroupPredicate
org.apache.commons.lang3.ThreadUtils$NamePredicate,Class,"* Used internally, consider private.\n     * <p>\n     * A predicate implementation which matches a thread or thread group name.\n     * </p>\n     *\n     * @deprecated Use a {@link Predicate}.","public , static ",,org.apache.commons.lang3.ThreadUtils.ThreadPredicate;org.apache.commons.lang3.ThreadUtils.ThreadGroupPredicate
org.apache.commons.lang3.ThreadUtils$ThreadGroupPredicate,Interface,* A predicate for selecting thread groups.\n     *\n     * @deprecated Use a {@link Predicate}.,public ,,
org.apache.commons.lang3.ThreadUtils$ThreadIdPredicate,Class,* A predicate implementation which matches a thread id.\n     *\n     * @deprecated Use a {@link Predicate}.,"public , static ",,org.apache.commons.lang3.ThreadUtils.ThreadPredicate
org.apache.commons.lang3.ThreadUtils$ThreadPredicate,Interface,* A predicate for selecting threads.\n     *\n     * @deprecated Use a {@link Predicate}.,public ,,
org.apache.commons.lang3.exception.CloneFailedException,Class,* Exception thrown when a clone cannot be created. In contrast to\n * {@link CloneNotSupportedException} this is a {@link RuntimeException}.\n *\n * @since 3.0,public ,java.lang.RuntimeException,
org.apache.commons.lang3.exception.ExceptionContext,Interface,* Allows the storage and retrieval of contextual information based on label-value\n * pairs for exceptions.\n * <p>\n * Implementations are expected to manage the pairs in a list-style collection\n * that keeps the pairs in the sequence of their addition.\n * </p>\n *\n * @see ContextedException\n * @see ContextedRuntimeException\n * @since 3.0,public ,,
org.apache.commons.lang3.exception.UncheckedReflectiveOperationException,Class,* Unchecked {@link ReflectiveOperationException}.\n *\n * @since 3.13.0,public ,org.apache.commons.lang3.exception.UncheckedException,
org.apache.commons.lang3.exception.UncheckedException,Class,* Abstracts the concept of wrapping a checked exception as unchecked.\n * <p>\n * Subclasses should only be used to wrap checked exception.\n * </p>\n *\n * @since 3.13.0,public ,java.lang.RuntimeException,
org.apache.commons.lang3.exception.ExceptionUtils,Class,* Provides utilities for manipulating and examining\n * {@link Throwable} objects.\n *\n * @since 1.0,public ,,
org.apache.commons.lang3.exception.UncheckedIllegalAccessException,Class,* Unchecked {@link IllegalAccessException}.\n *\n * @since 3.13.0,public ,org.apache.commons.lang3.exception.UncheckedReflectiveOperationException,
org.apache.commons.lang3.exception.DefaultExceptionContext,Class,"* Default implementation of the context storing the label-value pairs for contexted exceptions.\n * <p>\n * This implementation is serializable, however this is dependent on the values that\n * are added also being serializable.\n * </p>\n *\n * @see ContextedException\n * @see ContextedRuntimeException\n * @since 3.0",public ,,org.apache.commons.lang3.exception.ExceptionContext;java.io.Serializable
org.apache.commons.lang3.exception.ContextedException,Class,"* An exception that provides an easy and safe way to add contextual information.\n * <p>\n * An exception trace itself is often insufficient to provide rapid diagnosis of the issue.\n * Frequently what is needed is a select few pieces of local contextual data.\n * Providing this data is tricky however, due to concerns over formatting and nulls.\n * </p><p>\n * The contexted exception approach allows the exception to be created together with a\n * list of context label-value pairs. This additional information is automatically included in\n * the message and printed stack trace.\n * </p><p>\n * An unchecked version of this exception is provided by ContextedRuntimeException.\n * </p>\n * <p>\n * To use this class write code as follows:\n * </p>\n * <pre>\n *   try {\n *     ...\n *   } catch (Exception e) {\n *     throw new ContextedException(""Error posting account transaction"", e)\n *          .addContextValue(""Account Number"", accountNumber)\n *          .addContextValue(""Amount Posted"", amountPosted)\n *          .addContextValue(""Previous Balance"", previousBalance);\n *   }\n * }\n * </pre>\n * <p>\n * or improve diagnose data at a higher level:\n * </p>\n * <pre>\n *   try {\n *     ...\n *   } catch (ContextedException e) {\n *     throw e.setContextValue(""Transaction Id"", transactionId);\n *   } catch (Exception e) {\n *     if (e instanceof ExceptionContext) {\n *       e.setContextValue(""Transaction Id"", transactionId);\n *     }\n *     throw e;\n *   }\n * }\n * </pre>\n * <p>\n * The output in a printStacktrace() (which often is written to a log) would look something like the following:\n * </p>\n * <pre>\n * org.apache.commons.lang3.exception.ContextedException: java.lang.Exception: Error posting account transaction\n *  Exception Context:\n *  [1:Account Number=null]\n *  [2:Amount Posted=100.00]\n *  [3:Previous Balance=-2.17]\n *  [4:Transaction Id=94ef1d15-d443-46c4-822b-637f26244899]\n *\n *  ---------------------------------\n *  at org.apache.commons.lang3.exception.ContextedExceptionTest.testAddValue(ContextedExceptionTest.java:88)\n *  ..... (rest of trace)\n * </pre>\n *\n * @see ContextedRuntimeException\n * @since 3.0",public ,java.lang.Exception,org.apache.commons.lang3.exception.ExceptionContext
org.apache.commons.lang3.exception.ContextedRuntimeException,Class,"* A runtime exception that provides an easy and safe way to add contextual information.\n * <p>\n * An exception trace itself is often insufficient to provide rapid diagnosis of the issue.\n * Frequently what is needed is a select few pieces of local contextual data.\n * Providing this data is tricky however, due to concerns over formatting and nulls.\n * </p><p>\n * The contexted exception approach allows the exception to be created together with a\n * list of context label-value pairs. This additional information is automatically included in\n * the message and printed stack trace.\n * </p><p>\n * A checked version of this exception is provided by ContextedException.\n * </p>\n * <p>\n * To use this class write code as follows:\n * </p>\n * <pre>\n *   try {\n *     ...\n *   } catch (Exception e) {\n *     throw new ContextedRuntimeException(""Error posting account transaction"", e)\n *          .addContextValue(""Account Number"", accountNumber)\n *          .addContextValue(""Amount Posted"", amountPosted)\n *          .addContextValue(""Previous Balance"", previousBalance);\n *   }\n * }\n * </pre>\n * <p>\n * or improve diagnose data at a higher level:\n * </p>\n * <pre>\n *   try {\n *     ...\n *   } catch (ContextedRuntimeException e) {\n *     throw e.setContextValue(""Transaction Id"", transactionId);\n *   } catch (Exception e) {\n *     if (e instanceof ExceptionContext) {\n *       e.setContextValue(""Transaction Id"", transactionId);\n *     }\n *     throw e;\n *   }\n * }\n * </pre>\n * <p>\n * The output in a printStacktrace() (which often is written to a log) would look something like the following:\n * </p>\n * <pre>\n * org.apache.commons.lang3.exception.ContextedRuntimeException: java.lang.Exception: Error posting account transaction\n *  Exception Context:\n *  [1:Account Number=null]\n *  [2:Amount Posted=100.00]\n *  [3:Previous Balance=-2.17]\n *  [4:Transaction Id=94ef1d15-d443-46c4-822b-637f26244899]\n *\n *  ---------------------------------\n *  at org.apache.commons.lang3.exception.ContextedRuntimeExceptionTest.testAddValue(ContextedExceptionTest.java:88)\n *  ..... (rest of trace)\n * </pre>\n *\n * @see ContextedException\n * @since 3.0",public ,java.lang.RuntimeException,org.apache.commons.lang3.exception.ExceptionContext
org.apache.commons.lang3.exception.UncheckedInterruptedException,Class,* Unchecked {@link InterruptedException}.\n *\n * @since 3.13.0,public ,org.apache.commons.lang3.exception.UncheckedException,
org.apache.commons.lang3.event.EventUtils,Class,* Provides some useful event-based utility methods.\n *\n * @since 3.0,public ,,
org.apache.commons.lang3.event.EventUtils$EventBindingInvocationHandler,Class,No Comment,"private , static , final ",,java.lang.reflect.InvocationHandler
org.apache.commons.lang3.event.EventListenerSupport,Class,"* An EventListenerSupport object can be used to manage a list of event\n * listeners of a particular type. The class provides\n * {@link #addListener(Object)} and {@link #removeListener(Object)} methods\n * for registering listeners, as well as a {@link #fire()} method for firing\n * events to the listeners.\n *\n * <p>\n * To use this class, suppose you want to support ActionEvents.  You would do:\n * </p>\n * <pre>{@code\n * public class MyActionEventSource\n * {\n *   private EventListenerSupport<ActionListener> actionListeners =\n *       EventListenerSupport.create(ActionListener.class);\n *\n *   public void someMethodThatFiresAction()\n *   {\n *     ActionEvent e = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, ""somethingCool"");\n *     actionListeners.fire().actionPerformed(e);\n *   }\n * }\n * }</pre>\n *\n * <p>\n * Serializing an {@link EventListenerSupport} instance will result in any\n * non-{@link Serializable} listeners being silently dropped.\n * </p>\n *\n * @param <L> the type of event listener that is supported by this proxy.\n * @since 3.0",public ,,java.io.Serializable
org.apache.commons.lang3.event.EventListenerSupport$ProxyInvocationHandler,Class,* An invocation handler used to dispatch the event(s) to all the listeners.,protected ,,java.lang.reflect.InvocationHandler
org.apache.commons.lang3.NumberRange,Class,"* Specializes {@link Range} for {@link Number}s.\n * <p>\n * We only offer specializations for Integer, Long, and Double (like Java Streams).\n * </p>\n *\n * @param <N> The Number class.\n * @since 3.13.0",public ,org.apache.commons.lang3.Range,
org.apache.commons.lang3.EnumUtils,Class,* Utility library to provide helper methods for Java enums.\n *\n * <p>#ThreadSafe#</p>\n *\n * @since 3.0,public ,,
org.apache.commons.lang3.CharSetUtils,Class,* Operations on {@link CharSet} instances.\n *\n * <p>This class handles {@code null} input gracefully.\n * An exception will not be thrown for a {@code null} input.\n * Each method documents its behavior in more detail.</p>\n *\n * <p>#ThreadSafe#</p>\n * @see CharSet\n * @since 1.0,public ,,
