"FEN","Type","Comment","Source Code","Return Type","Modifier","class_extends","implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer","Class","* Replacement for <code>BytesToNameCanonicalizer</code> which aims at more localized
 * memory access due to flattening of name quad data.
 * Performance improvement modest for simple JSON document data binding (maybe 3%),
 * but should help more for larger symbol tables, or for binary formats like Smile.
 *<p>
 * Hash area is divided into 4 sections:
 *<ol>
 * <li>Primary area (1/2 of total size), direct match from hash (LSB)</li>
 * <li>Secondary area (1/4 of total size), match from {@code hash (LSB) >> 1}</li>
 * <li>Tertiary area (1/8 of total size), match from {@code hash (LSB) >> 2}</li>
 * <li>Spill-over area (remaining 1/8) with linear scan, insertion order</li>
 * <li></li>
 * </ol>
 * and within every area, entries are 4 {@code int}s, where 1 - 3 ints contain 1 - 12
 * UTF-8 encoded bytes of name (null-padded), and last int is offset in
 * {@code _names} that contains actual name Strings.
 *
 * @since 2.6","Class do not obtain Source Code","No return type","public , final ","",""
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.DEFAULT_T_SIZE","Field","* Initial size of the primary hash area. Each entry consumes 4 ints (16 bytes),
     * and secondary area is same as primary; so default size will use 2kB of memory
     * (plus 64x4 or 64x8 (256/512 bytes) for references to Strings, and Strings
     * themselves).","private static final int DEFAULT_T_SIZE = 64;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.MAX_T_SIZE","Field","64k entries == 2M mem hash area","private static final int MAX_T_SIZE = 0x10000;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.MIN_HASH_SIZE","Field","* No point in trying to construct tiny tables, just need to resize soon.","private final static int MIN_HASH_SIZE = 16;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.MAX_ENTRIES_FOR_REUSE","Field","* Let's only share reasonably sized symbol tables. Max size set to 3/4 of 8k;
     * this corresponds to 256k main hash index. This should allow for enough distinct
     * names for almost any case, while preventing ballooning for cases where names
     * are unique (or close thereof).","protected final static int MAX_ENTRIES_FOR_REUSE = 6000;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._parent","Field","* Reference to the root symbol table, for child tables, so
     * that they can merge table information back as necessary.","protected final ByteQuadsCanonicalizer _parent;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._tableInfo","Field","* Member that is only used by the root table instance: root
     * passes immutable state info child instances, and children
     * may return new state if they add entries to the table.
     * Child tables do NOT use the reference.","protected final AtomicReference<TableInfo> _tableInfo;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._seed","Field","* Seed value we use as the base to make hash codes non-static between
     * different runs, but still stable for lifetime of a single symbol table
     * instance.
     * This is done for security reasons, to avoid potential DoS attack via
     * hash collisions.","protected final int _seed;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._interner","Field","* Entity that knows how to {@code intern} Strings, if needed,
     * or {@code null} if no interning is wanted.
     *
     * @since 2.16","protected final InternCache _interner;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._failOnDoS","Field","* Flag that indicates whether we should throw an exception if enough
     * hash collisions are detected (true); or just worked around (false).
     *
     * @since 2.4","protected final boolean _failOnDoS;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._hashArea","Field","* Primary hash information area: consists of <code>2 * _hashSize</code>
     * entries of 16 bytes (4 ints), arranged in a cascading lookup
     * structure (details of which may be tweaked depending on expected rates
     * of collisions).","protected int[] _hashArea;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._hashSize","Field","* Number of slots for primary entries within {@link #_hashArea}; which is
     * at most <code>1/8</code> of actual size of the underlying array (4-int slots,
     * primary covers only half of the area; plus, additional area for longer
     * symbols after hash area).","protected int _hashSize;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._secondaryStart","Field","* Offset within {@link #_hashArea} where secondary entries start","protected int _secondaryStart;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._tertiaryStart","Field","* Offset within {@link #_hashArea} where tertiary entries start","protected int _tertiaryStart;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._tertiaryShift","Field","* Constant that determines size of buckets for tertiary entries:
     * <code>1 &lt;&lt; _tertiaryShift</code> is the size, and shift value
     * is also used for translating from primary offset into
     * tertiary bucket (shift right by <code>4 + _tertiaryShift</code>).
     *<p>
     * Default value is 2, for buckets of 4 slots; grows bigger with
     * bigger table sizes.","protected int _tertiaryShift;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._count","Field","* Total number of Strings in the symbol table; only used for child tables.","protected int _count;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._names","Field","* Array that contains <code>String</code> instances matching
     * entries in {@link #_hashArea}.
     * Contains nulls for unused entries. Note that this size is twice
     * that of {@link #_hashArea}","protected String[] _names;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._spilloverEnd","Field","* Pointer to the offset within spill-over area where there is room
     * for more spilled over entries (if any).
     * Spill over area is within fixed-size portion of {@link #_hashArea}.","protected int _spilloverEnd;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._longNameOffset","Field","* Offset within {@link #_hashArea} that follows main slots and contains
     * quads for longer names (13 bytes or longer), and points to the
     * first available int that may be used for appending quads of the next
     * long name.
     * Note that long name area follows immediately after the fixed-size
     * main hash area ({@link #_hashArea}).","protected int _longNameOffset;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._hashShared","Field","* Flag that indicates whether underlying data structures for
     * the main hash area are shared or not. If they are, then they
     * need to be handled in copy-on-write way, i.e. if they need
     * to be modified, a copy needs to be made first; at this point
     * it will not be shared any more, and can be modified.
     *<p>
     * This flag needs to be checked both when adding new main entries,
     * and when adding new collision list queues (i.e. creating a new
     * collision list head entry)","protected boolean _hashShared;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.MULT","Field","(see [http://www.cse.yorku.ca/~oz/hash.html] for details)","private final static int MULT = 33;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.MULT2","Field","No Comment","private final static int MULT2 = 65599;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.MULT3","Field","No Comment","private final static int MULT3 = 31;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot()","Method","* Factory method to call to create a symbol table instance with a
     * randomized seed value.
     *
     * @return Root instance to use for constructing new child instances","public static ByteQuadsCanonicalizer createRoot() {
    // Need to use a variable seed, to thwart hash-collision based attacks.
    // 14-Feb-2017, tatu: Does this actually help?
    long now = System.currentTimeMillis();
    // ensure it's not 0; and might as well require to be odd so:
    int seed = (((int) now) + ((int) (now >>> 32))) | 1;
    return createRoot(seed);
}","ByteQuadsCanonicalizer","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot(int)","Method","value should remain the same.","protected static ByteQuadsCanonicalizer createRoot(int seed) {
    return new ByteQuadsCanonicalizer(DEFAULT_T_SIZE, seed);
}","ByteQuadsCanonicalizer","protected , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot(int).seed","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.makeChild(int)","Method","* Factory method used to create actual symbol table instance to
     * use for parsing.
     *
     * @param flags Bit flags of active {@link com.fasterxml.jackson.core.JsonFactory.Feature}s enabled.
     *
     * @return Actual canonicalizer instance that can be used by a parser","public ByteQuadsCanonicalizer makeChild(int flags) {
    return new ByteQuadsCanonicalizer(this, _seed, _tableInfo.get(), JsonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(flags), JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW.enabledIn(flags));
}","ByteQuadsCanonicalizer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.makeChild(int).flags","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.makeChild(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.makeChildOrPlaceholder(int)","Method","* Method similar to {@link #makeChild} but one that only creates real
     * instance of {@link com.fasterxml.jackson.core.JsonFactory.Feature#CANONICALIZE_FIELD_NAMES} is
     * enabled: otherwise a ""bogus"" instance is created.
     *
     * @param flags Bit flags of active {@link com.fasterxml.jackson.core.JsonFactory.Feature}s enabled.
     *
     * @return Actual canonicalizer instance that can be used by a parser if (and only if)
     *    canonicalization is enabled; otherwise a non-null ""placeholder"" instance.
     *
     * @since 2.13","public ByteQuadsCanonicalizer makeChildOrPlaceholder(int flags) {
    if (JsonFactory.Feature.CANONICALIZE_FIELD_NAMES.enabledIn(flags)) {
        // inlined ""makeChild()""
        return new ByteQuadsCanonicalizer(this, _seed, _tableInfo.get(), JsonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(flags), JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW.enabledIn(flags));
    }
    return new ByteQuadsCanonicalizer(_tableInfo.get());
}","ByteQuadsCanonicalizer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.makeChildOrPlaceholder(int).flags","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.makeChildOrPlaceholder(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.release()","Method","* Method called by the using code to indicate it is done with this instance.
     * This lets instance merge accumulated changes into parent (if need be),
     * safely and efficiently, and without calling code having to know about parent
     * information.","public void release() {
    // we will try to merge if child table has new entries
    // 28-Jul-2019, tatu: From [core#548]: do not share if immediate rehash needed
    if ((_parent != null) && maybeDirty()) {
        _parent.mergeChild(new TableInfo(this));
        // Let's also mark this instance as dirty, so that just in
        // case release was too early, there's no corruption of possibly shared data.
        _hashShared = true;
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.mergeChild(TableInfo)","Method","No Comment","private void mergeChild(TableInfo childState) {
    final int childCount = childState.count;
    TableInfo currState = _tableInfo.get();
    // Should usually grow; but occasionally could also shrink if (but only if)
    // collision list overflow ends up clearing some collision lists.
    if (childCount == currState.count) {
        return;
    }
    // One caveat: let's try to avoid problems with degenerate cases of documents with
    // generated ""random"" names: for these, symbol tables would bloat indefinitely.
    // One way to do this is to just purge tables if they grow
    // too large, and that's what we'll do here.
    if (childCount > MAX_ENTRIES_FOR_REUSE) {
        // At any rate, need to clean up the tables
        childState = TableInfo.createInitial(DEFAULT_T_SIZE);
    }
    _tableInfo.compareAndSet(currState, childState);
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.mergeChild(TableInfo).childState","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.mergeChild(TableInfo)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.size()","Method","* @return Number of symbol entries contained by this canonicalizer instance","public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().count;
    }
    // nope, child table
    return _count;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.bucketCount()","Method","* @return number of primary slots table has currently","public int bucketCount() {
    return _hashSize;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.maybeDirty()","Method","* Method called to check to quickly see if a child symbol table
     * may have gotten additional entries. Used for checking to see
     * if a child table should be merged into shared table.
     *
     * @return Whether main hash area has been modified","public boolean maybeDirty() {
    return !_hashShared;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.hashSeed()","Method","No Comment","public int hashSeed() {
    return _seed;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.isCanonicalizing()","Method","* @return True for ""real"", canonicalizing child tables; false for
     *    root table as well as placeholder ""child"" tables.
     *
     * @since 2.13","public boolean isCanonicalizing() {
    // couple of options, but for now missing parent linkage simplest:
    return _parent != null;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.primaryCount()","Method","* Method mostly needed by unit tests; calculates number of
     * entries that are in the primary slot set. These are
     * ""perfect"" entries, accessible with a single lookup
     *
     * @return Number of entries in the primary hash area","public int primaryCount() {
    int count = 0;
    for (int offset = 3, end = _secondaryStart; offset < end; offset += 4) {
        if (_hashArea[offset] != 0) {
            ++count;
        }
    }
    return count;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.secondaryCount()","Method","* Method mostly needed by unit tests; calculates number of entries
     * in secondary buckets
     *
     * @return Number of entries in the secondary hash area","public int secondaryCount() {
    int count = 0;
    int offset = _secondaryStart + 3;
    for (int end = _tertiaryStart; offset < end; offset += 4) {
        if (_hashArea[offset] != 0) {
            ++count;
        }
    }
    return count;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.tertiaryCount()","Method","* Method mostly needed by unit tests; calculates number of entries
     * in tertiary buckets
     *
     * @return Number of entries in the tertiary hash area","public int tertiaryCount() {
    int count = 0;
    // to 1.5x, starting point of tertiary
    int offset = _tertiaryStart + 3;
    for (int end = offset + _hashSize; offset < end; offset += 4) {
        if (_hashArea[offset] != 0) {
            ++count;
        }
    }
    return count;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.spilloverCount()","Method","* Method mostly needed by unit tests; calculates number of entries
     * in shared spill-over area
     *
     * @return Number of entries in the linear spill-over areay","public int spilloverCount() {
    // difference between spillover end, start, divided by 4 (four ints per slot)
    return (_spilloverEnd - _spilloverStart()) >> 2;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.totalCount()","Method","No Comment","public int totalCount() {
    int count = 0;
    for (int offset = 3, end = (_hashSize << 3); offset < end; offset += 4) {
        if (_hashArea[offset] != 0) {
            ++count;
        }
    }
    return count;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.toString()","Method","No Comment","@Override
public String toString() {
    int pri = primaryCount();
    int sec = secondaryCount();
    int tert = tertiaryCount();
    int spill = spilloverCount();
    int total = totalCount();
    return String.format(""[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]"", getClass().getName(), _count, _hashSize, pri, sec, tert, spill, (pri + sec + tert + spill), total);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int)","Method","No Comment","public String findName(int q1) {
    int offset = _calcOffset(calcHash(q1));
    // first: primary match?
    final int[] hashArea = _hashArea;
    int len = hashArea[offset + 3];
    if (len == 1) {
        if (hashArea[offset] == q1) {
            return _names[offset >> 2];
        }
    } else if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // secondary? single slot shared by N/2 primaries
    int offset2 = _secondaryStart + ((offset >> 3) << 2);
    len = hashArea[offset2 + 3];
    if (len == 1) {
        if (hashArea[offset2] == q1) {
            return _names[offset2 >> 2];
        }
    } else if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // tertiary lookup & spillovers best to offline
    return _findSecondary(offset, q1);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int,int)","Method","No Comment","public String findName(int q1, int q2) {
    int offset = _calcOffset(calcHash(q1, q2));
    final int[] hashArea = _hashArea;
    int len = hashArea[offset + 3];
    if (len == 2) {
        if ((q1 == hashArea[offset]) && (q2 == hashArea[offset + 1])) {
            return _names[offset >> 2];
        }
    } else if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // secondary?
    int offset2 = _secondaryStart + ((offset >> 3) << 2);
    len = hashArea[offset2 + 3];
    if (len == 2) {
        if ((q1 == hashArea[offset2]) && (q2 == hashArea[offset2 + 1])) {
            return _names[offset2 >> 2];
        }
    } else if (len == 0) {
        // empty slot? Short-circuit if no more spillovers
        return null;
    }
    return _findSecondary(offset, q1, q2);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int,int,int)","Method","No Comment","public String findName(int q1, int q2, int q3) {
    int offset = _calcOffset(calcHash(q1, q2, q3));
    final int[] hashArea = _hashArea;
    int len = hashArea[offset + 3];
    if (len == 3) {
        if ((q1 == hashArea[offset]) && (hashArea[offset + 1] == q2) && (hashArea[offset + 2] == q3)) {
            return _names[offset >> 2];
        }
    } else if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // secondary?
    int offset2 = _secondaryStart + ((offset >> 3) << 2);
    len = hashArea[offset2 + 3];
    if (len == 3) {
        if ((q1 == hashArea[offset2]) && (hashArea[offset2 + 1] == q2) && (hashArea[offset2 + 2] == q3)) {
            return _names[offset2 >> 2];
        }
    } else if (len == 0) {
        // empty slot? Short-circuit if no more spillovers
        return null;
    }
    return _findSecondary(offset, q1, q2, q3);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int,int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int,int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int,int,int).q3","Parameter_3","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int[],int)","Method","No Comment","public String findName(int[] q, int qlen) {
    /* This version differs significantly, because longer names do not fit within cell.
         * Rather, they contain hash in main slot, and offset+length to extension area
         * that contains actual quads.
         */
    if (qlen < 4) {
        // another sanity check
        switch(qlen) {
            case 3:
                return findName(q[0], q[1], q[2]);
            case 2:
                return findName(q[0], q[1]);
            case 1:
                return findName(q[0]);
            default:
                // if 0 ever passed
                return """";
        }
    }
    final int hash = calcHash(q, qlen);
    int offset = _calcOffset(hash);
    final int[] hashArea = _hashArea;
    final int len = hashArea[offset + 3];
    if ((hash == hashArea[offset]) && (len == qlen)) {
        // probable but not guaranteed: verify
        if (_verifyLongName(q, qlen, hashArea[offset + 1])) {
            return _names[offset >> 2];
        }
    }
    if (len == 0) {
        // empty slot; unlikely but avoid further lookups if so
        return null;
    }
    // secondary?
    int offset2 = _secondaryStart + ((offset >> 3) << 2);
    final int len2 = hashArea[offset2 + 3];
    if ((hash == hashArea[offset2]) && (len2 == qlen)) {
        if (_verifyLongName(q, qlen, hashArea[offset2 + 1])) {
            return _names[offset2 >> 2];
        }
    }
    return _findSecondary(offset, hash, q, qlen);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int[],int).q","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int[],int).qlen","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.findName(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._calcOffset(int)","Method","No Comment","private final int _calcOffset(int hash) {
    // NOTE: simple for initial impl, but we may want to interleave it a bit
    // in near future
    // So: first, hash into primary hash index
    int ix = hash & (_hashSize - 1);
    // keeping in mind we have 4 ints per entry
    return (ix << 2);
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._calcOffset(int).hash","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._calcOffset(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int)","Method","No Comment","private String _findSecondary(int origOffset, int q1) {
    // tertiary area division is dynamic. First; its size is N/4 compared to
    // primary hash size; and offsets are for 4 int slots. So to get to logical
    // index would shift by 4. But! Tertiary area is further split into buckets,
    // determined by shift value. And finally, from bucket back into physical offsets
    int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);
    final int[] hashArea = _hashArea;
    final int bucketSize = (1 << _tertiaryShift);
    for (int end = offset + bucketSize; offset < end; offset += 4) {
        int len = hashArea[offset + 3];
        if ((q1 == hashArea[offset]) && (1 == len)) {
            return _names[offset >> 2];
        }
        if (len == 0) {
            return null;
        }
    }
    // but if tertiary full, check out spill-over area as last resort
    // shared spillover starts at 7/8 of the main hash area
    // (which is sized at 2 * _hashSize), so:
    for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4) {
        if ((q1 == hashArea[offset]) && (1 == hashArea[offset + 3])) {
            return _names[offset >> 2];
        }
    }
    return null;
}","String","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int).origOffset","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int).q1","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int)","Method","No Comment","private String _findSecondary(int origOffset, int q1, int q2) {
    int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);
    final int[] hashArea = _hashArea;
    final int bucketSize = (1 << _tertiaryShift);
    for (int end = offset + bucketSize; offset < end; offset += 4) {
        int len = hashArea[offset + 3];
        if ((q1 == hashArea[offset]) && (q2 == hashArea[offset + 1]) && (2 == len)) {
            return _names[offset >> 2];
        }
        if (len == 0) {
            return null;
        }
    }
    for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4) {
        if ((q1 == hashArea[offset]) && (q2 == hashArea[offset + 1]) && (2 == hashArea[offset + 3])) {
            return _names[offset >> 2];
        }
    }
    return null;
}","String","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int).origOffset","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int).q1","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int).q2","Parameter_3","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int,int)","Method","No Comment","private String _findSecondary(int origOffset, int q1, int q2, int q3) {
    int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);
    final int[] hashArea = _hashArea;
    final int bucketSize = (1 << _tertiaryShift);
    for (int end = offset + bucketSize; offset < end; offset += 4) {
        int len = hashArea[offset + 3];
        if ((q1 == hashArea[offset]) && (q2 == hashArea[offset + 1]) && (q3 == hashArea[offset + 2]) && (3 == len)) {
            return _names[offset >> 2];
        }
        if (len == 0) {
            return null;
        }
    }
    for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4) {
        if ((q1 == hashArea[offset]) && (q2 == hashArea[offset + 1]) && (q3 == hashArea[offset + 2]) && (3 == hashArea[offset + 3])) {
            return _names[offset >> 2];
        }
    }
    return null;
}","String","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int,int).origOffset","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int,int).q1","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int,int).q2","Parameter_3","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int,int).q3","Parameter_4","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int[],int)","Method","No Comment","private String _findSecondary(int origOffset, int hash, int[] q, int qlen) {
    int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);
    final int[] hashArea = _hashArea;
    final int bucketSize = (1 << _tertiaryShift);
    for (int end = offset + bucketSize; offset < end; offset += 4) {
        int len = hashArea[offset + 3];
        if ((hash == hashArea[offset]) && (qlen == len)) {
            if (_verifyLongName(q, qlen, hashArea[offset + 1])) {
                return _names[offset >> 2];
            }
        }
        if (len == 0) {
            return null;
        }
    }
    for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4) {
        if ((hash == hashArea[offset]) && (qlen == hashArea[offset + 3])) {
            if (_verifyLongName(q, qlen, hashArea[offset + 1])) {
                return _names[offset >> 2];
            }
        }
    }
    return null;
}","String","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int[],int).origOffset","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int[],int).hash","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int[],int).q","Parameter_3","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int[],int).qlen","Parameter_4","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findSecondary(int,int,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._verifyLongName(int[],int,int)","Method","No Comment","private boolean _verifyLongName(int[] q, int qlen, int spillOffset) {
    final int[] hashArea = _hashArea;
    // spillOffset assumed to be physical index right into quad string
    int ix = 0;
    switch(qlen) {
        default:
            return _verifyLongName2(q, qlen, spillOffset);
        case 8:
            if (q[ix++] != hashArea[spillOffset++])
                return false;
        case 7:
            if (q[ix++] != hashArea[spillOffset++])
                return false;
        case 6:
            if (q[ix++] != hashArea[spillOffset++])
                return false;
        case 5:
            if (q[ix++] != hashArea[spillOffset++])
                return false;
        case // always at least 4
        4:
            if (q[ix++] != hashArea[spillOffset++])
                return false;
            if (q[ix++] != hashArea[spillOffset++])
                return false;
            if (q[ix++] != hashArea[spillOffset++])
                return false;
            if (q[ix++] != hashArea[spillOffset++])
                return false;
    }
    return true;
}","boolean","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._verifyLongName(int[],int,int).q","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._verifyLongName(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._verifyLongName(int[],int,int).qlen","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._verifyLongName(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._verifyLongName(int[],int,int).spillOffset","Parameter_3","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._verifyLongName(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._verifyLongName2(int[],int,int)","Method","No Comment","private boolean _verifyLongName2(int[] q, int qlen, int spillOffset) {
    int ix = 0;
    do {
        if (q[ix++] != _hashArea[spillOffset++]) {
            return false;
        }
    } while (ix < qlen);
    return true;
}","boolean","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._verifyLongName2(int[],int,int).q","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._verifyLongName2(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._verifyLongName2(int[],int,int).qlen","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._verifyLongName2(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._verifyLongName2(int[],int,int).spillOffset","Parameter_3","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._verifyLongName2(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int)","Method","* @param name Name to add
     * @param q1 Quad representation of the name
     * @return name (possibly interned)
     * @throws StreamConstraintsException if the constraint exceptions","public String addName(String name, int q1) throws StreamConstraintsException {
    _verifySharing();
    if (_interner != null) {
        name = _interner.intern(name);
    }
    int offset = _findOffsetForAdd(calcHash(q1));
    _hashArea[offset] = q1;
    _hashArea[offset + 3] = 1;
    _names[offset >> 2] = name;
    ++_count;
    return name;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int).name","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int).q1","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int,int)","Method","* @param name Name to add
     * @param q1 First quad of name representation
     * @param q2 Second quad of name representation
     * @return name (possibly interned)
     * @throws StreamConstraintsException if the constraint exceptions","public String addName(String name, int q1, int q2) throws StreamConstraintsException {
    _verifySharing();
    if (_interner != null) {
        name = _interner.intern(name);
    }
    // 20-Mar-2021, tatu: For some reason, pre-2.13 there was logic
    //    to support ""only one quad"" case. Not sure why, does not make sense;
    //    removed from 2.13.0.
    //        int hash = (q2 == 0) ? calcHash(q1) : calcHash(q1, q2);
    final int hash = calcHash(q1, q2);
    final int offset = _findOffsetForAdd(hash);
    _hashArea[offset] = q1;
    _hashArea[offset + 1] = q2;
    _hashArea[offset + 3] = 2;
    _names[offset >> 2] = name;
    ++_count;
    return name;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int,int).name","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int,int).q1","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int,int).q2","Parameter_3","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int,int,int)","Method","* @param name Name to add
     * @param q1 First quad of name representation
     * @param q2 Second quad of name representation
     * @param q3 Third quad of name representation
     * @return name (possibly interned)
     * @throws StreamConstraintsException if the constraint exceptions","public String addName(String name, int q1, int q2, int q3) throws StreamConstraintsException {
    _verifySharing();
    if (_interner != null) {
        name = _interner.intern(name);
    }
    int offset = _findOffsetForAdd(calcHash(q1, q2, q3));
    _hashArea[offset] = q1;
    _hashArea[offset + 1] = q2;
    _hashArea[offset + 2] = q3;
    _hashArea[offset + 3] = 3;
    _names[offset >> 2] = name;
    ++_count;
    return name;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int,int,int).name","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int,int,int).q1","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int,int,int).q2","Parameter_3","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int,int,int).q3","Parameter_4","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int[],int)","Method","* @param name Name to add
     * @param q Quads of name representation
     * @param qlen Number of quads in {@code q}
     * @return name (possibly interned)
     * @throws StreamConstraintsException if the constraint exceptions","public String addName(String name, int[] q, int qlen) throws StreamConstraintsException {
    _verifySharing();
    if (_interner != null) {
        name = _interner.intern(name);
    }
    int offset;
    switch(qlen) {
        case 1:
            {
                offset = _findOffsetForAdd(calcHash(q[0]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 3] = 1;
            }
            break;
        case 2:
            {
                offset = _findOffsetForAdd(calcHash(q[0], q[1]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 1] = q[1];
                _hashArea[offset + 3] = 2;
            }
            break;
        case 3:
            {
                offset = _findOffsetForAdd(calcHash(q[0], q[1], q[2]));
                _hashArea[offset] = q[0];
                _hashArea[offset + 1] = q[1];
                _hashArea[offset + 2] = q[2];
                _hashArea[offset + 3] = 3;
            }
            break;
        default:
            final int hash = calcHash(q, qlen);
            offset = _findOffsetForAdd(hash);
            _hashArea[offset] = hash;
            int longStart = _appendLongName(q, qlen);
            _hashArea[offset + 1] = longStart;
            _hashArea[offset + 3] = qlen;
    }
    // plus add the actual String
    _names[offset >> 2] = name;
    // and finally; see if we really should rehash.
    ++_count;
    return name;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int[],int).name","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int[],int).q","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int[],int).qlen","Parameter_3","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.addName(String,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._verifySharing()","Method","No Comment","private void _verifySharing() {
    if (_hashShared) {
        // 12-Mar-2021, tatu: prevent modifying of ""placeholder"" and
        //   parent tables
        if (_parent == null) {
            if (_count == 0) {
                // root
                throw new IllegalStateException(""Internal error: Cannot add names to Root symbol table"");
            }
            throw new IllegalStateException(""Internal error: Cannot add names to Placeholder symbol table"");
        }
        _hashArea = Arrays.copyOf(_hashArea, _hashArea.length);
        _names = Arrays.copyOf(_names, _names.length);
        _hashShared = false;
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findOffsetForAdd(int)","Method","* Method called to find the location within hash table to add a new symbol in.
     *
     * @param hash Hash of name for which to find location
     *
     * @throws StreamConstraintsException If name length exceeds maximum allowed.","private int _findOffsetForAdd(int hash) throws StreamConstraintsException {
    // first, check the primary: if slot found, no need for resize
    int offset = _calcOffset(hash);
    final int[] hashArea = _hashArea;
    if (hashArea[offset + 3] == 0) {
        //System.err.printf("" PRImary slot #%d, hash %X\n"", (offset>>2), hash & 0x7F);
        return offset;
    }
    // Otherwise let's see if we are due resize():
    if (_checkNeedForRehash()) {
        return _resizeAndFindOffsetForAdd(hash);
    }
    // If not, proceed with secondary slot
    int offset2 = _secondaryStart + ((offset >> 3) << 2);
    if (hashArea[offset2 + 3] == 0) {
        //System.err.printf("" SECondary slot #%d (start x%X), hash %X\n"",(offset >> 3), _secondaryStart, (hash & 0x7F));
        return offset2;
    }
    // if not, tertiary?
    offset2 = _tertiaryStart + ((offset >> (_tertiaryShift + 2)) << _tertiaryShift);
    final int bucketSize = (1 << _tertiaryShift);
    for (int end = offset2 + bucketSize; offset2 < end; offset2 += 4) {
        if (hashArea[offset2 + 3] == 0) {
            //System.err.printf("" TERtiary slot x%X (from x%X, start x%X), hash %X.\n"", offset2, ((offset >> (_tertiaryShift + 2)) << _tertiaryShift), _tertiaryStart, (hash & 0x7F));
            return offset2;
        }
    }
    // and if even tertiary full, append at the end of spill area
    offset = _spilloverEnd;
    _spilloverEnd += 4;
    //System.err.printf("" SPIll-over at x%X; start x%X; end x%X, hash %X\n"", offset, _spilloverStart(), _hashArea.length, (hash & 0x7F));
    // one caveat: in the unlikely event if spill-over filling up,
    // check if that could be considered a DoS attack; handle appropriately
    // (NOTE: approximate for now; we could verify details if that becomes necessary)
    /* 31-Jul-2015, tatu: Note that spillover area does NOT end at end of array,
         *   since ""long names"" area follows. Instead, need to calculate from hash size.
         */
    final int end = (_hashSize << 3);
    if (_spilloverEnd >= end) {
        if (_failOnDoS) {
            _reportTooManyCollisions();
        }
        return _resizeAndFindOffsetForAdd(hash);
    }
    return offset;
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findOffsetForAdd(int).hash","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._findOffsetForAdd(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._resizeAndFindOffsetForAdd(int)","Method","@since 2.10","private int _resizeAndFindOffsetForAdd(int hash) throws StreamConstraintsException {
    // First things first: we need to resize+rehash (or, if too big, nuke contents)
    rehash();
    // Copy of main _findOffsetForAdd except for checks to resize: cannot be needed
    int offset = _calcOffset(hash);
    final int[] hashArea = _hashArea;
    if (hashArea[offset + 3] == 0) {
        return offset;
    }
    int offset2 = _secondaryStart + ((offset >> 3) << 2);
    if (hashArea[offset2 + 3] == 0) {
        return offset2;
    }
    offset2 = _tertiaryStart + ((offset >> (_tertiaryShift + 2)) << _tertiaryShift);
    final int bucketSize = (1 << _tertiaryShift);
    for (int end = offset2 + bucketSize; offset2 < end; offset2 += 4) {
        if (hashArea[offset2 + 3] == 0) {
            return offset2;
        }
    }
    offset = _spilloverEnd;
    _spilloverEnd += 4;
    return offset;
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._resizeAndFindOffsetForAdd(int).hash","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._resizeAndFindOffsetForAdd(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.multiplyByFourFifths(int)","Method","@since 2.17","static int multiplyByFourFifths(int number) {
    return (int) (number * 3_435_973_837L >>> 32);
}","int","static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.multiplyByFourFifths(int).number","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.multiplyByFourFifths(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._checkNeedForRehash()","Method","Helper method for checking if we should simply rehash() before add","private boolean _checkNeedForRehash() {
    // Yes if above 80%, or above 50% AND have ~1% spill-overs
    if (_count > (_hashSize >> 1)) {
        // over 50%
        int spillCount = (_spilloverEnd - _spilloverStart()) >> 2;
        if ((spillCount > (1 + _count >> 7)) || (_count > multiplyByFourFifths(_hashSize))) {
            return true;
        }
    }
    return false;
}","boolean","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._appendLongName(int[],int)","Method","No Comment","private int _appendLongName(final int[] quads, final int qlen) {
    final int start = _longNameOffset;
    final int newStart = start + qlen;
    if (newStart < 0) {
        throw new IllegalStateException(String.format(""Internal error: long name offset overflow; start=%s, qlen=%s"", start, qlen));
    }
    // note: at this point we must already be unshared. But may not have enough space
    if (newStart > _hashArea.length) {
        // try to increment in reasonable chunks; at least space that we need
        int toAdd = newStart - _hashArea.length;
        // but at least 1/8 of regular hash area size or 16kB (whichever smaller)
        int minAdd = Math.min(4096, _hashSize);
        int newSize = _hashArea.length + Math.max(toAdd, minAdd);
        _hashArea = Arrays.copyOf(_hashArea, newSize);
    }
    System.arraycopy(quads, 0, _hashArea, start, qlen);
    _longNameOffset = newStart;
    return start;
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._appendLongName(int[],int).quads","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._appendLongName(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._appendLongName(int[],int).qlen","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._appendLongName(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int)","Method","No Comment","public int calcHash(int q1) {
    int hash = q1 ^ _seed;
    /* 29-Mar-2015, tatu: Earlier used 15 + 9 right shifts, which worked ok
         *    except for one specific problem case: numbers. So needed to make sure
         *    that all 4 least-significant bits participate in hash. Couple of ways
         *    to work it out, but this is the simplest, fast and seems to do ok.
         */
    // to xor hi- and low- 16-bits
    hash += (hash >>> 16);
    // shuffle back a bit
    hash ^= (hash << 3);
    // and bit more
    hash += (hash >>> 12);
    return hash;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int,int)","Method","No Comment","public int calcHash(int q1, int q2) {
    // For two quads, let's change algorithm a bit, to spice
    // things up (can do bit more processing anyway)
    int hash = q1;
    // try mixing first and second byte pairs first
    hash += (hash >>> 15);
    // as well as lowest 2 bytes
    hash ^= (hash >>> 9);
    // then add second quad
    hash += (q2 * MULT);
    hash ^= _seed;
    // and shuffle some more
    hash += (hash >>> 16);
    hash ^= (hash >>> 4);
    hash += (hash << 3);
    return hash;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int,int,int)","Method","No Comment","public int calcHash(int q1, int q2, int q3) {
    // use same algorithm as multi-byte, tested to work well
    int hash = q1 ^ _seed;
    hash += (hash >>> 9);
    hash *= MULT3;
    hash += q2;
    hash *= MULT;
    hash += (hash >>> 15);
    hash ^= q3;
    // 26-Mar-2015, tatu: As per two-quad case, a short shift seems to help more here
    hash += (hash >>> 4);
    hash += (hash >>> 15);
    hash ^= (hash << 9);
    return hash;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int,int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int,int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int,int,int).q3","Parameter_3","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int[],int)","Method","* @param q int array
     * @param qlen length
     * @return hash
     * @throws IllegalArgumentException if <code>qlen</code> is less than 4","public int calcHash(int[] q, int qlen) {
    if (qlen < 4) {
        throw new IllegalArgumentException(""qlen is too short, needs to be at least 4"");
    }
    /* And then change handling again for ""multi-quad"" case; mostly
         * to make calculation of collisions less fun. For example,
         * add seed bit later in the game, and switch plus/xor around,
         * use different shift lengths.
         */
    int hash = q[0] ^ _seed;
    hash += (hash >>> 9);
    hash += q[1];
    hash += (hash >>> 15);
    hash *= MULT;
    hash ^= q[2];
    hash += (hash >>> 4);
    for (int i = 3; i < qlen; ++i) {
        int next = q[i];
        next = next ^ (next >> 21);
        hash += next;
    }
    hash *= MULT2;
    // and finally shuffle some more once done
    hash += (hash >>> 19);
    hash ^= (hash << 5);
    return hash;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int[],int).q","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int[],int).qlen","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.calcHash(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.rehash()","Method","No Comment","private void rehash() throws StreamConstraintsException {
    // Note: since we'll make copies, no need to unshare, can just mark as such:
    _hashShared = false;
    // And then we can first deal with the main hash area. Since we are expanding
    // linearly (double up), we know there'll be no collisions during this phase.
    final int[] oldHashArea = _hashArea;
    final String[] oldNames = _names;
    final int oldSize = _hashSize;
    final int oldCount = _count;
    final int newSize = oldSize + oldSize;
    final int oldEnd = _spilloverEnd;
    // 13-Mar-2010, tatu: Let's guard against OOME that could be caused by
    //    large documents with unique (or mostly so) names
    if (newSize > MAX_T_SIZE) {
        nukeSymbols(true);
        return;
    }
    // double up main hash area, but do not expand long-name area:
    _hashArea = new int[oldHashArea.length + (oldSize << 3)];
    _hashSize = newSize;
    // 4 ints per entry
    _secondaryStart = (newSize << 2);
    // right after secondary
    _tertiaryStart = _secondaryStart + (_secondaryStart >> 1);
    _tertiaryShift = _calcTertiaryShift(newSize);
    // and simply double up name array
    _names = new String[oldNames.length << 1];
    nukeSymbols(false);
    // Plus we can scan only through the primary hash area, looking for non-empty
    // slots, without worrying about ordering. This should never reduce priority
    // of existing entries: primaries remain primaries; however, due to increased
    // space, secondaries may become primaries etc
    int copyCount = 0;
    int[] q = new int[16];
    for (int offset = 0, end = oldEnd; offset < end; offset += 4) {
        int len = oldHashArea[offset + 3];
        if (len == 0) {
            // empty slot, skip
            continue;
        }
        ++copyCount;
        String name = oldNames[offset >> 2];
        switch(len) {
            case 1:
                q[0] = oldHashArea[offset];
                addName(name, q, 1);
                break;
            case 2:
                q[0] = oldHashArea[offset];
                q[1] = oldHashArea[offset + 1];
                addName(name, q, 2);
                break;
            case 3:
                q[0] = oldHashArea[offset];
                q[1] = oldHashArea[offset + 1];
                q[2] = oldHashArea[offset + 2];
                addName(name, q, 3);
                break;
            default:
                if (len > q.length) {
                    q = new int[len];
                }
                // #0 is hash, #1 offset
                int qoff = oldHashArea[offset + 1];
                System.arraycopy(oldHashArea, qoff, q, 0, len);
                addName(name, q, len);
                break;
        }
    }
    // Sanity checks: since corruption difficult to detect, assert explicitly
    // with production code
    if (copyCount != oldCount) {
        throw new IllegalStateException(""Internal error: Failed rehash(), old count="" + oldCount + "", copyCount="" + copyCount);
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.nukeSymbols(boolean)","Method","* Helper method called to empty all shared symbols, but to leave
     * arrays allocated","private void nukeSymbols(boolean fill) {
    _count = 0;
    // reset spill-over to empty (starting at 7/8 of hash area)
    _spilloverEnd = _spilloverStart();
    // and long name area to empty, starting immediately after hash area
    _longNameOffset = _hashSize << 3;
    if (fill) {
        Arrays.fill(_hashArea, 0);
        Arrays.fill(_names, null);
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.nukeSymbols(boolean).fill","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.nukeSymbols(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._spilloverStart()","Method","* Helper method that calculates start of the spillover area","private final int _spilloverStart() {
    // we'll need slot at 1.75x of hashSize, but with 4-ints per slot.
    // So basically multiply by 7
    int offset = _hashSize;
    return (offset << 3) - offset;
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._reportTooManyCollisions()","Method","No Comment","protected void _reportTooManyCollisions() throws StreamConstraintsException {
    // First: do not fuzz about small symbol tables; may get balanced by doubling up
    if (_hashSize <= 1024) {
        // would have spill-over area of 128 entries
        return;
    }
    throw new StreamConstraintsException(""Spill-over slots in symbol table with "" + _count + "" entries, hash area of "" + _hashSize + "" slots is now full (all "" + (_hashSize >> 3) + "" slots -- suspect a DoS attack based on hash collisions."" + "" You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`"");
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._calcTertiaryShift(int)","Method","No Comment","static int _calcTertiaryShift(int primarySlots) {
    // first: we only get 1/4 of slots of primary, to divide
    int tertSlots = (primarySlots) >> 2;
    // default is for buckets of 4 slots (each 4 ints, i.e. 1 << 4)
    if (tertSlots < 64) {
        return 4;
    }
    if (tertSlots <= 256) {
        // buckets of 8 slots (up to 256 == 32 x 8)
        return 5;
    }
    if (tertSlots <= 1024) {
        // buckets of 16 slots (up to 1024 == 64 x 16)
        return 6;
    }
    // and biggest buckets have 32 slots
    return 7;
}","int","static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._calcTertiaryShift(int).primarySlots","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._calcTertiaryShift(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.<init>(int,int)","Constructor","* Constructor used for creating per-{@code TokenStreamFactory} ""root""
     * symbol tables: ones used for merging and sharing common symbols
     *
     * @param sz Initial primary hash area size
     * @param seed Random seed valued used to make it more difficult to cause
     *   collisions (used for collision-based DoS attacks).","private ByteQuadsCanonicalizer(int sz, int seed) {
    // Settings to distinguish parent table: no parent
    _parent = null;
    _count = 0;
    // and mark as shared just in case to prevent modifications
    _hashShared = true;
    _seed = seed;
    _interner = null;
    _failOnDoS = true;
    // Sanity check: let's now allow hash sizes below certain minimum value
    if (sz < MIN_HASH_SIZE) {
        sz = MIN_HASH_SIZE;
    } else {
        // Also; size must be 2^N; otherwise hash algorithm won't
        // work... so let's just pad it up, if so
        if ((sz & (sz - 1)) != 0) {
            // only true if it's 2^N
            int curr = MIN_HASH_SIZE;
            while (curr < sz) {
                curr += curr;
            }
            sz = curr;
        }
    }
    _tableInfo = new AtomicReference<>(TableInfo.createInitial(sz));
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.<init>(int,int).sz","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.<init>(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.<init>(int,int).seed","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.<init>(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.<init>(ByteQuadsCanonicalizer,int,TableInfo,boolean,boolean)","Constructor","* Constructor used when creating a child instance","private ByteQuadsCanonicalizer(ByteQuadsCanonicalizer parent, int seed, TableInfo state, boolean intern, boolean failOnDoS) {
    _parent = parent;
    _seed = seed;
    _interner = intern ? InternCache.instance : null;
    _failOnDoS = failOnDoS;
    // not used by child tables
    _tableInfo = null;
    // Then copy shared state
    _count = state.count;
    _hashSize = state.size;
    // right after primary area
    _secondaryStart = _hashSize << 2;
    // right after secondary
    _tertiaryStart = _secondaryStart + (_secondaryStart >> 1);
    _tertiaryShift = state.tertiaryShift;
    _hashArea = state.mainHash;
    _names = state.names;
    _spilloverEnd = state.spilloverEnd;
    _longNameOffset = state.longNameOffset;
    // and then set other state to reflect sharing status
    _hashShared = true;
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.<init>(ByteQuadsCanonicalizer,int,TableInfo,boolean,boolean).parent","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.<init>(ByteQuadsCanonicalizer,int,TableInfo,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.<init>(ByteQuadsCanonicalizer,int,TableInfo,boolean,boolean).seed","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.<init>(ByteQuadsCanonicalizer,int,TableInfo,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.<init>(ByteQuadsCanonicalizer,int,TableInfo,boolean,boolean).state","Parameter_3","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.<init>(ByteQuadsCanonicalizer,int,TableInfo,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.<init>(ByteQuadsCanonicalizer,int,TableInfo,boolean,boolean).intern","Parameter_4","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.<init>(ByteQuadsCanonicalizer,int,TableInfo,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.<init>(ByteQuadsCanonicalizer,int,TableInfo,boolean,boolean).failOnDoS","Parameter_5","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.<init>(ByteQuadsCanonicalizer,int,TableInfo,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.<init>(TableInfo)","Constructor","* Alternate constructor used in cases where a ""placeholder"" child
     * instance is needed when symbol table is not really used, but
     * caller needs a non-null placeholder to keep code functioning
     * with minimal awareness of distinction (all lookups fail to match
     * any name without error; add methods should NOT be called).
     *
     * @since 2.13","private ByteQuadsCanonicalizer(TableInfo state) {
    _parent = null;
    _seed = 0;
    _interner = null;
    _failOnDoS = true;
    // not used by child tables
    _tableInfo = null;
    // Then copy minimal pieces of shared state; only enough to guarantee
    // we will neither find anything nor fail -- primary hash is enough
    // for that purpose
    _count = -1;
    _hashArea = state.mainHash;
    _names = state.names;
    _hashSize = state.size;
    // But otherwise can just use markers towards end of table to
    // indicate error if access was attempted
    final int end = _hashArea.length;
    _secondaryStart = end;
    _tertiaryStart = end;
    //  bogus
    _tertiaryShift = 1;
    _spilloverEnd = end;
    _longNameOffset = end;
    // just in case something failed, to ensure copying would be done
    _hashShared = true;
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.<init>(TableInfo).state","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.<init>(TableInfo)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo","Class","* Immutable value class used for sharing information as efficiently
     * as possible, by only require synchronization of reference manipulation
     * but not access to contents.
     *
     * @since 2.1","Class do not obtain Source Code","No return type","private , final , static ","",""
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.size","Field","No Comment","public final int size;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.count","Field","No Comment","public final int count;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.tertiaryShift","Field","No Comment","public final int tertiaryShift;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.mainHash","Field","No Comment","public final int[] mainHash;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.names","Field","No Comment","public final String[] names;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.spilloverEnd","Field","No Comment","public final int spilloverEnd;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.longNameOffset","Field","No Comment","public final int longNameOffset;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.createInitial(int)","Method","No Comment","public static TableInfo createInitial(int sz) {
    int hashAreaSize = sz << 3;
    int tertShift = _calcTertiaryShift(sz);
    return new // hashSize
    TableInfo(// hashSize
    sz, // count
    0, tertShift, // mainHash, 2x slots, 4 ints per slot
    new int[hashAreaSize], // names == 2x slots
    new String[sz << 1], // at 7/8 of the total area
    hashAreaSize - sz, // longNameOffset, immediately after main hashes
    hashAreaSize);
}","TableInfo","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.createInitial(int).sz","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.createInitial(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.<init>(int,int,int,int[],String[],int,int)","Constructor","No Comment","public TableInfo(int size, int count, int tertiaryShift, int[] mainHash, String[] names, int spilloverEnd, int longNameOffset) {
    this.size = size;
    this.count = count;
    this.tertiaryShift = tertiaryShift;
    this.mainHash = mainHash;
    this.names = names;
    this.spilloverEnd = spilloverEnd;
    this.longNameOffset = longNameOffset;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.<init>(int,int,int,int[],String[],int,int).size","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.<init>(int,int,int,int[],String[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.<init>(int,int,int,int[],String[],int,int).count","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.<init>(int,int,int,int[],String[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.<init>(int,int,int,int[],String[],int,int).tertiaryShift","Parameter_3","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.<init>(int,int,int,int[],String[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.<init>(int,int,int,int[],String[],int,int).mainHash","Parameter_4","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.<init>(int,int,int,int[],String[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.<init>(int,int,int,int[],String[],int,int).names","Parameter_5","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.<init>(int,int,int,int[],String[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.<init>(int,int,int,int[],String[],int,int).spilloverEnd","Parameter_6","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.<init>(int,int,int,int[],String[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.<init>(int,int,int,int[],String[],int,int).longNameOffset","Parameter_7","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.<init>(int,int,int,int[],String[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.<init>(ByteQuadsCanonicalizer)","Constructor","No Comment","public TableInfo(ByteQuadsCanonicalizer src) {
    size = src._hashSize;
    count = src._count;
    tertiaryShift = src._tertiaryShift;
    mainHash = src._hashArea;
    names = src._names;
    spilloverEnd = src._spilloverEnd;
    longNameOffset = src._longNameOffset;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.<init>(ByteQuadsCanonicalizer).src","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.<init>(ByteQuadsCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo","Class","* Immutable value class used for sharing information as efficiently
     * as possible, by only require synchronization of reference manipulation
     * but not access to contents.
     *
     * @since 2.1","Class do not obtain Source Code","No return type","private , final , static ","",""
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.size","Field","No Comment","public final int size;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.count","Field","No Comment","public final int count;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.tertiaryShift","Field","No Comment","public final int tertiaryShift;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.mainHash","Field","No Comment","public final int[] mainHash;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.names","Field","No Comment","public final String[] names;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.spilloverEnd","Field","No Comment","public final int spilloverEnd;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.longNameOffset","Field","No Comment","public final int longNameOffset;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.createInitial(int)","Method","No Comment","public static TableInfo createInitial(int sz) {
    int hashAreaSize = sz << 3;
    int tertShift = _calcTertiaryShift(sz);
    return new // hashSize
    TableInfo(// hashSize
    sz, // count
    0, tertShift, // mainHash, 2x slots, 4 ints per slot
    new int[hashAreaSize], // names == 2x slots
    new String[sz << 1], // at 7/8 of the total area
    hashAreaSize - sz, // longNameOffset, immediately after main hashes
    hashAreaSize);
}","TableInfo","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.createInitial(int).sz","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.createInitial(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.<init>(int,int,int,int[],String[],int,int)","Constructor","No Comment","public TableInfo(int size, int count, int tertiaryShift, int[] mainHash, String[] names, int spilloverEnd, int longNameOffset) {
    this.size = size;
    this.count = count;
    this.tertiaryShift = tertiaryShift;
    this.mainHash = mainHash;
    this.names = names;
    this.spilloverEnd = spilloverEnd;
    this.longNameOffset = longNameOffset;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.<init>(int,int,int,int[],String[],int,int).size","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.<init>(int,int,int,int[],String[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.<init>(int,int,int,int[],String[],int,int).count","Parameter_2","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.<init>(int,int,int,int[],String[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.<init>(int,int,int,int[],String[],int,int).tertiaryShift","Parameter_3","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.<init>(int,int,int,int[],String[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.<init>(int,int,int,int[],String[],int,int).mainHash","Parameter_4","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.<init>(int,int,int,int[],String[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.<init>(int,int,int,int[],String[],int,int).names","Parameter_5","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.<init>(int,int,int,int[],String[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.<init>(int,int,int,int[],String[],int,int).spilloverEnd","Parameter_6","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.<init>(int,int,int,int[],String[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.<init>(int,int,int,int[],String[],int,int).longNameOffset","Parameter_7","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.<init>(int,int,int,int[],String[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.<init>(ByteQuadsCanonicalizer)","Constructor","No Comment","public TableInfo(ByteQuadsCanonicalizer src) {
    size = src._hashSize;
    count = src._count;
    tertiaryShift = src._tertiaryShift;
    mainHash = src._hashArea;
    names = src._names;
    spilloverEnd = src._spilloverEnd;
    longNameOffset = src._longNameOffset;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.<init>(ByteQuadsCanonicalizer).src","Parameter_1","Belong to com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.TableInfo.<init>(ByteQuadsCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name1","Class","* Specialized implementation of PName: can be used for short Strings
 * that consists of at most 4 bytes. Usually this means short
 * ascii-only names.
 *<p>
 * The reason for such specialized classes is mostly space efficiency;
 * and to a lesser degree performance. Both are achieved for short
 * Strings by avoiding another level of indirection (via quad arrays)","Class do not obtain Source Code","No return type","public , final ","com.fasterxml.jackson.core.sym.Name",""
"com.fasterxml.jackson.core.sym.Name1.EMPTY","Field","No Comment","private final static Name1 EMPTY = new Name1("""", 0, 0);","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name1.q","Field","No Comment","private final int q;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name1.getEmptyName()","Method","No Comment","public static Name1 getEmptyName() {
    return EMPTY;
}","Name1","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name1.equals(int)","Method","No Comment","@Override
public boolean equals(int quad) {
    return (quad == q);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name1.equals(int).quad","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name1.equals(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name1.equals(int,int)","Method","No Comment","@Override
public boolean equals(int quad1, int quad2) {
    return (quad1 == q) && (quad2 == 0);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name1.equals(int,int).quad1","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name1.equals(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name1.equals(int,int).quad2","Parameter_2","Belong to com.fasterxml.jackson.core.sym.Name1.equals(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name1.equals(int,int,int)","Method","No Comment","@Override
public boolean equals(int q1, int q2, int q3) {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name1.equals(int,int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name1.equals(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name1.equals(int,int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.sym.Name1.equals(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name1.equals(int,int,int).q3","Parameter_3","Belong to com.fasterxml.jackson.core.sym.Name1.equals(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name1.equals(int[],int)","Method","No Comment","@Override
public boolean equals(int[] quads, int qlen) {
    return (qlen == 1 && quads[0] == q);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name1.equals(int[],int).quads","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name1.equals(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name1.equals(int[],int).qlen","Parameter_2","Belong to com.fasterxml.jackson.core.sym.Name1.equals(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name1.<init>(String,int,int)","Constructor","No Comment","Name1(String name, int hash, int quad) {
    super(name, hash);
    q = quad;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name1.<init>(String,int,int).name","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name1.<init>(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name1.<init>(String,int,int).hash","Parameter_2","Belong to com.fasterxml.jackson.core.sym.Name1.<init>(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name1.<init>(String,int,int).quad","Parameter_3","Belong to com.fasterxml.jackson.core.sym.Name1.<init>(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer","Class","* This class is a kind of specialized type-safe Map, from char array to
 * String value. Specialization means that in addition to type-safety
 * and specific access patterns (key char array, Value optionally interned
 * String; values added on access if necessary), and that instances are
 * meant to be used concurrently, but by using well-defined mechanisms
 * to obtain such concurrently usable instances. Main use for the class
 * is to store symbol table information for things like compilers and
 * parsers; especially when number of symbols (keywords) is limited.
 *<p>
 * For optimal performance, usage pattern should be one where matches
 * should be very common (especially after ""warm-up""), and as with most hash-based
 * maps/sets, that hash codes are uniformly distributed. Also, collisions
 * are slightly more expensive than with HashMap or HashSet, since hash codes
 * are not used in resolving collisions; that is, equals() comparison is
 * done with all symbols in same bucket index.<br>
 * Finally, rehashing is also more expensive, as hash codes are not
 * stored; rehashing requires all entries' hash codes to be recalculated.
 * Reason for not storing hash codes is reduced memory usage, hoping
 * for better memory locality.
 *<p>
 * Usual usage pattern is to create a single ""master"" instance, and either
 * use that instance in sequential fashion, or to create derived ""child""
 * instances, which after use, are asked to return possible symbol additions
 * to master instance. In either case benefit is that symbol table gets
 * initialized so that further uses are more efficient, as eventually all
 * symbols needed will already be in symbol table. At that point no more
 * Symbol String allocations are needed, nor changes to symbol table itself.
 *<p>
 * Note that while individual SymbolTable instances are NOT thread-safe
 * (much like generic collection classes), concurrently used ""child""
 * instances can be freely used without synchronization. However, using
 * master table concurrently with child instances can only be done if
 * access to master instance is read-only (i.e. no modifications done).","Class do not obtain Source Code","No return type","public , final ","",""
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.HASH_MULT","Field","If we use ""multiply-add"" based hash algorithm, this is the multiplier
     * we use.
     *<p>
     * Note that JDK uses 31; but it seems that 33 produces fewer collisions,
     * at least with tests we have.","public final static int HASH_MULT = 33;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.DEFAULT_T_SIZE","Field","* Default initial table size. Shouldn't be miniscule (as there's
     * cost to both array realloc and rehashing), but let's keep
     * it reasonably small. For systems that properly
     * reuse factories it doesn't matter either way; but when
     * recreating factories often, initial overhead may dominate.","private static final int DEFAULT_T_SIZE = 64;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.MAX_T_SIZE","Field","64k entries == 256k mem","private static final int MAX_T_SIZE = 0x10000;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.MAX_ENTRIES_FOR_REUSE","Field","* Let's only share reasonably sized symbol tables. Max size set to 3/4 of 16k;
     * this corresponds to 64k main hash index. This should allow for enough distinct
     * names for almost any case.","static final int MAX_ENTRIES_FOR_REUSE = 12000;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.MAX_COLL_CHAIN_LENGTH","Field","* Also: to thwart attacks based on hash collisions (which may or may not
     * be cheap to calculate), we will need to detect ""too long""
     * collision chains.
     * Started with static value of 100 entries for the longest legal chain,
     * but increased in Jackson 2.13 to 150 to work around specific test case.
     *<p>
     * Note: longest chain we have been able to produce without malicious
     * intent has been 38 (with ""com.fasterxml.jackson.core.main.TestWithTonsaSymbols"");
     * our setting should be reasonable here.
     *
     * @since 2.1 (changed in 2.13)","static final int MAX_COLL_CHAIN_LENGTH = 150;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._parent","Field","* Sharing of learnt symbols is done by optional linking of symbol
     * table instances with their parents. When parent linkage is
     * defined, and child instance is released (call to <code>release</code>),
     * parent's shared tables may be updated from the child instance.","protected final CharsToNameCanonicalizer _parent;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._tableInfo","Field","* Member that is only used by the root table instance: root
     * passes immutable state info child instances, and children
     * may return new state if they add entries to the table.
     * Child tables do NOT use the reference.","protected final AtomicReference<TableInfo> _tableInfo;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._streamReadConstraints","Field","* Constraints used by {@link TokenStreamFactory} that uses
     * this canonicalizer.
     *
     * @since 2.16","protected final StreamReadConstraints _streamReadConstraints;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._seed","Field","* Seed value we use as the base to make hash codes non-static between
     * different runs, but still stable for lifetime of a single symbol table
     * instance.
     * This is done for security reasons, to avoid potential DoS attack via
     * hash collisions.
     *
     * @since 2.1","protected final int _seed;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._factoryFeatures","Field","* Feature flags of {@link TokenStreamFactory} that uses
     * this canonicalizer.","protected final int _factoryFeatures;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._canonicalize","Field","* Whether any canonicalization should be attempted (whether using
     * intern or not.
     *<p>
     * NOTE: non-final since we may need to disable this with overflow.","protected boolean _canonicalize;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._symbols","Field","* Primary matching symbols; it's expected most match occur from
     * here.","protected String[] _symbols;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._buckets","Field","* Overflow buckets; if primary doesn't match, lookup is done
     * from here.
     *<p>
     * Note: Number of buckets is half of number of symbol entries, on
     * assumption there's less need for buckets.","protected Bucket[] _buckets;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._size","Field","* Current size (number of entries); needed to know if and when
     * rehash.","protected int _size;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._sizeThreshold","Field","* Limit that indicates maximum size this instance can hold before
     * it needs to be expanded and rehashed. Calculated using fill
     * factor passed in to constructor.","protected int _sizeThreshold;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._indexMask","Field","* Mask used to get index from hash values; equal to
     * <code>_buckets.length - 1</code>, when _buckets.length is
     * a power of two.","protected int _indexMask;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._longestCollisionList","Field","* We need to keep track of the longest collision list; this is needed
     * both to indicate problems with attacks and to allow flushing for
     * other cases.
     *
     * @since 2.1","protected int _longestCollisionList;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._hashShared","Field","* Flag that indicates whether underlying data structures for
     * the main hash area are shared or not. If they are, then they
     * need to be handled in copy-on-write way, i.e. if they need
     * to be modified, a copy needs to be made first; at this point
     * it will not be shared any more, and can be modified.
     *<p>
     * This flag needs to be checked both when adding new main entries,
     * and when adding new collision list queues (i.e. creating a new
     * collision list head entry)","protected boolean _hashShared;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._overflows","Field","* Lazily constructed structure that is used to keep track of
     * collision buckets that have overflowed once: this is used
     * to detect likely attempts at denial-of-service attacks that
     * uses hash collisions.
     *
     * @since 2.4","protected BitSet _overflows;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._thresholdSize(int)","Method","No Comment","private static int _thresholdSize(int hashAreaSize) {
    return hashAreaSize - (hashAreaSize >> 2);
}","int","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._thresholdSize(int).hashAreaSize","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._thresholdSize(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot()","Method","* @deprecated Since 2.16 use {@link #createRoot(TokenStreamFactory)} instead
     *
     * @return Root instance to use for constructing new child instances","@Deprecated
public static CharsToNameCanonicalizer createRoot() {
    return createRoot(null);
}","CharsToNameCanonicalizer","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot(int)","Method","* @param seed Seed for hash value calculation
     *
     * @return Root instance to use for constructing new child instances
     *
     * @deprecated Since 2.16 use {@link #createRoot(TokenStreamFactory)} instead","@Deprecated
public static CharsToNameCanonicalizer createRoot(int seed) {
    return createRoot(null, seed);
}","CharsToNameCanonicalizer","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot(int).seed","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot(TokenStreamFactory)","Method","* Method called to create root canonicalizer for a {@link com.fasterxml.jackson.core.JsonFactory}
     * instance. Root instance is never used directly; its main use is for
     * storing and sharing underlying symbol arrays as needed.
     *
     * @param owner Factory that will use the root instance; used for accessing
     *    configuration
     *
     * @return Root instance to use for constructing new child instances","public static CharsToNameCanonicalizer createRoot(TokenStreamFactory owner) {
    return createRoot(owner, 0);
}","CharsToNameCanonicalizer","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot(TokenStreamFactory).owner","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot(TokenStreamFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot(TokenStreamFactory,int)","Method","No Comment","public static CharsToNameCanonicalizer createRoot(TokenStreamFactory owner, int seed) {
    // Need to use a variable seed, to thwart hash-collision based attacks.
    // 14-Feb-2017, tatu: not sure it actually helps, at all, since it won't
    //   change mixing or any of the steps. Should likely just remove in future.
    if (seed == 0) {
        // 23-Aug-2023, tatu: Changed to use identity hash code instead of current time
        seed = System.identityHashCode(owner);
    }
    StreamReadConstraints src;
    int factoryFeatures;
    if (owner == null) {
        src = StreamReadConstraints.defaults();
        factoryFeatures = 0;
    } else {
        src = owner.streamReadConstraints();
        factoryFeatures = owner.getFactoryFeatures();
    }
    return new CharsToNameCanonicalizer(src, factoryFeatures, seed);
}","CharsToNameCanonicalizer","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot(TokenStreamFactory,int).owner","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot(TokenStreamFactory,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot(TokenStreamFactory,int).seed","Parameter_2","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot(TokenStreamFactory,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.makeChild()","Method","* ""Factory"" method; will create a new child instance of this symbol
     * table. It will be a copy-on-write instance, ie. it will only use
     * read-only copy of parent's data, but when changes are needed, a
     * copy will be created.
     *<p>
     * Note: It is generally not safe to both use makeChild/mergeChild, AND to
     * use instance actively. Instead, a separate 'root' instance should be
     * used on which only makeChild/mergeChild are called, but instance itself
     * is not used as a symbol table.
     *
     * @return Actual canonicalizer instance that can be used by a parser","public CharsToNameCanonicalizer makeChild() {
    return new CharsToNameCanonicalizer(this, _streamReadConstraints, _factoryFeatures, _seed, _tableInfo.get());
}","CharsToNameCanonicalizer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.makeChild(int)","Method","* @param flags Configuration flags (ignored)
     *
     * @return Actual canonicalizer instance that can be used by a parser
     *
     * @deprecated Since 2.16 use {@link #makeChild()} instead.","@Deprecated
public CharsToNameCanonicalizer makeChild(int flags) {
    return makeChild();
}","CharsToNameCanonicalizer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.makeChild(int).flags","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.makeChild(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.release()","Method","* Method called by the using code to indicate it is done with this instance.
     * This lets instance merge accumulated changes into parent (if need be),
     * safely and efficiently, and without calling code having to know about parent
     * information.","public void release() {
    // If nothing has been added, nothing to do
    if (!maybeDirty()) {
        return;
    }
    // we will try to merge if child table has new entries
    if (_parent != null && _canonicalize) {
        // canonicalize set to false if max size was reached
        _parent.mergeChild(new TableInfo(this));
        // Let's also mark this instance as dirty, so that just in
        // case release was too early, there's no corruption of possibly shared data.
        _hashShared = true;
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.mergeChild(TableInfo)","Method","* Method that allows contents of child table to potentially be
     * ""merged in"" with contents of this symbol table.
     *<p>
     * Note that caller has to make sure symbol table passed in is
     * really a child or sibling of this symbol table.","private void mergeChild(TableInfo childState) {
    final int childCount = childState.size;
    TableInfo currState = _tableInfo.get();
    // Should usually grow; but occasionally could also shrink if (but only if)
    // collision list overflow ends up clearing some collision lists.
    if (childCount == currState.size) {
        return;
    }
    // One caveat: let's try to avoid problems with  degenerate cases of documents with
    // generated ""random"" names: for these, symbol tables would bloat indefinitely.
    // One way to do this is to just purge tables if they grow
    // too large, and that's what we'll do here.
    if (childCount > MAX_ENTRIES_FOR_REUSE) {
        // At any rate, need to clean up the tables
        childState = TableInfo.createInitial(DEFAULT_T_SIZE);
    }
    _tableInfo.compareAndSet(currState, childState);
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.mergeChild(TableInfo).childState","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.mergeChild(TableInfo)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.size()","Method","* @return Number of symbol entries contained by this canonicalizer instance","public int size() {
    if (_tableInfo != null) {
        // root table
        return _tableInfo.get().size;
    }
    // nope, child table
    return _size;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.bucketCount()","Method","* Method for checking number of primary hash buckets this symbol
     * table uses.
     *
     * @return number of primary slots table has currently","public int bucketCount() {
    return _symbols.length;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.maybeDirty()","Method","No Comment","public boolean maybeDirty() {
    return !_hashShared;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.hashSeed()","Method","No Comment","public int hashSeed() {
    return _seed;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.collisionCount()","Method","* Method mostly needed by unit tests; calculates number of
     * entries that are in collision list. Value can be at most
     * ({@link #size} - 1), but should usually be much lower, ideally 0.
     *
     * @since 2.1
     *
     * @return Number of collisions in the primary hash area","public int collisionCount() {
    int count = 0;
    for (Bucket bucket : _buckets) {
        if (bucket != null) {
            count += bucket.length;
        }
    }
    return count;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.maxCollisionLength()","Method","* Method mostly needed by unit tests; calculates length of the
     * longest collision chain. This should typically be a low number,
     * but may be up to {@link #size} - 1 in the pathological case
     *
     * @return Length of the collision chain
     *
     * @since 2.1","public int maxCollisionLength() {
    return _longestCollisionList;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.findSymbol(char[],int,int,int)","Method","No Comment","public String findSymbol(char[] buffer, int start, int len, int h) throws IOException {
    if (len < 1) {
        // empty Strings are simplest to handle up front
        return """";
    }
    if (!_canonicalize) {
        // [JACKSON-259]
        _streamReadConstraints.validateNameLength(len);
        return new String(buffer, start, len);
    }
    /* Related to problems with sub-standard hashing (somewhat
         * relevant for collision attacks too), let's try little
         * bit of shuffling to improve hash codes.
         * (note, however, that this can't help with full collisions)
         */
    int index = _hashToIndex(h);
    String sym = _symbols[index];
    // Optimal case; checking existing primary symbol for hash index:
    if (sym != null) {
        // Let's inline primary String equality checking:
        if (sym.length() == len) {
            int i = 0;
            while (sym.charAt(i) == buffer[start + i]) {
                // Optimal case; primary match found
                if (++i == len) {
                    return sym;
                }
            }
        }
        Bucket b = _buckets[index >> 1];
        if (b != null) {
            sym = b.has(buffer, start, len);
            if (sym != null) {
                return sym;
            }
            sym = _findSymbol2(buffer, start, len, b.next);
            if (sym != null) {
                return sym;
            }
        }
    }
    _streamReadConstraints.validateNameLength(len);
    return _addSymbol(buffer, start, len, h, index);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.findSymbol(char[],int,int,int).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.findSymbol(char[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.findSymbol(char[],int,int,int).start","Parameter_2","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.findSymbol(char[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.findSymbol(char[],int,int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.findSymbol(char[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.findSymbol(char[],int,int,int).h","Parameter_4","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.findSymbol(char[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._findSymbol2(char[],int,int,Bucket)","Method","No Comment","private String _findSymbol2(char[] buffer, int start, int len, Bucket b) {
    while (b != null) {
        String sym = b.has(buffer, start, len);
        if (sym != null) {
            return sym;
        }
        b = b.next;
    }
    return null;
}","String","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._findSymbol2(char[],int,int,Bucket).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._findSymbol2(char[],int,int,Bucket)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._findSymbol2(char[],int,int,Bucket).start","Parameter_2","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._findSymbol2(char[],int,int,Bucket)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._findSymbol2(char[],int,int,Bucket).len","Parameter_3","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._findSymbol2(char[],int,int,Bucket)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._findSymbol2(char[],int,int,Bucket).b","Parameter_4","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._findSymbol2(char[],int,int,Bucket)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._addSymbol(char[],int,int,int,int)","Method","No Comment","private String _addSymbol(char[] buffer, int start, int len, int h, int index) throws IOException {
    if (_hashShared) {
        //need to do copy-on-write?
        copyArrays();
        _hashShared = false;
    } else if (_size >= _sizeThreshold) {
        // Need to expand?
        rehash();
        // Need to recalc hash; rare occurrence (index mask has been
        // recalculated as part of rehash)
        index = _hashToIndex(calcHash(buffer, start, len));
    }
    String newSymbol = new String(buffer, start, len);
    if (JsonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(_factoryFeatures)) {
        newSymbol = InternCache.instance.intern(newSymbol);
    }
    ++_size;
    // Ok; do we need to add primary entry, or a bucket?
    if (_symbols[index] == null) {
        _symbols[index] = newSymbol;
    } else {
        final int bix = (index >> 1);
        Bucket newB = new Bucket(newSymbol, _buckets[bix]);
        int collLen = newB.length;
        if (collLen > MAX_COLL_CHAIN_LENGTH) {
            // 23-May-2014, tatu: Instead of throwing an exception right away,
            //    let's handle in bit smarter way.
            _handleSpillOverflow(bix, newB, index);
        } else {
            _buckets[bix] = newB;
            _longestCollisionList = Math.max(collLen, _longestCollisionList);
        }
    }
    return newSymbol;
}","String","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._addSymbol(char[],int,int,int,int).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._addSymbol(char[],int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._addSymbol(char[],int,int,int,int).start","Parameter_2","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._addSymbol(char[],int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._addSymbol(char[],int,int,int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._addSymbol(char[],int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._addSymbol(char[],int,int,int,int).h","Parameter_4","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._addSymbol(char[],int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._addSymbol(char[],int,int,int,int).index","Parameter_5","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._addSymbol(char[],int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._handleSpillOverflow(int,Bucket,int)","Method","* Method called when an overflow bucket has hit the maximum expected length:
     * this may be a case of DoS attack. Deal with it based on settings by either
     * clearing up bucket (to avoid indefinite expansion) or throwing exception.
     * Currently, the first overflow for any single bucket DOES NOT throw an exception,
     * only second time (per symbol table instance)","private void _handleSpillOverflow(int bucketIndex, Bucket newBucket, int mainIndex) throws IOException {
    if (_overflows == null) {
        _overflows = new BitSet();
        _overflows.set(bucketIndex);
    } else {
        if (_overflows.get(bucketIndex)) {
            // Has happened once already for this bucket index, so probably not coincidental...
            if (JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW.enabledIn(_factoryFeatures)) {
                _reportTooManyCollisions(MAX_COLL_CHAIN_LENGTH);
            }
            // but even if we don't fail, we will stop canonicalizing as safety measure
            // (so as not to cause problems with PermGen)
            _canonicalize = false;
        } else {
            _overflows.set(bucketIndex);
        }
    }
    // regardless, if we get this far, clear up the bucket, adjust size appropriately.
    _symbols[mainIndex] = newBucket.symbol;
    _buckets[bucketIndex] = null;
    // newBucket contains new symbol; but we will
    _size -= (newBucket.length);
    // we could calculate longest; but for now just mark as invalid
    _longestCollisionList = -1;
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._handleSpillOverflow(int,Bucket,int).bucketIndex","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._handleSpillOverflow(int,Bucket,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._handleSpillOverflow(int,Bucket,int).newBucket","Parameter_2","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._handleSpillOverflow(int,Bucket,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._handleSpillOverflow(int,Bucket,int).mainIndex","Parameter_3","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._handleSpillOverflow(int,Bucket,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._hashToIndex(int)","Method","* Helper method that takes in a ""raw"" hash value, shuffles it as necessary,
     * and truncates to be used as the index.
     *
     * @param rawHash Raw hash value to use for calculating index
     *
     * @return Index value calculated","public int _hashToIndex(int rawHash) {
    // doing these seems to help a bit
    rawHash += (rawHash >>> 15);
    rawHash ^= (rawHash << 7);
    rawHash += (rawHash >>> 3);
    return (rawHash & _indexMask);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._hashToIndex(int).rawHash","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._hashToIndex(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.calcHash(char[],int,int)","Method","* Implementation of a hashing method for variable length
     * Strings. Most of the time intention is that this calculation
     * is done by caller during parsing, not here; however, sometimes
     * it needs to be done for parsed ""String"" too.
     *
     * @param buffer Input buffer that contains name to decode
     * @param start Pointer to the first character of the name
     * @param len Length of String; has to be at least 1 (caller guarantees)
     *
     * @return Hash code calculated","public int calcHash(char[] buffer, int start, int len) {
    int hash = _seed;
    for (int i = start, end = start + len; i < end; ++i) {
        hash = (hash * HASH_MULT) + buffer[i];
    }
    // NOTE: shuffling, if any, is done in 'findSymbol()', not here:
    return (hash == 0) ? 1 : hash;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.calcHash(char[],int,int).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.calcHash(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.calcHash(char[],int,int).start","Parameter_2","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.calcHash(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.calcHash(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.calcHash(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.calcHash(String)","Method","No Comment","public int calcHash(String key) {
    final int len = key.length();
    int hash = _seed;
    for (int i = 0; i < len; ++i) {
        hash = (hash * HASH_MULT) + key.charAt(i);
    }
    // NOTE: shuffling, if any, is done in 'findSymbol()', not here:
    return (hash == 0) ? 1 : hash;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.calcHash(String).key","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.calcHash(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.copyArrays()","Method","* Method called when copy-on-write is needed; generally when first
     * change is made to a derived symbol table.","private void copyArrays() {
    final String[] oldSyms = _symbols;
    _symbols = Arrays.copyOf(oldSyms, oldSyms.length);
    final Bucket[] oldBuckets = _buckets;
    _buckets = Arrays.copyOf(oldBuckets, oldBuckets.length);
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.rehash()","Method","* Method called when size (number of entries) of symbol table grows
     * so big that load factor is exceeded. Since size has to remain
     * power of two, arrays will then always be doubled. Main work
     * is really redistributing old entries into new String/Bucket
     * entries.","private void rehash() throws IOException {
    final int size = _symbols.length;
    int newSize = size + size;
    /* 12-Mar-2010, tatu: Let's actually limit maximum size we are
         *    prepared to use, to guard against OOME in case of unbounded
         *    name sets (unique [non-repeating] names)
         */
    if (newSize > MAX_T_SIZE) {
        // If this happens, there's no point in either growing or shrinking hash areas.
        // Rather, let's just cut our losses and stop canonicalizing.
        _size = 0;
        _canonicalize = false;
        // in theory, could just leave these as null, but...
        _symbols = new String[DEFAULT_T_SIZE];
        _buckets = new Bucket[DEFAULT_T_SIZE >> 1];
        _indexMask = DEFAULT_T_SIZE - 1;
        _hashShared = false;
        return;
    }
    final String[] oldSyms = _symbols;
    final Bucket[] oldBuckets = _buckets;
    _symbols = new String[newSize];
    _buckets = new Bucket[newSize >> 1];
    // Let's update index mask, threshold, now (needed for rehashing)
    _indexMask = newSize - 1;
    _sizeThreshold = _thresholdSize(newSize);
    // let's do sanity check
    int count = 0;
    // Need to do two loops, unfortunately, since spill-over area is
    // only half the size:
    int maxColl = 0;
    for (int i = 0; i < size; ++i) {
        String symbol = oldSyms[i];
        if (symbol != null) {
            ++count;
            int index = _hashToIndex(calcHash(symbol));
            if (_symbols[index] == null) {
                _symbols[index] = symbol;
            } else {
                int bix = (index >> 1);
                Bucket newB = new Bucket(symbol, _buckets[bix]);
                _buckets[bix] = newB;
                maxColl = Math.max(maxColl, newB.length);
            }
        }
    }
    final int bucketSize = (size >> 1);
    for (int i = 0; i < bucketSize; ++i) {
        Bucket b = oldBuckets[i];
        while (b != null) {
            ++count;
            String symbol = b.symbol;
            int index = _hashToIndex(calcHash(symbol));
            if (_symbols[index] == null) {
                _symbols[index] = symbol;
            } else {
                int bix = (index >> 1);
                Bucket newB = new Bucket(symbol, _buckets[bix]);
                _buckets[bix] = newB;
                maxColl = Math.max(maxColl, newB.length);
            }
            b = b.next;
        }
    }
    _longestCollisionList = maxColl;
    _overflows = null;
    if (count != _size) {
        throw new IllegalStateException(String.format(""Internal error on SymbolTable.rehash(): had %d entries; now have %d"", _size, count));
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._reportTooManyCollisions(int)","Method","* @param maxLen Maximum allowed length of collision chain
     * @throws StreamConstraintsException if there are too many collisions (was an IllegalStateException before v2.15)
     * @since 2.1","protected void _reportTooManyCollisions(int maxLen) throws StreamConstraintsException {
    throw new StreamConstraintsException(""Longest collision chain in symbol table (of size "" + _size + "") now exceeds maximum, "" + maxLen + "" -- suspect a DoS attack based on hash collisions"");
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._reportTooManyCollisions(int).maxLen","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._reportTooManyCollisions(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.verifyInternalConsistency()","Method","* Diagnostics method that will verify that internal data structures are consistent;
     * not meant as user-facing method but only for test suites and possible troubleshooting.
     *
     * @since 2.10","protected void verifyInternalConsistency() {
    int count = 0;
    final int size = _symbols.length;
    for (int i = 0; i < size; ++i) {
        String symbol = _symbols[i];
        if (symbol != null) {
            ++count;
        }
    }
    final int bucketSize = (size >> 1);
    for (int i = 0; i < bucketSize; ++i) {
        for (Bucket b = _buckets[i]; b != null; b = b.next) {
            ++count;
        }
    }
    if (count != _size) {
        throw new IllegalStateException(String.format(""Internal error: expected internal size %d vs calculated count %d"", _size, count));
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.<init>(StreamReadConstraints,int,int)","Constructor","* Main method for constructing a root symbol table instance.","private CharsToNameCanonicalizer(StreamReadConstraints src, int factoryFeatures, int seed) {
    _parent = null;
    _seed = seed;
    _streamReadConstraints = src;
    // these settings don't really matter for the bootstrap instance
    _canonicalize = true;
    _factoryFeatures = factoryFeatures;
    // And we'll also set flags so no copying of buckets is needed:
    // doesn't really matter for root instance
    _hashShared = false;
    _longestCollisionList = 0;
    _tableInfo = new AtomicReference<>(TableInfo.createInitial(DEFAULT_T_SIZE));
    // and actually do NOT assign buffers so we'll find if anyone tried to
    // use root instance
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.<init>(StreamReadConstraints,int,int).src","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.<init>(StreamReadConstraints,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.<init>(StreamReadConstraints,int,int).factoryFeatures","Parameter_2","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.<init>(StreamReadConstraints,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.<init>(StreamReadConstraints,int,int).seed","Parameter_3","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.<init>(StreamReadConstraints,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.<init>(CharsToNameCanonicalizer,StreamReadConstraints,int,int,TableInfo)","Constructor","* Internal constructor used when creating child instances.","private CharsToNameCanonicalizer(CharsToNameCanonicalizer parent, StreamReadConstraints src, int factoryFeatures, int seed, TableInfo parentState) {
    _parent = parent;
    _streamReadConstraints = src;
    _seed = seed;
    // not used by child tables
    _tableInfo = null;
    _factoryFeatures = factoryFeatures;
    _canonicalize = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES.enabledIn(factoryFeatures);
    // Then copy shared state
    _symbols = parentState.symbols;
    _buckets = parentState.buckets;
    _size = parentState.size;
    _longestCollisionList = parentState.longestCollisionList;
    // Hard-coded fill factor, 75%
    int arrayLen = (_symbols.length);
    _sizeThreshold = _thresholdSize(arrayLen);
    _indexMask = (arrayLen - 1);
    // Need to make copies of arrays, if/when adding new entries
    _hashShared = true;
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.<init>(CharsToNameCanonicalizer,StreamReadConstraints,int,int,TableInfo).parent","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.<init>(CharsToNameCanonicalizer,StreamReadConstraints,int,int,TableInfo)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.<init>(CharsToNameCanonicalizer,StreamReadConstraints,int,int,TableInfo).src","Parameter_2","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.<init>(CharsToNameCanonicalizer,StreamReadConstraints,int,int,TableInfo)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.<init>(CharsToNameCanonicalizer,StreamReadConstraints,int,int,TableInfo).factoryFeatures","Parameter_3","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.<init>(CharsToNameCanonicalizer,StreamReadConstraints,int,int,TableInfo)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.<init>(CharsToNameCanonicalizer,StreamReadConstraints,int,int,TableInfo).seed","Parameter_4","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.<init>(CharsToNameCanonicalizer,StreamReadConstraints,int,int,TableInfo)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.<init>(CharsToNameCanonicalizer,StreamReadConstraints,int,int,TableInfo).parentState","Parameter_5","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.<init>(CharsToNameCanonicalizer,StreamReadConstraints,int,int,TableInfo)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket","Class","* This class is a symbol table entry. Each entry acts as a node
     * in a linked list.","Class do not obtain Source Code","No return type","static , final ","",""
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket.symbol","Field","No Comment","public final String symbol;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket.next","Field","No Comment","public final Bucket next;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket.length","Field","No Comment","public final int length;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket.has(char[],int,int)","Method","No Comment","public String has(char[] buf, int start, int len) {
    if (symbol.length() != len) {
        return null;
    }
    int i = 0;
    do {
        if (symbol.charAt(i) != buf[start + i]) {
            return null;
        }
    } while (++i < len);
    return symbol;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket.has(char[],int,int).buf","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket.has(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket.has(char[],int,int).start","Parameter_2","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket.has(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket.has(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket.has(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket.<init>(String,Bucket)","Constructor","No Comment","public Bucket(String s, Bucket n) {
    symbol = s;
    next = n;
    length = (n == null) ? 1 : n.length + 1;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket.<init>(String,Bucket).s","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket.<init>(String,Bucket)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket.<init>(String,Bucket).n","Parameter_2","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket.<init>(String,Bucket)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo","Class","* Immutable value class used for sharing information as efficiently
     * as possible, by only require synchronization of reference manipulation
     * but not access to contents.
     *
     * @since 2.8.7","Class do not obtain Source Code","No return type","private , final , static ","",""
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.size","Field","No Comment","final int size;","No return type","final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.longestCollisionList","Field","No Comment","final int longestCollisionList;","No return type","final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.symbols","Field","No Comment","final String[] symbols;","No return type","final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.buckets","Field","No Comment","final Bucket[] buckets;","No return type","final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.createInitial(int)","Method","No Comment","public static TableInfo createInitial(int sz) {
    return new TableInfo(0, // longestCollisionList
    0, new String[sz], new Bucket[sz >> 1]);
}","TableInfo","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.createInitial(int).sz","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.createInitial(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.<init>(int,int,String[],Bucket[])","Constructor","No Comment","public TableInfo(int size, int longestCollisionList, String[] symbols, Bucket[] buckets) {
    this.size = size;
    this.longestCollisionList = longestCollisionList;
    this.symbols = symbols;
    this.buckets = buckets;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.<init>(int,int,String[],Bucket[]).size","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.<init>(int,int,String[],Bucket[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.<init>(int,int,String[],Bucket[]).longestCollisionList","Parameter_2","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.<init>(int,int,String[],Bucket[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.<init>(int,int,String[],Bucket[]).symbols","Parameter_3","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.<init>(int,int,String[],Bucket[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.<init>(int,int,String[],Bucket[]).buckets","Parameter_4","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.<init>(int,int,String[],Bucket[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.<init>(CharsToNameCanonicalizer)","Constructor","No Comment","public TableInfo(CharsToNameCanonicalizer src) {
    this.size = src._size;
    this.longestCollisionList = src._longestCollisionList;
    this.symbols = src._symbols;
    this.buckets = src._buckets;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.<init>(CharsToNameCanonicalizer).src","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.<init>(CharsToNameCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.Bucket","Class","* This class is a symbol table entry. Each entry acts as a node
     * in a linked list.","Class do not obtain Source Code","No return type","static , final ","",""
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.Bucket.symbol","Field","No Comment","public final String symbol;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.Bucket.next","Field","No Comment","public final Bucket next;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.Bucket.length","Field","No Comment","public final int length;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.Bucket.has(char[],int,int)","Method","No Comment","public String has(char[] buf, int start, int len) {
    if (symbol.length() != len) {
        return null;
    }
    int i = 0;
    do {
        if (symbol.charAt(i) != buf[start + i]) {
            return null;
        }
    } while (++i < len);
    return symbol;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.Bucket.has(char[],int,int).buf","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.Bucket.has(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.Bucket.has(char[],int,int).start","Parameter_2","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.Bucket.has(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.Bucket.has(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.Bucket.has(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.Bucket.<init>(String,Bucket)","Constructor","No Comment","public Bucket(String s, Bucket n) {
    symbol = s;
    next = n;
    length = (n == null) ? 1 : n.length + 1;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.Bucket.<init>(String,Bucket).s","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.Bucket.<init>(String,Bucket)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.Bucket.<init>(String,Bucket).n","Parameter_2","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.Bucket.<init>(String,Bucket)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.TableInfo","Class","* Immutable value class used for sharing information as efficiently
     * as possible, by only require synchronization of reference manipulation
     * but not access to contents.
     *
     * @since 2.8.7","Class do not obtain Source Code","No return type","private , final , static ","",""
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.TableInfo.size","Field","No Comment","final int size;","No return type","final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.TableInfo.longestCollisionList","Field","No Comment","final int longestCollisionList;","No return type","final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.TableInfo.symbols","Field","No Comment","final String[] symbols;","No return type","final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.TableInfo.buckets","Field","No Comment","final Bucket[] buckets;","No return type","final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.TableInfo.createInitial(int)","Method","No Comment","public static TableInfo createInitial(int sz) {
    return new TableInfo(0, // longestCollisionList
    0, new String[sz], new Bucket[sz >> 1]);
}","TableInfo","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.TableInfo.createInitial(int).sz","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.TableInfo.createInitial(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.TableInfo.<init>(int,int,String[],Bucket[])","Constructor","No Comment","public TableInfo(int size, int longestCollisionList, String[] symbols, Bucket[] buckets) {
    this.size = size;
    this.longestCollisionList = longestCollisionList;
    this.symbols = symbols;
    this.buckets = buckets;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.TableInfo.<init>(int,int,String[],Bucket[]).size","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.TableInfo.<init>(int,int,String[],Bucket[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.TableInfo.<init>(int,int,String[],Bucket[]).longestCollisionList","Parameter_2","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.TableInfo.<init>(int,int,String[],Bucket[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.TableInfo.<init>(int,int,String[],Bucket[]).symbols","Parameter_3","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.TableInfo.<init>(int,int,String[],Bucket[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.TableInfo.<init>(int,int,String[],Bucket[]).buckets","Parameter_4","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.TableInfo.<init>(int,int,String[],Bucket[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.TableInfo.<init>(CharsToNameCanonicalizer)","Constructor","No Comment","public TableInfo(CharsToNameCanonicalizer src) {
    this.size = src._size;
    this.longestCollisionList = src._longestCollisionList;
    this.symbols = src._symbols;
    this.buckets = src._buckets;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.TableInfo.<init>(CharsToNameCanonicalizer).src","Parameter_1","Belong to com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.TableInfo.<init>(CharsToNameCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name2","Class","* Specialized implementation of PName: can be used for short Strings
 * that consists of 5 to 8 bytes. Usually this means relatively short
 * ascii-only names.
 *<p>
 * The reason for such specialized classes is mostly space efficiency;
 * and to a lesser degree performance. Both are achieved for short
 * Strings by avoiding another level of indirection (via quad arrays)","Class do not obtain Source Code","No return type","public , final ","com.fasterxml.jackson.core.sym.Name",""
"com.fasterxml.jackson.core.sym.Name2.q1","Field","No Comment","private final int q1, q2;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name2.q2","Field","No Comment","private final int q1, q2;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name2.equals(int)","Method","No Comment","@Override
public boolean equals(int quad) {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name2.equals(int).quad","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name2.equals(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name2.equals(int,int)","Method","No Comment","@Override
public boolean equals(int quad1, int quad2) {
    return (quad1 == q1) && (quad2 == q2);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name2.equals(int,int).quad1","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name2.equals(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name2.equals(int,int).quad2","Parameter_2","Belong to com.fasterxml.jackson.core.sym.Name2.equals(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name2.equals(int,int,int)","Method","No Comment","@Override
public boolean equals(int quad1, int quad2, int q3) {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name2.equals(int,int,int).quad1","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name2.equals(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name2.equals(int,int,int).quad2","Parameter_2","Belong to com.fasterxml.jackson.core.sym.Name2.equals(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name2.equals(int,int,int).q3","Parameter_3","Belong to com.fasterxml.jackson.core.sym.Name2.equals(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name2.equals(int[],int)","Method","No Comment","@Override
public boolean equals(int[] quads, int qlen) {
    return (qlen == 2 && quads[0] == q1 && quads[1] == q2);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name2.equals(int[],int).quads","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name2.equals(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name2.equals(int[],int).qlen","Parameter_2","Belong to com.fasterxml.jackson.core.sym.Name2.equals(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name2.<init>(String,int,int,int)","Constructor","No Comment","Name2(String name, int hash, int quad1, int quad2) {
    super(name, hash);
    q1 = quad1;
    q2 = quad2;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name2.<init>(String,int,int,int).name","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name2.<init>(String,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name2.<init>(String,int,int,int).hash","Parameter_2","Belong to com.fasterxml.jackson.core.sym.Name2.<init>(String,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name2.<init>(String,int,int,int).quad1","Parameter_3","Belong to com.fasterxml.jackson.core.sym.Name2.<init>(String,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name2.<init>(String,int,int,int).quad2","Parameter_4","Belong to com.fasterxml.jackson.core.sym.Name2.<init>(String,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3","Class","* Specialized implementation of PName: can be used for short Strings
 * that consists of 9 to 12 bytes. It's the longest special purpose
 * implementaion; longer ones are expressed using {@link NameN}.","Class do not obtain Source Code","No return type","public , final ","com.fasterxml.jackson.core.sym.Name",""
"com.fasterxml.jackson.core.sym.Name3.q1","Field","No Comment","private final int q1, q2, q3;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3.q2","Field","No Comment","private final int q1, q2, q3;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3.q3","Field","No Comment","private final int q1, q2, q3;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3.equals(int)","Method","Implies quad length == 1, never matches","@Override
public boolean equals(int quad) {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3.equals(int).quad","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name3.equals(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3.equals(int,int)","Method","Implies quad length == 2, never matches","@Override
public boolean equals(int quad1, int quad2) {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3.equals(int,int).quad1","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name3.equals(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3.equals(int,int).quad2","Parameter_2","Belong to com.fasterxml.jackson.core.sym.Name3.equals(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3.equals(int,int,int)","Method","No Comment","@Override
public boolean equals(int quad1, int quad2, int quad3) {
    return (q1 == quad1) && (q2 == quad2) && (q3 == quad3);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3.equals(int,int,int).quad1","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name3.equals(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3.equals(int,int,int).quad2","Parameter_2","Belong to com.fasterxml.jackson.core.sym.Name3.equals(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3.equals(int,int,int).quad3","Parameter_3","Belong to com.fasterxml.jackson.core.sym.Name3.equals(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3.equals(int[],int)","Method","No Comment","@Override
public boolean equals(int[] quads, int qlen) {
    return (qlen == 3) && (quads[0] == q1) && (quads[1] == q2) && (quads[2] == q3);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3.equals(int[],int).quads","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name3.equals(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3.equals(int[],int).qlen","Parameter_2","Belong to com.fasterxml.jackson.core.sym.Name3.equals(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3.<init>(String,int,int,int,int)","Constructor","No Comment","Name3(String name, int hash, int i1, int i2, int i3) {
    super(name, hash);
    q1 = i1;
    q2 = i2;
    q3 = i3;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3.<init>(String,int,int,int,int).name","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name3.<init>(String,int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3.<init>(String,int,int,int,int).hash","Parameter_2","Belong to com.fasterxml.jackson.core.sym.Name3.<init>(String,int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3.<init>(String,int,int,int,int).i1","Parameter_3","Belong to com.fasterxml.jackson.core.sym.Name3.<init>(String,int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3.<init>(String,int,int,int,int).i2","Parameter_4","Belong to com.fasterxml.jackson.core.sym.Name3.<init>(String,int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name3.<init>(String,int,int,int,int).i3","Parameter_5","Belong to com.fasterxml.jackson.core.sym.Name3.<init>(String,int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name","Abstract Class","* Base class for tokenized names (key strings in objects) that have
 * been tokenized from byte-based input sources (like
 * {@link java.io.InputStream}.
 *
 * @author Tatu Saloranta","Abstract Class do not obtain Source Code","No return type","public , abstract ","",""
"com.fasterxml.jackson.core.sym.Name._name","Field","No Comment","protected final String _name;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name._hashCode","Field","No Comment","protected final int _hashCode;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name.getName()","Method","No Comment","public String getName() {
    return _name;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name.equals(int)","Abstract Method","No Comment","public abstract boolean equals(int q1);","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name.equals(int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name.equals(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name.equals(int,int)","Abstract Method","No Comment","public abstract boolean equals(int q1, int q2);","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name.equals(int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name.equals(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name.equals(int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.sym.Name.equals(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name.equals(int,int,int)","Abstract Method","No Comment","public abstract boolean equals(int q1, int q2, int q3);","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name.equals(int,int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name.equals(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name.equals(int,int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.sym.Name.equals(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name.equals(int,int,int).q3","Parameter_3","Belong to com.fasterxml.jackson.core.sym.Name.equals(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name.equals(int[],int)","Abstract Method","No Comment","public abstract boolean equals(int[] quads, int qlen);","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name.equals(int[],int).quads","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name.equals(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name.equals(int[],int).qlen","Parameter_2","Belong to com.fasterxml.jackson.core.sym.Name.equals(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name.toString()","Method","No Comment","@Override
public String toString() {
    return _name;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name.hashCode()","Method","No Comment","@Override
public final int hashCode() {
    return _hashCode;
}","int","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name.equals(Object)","Method","No Comment","@Override
public boolean equals(Object o) {
    // Canonical instances, can usually just do identity comparison
    return (o == this);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name.equals(Object).o","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name.equals(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name.<init>(String,int)","Constructor","No Comment","protected Name(String name, int hashCode) {
    _name = name;
    _hashCode = hashCode;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name.<init>(String,int).name","Parameter_1","Belong to com.fasterxml.jackson.core.sym.Name.<init>(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.Name.<init>(String,int).hashCode","Parameter_2","Belong to com.fasterxml.jackson.core.sym.Name.<init>(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN","Class","* Generic implementation of PName used for ""long"" names, where long
 * means that its byte (UTF-8) representation is 13 bytes or more.","Class do not obtain Source Code","No return type","public , final ","com.fasterxml.jackson.core.sym.Name",""
"com.fasterxml.jackson.core.sym.NameN.q1","Field","first four quads","private final int q1, q2, q3, q4;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.q2","Field","first four quads","private final int q1, q2, q3, q4;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.q3","Field","first four quads","private final int q1, q2, q3, q4;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.q4","Field","first four quads","private final int q1, q2, q3, q4;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.qlen","Field","total number of quads (4 + q.length)","private final int qlen;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.q","Field","No Comment","private final int[] q;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.construct(String,int,int[],int)","Method","No Comment","public static NameN construct(String name, int hash, int[] q, int qlen) {
    /* We have specialized implementations for shorter
         * names, so let's not allow runt instances here
         */
    if (qlen < 4) {
        throw new IllegalArgumentException();
    }
    int q1 = q[0];
    int q2 = q[1];
    int q3 = q[2];
    int q4 = q[3];
    int rem = qlen - 4;
    int[] buf;
    if (rem > 0) {
        buf = Arrays.copyOfRange(q, 4, qlen);
    } else {
        buf = null;
    }
    return new NameN(name, hash, q1, q2, q3, q4, buf, qlen);
}","NameN","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.construct(String,int,int[],int).name","Parameter_1","Belong to com.fasterxml.jackson.core.sym.NameN.construct(String,int,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.construct(String,int,int[],int).hash","Parameter_2","Belong to com.fasterxml.jackson.core.sym.NameN.construct(String,int,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.construct(String,int,int[],int).q","Parameter_3","Belong to com.fasterxml.jackson.core.sym.NameN.construct(String,int,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.construct(String,int,int[],int).qlen","Parameter_4","Belong to com.fasterxml.jackson.core.sym.NameN.construct(String,int,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.equals(int)","Method","Implies quad length == 1, never matches","@Override
public boolean equals(int quad) {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.equals(int).quad","Parameter_1","Belong to com.fasterxml.jackson.core.sym.NameN.equals(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.equals(int,int)","Method","Implies quad length == 2, never matches","@Override
public boolean equals(int quad1, int quad2) {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.equals(int,int).quad1","Parameter_1","Belong to com.fasterxml.jackson.core.sym.NameN.equals(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.equals(int,int).quad2","Parameter_2","Belong to com.fasterxml.jackson.core.sym.NameN.equals(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.equals(int,int,int)","Method","Implies quad length == 3, never matches","@Override
public boolean equals(int quad1, int quad2, int quad3) {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.equals(int,int,int).quad1","Parameter_1","Belong to com.fasterxml.jackson.core.sym.NameN.equals(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.equals(int,int,int).quad2","Parameter_2","Belong to com.fasterxml.jackson.core.sym.NameN.equals(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.equals(int,int,int).quad3","Parameter_3","Belong to com.fasterxml.jackson.core.sym.NameN.equals(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.equals(int[],int)","Method","No Comment","@Override
public boolean equals(int[] quads, int len) {
    if (len != qlen) {
        return false;
    }
    // Will always have >= 4 quads, can unroll
    if (quads[0] != q1)
        return false;
    if (quads[1] != q2)
        return false;
    if (quads[2] != q3)
        return false;
    if (quads[3] != q4)
        return false;
    switch(len) {
        default:
            return _equals2(quads);
        case 8:
            if (quads[7] != q[3])
                return false;
        case 7:
            if (quads[6] != q[2])
                return false;
        case 6:
            if (quads[5] != q[1])
                return false;
        case 5:
            if (quads[4] != q[0])
                return false;
        case 4:
    }
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.equals(int[],int).quads","Parameter_1","Belong to com.fasterxml.jackson.core.sym.NameN.equals(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.equals(int[],int).len","Parameter_2","Belong to com.fasterxml.jackson.core.sym.NameN.equals(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN._equals2(int[])","Method","No Comment","private final boolean _equals2(int[] quads) {
    final int end = qlen - 4;
    for (int i = 0; i < end; ++i) {
        if (quads[i + 4] != q[i]) {
            return false;
        }
    }
    return true;
}","boolean","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN._equals2(int[]).quads","Parameter_1","Belong to com.fasterxml.jackson.core.sym.NameN._equals2(int[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.<init>(String,int,int,int,int,int,int[],int)","Constructor","No Comment","NameN(String name, int hash, int q1, int q2, int q3, int q4, int[] quads, int quadLen) {
    super(name, hash);
    this.q1 = q1;
    this.q2 = q2;
    this.q3 = q3;
    this.q4 = q4;
    q = quads;
    qlen = quadLen;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.<init>(String,int,int,int,int,int,int[],int).name","Parameter_1","Belong to com.fasterxml.jackson.core.sym.NameN.<init>(String,int,int,int,int,int,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.<init>(String,int,int,int,int,int,int[],int).hash","Parameter_2","Belong to com.fasterxml.jackson.core.sym.NameN.<init>(String,int,int,int,int,int,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.<init>(String,int,int,int,int,int,int[],int).q1","Parameter_3","Belong to com.fasterxml.jackson.core.sym.NameN.<init>(String,int,int,int,int,int,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.<init>(String,int,int,int,int,int,int[],int).q2","Parameter_4","Belong to com.fasterxml.jackson.core.sym.NameN.<init>(String,int,int,int,int,int,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.<init>(String,int,int,int,int,int,int[],int).q3","Parameter_5","Belong to com.fasterxml.jackson.core.sym.NameN.<init>(String,int,int,int,int,int,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.<init>(String,int,int,int,int,int,int[],int).q4","Parameter_6","Belong to com.fasterxml.jackson.core.sym.NameN.<init>(String,int,int,int,int,int,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.<init>(String,int,int,int,int,int,int[],int).quads","Parameter_7","Belong to com.fasterxml.jackson.core.sym.NameN.<init>(String,int,int,int,int,int,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.sym.NameN.<init>(String,int,int,int,int,int,int[],int).quadLen","Parameter_8","Belong to com.fasterxml.jackson.core.sym.NameN.<init>(String,int,int,int,int,int,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter","Interface","* Interface for objects that implement pretty printer functionality, such
 * as indentation.
 * Pretty printers are used to add white space in output JSON content,
 * to make results more human readable. Usually this means things like adding
 * linefeeds and indentation.
 *<p>
 * Note: since Jackson 2.1, stateful implementations MUST implement
 * {@link com.fasterxml.jackson.core.util.Instantiatable} interface,
 * to allow for constructing  per-generation instances and avoid
 * state corruption.
 * Stateless implementations need not do this; but those are less common.","Interface do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.PrettyPrinter.DEFAULT_SEPARATORS","Field","* @since 2.9","public final static Separators DEFAULT_SEPARATORS = Separators.createDefaultInstance();","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR","Field","* Default String used for separating root values is single space.
     *
     * @since 2.9","public final static SerializedString DEFAULT_ROOT_VALUE_SEPARATOR = new SerializedString("" "");","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.writeRootValueSeparator(JsonGenerator)","Abstract Method","* Method called after a root-level value has been completely
     * output, and before another value is to be output.
     *<p>
     * Default handling (without pretty-printing) will output a space, to
     * allow values to be parsed correctly. Pretty-printer is
     * to output some other suitable and nice-looking separator
     * (tab(s), space(s), linefeed(s) or any combination thereof).
     *
     * @param gen Generator used for output
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","void writeRootValueSeparator(JsonGenerator gen) throws IOException;","void","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.writeRootValueSeparator(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.core.PrettyPrinter.writeRootValueSeparator(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.writeStartObject(JsonGenerator)","Abstract Method","* Method called when an Object value is to be output, before
     * any fields are output.
     *<p>
     * Default handling (without pretty-printing) will output
     * the opening curly bracket.
     * Pretty-printer is
     * to output a curly bracket as well, but can surround that
     * with other (white-space) decoration.
     *
     * @param gen Generator used for output
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","void writeStartObject(JsonGenerator gen) throws IOException;","void","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.writeStartObject(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.core.PrettyPrinter.writeStartObject(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.writeEndObject(JsonGenerator,int)","Abstract Method","* Method called after an Object value has been completely output
     * (minus closing curly bracket).
     *<p>
     * Default handling (without pretty-printing) will output
     * the closing curly bracket.
     * Pretty-printer is
     * to output a curly bracket as well, but can surround that
     * with other (white-space) decoration.
     *
     * @param gen Generator used for output
     * @param nrOfEntries Number of direct members of the Object that
     *   have been output
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException;","void","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.writeEndObject(JsonGenerator,int).gen","Parameter_1","Belong to com.fasterxml.jackson.core.PrettyPrinter.writeEndObject(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.writeEndObject(JsonGenerator,int).nrOfEntries","Parameter_2","Belong to com.fasterxml.jackson.core.PrettyPrinter.writeEndObject(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.writeObjectEntrySeparator(JsonGenerator)","Abstract Method","* Method called after an Object entry (field:value) has been completely
     * output, and before another value is to be output.
     *<p>
     * Default handling (without pretty-printing) will output a single
     * comma to separate the two. Pretty-printer is
     * to output a comma as well, but can surround that with other
     * (white-space) decoration.
     *
     * @param gen Generator used for output
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","void writeObjectEntrySeparator(JsonGenerator gen) throws IOException;","void","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.writeObjectEntrySeparator(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.core.PrettyPrinter.writeObjectEntrySeparator(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.writeObjectFieldValueSeparator(JsonGenerator)","Abstract Method","* Method called after an object field has been output, but
     * before the value is output.
     *<p>
     * Default handling (without pretty-printing) will output a single
     * colon to separate the two. Pretty-printer is
     * to output a colon as well, but can surround that with other
     * (white-space) decoration.
     *
     * @param gen Generator used for output
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","void writeObjectFieldValueSeparator(JsonGenerator gen) throws IOException;","void","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.writeObjectFieldValueSeparator(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.core.PrettyPrinter.writeObjectFieldValueSeparator(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.writeStartArray(JsonGenerator)","Abstract Method","* Method called when an Array value is to be output, before
     * any member/child values are output.
     *<p>
     * Default handling (without pretty-printing) will output
     * the opening bracket.
     * Pretty-printer is
     * to output a bracket as well, but can surround that
     * with other (white-space) decoration.
     *
     * @param gen Generator used for output
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","void writeStartArray(JsonGenerator gen) throws IOException;","void","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.writeStartArray(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.core.PrettyPrinter.writeStartArray(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.writeEndArray(JsonGenerator,int)","Abstract Method","* Method called after an Array value has been completely output
     * (minus closing bracket).
     *<p>
     * Default handling (without pretty-printing) will output
     * the closing bracket.
     * Pretty-printer is
     * to output a bracket as well, but can surround that
     * with other (white-space) decoration.
     *
     * @param gen Generator used for output
     * @param nrOfValues Number of direct members of the array that
     *   have been output
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","void writeEndArray(JsonGenerator gen, int nrOfValues) throws IOException;","void","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.writeEndArray(JsonGenerator,int).gen","Parameter_1","Belong to com.fasterxml.jackson.core.PrettyPrinter.writeEndArray(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.writeEndArray(JsonGenerator,int).nrOfValues","Parameter_2","Belong to com.fasterxml.jackson.core.PrettyPrinter.writeEndArray(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.writeArrayValueSeparator(JsonGenerator)","Abstract Method","* Method called after an array value has been completely
     * output, and before another value is to be output.
     *<p>
     * Default handling (without pretty-printing) will output a single
     * comma to separate the two. Pretty-printer is
     * to output a comma as well, but can surround that with other
     * (white-space) decoration.
     *
     * @param gen Generator used for output
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","void writeArrayValueSeparator(JsonGenerator gen) throws IOException;","void","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.writeArrayValueSeparator(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.core.PrettyPrinter.writeArrayValueSeparator(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.beforeArrayValues(JsonGenerator)","Abstract Method","* Method called after array start marker has been output,
     * and right before the first value is to be output.
     * It is <b>not</b> called for arrays with no values.
     *<p>
     * Default handling does not output anything, but pretty-printer
     * is free to add any white space decoration.
     *
     * @param gen Generator used for output
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","void beforeArrayValues(JsonGenerator gen) throws IOException;","void","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.beforeArrayValues(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.core.PrettyPrinter.beforeArrayValues(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.beforeObjectEntries(JsonGenerator)","Abstract Method","* Method called after object start marker has been output,
     * and right before the field name of the first entry is
     * to be output.
     * It is <b>not</b> called for objects without entries.
     *<p>
     * Default handling does not output anything, but pretty-printer
     * is free to add any white space decoration.
     *
     * @param gen Generator used for output
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","void beforeObjectEntries(JsonGenerator gen) throws IOException;","void","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.PrettyPrinter.beforeObjectEntries(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.core.PrettyPrinter.beforeObjectEntries(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints","Class","* The constraints to use for streaming writes: used to guard against problematic
 * output by preventing processing of ""too big"" output constructs (values,
 * structures).
 * Constraints are registered with {@code TokenStreamFactory} (such as
 * {@code JsonFactory}); if nothing explicitly specified, default
 * constraints are used.
 *<p>
 * Currently constrained aspects, with default settings, are:
 * <ul>
 *  <li>Maximum Nesting depth: default 1000 (see {@link #DEFAULT_MAX_DEPTH})
 *   </li>
 * </ul>
 *
 * @since 2.16","Class do not obtain Source Code","No return type","public ","","java.io.Serializable"
"com.fasterxml.jackson.core.StreamWriteConstraints.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.DEFAULT_MAX_DEPTH","Field","* Default setting for maximum depth: see {@link Builder#maxNestingDepth(int)} for details.","public static final int DEFAULT_MAX_DEPTH = 1000;","No return type","public , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints._maxNestingDepth","Field","No Comment","protected final int _maxNestingDepth;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.DEFAULT","Field","No Comment","private static StreamWriteConstraints DEFAULT = new StreamWriteConstraints(DEFAULT_MAX_DEPTH);","No return type","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.overrideDefaultStreamWriteConstraints(StreamWriteConstraints)","Method","* Override the default StreamWriteConstraints. These defaults are only used when {@link JsonFactory}
     * instances are not configured with their own StreamWriteConstraints.
     * <p>
     * Library maintainers should not set this as it will affect other code that uses Jackson.
     * Library maintainers who want to configure StreamWriteConstraints for the Jackson usage within their
     * lib should create <code>ObjectMapper</code> instances that have a {@link JsonFactory} instance with
     * the required StreamWriteConstraints.
     * <p>
     * This method is meant for users delivering applications. If they use this, they set it when they start
     * their application to avoid having other code initialize their mappers before the defaults are overridden.
     *
     * @param streamWriteConstraints new default for StreamWriteConstraints (a null value will reset to built-in default)
     * @see #defaults()
     * @see #builder()","public static void overrideDefaultStreamWriteConstraints(final StreamWriteConstraints streamWriteConstraints) {
    if (streamWriteConstraints == null) {
        DEFAULT = new StreamWriteConstraints(DEFAULT_MAX_DEPTH);
    } else {
        DEFAULT = streamWriteConstraints;
    }
}","void","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.overrideDefaultStreamWriteConstraints(StreamWriteConstraints).streamWriteConstraints","Parameter_1","Belong to com.fasterxml.jackson.core.StreamWriteConstraints.overrideDefaultStreamWriteConstraints(StreamWriteConstraints)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.builder()","Method","No Comment","public static Builder builder() {
    return new Builder();
}","Builder","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.defaults()","Method","* @return the default {@link StreamWriteConstraints} (when none is set on the {@link JsonFactory} explicitly)
     * @see #overrideDefaultStreamWriteConstraints(StreamWriteConstraints)","public static StreamWriteConstraints defaults() {
    return DEFAULT;
}","StreamWriteConstraints","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.rebuild()","Method","* @return New {@link Builder} initialized with settings of this constraints
     *   instance","public Builder rebuild() {
    return new Builder(this);
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.getMaxNestingDepth()","Method","* Accessor for maximum depth.
     * see {@link Builder#maxNestingDepth(int)} for details.
     *
     * @return Maximum allowed depth","public int getMaxNestingDepth() {
    return _maxNestingDepth;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.validateNestingDepth(int)","Method","* Convenience method that can be used to verify that the
     * nesting depth does not exceed the maximum specified by this
     * constraints object: if it does, a
     * {@link StreamConstraintsException}
     * is thrown.
     *
     * @param depth count of unclosed objects and arrays
     *
     * @throws StreamConstraintsException If depth exceeds maximum","public void validateNestingDepth(int depth) throws StreamConstraintsException {
    if (depth > _maxNestingDepth) {
        throw _constructException(""Document nesting depth (%d) exceeds the maximum allowed (%d, from %s)"", depth, _maxNestingDepth, _constrainRef(""getMaxNestingDepth""));
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.validateNestingDepth(int).depth","Parameter_1","Belong to com.fasterxml.jackson.core.StreamWriteConstraints.validateNestingDepth(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints._constructException(String,Object[])","Method","@since 2.16","protected StreamConstraintsException _constructException(String msgTemplate, Object... args) throws StreamConstraintsException {
    throw new StreamConstraintsException(String.format(msgTemplate, args));
}","StreamConstraintsException","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints._constructException(String,Object[]).msgTemplate","Parameter_1","Belong to com.fasterxml.jackson.core.StreamWriteConstraints._constructException(String,Object[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints._constructException(String,Object[]).args","Parameter_2","Belong to com.fasterxml.jackson.core.StreamWriteConstraints._constructException(String,Object[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints._constrainRef(String)","Method","@since 2.16","protected String _constrainRef(String method) {
    return ""`StreamWriteConstraints."" + method + ""()`"";
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints._constrainRef(String).method","Parameter_1","Belong to com.fasterxml.jackson.core.StreamWriteConstraints._constrainRef(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.<init>(int)","Constructor","No Comment","protected StreamWriteConstraints(final int maxNestingDepth) {
    _maxNestingDepth = maxNestingDepth;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.<init>(int).maxNestingDepth","Parameter_1","Belong to com.fasterxml.jackson.core.StreamWriteConstraints.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints$Builder","Class","No Comment","Class do not obtain Source Code","No return type","public , static , final ","",""
"com.fasterxml.jackson.core.StreamWriteConstraints$Builder.maxNestingDepth","Field","No Comment","private int maxNestingDepth;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints$Builder.maxNestingDepth(int)","Method","* Sets the maximum nesting depth. The depth is a count of objects and arrays that have not
         * been closed, `{` and `[` respectively.
         *
         * @param maxNestingDepth the maximum depth
         *
         * @return this builder
         * @throws IllegalArgumentException if the maxNestingDepth is set to a negative value","public Builder maxNestingDepth(final int maxNestingDepth) {
    if (maxNestingDepth < 0) {
        throw new IllegalArgumentException(""Cannot set maxNestingDepth to a negative value"");
    }
    this.maxNestingDepth = maxNestingDepth;
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints$Builder.maxNestingDepth(int).maxNestingDepth","Parameter_1","Belong to com.fasterxml.jackson.core.StreamWriteConstraints$Builder.maxNestingDepth(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints$Builder.build()","Method","No Comment","public StreamWriteConstraints build() {
    return new StreamWriteConstraints(maxNestingDepth);
}","StreamWriteConstraints","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints$Builder.<init>()","Constructor","No Comment","Builder() {
    this(DEFAULT_MAX_DEPTH);
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints$Builder.<init>(int)","Constructor","No Comment","Builder(final int maxNestingDepth) {
    this.maxNestingDepth = maxNestingDepth;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints$Builder.<init>(int).maxNestingDepth","Parameter_1","Belong to com.fasterxml.jackson.core.StreamWriteConstraints$Builder.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints$Builder.<init>(StreamWriteConstraints)","Constructor","No Comment","Builder(StreamWriteConstraints src) {
    maxNestingDepth = src._maxNestingDepth;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints$Builder.<init>(StreamWriteConstraints).src","Parameter_1","Belong to com.fasterxml.jackson.core.StreamWriteConstraints$Builder.<init>(StreamWriteConstraints)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.Builder","Class","No Comment","Class do not obtain Source Code","No return type","public , static , final ","",""
"com.fasterxml.jackson.core.StreamWriteConstraints.Builder.maxNestingDepth","Field","No Comment","private int maxNestingDepth;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.Builder.maxNestingDepth(int)","Method","* Sets the maximum nesting depth. The depth is a count of objects and arrays that have not
         * been closed, `{` and `[` respectively.
         *
         * @param maxNestingDepth the maximum depth
         *
         * @return this builder
         * @throws IllegalArgumentException if the maxNestingDepth is set to a negative value","public Builder maxNestingDepth(final int maxNestingDepth) {
    if (maxNestingDepth < 0) {
        throw new IllegalArgumentException(""Cannot set maxNestingDepth to a negative value"");
    }
    this.maxNestingDepth = maxNestingDepth;
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.Builder.maxNestingDepth(int).maxNestingDepth","Parameter_1","Belong to com.fasterxml.jackson.core.StreamWriteConstraints.Builder.maxNestingDepth(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.Builder.build()","Method","No Comment","public StreamWriteConstraints build() {
    return new StreamWriteConstraints(maxNestingDepth);
}","StreamWriteConstraints","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.Builder.<init>()","Constructor","No Comment","Builder() {
    this(DEFAULT_MAX_DEPTH);
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.Builder.<init>(int)","Constructor","No Comment","Builder(final int maxNestingDepth) {
    this.maxNestingDepth = maxNestingDepth;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.Builder.<init>(int).maxNestingDepth","Parameter_1","Belong to com.fasterxml.jackson.core.StreamWriteConstraints.Builder.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.Builder.<init>(StreamWriteConstraints)","Constructor","No Comment","Builder(StreamWriteConstraints src) {
    maxNestingDepth = src._maxNestingDepth;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteConstraints.Builder.<init>(StreamWriteConstraints).src","Parameter_1","Belong to com.fasterxml.jackson.core.StreamWriteConstraints.Builder.<init>(StreamWriteConstraints)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteCapability","Enum","* Set of on/off capabilities that a {@link JsonGenerator} for given format
 * (or in case of buffering, original format) has.
 * Used in some cases to adjust aspects of things like content conversions and
 * coercions by format-agnostic functionality.
 * Specific or expected usage documented by individual capability entry Javadocs.
 *
 * @since 2.12","Enum do not obtain Source Code","No return type","public ","enum has no extends","com.fasterxml.jackson.core.util.JacksonFeature"
"com.fasterxml.jackson.core.StreamWriteCapability.CAN_WRITE_BINARY_NATIVELY","Enum Constant","* Capability that indicates that the data format is able to express binary
     * data natively, without using textual encoding like Base64.
     *<p>
     * Capability is currently enabled for all binary formats and none of textual
     * formats.","CAN_WRITE_BINARY_NATIVELY(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteCapability.CAN_WRITE_FORMATTED_NUMBERS","Enum Constant","* Capability that indicates that the data format is able to write
     * ""formatted numbers"": that is, output of numbers is done as Strings
     * and caller is allowed to pass in logical number values as Strings.
     *<p>
     * Capability is currently enabled for most textual formats and none of binary
     * formats.","CAN_WRITE_FORMATTED_NUMBERS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteCapability.enabledByDefault()","Method","No Comment","@Override
public boolean enabledByDefault() {
    return _defaultState;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteCapability.enabledIn(int)","Method","No Comment","@Override
public boolean enabledIn(int flags) {
    return (flags & _mask) != 0;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteCapability.enabledIn(int).flags","Parameter_1","Belong to com.fasterxml.jackson.core.StreamWriteCapability.enabledIn(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteCapability.getMask()","Method","No Comment","@Override
public int getMask() {
    return _mask;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteCapability.<init>(boolean)","Constructor","No Comment","private StreamWriteCapability(boolean defaultState) {
    _defaultState = defaultState;
    _mask = (1 << ordinal());
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteCapability.<init>(boolean).defaultState","Parameter_1","Belong to com.fasterxml.jackson.core.StreamWriteCapability.<init>(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException","Class","* Intermediate base class for all problems encountered when
 * processing (parsing, generating) JSON content
 * that are not pure I/O problems.
 * Regular {@link java.io.IOException}s will be passed through as is.
 * Sub-class of {@link java.io.IOException} for convenience.
 *<p>
 * Since Jackson 2.12 extends intermediate {@link JacksonException} type
 * instead of directly extending {@link java.io.IOException}.
 *<p>
 * Since Jackson 2.16, handles its content as configured using {@link com.fasterxml.jackson.core.ErrorReportConfiguration}.","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.JacksonException",""
"com.fasterxml.jackson.core.JsonProcessingException.serialVersionUID","Field","eclipse complains otherwise","private final static long serialVersionUID = 123;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException._location","Field","No Comment","protected JsonLocation _location;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.getLocation()","Method","No Comment","@Override
public JsonLocation getLocation() {
    return _location;
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.clearLocation()","Method","* Method that allows to remove context information from this exception's message.
     * Useful when you are parsing security-sensitive data and don't want original data excerpts
     * to be present in Jackson parser error messages.
     *
     * @since 2.9","public void clearLocation() {
    _location = null;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.getOriginalMessage()","Method","* Method that allows accessing the original ""message"" argument,
     * without additional decorations (like location information)
     * that overridden {@link #getMessage} adds.
     *
     * @return Original message passed in constructor
     *
     * @since 2.1","@Override
public String getOriginalMessage() {
    return super.getMessage();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.getProcessor()","Method","* Method that allows accessing underlying processor that triggered
     * this exception; typically either {@link JsonParser} or {@link JsonGenerator}
     * for exceptions that originate from streaming API.
     * Note that it is possible that `null` may be returned if code throwing
     * exception either has no access to processor; or has not been retrofitted
     * to set it; this means that caller needs to take care to check for nulls.
     * Subtypes override this method with co-variant return type, for more
     * type-safe access.
     *
     * @return Originating processor, if available; null if not.
     *
     * @since 2.7","@Override
public Object getProcessor() {
    return null;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.getMessageSuffix()","Method","* Accessor that sub-classes can override to append additional
     * information right after the main message, but before
     * source location information.
     *
     * @return Message suffix assigned, if any; {@code null} if none","protected String getMessageSuffix() {
    return null;
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.getMessage()","Method","* Default implementation overridden so that we can add location information
     *
     * @return Original {@code message} preceded by optional prefix and followed by
     *   location information, message and location information separated by a linefeed","@Override
public String getMessage() {
    String msg = super.getMessage();
    if (msg == null) {
        msg = ""N/A"";
    }
    JsonLocation loc = getLocation();
    String suffix = getMessageSuffix();
    // mild optimization, if nothing extra is needed:
    if (loc != null || suffix != null) {
        StringBuilder sb = new StringBuilder(100);
        sb.append(msg);
        if (suffix != null) {
            sb.append(suffix);
        }
        if (loc != null) {
            sb.append('\n');
            sb.append("" at "");
            sb.append(loc.toString());
        }
        msg = sb.toString();
    }
    return msg;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.toString()","Method","No Comment","@Override
public String toString() {
    return getClass().getName() + "": "" + getMessage();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.<init>(String,JsonLocation,Throwable)","Constructor","No Comment","protected JsonProcessingException(String msg, JsonLocation loc, Throwable rootCause) {
    super(msg, rootCause);
    _location = loc;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.<init>(String,JsonLocation,Throwable).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonProcessingException.<init>(String,JsonLocation,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.<init>(String,JsonLocation,Throwable).loc","Parameter_2","Belong to com.fasterxml.jackson.core.JsonProcessingException.<init>(String,JsonLocation,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.<init>(String,JsonLocation,Throwable).rootCause","Parameter_3","Belong to com.fasterxml.jackson.core.JsonProcessingException.<init>(String,JsonLocation,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.<init>(String)","Constructor","No Comment","protected JsonProcessingException(String msg) {
    super(msg);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.<init>(String).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonProcessingException.<init>(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.<init>(String,JsonLocation)","Constructor","No Comment","protected JsonProcessingException(String msg, JsonLocation loc) {
    this(msg, loc, null);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.<init>(String,JsonLocation).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonProcessingException.<init>(String,JsonLocation)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.<init>(String,JsonLocation).loc","Parameter_2","Belong to com.fasterxml.jackson.core.JsonProcessingException.<init>(String,JsonLocation)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.<init>(String,Throwable)","Constructor","No Comment","protected JsonProcessingException(String msg, Throwable rootCause) {
    this(msg, null, rootCause);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.<init>(String,Throwable).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonProcessingException.<init>(String,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.<init>(String,Throwable).rootCause","Parameter_2","Belong to com.fasterxml.jackson.core.JsonProcessingException.<init>(String,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.<init>(Throwable)","Constructor","No Comment","protected JsonProcessingException(Throwable rootCause) {
    this(null, null, rootCause);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonProcessingException.<init>(Throwable).rootCause","Parameter_1","Belong to com.fasterxml.jackson.core.JsonProcessingException.<init>(Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer","Class","* Implementation of
 * <a href=""http://tools.ietf.org/html/draft-ietf-appsawg-json-pointer-03"">JSON Pointer</a>
 * specification.
 * Pointer instances can be used to locate logical JSON nodes for things like
 * tree traversal (see {@link TreeNode#at}).
 * It may be used in future for filtering of streaming JSON content
 * as well (not implemented yet for 2.3).
 *<p>
 * Note that the implementation was largely rewritten for Jackson 2.14 to
 * reduce memory usage by sharing backing ""full path"" representation for
 * nested instances.
 *<p>
 * Instances are fully immutable and can be cached, shared between threads.
 *
 * @author Tatu Saloranta
 *
 * @since 2.3","Class do not obtain Source Code","No return type","public ","","java.io.Serializable"
"com.fasterxml.jackson.core.JsonPointer.ESC","Field","* Escape character {@value #ESC} per <a href=""https://datatracker.ietf.org/doc/html/rfc6901"">RFC6901</a>.
     * <pre>
     * escaped         = ""~"" ( ""0"" / ""1"" )
     *  ; representing '~' and '/', respectively
     * </pre>   
     *
     * @since 2.17","public static final char ESC = '~';","No return type","public , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.ESC_SLASH","Field","* Escaped slash string {@value #ESC_TILDE} per <a href=""https://datatracker.ietf.org/doc/html/rfc6901"">RFC6901</a>.
     * <pre>
     * escaped         = ""~"" ( ""0"" / ""1"" )
     *  ; representing '~' and '/', respectively
     * </pre>   
     *
     * @since 2.17","public static final String ESC_SLASH = ""~1"";","No return type","public , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.ESC_TILDE","Field","* Escaped tilde string {@value #ESC_TILDE} per <a href=""https://datatracker.ietf.org/doc/html/rfc6901"">RFC6901</a>.
     * <pre>
     * escaped         = ""~"" ( ""0"" / ""1"" )
     *  ; representing '~' and '/', respectively
     * </pre>   
     *
     * @since 2.17","public static final String ESC_TILDE = ""~0"";","No return type","public , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.SEPARATOR","Field","* Character used to separate segments.
     * <pre>
     * json-pointer    = *( ""/"" reference-token )
     * </pre>
     *
     * @since 2.9","public final static char SEPARATOR = '/';","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.EMPTY","Field","* Marker instance used to represent segment that matches current
     * node or position (that is, returns true for
     * {@link #matches()}).","protected final static JsonPointer EMPTY = new JsonPointer();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._nextSegment","Field","* Reference to rest of the pointer beyond currently matching
     * segment (if any); null if this pointer refers to the matching
     * segment.","protected final JsonPointer _nextSegment;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._head","Field","* Reference from currently matching segment (if any) to node
     * before leaf.
     * Lazily constructed if/as needed.
     *<p>
     * NOTE: we'll use `volatile` here assuming that this is unlikely to
     * become a performance bottleneck. If it becomes one we can probably
     * just drop it and things still should work (despite warnings as per JMM
     * regarding visibility (and lack thereof) of unguarded changes).
     *
     * @since 2.5","protected volatile JsonPointer _head;","No return type","protected , volatile ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._asString","Field","* We will retain representation of the pointer, as a String,
     * so that {@link #toString} should be as efficient as possible.
     *<p>
     * NOTE: starting with 2.14, there is now accompanying
     * {@link #_asStringOffset} that MUST be considered with this String;
     * this {@code String} may contain preceding path, as it is now full path
     * of parent pointer, except for the outermost pointer instance.","protected final String _asString;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._asStringOffset","Field","* @since 2.14","protected final int _asStringOffset;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._matchingPropertyName","Field","No Comment","protected final String _matchingPropertyName;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._matchingElementIndex","Field","No Comment","protected final int _matchingElementIndex;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._hashCode","Field","* Lazily-calculated hash code: need to retain hash code now that we can no
     * longer rely on {@link #_asString} being the exact full representation (it
     * is often ""more"", including parent path).
     *
     * @since 2.14","protected int _hashCode;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.compile(String)","Method","* Factory method that parses given input and construct matching pointer
     * instance, if it represents a valid JSON Pointer: if not, a
     * {@link IllegalArgumentException} is thrown.
     *
     * @param expr Pointer expression to compile
     *
     * @return Compiled {@link JsonPointer} path expression
     *
     * @throws IllegalArgumentException Thrown if the input does not present a valid JSON Pointer
     *   expression: currently the only such expression is one that does NOT start with
     *   a slash ('/').","public static JsonPointer compile(String expr) throws IllegalArgumentException {
    // First quick checks for well-known 'empty' pointer
    if ((expr == null) || expr.length() == 0) {
        return EMPTY;
    }
    // And then quick validity check:
    if (expr.charAt(0) != SEPARATOR) {
        throw new IllegalArgumentException(""Invalid input: JSON Pointer expression must start with '/': "" + ""\"""" + expr + ""\"""");
    }
    return _parseTail(expr);
}","JsonPointer","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.compile(String).expr","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.compile(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.valueOf(String)","Method","* Alias for {@link #compile}; added to make instances automatically
     * deserializable by Jackson databind.
     *
     * @param expr Pointer expression to compile
     *
     * @return Compiled {@link JsonPointer} path expression","public static JsonPointer valueOf(String expr) {
    return compile(expr);
}","JsonPointer","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.valueOf(String).expr","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.valueOf(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.empty()","Method","* Accessor for an ""empty"" expression, that is, one you can get by
     * calling {@link #compile} with """" (empty String).
     *<p>
     * NOTE: this is different from expression for {@code ""/""} which would
     * instead match Object node property with empty String ("""") as name.
     *
     * @return ""Empty"" pointer expression instance that matches given root value
     *
     * @since 2.10","public static JsonPointer empty() {
    return EMPTY;
}","JsonPointer","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.forPath(JsonStreamContext,boolean)","Method","* Factory method that will construct a pointer instance that describes
     * path to location given {@link JsonStreamContext} points to.
     *
     * @param context Context to build pointer expression for
     * @param includeRoot Whether to include number offset for virtual ""root context""
     *    or not.
     *
     * @return {@link JsonPointer} path to location of given context
     *
     * @since 2.9","public static JsonPointer forPath(JsonStreamContext context, boolean includeRoot) {
    // First things first: last segment may be for START_ARRAY/START_OBJECT,
    // in which case it does not yet point to anything, and should be skipped
    if (context == null) {
        return EMPTY;
    }
    // Otherwise if context was just created but is not advanced -- like,
    // opening START_ARRAY/START_OBJECT returned -- drop the empty context.
    if (!context.hasPathSegment()) {
        // Except one special case: do not prune root if we need it
        if (!(includeRoot && context.inRoot() && context.hasCurrentIndex())) {
            context = context.getParent();
        }
    }
    PointerSegment next = null;
    int approxLength = 0;
    for (; context != null; context = context.getParent()) {
        if (context.inObject()) {
            String propName = context.getCurrentName();
            if (propName == null) {
                // is this legal?
                propName = """";
            }
            approxLength += 2 + propName.length();
            next = new PointerSegment(next, propName, -1);
        } else if (context.inArray() || includeRoot) {
            int ix = context.getCurrentIndex();
            approxLength += 6;
            next = new PointerSegment(next, null, ix);
        }
        // NOTE: this effectively drops ROOT node(s); should have 1 such node,
        // as the last one, but we don't have to care (probably some paths have
        // no root, for example)
    }
    if (next == null) {
        return EMPTY;
    }
    // And here the fun starts! We have the head, need to traverse
    // to compose full path String
    StringBuilder pathBuilder = new StringBuilder(approxLength);
    PointerSegment last = null;
    for (; next != null; next = next.next) {
        // Let's find the last segment as well, for reverse traversal
        last = next;
        next.pathOffset = pathBuilder.length();
        pathBuilder.append(SEPARATOR);
        if (next.property != null) {
            _appendEscaped(pathBuilder, next.property);
        } else {
            pathBuilder.append(next.index);
        }
    }
    final String fullPath = pathBuilder.toString();
    // and then iteratively construct JsonPointer chain in reverse direction
    // (from innermost back to outermost)
    PointerSegment currSegment = last;
    JsonPointer currPtr = EMPTY;
    for (; currSegment != null; currSegment = currSegment.prev) {
        if (currSegment.property != null) {
            currPtr = new JsonPointer(fullPath, currSegment.pathOffset, currSegment.property, currPtr);
        } else {
            int index = currSegment.index;
            currPtr = new JsonPointer(fullPath, currSegment.pathOffset, String.valueOf(index), index, currPtr);
        }
    }
    return currPtr;
}","JsonPointer","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.forPath(JsonStreamContext,boolean).context","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.forPath(JsonStreamContext,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.forPath(JsonStreamContext,boolean).includeRoot","Parameter_2","Belong to com.fasterxml.jackson.core.JsonPointer.forPath(JsonStreamContext,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._appendEscaped(StringBuilder,String)","Method","No Comment","private static void _appendEscaped(StringBuilder sb, String segment) {
    for (int i = 0, end = segment.length(); i < end; ++i) {
        char c = segment.charAt(i);
        if (c == SEPARATOR) {
            sb.append(ESC_SLASH);
            continue;
        }
        if (c == ESC) {
            sb.append(ESC_TILDE);
            continue;
        }
        sb.append(c);
    }
}","void","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._appendEscaped(StringBuilder,String).sb","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer._appendEscaped(StringBuilder,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._appendEscaped(StringBuilder,String).segment","Parameter_2","Belong to com.fasterxml.jackson.core.JsonPointer._appendEscaped(StringBuilder,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.length()","Method","* Functionally same as:
     *<code>
     *  toString().length()
     *</code>
     * but more efficient as it avoids likely String allocation.
     *
     * @return Length of String representation of this pointer instance
     *
     * @since 2.14","public int length() {
    return _asString.length() - _asStringOffset;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.matches()","Method","No Comment","public boolean matches() {
    return _nextSegment == null;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.getMatchingProperty()","Method","No Comment","public String getMatchingProperty() {
    return _matchingPropertyName;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.getMatchingIndex()","Method","No Comment","public int getMatchingIndex() {
    return _matchingElementIndex;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.mayMatchProperty()","Method","* @return True if the root selector matches property name (that is, could
     * match field value of JSON Object node)","public boolean mayMatchProperty() {
    return _matchingPropertyName != null;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.mayMatchElement()","Method","* @return True if the root selector matches element index (that is, could
     * match an element of JSON Array node)","public boolean mayMatchElement() {
    return _matchingElementIndex >= 0;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.last()","Method","* @return  the leaf of current JSON Pointer expression: leaf is the last
     *    non-null segment of current JSON Pointer.
     *
     * @since 2.5","public JsonPointer last() {
    JsonPointer current = this;
    if (current == EMPTY) {
        return null;
    }
    JsonPointer next;
    while ((next = current._nextSegment) != JsonPointer.EMPTY) {
        current = next;
    }
    return current;
}","JsonPointer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.append(JsonPointer)","Method","* Mutant factory method that will return
     *<ul>
     * <li>`tail` if `this` instance is ""empty"" pointer, OR
     *  </li>
     * <li>`this` instance if `tail` is ""empty"" pointer, OR
     *  </li>
     * <li>Newly constructed {@link JsonPointer} instance that starts with all segments
     *    of `this`, followed by all segments of `tail`.
     *  </li>
     *</ul>
     *
     * @param tail {@link JsonPointer} instance to append to this one, to create a new pointer instance
     *
     * @return Either `this` instance, `tail`, or a newly created combination, as per description above.","public JsonPointer append(JsonPointer tail) {
    if (this == EMPTY) {
        return tail;
    }
    if (tail == EMPTY) {
        return this;
    }
    // 21-Mar-2017, tatu: Not superbly efficient; could probably improve by not concatenating,
    //    re-decoding -- by stitching together segments -- but for now should be fine.
    String currentJsonPointer = toString();
    // 14-Dec-2023, tatu: Pre-2.17 had special handling which makes no sense:
    /*
        if (currentJsonPointer.endsWith(""/"")) {
            //removes final slash
            currentJsonPointer = currentJsonPointer.substring(0, currentJsonPointer.length()-1);
        }
        */
    return compile(currentJsonPointer + tail.toString());
}","JsonPointer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.append(JsonPointer).tail","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.append(JsonPointer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.appendProperty(String)","Method","* ATTENTION! {@link JsonPointer} is head-centric, tail appending is much costlier
     * than head appending.
     * It is recommended that this method is used sparingly due to possible
     * sub-par performance.
     *
     * Mutant factory method that will return:
     *<ul>
     * <li>`this` instance if `property` is null, OR
     *  </li>
     * <li>Newly constructed {@link JsonPointer} instance that starts with all segments
     *    of `this`, followed by new segment of 'property' name.
     *  </li>
     *</ul>
     * 'property' is name to match: value is escaped as necessary (for any contained
     * slashes or tildes).
     *<p>
     * NOTE! Before Jackson 2.17, no escaping was performed, and leading slash was
     * dropped if passed. This was incorrect implementation. Empty {@code property}
     * was also ignored (similar to {@code null}).
     *
     * @param property new segment property name
     *
     * @return Either `this` instance, or a newly created combination, as per description above.","public JsonPointer appendProperty(String property) {
    if (property == null) {
        return this;
    }
    // 14-Dec-2023, tatu: [core#1145] Must escape `property`; accept empty String
    //    as valid segment to match as well
    StringBuilder sb = toStringBuilder(property.length() + 2).append(SEPARATOR);
    _appendEscaped(sb, property);
    return compile(sb.toString());
}","JsonPointer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.appendProperty(String).property","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.appendProperty(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.appendIndex(int)","Method","* ATTENTION! {@link JsonPointer} is head-centric, tail appending is much costlier
     * than head appending.
     * It is recommended that this method is used sparingly due to possible
     * sub-par performance.
     *
     * Mutant factory method that will return newly constructed {@link JsonPointer} instance that starts with all
     * segments of `this`, followed by new segment of element 'index'. Element 'index' should be non-negative.
     *
     * @param index new segment element index
     *
     * @return Newly created combination, as per description above.
     * @throws IllegalArgumentException if element index is negative","public JsonPointer appendIndex(int index) {
    if (index < 0) {
        throw new IllegalArgumentException(""Negative index cannot be appended"");
    }
    // 14-Dec-2024, tatu: Used to have odd logic for removing ""trailing"" slash;
    //    removed from 2.17
    return compile(toStringBuilder(8).append(SEPARATOR).append(index).toString());
}","JsonPointer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.appendIndex(int).index","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.appendIndex(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.matchesProperty(String)","Method","* Method that may be called to see if the pointer head (first segment)
     * would match property (of a JSON Object) with given name.
     *
     * @param name Name of Object property to match
     *
     * @return {@code True} if the pointer head matches specified property name
     *
     * @since 2.5","public boolean matchesProperty(String name) {
    return (_nextSegment != null) && _matchingPropertyName.equals(name);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.matchesProperty(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.matchesProperty(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.matchProperty(String)","Method","* Method that may be called to check whether the pointer head (first segment)
     * matches specified Object property (by name) and if so, return
     * {@link JsonPointer} that represents rest of the path after match.
     * If there is no match, {@code null} is returned.
     *
     * @param name Name of Object property to match
     *
     * @return Remaining path after matching specified property, if there is match;
     *    {@code null} otherwise","public JsonPointer matchProperty(String name) {
    if ((_nextSegment != null) && _matchingPropertyName.equals(name)) {
        return _nextSegment;
    }
    return null;
}","JsonPointer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.matchProperty(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.matchProperty(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.matchesElement(int)","Method","* Method that may be called to see if the pointer would match
     * Array element (of a JSON Array) with given index.
     *
     * @param index Index of Array element to match
     *
     * @return {@code True} if the pointer head matches specified Array index
     *
     * @since 2.5","public boolean matchesElement(int index) {
    return (index == _matchingElementIndex) && (index >= 0);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.matchesElement(int).index","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.matchesElement(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.matchElement(int)","Method","* Method that may be called to check whether the pointer head (first segment)
     * matches specified Array index and if so, return
     * {@link JsonPointer} that represents rest of the path after match.
     * If there is no match, {@code null} is returned.
     *
     * @param index Index of Array element to match
     *
     * @return Remaining path after matching specified index, if there is match;
     *    {@code null} otherwise
     *
     * @since 2.6","public JsonPointer matchElement(int index) {
    if ((index != _matchingElementIndex) || (index < 0)) {
        return null;
    }
    return _nextSegment;
}","JsonPointer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.matchElement(int).index","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.matchElement(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.tail()","Method","* Accessor for getting a ""sub-pointer"" (or sub-path), instance where current segment
     * has been removed and pointer includes rest of the segments.
     * For example, for JSON Pointer ""/root/branch/leaf"", this method would
     * return pointer ""/branch/leaf"".
     * For matching state (last segment), will return {@code null}.
     *<p>
     * Note that this is a very cheap method to call as it simply returns ""next"" segment
     * (which has been constructed when pointer instance was constructed).
     *
     * @return Tail of this pointer, if it has any; {@code null} if this pointer only
     *    has the current segment","public JsonPointer tail() {
    return _nextSegment;
}","JsonPointer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.head()","Method","* Accessor for getting a pointer instance that is identical to this
     * instance except that the last segment has been dropped.
     * For example, for JSON Pointer ""/root/branch/leaf"", this method would
     * return pointer ""/root/branch"" (compared to {@link #tail()} that
     * would return ""/branch/leaf"").
     *<p>
     * Note that whereas {@link #tail} is a very cheap operation to call (as ""tail"" already
     * exists for single-linked forward direction), this method has to fully
     * construct a new instance by traversing the chain of segments.
     *
     * @return Pointer expression that contains same segments as this one, except for
     *    the last segment.
     *
     * @since 2.5","public JsonPointer head() {
    JsonPointer h = _head;
    if (h == null) {
        if (this != EMPTY) {
            h = _constructHead();
        }
        _head = h;
    }
    return h;
}","JsonPointer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.toString()","Method","No Comment","@Override
public String toString() {
    if (_asStringOffset <= 0) {
        return _asString;
    }
    return _asString.substring(_asStringOffset);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.toStringBuilder(int)","Method","* Functionally equivalent to:
     *<pre>
     *   new StringBuilder(toString());
     *</pre>
     * but possibly more efficient
     *
     * @param slack Number of characters to reserve in StringBuilder beyond
     *   minimum copied
     * @return a new StringBuilder
     *
     * @since 2.17","protected StringBuilder toStringBuilder(int slack) {
    if (_asStringOffset <= 0) {
        return new StringBuilder(_asString);
    }
    final int len = _asString.length();
    StringBuilder sb = new StringBuilder(len - _asStringOffset + slack);
    sb.append(_asString, _asStringOffset, len);
    return sb;
}","StringBuilder","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.toStringBuilder(int).slack","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.toStringBuilder(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.hashCode()","Method","No Comment","@Override
public int hashCode() {
    int h = _hashCode;
    if (h == 0) {
        // Alas, this is bit wasteful, creating temporary String, but
        // without JDK exposing hash code calculation for a sub-string
        // can't do much
        h = toString().hashCode();
        if (h == 0) {
            h = -1;
        }
        _hashCode = h;
    }
    return h;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.equals(Object)","Method","No Comment","@Override
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null)
        return false;
    if (!(o instanceof JsonPointer))
        return false;
    JsonPointer other = (JsonPointer) o;
    // 07-Oct-2022, tatu: Ugh.... this gets way more complicated as we MUST
    //   compare logical representation so cannot simply compare offset
    //   and String
    return _compare(_asString, _asStringOffset, other._asString, other._asStringOffset);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.equals(Object).o","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.equals(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._compare(String,int,String,int)","Method","No Comment","private final boolean _compare(String str1, int offset1, String str2, int offset2) {
    final int end1 = str1.length();
    // Different lengths? Not equal
    if ((end1 - offset1) != (str2.length() - offset2)) {
        return false;
    }
    for (; offset1 < end1; ) {
        if (str1.charAt(offset1++) != str2.charAt(offset2++)) {
            return false;
        }
    }
    return true;
}","boolean","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._compare(String,int,String,int).str1","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer._compare(String,int,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._compare(String,int,String,int).offset1","Parameter_2","Belong to com.fasterxml.jackson.core.JsonPointer._compare(String,int,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._compare(String,int,String,int).str2","Parameter_3","Belong to com.fasterxml.jackson.core.JsonPointer._compare(String,int,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._compare(String,int,String,int).offset2","Parameter_4","Belong to com.fasterxml.jackson.core.JsonPointer._compare(String,int,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._parseIndex(String)","Method","No Comment","private final static int _parseIndex(String str) {
    final int len = str.length();
    // [core#133]: beware of super long indexes; assume we never
    // have arrays over 2 billion entries so ints are fine.
    if (len == 0 || len > 10) {
        return -1;
    }
    // [core#176]: no leading zeroes allowed
    char c = str.charAt(0);
    if (c <= '0') {
        return (len == 1 && c == '0') ? 0 : -1;
    }
    if (c > '9') {
        return -1;
    }
    for (int i = 1; i < len; ++i) {
        c = str.charAt(i);
        if (c > '9' || c < '0') {
            return -1;
        }
    }
    if (len == 10) {
        long l = Long.parseLong(str);
        if (l > Integer.MAX_VALUE) {
            return -1;
        }
        return (int) l;
    }
    return NumberInput.parseInt(str);
}","int","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._parseIndex(String).str","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer._parseIndex(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._parseTail(String)","Method","No Comment","protected static JsonPointer _parseTail(final String fullPath) {
    PointerParent parent = null;
    // first char is the contextual slash, skip
    int i = 1;
    final int end = fullPath.length();
    int startOffset = 0;
    while (i < end) {
        char c = fullPath.charAt(i);
        if (c == SEPARATOR) {
            // common case, got a segment
            parent = new PointerParent(parent, startOffset, fullPath.substring(startOffset + 1, i));
            startOffset = i;
            ++i;
            continue;
        }
        ++i;
        // quoting is different; offline this case
        if (c == ESC && i < end) {
            // possibly, quote
            // 04-Oct-2022, tatu: Let's decode escaped segment
            //   instead of recursive call
            StringBuilder sb = new StringBuilder(32);
            i = _extractEscapedSegment(fullPath, startOffset + 1, i, sb);
            final String segment = sb.toString();
            if (i < 0) {
                // end!
                return _buildPath(fullPath, startOffset, segment, parent);
            }
            parent = new PointerParent(parent, startOffset, segment);
            startOffset = i;
            ++i;
            continue;
        }
        // otherwise, loop on
    }
    // end of the road, no escapes
    return _buildPath(fullPath, startOffset, fullPath.substring(startOffset + 1), parent);
}","JsonPointer","protected , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._parseTail(String).fullPath","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer._parseTail(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._buildPath(String,int,String,PointerParent)","Method","No Comment","private static JsonPointer _buildPath(final String fullPath, int fullPathOffset, String segment, PointerParent parent) {
    JsonPointer curr = new JsonPointer(fullPath, fullPathOffset, segment, EMPTY);
    for (; parent != null; parent = parent.parent) {
        curr = new JsonPointer(fullPath, parent.fullPathOffset, parent.segment, curr);
    }
    return curr;
}","JsonPointer","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._buildPath(String,int,String,PointerParent).fullPath","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer._buildPath(String,int,String,PointerParent)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._buildPath(String,int,String,PointerParent).fullPathOffset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonPointer._buildPath(String,int,String,PointerParent)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._buildPath(String,int,String,PointerParent).segment","Parameter_3","Belong to com.fasterxml.jackson.core.JsonPointer._buildPath(String,int,String,PointerParent)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._buildPath(String,int,String,PointerParent).parent","Parameter_4","Belong to com.fasterxml.jackson.core.JsonPointer._buildPath(String,int,String,PointerParent)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._extractEscapedSegment(String,int,int,StringBuilder)","Method","* Method called to extract the next segment of the path, in case
     * where we seem to have encountered a (tilde-)escaped character
     * within segment.
     *
     * @param input Full input for the tail being parsed
     * @param firstCharOffset Offset of the first character of segment (one
     *    after slash)
     * @param i Offset to character after tilde
     * @param sb StringBuilder into which unquoted segment is added
     *
     * @return Offset at which slash was encountered, if any, or -1
     *    if expression ended without seeing unescaped slash","protected static int _extractEscapedSegment(String input, int firstCharOffset, int i, StringBuilder sb) {
    final int end = input.length();
    final int toCopy = i - 1 - firstCharOffset;
    if (toCopy > 0) {
        sb.append(input, firstCharOffset, i - 1);
    }
    i += _appendEscape(sb, input.charAt(i));
    while (i < end) {
        char c = input.charAt(i);
        if (c == SEPARATOR) {
            // end is nigh!
            return i;
        }
        ++i;
        if (c == ESC && i < end) {
            i += _appendEscape(sb, input.charAt(i));
            continue;
        }
        sb.append(c);
    }
    // end of the road, last segment
    return -1;
}","int","protected , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._extractEscapedSegment(String,int,int,StringBuilder).input","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer._extractEscapedSegment(String,int,int,StringBuilder)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._extractEscapedSegment(String,int,int,StringBuilder).firstCharOffset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonPointer._extractEscapedSegment(String,int,int,StringBuilder)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._extractEscapedSegment(String,int,int,StringBuilder).i","Parameter_3","Belong to com.fasterxml.jackson.core.JsonPointer._extractEscapedSegment(String,int,int,StringBuilder)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._extractEscapedSegment(String,int,int,StringBuilder).sb","Parameter_4","Belong to com.fasterxml.jackson.core.JsonPointer._extractEscapedSegment(String,int,int,StringBuilder)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._appendEscape(StringBuilder,char)","Method","No Comment","private static int _appendEscape(StringBuilder sb, char c) {
    if (c == '0') {
        sb.append(ESC);
        return 1;
    }
    if (c == '1') {
        sb.append(SEPARATOR);
        return 1;
    }
    // Not a valid escape; just output tilde, do not advance past following char
    sb.append(ESC);
    return 0;
}","int","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._appendEscape(StringBuilder,char).sb","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer._appendEscape(StringBuilder,char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._appendEscape(StringBuilder,char).c","Parameter_2","Belong to com.fasterxml.jackson.core.JsonPointer._appendEscape(StringBuilder,char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer._constructHead()","Method","No Comment","protected JsonPointer _constructHead() {
    // ok; find out the segment we are to drop
    JsonPointer last = last();
    if (last == this) {
        return EMPTY;
    }
    // and from that, length of suffix to drop
    final int suffixLength = last.length();
    // Initialize a list to store intermediate JsonPointers in reverse
    ArrayList<JsonPointer> pointers = new ArrayList<>();
    JsonPointer current = this;
    String fullString = toString();
    // Make sure to share the new full string for path segments
    fullString = fullString.substring(0, fullString.length() - suffixLength);
    int offset = 0;
    while (current != last) {
        JsonPointer nextSegment = new JsonPointer(current, fullString, offset);
        offset += suffixLength;
        pointers.add(nextSegment);
        current = current._nextSegment;
    }
    // Iteratively build the JsonPointer chain from the list in reverse
    JsonPointer head = EMPTY;
    for (int i = pointers.size() - 1; i >= 0; i--) {
        head = new JsonPointer(pointers.get(i), head);
    }
    return head;
}","JsonPointer","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.writeReplace()","Method","Since 2.14: needed for efficient JDK serializability","private Object writeReplace() {
    // 11-Oct-2022, tatu: very important, must serialize just contents!
    return new Serialization(toString());
}","Object","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.<init>()","Constructor","* Constructor used for creating ""empty"" instance, used to represent
     * state that matches current node.","protected JsonPointer() {
    _nextSegment = null;
    // [core#788]: must be `null` to distinguish from Property with """" as key
    _matchingPropertyName = null;
    _matchingElementIndex = -1;
    _asString = """";
    _asStringOffset = 0;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.<init>(String,int,String,JsonPointer)","Constructor","Constructor used for creating non-empty Segments","protected JsonPointer(String fullString, int fullStringOffset, String segment, JsonPointer next) {
    _asString = fullString;
    _asStringOffset = fullStringOffset;
    _nextSegment = next;
    // Ok; may always be a property
    _matchingPropertyName = segment;
    // but could be an index, if parsable
    _matchingElementIndex = _parseIndex(segment);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.<init>(String,int,String,JsonPointer).fullString","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.<init>(String,int,String,JsonPointer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.<init>(String,int,String,JsonPointer).fullStringOffset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonPointer.<init>(String,int,String,JsonPointer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.<init>(String,int,String,JsonPointer).segment","Parameter_3","Belong to com.fasterxml.jackson.core.JsonPointer.<init>(String,int,String,JsonPointer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.<init>(String,int,String,JsonPointer).next","Parameter_4","Belong to com.fasterxml.jackson.core.JsonPointer.<init>(String,int,String,JsonPointer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.<init>(String,int,String,int,JsonPointer)","Constructor","No Comment","protected JsonPointer(String fullString, int fullStringOffset, String segment, int matchIndex, JsonPointer next) {
    _asString = fullString;
    _asStringOffset = fullStringOffset;
    _nextSegment = next;
    _matchingPropertyName = segment;
    _matchingElementIndex = matchIndex;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.<init>(String,int,String,int,JsonPointer).fullString","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.<init>(String,int,String,int,JsonPointer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.<init>(String,int,String,int,JsonPointer).fullStringOffset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonPointer.<init>(String,int,String,int,JsonPointer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.<init>(String,int,String,int,JsonPointer).segment","Parameter_3","Belong to com.fasterxml.jackson.core.JsonPointer.<init>(String,int,String,int,JsonPointer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.<init>(String,int,String,int,JsonPointer).matchIndex","Parameter_4","Belong to com.fasterxml.jackson.core.JsonPointer.<init>(String,int,String,int,JsonPointer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.<init>(String,int,String,int,JsonPointer).next","Parameter_5","Belong to com.fasterxml.jackson.core.JsonPointer.<init>(String,int,String,int,JsonPointer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.<init>(JsonPointer,JsonPointer)","Constructor","@since 2.19","protected JsonPointer(JsonPointer src, JsonPointer next) {
    _asString = src._asString;
    _asStringOffset = src._asStringOffset;
    _nextSegment = next;
    _matchingPropertyName = src._matchingPropertyName;
    _matchingElementIndex = src._matchingElementIndex;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.<init>(JsonPointer,JsonPointer).src","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.<init>(JsonPointer,JsonPointer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.<init>(JsonPointer,JsonPointer).next","Parameter_2","Belong to com.fasterxml.jackson.core.JsonPointer.<init>(JsonPointer,JsonPointer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.<init>(JsonPointer,String,int)","Constructor","@since 2.19","protected JsonPointer(JsonPointer src, String newFullString, int newFullStringOffset) {
    _asString = newFullString;
    _asStringOffset = newFullStringOffset;
    _nextSegment = null;
    _matchingPropertyName = src._matchingPropertyName;
    _matchingElementIndex = src._matchingElementIndex;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.<init>(JsonPointer,String,int).src","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.<init>(JsonPointer,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.<init>(JsonPointer,String,int).newFullString","Parameter_2","Belong to com.fasterxml.jackson.core.JsonPointer.<init>(JsonPointer,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.<init>(JsonPointer,String,int).newFullStringOffset","Parameter_3","Belong to com.fasterxml.jackson.core.JsonPointer.<init>(JsonPointer,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$PointerParent","Class","* Helper class used to replace call stack when parsing JsonPointer
     * expressions.","Class do not obtain Source Code","No return type","private , static ","",""
"com.fasterxml.jackson.core.JsonPointer$PointerParent.parent","Field","No Comment","public final PointerParent parent;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$PointerParent.fullPathOffset","Field","No Comment","public final int fullPathOffset;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$PointerParent.segment","Field","No Comment","public final String segment;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$PointerParent.<init>(PointerParent,int,String)","Constructor","No Comment","PointerParent(PointerParent pp, int fpo, String sgm) {
    parent = pp;
    fullPathOffset = fpo;
    segment = sgm;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$PointerParent.<init>(PointerParent,int,String).pp","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer$PointerParent.<init>(PointerParent,int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$PointerParent.<init>(PointerParent,int,String).fpo","Parameter_2","Belong to com.fasterxml.jackson.core.JsonPointer$PointerParent.<init>(PointerParent,int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$PointerParent.<init>(PointerParent,int,String).sgm","Parameter_3","Belong to com.fasterxml.jackson.core.JsonPointer$PointerParent.<init>(PointerParent,int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$PointerSegment","Class","* Helper class used to contain a single segment when constructing JsonPointer
     * from context.","Class do not obtain Source Code","No return type","private , static ","",""
"com.fasterxml.jackson.core.JsonPointer$PointerSegment.next","Field","No Comment","public final PointerSegment next;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$PointerSegment.property","Field","No Comment","public final String property;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$PointerSegment.index","Field","No Comment","public final int index;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$PointerSegment.pathOffset","Field","Offset within external buffer, updated when constructing","public int pathOffset;","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$PointerSegment.prev","Field","And we actually need 2-way traversal, it turns out so:","public PointerSegment prev;","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$PointerSegment.<init>(PointerSegment,String,int)","Constructor","No Comment","public PointerSegment(PointerSegment next, String pn, int ix) {
    this.next = next;
    property = pn;
    index = ix;
    // Ok not the cleanest thing but...
    if (next != null) {
        next.prev = this;
    }
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$PointerSegment.<init>(PointerSegment,String,int).next","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer$PointerSegment.<init>(PointerSegment,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$PointerSegment.<init>(PointerSegment,String,int).pn","Parameter_2","Belong to com.fasterxml.jackson.core.JsonPointer$PointerSegment.<init>(PointerSegment,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$PointerSegment.<init>(PointerSegment,String,int).ix","Parameter_3","Belong to com.fasterxml.jackson.core.JsonPointer$PointerSegment.<init>(PointerSegment,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$Serialization","Class","* This must only exist to allow both final properties and implementation of
     * Externalizable/Serializable for JsonPointer.
     * Note that here we do not store offset but simply use (and expect use)
     * full path, from which we need to decode actual structure.
     *
     * @since 2.14","Class do not obtain Source Code","No return type","static ","","java.io.Externalizable"
"com.fasterxml.jackson.core.JsonPointer$Serialization._fullPath","Field","No Comment","private String _fullPath;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$Serialization.writeExternal(ObjectOutput)","Method","No Comment","@Override
public void writeExternal(ObjectOutput out) throws IOException {
    out.writeUTF(_fullPath);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$Serialization.writeExternal(ObjectOutput).out","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer$Serialization.writeExternal(ObjectOutput)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$Serialization.readExternal(ObjectInput)","Method","No Comment","@Override
public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
    _fullPath = in.readUTF();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$Serialization.readExternal(ObjectInput).in","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer$Serialization.readExternal(ObjectInput)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$Serialization.readResolve()","Method","No Comment","private Object readResolve() throws ObjectStreamException {
    // NOTE: method handles canonicalization of ""empty"", as well as other
    // aspects of decoding.
    return compile(_fullPath);
}","Object","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$Serialization.<init>()","Constructor","No Comment","public Serialization() {
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$Serialization.<init>(String)","Constructor","No Comment","Serialization(String fullPath) {
    _fullPath = fullPath;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer$Serialization.<init>(String).fullPath","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer$Serialization.<init>(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.PointerParent","Class","* Helper class used to replace call stack when parsing JsonPointer
     * expressions.","Class do not obtain Source Code","No return type","private , static ","",""
"com.fasterxml.jackson.core.JsonPointer.PointerParent.parent","Field","No Comment","public final PointerParent parent;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.PointerParent.fullPathOffset","Field","No Comment","public final int fullPathOffset;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.PointerParent.segment","Field","No Comment","public final String segment;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.PointerParent.<init>(PointerParent,int,String)","Constructor","No Comment","PointerParent(PointerParent pp, int fpo, String sgm) {
    parent = pp;
    fullPathOffset = fpo;
    segment = sgm;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.PointerParent.<init>(PointerParent,int,String).pp","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.PointerParent.<init>(PointerParent,int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.PointerParent.<init>(PointerParent,int,String).fpo","Parameter_2","Belong to com.fasterxml.jackson.core.JsonPointer.PointerParent.<init>(PointerParent,int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.PointerParent.<init>(PointerParent,int,String).sgm","Parameter_3","Belong to com.fasterxml.jackson.core.JsonPointer.PointerParent.<init>(PointerParent,int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.PointerSegment","Class","* Helper class used to contain a single segment when constructing JsonPointer
     * from context.","Class do not obtain Source Code","No return type","private , static ","",""
"com.fasterxml.jackson.core.JsonPointer.PointerSegment.next","Field","No Comment","public final PointerSegment next;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.PointerSegment.property","Field","No Comment","public final String property;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.PointerSegment.index","Field","No Comment","public final int index;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.PointerSegment.pathOffset","Field","Offset within external buffer, updated when constructing","public int pathOffset;","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.PointerSegment.prev","Field","And we actually need 2-way traversal, it turns out so:","public PointerSegment prev;","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.PointerSegment.<init>(PointerSegment,String,int)","Constructor","No Comment","public PointerSegment(PointerSegment next, String pn, int ix) {
    this.next = next;
    property = pn;
    index = ix;
    // Ok not the cleanest thing but...
    if (next != null) {
        next.prev = this;
    }
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.PointerSegment.<init>(PointerSegment,String,int).next","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.PointerSegment.<init>(PointerSegment,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.PointerSegment.<init>(PointerSegment,String,int).pn","Parameter_2","Belong to com.fasterxml.jackson.core.JsonPointer.PointerSegment.<init>(PointerSegment,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.PointerSegment.<init>(PointerSegment,String,int).ix","Parameter_3","Belong to com.fasterxml.jackson.core.JsonPointer.PointerSegment.<init>(PointerSegment,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.Serialization","Class","* This must only exist to allow both final properties and implementation of
     * Externalizable/Serializable for JsonPointer.
     * Note that here we do not store offset but simply use (and expect use)
     * full path, from which we need to decode actual structure.
     *
     * @since 2.14","Class do not obtain Source Code","No return type","static ","","java.io.Externalizable"
"com.fasterxml.jackson.core.JsonPointer.Serialization._fullPath","Field","No Comment","private String _fullPath;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.Serialization.writeExternal(ObjectOutput)","Method","No Comment","@Override
public void writeExternal(ObjectOutput out) throws IOException {
    out.writeUTF(_fullPath);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.Serialization.writeExternal(ObjectOutput).out","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.Serialization.writeExternal(ObjectOutput)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.Serialization.readExternal(ObjectInput)","Method","No Comment","@Override
public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
    _fullPath = in.readUTF();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.Serialization.readExternal(ObjectInput).in","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.Serialization.readExternal(ObjectInput)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.Serialization.readResolve()","Method","No Comment","private Object readResolve() throws ObjectStreamException {
    // NOTE: method handles canonicalization of ""empty"", as well as other
    // aspects of decoding.
    return compile(_fullPath);
}","Object","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.Serialization.<init>()","Constructor","No Comment","public Serialization() {
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.Serialization.<init>(String)","Constructor","No Comment","Serialization(String fullPath) {
    _fullPath = fullPath;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonPointer.Serialization.<init>(String).fullPath","Parameter_1","Belong to com.fasterxml.jackson.core.JsonPointer.Serialization.<init>(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JacksonException","Abstract Class","* Base class for all Jackson-produced checked exceptions.
 *<p>
 * For Jackson 2.x this base type is not widely used (instead, its main subtype
 * {@link JsonProcessingException} is): it is provided more for forwards-compatibility
 * purposes as 3.x will base all other types directly on it and deprecate
 * {@link JsonProcessingException} (as well as chance its type to unchecked).
 *
 * @since 2.12","Abstract Class do not obtain Source Code","No return type","public , abstract ","java.io.IOException",""
"com.fasterxml.jackson.core.JacksonException.serialVersionUID","Field","eclipse complains otherwise","private final static long serialVersionUID = 123;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JacksonException.getLocation()","Abstract Method","* Accessor for location information related to position within input
     * or output (depending on operation), if available; if not available
     * may return {@code null}.
     *<p>
     * Accuracy of location information depends on backend (format) as well
     * as (in some cases) operation being performed.
     *
     * @return Location in input or output that triggered the problem reported, if
     *    available; {@code null} otherwise.","public abstract JsonLocation getLocation();","JsonLocation","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JacksonException.getOriginalMessage()","Abstract Method","* Method that allows accessing the original ""message"" argument,
     * without additional decorations (like location information)
     * that overridden {@link #getMessage} adds.
     *
     * @return Original, unmodified {@code message} argument used to construct
     *    this exception instance","public abstract String getOriginalMessage();","String","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JacksonException.getProcessor()","Abstract Method","* Method that allows accessing underlying processor that triggered
     * this exception; typically either {@link JsonParser} or {@link JsonGenerator}
     * for exceptions that originate from streaming API, but may be other types
     * when thrown by databinding.
     *<p>
     * Note that it is possible that {@code null} may be returned if code throwing
     * exception either has no access to the processor; or has not been retrofitted
     * to set it; this means that caller needs to take care to check for nulls.
     * Subtypes override this method with co-variant return type, for more
     * type-safe access.
     *
     * @return Originating processor, if available; {@code null} if not.","public abstract Object getProcessor();","Object","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JacksonException.<init>(String)","Constructor","No Comment","protected JacksonException(String msg) {
    super(msg);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JacksonException.<init>(String).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JacksonException.<init>(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JacksonException.<init>(Throwable)","Constructor","No Comment","protected JacksonException(Throwable t) {
    super(t);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JacksonException.<init>(Throwable).t","Parameter_1","Belong to com.fasterxml.jackson.core.JacksonException.<init>(Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JacksonException.<init>(String,Throwable)","Constructor","No Comment","protected JacksonException(String msg, Throwable rootCause) {
    super(msg, rootCause);
    // 23-Sep-2020, tatu: before 2.12, had null checks for some reason...
    //   But I don't think that is actually required; Javadocs for
    //   `java.lang.Throwable` constructor claim {@code null} is fine.
    /*        if (rootCause != null) {
            initCause(rootCause);
        }*/
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JacksonException.<init>(String,Throwable).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JacksonException.<init>(String,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JacksonException.<init>(String,Throwable).rootCause","Parameter_2","Belong to com.fasterxml.jackson.core.JacksonException.<init>(String,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool","Interface","* API for object pools that control creation and possible reuse of
 * objects that are costly to create (often things like encoding/decoding buffers).
 *<p>
 * Also contains partial (base) implementations for pools that use different
 * strategies on retaining objects for reuse.
 * Following implementations are included:
 *<ul>
 * <li>{@link NonRecyclingPoolBase} which does not retain or recycle anything and
 * will always simply construct and return new instance when
 * {@code acquireBufferRecycler} is called
 *  </li>
 * <li>{@link ThreadLocalPoolBase} which uses {@link ThreadLocal} to retain at most
 *   1 object per {@link Thread}.
 * </li>
 * <li>{@link BoundedPoolBase} is ""bounded pool"" and retains at most N objects (default value being
 *  {@link BoundedPoolBase#DEFAULT_CAPACITY}) at any given time.
 *  </li>
 * <li>Two implementations -- {@link ConcurrentDequePoolBase}, {@link LockFreePoolBase}
 *   -- are ""unbounded"" and retain any number of objects released: in practice
 *   it is at most the highest number of concurrently used {@link BufferRecycler}s.
 *  </li>
 *</ul>
 *
 *<p>
 * Default implementations are also included as nested classes.
 *
 * @param <P> Type of Objects pool recycles
 *
 * @since 2.16","Interface do not obtain Source Code","No return type","public ","java.io.Serializable",""
"com.fasterxml.jackson.core.util.RecyclerPool.acquireAndLinkPooled()","Abstract Method","* Method called to acquire a Pooled value from this pool
     * AND make sure it is linked back to this
     * {@link RecyclerPool} as necessary for it to be
     * released (see {@link #releasePooled}) later after usage ends.
     * Actual acquisition is done by a call to {@link #acquirePooled()}.
     *<p>
     * Default implementation calls {@link #acquirePooled()} followed by
     * a call to {@link WithPool#withPool}.
     *
     * @return Pooled instance for caller to use; caller expected
     *   to call {@link #releasePooled} after it is done using instance.","default P acquireAndLinkPooled() {
    return acquirePooled().withPool(this);
}","RecyclerPool.WithPool<P>","default ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.acquirePooled()","Abstract Method","* Method for sub-classes to implement for actual acquire logic; called
     * by {@link #acquireAndLinkPooled()}.
     *
     * @return Instance acquired (pooled or just constructed)","P acquirePooled();","RecyclerPool.WithPool<P>","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.releasePooled(RecyclerPool.WithPool)","Abstract Method","* Method that should be called when previously acquired (see {@link #acquireAndLinkPooled})
     * pooled value that is no longer needed; this lets pool to take ownership
     * for possible reuse.
     *
     * @param pooled Pooled instance to release back to pool","void releasePooled(P pooled);","void","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.releasePooled(RecyclerPool.WithPool).pooled","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool.releasePooled(RecyclerPool.WithPool)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.clear()","Abstract Method","* Optional method that may allow dropping of all pooled Objects; mostly
     * useful for unbounded pool implementations that may retain significant
     * memory and that may then be cleared regularly.
     *
     * @since 2.17
     *
     * @return {@code true} If pool supports operation and dropped all pooled
     *    Objects; {@code false} otherwise.","default boolean clear() {
    return false;
}","boolean","default ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.pooledCount()","Abstract Method","* Diagnostic method for obtaining an estimate of number of pooled items
     * this pool contains, available for recycling.
     * Note that in addition to this information possibly not being available
     * (denoted by return value of {@code -1}) even when available this may be
     * just an approximation.
     *<p>
     * Default method implementation simply returns {@code -1} and is meant to be
     * overridden by concrete sub-classes.
     *
     * @return Number of pooled entries available from this pool, if available;
     *    {@code -1} if not.
     *
     * @since 2.18","default int pooledCount() {
    return -1;
}","int","default ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$WithPool","Interface","* Simple add-on interface that poolable entities must implement.
     *
     * @param <P> Self type","Interface do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.util.RecyclerPool$WithPool.withPool(RecyclerPool)","Abstract Method","* Method to call to add link from pooled item back to pool
         * that handles it
         * 
         * @param pool Pool that ""owns"" pooled item
         *
         * @return This item (for call chaining)","P withPool(RecyclerPool<P> pool);","WithPool<P>","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$WithPool.withPool(RecyclerPool).pool","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool$WithPool.withPool(RecyclerPool)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$WithPool.releaseToPool()","Abstract Method","* Method called when this item is to be released back to the
         * pool that owns it (if any)","void releaseToPool();","void","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$ThreadLocalPoolBase","Class","* Default {@link RecyclerPool} implementation that uses
     * {@link ThreadLocal} for recycling instances. 
     * Instances are stored using {@link java.lang.ref.SoftReference}s so that
     * they may be Garbage Collected as needed by JVM.
     *<p>
     * Note that this implementation may not work well on platforms where
     * {@link java.lang.ref.SoftReference}s are not well supported (like
     * Android), or on platforms where {@link java.lang.Thread}s are not
     * long-living or reused (like Project Loom).","Class do not obtain Source Code","No return type","abstract ","","com.fasterxml.jackson.core.util.RecyclerPool"
"com.fasterxml.jackson.core.util.RecyclerPool$ThreadLocalPoolBase.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$ThreadLocalPoolBase.acquireAndLinkPooled()","Method","No Comment","@Override
public P acquireAndLinkPooled() {
    // since this pool doesn't do anything on release it doesn't need to be registered on the BufferRecycler
    return acquirePooled();
}","WithPool<P>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$ThreadLocalPoolBase.acquirePooled()","Abstract Method","No Comment","@Override
public abstract P acquirePooled();","WithPool<P>","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$ThreadLocalPoolBase.releasePooled(WithPool)","Method","No Comment","@Override
public void releasePooled(P pooled) {
    // nothing to do, relies on ThreadLocal
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$ThreadLocalPoolBase.releasePooled(WithPool).pooled","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool$ThreadLocalPoolBase.releasePooled(WithPool)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$ThreadLocalPoolBase.pooledCount()","Method","No way to actually even estimate...","@Override
public int pooledCount() {
    return -1;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$ThreadLocalPoolBase.clear()","Method","Due to use of ThreadLocal no tracking available; cannot clear","@Override
public boolean clear() {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$ThreadLocalPoolBase.<init>()","Constructor","No Comment","protected ThreadLocalPoolBase() {
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$NonRecyclingPoolBase","Class","* {@link RecyclerPool} implementation that does not use
     * any pool but simply creates new instances when necessary.","Class do not obtain Source Code","No return type","abstract ","","com.fasterxml.jackson.core.util.RecyclerPool"
"com.fasterxml.jackson.core.util.RecyclerPool$NonRecyclingPoolBase.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$NonRecyclingPoolBase.acquireAndLinkPooled()","Method","No Comment","@Override
public P acquireAndLinkPooled() {
    // since this pool doesn't do anything on release it doesn't need to be registered on the BufferRecycler
    return acquirePooled();
}","WithPool<P>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$NonRecyclingPoolBase.acquirePooled()","Abstract Method","No Comment","@Override
public abstract P acquirePooled();","WithPool<P>","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$NonRecyclingPoolBase.releasePooled(WithPool)","Method","No Comment","@Override
public void releasePooled(P pooled) {
    // nothing to do, there is no underlying pool
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$NonRecyclingPoolBase.releasePooled(WithPool).pooled","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool$NonRecyclingPoolBase.releasePooled(WithPool)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$NonRecyclingPoolBase.pooledCount()","Method","No Comment","@Override
public int pooledCount() {
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$NonRecyclingPoolBase.clear()","Method","* Although no pooling occurs, we consider clearing to succeed,
         * so returns always {@code true}.
         *
         * @return Always returns {@code true}","@Override
public boolean clear() {
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$StatefulImplBase","Class","* Intermediate base class for instances that are stateful and require
     * special handling with respect to JDK serialization, to retain
     * ""global"" reference distinct from non-shared ones.","Class do not obtain Source Code","No return type","abstract ","","com.fasterxml.jackson.core.util.RecyclerPool"
"com.fasterxml.jackson.core.util.RecyclerPool$StatefulImplBase.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$StatefulImplBase.SERIALIZATION_SHARED","Field","No Comment","public final static int SERIALIZATION_SHARED = -1;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$StatefulImplBase.SERIALIZATION_NON_SHARED","Field","No Comment","public final static int SERIALIZATION_NON_SHARED = 1;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$StatefulImplBase._serialization","Field","* Value that indicates basic aspects of pool for JDK serialization;
         * either marker for shared/non-shared, or possibly bounded size;
         * depends on sub-class.","protected final int _serialization;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$StatefulImplBase._resolveToShared(StatefulImplBase)","Method","No Comment","protected Optional<StatefulImplBase<P>> _resolveToShared(StatefulImplBase<P> shared) {
    if (_serialization == SERIALIZATION_SHARED) {
        return Optional.of(shared);
    }
    return Optional.empty();
}","Optional","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$StatefulImplBase._resolveToShared(StatefulImplBase).shared","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool$StatefulImplBase._resolveToShared(StatefulImplBase)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$StatefulImplBase.createPooled()","Abstract Method","No Comment","public abstract P createPooled();","WithPool<P>","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$StatefulImplBase.<init>(int)","Constructor","No Comment","protected StatefulImplBase(int serialization) {
    _serialization = serialization;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$StatefulImplBase.<init>(int).serialization","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool$StatefulImplBase.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$ConcurrentDequePoolBase","Class","* {@link RecyclerPool} implementation that uses
     * {@link ConcurrentLinkedDeque} for recycling instances.
     *<p>
     * Pool is unbounded: see {@link RecyclerPool} what this means.","Class do not obtain Source Code","No return type","abstract ","com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase",""
"com.fasterxml.jackson.core.util.RecyclerPool$ConcurrentDequePoolBase.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$ConcurrentDequePoolBase.pool","Field","No Comment","protected final transient Deque<P> pool;","No return type","protected , final , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$ConcurrentDequePoolBase.acquirePooled()","Method","No Comment","@Override
public P acquirePooled() {
    P pooled = pool.pollFirst();
    if (pooled == null) {
        pooled = createPooled();
    }
    return pooled;
}","WithPool<P>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$ConcurrentDequePoolBase.releasePooled(WithPool)","Method","No Comment","@Override
public void releasePooled(P pooled) {
    pool.offerLast(pooled);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$ConcurrentDequePoolBase.releasePooled(WithPool).pooled","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool$ConcurrentDequePoolBase.releasePooled(WithPool)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$ConcurrentDequePoolBase.pooledCount()","Method","No Comment","@Override
public int pooledCount() {
    return pool.size();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$ConcurrentDequePoolBase.clear()","Method","No Comment","@Override
public boolean clear() {
    pool.clear();
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$ConcurrentDequePoolBase.<init>(int)","Constructor","No Comment","protected ConcurrentDequePoolBase(int serialization) {
    super(serialization);
    pool = new ConcurrentLinkedDeque<>();
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$ConcurrentDequePoolBase.<init>(int).serialization","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool$ConcurrentDequePoolBase.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase","Class","* {@link RecyclerPool} implementation that uses
     * a lock free linked list for recycling instances.
     * Pool is unbounded: see {@link RecyclerPool} for
     * details on what this means.
     *<p>
     * NOTE: serious issues found with 2.17.0 lead to deprecation
     * of this implementation -- basically it is possible to have
     * unbalanced acquire/release success rate lead to excessive
     * growth of pooled instances.
     * See <a href=""https://github.com/FasterXML/jackson-core/issues/1260"">
     * jackson-core#1260</a> for details.
     *
     * @deprecated Since 2.18: use other implementations","Class do not obtain Source Code","No return type","abstract ","com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase",""
"com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase.head","Field","Needs to be transient to avoid JDK serialization from writing it out","private final transient AtomicReference<Node<P>> head;","No return type","private , final , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase.acquirePooled()","Method","No Comment","@Override
public P acquirePooled() {
    // This simple lock free algorithm uses an optimistic compareAndSet strategy to
    // populate the underlying linked list in a thread-safe way. However, under very
    // heavy contention, the compareAndSet could fail multiple times, so it seems a
    // reasonable heuristic to limit the number of retries in this situation.
    for (int i = 0; i < 3; i++) {
        Node<P> currentHead = head.get();
        if (currentHead == null) {
            return createPooled();
        }
        if (head.compareAndSet(currentHead, currentHead.next)) {
            currentHead.next = null;
            return currentHead.value;
        }
    }
    return createPooled();
}","WithPool<P>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase.releasePooled(WithPool)","Method","No Comment","@Override
public void releasePooled(P pooled) {
    Node<P> newHead = new Node<>(pooled);
    for (int i = 0; i < 3; i++) {
        newHead.next = head.get();
        if (head.compareAndSet(newHead.next, newHead)) {
            return;
        }
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase.releasePooled(WithPool).pooled","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase.releasePooled(WithPool)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase.pooledCount()","Method","No Comment","@Override
public int pooledCount() {
    int count = 0;
    for (Node<P> curr = head.get(); curr != null; curr = curr.next) {
        ++count;
    }
    return count;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase.clear()","Method","Yes, we can clear it","@Override
public boolean clear() {
    head.set(null);
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase.<init>(int)","Constructor","No Comment","protected LockFreePoolBase(int serialization) {
    super(serialization);
    head = new AtomicReference<>();
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase.<init>(int).serialization","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase$Node","Class","No Comment","Class do not obtain Source Code","No return type","protected , static ","",""
"com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase$Node.value","Field","No Comment","final P value;","No return type","final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase$Node.next","Field","No Comment","Node<P> next;","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase$Node.<init>(Object)","Constructor","No Comment","Node(P value) {
    this.value = value;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase$Node.<init>(Object).value","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase$Node.<init>(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$BoundedPoolBase","Class","* {@link RecyclerPool} implementation that uses
     * a bounded queue ({@link ArrayBlockingQueue} for recycling instances.
     * This is ""bounded"" pool since it will never hold on to more
     * pooled instances than its size configuration:
     * the default size is {@link BoundedPoolBase#DEFAULT_CAPACITY}.","Class do not obtain Source Code","No return type","abstract ","com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase",""
"com.fasterxml.jackson.core.util.RecyclerPool$BoundedPoolBase.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$BoundedPoolBase.DEFAULT_CAPACITY","Field","* Default capacity which limits number of items that are ever
         * retained for reuse.","public final static int DEFAULT_CAPACITY = 100;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$BoundedPoolBase.pool","Field","No Comment","private final transient ArrayBlockingQueue<P> pool;","No return type","private , final , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$BoundedPoolBase.capacity","Field","No Comment","private final transient int capacity;","No return type","private , final , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$BoundedPoolBase.acquirePooled()","Method","No Comment","@Override
public P acquirePooled() {
    P pooled = pool.poll();
    if (pooled == null) {
        pooled = createPooled();
    }
    return pooled;
}","WithPool<P>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$BoundedPoolBase.releasePooled(WithPool)","Method","No Comment","@Override
public void releasePooled(P pooled) {
    pool.offer(pooled);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$BoundedPoolBase.releasePooled(WithPool).pooled","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool$BoundedPoolBase.releasePooled(WithPool)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$BoundedPoolBase.pooledCount()","Method","No Comment","@Override
public int pooledCount() {
    return pool.size();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$BoundedPoolBase.clear()","Method","No Comment","@Override
public boolean clear() {
    pool.clear();
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$BoundedPoolBase.capacity()","Method","No Comment","public int capacity() {
    return capacity;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$BoundedPoolBase.<init>(int)","Constructor","No Comment","protected BoundedPoolBase(int capacityAsId) {
    super(capacityAsId);
    capacity = (capacityAsId <= 0) ? DEFAULT_CAPACITY : capacityAsId;
    pool = new ArrayBlockingQueue<>(capacity);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool$BoundedPoolBase.<init>(int).capacityAsId","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool$BoundedPoolBase.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.WithPool","Interface","* Simple add-on interface that poolable entities must implement.
     *
     * @param <P> Self type","Interface do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.util.RecyclerPool.WithPool.withPool(RecyclerPool)","Abstract Method","* Method to call to add link from pooled item back to pool
         * that handles it
         * 
         * @param pool Pool that ""owns"" pooled item
         *
         * @return This item (for call chaining)","P withPool(RecyclerPool<P> pool);","WithPool<P>","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.WithPool.withPool(RecyclerPool).pool","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool.WithPool.withPool(RecyclerPool)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.WithPool.releaseToPool()","Abstract Method","* Method called when this item is to be released back to the
         * pool that owns it (if any)","void releaseToPool();","void","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.ThreadLocalPoolBase","Abstract Class","* Default {@link RecyclerPool} implementation that uses
     * {@link ThreadLocal} for recycling instances. 
     * Instances are stored using {@link java.lang.ref.SoftReference}s so that
     * they may be Garbage Collected as needed by JVM.
     *<p>
     * Note that this implementation may not work well on platforms where
     * {@link java.lang.ref.SoftReference}s are not well supported (like
     * Android), or on platforms where {@link java.lang.Thread}s are not
     * long-living or reused (like Project Loom).","Abstract Class do not obtain Source Code","No return type","abstract ","","com.fasterxml.jackson.core.util.RecyclerPool"
"com.fasterxml.jackson.core.util.RecyclerPool.ThreadLocalPoolBase.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.ThreadLocalPoolBase.acquireAndLinkPooled()","Method","No Comment","@Override
public P acquireAndLinkPooled() {
    // since this pool doesn't do anything on release it doesn't need to be registered on the BufferRecycler
    return acquirePooled();
}","WithPool<P>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.ThreadLocalPoolBase.acquirePooled()","Abstract Method","No Comment","@Override
public abstract P acquirePooled();","WithPool<P>","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.ThreadLocalPoolBase.releasePooled(WithPool)","Method","No Comment","@Override
public void releasePooled(P pooled) {
    // nothing to do, relies on ThreadLocal
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.ThreadLocalPoolBase.releasePooled(WithPool).pooled","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool.ThreadLocalPoolBase.releasePooled(WithPool)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.ThreadLocalPoolBase.pooledCount()","Method","No way to actually even estimate...","@Override
public int pooledCount() {
    return -1;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.ThreadLocalPoolBase.clear()","Method","Due to use of ThreadLocal no tracking available; cannot clear","@Override
public boolean clear() {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.ThreadLocalPoolBase.<init>()","Constructor","No Comment","protected ThreadLocalPoolBase() {
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.NonRecyclingPoolBase","Abstract Class","* {@link RecyclerPool} implementation that does not use
     * any pool but simply creates new instances when necessary.","Abstract Class do not obtain Source Code","No return type","abstract ","","com.fasterxml.jackson.core.util.RecyclerPool"
"com.fasterxml.jackson.core.util.RecyclerPool.NonRecyclingPoolBase.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.NonRecyclingPoolBase.acquireAndLinkPooled()","Method","No Comment","@Override
public P acquireAndLinkPooled() {
    // since this pool doesn't do anything on release it doesn't need to be registered on the BufferRecycler
    return acquirePooled();
}","WithPool<P>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.NonRecyclingPoolBase.acquirePooled()","Abstract Method","No Comment","@Override
public abstract P acquirePooled();","WithPool<P>","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.NonRecyclingPoolBase.releasePooled(WithPool)","Method","No Comment","@Override
public void releasePooled(P pooled) {
    // nothing to do, there is no underlying pool
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.NonRecyclingPoolBase.releasePooled(WithPool).pooled","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool.NonRecyclingPoolBase.releasePooled(WithPool)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.NonRecyclingPoolBase.pooledCount()","Method","No Comment","@Override
public int pooledCount() {
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.NonRecyclingPoolBase.clear()","Method","* Although no pooling occurs, we consider clearing to succeed,
         * so returns always {@code true}.
         *
         * @return Always returns {@code true}","@Override
public boolean clear() {
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase","Abstract Class","* Intermediate base class for instances that are stateful and require
     * special handling with respect to JDK serialization, to retain
     * ""global"" reference distinct from non-shared ones.","Abstract Class do not obtain Source Code","No return type","abstract ","","com.fasterxml.jackson.core.util.RecyclerPool"
"com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase.SERIALIZATION_SHARED","Field","No Comment","public final static int SERIALIZATION_SHARED = -1;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase.SERIALIZATION_NON_SHARED","Field","No Comment","public final static int SERIALIZATION_NON_SHARED = 1;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase._serialization","Field","* Value that indicates basic aspects of pool for JDK serialization;
         * either marker for shared/non-shared, or possibly bounded size;
         * depends on sub-class.","protected final int _serialization;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase._resolveToShared(StatefulImplBase)","Method","No Comment","protected Optional<StatefulImplBase<P>> _resolveToShared(StatefulImplBase<P> shared) {
    if (_serialization == SERIALIZATION_SHARED) {
        return Optional.of(shared);
    }
    return Optional.empty();
}","Optional","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase._resolveToShared(StatefulImplBase).shared","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase._resolveToShared(StatefulImplBase)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase.createPooled()","Abstract Method","No Comment","public abstract P createPooled();","WithPool<P>","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase.<init>(int)","Constructor","No Comment","protected StatefulImplBase(int serialization) {
    _serialization = serialization;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase.<init>(int).serialization","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.ConcurrentDequePoolBase","Abstract Class","* {@link RecyclerPool} implementation that uses
     * {@link ConcurrentLinkedDeque} for recycling instances.
     *<p>
     * Pool is unbounded: see {@link RecyclerPool} what this means.","Abstract Class do not obtain Source Code","No return type","abstract ","com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase",""
"com.fasterxml.jackson.core.util.RecyclerPool.ConcurrentDequePoolBase.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.ConcurrentDequePoolBase.pool","Field","No Comment","protected final transient Deque<P> pool;","No return type","protected , final , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.ConcurrentDequePoolBase.acquirePooled()","Method","No Comment","@Override
public P acquirePooled() {
    P pooled = pool.pollFirst();
    if (pooled == null) {
        pooled = createPooled();
    }
    return pooled;
}","WithPool<P>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.ConcurrentDequePoolBase.releasePooled(WithPool)","Method","No Comment","@Override
public void releasePooled(P pooled) {
    pool.offerLast(pooled);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.ConcurrentDequePoolBase.releasePooled(WithPool).pooled","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool.ConcurrentDequePoolBase.releasePooled(WithPool)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.ConcurrentDequePoolBase.pooledCount()","Method","No Comment","@Override
public int pooledCount() {
    return pool.size();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.ConcurrentDequePoolBase.clear()","Method","No Comment","@Override
public boolean clear() {
    pool.clear();
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.ConcurrentDequePoolBase.<init>(int)","Constructor","No Comment","protected ConcurrentDequePoolBase(int serialization) {
    super(serialization);
    pool = new ConcurrentLinkedDeque<>();
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.ConcurrentDequePoolBase.<init>(int).serialization","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool.ConcurrentDequePoolBase.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase","Abstract Class","* {@link RecyclerPool} implementation that uses
     * a lock free linked list for recycling instances.
     * Pool is unbounded: see {@link RecyclerPool} for
     * details on what this means.
     *<p>
     * NOTE: serious issues found with 2.17.0 lead to deprecation
     * of this implementation -- basically it is possible to have
     * unbalanced acquire/release success rate lead to excessive
     * growth of pooled instances.
     * See <a href=""https://github.com/FasterXML/jackson-core/issues/1260"">
     * jackson-core#1260</a> for details.
     *
     * @deprecated Since 2.18: use other implementations","Abstract Class do not obtain Source Code","No return type","abstract ","com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase",""
"com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase.head","Field","Needs to be transient to avoid JDK serialization from writing it out","private final transient AtomicReference<Node<P>> head;","No return type","private , final , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase.acquirePooled()","Method","No Comment","@Override
public P acquirePooled() {
    // This simple lock free algorithm uses an optimistic compareAndSet strategy to
    // populate the underlying linked list in a thread-safe way. However, under very
    // heavy contention, the compareAndSet could fail multiple times, so it seems a
    // reasonable heuristic to limit the number of retries in this situation.
    for (int i = 0; i < 3; i++) {
        Node<P> currentHead = head.get();
        if (currentHead == null) {
            return createPooled();
        }
        if (head.compareAndSet(currentHead, currentHead.next)) {
            currentHead.next = null;
            return currentHead.value;
        }
    }
    return createPooled();
}","WithPool<P>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase.releasePooled(WithPool)","Method","No Comment","@Override
public void releasePooled(P pooled) {
    Node<P> newHead = new Node<>(pooled);
    for (int i = 0; i < 3; i++) {
        newHead.next = head.get();
        if (head.compareAndSet(newHead.next, newHead)) {
            return;
        }
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase.releasePooled(WithPool).pooled","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase.releasePooled(WithPool)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase.pooledCount()","Method","No Comment","@Override
public int pooledCount() {
    int count = 0;
    for (Node<P> curr = head.get(); curr != null; curr = curr.next) {
        ++count;
    }
    return count;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase.clear()","Method","Yes, we can clear it","@Override
public boolean clear() {
    head.set(null);
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase.<init>(int)","Constructor","No Comment","protected LockFreePoolBase(int serialization) {
    super(serialization);
    head = new AtomicReference<>();
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase.<init>(int).serialization","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase$Node","Class","No Comment","Class do not obtain Source Code","No return type","protected , static ","",""
"com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase$Node.value","Field","No Comment","final P value;","No return type","final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase$Node.next","Field","No Comment","Node<P> next;","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase$Node.<init>(Object)","Constructor","No Comment","Node(P value) {
    this.value = value;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase$Node.<init>(Object).value","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase$Node.<init>(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase.Node","Class","No Comment","Class do not obtain Source Code","No return type","protected , static ","",""
"com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase.Node.value","Field","No Comment","final P value;","No return type","final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase.Node.next","Field","No Comment","Node<P> next;","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase.Node.<init>(Object)","Constructor","No Comment","Node(P value) {
    this.value = value;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase.Node.<init>(Object).value","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase.Node.<init>(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.BoundedPoolBase","Abstract Class","* {@link RecyclerPool} implementation that uses
     * a bounded queue ({@link ArrayBlockingQueue} for recycling instances.
     * This is ""bounded"" pool since it will never hold on to more
     * pooled instances than its size configuration:
     * the default size is {@link BoundedPoolBase#DEFAULT_CAPACITY}.","Abstract Class do not obtain Source Code","No return type","abstract ","com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase",""
"com.fasterxml.jackson.core.util.RecyclerPool.BoundedPoolBase.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.BoundedPoolBase.DEFAULT_CAPACITY","Field","* Default capacity which limits number of items that are ever
         * retained for reuse.","public final static int DEFAULT_CAPACITY = 100;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.BoundedPoolBase.pool","Field","No Comment","private final transient ArrayBlockingQueue<P> pool;","No return type","private , final , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.BoundedPoolBase.capacity","Field","No Comment","private final transient int capacity;","No return type","private , final , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.BoundedPoolBase.acquirePooled()","Method","No Comment","@Override
public P acquirePooled() {
    P pooled = pool.poll();
    if (pooled == null) {
        pooled = createPooled();
    }
    return pooled;
}","WithPool<P>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.BoundedPoolBase.releasePooled(WithPool)","Method","No Comment","@Override
public void releasePooled(P pooled) {
    pool.offer(pooled);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.BoundedPoolBase.releasePooled(WithPool).pooled","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool.BoundedPoolBase.releasePooled(WithPool)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.BoundedPoolBase.pooledCount()","Method","No Comment","@Override
public int pooledCount() {
    return pool.size();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.BoundedPoolBase.clear()","Method","No Comment","@Override
public boolean clear() {
    pool.clear();
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.BoundedPoolBase.capacity()","Method","No Comment","public int capacity() {
    return capacity;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.BoundedPoolBase.<init>(int)","Constructor","No Comment","protected BoundedPoolBase(int capacityAsId) {
    super(capacityAsId);
    capacity = (capacityAsId <= 0) ? DEFAULT_CAPACITY : capacityAsId;
    pool = new ArrayBlockingQueue<>(capacity);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RecyclerPool.BoundedPoolBase.<init>(int).capacityAsId","Parameter_1","Belong to com.fasterxml.jackson.core.util.RecyclerPool.BoundedPoolBase.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators","Class","* Value class used with some {@link com.fasterxml.jackson.core.PrettyPrinter}
 * implements
 *
 * @see com.fasterxml.jackson.core.util.DefaultPrettyPrinter
 * @see com.fasterxml.jackson.core.util.MinimalPrettyPrinter
 *
 * @since 2.9","Class do not obtain Source Code","No return type","public ","","java.io.Serializable"
"com.fasterxml.jackson.core.util.Separators.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.DEFAULT_ROOT_VALUE_SEPARATOR","Field","* Constant that specifies default ""root-level"" separator to use between
     * root values: a single space character.
     *
     * @since 2.16","public final static String DEFAULT_ROOT_VALUE_SEPARATOR = "" "";","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.DEFAULT_OBJECT_EMPTY_SEPARATOR","Field","* String to use in empty Object to separate start and end markers.
     * Default is single space, resulting in output of {@code { }}.
     * 
     * @since 2.17","public final static String DEFAULT_OBJECT_EMPTY_SEPARATOR = "" "";","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.DEFAULT_ARRAY_EMPTY_SEPARATOR","Field","* String to use in empty Array to separate start and end markers.
     * Default is single space, resulting in output of {@code [ ]}.
     * 
     * @since 2.17","public final static String DEFAULT_ARRAY_EMPTY_SEPARATOR = "" "";","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.objectFieldValueSeparator","Field","No Comment","private final char objectFieldValueSeparator;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.objectFieldValueSpacing","Field","No Comment","private final Spacing objectFieldValueSpacing;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.objectEntrySeparator","Field","No Comment","private final char objectEntrySeparator;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.objectEntrySpacing","Field","No Comment","private final Spacing objectEntrySpacing;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.objectEmptySeparator","Field","No Comment","private final String objectEmptySeparator;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.arrayValueSeparator","Field","No Comment","private final char arrayValueSeparator;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.arrayValueSpacing","Field","No Comment","private final Spacing arrayValueSpacing;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.arrayEmptySeparator","Field","No Comment","private final String arrayEmptySeparator;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.rootSeparator","Field","No Comment","private final String rootSeparator;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.createDefaultInstance()","Method","No Comment","public static Separators createDefaultInstance() {
    return new Separators();
}","Separators","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.withRootSeparator(String)","Method","No Comment","public Separators withRootSeparator(String sep) {
    return Objects.equals(rootSeparator, sep) ? this : new Separators(sep, objectFieldValueSeparator, objectFieldValueSpacing, objectEntrySeparator, objectEntrySpacing, objectEmptySeparator, arrayValueSeparator, arrayValueSpacing, arrayEmptySeparator);
}","Separators","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.withRootSeparator(String).sep","Parameter_1","Belong to com.fasterxml.jackson.core.util.Separators.withRootSeparator(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.withObjectFieldValueSeparator(char)","Method","No Comment","public Separators withObjectFieldValueSeparator(char sep) {
    return (objectFieldValueSeparator == sep) ? this : new Separators(rootSeparator, sep, objectFieldValueSpacing, objectEntrySeparator, objectEntrySpacing, objectEmptySeparator, arrayValueSeparator, arrayValueSpacing, arrayEmptySeparator);
}","Separators","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.withObjectFieldValueSeparator(char).sep","Parameter_1","Belong to com.fasterxml.jackson.core.util.Separators.withObjectFieldValueSeparator(char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.withObjectFieldValueSpacing(Spacing)","Method","* @return This instance (for call chaining)
     *
     * @since 2.16","public Separators withObjectFieldValueSpacing(Spacing spacing) {
    return (objectFieldValueSpacing == spacing) ? this : new Separators(rootSeparator, objectFieldValueSeparator, spacing, objectEntrySeparator, objectEntrySpacing, objectEmptySeparator, arrayValueSeparator, arrayValueSpacing, arrayEmptySeparator);
}","Separators","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.withObjectFieldValueSpacing(Spacing).spacing","Parameter_1","Belong to com.fasterxml.jackson.core.util.Separators.withObjectFieldValueSpacing(Spacing)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.withObjectEntrySeparator(char)","Method","No Comment","public Separators withObjectEntrySeparator(char sep) {
    return (objectEntrySeparator == sep) ? this : new Separators(rootSeparator, objectFieldValueSeparator, objectFieldValueSpacing, sep, objectEntrySpacing, objectEmptySeparator, arrayValueSeparator, arrayValueSpacing, arrayEmptySeparator);
}","Separators","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.withObjectEntrySeparator(char).sep","Parameter_1","Belong to com.fasterxml.jackson.core.util.Separators.withObjectEntrySeparator(char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.withObjectEntrySpacing(Spacing)","Method","* @return This instance (for call chaining)
     *
     * @since 2.16","public Separators withObjectEntrySpacing(Spacing spacing) {
    return (objectEntrySpacing == spacing) ? this : new Separators(rootSeparator, objectFieldValueSeparator, objectFieldValueSpacing, objectEntrySeparator, spacing, objectEmptySeparator, arrayValueSeparator, arrayValueSpacing, arrayEmptySeparator);
}","Separators","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.withObjectEntrySpacing(Spacing).spacing","Parameter_1","Belong to com.fasterxml.jackson.core.util.Separators.withObjectEntrySpacing(Spacing)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.withObjectEmptySeparator(String)","Method","* @return This instance (for call chaining)
     *
     * @since 2.17","public Separators withObjectEmptySeparator(String sep) {
    return Objects.equals(objectEmptySeparator, sep) ? this : new Separators(rootSeparator, objectFieldValueSeparator, objectFieldValueSpacing, objectEntrySeparator, objectEntrySpacing, sep, arrayValueSeparator, arrayValueSpacing, arrayEmptySeparator);
}","Separators","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.withObjectEmptySeparator(String).sep","Parameter_1","Belong to com.fasterxml.jackson.core.util.Separators.withObjectEmptySeparator(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.withArrayValueSeparator(char)","Method","No Comment","public Separators withArrayValueSeparator(char sep) {
    return (arrayValueSeparator == sep) ? this : new Separators(rootSeparator, objectFieldValueSeparator, objectFieldValueSpacing, objectEntrySeparator, objectEntrySpacing, objectEmptySeparator, sep, arrayValueSpacing, arrayEmptySeparator);
}","Separators","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.withArrayValueSeparator(char).sep","Parameter_1","Belong to com.fasterxml.jackson.core.util.Separators.withArrayValueSeparator(char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.withArrayValueSpacing(Spacing)","Method","* @return This instance (for call chaining)
     *
     * @since 2.16","public Separators withArrayValueSpacing(Spacing spacing) {
    return (arrayValueSpacing == spacing) ? this : new Separators(rootSeparator, objectFieldValueSeparator, objectFieldValueSpacing, objectEntrySeparator, objectEntrySpacing, objectEmptySeparator, arrayValueSeparator, spacing, arrayEmptySeparator);
}","Separators","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.withArrayValueSpacing(Spacing).spacing","Parameter_1","Belong to com.fasterxml.jackson.core.util.Separators.withArrayValueSpacing(Spacing)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.withArrayEmptySeparator(String)","Method","* @return This instance (for call chaining)
     *
     * @since 2.17","public Separators withArrayEmptySeparator(String sep) {
    return Objects.equals(arrayEmptySeparator, sep) ? this : new Separators(rootSeparator, objectFieldValueSeparator, objectFieldValueSpacing, objectEntrySeparator, objectEntrySpacing, objectEmptySeparator, arrayValueSeparator, arrayValueSpacing, sep);
}","Separators","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.withArrayEmptySeparator(String).sep","Parameter_1","Belong to com.fasterxml.jackson.core.util.Separators.withArrayEmptySeparator(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.getRootSeparator()","Method","* @return String used as Root value separator
     *
     * @since 2.16","public String getRootSeparator() {
    return rootSeparator;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.getObjectFieldValueSeparator()","Method","No Comment","public char getObjectFieldValueSeparator() {
    return objectFieldValueSeparator;
}","char","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.getObjectFieldValueSpacing()","Method","* @return {@link Spacing} to use for Object fields
     * 
     * @since 2.16","public Spacing getObjectFieldValueSpacing() {
    return objectFieldValueSpacing;
}","Spacing","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.getObjectEntrySeparator()","Method","No Comment","public char getObjectEntrySeparator() {
    return objectEntrySeparator;
}","char","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.getObjectEntrySpacing()","Method","* @return {@link Spacing} to use for Object entries
     *
     * @since 2.16","public Spacing getObjectEntrySpacing() {
    return objectEntrySpacing;
}","Spacing","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.getObjectEmptySeparator()","Method","* @return String to use in empty Object
     * 
     * @since 2.17","public String getObjectEmptySeparator() {
    return objectEmptySeparator;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.getArrayValueSeparator()","Method","No Comment","public char getArrayValueSeparator() {
    return arrayValueSeparator;
}","char","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.getArrayValueSpacing()","Method","* @return {@link Spacing} to use between Array values
     *
     * @since 2.16","public Spacing getArrayValueSpacing() {
    return arrayValueSpacing;
}","Spacing","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.getArrayEmptySeparator()","Method","* @return String to use in empty Array
     * 
     * @since 2.17","public String getArrayEmptySeparator() {
    return arrayEmptySeparator;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>()","Constructor","* Constructor for creating an instance with default settings for all
     * separators.","public Separators() {
    this(':', ',', ',');
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(char,char,char)","Constructor","* Create an instance with the specified separator characters. There will be spaces before and
     * after the <code>objectFieldValueSeparator</code> and none around the other two.","public Separators(char objectFieldValueSeparator, char objectEntrySeparator, char arrayValueSeparator) {
    this(DEFAULT_ROOT_VALUE_SEPARATOR, objectFieldValueSeparator, Spacing.BOTH, objectEntrySeparator, Spacing.NONE, DEFAULT_OBJECT_EMPTY_SEPARATOR, arrayValueSeparator, Spacing.NONE, DEFAULT_ARRAY_EMPTY_SEPARATOR);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(char,char,char).objectFieldValueSeparator","Parameter_1","Belong to com.fasterxml.jackson.core.util.Separators.<init>(char,char,char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(char,char,char).objectEntrySeparator","Parameter_2","Belong to com.fasterxml.jackson.core.util.Separators.<init>(char,char,char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(char,char,char).arrayValueSeparator","Parameter_3","Belong to com.fasterxml.jackson.core.util.Separators.<init>(char,char,char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,char,Spacing)","Constructor","* Create an instance with the specified separator characters and spaces around those characters.
     * 
     * @since 2.16
     *
     * @deprecated Since 2.17 use new canonical constructor","// since 2.17
@Deprecated
public Separators(String rootSeparator, char objectFieldValueSeparator, Spacing objectFieldValueSpacing, char objectEntrySeparator, Spacing objectEntrySpacing, char arrayValueSeparator, Spacing arrayValueSpacing) {
    this(rootSeparator, objectFieldValueSeparator, objectFieldValueSpacing, objectEntrySeparator, objectEntrySpacing, DEFAULT_OBJECT_EMPTY_SEPARATOR, arrayValueSeparator, arrayValueSpacing, DEFAULT_ARRAY_EMPTY_SEPARATOR);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,char,Spacing).rootSeparator","Parameter_1","Belong to com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,char,Spacing)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,char,Spacing).objectFieldValueSeparator","Parameter_2","Belong to com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,char,Spacing)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,char,Spacing).objectFieldValueSpacing","Parameter_3","Belong to com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,char,Spacing)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,char,Spacing).objectEntrySeparator","Parameter_4","Belong to com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,char,Spacing)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,char,Spacing).objectEntrySpacing","Parameter_5","Belong to com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,char,Spacing)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,char,Spacing).arrayValueSeparator","Parameter_6","Belong to com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,char,Spacing)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,char,Spacing).arrayValueSpacing","Parameter_7","Belong to com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,char,Spacing)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,String,char,Spacing,String)","Constructor","* Canonical constructor for creating an instance with the specified separator
     * characters and spaces around those characters.
     *
     * @since 2.17","public Separators(String rootSeparator, char objectFieldValueSeparator, Spacing objectFieldValueSpacing, char objectEntrySeparator, Spacing objectEntrySpacing, String objectEmptySeparator, char arrayValueSeparator, Spacing arrayValueSpacing, String arrayEmptySeparator) {
    this.rootSeparator = rootSeparator;
    this.objectFieldValueSeparator = objectFieldValueSeparator;
    this.objectFieldValueSpacing = objectFieldValueSpacing;
    this.objectEntrySeparator = objectEntrySeparator;
    this.objectEntrySpacing = objectEntrySpacing;
    this.objectEmptySeparator = objectEmptySeparator;
    this.arrayValueSeparator = arrayValueSeparator;
    this.arrayValueSpacing = arrayValueSpacing;
    this.arrayEmptySeparator = arrayEmptySeparator;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,String,char,Spacing,String).rootSeparator","Parameter_1","Belong to com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,String,char,Spacing,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,String,char,Spacing,String).objectFieldValueSeparator","Parameter_2","Belong to com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,String,char,Spacing,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,String,char,Spacing,String).objectFieldValueSpacing","Parameter_3","Belong to com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,String,char,Spacing,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,String,char,Spacing,String).objectEntrySeparator","Parameter_4","Belong to com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,String,char,Spacing,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,String,char,Spacing,String).objectEntrySpacing","Parameter_5","Belong to com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,String,char,Spacing,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,String,char,Spacing,String).objectEmptySeparator","Parameter_6","Belong to com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,String,char,Spacing,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,String,char,Spacing,String).arrayValueSeparator","Parameter_7","Belong to com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,String,char,Spacing,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,String,char,Spacing,String).arrayValueSpacing","Parameter_8","Belong to com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,String,char,Spacing,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,String,char,Spacing,String).arrayEmptySeparator","Parameter_9","Belong to com.fasterxml.jackson.core.util.Separators.<init>(String,char,Spacing,char,Spacing,String,char,Spacing,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators$Spacing","Enum","* Define the spacing around elements like commas and colons.
     * 
     * @since 2.16","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.util.Separators$Spacing","Enum","* Define the spacing around elements like commas and colons.
     * 
     * @since 2.16","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.util.Separators$Spacing.NONE","Enum Constant","No Comment","NONE("""", """")","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators$Spacing.BEFORE","Enum Constant","No Comment","BEFORE("" "", """")","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators$Spacing.AFTER","Enum Constant","No Comment","AFTER("""", "" "")","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators$Spacing.BOTH","Enum Constant","No Comment","BOTH("" "", "" "")","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators$Spacing.spacesBefore()","Method","No Comment","public String spacesBefore() {
    return spacesBefore;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators$Spacing.spacesAfter()","Method","No Comment","public String spacesAfter() {
    return spacesAfter;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators$Spacing.apply(char)","Method","No Comment","public String apply(char separator) {
    return spacesBefore + separator + spacesAfter;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators$Spacing.apply(char).separator","Parameter_1","Belong to com.fasterxml.jackson.core.util.Separators$Spacing.apply(char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators$Spacing.<init>(String,String)","Constructor","No Comment","private Spacing(String spacesBefore, String spacesAfter) {
    this.spacesBefore = spacesBefore;
    this.spacesAfter = spacesAfter;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators$Spacing.<init>(String,String).spacesBefore","Parameter_1","Belong to com.fasterxml.jackson.core.util.Separators$Spacing.<init>(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators$Spacing.<init>(String,String).spacesAfter","Parameter_2","Belong to com.fasterxml.jackson.core.util.Separators$Spacing.<init>(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.Spacing","Enum","* Define the spacing around elements like commas and colons.
     * 
     * @since 2.16","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.util.Separators.Spacing.NONE","Enum Constant","No Comment","NONE("""", """")","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.Spacing.BEFORE","Enum Constant","No Comment","BEFORE("" "", """")","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.Spacing.AFTER","Enum Constant","No Comment","AFTER("""", "" "")","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.Spacing.BOTH","Enum Constant","No Comment","BOTH("" "", "" "")","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.Spacing.spacesBefore()","Method","No Comment","public String spacesBefore() {
    return spacesBefore;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.Spacing.spacesAfter()","Method","No Comment","public String spacesAfter() {
    return spacesAfter;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.Spacing.apply(char)","Method","No Comment","public String apply(char separator) {
    return spacesBefore + separator + spacesAfter;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.Spacing.apply(char).separator","Parameter_1","Belong to com.fasterxml.jackson.core.util.Separators.Spacing.apply(char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.Spacing.<init>(String,String)","Constructor","No Comment","private Spacing(String spacesBefore, String spacesAfter) {
    this.spacesBefore = spacesBefore;
    this.spacesAfter = spacesAfter;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.Spacing.<init>(String,String).spacesBefore","Parameter_1","Belong to com.fasterxml.jackson.core.util.Separators.Spacing.<init>(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Separators.Spacing.<init>(String,String).spacesAfter","Parameter_2","Belong to com.fasterxml.jackson.core.util.Separators.Spacing.<init>(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter","Class","* Default linefeed-based indenter, used by {@link DefaultPrettyPrinter} (unless
 * overridden). Uses system-specific linefeeds and 2 spaces for indentation per level.
 *
 * @since 2.5","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter",""
"com.fasterxml.jackson.core.util.DefaultIndenter.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter.SYS_LF","Field","No Comment","public final static String SYS_LF;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter.SYSTEM_LINEFEED_INSTANCE","Field","No Comment","public static final DefaultIndenter SYSTEM_LINEFEED_INSTANCE = new DefaultIndenter(""  "", SYS_LF);","No return type","public , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter.INDENT_LEVELS","Field","* We expect to rarely get indentation deeper than this number of levels,
     * and try not to pre-generate more indentations than needed.","private final static int INDENT_LEVELS = 16;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter.indents","Field","No Comment","private final char[] indents;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter.charsPerLevel","Field","No Comment","private final int charsPerLevel;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter.eol","Field","No Comment","private final String eol;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter.withLinefeed(String)","Method","No Comment","public DefaultIndenter withLinefeed(String lf) {
    if (lf.equals(eol)) {
        return this;
    }
    return new DefaultIndenter(getIndent(), lf);
}","DefaultIndenter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter.withLinefeed(String).lf","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultIndenter.withLinefeed(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter.withIndent(String)","Method","No Comment","public DefaultIndenter withIndent(String indent) {
    if (indent.equals(getIndent())) {
        return this;
    }
    return new DefaultIndenter(indent, eol);
}","DefaultIndenter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter.withIndent(String).indent","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultIndenter.withIndent(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter.isInline()","Method","No Comment","@Override
public boolean isInline() {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter.writeIndentation(JsonGenerator,int)","Method","No Comment","@Override
public void writeIndentation(JsonGenerator jg, int level) throws IOException {
    jg.writeRaw(eol);
    if (level > 0) {
        // should we err on negative values (as there's some flaw?)
        level *= charsPerLevel;
        while (level > indents.length) {
            // unlike to happen but just in case
            jg.writeRaw(indents, 0, indents.length);
            level -= indents.length;
        }
        jg.writeRaw(indents, 0, level);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter.writeIndentation(JsonGenerator,int).jg","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter.writeIndentation(JsonGenerator,int).level","Parameter_2","Belong to com.fasterxml.jackson.core.util.DefaultIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter.getEol()","Method","No Comment","public String getEol() {
    return eol;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter.getIndent()","Method","No Comment","public String getIndent() {
    return new String(indents, 0, charsPerLevel);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter.<init>()","Constructor","* Indent with two spaces and the system's default line feed","public DefaultIndenter() {
    this(""  "", SYS_LF);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter.<init>(String,String)","Constructor","* Create an indenter which uses the <code>indent</code> string to indent one level
     * and the <code>eol</code> string to separate lines.
     *
     * @param indent Indentation String to prepend for a single level of indentation
     * @param eol End-of-line marker to use after indented line","public DefaultIndenter(String indent, String eol) {
    charsPerLevel = indent.length();
    indents = new char[indent.length() * INDENT_LEVELS];
    int offset = 0;
    for (int i = 0; i < INDENT_LEVELS; i++) {
        indent.getChars(0, indent.length(), indents, offset);
        offset += indent.length();
    }
    this.eol = eol;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter.<init>(String,String).indent","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultIndenter.<init>(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultIndenter.<init>(String,String).eol","Parameter_2","Belong to com.fasterxml.jackson.core.util.DefaultIndenter.<init>(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer","Class","* TextBuffer is a class similar to {@link java.lang.StringBuffer}, with
 * following differences:
 *<ul>
 *  <li>TextBuffer uses segments character arrays, to avoid having
 *     to do additional array copies when array is not big enough.
 *     This means that only reallocating that is necessary is done only once:
 *     if and when caller
 *     wants to access contents in a linear array (char[], String).
 *    </li>
*  <li>TextBuffer can also be initialized in ""shared mode"", in which
*     it will just act as a wrapper to a single char array managed
*     by another object (like parser that owns it)
 *    </li>
 *  <li>TextBuffer is not synchronized.
 *    </li>
 * </ul>","Class do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.util.TextBuffer.NO_CHARS","Field","No Comment","final static char[] NO_CHARS = new char[0];","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.MIN_SEGMENT_LEN","Field","* Let's start with sizable but not huge buffer, will grow as necessary
     *<p>
     * Reduced from 1000 down to 500 in 2.10.","final static int MIN_SEGMENT_LEN = 500;","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.MAX_SEGMENT_LEN","Field","* Let's limit maximum segment length to something sensible.
     * For 2.10, let's limit to using 64kc chunks (128 kB) -- was 256kC/512kB up to 2.9","final static int MAX_SEGMENT_LEN = 0x10000;","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer._allocator","Field","No Comment","private final BufferRecycler _allocator;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer._inputBuffer","Field","* Shared input buffer; stored here in case some input can be returned
     * as is, without being copied to collector's own buffers. Note that
     * this is read-only for this Object.","private char[] _inputBuffer;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer._inputStart","Field","* Character offset of first char in input buffer; -1 to indicate
     * that input buffer currently does not contain any useful char data","private int _inputStart;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer._inputLen","Field","No Comment","private int _inputLen;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer._segments","Field","* List of segments prior to currently active segment.","private ArrayList<char[]> _segments;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer._hasSegments","Field","* Flag that indicates whether _seqments is non-empty","private boolean _hasSegments;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer._segmentSize","Field","* Amount of characters in segments in {@link #_segments}","private int _segmentSize;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer._currentSegment","Field","No Comment","private char[] _currentSegment;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer._currentSize","Field","* Number of characters in currently active (last) segment","private int _currentSize;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer._resultString","Field","* String that will be constructed when the whole contents are
     * needed; will be temporarily stored in case asked for again.","private String _resultString;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer._resultArray","Field","No Comment","private char[] _resultArray;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.fromInitial(char[])","Method","* Factory method for constructing an instance with no allocator, and
     * with initial full segment.
     *
     * @param initialSegment Initial, full segment to use for creating buffer (buffer
     *   {@link #size()} would return length of {@code initialSegment})
     *
     * @return TextBuffer constructed
     *
     * @since 2.10","public static TextBuffer fromInitial(char[] initialSegment) {
    return new TextBuffer(null, initialSegment);
}","TextBuffer","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.fromInitial(char[]).initialSegment","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.fromInitial(char[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.releaseBuffers()","Method","* Method called to indicate that the underlying buffers should now
     * be recycled if they haven't yet been recycled. Although caller
     * can still use this text buffer, it is not advisable to call this
     * method if that is likely, since next time a buffer is needed,
     * buffers need to reallocated.
     *<p>
     * Note: since Jackson 2.11, calling this method will NOT clear already
     * aggregated contents (that is, {@code _currentSegment}, to retain
     * current token text if (but only if!) already aggregated.","public void releaseBuffers() {
    // inlined `resetWithEmpty()` (except leaving `_resultString` as-is
    {
        _inputStart = -1;
        _currentSize = 0;
        _inputLen = 0;
        _inputBuffer = null;
        // note: _resultString retained (see https://github.com/FasterXML/jackson-databind/issues/2635
        // for reason)
        // should this be retained too?
        _resultArray = null;
        if (_hasSegments) {
            clearSegments();
        }
    }
    if (_allocator != null) {
        if (_currentSegment != null) {
            // And then return that array
            char[] buf = _currentSegment;
            _currentSegment = null;
            _allocator.releaseCharBuffer(BufferRecycler.CHAR_TEXT_BUFFER, buf);
        }
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.resetWithEmpty()","Method","* Method called to clear out any content text buffer may have, and
     * initializes buffer to use non-shared data.","public void resetWithEmpty() {
    // indicates shared buffer not used
    _inputStart = -1;
    _currentSize = 0;
    _inputLen = 0;
    _inputBuffer = null;
    _resultString = null;
    _resultArray = null;
    // And then reset internal input buffers, if necessary:
    if (_hasSegments) {
        clearSegments();
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.resetWith(char)","Method","* Method for clearing out possibly existing content, and replacing them with
     * a single-character content (so {@link #size()} would return {@code 1})
     *
     * @param ch Character to set as the buffer contents
     *
     * @since 2.9","public void resetWith(char ch) {
    _inputStart = -1;
    _inputLen = 0;
    _resultString = null;
    _resultArray = null;
    if (_hasSegments) {
        clearSegments();
    } else if (_currentSegment == null) {
        _currentSegment = buf(1);
    }
    // lgtm [java/dereferenced-value-may-be-null]
    _currentSegment[0] = ch;
    _currentSize = _segmentSize = 1;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.resetWith(char).ch","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.resetWith(char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.resetWithShared(char[],int,int)","Method","* Method called to initialize the buffer with a shared copy of data;
     * this means that buffer will just have pointers to actual data. It
     * also means that if anything is to be appended to the buffer, it
     * will first have to unshare it (make a local copy).
     *
     * @param buf Buffer that contains shared contents
     * @param offset Offset of the first content character in {@code buf}
     * @param len Length of content in {@code buf}","public void resetWithShared(char[] buf, int offset, int len) {
    // First, let's clear intermediate values, if any:
    _resultString = null;
    _resultArray = null;
    // Then let's mark things we need about input buffer
    _inputBuffer = buf;
    _inputStart = offset;
    _inputLen = len;
    // And then reset internal input buffers, if necessary:
    if (_hasSegments) {
        clearSegments();
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.resetWithShared(char[],int,int).buf","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.resetWithShared(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.resetWithShared(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.util.TextBuffer.resetWithShared(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.resetWithShared(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.util.TextBuffer.resetWithShared(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.resetWithCopy(char[],int,int)","Method","* @param buf Buffer that contains new contents
     * @param offset Offset of the first content character in {@code buf}
     * @param len Length of content in {@code buf}
     * @throws IOException if the buffer has grown too large, see {@link com.fasterxml.jackson.core.StreamReadConstraints.Builder#maxStringLength(int)}","public void resetWithCopy(char[] buf, int offset, int len) throws IOException {
    _inputBuffer = null;
    // indicates shared buffer not used
    _inputStart = -1;
    _inputLen = 0;
    _resultString = null;
    _resultArray = null;
    // And then reset internal input buffers, if necessary:
    if (_hasSegments) {
        clearSegments();
    } else if (_currentSegment == null) {
        _currentSegment = buf(len);
    }
    _currentSize = _segmentSize = 0;
    append(buf, offset, len);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.resetWithCopy(char[],int,int).buf","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.resetWithCopy(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.resetWithCopy(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.util.TextBuffer.resetWithCopy(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.resetWithCopy(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.util.TextBuffer.resetWithCopy(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.resetWithCopy(String,int,int)","Method","* @param text String that contains new contents
     * @param start Offset of the first content character in {@code text}
     * @param len Length of content in {@code text}
     * @throws IOException if the buffer has grown too large, see {@link com.fasterxml.jackson.core.StreamReadConstraints.Builder#maxStringLength(int)}
     * @since 2.9","public void resetWithCopy(String text, int start, int len) throws IOException {
    _inputBuffer = null;
    _inputStart = -1;
    _inputLen = 0;
    _resultString = null;
    _resultArray = null;
    if (_hasSegments) {
        clearSegments();
    } else if (_currentSegment == null) {
        _currentSegment = buf(len);
    }
    _currentSize = _segmentSize = 0;
    append(text, start, len);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.resetWithCopy(String,int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.resetWithCopy(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.resetWithCopy(String,int,int).start","Parameter_2","Belong to com.fasterxml.jackson.core.util.TextBuffer.resetWithCopy(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.resetWithCopy(String,int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.util.TextBuffer.resetWithCopy(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.resetWithString(String)","Method","* @param value to replace existing buffer
     * @throws IOException if the value is too large, see {@link com.fasterxml.jackson.core.StreamReadConstraints.Builder#maxStringLength(int)}","public void resetWithString(String value) throws IOException {
    _inputBuffer = null;
    _inputStart = -1;
    _inputLen = 0;
    validateStringLength(value.length());
    _resultString = value;
    _resultArray = null;
    if (_hasSegments) {
        clearSegments();
    }
    _currentSize = 0;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.resetWithString(String).value","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.resetWithString(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.getBufferWithoutReset()","Method","* Method for accessing the currently active (last) content segment
     * without changing state of the buffer
     *
     * @return Currently active (last) content segment
     *
     * @since 2.9","public char[] getBufferWithoutReset() {
    return _currentSegment;
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.buf(int)","Method","recycled earlier.","private char[] buf(int needed) {
    if (_allocator != null) {
        return _allocator.allocCharBuffer(BufferRecycler.CHAR_TEXT_BUFFER, needed);
    }
    return new char[Math.max(needed, MIN_SEGMENT_LEN)];
}","char[]","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.buf(int).needed","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.buf(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.clearSegments()","Method","No Comment","private void clearSegments() {
    _hasSegments = false;
    // Let's start using _last_ segment from list; for one, it's
    // the biggest one, and it's also most likely to be cached
    // 28-Aug-2009, tatu: Actually, the current segment should
    //   be the biggest one, already
    //_currentSegment = _segments.get(_segments.size() - 1);
    _segments.clear();
    _currentSize = _segmentSize = 0;
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.bufferRecycler()","Method","* @since 2.17","public BufferRecycler bufferRecycler() {
    return _allocator;
}","BufferRecycler","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.size()","Method","* @return Number of characters currently stored in this buffer","public int size() {
    if (_inputStart >= 0) {
        // shared copy from input buf
        return _inputLen;
    }
    if (_resultArray != null) {
        return _resultArray.length;
    }
    if (_resultString != null) {
        return _resultString.length();
    }
    // local segmented buffers
    return _segmentSize + _currentSize;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.getTextOffset()","Method","No Comment","public int getTextOffset() {
    /* Only shared input buffer can have non-zero offset; buffer
         * segments start at 0, and if we have to create a combo buffer,
         * that too will start from beginning of the buffer
         */
    return (_inputStart >= 0) ? _inputStart : 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.hasTextAsCharacters()","Method","* Method that can be used to check whether textual contents can
     * be efficiently accessed using {@link #getTextBuffer}.
     *
     * @return {@code True} if access via {@link #getTextBuffer()} would be efficient
     *   (that is, content already available as aggregated {@code char[]})","public boolean hasTextAsCharacters() {
    // if we have array in some form, sure
    if (_inputStart >= 0 || _resultArray != null)
        return true;
    // not if we have String as value
    if (_resultString != null)
        return false;
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.getTextBuffer()","Method","* Accessor that may be used to get the contents of this buffer as a single
     * {@code char[]} regardless of whether they were collected in a segmented
     * fashion or not: this typically require allocation of the result buffer.
     *
     * @return Aggregated {@code char[]} that contains all buffered content
     * @throws IOException if the text is too large, see {@link com.fasterxml.jackson.core.StreamReadConstraints.Builder#maxStringLength(int)}","public char[] getTextBuffer() throws IOException {
    // Are we just using shared input buffer?
    if (_inputStart >= 0)
        return _inputBuffer;
    if (_resultArray != null)
        return _resultArray;
    if (_resultString != null) {
        return (_resultArray = _resultString.toCharArray());
    }
    // Nope; but does it fit in just one segment?
    if (!_hasSegments) {
        return (_currentSegment == null) ? NO_CHARS : _currentSegment;
    }
    // Nope, need to have/create a non-segmented array and return it
    return contentsAsArray();
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.contentsAsString()","Method","* Accessor that may be used to get the contents of this buffer as a single
     * {@code String} regardless of whether they were collected in a segmented
     * fashion or not: this typically require construction of the result String.
     *
     * @return Aggregated buffered contents as a {@link java.lang.String}
     * @throws IOException if the contents are too large, see {@link com.fasterxml.jackson.core.StreamReadConstraints.Builder#maxStringLength(int)}","public String contentsAsString() throws IOException {
    if (_resultString == null) {
        // Has array been requested? Can make a shortcut, if so:
        if (_resultArray != null) {
            // _resultArray length should already be validated, no need to check again
            _resultString = new String(_resultArray);
        } else {
            // Do we use shared array?
            if (_inputStart >= 0) {
                if (_inputLen < 1) {
                    return (_resultString = """");
                }
                validateStringLength(_inputLen);
                _resultString = new String(_inputBuffer, _inputStart, _inputLen);
            } else {
                // nope... need to copy
                // But first, let's see if we have just one buffer
                int segLen = _segmentSize;
                int currLen = _currentSize;
                if (segLen == 0) {
                    // yup
                    if (currLen == 0) {
                        _resultString = """";
                    } else {
                        validateStringLength(currLen);
                        _resultString = new String(_currentSegment, 0, currLen);
                    }
                } else {
                    // no, need to combine
                    final int builderLen = segLen + currLen;
                    if (builderLen < 0) {
                        _reportBufferOverflow(segLen, currLen);
                    }
                    validateStringLength(builderLen);
                    StringBuilder sb = new StringBuilder(builderLen);
                    // First stored segments
                    if (_segments != null) {
                        for (int i = 0, len = _segments.size(); i < len; ++i) {
                            char[] curr = _segments.get(i);
                            sb.append(curr, 0, curr.length);
                        }
                    }
                    // And finally, current segment:
                    sb.append(_currentSegment, 0, _currentSize);
                    _resultString = sb.toString();
                }
            }
        }
    }
    return _resultString;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.contentsAsArray()","Method","* @return char array
     * @throws IOException if the text is too large, see {@link com.fasterxml.jackson.core.StreamReadConstraints.Builder#maxStringLength(int)}","public char[] contentsAsArray() throws IOException {
    char[] result = _resultArray;
    if (result == null) {
        _resultArray = result = resultArray();
    }
    return result;
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.contentsAsDouble(boolean)","Method","* Convenience method for converting contents of the buffer
     * into a Double value.
     *<p>
     * NOTE! Caller <b>MUST</b> validate contents before calling this method,
     * to ensure textual version is valid JSON floating-point token -- this
     * method is not guaranteed to do any validation and behavior with invalid
     * content is not defined (either throws an exception or returns arbitrary
     * number).
     *
     * @param useFastParser whether to use {@code FastDoubleParser}
     * @return Buffered text value parsed as a {@link Double}, if possible
     *
     * @throws NumberFormatException may (but is not guaranteed!) be thrown
     *    if contents are not a valid JSON floating-point number representation
     *
     * @since 2.14","public double contentsAsDouble(final boolean useFastParser) throws NumberFormatException {
    // Order in which check is somewhat arbitrary... try likeliest ones
    // that do not require allocation first
    // except _resultString first since it works best with JDK (non-fast parser)
    if (_resultString != null) {
        return NumberInput.parseDouble(_resultString, useFastParser);
    }
    if (_inputStart >= 0) {
        // shared?
        return NumberInput.parseDouble(_inputBuffer, _inputStart, _inputLen, useFastParser);
    }
    if (!_hasSegments) {
        // all content in current segment!
        return NumberInput.parseDouble(_currentSegment, 0, _currentSize, useFastParser);
    }
    if (_resultArray != null) {
        return NumberInput.parseDouble(_resultArray, useFastParser);
    }
    // Otherwise, segmented so need to use slow path
    try {
        return NumberInput.parseDouble(contentsAsString(), useFastParser);
    } catch (IOException e) {
        // JsonParseException is used to denote a string that is too long
        throw new NumberFormatException(e.getMessage());
    }
}","double","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.contentsAsDouble(boolean).useFastParser","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.contentsAsDouble(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.contentsAsDouble()","Method","* Convenience method for converting contents of the buffer
     * into a Double value.
     *
     * @return Buffered text value parsed as a {@link Double}, if possible
     *
     * @throws NumberFormatException if contents are not a valid Java number
     *
     * @deprecated use {@link #contentsAsDouble(boolean)}","// @since 2.14
@Deprecated
public double contentsAsDouble() throws NumberFormatException {
    return contentsAsDouble(false);
}","double","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.contentsAsFloat()","Method","* Convenience method for converting contents of the buffer
     * into a Float value.
     *
     * @return Buffered text value parsed as a {@link Float}, if possible
     *
     * @throws NumberFormatException if contents are not a valid Java number
     * @deprecated use {@link #contentsAsFloat(boolean)}","// @since 2.14
@Deprecated
public float contentsAsFloat() throws NumberFormatException {
    return contentsAsFloat(false);
}","float","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.contentsAsFloat(boolean)","Method","* Convenience method for converting contents of the buffer
     * into a Float value.
     *<p>
     * NOTE! Caller <b>MUST</b> validate contents before calling this method,
     * to ensure textual version is valid JSON floating-point token -- this
     * method is not guaranteed to do any validation and behavior with invalid
     * content is not defined (either throws an exception or returns arbitrary
     * number).
     *
     * @param useFastParser whether to use {@code FastDoubleParser}
     * @return Buffered text value parsed as a {@link Float}, if possible
     *
     * @throws NumberFormatException may (but is not guaranteed!) be thrown
     *    if contents are not a valid JSON floating-point number representation
     *
     * @since 2.14","public float contentsAsFloat(final boolean useFastParser) throws NumberFormatException {
    // Order in which check is somewhat arbitrary... try likeliest ones
    // that do not require allocation first
    // except _resultString first since it works best with JDK (non-fast parser)
    if (_resultString != null) {
        return NumberInput.parseFloat(_resultString, useFastParser);
    }
    if (_inputStart >= 0) {
        // shared?
        return NumberInput.parseFloat(_inputBuffer, _inputStart, _inputLen, useFastParser);
    }
    if (!_hasSegments) {
        // all content in current segment!
        return NumberInput.parseFloat(_currentSegment, 0, _currentSize, useFastParser);
    }
    if (_resultArray != null) {
        return NumberInput.parseFloat(_resultArray, useFastParser);
    }
    // Otherwise, segmented so need to use slow path
    try {
        return NumberInput.parseFloat(contentsAsString(), useFastParser);
    } catch (IOException e) {
        // JsonParseException is used to denote a string that is too long
        throw new NumberFormatException(e.getMessage());
    }
}","float","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.contentsAsFloat(boolean).useFastParser","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.contentsAsFloat(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.contentsAsDecimal()","Method","* @deprecated Since 2.15 use {@link #contentsAsDecimal(boolean)} instead.","@Deprecated
public BigDecimal contentsAsDecimal() throws NumberFormatException {
    return contentsAsDecimal(false);
}","BigDecimal","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.contentsAsDecimal(boolean)","Method","* @since 2.18","public BigDecimal contentsAsDecimal(final boolean useFastParser) throws NumberFormatException {
    // Order in which check is somewhat arbitrary... try likeliest ones
    // that do not require allocation first
    // except _resultString first since it works best with JDK (non-fast parser)
    if (_resultString != null) {
        return NumberInput.parseBigDecimal(_resultString, useFastParser);
    }
    if (_inputStart >= 0) {
        // shared?
        return NumberInput.parseBigDecimal(_inputBuffer, _inputStart, _inputLen, useFastParser);
    }
    if (!_hasSegments) {
        // all content in current segment!
        return NumberInput.parseBigDecimal(_currentSegment, 0, _currentSize, useFastParser);
    }
    if (_resultArray != null) {
        return NumberInput.parseBigDecimal(_resultArray, useFastParser);
    }
    // Otherwise, segmented so need to use slow path
    try {
        return NumberInput.parseBigDecimal(contentsAsArray(), useFastParser);
    } catch (IOException e) {
        // JsonParseException is used to denote a string that is too long
        throw new NumberFormatException(e.getMessage());
    }
}","BigDecimal","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.contentsAsDecimal(boolean).useFastParser","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.contentsAsDecimal(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.contentsAsInt(boolean)","Method","* Specialized convenience method that will decode a 32-bit int,
     * of at most 9 digits (and possible leading minus sign).
     *<p>
     * NOTE: method DOES NOT verify that the contents actually are a valid
     * Java {@code int} value (either regarding format, or value range): caller
     * MUST validate that.
     *
     * @param neg Whether contents start with a minus sign
     *
     * @return Buffered text value parsed as an {@code int} using
     *   {@link NumberInput#parseInt(String)} method (which does NOT validate input)
     *
     * @since 2.9","public int contentsAsInt(boolean neg) {
    if ((_inputStart >= 0) && (_inputBuffer != null)) {
        if (neg) {
            return -NumberInput.parseInt(_inputBuffer, _inputStart + 1, _inputLen - 1);
        }
        return NumberInput.parseInt(_inputBuffer, _inputStart, _inputLen);
    }
    if (neg) {
        return -NumberInput.parseInt(_currentSegment, 1, _currentSize - 1);
    }
    return NumberInput.parseInt(_currentSegment, 0, _currentSize);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.contentsAsInt(boolean).neg","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.contentsAsInt(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.contentsAsLong(boolean)","Method","* Specialized convenience method that will decode a 64-bit int,
     * of at most 18 digits (and possible leading minus sign).
     *<p>
     * NOTE: method DOES NOT verify that the contents actually are a valid
     * Java {@code long} value (either regarding format, or value range): caller
     * MUST validate that.
     *
     * @param neg Whether contents start with a minus sign
     *
     * @return Buffered text value parsed as an {@code long} using
     *   {@link NumberInput#parseLong(String)} method (which does NOT validate input)
     *
     * @since 2.9","public long contentsAsLong(boolean neg) {
    if ((_inputStart >= 0) && (_inputBuffer != null)) {
        if (neg) {
            return -NumberInput.parseLong(_inputBuffer, _inputStart + 1, _inputLen - 1);
        }
        return NumberInput.parseLong(_inputBuffer, _inputStart, _inputLen);
    }
    if (neg) {
        return -NumberInput.parseLong(_currentSegment, 1, _currentSize - 1);
    }
    return NumberInput.parseLong(_currentSegment, 0, _currentSize);
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.contentsAsLong(boolean).neg","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.contentsAsLong(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.contentsToWriter(Writer)","Method","* Accessor that will write buffered contents using given {@link Writer}.
     *
     * @param w Writer to use for writing out buffered content
     *
     * @return Number of characters written (same as {@link #size()})
     *
     * @throws IOException If write using {@link Writer} parameter fails
     *
     * @since 2.8","public int contentsToWriter(Writer w) throws IOException {
    if (_resultArray != null) {
        w.write(_resultArray);
        return _resultArray.length;
    }
    if (_resultString != null) {
        // Can take a shortcut...
        w.write(_resultString);
        return _resultString.length();
    }
    // Do we use shared array?
    if (_inputStart >= 0) {
        final int len = _inputLen;
        if (len > 0) {
            w.write(_inputBuffer, _inputStart, len);
        }
        return len;
    }
    // nope, not shared
    int total = 0;
    if (_segments != null) {
        for (int i = 0, end = _segments.size(); i < end; ++i) {
            char[] curr = _segments.get(i);
            int currLen = curr.length;
            total += currLen;
            w.write(curr, 0, currLen);
        }
    }
    int len = _currentSize;
    if (len > 0) {
        total += len;
        w.write(_currentSegment, 0, len);
    }
    return total;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.contentsToWriter(Writer).w","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.contentsToWriter(Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.ensureNotShared()","Method","* Method called to make sure that buffer is not using shared input
     * buffer; if it is, it will copy such contents to private buffer.","public void ensureNotShared() {
    if (_inputStart >= 0) {
        unshare(16);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.append(char)","Method","* @param c char to append
     * @throws IOException if the buffer has grown too large, see {@link com.fasterxml.jackson.core.StreamReadConstraints.Builder#maxStringLength(int)}","public void append(char c) throws IOException {
    // Using shared buffer so far?
    if (_inputStart >= 0) {
        unshare(16);
    }
    _resultString = null;
    _resultArray = null;
    // Room in current segment?
    char[] curr = _currentSegment;
    if (_currentSize >= curr.length) {
        validateAppend(1);
        expand();
        curr = _currentSegment;
    }
    curr[_currentSize++] = c;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.append(char).c","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.append(char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.append(char[],int,int)","Method","* @param c char array to append
     * @param start the start index within the array (from which we read chars to append)
     * @param len number of chars to take from the array
     * @throws IOException if the buffer has grown too large, see {@link com.fasterxml.jackson.core.StreamReadConstraints.Builder#maxStringLength(int)}","public void append(char[] c, int start, int len) throws IOException {
    // Can't append to shared buf (sanity check)
    if (_inputStart >= 0) {
        unshare(len);
    }
    _resultString = null;
    _resultArray = null;
    // Room in current segment?
    char[] curr = _currentSegment;
    int max = curr.length - _currentSize;
    if (max >= len) {
        System.arraycopy(c, start, curr, _currentSize, len);
        _currentSize += len;
        return;
    }
    validateAppend(len);
    // No room for all, need to copy part(s):
    if (max > 0) {
        System.arraycopy(c, start, curr, _currentSize, max);
        start += max;
        len -= max;
    }
    // And then allocate new segment; we are guaranteed to now
    // have enough room in segment.
    do {
        expand();
        int amount = Math.min(_currentSegment.length, len);
        System.arraycopy(c, start, _currentSegment, 0, amount);
        _currentSize += amount;
        start += amount;
        len -= amount;
    } while (len > 0);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.append(char[],int,int).c","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.append(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.append(char[],int,int).start","Parameter_2","Belong to com.fasterxml.jackson.core.util.TextBuffer.append(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.append(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.util.TextBuffer.append(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.append(String,int,int)","Method","* @param str string to append
     * @param offset the start index within the string (from which we read chars to append)
     * @param len number of chars to take from the string
     * @throws IOException if the buffer has grown too large, see {@link com.fasterxml.jackson.core.StreamReadConstraints.Builder#maxStringLength(int)}","public void append(String str, int offset, int len) throws IOException {
    // Can't append to shared buf (sanity check)
    if (_inputStart >= 0) {
        unshare(len);
    }
    _resultString = null;
    _resultArray = null;
    // Room in current segment?
    char[] curr = _currentSegment;
    int max = curr.length - _currentSize;
    if (max >= len) {
        str.getChars(offset, offset + len, curr, _currentSize);
        _currentSize += len;
        return;
    }
    validateAppend(len);
    // No room for all, need to copy part(s):
    if (max > 0) {
        str.getChars(offset, offset + max, curr, _currentSize);
        len -= max;
        offset += max;
    }
    // And then allocate new segment; we are guaranteed to now
    // have enough room in segment.
    do {
        expand();
        int amount = Math.min(_currentSegment.length, len);
        str.getChars(offset, offset + amount, _currentSegment, 0);
        _currentSize += amount;
        offset += amount;
        len -= amount;
    } while (len > 0);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.append(String,int,int).str","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.append(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.append(String,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.util.TextBuffer.append(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.append(String,int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.util.TextBuffer.append(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.validateAppend(int)","Method","No Comment","private void validateAppend(int toAppend) throws IOException {
    int newTotalLength = _segmentSize + _currentSize + toAppend;
    // guard against overflow
    if (newTotalLength < 0) {
        newTotalLength = Integer.MAX_VALUE;
    }
    validateStringLength(newTotalLength);
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.validateAppend(int).toAppend","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.validateAppend(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.getCurrentSegment()","Method","No Comment","public char[] getCurrentSegment() {
    /* Since the intention of the caller is to directly add stuff into
         * buffers, we should NOT have anything in shared buffer... ie. may
         * need to unshare contents.
         */
    if (_inputStart >= 0) {
        unshare(1);
    } else {
        char[] curr = _currentSegment;
        if (curr == null) {
            _currentSegment = buf(0);
        } else if (_currentSize >= curr.length) {
            // Plus, we better have room for at least one more char
            expand();
        }
    }
    return _currentSegment;
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.emptyAndGetCurrentSegment()","Method","No Comment","public char[] emptyAndGetCurrentSegment() {
    // inlined 'resetWithEmpty()'
    // indicates shared buffer not used
    _inputStart = -1;
    _currentSize = 0;
    _inputLen = 0;
    _inputBuffer = null;
    _resultString = null;
    _resultArray = null;
    // And then reset internal input buffers, if necessary:
    if (_hasSegments) {
        clearSegments();
    }
    char[] curr = _currentSegment;
    if (curr == null) {
        _currentSegment = curr = buf(0);
    }
    return curr;
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.getCurrentSegmentSize()","Method","No Comment","public int getCurrentSegmentSize() {
    return _currentSize;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.setCurrentLength(int)","Method","No Comment","public void setCurrentLength(int len) {
    _currentSize = len;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.setCurrentLength(int).len","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.setCurrentLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.setCurrentAndReturn(int)","Method","* Convenience method that finishes the current active content segment
     * (by specifying how many characters within consists of valid content)
     * and aggregates and returns resulting contents (similar to a call
     * to {@link #contentsAsString()}).
     *
     * @param len Length of content (in characters) of the current active segment
     *
     * @return String that contains all buffered content
     * @throws IOException if the text is too large, see {@link com.fasterxml.jackson.core.StreamReadConstraints.Builder#maxStringLength(int)}
     *
     * @since 2.6","public String setCurrentAndReturn(int len) throws IOException {
    _currentSize = len;
    // We can simplify handling here compared to full `contentsAsString()`:
    if (_segmentSize > 0) {
        // longer text; call main method
        return contentsAsString();
    }
    // more common case: single segment
    int currLen = _currentSize;
    validateStringLength(currLen);
    String str = (currLen == 0) ? """" : new String(_currentSegment, 0, currLen);
    _resultString = str;
    return str;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.setCurrentAndReturn(int).len","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.setCurrentAndReturn(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.finishCurrentSegment()","Method","* @return char array
     * @throws IOException if the text is too large, see {@link com.fasterxml.jackson.core.StreamReadConstraints.Builder#maxStringLength(int)}","public char[] finishCurrentSegment() throws IOException {
    if (_segments == null) {
        _segments = new ArrayList<>();
    }
    _hasSegments = true;
    _segments.add(_currentSegment);
    int oldLen = _currentSegment.length;
    _segmentSize += oldLen;
    if (_segmentSize < 0) {
        _reportBufferOverflow(_segmentSize - oldLen, oldLen);
    }
    _currentSize = 0;
    validateStringLength(_segmentSize);
    // Let's grow segments by 50%
    int newLen = oldLen + (oldLen >> 1);
    if (newLen < MIN_SEGMENT_LEN) {
        newLen = MIN_SEGMENT_LEN;
    } else if (newLen > MAX_SEGMENT_LEN) {
        newLen = MAX_SEGMENT_LEN;
    }
    char[] curr = carr(newLen);
    _currentSegment = curr;
    return curr;
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.finishAndReturn(int,boolean)","Method","* @param lastSegmentEnd End offset in the currently active segment,
     *    could be 0 in the case of first character is
     *    delimiter or end-of-line
     * @param trimTrailingSpaces Whether trailing spaces should be trimmed or not
     * @return token as text
     * @throws IOException If length constraints (of longest allowed Text value) are violated
     *
     * @since 2.15","public String finishAndReturn(int lastSegmentEnd, boolean trimTrailingSpaces) throws IOException {
    if (trimTrailingSpaces) {
        // First, see if it's enough to trim end of current segment:
        int ptr = lastSegmentEnd - 1;
        if (ptr < 0 || _currentSegment[ptr] <= 0x0020) {
            return _doTrim(ptr);
        }
    }
    _currentSize = lastSegmentEnd;
    return contentsAsString();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.finishAndReturn(int,boolean).lastSegmentEnd","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.finishAndReturn(int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.finishAndReturn(int,boolean).trimTrailingSpaces","Parameter_2","Belong to com.fasterxml.jackson.core.util.TextBuffer.finishAndReturn(int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer._doTrim(int)","Method","@since 2.15","private String _doTrim(int ptr) throws IOException {
    while (true) {
        final char[] curr = _currentSegment;
        while (--ptr >= 0) {
            if (curr[ptr] > 0x0020) {
                // found the ending non-space char, all done:
                _currentSize = ptr + 1;
                return contentsAsString();
            }
        }
        // nope: need to handle previous segment; if there is one:
        if (_segments == null || _segments.isEmpty()) {
            break;
        }
        _currentSegment = _segments.remove(_segments.size() - 1);
        ptr = _currentSegment.length;
    }
    // we get here if everything was trimmed, so:
    _currentSize = 0;
    _hasSegments = false;
    return contentsAsString();
}","String","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer._doTrim(int).ptr","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer._doTrim(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.expandCurrentSegment()","Method","* Method called to expand size of the current segment, to
     * accommodate for more contiguous content. Usually only
     * used when parsing tokens like names if even then.
     * Method will both expand the segment and return it
     *
     * @return Expanded current segment","public char[] expandCurrentSegment() {
    final char[] curr = _currentSegment;
    // Let's grow by 50% by default
    final int len = curr.length;
    int newLen = len + (len >> 1);
    // but above intended maximum, slow to increase by 25%
    if (newLen > MAX_SEGMENT_LEN) {
        newLen = len + (len >> 2);
    }
    return (_currentSegment = Arrays.copyOf(curr, newLen));
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.expandCurrentSegment(int)","Method","* Method called to expand size of the current segment, to
     * accommodate for more contiguous content. Usually only
     * used when parsing tokens like names if even then.
     *
     * @param minSize Required minimum strength of the current segment
     *
     * @return Expanded current segment
     *
     * @since 2.4","public char[] expandCurrentSegment(int minSize) {
    char[] curr = _currentSegment;
    if (curr.length >= minSize)
        return curr;
    _currentSegment = curr = Arrays.copyOf(curr, minSize);
    return curr;
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.expandCurrentSegment(int).minSize","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.expandCurrentSegment(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.toString()","Method","* Note: calling this method may not be as efficient as calling
     * {@link #contentsAsString}, since it's not guaranteed that resulting
     * String is cached.","@Override
public String toString() {
    try {
        return contentsAsString();
    } catch (IOException e) {
        return ""TextBuffer: Exception when reading contents"";
    }
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.unshare(int)","Method","* Method called if/when we need to append content when we have been
     * initialized to use shared buffer.","private void unshare(int needExtra) {
    int sharedLen = _inputLen;
    _inputLen = 0;
    char[] inputBuf = _inputBuffer;
    _inputBuffer = null;
    int start = _inputStart;
    _inputStart = -1;
    // Is buffer big enough, or do we need to reallocate?
    int needed = sharedLen + needExtra;
    if (_currentSegment == null || needed > _currentSegment.length) {
        _currentSegment = buf(needed);
    }
    if (sharedLen > 0) {
        System.arraycopy(inputBuf, start, _currentSegment, 0, sharedLen);
    }
    _segmentSize = 0;
    _currentSize = sharedLen;
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.unshare(int).needExtra","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.unshare(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.expand()","Method","Method called when current segment is full, to allocate new segment.","private void expand() {
    // First, let's move current segment to segment list:
    if (_segments == null) {
        _segments = new ArrayList<>();
    }
    char[] curr = _currentSegment;
    _hasSegments = true;
    _segments.add(curr);
    _segmentSize += curr.length;
    if (_segmentSize < 0) {
        _reportBufferOverflow(_segmentSize - curr.length, curr.length);
    }
    _currentSize = 0;
    int oldLen = curr.length;
    // Let's grow segments by 50% minimum
    int newLen = oldLen + (oldLen >> 1);
    if (newLen < MIN_SEGMENT_LEN) {
        newLen = MIN_SEGMENT_LEN;
    } else if (newLen > MAX_SEGMENT_LEN) {
        newLen = MAX_SEGMENT_LEN;
    }
    _currentSegment = carr(newLen);
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.resultArray()","Method","No Comment","private char[] resultArray() throws IOException {
    if (_resultString != null) {
        // Can take a shortcut...
        return _resultString.toCharArray();
    }
    // Do we use shared array?
    if (_inputStart >= 0) {
        final int len = _inputLen;
        if (len < 1) {
            return NO_CHARS;
        }
        validateStringLength(len);
        final int start = _inputStart;
        if (start == 0) {
            return Arrays.copyOf(_inputBuffer, len);
        }
        return Arrays.copyOfRange(_inputBuffer, start, start + len);
    }
    // nope, not shared
    int size = size();
    if (size < 1) {
        if (size < 0) {
            _reportBufferOverflow(_segmentSize, _currentSize);
        }
        return NO_CHARS;
    }
    validateStringLength(size);
    int offset = 0;
    final char[] result = carr(size);
    if (_segments != null) {
        for (int i = 0, len = _segments.size(); i < len; ++i) {
            char[] curr = _segments.get(i);
            int currLen = curr.length;
            System.arraycopy(curr, 0, result, offset, currLen);
            offset += currLen;
        }
    }
    System.arraycopy(_currentSegment, 0, result, offset, _currentSize);
    return result;
}","char[]","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.carr(int)","Method","No Comment","private char[] carr(int len) {
    return new char[len];
}","char[]","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.carr(int).len","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.carr(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer._reportBufferOverflow(int,int)","Method","No Comment","protected void _reportBufferOverflow(int prev, int curr) {
    long newSize = (long) prev + (long) curr;
    throw new IllegalStateException(""TextBuffer overrun: size reached ("" + newSize + "") exceeds maximum of "" + Integer.MAX_VALUE);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer._reportBufferOverflow(int,int).prev","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer._reportBufferOverflow(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer._reportBufferOverflow(int,int).curr","Parameter_2","Belong to com.fasterxml.jackson.core.util.TextBuffer._reportBufferOverflow(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.validateStringLength(int)","Method","* Convenience method that can be used to verify that a String
     * of specified length does not exceed maximum specific by this
     * constraints object: if it does, a
     * {@link JsonParseException}
     * is thrown.
     *
     * @param length Length of string in input units
     *
     * @throws IOException If length exceeds maximum
     * @since 2.15","protected void validateStringLength(int length) throws IOException {
    // no-op
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.validateStringLength(int).length","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.validateStringLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.<init>(BufferRecycler)","Constructor","No Comment","public TextBuffer(BufferRecycler allocator) {
    _allocator = allocator;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.<init>(BufferRecycler).allocator","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.<init>(BufferRecycler)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.<init>(BufferRecycler,char[])","Constructor","@since 2.10","protected TextBuffer(BufferRecycler allocator, char[] initialSegment) {
    this(allocator);
    _currentSegment = initialSegment;
    _currentSize = initialSegment.length;
    _inputStart = -1;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.<init>(BufferRecycler,char[]).allocator","Parameter_1","Belong to com.fasterxml.jackson.core.util.TextBuffer.<init>(BufferRecycler,char[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.TextBuffer.<init>(BufferRecycler,char[]).initialSegment","Parameter_2","Belong to com.fasterxml.jackson.core.util.TextBuffer.<init>(BufferRecycler,char[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RequestPayload","Class","* Container object used to contain optional information on content
 * being parsed, passed to {@link com.fasterxml.jackson.core.JsonParseException} in case of
 * exception being thrown; this may be useful for caller to display
 * information on failure.
 *
 * @since 2.8","Class do not obtain Source Code","No return type","public ","","java.io.Serializable"
"com.fasterxml.jackson.core.util.RequestPayload.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RequestPayload._payloadAsBytes","Field","request payload as byte[]","protected byte[] _payloadAsBytes;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RequestPayload._payloadAsText","Field","request payload as String","protected CharSequence _payloadAsText;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RequestPayload._charset","Field","Charset if the request payload is set in bytes","protected String _charset;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RequestPayload.getRawPayload()","Method","* Returns the raw request payload object i.e, either byte[] or String
     *
     * @return Object which is a raw request payload i.e, either byte[] or
     *         String","public Object getRawPayload() {
    if (_payloadAsBytes != null) {
        return _payloadAsBytes;
    }
    return _payloadAsText;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RequestPayload.toString()","Method","No Comment","@Override
public String toString() {
    if (_payloadAsBytes != null) {
        try {
            return new String(_payloadAsBytes, _charset);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
    return _payloadAsText.toString();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RequestPayload.<init>(byte[],String)","Constructor","No Comment","public RequestPayload(byte[] bytes, String charset) {
    if (bytes == null) {
        throw new IllegalArgumentException();
    }
    _payloadAsBytes = bytes;
    _charset = (charset == null || charset.isEmpty()) ? ""UTF-8"" : charset;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RequestPayload.<init>(byte[],String).bytes","Parameter_1","Belong to com.fasterxml.jackson.core.util.RequestPayload.<init>(byte[],String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RequestPayload.<init>(byte[],String).charset","Parameter_2","Belong to com.fasterxml.jackson.core.util.RequestPayload.<init>(byte[],String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RequestPayload.<init>(CharSequence)","Constructor","No Comment","public RequestPayload(CharSequence str) {
    if (str == null) {
        throw new IllegalArgumentException();
    }
    _payloadAsText = str;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.RequestPayload.<init>(CharSequence).str","Parameter_1","Belong to com.fasterxml.jackson.core.util.RequestPayload.<init>(CharSequence)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ReadConstrainedTextBuffer","Class","No Comment","Class do not obtain Source Code","No return type","public , final ","com.fasterxml.jackson.core.util.TextBuffer",""
"com.fasterxml.jackson.core.util.ReadConstrainedTextBuffer._streamReadConstraints","Field","No Comment","private final StreamReadConstraints _streamReadConstraints;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ReadConstrainedTextBuffer.validateStringLength(int)","Method","* {@inheritDoc}","@Override
protected void validateStringLength(int length) throws StreamConstraintsException {
    _streamReadConstraints.validateStringLength(length);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ReadConstrainedTextBuffer.validateStringLength(int).length","Parameter_1","Belong to com.fasterxml.jackson.core.util.ReadConstrainedTextBuffer.validateStringLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ReadConstrainedTextBuffer.<init>(StreamReadConstraints,BufferRecycler)","Constructor","No Comment","public ReadConstrainedTextBuffer(StreamReadConstraints streamReadConstraints, BufferRecycler bufferRecycler) {
    super(bufferRecycler);
    _streamReadConstraints = streamReadConstraints;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ReadConstrainedTextBuffer.<init>(StreamReadConstraints,BufferRecycler).streamReadConstraints","Parameter_1","Belong to com.fasterxml.jackson.core.util.ReadConstrainedTextBuffer.<init>(StreamReadConstraints,BufferRecycler)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ReadConstrainedTextBuffer.<init>(StreamReadConstraints,BufferRecycler).bufferRecycler","Parameter_2","Belong to com.fasterxml.jackson.core.util.ReadConstrainedTextBuffer.<init>(StreamReadConstraints,BufferRecycler)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.InternalJacksonUtil","Abstract Class","* Internal Use Only. Helper class used to contain some useful utility methods.
 *
 * @since 2.17.3 / 2.18.1","Abstract Class do not obtain Source Code","No return type","public , abstract ","",""
"com.fasterxml.jackson.core.util.InternalJacksonUtil.addOverflowSafe(int,int)","Method","* Internal Use Only.
     * <p>
     * Method that will add two non-negative integers, and if result overflows, return
     * {@link Integer#MAX_VALUE}. For performance reasons, does NOT check for
     * the result being less than {@link Integer#MIN_VALUE}, nor whether arguments
     * are actually non-negative.
     * This is usually used to implement overflow-safe bounds checking.","public static int addOverflowSafe(final int base, final int length) {
    int result = base + length;
    if (result < 0) {
        return Integer.MAX_VALUE;
    }
    return result;
}","int","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.InternalJacksonUtil.addOverflowSafe(int,int).base","Parameter_1","Belong to com.fasterxml.jackson.core.util.InternalJacksonUtil.addOverflowSafe(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.InternalJacksonUtil.addOverflowSafe(int,int).length","Parameter_2","Belong to com.fasterxml.jackson.core.util.InternalJacksonUtil.addOverflowSafe(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecyclers","Class","* Helper entity used to control access to simple buffer recycling scheme used for
 * some encoding, decoding tasks.
 *
 * @see BufferRecycler
 *
 * @since 2.9.2
 *
 * @deprecated Since 2.16 recycling aspects are handled via {@link RecyclerPool}.","Class do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.util.BufferRecyclers.SYSTEM_PROPERTY_TRACK_REUSABLE_BUFFERS","Field","* System property that is checked to see if recycled buffers (see {@link BufferRecycler})
     * should be tracked, for purpose of forcing release of all such buffers, typically
     * during major garbage-collection.
     *
     * @since 2.9.6","public final static String SYSTEM_PROPERTY_TRACK_REUSABLE_BUFFERS = ""com.fasterxml.jackson.core.util.BufferRecyclers.trackReusableBuffers"";","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecyclers._bufferRecyclerTracker","Field","* Flag that indicates whether {@link BufferRecycler} instances should be tracked.","private final static ThreadLocalBufferManager _bufferRecyclerTracker;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecyclers._recyclerRef","Field","* This <code>ThreadLocal</code> contains a {@link java.lang.ref.SoftReference}
     * to a {@link BufferRecycler} used to provide a low-cost
     * buffer recycling between reader and writer instances.","final protected static ThreadLocal<SoftReference<BufferRecycler>> _recyclerRef = new ThreadLocal<>();","No return type","final , protected , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecyclers.getBufferRecycler()","Method","* Main accessor to call for accessing possibly recycled {@link BufferRecycler} instance.
     *
     * @return {@link BufferRecycler} to use
     *
     * @deprecated Since 2.16 should use {@link RecyclerPool} abstraction instead
     *   of calling static methods of this class","// since 2.16
@Deprecated
public static BufferRecycler getBufferRecycler() {
    SoftReference<BufferRecycler> ref = _recyclerRef.get();
    BufferRecycler br = (ref == null) ? null : ref.get();
    if (br == null) {
        br = new BufferRecycler();
        if (_bufferRecyclerTracker != null) {
            ref = _bufferRecyclerTracker.wrapAndTrack(br);
        } else {
            ref = new SoftReference<>(br);
        }
        _recyclerRef.set(ref);
    }
    return br;
}","BufferRecycler","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecyclers.releaseBuffers()","Method","* Specialized method that will release all recycled {@link BufferRecycler} if
     * (and only if) recycler tracking has been enabled
     * (see {@link #SYSTEM_PROPERTY_TRACK_REUSABLE_BUFFERS}).
     * This method is usually called on shutdown of the container like Application Server
     * to ensure that no references are reachable via {@link ThreadLocal}s as this may cause
     * unintentional retention of sizable amounts of memory. It may also be called regularly
     * if GC for some reason does not clear up {@link SoftReference}s aggressively enough.
     *
     * @return Number of buffers released, if tracking enabled (zero or more); -1 if tracking not enabled.
     *
     * @since 2.9.6","public static int releaseBuffers() {
    if (_bufferRecyclerTracker != null) {
        return _bufferRecyclerTracker.releaseBuffers();
    }
    return -1;
}","int","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecyclers.getJsonStringEncoder()","Method","* Not to be used any more.
     *
     * @return {@code JsonStringEncoder} instance to use.
     *
     * @deprecated Since 2.10 call {@link JsonStringEncoder#getInstance()} instead.
     *  NOTE: was accidentally removed but reintroduced as deprecated in 2.12.5,
     *  to be removed from 3.0)","@Deprecated
public static JsonStringEncoder getJsonStringEncoder() {
    return JsonStringEncoder.getInstance();
}","JsonStringEncoder","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecyclers.encodeAsUTF8(String)","Method","* Not to be used any more.
     *
     * @param text String to encode
     * @return String encoded as UTF-8 bytes.
     *
     * @deprecated Since 2.10 call {@link JsonStringEncoder#getInstance()} and then
     * {@code encodeAsUTF8()}) instead.
     *  NOTE: was accidentally removed but reintroduced as deprecated in 2.12.5,
     *  to be removed from 3.0)","@Deprecated
public static byte[] encodeAsUTF8(String text) {
    return JsonStringEncoder.getInstance().encodeAsUTF8(text);
}","byte[]","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecyclers.encodeAsUTF8(String).text","Parameter_1","Belong to com.fasterxml.jackson.core.util.BufferRecyclers.encodeAsUTF8(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecyclers.quoteAsJsonText(String)","Method","* Not to be used any more: 
     *
     * @param rawText String to quote
     *
     * @return Quoted text as {@code char[]}
     *
     * @deprecated Since 2.10 call {@link JsonStringEncoder#getInstance()} and then
     * {@code quoteAsString()}) instead.
     *  NOTE: was accidentally removed but reintroduced as deprecated in 2.12.5,
     *  to be removed from 3.0)","@Deprecated
public static char[] quoteAsJsonText(String rawText) {
    return JsonStringEncoder.getInstance().quoteAsString(rawText);
}","char[]","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecyclers.quoteAsJsonText(String).rawText","Parameter_1","Belong to com.fasterxml.jackson.core.util.BufferRecyclers.quoteAsJsonText(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecyclers.quoteAsJsonText(CharSequence,StringBuilder)","Method","* Not to be used any more.
     *
     * @param input Textual content to quote
     * @param output Builder to append quoted content
     *
     * @deprecated Since 2.10 call {@link JsonStringEncoder#getInstance()} and then
     * {@code quoteAsString()}) instead.
     *  NOTE: was accidentally removed but reintroduced as deprecated in 2.12.5,
     *  to be removed from 3.0)","@Deprecated
public static void quoteAsJsonText(CharSequence input, StringBuilder output) {
    JsonStringEncoder.getInstance().quoteAsString(input, output);
}","void","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecyclers.quoteAsJsonText(CharSequence,StringBuilder).input","Parameter_1","Belong to com.fasterxml.jackson.core.util.BufferRecyclers.quoteAsJsonText(CharSequence,StringBuilder)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecyclers.quoteAsJsonText(CharSequence,StringBuilder).output","Parameter_2","Belong to com.fasterxml.jackson.core.util.BufferRecyclers.quoteAsJsonText(CharSequence,StringBuilder)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecyclers.quoteAsJsonUTF8(String)","Method","* Not to be used any more.
     *
     * @param rawText String to quote
     *
     * @return Quoted text as {@code byte[]}
     *
     * @deprecated Since 2.10 call {@link JsonStringEncoder#getInstance()} (and then
     * {@code quoteAsUTF8()}) instead.
     *  NOTE: was accidentally removed but reintroduced as deprecated in 2.12.5,
     *  to be removed from 3.0)","@Deprecated
public static byte[] quoteAsJsonUTF8(String rawText) {
    return JsonStringEncoder.getInstance().quoteAsUTF8(rawText);
}","byte[]","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecyclers.quoteAsJsonUTF8(String).rawText","Parameter_1","Belong to com.fasterxml.jackson.core.util.BufferRecyclers.quoteAsJsonUTF8(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDecorator","Interface","* Simple interface to allow adding decorators around {@link JsonGenerator}s.
 *
 * @since 2.16","Interface do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.util.JsonGeneratorDecorator.decorate(JsonFactory,JsonGenerator)","Abstract Method","* Allow to decorate {@link JsonGenerator} instances returned by {@link JsonFactory}.
     * 
     * @since 2.16
     * @param factory The factory which was used to build the original generator
     * @param generator The generator to decorate. This might already be a decorated instance, not the original.
     * @return decorated generator","JsonGenerator decorate(JsonFactory factory, JsonGenerator generator);","JsonGenerator","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDecorator.decorate(JsonFactory,JsonGenerator).factory","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDecorator.decorate(JsonFactory,JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDecorator.decorate(JsonFactory,JsonGenerator).generator","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDecorator.decorate(JsonFactory,JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence","Class","* Helper class that can be used to sequence multiple physical
 * {@link JsonParser}s to create a single logical sequence of
 * tokens, as a single {@link JsonParser}.
 *<p>
 * Fairly simple use of {@link JsonParserDelegate}: only need
 * to override {@link #nextToken} to handle transition","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.util.JsonParserDelegate",""
"com.fasterxml.jackson.core.util.JsonParserSequence._parsers","Field","* Parsers other than the first one (which is initially assigned
     * as delegate)","protected final JsonParser[] _parsers;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence._checkForExistingToken","Field","* Configuration that determines whether state of parsers is first verified
     * to see if parser already points to a token (that is,
     * {@link JsonParser#hasCurrentToken()} returns <code>true</code>), and if so
     * that token is first return before {@link JsonParser#nextToken} is called.
     * If enabled, this check is made; if disabled, no check is made and
     * {@link JsonParser#nextToken} is always called for all parsers.
     *<p>
     * Default setting is <code>false</code> (for backwards-compatibility)
     * so that possible existing token is not considered for parsers.
     *
     * @since 2.8","protected final boolean _checkForExistingToken;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence._nextParserIndex","Field","* Index of the next parser in {@link #_parsers}.","protected int _nextParserIndex;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence._hasToken","Field","* Flag used to indicate that `JsonParser.nextToken()` should not be called,
     * due to parser already pointing to a token.
     *
     * @since 2.8","protected boolean _hasToken;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence.createFlattened(boolean,JsonParser,JsonParser)","Method","* Method that will construct a sequence (possibly a sequence) that
     * contains all given sub-parsers.
     * All parsers given are checked to see if they are sequences: and
     * if so, they will be ""flattened"", that is, contained parsers are
     * directly added in a new sequence instead of adding sequences
     * within sequences. This is done to minimize delegation depth,
     * ideally only having just a single level of delegation.
     *
     * @param checkForExistingToken Flag passed to be assigned as
     *   {@link #_checkForExistingToken} for resulting sequence
     * @param first First parser to traverse
     * @param second Second parser to traverse
     *
     * @return Sequence instance constructed","public static JsonParserSequence createFlattened(boolean checkForExistingToken, JsonParser first, JsonParser second) {
    if (!(first instanceof JsonParserSequence || second instanceof JsonParserSequence)) {
        return new JsonParserSequence(checkForExistingToken, new JsonParser[] { first, second });
    }
    ArrayList<JsonParser> p = new ArrayList<>();
    if (first instanceof JsonParserSequence) {
        ((JsonParserSequence) first).addFlattenedActiveParsers(p);
    } else {
        p.add(first);
    }
    if (second instanceof JsonParserSequence) {
        ((JsonParserSequence) second).addFlattenedActiveParsers(p);
    } else {
        p.add(second);
    }
    return new JsonParserSequence(checkForExistingToken, p.toArray(new JsonParser[p.size()]));
}","JsonParserSequence","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence.createFlattened(boolean,JsonParser,JsonParser).checkForExistingToken","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserSequence.createFlattened(boolean,JsonParser,JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence.createFlattened(boolean,JsonParser,JsonParser).first","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonParserSequence.createFlattened(boolean,JsonParser,JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence.createFlattened(boolean,JsonParser,JsonParser).second","Parameter_3","Belong to com.fasterxml.jackson.core.util.JsonParserSequence.createFlattened(boolean,JsonParser,JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence.createFlattened(JsonParser,JsonParser)","Method","No Comment","// since 2.8
@Deprecated
public static JsonParserSequence createFlattened(JsonParser first, JsonParser second) {
    return createFlattened(false, first, second);
}","JsonParserSequence","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence.createFlattened(JsonParser,JsonParser).first","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserSequence.createFlattened(JsonParser,JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence.createFlattened(JsonParser,JsonParser).second","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonParserSequence.createFlattened(JsonParser,JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence.addFlattenedActiveParsers(List)","Method","No Comment","@SuppressWarnings(""resource"")
protected void addFlattenedActiveParsers(List<JsonParser> listToAddIn) {
    for (int i = _nextParserIndex - 1, len = _parsers.length; i < len; ++i) {
        JsonParser p = _parsers[i];
        if (p instanceof JsonParserSequence) {
            ((JsonParserSequence) p).addFlattenedActiveParsers(listToAddIn);
        } else {
            listToAddIn.add(p);
        }
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence.addFlattenedActiveParsers(List).listToAddIn","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserSequence.addFlattenedActiveParsers(List)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence.close()","Method","No Comment","@Override
public void close() throws IOException {
    do {
        delegate.close();
    } while (switchToNext());
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence.nextToken()","Method","No Comment","@Override
public JsonToken nextToken() throws IOException {
    if (delegate == null) {
        return null;
    }
    if (_hasToken) {
        _hasToken = false;
        return delegate.currentToken();
    }
    JsonToken t = delegate.nextToken();
    if (t == null) {
        return switchAndReturnNext();
    }
    return t;
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence.skipChildren()","Method","* Need to override, re-implement similar to how method defined in
     * {@link com.fasterxml.jackson.core.base.ParserMinimalBase}, to keep
     * state correct here.","@Override
public JsonParser skipChildren() throws IOException {
    if ((delegate.currentToken() != JsonToken.START_OBJECT) && (delegate.currentToken() != JsonToken.START_ARRAY)) {
        return this;
    }
    int open = 1;
    // Since proper matching of start/end markers is handled
    // by nextToken(), we'll just count nesting levels here
    while (true) {
        JsonToken t = nextToken();
        if (t == null) {
            // not ideal but for now, just return
            return this;
        }
        if (t.isStructStart()) {
            ++open;
        } else if (t.isStructEnd()) {
            if (--open == 0) {
                return this;
            }
        }
    }
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence.containedParsersCount()","Method","* Method that is most useful for debugging or testing;
     * returns actual number of underlying parsers sequence
     * was constructed with (nor just ones remaining active)
     *
     * @return Number of actual underlying parsers this sequence has","public int containedParsersCount() {
    return _parsers.length;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence.switchToNext()","Method","* Method that will switch active delegate parser from the current one
     * to the next parser in sequence, if there is another parser left:
     * if so, the next parser will become the active delegate parser.
     *
     * @return True if switch succeeded; false otherwise
     *
     * @since 2.8","protected boolean switchToNext() {
    if (_nextParserIndex < _parsers.length) {
        delegate = _parsers[_nextParserIndex++];
        return true;
    }
    return false;
}","boolean","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence.switchAndReturnNext()","Method","No Comment","protected JsonToken switchAndReturnNext() throws IOException {
    while (_nextParserIndex < _parsers.length) {
        delegate = _parsers[_nextParserIndex++];
        if (_checkForExistingToken && delegate.hasCurrentToken()) {
            return delegate.getCurrentToken();
        }
        JsonToken t = delegate.nextToken();
        if (t != null) {
            return t;
        }
    }
    return null;
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence.<init>(JsonParser[])","Constructor","No Comment","// since 2.8
@Deprecated
protected JsonParserSequence(JsonParser[] parsers) {
    this(false, parsers);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence.<init>(JsonParser[]).parsers","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserSequence.<init>(JsonParser[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence.<init>(boolean,JsonParser[])","Constructor","@since 2.8","protected JsonParserSequence(boolean checkForExistingToken, JsonParser[] parsers) {
    super(parsers[0]);
    _checkForExistingToken = checkForExistingToken;
    _hasToken = checkForExistingToken && delegate.hasCurrentToken();
    _parsers = parsers;
    _nextParserIndex = 1;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence.<init>(boolean,JsonParser[]).checkForExistingToken","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserSequence.<init>(boolean,JsonParser[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserSequence.<init>(boolean,JsonParser[]).parsers","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonParserSequence.<init>(boolean,JsonParser[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate","Class","No Comment","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.JsonGenerator",""
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegate","Field","* Delegate object that method calls are delegated to.","protected JsonGenerator delegate;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegateCopyMethods","Field","* Whether copy methods
     * ({@link #copyCurrentEvent}, {@link #copyCurrentStructure}, {@link #writeTree} and {@link #writeObject})
     * are to be called (true), or handled by this object (false).","protected boolean delegateCopyMethods;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCodec()","Method","No Comment","@Override
public ObjectCodec getCodec() {
    return delegate.getCodec();
}","ObjectCodec","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCodec(ObjectCodec)","Method","No Comment","@Override
public JsonGenerator setCodec(ObjectCodec oc) {
    delegate.setCodec(oc);
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCodec(ObjectCodec).oc","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCodec(ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setSchema(FormatSchema)","Method","No Comment","@Override
public void setSchema(FormatSchema schema) {
    delegate.setSchema(schema);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setSchema(FormatSchema).schema","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setSchema(FormatSchema)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getSchema()","Method","No Comment","@Override
public FormatSchema getSchema() {
    return delegate.getSchema();
}","FormatSchema","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.version()","Method","No Comment","@Override
public Version version() {
    return delegate.version();
}","Version","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputTarget()","Method","No Comment","@Override
public Object getOutputTarget() {
    return delegate.getOutputTarget();
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputBuffered()","Method","No Comment","@Override
public int getOutputBuffered() {
    return delegate.getOutputBuffered();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.assignCurrentValue(Object)","Method","No Comment","@Override
public void assignCurrentValue(Object v) {
    delegate.assignCurrentValue(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.assignCurrentValue(Object).v","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.assignCurrentValue(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.currentValue()","Method","No Comment","@Override
public Object currentValue() {
    return delegate.currentValue();
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCurrentValue(Object)","Method","No Comment","// since 2.17
@Deprecated
@Override
public void setCurrentValue(Object v) {
    delegate.setCurrentValue(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCurrentValue(Object).v","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCurrentValue(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCurrentValue()","Method","No Comment","// since 2.17
@Deprecated
@Override
public Object getCurrentValue() {
    return delegate.getCurrentValue();
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canUseSchema(FormatSchema)","Method","No Comment","@Override
public boolean canUseSchema(FormatSchema schema) {
    return delegate.canUseSchema(schema);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canUseSchema(FormatSchema).schema","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canUseSchema(FormatSchema)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteTypeId()","Method","No Comment","@Override
public boolean canWriteTypeId() {
    return delegate.canWriteTypeId();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteObjectId()","Method","No Comment","@Override
public boolean canWriteObjectId() {
    return delegate.canWriteObjectId();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteBinaryNatively()","Method","No Comment","@Override
public boolean canWriteBinaryNatively() {
    return delegate.canWriteBinaryNatively();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canOmitFields()","Method","No Comment","@Override
public boolean canOmitFields() {
    return delegate.canOmitFields();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.canWriteFormattedNumbers()","Method","No Comment","@Override
public boolean canWriteFormattedNumbers() {
    return delegate.canWriteFormattedNumbers();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getWriteCapabilities()","Method","No Comment","@Override
public JacksonFeatureSet<StreamWriteCapability> getWriteCapabilities() {
    return delegate.getWriteCapabilities();
}","JacksonFeatureSet","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.enable(Feature)","Method","No Comment","@Override
public JsonGenerator enable(Feature f) {
    delegate.enable(f);
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.enable(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.enable(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.disable(Feature)","Method","No Comment","@Override
public JsonGenerator disable(Feature f) {
    delegate.disable(f);
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.disable(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.disable(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isEnabled(Feature)","Method","No Comment","@Override
public boolean isEnabled(Feature f) {
    return delegate.isEnabled(f);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isEnabled(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isEnabled(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getFeatureMask()","Method","No Comment","@Override
public int getFeatureMask() {
    return delegate.getFeatureMask();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setFeatureMask(int)","Method","No Comment","@Override
@Deprecated
public JsonGenerator setFeatureMask(int mask) {
    delegate.setFeatureMask(mask);
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setFeatureMask(int).mask","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setFeatureMask(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideStdFeatures(int,int)","Method","No Comment","@Override
public JsonGenerator overrideStdFeatures(int values, int mask) {
    delegate.overrideStdFeatures(values, mask);
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideStdFeatures(int,int).values","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideStdFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideStdFeatures(int,int).mask","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideStdFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideFormatFeatures(int,int)","Method","No Comment","@Override
public JsonGenerator overrideFormatFeatures(int values, int mask) {
    delegate.overrideFormatFeatures(values, mask);
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideFormatFeatures(int,int).values","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideFormatFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideFormatFeatures(int,int).mask","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.overrideFormatFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setPrettyPrinter(PrettyPrinter)","Method","No Comment","@Override
public JsonGenerator setPrettyPrinter(PrettyPrinter pp) {
    delegate.setPrettyPrinter(pp);
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setPrettyPrinter(PrettyPrinter).pp","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setPrettyPrinter(PrettyPrinter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getPrettyPrinter()","Method","No Comment","@Override
public PrettyPrinter getPrettyPrinter() {
    return delegate.getPrettyPrinter();
}","PrettyPrinter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.useDefaultPrettyPrinter()","Method","No Comment","@Override
public JsonGenerator useDefaultPrettyPrinter() {
    delegate.useDefaultPrettyPrinter();
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setHighestNonEscapedChar(int)","Method","No Comment","@Override
public JsonGenerator setHighestNonEscapedChar(int charCode) {
    delegate.setHighestNonEscapedChar(charCode);
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setHighestNonEscapedChar(int).charCode","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setHighestNonEscapedChar(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getHighestEscapedChar()","Method","No Comment","@Override
public int getHighestEscapedChar() {
    return delegate.getHighestEscapedChar();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getCharacterEscapes()","Method","No Comment","@Override
public CharacterEscapes getCharacterEscapes() {
    return delegate.getCharacterEscapes();
}","CharacterEscapes","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCharacterEscapes(CharacterEscapes)","Method","No Comment","@Override
public JsonGenerator setCharacterEscapes(CharacterEscapes esc) {
    delegate.setCharacterEscapes(esc);
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCharacterEscapes(CharacterEscapes).esc","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setCharacterEscapes(CharacterEscapes)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setRootValueSeparator(SerializableString)","Method","No Comment","@Override
public JsonGenerator setRootValueSeparator(SerializableString sep) {
    delegate.setRootValueSeparator(sep);
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setRootValueSeparator(SerializableString).sep","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.setRootValueSeparator(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.streamWriteConstraints()","Method","No Comment","@Override
public StreamWriteConstraints streamWriteConstraints() {
    return delegate.streamWriteConstraints();
}","StreamWriteConstraints","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray()","Method","No Comment","@Override
public void writeStartArray() throws IOException {
    delegate.writeStartArray();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(int)","Method","No Comment","@SuppressWarnings(""deprecation"")
@Override
public void writeStartArray(int size) throws IOException {
    delegate.writeStartArray(size);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(int).size","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(Object)","Method","No Comment","@Override
public void writeStartArray(Object forValue) throws IOException {
    delegate.writeStartArray(forValue);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(Object).forValue","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(Object,int)","Method","No Comment","@Override
public void writeStartArray(Object forValue, int size) throws IOException {
    delegate.writeStartArray(forValue, size);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(Object,int).forValue","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(Object,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(Object,int).size","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartArray(Object,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndArray()","Method","No Comment","@Override
public void writeEndArray() throws IOException {
    delegate.writeEndArray();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject()","Method","No Comment","@Override
public void writeStartObject() throws IOException {
    delegate.writeStartObject();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(Object)","Method","No Comment","@Override
public void writeStartObject(Object forValue) throws IOException {
    delegate.writeStartObject(forValue);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(Object).forValue","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(Object,int)","Method","No Comment","@Override
public void writeStartObject(Object forValue, int size) throws IOException {
    delegate.writeStartObject(forValue, size);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(Object,int).forValue","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(Object,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(Object,int).size","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeStartObject(Object,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEndObject()","Method","No Comment","@Override
public void writeEndObject() throws IOException {
    delegate.writeEndObject();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(String)","Method","No Comment","@Override
public void writeFieldName(String name) throws IOException {
    delegate.writeFieldName(name);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(SerializableString)","Method","No Comment","@Override
public void writeFieldName(SerializableString name) throws IOException {
    delegate.writeFieldName(name);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(SerializableString).name","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldName(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldId(long)","Method","No Comment","@Override
public void writeFieldId(long id) throws IOException {
    delegate.writeFieldId(id);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldId(long).id","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeFieldId(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(int[],int,int)","Method","No Comment","@Override
public void writeArray(int[] array, int offset, int length) throws IOException {
    delegate.writeArray(array, offset, length);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(int[],int,int).array","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(int[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(int[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(long[],int,int)","Method","No Comment","@Override
public void writeArray(long[] array, int offset, int length) throws IOException {
    delegate.writeArray(array, offset, length);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(long[],int,int).array","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(long[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(long[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(long[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(long[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(long[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(double[],int,int)","Method","No Comment","@Override
public void writeArray(double[] array, int offset, int length) throws IOException {
    delegate.writeArray(array, offset, length);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(double[],int,int).array","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(double[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(double[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(double[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(double[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(double[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(String[],int,int)","Method","No Comment","@Override
public void writeArray(String[] array, int offset, int length) throws IOException {
    delegate.writeArray(array, offset, length);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(String[],int,int).array","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(String[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(String[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(String[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(String[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeArray(String[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(String)","Method","No Comment","@Override
public void writeString(String text) throws IOException {
    delegate.writeString(text);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(String).text","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(Reader,int)","Method","No Comment","@Override
public void writeString(Reader reader, int len) throws IOException {
    delegate.writeString(reader, len);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(Reader,int).reader","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(Reader,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(Reader,int).len","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(Reader,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(char[],int,int)","Method","No Comment","@Override
public void writeString(char[] text, int offset, int len) throws IOException {
    delegate.writeString(text, offset, len);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(char[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(SerializableString)","Method","No Comment","@Override
public void writeString(SerializableString text) throws IOException {
    delegate.writeString(text);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(SerializableString).text","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeString(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawUTF8String(byte[],int,int)","Method","No Comment","@Override
public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException {
    delegate.writeRawUTF8String(text, offset, length);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawUTF8String(byte[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawUTF8String(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawUTF8String(byte[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeUTF8String(byte[],int,int)","Method","No Comment","@Override
public void writeUTF8String(byte[] text, int offset, int length) throws IOException {
    delegate.writeUTF8String(text, offset, length);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeUTF8String(byte[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeUTF8String(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeUTF8String(byte[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(String)","Method","No Comment","@Override
public void writeRaw(String text) throws IOException {
    delegate.writeRaw(text);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(String).text","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(String,int,int)","Method","No Comment","@Override
public void writeRaw(String text, int offset, int len) throws IOException {
    delegate.writeRaw(text, offset, len);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(String,int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(String,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(String,int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(SerializableString)","Method","No Comment","@Override
public void writeRaw(SerializableString raw) throws IOException {
    delegate.writeRaw(raw);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(SerializableString).raw","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char[],int,int)","Method","No Comment","@Override
public void writeRaw(char[] text, int offset, int len) throws IOException {
    delegate.writeRaw(text, offset, len);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char)","Method","No Comment","@Override
public void writeRaw(char c) throws IOException {
    delegate.writeRaw(c);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char).c","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRaw(char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(String)","Method","No Comment","@Override
public void writeRawValue(String text) throws IOException {
    delegate.writeRawValue(text);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(String).text","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(String,int,int)","Method","No Comment","@Override
public void writeRawValue(String text, int offset, int len) throws IOException {
    delegate.writeRawValue(text, offset, len);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(String,int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(String,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(String,int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(char[],int,int)","Method","No Comment","@Override
public void writeRawValue(char[] text, int offset, int len) throws IOException {
    delegate.writeRawValue(text, offset, len);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(char[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeRawValue(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(Base64Variant,byte[],int,int)","Method","No Comment","@Override
public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException {
    delegate.writeBinary(b64variant, data, offset, len);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(Base64Variant,byte[],int,int).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(Base64Variant,byte[],int,int).data","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(Base64Variant,byte[],int,int).offset","Parameter_3","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(Base64Variant,byte[],int,int).len","Parameter_4","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(Base64Variant,InputStream,int)","Method","No Comment","@Override
public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException {
    return delegate.writeBinary(b64variant, data, dataLength);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(Base64Variant,InputStream,int).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(Base64Variant,InputStream,int).data","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(Base64Variant,InputStream,int).dataLength","Parameter_3","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(short)","Method","No Comment","@Override
public void writeNumber(short v) throws IOException {
    delegate.writeNumber(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(short).v","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(short)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(int)","Method","No Comment","@Override
public void writeNumber(int v) throws IOException {
    delegate.writeNumber(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(int).v","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(long)","Method","No Comment","@Override
public void writeNumber(long v) throws IOException {
    delegate.writeNumber(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(long).v","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(BigInteger)","Method","No Comment","@Override
public void writeNumber(BigInteger v) throws IOException {
    delegate.writeNumber(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(BigInteger).v","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(BigInteger)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(double)","Method","No Comment","@Override
public void writeNumber(double v) throws IOException {
    delegate.writeNumber(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(double).v","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(float)","Method","No Comment","@Override
public void writeNumber(float v) throws IOException {
    delegate.writeNumber(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(float).v","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(BigDecimal)","Method","No Comment","@Override
public void writeNumber(BigDecimal v) throws IOException {
    delegate.writeNumber(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(BigDecimal).v","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(BigDecimal)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(String)","Method","No Comment","@Override
public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException {
    delegate.writeNumber(encodedValue);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(String).encodedValue","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(char[],int,int)","Method","No Comment","@Override
public void writeNumber(char[] encodedValueBuffer, int offset, int length) throws IOException, UnsupportedOperationException {
    delegate.writeNumber(encodedValueBuffer, offset, length);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(char[],int,int).encodedValueBuffer","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(char[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNumber(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBoolean(boolean)","Method","No Comment","@Override
public void writeBoolean(boolean state) throws IOException {
    delegate.writeBoolean(state);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBoolean(boolean).state","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeBoolean(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeNull()","Method","No Comment","@Override
public void writeNull() throws IOException {
    delegate.writeNull();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeOmittedField(String)","Method","No Comment","@Override
public void writeOmittedField(String fieldName) throws IOException {
    delegate.writeOmittedField(fieldName);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeOmittedField(String).fieldName","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeOmittedField(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectId(Object)","Method","No Comment","@Override
public void writeObjectId(Object id) throws IOException {
    delegate.writeObjectId(id);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectId(Object).id","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectId(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectRef(Object)","Method","No Comment","@Override
public void writeObjectRef(Object id) throws IOException {
    delegate.writeObjectRef(id);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectRef(Object).id","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObjectRef(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTypeId(Object)","Method","No Comment","@Override
public void writeTypeId(Object id) throws IOException {
    delegate.writeTypeId(id);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTypeId(Object).id","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTypeId(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEmbeddedObject(Object)","Method","No Comment","@Override
public void writeEmbeddedObject(Object object) throws IOException {
    delegate.writeEmbeddedObject(object);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEmbeddedObject(Object).object","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeEmbeddedObject(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writePOJO(Object)","Method","No Comment","// since 2.13
@Override
public void writePOJO(Object pojo) throws IOException {
    writeObject(pojo);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writePOJO(Object).pojo","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writePOJO(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObject(Object)","Method","No Comment","@Override
public void writeObject(Object pojo) throws IOException {
    if (delegateCopyMethods) {
        delegate.writeObject(pojo);
        return;
    }
    if (pojo == null) {
        writeNull();
    } else {
        ObjectCodec c = getCodec();
        if (c != null) {
            c.writeValue(this, pojo);
            return;
        }
        _writeSimpleObject(pojo);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObject(Object).pojo","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeObject(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTree(TreeNode)","Method","No Comment","@Override
public void writeTree(TreeNode tree) throws IOException {
    if (delegateCopyMethods) {
        delegate.writeTree(tree);
        return;
    }
    // As with 'writeObject()', we are not check if write would work
    if (tree == null) {
        writeNull();
    } else {
        ObjectCodec c = getCodec();
        if (c == null) {
            throw new IllegalStateException(""No ObjectCodec defined"");
        }
        c.writeTree(this, tree);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTree(TreeNode).tree","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.writeTree(TreeNode)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentEvent(JsonParser)","Method","No Comment","@Override
public void copyCurrentEvent(JsonParser p) throws IOException {
    if (delegateCopyMethods)
        delegate.copyCurrentEvent(p);
    else
        super.copyCurrentEvent(p);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentEvent(JsonParser).p","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentEvent(JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentStructure(JsonParser)","Method","No Comment","@Override
public void copyCurrentStructure(JsonParser p) throws IOException {
    if (delegateCopyMethods)
        delegate.copyCurrentStructure(p);
    else
        super.copyCurrentStructure(p);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentStructure(JsonParser).p","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.copyCurrentStructure(JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getOutputContext()","Method","No Comment","@Override
public JsonStreamContext getOutputContext() {
    return delegate.getOutputContext();
}","JsonStreamContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.flush()","Method","No Comment","@Override
public void flush() throws IOException {
    delegate.flush();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.close()","Method","No Comment","@Override
public void close() throws IOException {
    delegate.close();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.isClosed()","Method","No Comment","@Override
public boolean isClosed() {
    return delegate.isClosed();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.getDelegate()","Method","No Comment","// since 2.11
@Deprecated
public JsonGenerator getDelegate() {
    return delegate;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegate()","Method","* @return Underlying generator that calls are delegated to
     *
     * @since 2.11","public JsonGenerator delegate() {
    return delegate;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.<init>(JsonGenerator)","Constructor","No Comment","public JsonGeneratorDelegate(JsonGenerator d) {
    this(d, true);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.<init>(JsonGenerator).d","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.<init>(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.<init>(JsonGenerator,boolean)","Constructor","* @param d Underlying generator to delegate calls to
     * @param delegateCopyMethods Flag assigned to <code>delagateCopyMethod</code>
     *   and which defines whether copy methods are handled locally (false), or
     *   delegated to configured","public JsonGeneratorDelegate(JsonGenerator d, boolean delegateCopyMethods) {
    delegate = d;
    this.delegateCopyMethods = delegateCopyMethods;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.<init>(JsonGenerator,boolean).d","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.<init>(JsonGenerator,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonGeneratorDelegate.<init>(JsonGenerator,boolean).delegateCopyMethods","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonGeneratorDelegate.<init>(JsonGenerator,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler","Class","* This is a small utility class, whose main functionality is to allow
 * simple reuse of raw byte/char buffers. It is usually allocated through
 * {@link RecyclerPool} (starting with 2.16): multiple pool
 * implementations exists.
 * The default pool implementation uses
 * {@code ThreadLocal} combined with {@code SoftReference}.
 * The end result is a low-overhead GC-cleanable recycling: hopefully
 * ideal for use by stream readers.
 *<p>
 * Rewritten in 2.10 to be thread-safe (see [jackson-core#479] for details),
 * to not rely on {@code ThreadLocal} access.<br>
 * Rewritten in 2.16 to work with {@link RecyclerPool} abstraction.","Class do not obtain Source Code","No return type","public ","","com.fasterxml.jackson.core.util.RecyclerPool.WithPool"
"com.fasterxml.jackson.core.util.BufferRecycler.BYTE_READ_IO_BUFFER","Field","* Buffer used for reading byte-based input.","public final static int BYTE_READ_IO_BUFFER = 0;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.BYTE_WRITE_ENCODING_BUFFER","Field","* Buffer used for temporarily storing encoded content; used
     * for example by UTF-8 encoding writer","public final static int BYTE_WRITE_ENCODING_BUFFER = 1;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.BYTE_WRITE_CONCAT_BUFFER","Field","* Buffer used for temporarily concatenating output; used for
     * example when requesting output as byte array.","public final static int BYTE_WRITE_CONCAT_BUFFER = 2;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.BYTE_BASE64_CODEC_BUFFER","Field","* Buffer used for concatenating binary data that is either being
     * encoded as base64 output, or decoded from base64 input.
     *
     * @since 2.1","public final static int BYTE_BASE64_CODEC_BUFFER = 3;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.CHAR_TOKEN_BUFFER","Field","* Buffer used as input buffer for tokenization for character-based parsers.","public final static int CHAR_TOKEN_BUFFER = 0;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.CHAR_CONCAT_BUFFER","Field","* Buffer used by generators; for byte-backed generators for buffering of
     * {@link String} values to output (before encoding into UTF-8),
     * and for char-backed generators as actual concatenation buffer.","public final static int CHAR_CONCAT_BUFFER = 1;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.CHAR_TEXT_BUFFER","Field","* Used through {@link TextBuffer}: directly by parsers (to concatenate
     * String values)
     *  and indirectly via
     * {@link com.fasterxml.jackson.core.io.SegmentedStringWriter}
     * when serializing (databind level {@code ObjectMapper} and
     * {@code ObjectWriter}). In both cases used as segments (and not for whole value),
     * but may result in retention of larger chunks for big content
     * (long text values during parsing; bigger output documents for generation).","public final static int CHAR_TEXT_BUFFER = 2;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.CHAR_NAME_COPY_BUFFER","Field","* For parsers, temporary buffer into which {@code char[]} for names is copied
     * when requested as such; for {@code WriterBasedGenerator} used for buffering
     * during {@code writeString(Reader)} operation (not commonly used).","public final static int CHAR_NAME_COPY_BUFFER = 3;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.BYTE_BUFFER_LENGTHS","Field","No Comment","private final static int[] BYTE_BUFFER_LENGTHS = new int[] { 8000, 8000, 2000, 2000 };","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.CHAR_BUFFER_LENGTHS","Field","No Comment","private final static int[] CHAR_BUFFER_LENGTHS = new int[] { 4000, 4000, 200, 200 };","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler._byteBuffers","Field","Note: changed from simple array in 2.10:","protected final AtomicReferenceArray<byte[]> _byteBuffers;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler._charBuffers","Field","Note: changed from simple array in 2.10:","protected final AtomicReferenceArray<char[]> _charBuffers;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler._pool","Field","No Comment","private RecyclerPool<BufferRecycler> _pool;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.isLinkedWithPool()","Method","* @return True if this recycler is linked to pool and may be released
     *   with {@link #releaseToPool()}; false if no linkage exists.
     *
     * @since 2.17","public boolean isLinkedWithPool() {
    return _pool != null;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.allocByteBuffer(int)","Method","* @param ix One of <code>READ_IO_BUFFER</code> constants.
     *
     * @return Buffer allocated (possibly recycled)","public final byte[] allocByteBuffer(int ix) {
    return allocByteBuffer(ix, 0);
}","byte[]","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.allocByteBuffer(int).ix","Parameter_1","Belong to com.fasterxml.jackson.core.util.BufferRecycler.allocByteBuffer(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.allocByteBuffer(int,int)","Method","No Comment","public byte[] allocByteBuffer(int ix, int minSize) {
    final int DEF_SIZE = byteBufferLength(ix);
    if (minSize < DEF_SIZE) {
        minSize = DEF_SIZE;
    }
    byte[] buffer = _byteBuffers.getAndSet(ix, null);
    if (buffer == null || buffer.length < minSize) {
        buffer = balloc(minSize);
    }
    return buffer;
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.allocByteBuffer(int,int).ix","Parameter_1","Belong to com.fasterxml.jackson.core.util.BufferRecycler.allocByteBuffer(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.allocByteBuffer(int,int).minSize","Parameter_2","Belong to com.fasterxml.jackson.core.util.BufferRecycler.allocByteBuffer(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.releaseByteBuffer(int,byte[])","Method","No Comment","public void releaseByteBuffer(int ix, byte[] buffer) {
    // 13-Jan-2024, tatu: [core#1186] Replace only if beneficial:
    byte[] oldBuffer = _byteBuffers.get(ix);
    if ((oldBuffer == null) || buffer.length > oldBuffer.length) {
        // Could use CAS, but should not really matter
        _byteBuffers.set(ix, buffer);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.releaseByteBuffer(int,byte[]).ix","Parameter_1","Belong to com.fasterxml.jackson.core.util.BufferRecycler.releaseByteBuffer(int,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.releaseByteBuffer(int,byte[]).buffer","Parameter_2","Belong to com.fasterxml.jackson.core.util.BufferRecycler.releaseByteBuffer(int,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.allocCharBuffer(int)","Method","No Comment","public final char[] allocCharBuffer(int ix) {
    return allocCharBuffer(ix, 0);
}","char[]","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.allocCharBuffer(int).ix","Parameter_1","Belong to com.fasterxml.jackson.core.util.BufferRecycler.allocCharBuffer(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.allocCharBuffer(int,int)","Method","No Comment","public char[] allocCharBuffer(int ix, int minSize) {
    final int DEF_SIZE = charBufferLength(ix);
    if (minSize < DEF_SIZE) {
        minSize = DEF_SIZE;
    }
    char[] buffer = _charBuffers.getAndSet(ix, null);
    if (buffer == null || buffer.length < minSize) {
        buffer = calloc(minSize);
    }
    return buffer;
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.allocCharBuffer(int,int).ix","Parameter_1","Belong to com.fasterxml.jackson.core.util.BufferRecycler.allocCharBuffer(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.allocCharBuffer(int,int).minSize","Parameter_2","Belong to com.fasterxml.jackson.core.util.BufferRecycler.allocCharBuffer(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.releaseCharBuffer(int,char[])","Method","No Comment","public void releaseCharBuffer(int ix, char[] buffer) {
    // 13-Jan-2024, tatu: [core#1186] Replace only if beneficial:
    char[] oldBuffer = _charBuffers.get(ix);
    if ((oldBuffer == null) || buffer.length > oldBuffer.length) {
        // Could use CAS, but should not really matter
        _charBuffers.set(ix, buffer);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.releaseCharBuffer(int,char[]).ix","Parameter_1","Belong to com.fasterxml.jackson.core.util.BufferRecycler.releaseCharBuffer(int,char[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.releaseCharBuffer(int,char[]).buffer","Parameter_2","Belong to com.fasterxml.jackson.core.util.BufferRecycler.releaseCharBuffer(int,char[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.byteBufferLength(int)","Method","No Comment","protected int byteBufferLength(int ix) {
    return BYTE_BUFFER_LENGTHS[ix];
}","int","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.byteBufferLength(int).ix","Parameter_1","Belong to com.fasterxml.jackson.core.util.BufferRecycler.byteBufferLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.charBufferLength(int)","Method","No Comment","protected int charBufferLength(int ix) {
    return CHAR_BUFFER_LENGTHS[ix];
}","int","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.charBufferLength(int).ix","Parameter_1","Belong to com.fasterxml.jackson.core.util.BufferRecycler.charBufferLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.balloc(int)","Method","No Comment","protected byte[] balloc(int size) {
    return new byte[size];
}","byte[]","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.balloc(int).size","Parameter_1","Belong to com.fasterxml.jackson.core.util.BufferRecycler.balloc(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.calloc(int)","Method","No Comment","protected char[] calloc(int size) {
    return new char[size];
}","char[]","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.calloc(int).size","Parameter_1","Belong to com.fasterxml.jackson.core.util.BufferRecycler.calloc(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.withPool(RecyclerPool)","Method","* Method called by owner of this recycler instance, to provide reference to
     * {@link RecyclerPool} into which instance is to be released (if any)
     *
     * @since 2.16","@Override
public BufferRecycler withPool(RecyclerPool<BufferRecycler> pool) {
    if (_pool != null) {
        throw new IllegalStateException(""BufferRecycler already linked to pool: "" + pool);
    }
    // assign to pool to which this BufferRecycler belongs in order to release it
    // to the same pool when the work will be completed
    _pool = Objects.requireNonNull(pool);
    return this;
}","BufferRecycler","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.withPool(RecyclerPool).pool","Parameter_1","Belong to com.fasterxml.jackson.core.util.BufferRecycler.withPool(RecyclerPool)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.releaseToPool()","Method","* Method called when owner of this recycler no longer wishes use it; this should
     * return it to pool passed via {@code withPool()} (if any).
     *
     * @since 2.16","@Override
public void releaseToPool() {
    if (_pool != null) {
        RecyclerPool<BufferRecycler> tmpPool = _pool;
        // nullify the reference to the pool in order to avoid the risk of releasing
        // the same BufferRecycler more than once, thus compromising the pool integrity
        _pool = null;
        tmpPool.releasePooled(this);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.<init>()","Constructor","* Default constructor used for creating instances of this default
     * implementation.","public BufferRecycler() {
    this(4, 4);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.<init>(int,int)","Constructor","* Alternate constructor to be used by sub-classes, to allow customization
     * of number of low-level buffers in use.
     *
     * @param bbCount Number of {@code byte[]} buffers to allocate
     * @param cbCount Number of {@code char[]} buffers to allocate
     *
     * @since 2.4","protected BufferRecycler(int bbCount, int cbCount) {
    _byteBuffers = new AtomicReferenceArray<>(bbCount);
    _charBuffers = new AtomicReferenceArray<>(cbCount);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.<init>(int,int).bbCount","Parameter_1","Belong to com.fasterxml.jackson.core.util.BufferRecycler.<init>(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.<init>(int,int).cbCount","Parameter_2","Belong to com.fasterxml.jackson.core.util.BufferRecycler.<init>(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler$Gettable","Interface","* Tag-on interface to allow various other types to expose {@link BufferRecycler}
     * they are constructed with.
     *
     * @since 2.17","Interface do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.util.BufferRecycler$Gettable.bufferRecycler()","Abstract Method","* @return Buffer recycler instance object is configured with, if any;
         *    whether this can be {@code null} depends on type of object","public BufferRecycler bufferRecycler();","BufferRecycler","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.BufferRecycler.Gettable","Interface","* Tag-on interface to allow various other types to expose {@link BufferRecycler}
     * they are constructed with.
     *
     * @since 2.17","Interface do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.util.BufferRecycler.Gettable.bufferRecycler()","Abstract Method","* @return Buffer recycler instance object is configured with, if any;
         *    whether this can be {@code null} depends on type of object","public BufferRecycler bufferRecycler();","BufferRecycler","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JacksonFeatureSet","Class","* Container similar to {@link java.util.EnumSet} meant for storing sets of
 * {@link JacksonFeature}s (usually {@link java.lang.Enum}s): main
 * difference being that these sets are immutable. Also only supports relatively
 * small sets of features: specifically, up to 31 features.
 *
 * @since 2.12","Class do not obtain Source Code","No return type","public , final ","","java.io.Serializable"
"com.fasterxml.jackson.core.util.JacksonFeatureSet.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JacksonFeatureSet._enabled","Field","No Comment","protected int _enabled;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JacksonFeatureSet.fromDefaults(JacksonFeature[])","Method","* ""Default"" factory which will calculate settings based on default-enabled
     * status of all features.
     *
     * @param <F> Self-reference type for convenience
     *
     * @param allFeatures Set of all features (enabled or disabled): usually from
     * {@code Enum.values()}
     *
     * @return Feature set instance constructed","public static <F extends JacksonFeature> JacksonFeatureSet<F> fromDefaults(F[] allFeatures) {
    // first sanity check
    if (allFeatures.length > 31) {
        final String desc = allFeatures[0].getClass().getName();
        throw new IllegalArgumentException(String.format(""Can not use type `%s` with JacksonFeatureSet: too many entries (%d > 31)"", desc, allFeatures.length));
    }
    int flags = 0;
    for (F f : allFeatures) {
        if (f.enabledByDefault()) {
            flags |= f.getMask();
        }
    }
    return new JacksonFeatureSet<>(flags);
}","JacksonFeatureSet","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JacksonFeatureSet.fromDefaults(JacksonFeature[]).allFeatures","Parameter_1","Belong to com.fasterxml.jackson.core.util.JacksonFeatureSet.fromDefaults(JacksonFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JacksonFeatureSet.fromBitmask(int)","Method","No Comment","public static <F extends JacksonFeature> JacksonFeatureSet<F> fromBitmask(int bitmask) {
    return new JacksonFeatureSet<>(bitmask);
}","JacksonFeatureSet","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JacksonFeatureSet.fromBitmask(int).bitmask","Parameter_1","Belong to com.fasterxml.jackson.core.util.JacksonFeatureSet.fromBitmask(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JacksonFeatureSet.with(JacksonFeature)","Method","* Mutant factory for getting a set in which specified feature is enabled:
     * will either return this instance (if no change), or newly created set (if there
     * is change).
     *
     * @param feature Feature to enable in set returned
     *
     * @return Newly created set of state of feature changed; {@code this} if not","public JacksonFeatureSet<F> with(F feature) {
    int newMask = _enabled | feature.getMask();
    return (newMask == _enabled) ? this : new JacksonFeatureSet<>(newMask);
}","JacksonFeatureSet","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JacksonFeatureSet.with(JacksonFeature).feature","Parameter_1","Belong to com.fasterxml.jackson.core.util.JacksonFeatureSet.with(JacksonFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JacksonFeatureSet.without(JacksonFeature)","Method","* Mutant factory for getting a set in which specified feature is disabled:
     * will either return this instance (if no change), or newly created set (if there
     * is change).
     *
     * @param feature Feature to disable in set returned
     *
     * @return Newly created set of state of feature changed; {@code this} if not","public JacksonFeatureSet<F> without(F feature) {
    int newMask = _enabled & ~feature.getMask();
    return (newMask == _enabled) ? this : new JacksonFeatureSet<>(newMask);
}","JacksonFeatureSet","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JacksonFeatureSet.without(JacksonFeature).feature","Parameter_1","Belong to com.fasterxml.jackson.core.util.JacksonFeatureSet.without(JacksonFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JacksonFeatureSet.isEnabled(JacksonFeature)","Method","* Main accessor for checking whether given feature is enabled in this feature set.
     *
     * @param feature Feature to check
     *
     * @return True if feature is enabled in this set; false otherwise","public boolean isEnabled(F feature) {
    return (feature.getMask() & _enabled) != 0;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JacksonFeatureSet.isEnabled(JacksonFeature).feature","Parameter_1","Belong to com.fasterxml.jackson.core.util.JacksonFeatureSet.isEnabled(JacksonFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JacksonFeatureSet.asBitmask()","Method","* Accessor for underlying bitmask
     *
     * @return Bitmask of enabled features","public int asBitmask() {
    return _enabled;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JacksonFeatureSet.<init>(int)","Constructor","* Constructor for creating instance with specific bitmask, wherein
     * {@code 1} bit means matching {@link JacksonFeature} is enabled and
     * {@code 0} disabled.
     *
     * @param bitmask Bitmask for features that are enabled","protected JacksonFeatureSet(int bitmask) {
    _enabled = bitmask;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JacksonFeatureSet.<init>(int).bitmask","Parameter_1","Belong to com.fasterxml.jackson.core.util.JacksonFeatureSet.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.InternCache","Class","* Singleton class that adds a simple first-level cache in front of
 * regular String.intern() functionality. This is done as a minor
 * performance optimization, to avoid calling native intern() method
 * in cases where same String is being interned multiple times.","Class do not obtain Source Code","No return type","public , final ","java.util.concurrent.ConcurrentHashMap",""
"com.fasterxml.jackson.core.util.InternCache.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.InternCache.DEFAULT_MAX_ENTRIES","Field","* Size to use is somewhat arbitrary, so let's choose something that's
     * neither too small (low hit ratio) nor too large (waste of memory).
     *<p>
     * One consideration is possible attack via colliding {@link String#hashCode};
     * because of this, limit to reasonably low setting.
     *<p>
     * Increased to 200 (from 100) in 2.18","private final static int DEFAULT_MAX_ENTRIES = 280;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.InternCache.instance","Field","No Comment","public final static InternCache instance = new InternCache();","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.InternCache.lock","Field","* As minor optimization let's try to avoid ""flush storms"",
     * cases where multiple threads might try to concurrently
     * flush the map.","private final ReentrantLock lock = new ReentrantLock();","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.InternCache.intern(String)","Method","No Comment","public String intern(String input) {
    String result = get(input);
    if (result != null) {
        return result;
    }
    /* 18-Sep-2013, tatu: We used to use LinkedHashMap, which has simple LRU
         *   method. No such functionality exists with CHM; and let's use simplest
         *   possible limitation: just clear all contents. This because otherwise
         *   we are simply likely to keep on clearing same, commonly used entries.
         */
    if (size() >= DEFAULT_MAX_ENTRIES) {
        /* As of 2.18, the limit is not strictly enforced, but we do try to
             * clear entries if we have reached the limit. We do not expect to
             * go too much over the limit, and if we do, it's not a huge problem.
             * If some other thread has the lock, we will not clear but the lock should
             * not be held for long, so another thread should be able to clear in the near future.
             */
        if (lock.tryLock()) {
            try {
                if (size() >= DEFAULT_MAX_ENTRIES) {
                    clear();
                }
            } finally {
                lock.unlock();
            }
        }
    }
    result = input.intern();
    put(result, result);
    return result;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.InternCache.intern(String).input","Parameter_1","Belong to com.fasterxml.jackson.core.util.InternCache.intern(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.InternCache.<init>()","Constructor","No Comment","public InternCache() {
    this(DEFAULT_MAX_ENTRIES, 0.8f, 4);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.InternCache.<init>(int,float,int)","Constructor","No Comment","public InternCache(int maxSize, float loadFactor, int concurrency) {
    super(maxSize, loadFactor, concurrency);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.InternCache.<init>(int,float,int).maxSize","Parameter_1","Belong to com.fasterxml.jackson.core.util.InternCache.<init>(int,float,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.InternCache.<init>(int,float,int).loadFactor","Parameter_2","Belong to com.fasterxml.jackson.core.util.InternCache.<init>(int,float,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.InternCache.<init>(int,float,int).concurrency","Parameter_3","Belong to com.fasterxml.jackson.core.util.InternCache.<init>(int,float,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder","Class","* Helper class that is similar to {@link java.io.ByteArrayOutputStream}
 * in usage, but more geared to Jackson use cases internally.
 * Specific changes include segment storage (no need to have linear
 * backing buffer, can avoid reallocations, copying), as well API
 * not based on {@link java.io.OutputStream}. In short, a very much
 * specialized builder object.
 *<p>
 * Also implements {@link OutputStream} to allow
 * efficient aggregation of output content as a byte array, similar
 * to how {@link java.io.ByteArrayOutputStream} works, but somewhat more
 * efficiently for many use cases.
 *<p>
 * NOTE: maximum size limited to Java Array maximum, 2 gigabytes: this
 * because usage pattern is to collect content for a `byte[]` and so although
 * theoretically this builder can aggregate more content it will not be usable
 * as things are. Behavior may be improved if we solve the access problem.","Class do not obtain Source Code","No return type","public , final ","java.io.OutputStream","com.fasterxml.jackson.core.util.BufferRecycler.Gettable"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.NO_BYTES","Field","No Comment","public final static byte[] NO_BYTES = new byte[0];","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.INITIAL_BLOCK_SIZE","Field","Size of the first block we will allocate.","private final static int INITIAL_BLOCK_SIZE = 500;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.MAX_BLOCK_SIZE","Field","For 2.10, let's limit to using 128k chunks (was 256k up to 2.9)","private final static int MAX_BLOCK_SIZE = (1 << 17);","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.DEFAULT_BLOCK_ARRAY_SIZE","Field","No Comment","final static int DEFAULT_BLOCK_ARRAY_SIZE = 40;","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder._bufferRecycler","Field","Optional buffer recycler instance that we can use for allocating the first block.","private final BufferRecycler _bufferRecycler;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder._pastBlocks","Field","No Comment","private final LinkedList<byte[]> _pastBlocks = new LinkedList<>();","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder._pastLen","Field","Number of bytes within byte arrays in {@link _pastBlocks}.","private int _pastLen;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder._currBlock","Field","No Comment","private byte[] _currBlock;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder._currBlockPtr","Field","No Comment","private int _currBlockPtr;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.fromInitial(byte[],int)","Method","No Comment","public static ByteArrayBuilder fromInitial(byte[] initialBlock, int length) {
    return new ByteArrayBuilder(null, initialBlock, length);
}","ByteArrayBuilder","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.fromInitial(byte[],int).initialBlock","Parameter_1","Belong to com.fasterxml.jackson.core.util.ByteArrayBuilder.fromInitial(byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.fromInitial(byte[],int).length","Parameter_2","Belong to com.fasterxml.jackson.core.util.ByteArrayBuilder.fromInitial(byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.reset()","Method","No Comment","public void reset() {
    _pastLen = 0;
    _currBlockPtr = 0;
    if (!_pastBlocks.isEmpty()) {
        _pastBlocks.clear();
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.size()","Method","* @return Number of bytes aggregated so far
     *
     * @since 2.9","public int size() {
    return _pastLen + _currBlockPtr;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.release()","Method","* Clean up method to call to release all buffers this object may be
     * using. After calling the method, no other accessors can be used (and
     * attempt to do so may result in an exception).","public void release() {
    reset();
    if (_bufferRecycler != null && _currBlock != null) {
        _bufferRecycler.releaseByteBuffer(BufferRecycler.BYTE_WRITE_CONCAT_BUFFER, _currBlock);
        _currBlock = null;
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.append(int)","Method","No Comment","public void append(int i) {
    if (_currBlockPtr >= _currBlock.length) {
        _allocMore();
    }
    _currBlock[_currBlockPtr++] = (byte) i;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.append(int).i","Parameter_1","Belong to com.fasterxml.jackson.core.util.ByteArrayBuilder.append(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.appendTwoBytes(int)","Method","No Comment","public void appendTwoBytes(int b16) {
    if ((_currBlockPtr + 1) < _currBlock.length) {
        _currBlock[_currBlockPtr++] = (byte) (b16 >> 8);
        _currBlock[_currBlockPtr++] = (byte) b16;
    } else {
        append(b16 >> 8);
        append(b16);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.appendTwoBytes(int).b16","Parameter_1","Belong to com.fasterxml.jackson.core.util.ByteArrayBuilder.appendTwoBytes(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.appendThreeBytes(int)","Method","No Comment","public void appendThreeBytes(int b24) {
    if ((_currBlockPtr + 2) < _currBlock.length) {
        _currBlock[_currBlockPtr++] = (byte) (b24 >> 16);
        _currBlock[_currBlockPtr++] = (byte) (b24 >> 8);
        _currBlock[_currBlockPtr++] = (byte) b24;
    } else {
        append(b24 >> 16);
        append(b24 >> 8);
        append(b24);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.appendThreeBytes(int).b24","Parameter_1","Belong to com.fasterxml.jackson.core.util.ByteArrayBuilder.appendThreeBytes(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.appendFourBytes(int)","Method","@since 2.9","public void appendFourBytes(int b32) {
    if ((_currBlockPtr + 3) < _currBlock.length) {
        _currBlock[_currBlockPtr++] = (byte) (b32 >> 24);
        _currBlock[_currBlockPtr++] = (byte) (b32 >> 16);
        _currBlock[_currBlockPtr++] = (byte) (b32 >> 8);
        _currBlock[_currBlockPtr++] = (byte) b32;
    } else {
        append(b32 >> 24);
        append(b32 >> 16);
        append(b32 >> 8);
        append(b32);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.appendFourBytes(int).b32","Parameter_1","Belong to com.fasterxml.jackson.core.util.ByteArrayBuilder.appendFourBytes(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.toByteArray()","Method","* Method called when results are finalized and we can get the
     * full aggregated result buffer to return to the caller
     *
     * @return Aggregated contents as a {@code byte[]}","public byte[] toByteArray() {
    int totalLen = _pastLen + _currBlockPtr;
    if (totalLen == 0) {
        // quick check: nothing aggregated?
        return NO_BYTES;
    }
    byte[] result = new byte[totalLen];
    int offset = 0;
    for (byte[] block : _pastBlocks) {
        int len = block.length;
        System.arraycopy(block, 0, result, offset, len);
        offset += len;
    }
    System.arraycopy(_currBlock, 0, result, offset, _currBlockPtr);
    offset += _currBlockPtr;
    if (offset != totalLen) {
        // just a sanity check
        throw new RuntimeException(""Internal error: total len assumed to be "" + totalLen + "", copied "" + offset + "" bytes"");
    }
    // Let's only reset if there's sizable use, otherwise will get reset later on
    if (!_pastBlocks.isEmpty()) {
        reset();
    }
    return result;
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.getClearAndRelease()","Method","* Method functionally same as calling:
     *<pre>
     *  byte[] bytes = toByteArray();
     *  release();
     *  return bytes;
     *</pre>
     * that is; aggregates output contained in the builder (if any),
     * clear state; returns buffer(s) to {@link BufferRecycler} configured,
     * if any, and returns output to caller.
     *
     * @return Content in byte array
     *
     * @since 2.17","public byte[] getClearAndRelease() {
    byte[] result = toByteArray();
    release();
    return result;
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.bufferRecycler()","Method","No Comment","@Override
public BufferRecycler bufferRecycler() {
    return _bufferRecycler;
}","BufferRecycler","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.resetAndGetFirstSegment()","Method","* Method called when starting ""manual"" output: will clear out
     * current state and return the first segment buffer to fill
     *
     * @return Segment to use for writing","public byte[] resetAndGetFirstSegment() {
    reset();
    return _currBlock;
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.finishCurrentSegment()","Method","* Method called when the current segment buffer is full; will
     * append to current contents, allocate a new segment buffer
     * and return it
     *
     * @return Segment to use for writing","public byte[] finishCurrentSegment() {
    _allocMore();
    return _currBlock;
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.completeAndCoalesce(int)","Method","* Method that will complete ""manual"" output process, coalesce
     * content (if necessary) and return results as a contiguous buffer.
     *
     * @param lastBlockLength Amount of content in the current segment
     * buffer.
     *
     * @return Coalesced contents","public byte[] completeAndCoalesce(int lastBlockLength) {
    _currBlockPtr = lastBlockLength;
    return toByteArray();
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.completeAndCoalesce(int).lastBlockLength","Parameter_1","Belong to com.fasterxml.jackson.core.util.ByteArrayBuilder.completeAndCoalesce(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.getCurrentSegment()","Method","No Comment","public byte[] getCurrentSegment() {
    return _currBlock;
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.setCurrentSegmentLength(int)","Method","No Comment","public void setCurrentSegmentLength(int len) {
    _currBlockPtr = len;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.setCurrentSegmentLength(int).len","Parameter_1","Belong to com.fasterxml.jackson.core.util.ByteArrayBuilder.setCurrentSegmentLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.getCurrentSegmentLength()","Method","No Comment","public int getCurrentSegmentLength() {
    return _currBlockPtr;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.write(byte[])","Method","No Comment","@Override
public void write(byte[] b) {
    write(b, 0, b.length);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.write(byte[]).b","Parameter_1","Belong to com.fasterxml.jackson.core.util.ByteArrayBuilder.write(byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.write(byte[],int,int)","Method","No Comment","@Override
public void write(byte[] b, int off, int len) {
    while (true) {
        int max = _currBlock.length - _currBlockPtr;
        int toCopy = Math.min(max, len);
        if (toCopy > 0) {
            System.arraycopy(b, off, _currBlock, _currBlockPtr, toCopy);
            off += toCopy;
            _currBlockPtr += toCopy;
            len -= toCopy;
        }
        if (len <= 0)
            break;
        _allocMore();
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.write(byte[],int,int).b","Parameter_1","Belong to com.fasterxml.jackson.core.util.ByteArrayBuilder.write(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.write(byte[],int,int).off","Parameter_2","Belong to com.fasterxml.jackson.core.util.ByteArrayBuilder.write(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.write(byte[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.util.ByteArrayBuilder.write(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.write(int)","Method","No Comment","@Override
public void write(int b) {
    append(b);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.write(int).b","Parameter_1","Belong to com.fasterxml.jackson.core.util.ByteArrayBuilder.write(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.close()","Method","No Comment","@Override
public void close() {
    // 18-Jan-2024, tatu: Ideally would call `release()` but currently
    //   not possible due to existing usage
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.flush()","Method","No Comment","@Override
public void flush() {
    /* NOP */
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder._allocMore()","Method","No Comment","private void _allocMore() {
    final int newPastLen = _pastLen + _currBlock.length;
    // 13-Feb-2016, tatu: As per [core#351] let's try to catch problem earlier;
    //     for now we are strongly limited by 2GB limit of Java arrays
    if (newPastLen < 0) {
        throw new IllegalStateException(""Maximum Java array size (2GB) exceeded by `ByteArrayBuilder`"");
    }
    _pastLen = newPastLen;
    /* Let's allocate block that's half the total size, except
         * never smaller than twice the initial block size.
         * The idea is just to grow with reasonable rate, to optimize
         * between minimal number of chunks and minimal amount of
         * wasted space.
         */
    int newSize = Math.max((_pastLen >> 1), (INITIAL_BLOCK_SIZE + INITIAL_BLOCK_SIZE));
    // plus not to exceed max we define...
    if (newSize > MAX_BLOCK_SIZE) {
        newSize = MAX_BLOCK_SIZE;
    }
    _pastBlocks.add(_currBlock);
    _currBlock = new byte[newSize];
    _currBlockPtr = 0;
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.<init>()","Constructor","No Comment","public ByteArrayBuilder() {
    this(null);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.<init>(BufferRecycler)","Constructor","No Comment","public ByteArrayBuilder(BufferRecycler br) {
    this(br, INITIAL_BLOCK_SIZE);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.<init>(BufferRecycler).br","Parameter_1","Belong to com.fasterxml.jackson.core.util.ByteArrayBuilder.<init>(BufferRecycler)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.<init>(int)","Constructor","No Comment","public ByteArrayBuilder(int firstBlockSize) {
    this(null, firstBlockSize);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.<init>(int).firstBlockSize","Parameter_1","Belong to com.fasterxml.jackson.core.util.ByteArrayBuilder.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.<init>(BufferRecycler,int)","Constructor","No Comment","public ByteArrayBuilder(BufferRecycler br, int firstBlockSize) {
    _bufferRecycler = br;
    // 04-Sep-2020, tatu: Let's make this bit more robust and refuse to allocate
    //    humongous blocks even if requested
    if (firstBlockSize > MAX_BLOCK_SIZE) {
        firstBlockSize = MAX_BLOCK_SIZE;
    }
    _currBlock = (br == null) ? new byte[firstBlockSize] : br.allocByteBuffer(BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.<init>(BufferRecycler,int).br","Parameter_1","Belong to com.fasterxml.jackson.core.util.ByteArrayBuilder.<init>(BufferRecycler,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.<init>(BufferRecycler,int).firstBlockSize","Parameter_2","Belong to com.fasterxml.jackson.core.util.ByteArrayBuilder.<init>(BufferRecycler,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.<init>(BufferRecycler,byte[],int)","Constructor","No Comment","private ByteArrayBuilder(BufferRecycler br, byte[] initialBlock, int initialLen) {
    _bufferRecycler = br;
    _currBlock = initialBlock;
    _currBlockPtr = initialLen;
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.<init>(BufferRecycler,byte[],int).br","Parameter_1","Belong to com.fasterxml.jackson.core.util.ByteArrayBuilder.<init>(BufferRecycler,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.<init>(BufferRecycler,byte[],int).initialBlock","Parameter_2","Belong to com.fasterxml.jackson.core.util.ByteArrayBuilder.<init>(BufferRecycler,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ByteArrayBuilder.<init>(BufferRecycler,byte[],int).initialLen","Parameter_3","Belong to com.fasterxml.jackson.core.util.ByteArrayBuilder.<init>(BufferRecycler,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter","Class","* Default {@link PrettyPrinter} implementation that uses 2-space
 * indentation with platform-default linefeeds.
 * Usually this class is not instantiated directly, but instead
 * method {@link JsonGenerator#useDefaultPrettyPrinter} is
 * used, which will use an instance of this class for operation.
 *<p>
 * If you override this class, take note of {@link Instantiatable},
 * as subclasses will still create an instance of DefaultPrettyPrinter.
 *<p>
 * This class is designed for the JSON data format. It works on other formats
 * with same logical model (such as binary {@code CBOR} and {@code Smile} formats),
 * but may not work as-is for other data formats, most notably {@code XML}.
 * It may be necessary to use format-specific {@link PrettyPrinter}
 * implementation specific to that format.","Class do not obtain Source Code","No return type","public ","","com.fasterxml.jackson.core.PrettyPrinter;com.fasterxml.jackson.core.util.Instantiatable;java.io.Serializable"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR","Field","* Constant that specifies default ""root-level"" separator to use between
     * root values: a single space character.
     *
     * @since 2.1
     * @deprecated in 2.16. Use the Separators API instead.","@Deprecated
public final static SerializedString DEFAULT_ROOT_VALUE_SEPARATOR = new SerializedString("" "");","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter._arrayIndenter","Field","* By default, let's use only spaces to separate array values.","protected Indenter _arrayIndenter = FixedSpaceIndenter.instance;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter._objectIndenter","Field","* By default, let's use linefeed-adding indenter for separate
     * object entries. We'll further configure indenter to use
     * system-specific linefeeds, and 2 spaces per level (as opposed to,
     * say, single tabs)","protected Indenter _objectIndenter = DefaultIndenter.SYSTEM_LINEFEED_INSTANCE;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter._rootSeparator","Field","* String printed between root-level values, if any.","protected SerializableString _rootSeparator;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter._spacesInObjectEntries","Field","* By default we will add spaces around colons used to
     * separate object fields and values.
     * If disabled, will not use spaces around colon.
     * 
     * @deprecated in 2.16. Use Separators API instead.","@Deprecated
protected boolean _spacesInObjectEntries = true;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter._nesting","Field","* Number of open levels of nesting. Used to determine amount of
     * indentation to use.","protected transient int _nesting;","No return type","protected , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter._separators","Field","* @since 2.9","protected Separators _separators;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter._objectFieldValueSeparatorWithSpaces","Field","* @since 2.9","protected String _objectFieldValueSeparatorWithSpaces;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter._objectEntrySeparator","Field","* @since 2.16","protected String _objectEntrySeparator;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter._objectEmptySeparator","Field","* String to use in empty Object to separate start and end markers.
     * Default is single space, resulting in output of {@code { }}.
     * 
     * @since 2.17","protected String _objectEmptySeparator;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter._arrayValueSeparator","Field","* @since 2.16","protected String _arrayValueSeparator;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter._arrayEmptySeparator","Field","* String to use in empty Array to separate start and end markers.
     * Default is single space, resulting in output of {@code [ ]}.
     * 
     * @since 2.17","protected String _arrayEmptySeparator;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withRootSeparator(SerializableString)","Method","* @deprecated in 2.16. Use the Separators API instead.","// since 2.16
@Deprecated
public DefaultPrettyPrinter withRootSeparator(SerializableString rootSeparator) {
    if (_rootSeparator == rootSeparator || (rootSeparator != null && rootSeparator.equals(_rootSeparator))) {
        return this;
    }
    Separators separators = _separators.withRootSeparator(rootSeparator == null ? null : rootSeparator.getValue());
    return new DefaultPrettyPrinter(this).withSeparators(separators);
}","DefaultPrettyPrinter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withRootSeparator(SerializableString).rootSeparator","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withRootSeparator(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withRootSeparator(String)","Method","* @param rootSeparator Root-level value separator to use
     *
     * @return This pretty-printer instance (for call chaining)
     *
     * @since 2.6
     * @deprecated in 2.16. Use the Separators API instead.","// since 2.16
@Deprecated
public DefaultPrettyPrinter withRootSeparator(String rootSeparator) {
    return withRootSeparator((rootSeparator == null) ? null : new SerializedString(rootSeparator));
}","DefaultPrettyPrinter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withRootSeparator(String).rootSeparator","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withRootSeparator(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.indentArraysWith(Indenter)","Method","No Comment","public void indentArraysWith(Indenter i) {
    _arrayIndenter = (i == null) ? NopIndenter.instance : i;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.indentArraysWith(Indenter).i","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.indentArraysWith(Indenter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.indentObjectsWith(Indenter)","Method","No Comment","public void indentObjectsWith(Indenter i) {
    _objectIndenter = (i == null) ? NopIndenter.instance : i;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.indentObjectsWith(Indenter).i","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.indentObjectsWith(Indenter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withArrayIndenter(Indenter)","Method","@since 2.3","public DefaultPrettyPrinter withArrayIndenter(Indenter i) {
    if (i == null) {
        i = NopIndenter.instance;
    }
    if (_arrayIndenter == i) {
        return this;
    }
    DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);
    pp._arrayIndenter = i;
    return pp;
}","DefaultPrettyPrinter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withArrayIndenter(Indenter).i","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withArrayIndenter(Indenter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withObjectIndenter(Indenter)","Method","@since 2.3","public DefaultPrettyPrinter withObjectIndenter(Indenter i) {
    if (i == null) {
        i = NopIndenter.instance;
    }
    if (_objectIndenter == i) {
        return this;
    }
    DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);
    pp._objectIndenter = i;
    return pp;
}","DefaultPrettyPrinter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withObjectIndenter(Indenter).i","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withObjectIndenter(Indenter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withSpacesInObjectEntries()","Method","* ""Mutant factory"" method that will return a pretty printer instance
     * that does use spaces inside object entries; if 'this' instance already
     * does this, it is returned; if not, a new instance will be constructed
     * and returned.
     *
     * @return This pretty-printer instance (for call chaining)
     *
     * @since 2.3
     * @deprecated in 2.16. Use the Separators API instead.","// since 2.16
@Deprecated
public DefaultPrettyPrinter withSpacesInObjectEntries() {
    return _withSpaces(true);
}","DefaultPrettyPrinter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withoutSpacesInObjectEntries()","Method","* ""Mutant factory"" method that will return a pretty printer instance
     * that does not use spaces inside object entries; if 'this' instance already
     * does this, it is returned; if not, a new instance will be constructed
     * and returned.
     *
     * @return This pretty-printer instance (for call chaining)
     *
     * @since 2.3
     * @deprecated in 2.16. Use the Separators API instead.","// since 2.16
@Deprecated
public DefaultPrettyPrinter withoutSpacesInObjectEntries() {
    return _withSpaces(false);
}","DefaultPrettyPrinter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter._withSpaces(boolean)","Method","No Comment","protected DefaultPrettyPrinter _withSpaces(boolean state) {
    if (_spacesInObjectEntries == state) {
        return this;
    }
    Separators copy = _separators.withObjectFieldValueSpacing(state ? Separators.Spacing.BOTH : Separators.Spacing.NONE);
    DefaultPrettyPrinter pp = withSeparators(copy);
    pp._spacesInObjectEntries = state;
    return pp;
}","DefaultPrettyPrinter","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter._withSpaces(boolean).state","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter._withSpaces(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withSeparators(Separators)","Method","* Method for configuring separators for this pretty-printer to use
     *
     * @param separators Separator definitions to use
     *
     * @return This pretty-printer instance (for call chaining)
     *
     * @since 2.9","public DefaultPrettyPrinter withSeparators(Separators separators) {
    DefaultPrettyPrinter result = new DefaultPrettyPrinter(this);
    result._separators = separators;
    result._rootSeparator = separators.getRootSeparator() == null ? null : new SerializedString(separators.getRootSeparator());
    result._objectFieldValueSeparatorWithSpaces = separators.getObjectFieldValueSpacing().apply(separators.getObjectFieldValueSeparator());
    result._objectEntrySeparator = separators.getObjectEntrySpacing().apply(separators.getObjectEntrySeparator());
    result._objectEmptySeparator = separators.getObjectEmptySeparator();
    result._arrayValueSeparator = separators.getArrayValueSpacing().apply(separators.getArrayValueSeparator());
    result._arrayEmptySeparator = separators.getArrayEmptySeparator();
    return result;
}","DefaultPrettyPrinter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withSeparators(Separators).separators","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.withSeparators(Separators)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.createInstance()","Method","No Comment","@Override
public DefaultPrettyPrinter createInstance() {
    if (getClass() != DefaultPrettyPrinter.class) {
        // since 2.10
        throw new IllegalStateException(""Failed `createInstance()`: "" + getClass().getName() + "" does not override method; it has to"");
    }
    return new DefaultPrettyPrinter(this);
}","DefaultPrettyPrinter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeRootValueSeparator(JsonGenerator)","Method","No Comment","@Override
public void writeRootValueSeparator(JsonGenerator g) throws IOException {
    if (_rootSeparator != null) {
        g.writeRaw(_rootSeparator);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeRootValueSeparator(JsonGenerator).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeRootValueSeparator(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeStartObject(JsonGenerator)","Method","No Comment","@Override
public void writeStartObject(JsonGenerator g) throws IOException {
    g.writeRaw('{');
    if (!_objectIndenter.isInline()) {
        ++_nesting;
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeStartObject(JsonGenerator).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeStartObject(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.beforeObjectEntries(JsonGenerator)","Method","No Comment","@Override
public void beforeObjectEntries(JsonGenerator g) throws IOException {
    _objectIndenter.writeIndentation(g, _nesting);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.beforeObjectEntries(JsonGenerator).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.beforeObjectEntries(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeObjectFieldValueSeparator(JsonGenerator)","Method","* Method called after an object field has been output, but
     * before the value is output.
     *<p>
     * Default handling (without pretty-printing) will output a single
     * colon to separate the two. Pretty-printer is
     * to output a colon as well, but can surround that with other
     * (white-space) decoration.","@Override
public void writeObjectFieldValueSeparator(JsonGenerator g) throws IOException {
    g.writeRaw(_objectFieldValueSeparatorWithSpaces);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeObjectFieldValueSeparator(JsonGenerator).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeObjectFieldValueSeparator(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeObjectEntrySeparator(JsonGenerator)","Method","* Method called after an object entry (field:value) has been completely
     * output, and before another value is to be output.
     *<p>
     * Default handling (without pretty-printing) will output a single
     * comma to separate the two. Pretty-printer is
     * to output a comma as well, but can surround that with other
     * (white-space) decoration.","@Override
public void writeObjectEntrySeparator(JsonGenerator g) throws IOException {
    g.writeRaw(_objectEntrySeparator);
    _objectIndenter.writeIndentation(g, _nesting);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeObjectEntrySeparator(JsonGenerator).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeObjectEntrySeparator(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeEndObject(JsonGenerator,int)","Method","No Comment","@Override
public void writeEndObject(JsonGenerator g, int nrOfEntries) throws IOException {
    if (!_objectIndenter.isInline()) {
        --_nesting;
    }
    if (nrOfEntries > 0) {
        _objectIndenter.writeIndentation(g, _nesting);
    } else {
        g.writeRaw(_objectEmptySeparator);
    }
    g.writeRaw('}');
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeEndObject(JsonGenerator,int).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeEndObject(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeEndObject(JsonGenerator,int).nrOfEntries","Parameter_2","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeEndObject(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeStartArray(JsonGenerator)","Method","No Comment","@Override
public void writeStartArray(JsonGenerator g) throws IOException {
    if (!_arrayIndenter.isInline()) {
        ++_nesting;
    }
    g.writeRaw('[');
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeStartArray(JsonGenerator).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeStartArray(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.beforeArrayValues(JsonGenerator)","Method","No Comment","@Override
public void beforeArrayValues(JsonGenerator g) throws IOException {
    _arrayIndenter.writeIndentation(g, _nesting);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.beforeArrayValues(JsonGenerator).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.beforeArrayValues(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeArrayValueSeparator(JsonGenerator)","Method","* Method called after an array value has been completely
     * output, and before another value is to be output.
     *<p>
     * Default handling (without pretty-printing) will output a single
     * comma to separate the two. Pretty-printer is
     * to output a comma as well, but can surround that with other
     * (white-space) decoration.","@Override
public void writeArrayValueSeparator(JsonGenerator g) throws IOException {
    g.writeRaw(_arrayValueSeparator);
    _arrayIndenter.writeIndentation(g, _nesting);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeArrayValueSeparator(JsonGenerator).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeArrayValueSeparator(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeEndArray(JsonGenerator,int)","Method","No Comment","@Override
public void writeEndArray(JsonGenerator g, int nrOfValues) throws IOException {
    if (!_arrayIndenter.isInline()) {
        --_nesting;
    }
    if (nrOfValues > 0) {
        _arrayIndenter.writeIndentation(g, _nesting);
    } else {
        g.writeRaw(_arrayEmptySeparator);
    }
    g.writeRaw(']');
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeEndArray(JsonGenerator,int).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeEndArray(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeEndArray(JsonGenerator,int).nrOfValues","Parameter_2","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.writeEndArray(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.<init>()","Constructor","No Comment","public DefaultPrettyPrinter() {
    this(DEFAULT_SEPARATORS);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.<init>(String)","Constructor","* Constructor that specifies separator String to use between root values;
     * if null, no separator is printed.
     *<p>
     * Note: simply constructs a {@link SerializedString} out of parameter,
     * calls {@link #DefaultPrettyPrinter(SerializableString)}
     *
     * @param rootSeparator String to use as root value separator
     * @deprecated in 2.16. Use the Separators API instead.","// since 2.16
@Deprecated
public DefaultPrettyPrinter(String rootSeparator) {
    this((rootSeparator == null) ? null : new SerializedString(rootSeparator));
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.<init>(String).rootSeparator","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.<init>(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.<init>(SerializableString)","Constructor","* Constructor that specifies separator String to use between root values;
     * if null, no separator is printed.
     *
     * @param rootSeparator String to use as root value separator
     * @deprecated in 2.16. Use the Separators API instead.","// since 2.16
@Deprecated
public DefaultPrettyPrinter(SerializableString rootSeparator) {
    this(DEFAULT_SEPARATORS.withRootSeparator(rootSeparator.getValue()));
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.<init>(SerializableString).rootSeparator","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.<init>(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.<init>(DefaultPrettyPrinter,SerializableString)","Constructor","* @deprecated in 2.16. Use the Separators API instead.","// since 2.16
@Deprecated
public DefaultPrettyPrinter(DefaultPrettyPrinter base, SerializableString rootSeparator) {
    _arrayIndenter = base._arrayIndenter;
    _objectIndenter = base._objectIndenter;
    _spacesInObjectEntries = base._spacesInObjectEntries;
    _nesting = base._nesting;
    _separators = base._separators;
    _objectFieldValueSeparatorWithSpaces = base._objectFieldValueSeparatorWithSpaces;
    _objectEntrySeparator = base._objectEntrySeparator;
    _objectEmptySeparator = base._objectEmptySeparator;
    _arrayValueSeparator = base._arrayValueSeparator;
    _arrayEmptySeparator = base._arrayEmptySeparator;
    _rootSeparator = rootSeparator;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.<init>(DefaultPrettyPrinter,SerializableString).base","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.<init>(DefaultPrettyPrinter,SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.<init>(DefaultPrettyPrinter,SerializableString).rootSeparator","Parameter_2","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.<init>(DefaultPrettyPrinter,SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.<init>(Separators)","Constructor","* @since 2.16","public DefaultPrettyPrinter(Separators separators) {
    _separators = separators;
    _rootSeparator = separators.getRootSeparator() == null ? null : new SerializedString(separators.getRootSeparator());
    _objectFieldValueSeparatorWithSpaces = separators.getObjectFieldValueSpacing().apply(separators.getObjectFieldValueSeparator());
    _objectEntrySeparator = separators.getObjectEntrySpacing().apply(separators.getObjectEntrySeparator());
    _objectEmptySeparator = separators.getObjectEmptySeparator();
    _arrayValueSeparator = separators.getArrayValueSpacing().apply(separators.getArrayValueSeparator());
    _arrayEmptySeparator = separators.getArrayEmptySeparator();
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.<init>(Separators).separators","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.<init>(Separators)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.<init>(DefaultPrettyPrinter)","Constructor","* Copy constructor
     * 
     * @since 2.16","public DefaultPrettyPrinter(DefaultPrettyPrinter base) {
    _rootSeparator = base._rootSeparator;
    _arrayIndenter = base._arrayIndenter;
    _objectIndenter = base._objectIndenter;
    _spacesInObjectEntries = base._spacesInObjectEntries;
    _nesting = base._nesting;
    _separators = base._separators;
    _objectFieldValueSeparatorWithSpaces = base._objectFieldValueSeparatorWithSpaces;
    _objectEntrySeparator = base._objectEntrySeparator;
    _objectEmptySeparator = base._objectEmptySeparator;
    _arrayValueSeparator = base._arrayValueSeparator;
    _arrayEmptySeparator = base._arrayEmptySeparator;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.<init>(DefaultPrettyPrinter).base","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.<init>(DefaultPrettyPrinter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter","Interface","* Interface that defines objects that can produce indentation used
     * to separate object entries and array values. Indentation in this
     * context just means insertion of white space, independent of whether
     * linefeeds are output.","Interface do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter.writeIndentation(JsonGenerator,int)","Abstract Method","No Comment","void writeIndentation(JsonGenerator g, int level) throws IOException;","void","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter.writeIndentation(JsonGenerator,int).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter.writeIndentation(JsonGenerator,int).level","Parameter_2","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter.isInline()","Abstract Method","* @return True if indenter is considered inline (does not add linefeeds),
         *   false otherwise","boolean isInline();","boolean","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter","Class","* Dummy implementation that adds no indentation whatsoever","Class do not obtain Source Code","No return type","public , static ","","com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter;java.io.Serializable"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter.instance","Field","No Comment","public static final NopIndenter instance = new NopIndenter();","No return type","public , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter.writeIndentation(JsonGenerator,int)","Method","No Comment","@Override
public void writeIndentation(JsonGenerator g, int level) throws IOException {
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter.writeIndentation(JsonGenerator,int).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter.writeIndentation(JsonGenerator,int).level","Parameter_2","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter.isInline()","Method","No Comment","@Override
public boolean isInline() {
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter","Class","* This is a very simple indenter that only adds a
     * single space for indentation. It is used as the default
     * indenter for array values.","Class do not obtain Source Code","No return type","public , static ","com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter",""
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter.instance","Field","No Comment","public static final FixedSpaceIndenter instance = new FixedSpaceIndenter();","No return type","public , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter.writeIndentation(JsonGenerator,int)","Method","No Comment","@Override
public void writeIndentation(JsonGenerator g, int level) throws IOException {
    g.writeRaw(' ');
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter.writeIndentation(JsonGenerator,int).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter.writeIndentation(JsonGenerator,int).level","Parameter_2","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter.isInline()","Method","No Comment","@Override
public boolean isInline() {
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter","Interface","* Interface that defines objects that can produce indentation used
     * to separate object entries and array values. Indentation in this
     * context just means insertion of white space, independent of whether
     * linefeeds are output.","Interface do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter.writeIndentation(JsonGenerator,int)","Abstract Method","No Comment","void writeIndentation(JsonGenerator g, int level) throws IOException;","void","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter.writeIndentation(JsonGenerator,int).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter.writeIndentation(JsonGenerator,int).level","Parameter_2","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter.isInline()","Abstract Method","* @return True if indenter is considered inline (does not add linefeeds),
         *   false otherwise","boolean isInline();","boolean","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter","Class","* Dummy implementation that adds no indentation whatsoever","Class do not obtain Source Code","No return type","public , static ","","com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter;java.io.Serializable"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter.instance","Field","No Comment","public static final NopIndenter instance = new NopIndenter();","No return type","public , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter.writeIndentation(JsonGenerator,int)","Method","No Comment","@Override
public void writeIndentation(JsonGenerator g, int level) throws IOException {
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter.writeIndentation(JsonGenerator,int).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter.writeIndentation(JsonGenerator,int).level","Parameter_2","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter.isInline()","Method","No Comment","@Override
public boolean isInline() {
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter","Class","* This is a very simple indenter that only adds a
     * single space for indentation. It is used as the default
     * indenter for array values.","Class do not obtain Source Code","No return type","public , static ","com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter",""
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance","Field","No Comment","public static final FixedSpaceIndenter instance = new FixedSpaceIndenter();","No return type","public , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.writeIndentation(JsonGenerator,int)","Method","No Comment","@Override
public void writeIndentation(JsonGenerator g, int level) throws IOException {
    g.writeRaw(' ');
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.writeIndentation(JsonGenerator,int).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.writeIndentation(JsonGenerator,int).level","Parameter_2","Belong to com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.isInline()","Method","No Comment","@Override
public boolean isInline() {
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter","Class","* {@link PrettyPrinter} implementation that adds no indentation,
 * just implements everything necessary for value output to work
 * as expected, and provide simpler extension points to allow
 * for creating simple custom implementations that add specific
 * decoration or overrides. Since behavior then is very similar
 * to using no pretty printer at all, usually sub-classes are used.
 *<p>
 * Beyond purely minimal implementation, there is limited amount of
 * configurability which may be useful for actual use: for example,
 * it is possible to redefine separator used between root-level
 * values (default is single space; can be changed to line-feed).
 *<p>
 * Note: does NOT implement {@link Instantiatable} since this is
 * a stateless implementation; that is, a single instance can be
 * shared between threads.","Class do not obtain Source Code","No return type","public ","","com.fasterxml.jackson.core.PrettyPrinter;java.io.Serializable"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter._rootValueSeparator","Field","No Comment","protected String _rootValueSeparator;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter._separators","Field","* @since 2.9","protected Separators _separators;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.setRootValueSeparator(String)","Method","No Comment","public void setRootValueSeparator(String sep) {
    _rootValueSeparator = sep;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.setRootValueSeparator(String).sep","Parameter_1","Belong to com.fasterxml.jackson.core.util.MinimalPrettyPrinter.setRootValueSeparator(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.setSeparators(Separators)","Method","* @param separators Separator definitions
     *
     * @return This pretty-printer instance to allow call chaining
     *
     * @since 2.9","public MinimalPrettyPrinter setSeparators(Separators separators) {
    _separators = separators;
    return this;
}","MinimalPrettyPrinter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.setSeparators(Separators).separators","Parameter_1","Belong to com.fasterxml.jackson.core.util.MinimalPrettyPrinter.setSeparators(Separators)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeRootValueSeparator(JsonGenerator)","Method","No Comment","@Override
public void writeRootValueSeparator(JsonGenerator g) throws IOException {
    if (_rootValueSeparator != null) {
        g.writeRaw(_rootValueSeparator);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeRootValueSeparator(JsonGenerator).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeRootValueSeparator(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeStartObject(JsonGenerator)","Method","No Comment","@Override
public void writeStartObject(JsonGenerator g) throws IOException {
    g.writeRaw('{');
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeStartObject(JsonGenerator).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeStartObject(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.beforeObjectEntries(JsonGenerator)","Method","No Comment","@Override
public void beforeObjectEntries(JsonGenerator g) throws IOException {
    // nothing special, since no indentation is added
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.beforeObjectEntries(JsonGenerator).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.MinimalPrettyPrinter.beforeObjectEntries(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeObjectFieldValueSeparator(JsonGenerator)","Method","* Method called after an object field has been output, but
     * before the value is output.
     *<p>
     * Default handling will just output a single
     * colon to separate the two, without additional spaces.","@Override
public void writeObjectFieldValueSeparator(JsonGenerator g) throws IOException {
    g.writeRaw(_separators.getObjectFieldValueSeparator());
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeObjectFieldValueSeparator(JsonGenerator).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeObjectFieldValueSeparator(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeObjectEntrySeparator(JsonGenerator)","Method","* Method called after an object entry (field:value) has been completely
     * output, and before another value is to be output.
     *<p>
     * Default handling (without pretty-printing) will output a single
     * comma to separate the two.","@Override
public void writeObjectEntrySeparator(JsonGenerator g) throws IOException {
    g.writeRaw(_separators.getObjectEntrySeparator());
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeObjectEntrySeparator(JsonGenerator).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeObjectEntrySeparator(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeEndObject(JsonGenerator,int)","Method","No Comment","@Override
public void writeEndObject(JsonGenerator g, int nrOfEntries) throws IOException {
    g.writeRaw('}');
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeEndObject(JsonGenerator,int).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeEndObject(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeEndObject(JsonGenerator,int).nrOfEntries","Parameter_2","Belong to com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeEndObject(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeStartArray(JsonGenerator)","Method","No Comment","@Override
public void writeStartArray(JsonGenerator g) throws IOException {
    g.writeRaw('[');
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeStartArray(JsonGenerator).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeStartArray(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.beforeArrayValues(JsonGenerator)","Method","No Comment","@Override
public void beforeArrayValues(JsonGenerator g) throws IOException {
    // nothing special, since no indentation is added
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.beforeArrayValues(JsonGenerator).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.MinimalPrettyPrinter.beforeArrayValues(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeArrayValueSeparator(JsonGenerator)","Method","* Method called after an array value has been completely
     * output, and before another value is to be output.
     *<p>
     * Default handling (without pretty-printing) will output a single
     * comma to separate values.","@Override
public void writeArrayValueSeparator(JsonGenerator g) throws IOException {
    g.writeRaw(_separators.getArrayValueSeparator());
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeArrayValueSeparator(JsonGenerator).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeArrayValueSeparator(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeEndArray(JsonGenerator,int)","Method","No Comment","@Override
public void writeEndArray(JsonGenerator g, int nrOfValues) throws IOException {
    g.writeRaw(']');
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeEndArray(JsonGenerator,int).g","Parameter_1","Belong to com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeEndArray(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeEndArray(JsonGenerator,int).nrOfValues","Parameter_2","Belong to com.fasterxml.jackson.core.util.MinimalPrettyPrinter.writeEndArray(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.<init>()","Constructor","No Comment","public MinimalPrettyPrinter() {
    this(DEFAULT_ROOT_VALUE_SEPARATOR.toString());
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.<init>(String)","Constructor","No Comment","public MinimalPrettyPrinter(String rootValueSeparator) {
    _rootValueSeparator = rootValueSeparator;
    _separators = DEFAULT_SEPARATORS.withObjectFieldValueSpacing(Spacing.NONE);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.MinimalPrettyPrinter.<init>(String).rootValueSeparator","Parameter_1","Belong to com.fasterxml.jackson.core.util.MinimalPrettyPrinter.<init>(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JacksonFeature","Interface","* Basic API implemented by Enums used for simple Jackson ""features"": on/off
 * settings and capabilities exposed as something that can be internally
 * represented as bit sets.
 * Designed to be used with {@link JacksonFeatureSet}.
 *
 * @since 2.12","Interface do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.util.JacksonFeature.enabledByDefault()","Abstract Method","* Accessor for checking whether this feature is enabled by default.
     *
     * @return Whether this instance is enabled by default or not","public boolean enabledByDefault();","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JacksonFeature.getMask()","Abstract Method","* Returns bit mask for this feature instance; must be a single bit,
     * that is of form {@code 1 << N}.
     *
     * @return Bit mask of this feature","public int getMask();","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JacksonFeature.enabledIn(int)","Abstract Method","* Convenience method for checking whether feature is enabled in given bitmask.
     *
     * @param flags Bit field that contains a set of enabled features of this type
     *
     * @return True if this feature is enabled in passed bit field","public boolean enabledIn(int flags);","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JacksonFeature.enabledIn(int).flags","Parameter_1","Belong to com.fasterxml.jackson.core.util.JacksonFeature.enabledIn(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil","Class","* Functionality for supporting exposing of component {@link Version}s.
 * Also contains other misc methods that have no other place to live in.
 *<p>
 * Note that this class can be used in two roles: first, as a static
 * utility class for loading purposes, and second, as a singleton
 * loader of per-module version information.
 *<p>
 * Note that method for accessing version information changed between versions
 * 2.1 and 2.2; earlier code used file named ""VERSION.txt""; but this has serious
 * performance issues on some platforms (Android), so a replacement system
 * was implemented to use class generation and dynamic class loading.
 *<p>
 * Note that functionality for reading ""VERSION.txt"" was removed completely
 * from Jackson 2.6.","Class do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.util.VersionUtil.V_SEP","Field","No Comment","private final static Pattern V_SEP = Pattern.compile(""[-_./;:]"");","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil.version()","Method","No Comment","// since 2.9
@Deprecated
public Version version() {
    return Version.unknownVersion();
}","Version","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil.versionFor(Class)","Method","* Loads version information by introspecting a class named
     * ""PackageVersion"" in the same package as the given class.
     *<p>
     * If the class could not be found or does not have a public
     * static Version field named ""VERSION"", returns ""empty"" {@link Version}
     * returned by {@link Version#unknownVersion()}.
     *
     * @param cls Class for which to look version information
     *
     * @return Version information discovered if any;
     *  {@link Version#unknownVersion()} if none","public static Version versionFor(Class<?> cls) {
    Version v = null;
    try {
        String versionInfoClassName = cls.getPackage().getName() + "".PackageVersion"";
        Class<?> vClass = Class.forName(versionInfoClassName, true, cls.getClassLoader());
        // However, if class exists, it better work correctly, no swallowing exceptions
        try {
            v = ((Versioned) vClass.getDeclaredConstructor().newInstance()).version();
        } catch (Exception e) {
            throw new IllegalArgumentException(""Failed to get Versioned out of "" + vClass);
        }
    } catch (Exception e) {
        // ok to be missing (not good but acceptable)
        ;
    }
    return (v == null) ? Version.unknownVersion() : v;
}","Version","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil.versionFor(Class).cls","Parameter_1","Belong to com.fasterxml.jackson.core.util.VersionUtil.versionFor(Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil.packageVersionFor(Class)","Method","* Alias of {@link #versionFor(Class)}.
     *
     * @param cls Class for which to look version information
     *
     * @return Version information discovered if any;
     *  {@link Version#unknownVersion()} if none
     *
     * @deprecated Since 2.12 simply use {@link #versionFor(Class)} instead","@Deprecated
public static Version packageVersionFor(Class<?> cls) {
    return versionFor(cls);
}","Version","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil.packageVersionFor(Class).cls","Parameter_1","Belong to com.fasterxml.jackson.core.util.VersionUtil.packageVersionFor(Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil.mavenVersionFor(ClassLoader,String,String)","Method","* Will attempt to load the maven version for the given groupId and
     * artifactId.  Maven puts a pom.properties file in
     * META-INF/maven/groupId/artifactId, containing the groupId,
     * artifactId and version of the library.
     *
     * @param cl the ClassLoader to load the pom.properties file from
     * @param groupId the groupId of the library
     * @param artifactId the artifactId of the library
     * @return The version
     *
     * @deprecated Since 2.6: functionality not used by any official Jackson component, should be
     *   moved out if anyone needs it","@SuppressWarnings(""resource"")
// since 2.6
@Deprecated
public static Version mavenVersionFor(ClassLoader cl, String groupId, String artifactId) {
    InputStream pomProperties = cl.getResourceAsStream(""META-INF/maven/"" + groupId.replaceAll(""\\."", ""/"") + ""/"" + artifactId + ""/pom.properties"");
    if (pomProperties != null) {
        try {
            Properties props = new Properties();
            props.load(pomProperties);
            String versionStr = props.getProperty(""version"");
            String pomPropertiesArtifactId = props.getProperty(""artifactId"");
            String pomPropertiesGroupId = props.getProperty(""groupId"");
            return parseVersion(versionStr, pomPropertiesGroupId, pomPropertiesArtifactId);
        } catch (IOException e) {
            // Ignore
        } finally {
            _close(pomProperties);
        }
    }
    return Version.unknownVersion();
}","Version","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil.mavenVersionFor(ClassLoader,String,String).cl","Parameter_1","Belong to com.fasterxml.jackson.core.util.VersionUtil.mavenVersionFor(ClassLoader,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil.mavenVersionFor(ClassLoader,String,String).groupId","Parameter_2","Belong to com.fasterxml.jackson.core.util.VersionUtil.mavenVersionFor(ClassLoader,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil.mavenVersionFor(ClassLoader,String,String).artifactId","Parameter_3","Belong to com.fasterxml.jackson.core.util.VersionUtil.mavenVersionFor(ClassLoader,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil.parseVersion(String,String,String)","Method","* Method used by <code>PackageVersion</code> classes to decode version injected by Maven build.
     *
     * @param s Version String to parse
     * @param groupId Maven group id to include with version
     * @param artifactId Maven artifact id to include with version
     *
     * @return Version instance constructed from parsed components, if successful;
     *    {@link Version#unknownVersion()} if parsing of components fail","public static Version parseVersion(String s, String groupId, String artifactId) {
    if (s != null && (s = s.trim()).length() > 0) {
        String[] parts = V_SEP.split(s);
        return new Version(parseVersionPart(parts[0]), (parts.length > 1) ? parseVersionPart(parts[1]) : 0, (parts.length > 2) ? parseVersionPart(parts[2]) : 0, (parts.length > 3) ? parts[3] : null, groupId, artifactId);
    }
    return Version.unknownVersion();
}","Version","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil.parseVersion(String,String,String).s","Parameter_1","Belong to com.fasterxml.jackson.core.util.VersionUtil.parseVersion(String,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil.parseVersion(String,String,String).groupId","Parameter_2","Belong to com.fasterxml.jackson.core.util.VersionUtil.parseVersion(String,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil.parseVersion(String,String,String).artifactId","Parameter_3","Belong to com.fasterxml.jackson.core.util.VersionUtil.parseVersion(String,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil.parseVersionPart(String)","Method","No Comment","protected static int parseVersionPart(String s) {
    int number = 0;
    for (int i = 0, len = s.length(); i < len; ++i) {
        char c = s.charAt(i);
        if (c > '9' || c < '0')
            break;
        number = (number * 10) + (c - '0');
    }
    return number;
}","int","protected , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil.parseVersionPart(String).s","Parameter_1","Belong to com.fasterxml.jackson.core.util.VersionUtil.parseVersionPart(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil._close(Closeable)","Method","No Comment","private final static void _close(Closeable c) {
    try {
        c.close();
    } catch (IOException e) {
    }
}","void","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil._close(Closeable).c","Parameter_1","Belong to com.fasterxml.jackson.core.util.VersionUtil._close(Closeable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil.throwInternal()","Method","No Comment","public final static void throwInternal() {
    throw new RuntimeException(""Internal error: this code path should never get executed"");
}","void","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil.throwInternalReturnAny()","Method","No Comment","public final static <T> T throwInternalReturnAny() {
    throw new RuntimeException(""Internal error: this code path should never get executed"");
}","Object","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.VersionUtil.<init>()","Constructor","No Comment","protected VersionUtil() {
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate","Class","* Helper class that implements
 * <a href=""http://en.wikipedia.org/wiki/Delegation_pattern"">delegation pattern</a> for {@link JsonParser},
 * to allow for simple overridability of basic parsing functionality.
 * The idea is that any functionality to be modified can be simply
 * overridden; and anything else will be delegated by default.","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.JsonParser",""
"com.fasterxml.jackson.core.util.JsonParserDelegate.delegate","Field","* Delegate object that method calls are delegated to.","protected JsonParser delegate;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.setCodec(ObjectCodec)","Method","No Comment","@Override
public void setCodec(ObjectCodec c) {
    delegate.setCodec(c);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.setCodec(ObjectCodec).c","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.setCodec(ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getCodec()","Method","No Comment","@Override
public ObjectCodec getCodec() {
    return delegate.getCodec();
}","ObjectCodec","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.enable(Feature)","Method","No Comment","@Override
public JsonParser enable(Feature f) {
    delegate.enable(f);
    return this;
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.enable(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.enable(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.disable(Feature)","Method","No Comment","@Override
public JsonParser disable(Feature f) {
    delegate.disable(f);
    return this;
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.disable(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.disable(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.isEnabled(Feature)","Method","No Comment","@Override
public boolean isEnabled(Feature f) {
    return delegate.isEnabled(f);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.isEnabled(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.isEnabled(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getFeatureMask()","Method","No Comment","@Override
public int getFeatureMask() {
    return delegate.getFeatureMask();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.setFeatureMask(int)","Method","No Comment","@Override
// since 2.7
@Deprecated
public JsonParser setFeatureMask(int mask) {
    delegate.setFeatureMask(mask);
    return this;
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.setFeatureMask(int).mask","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.setFeatureMask(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.overrideStdFeatures(int,int)","Method","No Comment","@Override
public JsonParser overrideStdFeatures(int values, int mask) {
    delegate.overrideStdFeatures(values, mask);
    return this;
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.overrideStdFeatures(int,int).values","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.overrideStdFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.overrideStdFeatures(int,int).mask","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.overrideStdFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.overrideFormatFeatures(int,int)","Method","No Comment","@Override
public JsonParser overrideFormatFeatures(int values, int mask) {
    delegate.overrideFormatFeatures(values, mask);
    return this;
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.overrideFormatFeatures(int,int).values","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.overrideFormatFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.overrideFormatFeatures(int,int).mask","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.overrideFormatFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getSchema()","Method","No Comment","@Override
public FormatSchema getSchema() {
    return delegate.getSchema();
}","FormatSchema","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.setSchema(FormatSchema)","Method","No Comment","@Override
public void setSchema(FormatSchema schema) {
    delegate.setSchema(schema);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.setSchema(FormatSchema).schema","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.setSchema(FormatSchema)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.canUseSchema(FormatSchema)","Method","No Comment","@Override
public boolean canUseSchema(FormatSchema schema) {
    return delegate.canUseSchema(schema);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.canUseSchema(FormatSchema).schema","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.canUseSchema(FormatSchema)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.version()","Method","No Comment","@Override
public Version version() {
    return delegate.version();
}","Version","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getInputSource()","Method","No Comment","@Override
public Object getInputSource() {
    return delegate.getInputSource();
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.streamReadConstraints()","Method","No Comment","@Override
public StreamReadConstraints streamReadConstraints() {
    return delegate.streamReadConstraints();
}","StreamReadConstraints","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.canParseAsync()","Method","No Comment","@Override
public boolean canParseAsync() {
    return delegate.canParseAsync();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getNonBlockingInputFeeder()","Method","No Comment","@Override
public NonBlockingInputFeeder getNonBlockingInputFeeder() {
    return delegate.getNonBlockingInputFeeder();
}","NonBlockingInputFeeder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getReadCapabilities()","Method","No Comment","@Override
public JacksonFeatureSet<StreamReadCapability> getReadCapabilities() {
    return delegate.getReadCapabilities();
}","JacksonFeatureSet","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.requiresCustomCodec()","Method","No Comment","@Override
public boolean requiresCustomCodec() {
    return delegate.requiresCustomCodec();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.close()","Method","No Comment","@Override
public void close() throws IOException {
    delegate.close();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.isClosed()","Method","No Comment","@Override
public boolean isClosed() {
    return delegate.isClosed();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.clearCurrentToken()","Method","No Comment","@Override
public void clearCurrentToken() {
    delegate.clearCurrentToken();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getLastClearedToken()","Method","No Comment","@Override
public JsonToken getLastClearedToken() {
    return delegate.getLastClearedToken();
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.overrideCurrentName(String)","Method","No Comment","@Override
public void overrideCurrentName(String name) {
    delegate.overrideCurrentName(name);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.overrideCurrentName(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.overrideCurrentName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.assignCurrentValue(Object)","Method","No Comment","// since 2.13
@Override
public void assignCurrentValue(Object v) {
    delegate.assignCurrentValue(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.assignCurrentValue(Object).v","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.assignCurrentValue(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.setCurrentValue(Object)","Method","No Comment","@Override
@Deprecated
public void setCurrentValue(Object v) {
    delegate.setCurrentValue(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.setCurrentValue(Object).v","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.setCurrentValue(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getParsingContext()","Method","No Comment","@Override
public JsonStreamContext getParsingContext() {
    return delegate.getParsingContext();
}","JsonStreamContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.currentToken()","Method","No Comment","@Override
public JsonToken currentToken() {
    return delegate.currentToken();
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.currentTokenId()","Method","No Comment","@Override
public int currentTokenId() {
    return delegate.currentTokenId();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.currentName()","Method","No Comment","@Override
public String currentName() throws IOException {
    return delegate.currentName();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.currentValue()","Method","No Comment","@Override
public Object currentValue() {
    return delegate.currentValue();
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.currentLocation()","Method","No Comment","@Override
public JsonLocation currentLocation() {
    return delegate.currentLocation();
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.currentTokenLocation()","Method","No Comment","@Override
public JsonLocation currentTokenLocation() {
    return delegate.currentTokenLocation();
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.currentTokenCount()","Method","No Comment","// since 2.18
@Override
public long currentTokenCount() {
    return delegate.currentTokenCount();
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentToken()","Method","No Comment","@Override
@Deprecated
public JsonToken getCurrentToken() {
    return delegate.getCurrentToken();
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentTokenId()","Method","No Comment","// since 2.12
@Deprecated
@Override
public int getCurrentTokenId() {
    return delegate.getCurrentTokenId();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentName()","Method","No Comment","@Override
// since 2.17
@Deprecated
public String getCurrentName() throws IOException {
    return delegate.getCurrentName();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentValue()","Method","No Comment","@Override
// since 2.17
@Deprecated
public Object getCurrentValue() {
    return delegate.getCurrentValue();
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentLocation()","Method","No Comment","@Override
// since 2.17
@Deprecated
public JsonLocation getCurrentLocation() {
    return delegate.getCurrentLocation();
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getTokenLocation()","Method","No Comment","@Override
// since 2.17
@Deprecated
public JsonLocation getTokenLocation() {
    return delegate.getTokenLocation();
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.hasCurrentToken()","Method","No Comment","@Override
public boolean hasCurrentToken() {
    return delegate.hasCurrentToken();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.hasTokenId(int)","Method","No Comment","@Override
public boolean hasTokenId(int id) {
    return delegate.hasTokenId(id);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.hasTokenId(int).id","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.hasTokenId(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.hasToken(JsonToken)","Method","No Comment","@Override
public boolean hasToken(JsonToken t) {
    return delegate.hasToken(t);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.hasToken(JsonToken).t","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.hasToken(JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartArrayToken()","Method","No Comment","@Override
public boolean isExpectedStartArrayToken() {
    return delegate.isExpectedStartArrayToken();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartObjectToken()","Method","No Comment","@Override
public boolean isExpectedStartObjectToken() {
    return delegate.isExpectedStartObjectToken();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedNumberIntToken()","Method","No Comment","@Override
public boolean isExpectedNumberIntToken() {
    return delegate.isExpectedNumberIntToken();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.isNaN()","Method","No Comment","@Override
public boolean isNaN() throws IOException {
    return delegate.isNaN();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getText()","Method","No Comment","@Override
public String getText() throws IOException {
    return delegate.getText();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.hasTextCharacters()","Method","No Comment","@Override
public boolean hasTextCharacters() {
    return delegate.hasTextCharacters();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getTextCharacters()","Method","No Comment","@Override
public char[] getTextCharacters() throws IOException {
    return delegate.getTextCharacters();
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getTextLength()","Method","No Comment","@Override
public int getTextLength() throws IOException {
    return delegate.getTextLength();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getTextOffset()","Method","No Comment","@Override
public int getTextOffset() throws IOException {
    return delegate.getTextOffset();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getText(Writer)","Method","No Comment","@Override
public int getText(Writer writer) throws IOException, UnsupportedOperationException {
    return delegate.getText(writer);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getText(Writer).writer","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.getText(Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getBigIntegerValue()","Method","No Comment","@Override
public BigInteger getBigIntegerValue() throws IOException {
    return delegate.getBigIntegerValue();
}","BigInteger","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getBooleanValue()","Method","No Comment","@Override
public boolean getBooleanValue() throws IOException {
    return delegate.getBooleanValue();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getByteValue()","Method","No Comment","@Override
public byte getByteValue() throws IOException {
    return delegate.getByteValue();
}","byte","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getShortValue()","Method","No Comment","@Override
public short getShortValue() throws IOException {
    return delegate.getShortValue();
}","short","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getDecimalValue()","Method","No Comment","@Override
public BigDecimal getDecimalValue() throws IOException {
    return delegate.getDecimalValue();
}","BigDecimal","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue()","Method","No Comment","@Override
public double getDoubleValue() throws IOException {
    return delegate.getDoubleValue();
}","double","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getFloatValue()","Method","No Comment","@Override
public float getFloatValue() throws IOException {
    return delegate.getFloatValue();
}","float","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getIntValue()","Method","No Comment","@Override
public int getIntValue() throws IOException {
    return delegate.getIntValue();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getLongValue()","Method","No Comment","@Override
public long getLongValue() throws IOException {
    return delegate.getLongValue();
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberType()","Method","No Comment","@Override
public NumberType getNumberType() throws IOException {
    return delegate.getNumberType();
}","NumberType","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberTypeFP()","Method","No Comment","@Override
public NumberTypeFP getNumberTypeFP() throws IOException {
    return delegate.getNumberTypeFP();
}","NumberTypeFP","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberValue()","Method","No Comment","@Override
public Number getNumberValue() throws IOException {
    return delegate.getNumberValue();
}","Number","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberValueExact()","Method","No Comment","@Override
public Number getNumberValueExact() throws IOException {
    return delegate.getNumberValueExact();
}","Number","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberValueDeferred()","Method","No Comment","@Override
public Object getNumberValueDeferred() throws IOException {
    return delegate.getNumberValueDeferred();
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt()","Method","No Comment","@Override
public int getValueAsInt() throws IOException {
    return delegate.getValueAsInt();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt(int)","Method","No Comment","@Override
public int getValueAsInt(int defaultValue) throws IOException {
    return delegate.getValueAsInt(defaultValue);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt(int).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong()","Method","No Comment","@Override
public long getValueAsLong() throws IOException {
    return delegate.getValueAsLong();
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong(long)","Method","No Comment","@Override
public long getValueAsLong(long defaultValue) throws IOException {
    return delegate.getValueAsLong(defaultValue);
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong(long).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble()","Method","No Comment","@Override
public double getValueAsDouble() throws IOException {
    return delegate.getValueAsDouble();
}","double","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble(double)","Method","No Comment","@Override
public double getValueAsDouble(double defaultValue) throws IOException {
    return delegate.getValueAsDouble(defaultValue);
}","double","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble(double).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble(double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean()","Method","No Comment","@Override
public boolean getValueAsBoolean() throws IOException {
    return delegate.getValueAsBoolean();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean(boolean)","Method","No Comment","@Override
public boolean getValueAsBoolean(boolean defaultValue) throws IOException {
    return delegate.getValueAsBoolean(defaultValue);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean(boolean).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString()","Method","No Comment","@Override
public String getValueAsString() throws IOException {
    return delegate.getValueAsString();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString(String)","Method","No Comment","@Override
public String getValueAsString(String defaultValue) throws IOException {
    return delegate.getValueAsString(defaultValue);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString(String).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getEmbeddedObject()","Method","No Comment","@Override
public Object getEmbeddedObject() throws IOException {
    return delegate.getEmbeddedObject();
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getBinaryValue(Base64Variant)","Method","No Comment","@Override
public byte[] getBinaryValue(Base64Variant b64variant) throws IOException {
    return delegate.getBinaryValue(b64variant);
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getBinaryValue(Base64Variant).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.getBinaryValue(Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.readBinaryValue(Base64Variant,OutputStream)","Method","No Comment","@Override
public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException {
    return delegate.readBinaryValue(b64variant, out);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.readBinaryValue(Base64Variant,OutputStream).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.readBinaryValue(Base64Variant,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.readBinaryValue(Base64Variant,OutputStream).out","Parameter_2","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.readBinaryValue(Base64Variant,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.nextToken()","Method","No Comment","@Override
public JsonToken nextToken() throws IOException {
    return delegate.nextToken();
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.nextValue()","Method","No Comment","@Override
public JsonToken nextValue() throws IOException {
    return delegate.nextValue();
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.finishToken()","Method","No Comment","@Override
public void finishToken() throws IOException {
    delegate.finishToken();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.skipChildren()","Method","No Comment","@Override
public JsonParser skipChildren() throws IOException {
    delegate.skipChildren();
    // NOTE: must NOT delegate this method to delegate, needs to be self-reference for chaining
    return this;
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.canReadObjectId()","Method","No Comment","@Override
public boolean canReadObjectId() {
    return delegate.canReadObjectId();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.canReadTypeId()","Method","No Comment","@Override
public boolean canReadTypeId() {
    return delegate.canReadTypeId();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getObjectId()","Method","No Comment","@Override
public Object getObjectId() throws IOException {
    return delegate.getObjectId();
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.getTypeId()","Method","No Comment","@Override
public Object getTypeId() throws IOException {
    return delegate.getTypeId();
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.delegate()","Method","* Accessor for getting the immediate {@link JsonParser} this parser delegates calls to.
     *
     * @return Underlying parser calls are delegated to
     *
     * @since 2.10","public JsonParser delegate() {
    return delegate;
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.<init>(JsonParser)","Constructor","No Comment","public JsonParserDelegate(JsonParser d) {
    delegate = d;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonParserDelegate.<init>(JsonParser).d","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonParserDelegate.<init>(JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ThreadLocalBufferManager","Class","* For issue [jackson-core#400] We keep a separate Set of all SoftReferences to BufferRecyclers
 * which are (also) referenced using `ThreadLocals`.
 * We do this to be able to release them (dereference) in `releaseBuffers()` and `shutdown()`
 * method to reduce heap consumption during hot reloading of services where otherwise
 * {@link ClassLoader} would have dangling reference via {@link ThreadLocal}s.
 * When gc clears a SoftReference, it puts it on a newly introduced referenceQueue.
 * We use this queue to release the inactive SoftReferences from the Set.
 *
 * @since 2.9.6","Class do not obtain Source Code","No return type","default","",""
"com.fasterxml.jackson.core.util.ThreadLocalBufferManager.RELEASE_LOCK","Field","* A lock to make sure releaseBuffers is only executed by one thread at a time
     * since it iterates over and modifies the allSoftBufRecyclers.","private final ReentrantLock RELEASE_LOCK = new ReentrantLock();","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ThreadLocalBufferManager._trackedRecyclers","Field","* A set of all SoftReferences to all BufferRecyclers to be able to release them on shutdown.
     * 'All' means the ones created by this class, in this classloader.
     * There may be more from other classloaders.
     * We use a HashSet to have quick O(1) add and remove operations.
     *<p>
     * NOTE: assumption is that {@link SoftReference} has its {@code equals()} and
     * {@code hashCode()} implementations defined so that they use object identity, so
     * we do not need to use something like {@link IdentityHashMap}","private final Map<SoftReference<BufferRecycler>, Boolean> _trackedRecyclers = new ConcurrentHashMap<>();","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ThreadLocalBufferManager._refQueue","Field","* Queue where gc will put just-cleared SoftReferences, previously referencing BufferRecyclers.
     * We use it to remove the cleared softRefs from the above set.","private final ReferenceQueue<BufferRecycler> _refQueue = new ReferenceQueue<>();","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ThreadLocalBufferManager.instance()","Method","* Returns the lazily initialized singleton instance","public static ThreadLocalBufferManager instance() {
    return ThreadLocalBufferManagerHolder.manager;
}","ThreadLocalBufferManager","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ThreadLocalBufferManager.releaseBuffers()","Method","* Releases the buffers retained in ThreadLocals. To be called for instance on shutdown event of applications which make use of
     * an environment like an appserver which stays alive and uses a thread pool that causes ThreadLocals created by the
     * application to survive much longer than the application itself.
     * It will clear all bufRecyclers from the SoftRefs and release all SoftRefs itself from our set.","public int releaseBuffers() {
    int count = 0;
    RELEASE_LOCK.lock();
    try {
        // does this need to be in sync block too? Looping over Map definitely has to but...
        // make sure the refQueue is empty
        removeSoftRefsClearedByGc();
        for (SoftReference<BufferRecycler> ref : _trackedRecyclers.keySet()) {
            // possibly already cleared by gc, nothing happens in that case
            ref.clear();
            ++count;
        }
        //release cleared SoftRefs
        _trackedRecyclers.clear();
    } finally {
        RELEASE_LOCK.unlock();
    }
    return count;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ThreadLocalBufferManager.wrapAndTrack(BufferRecycler)","Method","No Comment","public SoftReference<BufferRecycler> wrapAndTrack(BufferRecycler br) {
    SoftReference<BufferRecycler> newRef;
    newRef = new SoftReference<>(br, _refQueue);
    // also retain softRef to br in a set to be able to release it on shutdown
    _trackedRecyclers.put(newRef, true);
    // gc may have cleared one or more SoftRefs, clean them up to avoid a memleak
    removeSoftRefsClearedByGc();
    return newRef;
}","SoftReference","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ThreadLocalBufferManager.wrapAndTrack(BufferRecycler).br","Parameter_1","Belong to com.fasterxml.jackson.core.util.ThreadLocalBufferManager.wrapAndTrack(BufferRecycler)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ThreadLocalBufferManager.removeSoftRefsClearedByGc()","Method","* Remove cleared (inactive) SoftRefs from our set. Gc may have cleared one or more,
     * and made them inactive.","private void removeSoftRefsClearedByGc() {
    SoftReference<?> clearedSoftRef;
    while ((clearedSoftRef = (SoftReference<?>) _refQueue.poll()) != null) {
        // uses reference-equality, quick, and O(1) removal by HashSet
        _trackedRecyclers.remove(clearedSoftRef);
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ThreadLocalBufferManager$ThreadLocalBufferManagerHolder","Class","* ThreadLocalBufferManagerHolder uses the thread-safe initialize-on-demand, holder class idiom that implicitly
     * incorporates lazy initialization by declaring a static variable within a static Holder inner class","Class do not obtain Source Code","No return type","private , static , final ","",""
"com.fasterxml.jackson.core.util.ThreadLocalBufferManager$ThreadLocalBufferManagerHolder.manager","Field","No Comment","static final ThreadLocalBufferManager manager = new ThreadLocalBufferManager();","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.ThreadLocalBufferManager.ThreadLocalBufferManagerHolder","Class","* ThreadLocalBufferManagerHolder uses the thread-safe initialize-on-demand, holder class idiom that implicitly
     * incorporates lazy initialization by declaring a static variable within a static Holder inner class","Class do not obtain Source Code","No return type","private , static , final ","",""
"com.fasterxml.jackson.core.util.ThreadLocalBufferManager.ThreadLocalBufferManagerHolder.manager","Field","No Comment","static final ThreadLocalBufferManager manager = new ThreadLocalBufferManager();","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools","Class","* Set of {@link RecyclerPool} implementations to be used by the default
 * JSON-backed {@link JsonFactory} for recycling {@link BufferRecycler}
 * containers.
 *
 * @since 2.16","Class do not obtain Source Code","No return type","public , final ","",""
"com.fasterxml.jackson.core.util.JsonRecyclerPools.defaultPool()","Method","* Method to call to get the default recycler pool instance:
     * as of Jackson 2.18 this is same as calling
     * {@link #threadLocalPool()}: Jackson 2.17.0 instead had this call
     * {@link #newLockFreePool()} but this was reverted due to problems reported.
     *<p>
     * Default pool will likely be changed in Jackson 3.0 to something else.
     *
     * @return the default {@link RecyclerPool} implementation to use
     *   if no specific implementation desired.","public static RecyclerPool<BufferRecycler> defaultPool() {
    return threadLocalPool();
}","RecyclerPool","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.threadLocalPool()","Method","* Accessor for getting the shared/global {@link ThreadLocalPool} instance
     * (due to design only one instance ever needed)
     *
     * @return Globally shared instance of {@link ThreadLocalPool}","public static RecyclerPool<BufferRecycler> threadLocalPool() {
    return ThreadLocalPool.GLOBAL;
}","RecyclerPool","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.nonRecyclingPool()","Method","* Accessor for getting the shared/global {@link NonRecyclingPool} instance
     * (due to design only one instance ever needed)
     *
     * @return Globally shared instance of {@link NonRecyclingPool}.","public static RecyclerPool<BufferRecycler> nonRecyclingPool() {
    return NonRecyclingPool.GLOBAL;
}","RecyclerPool","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.sharedConcurrentDequePool()","Method","* Accessor for getting the shared/global {@link ConcurrentDequePool} instance.
     *
     * @return Globally shared instance of {@link NonRecyclingPool}.","public static RecyclerPool<BufferRecycler> sharedConcurrentDequePool() {
    return ConcurrentDequePool.GLOBAL;
}","RecyclerPool","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.newConcurrentDequePool()","Method","* Accessor for constructing a new, non-shared {@link ConcurrentDequePool} instance.
     *
     * @return Globally shared instance of {@link NonRecyclingPool}.","public static RecyclerPool<BufferRecycler> newConcurrentDequePool() {
    return ConcurrentDequePool.construct();
}","RecyclerPool","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.sharedLockFreePool()","Method","* Accessor for getting the shared/global {@link LockFreePool} instance.
     *
     * @return Globally shared instance of {@link LockFreePool}.
     *
     * @deprecated Since 2.18: use one of other implementations instead;
     *   see {@link LockFreePool} Javadocs for details","// since 2.18
@Deprecated
public static RecyclerPool<BufferRecycler> sharedLockFreePool() {
    return LockFreePool.GLOBAL;
}","RecyclerPool","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.newLockFreePool()","Method","* Accessor for constructing a new, non-shared {@link LockFreePool} instance.
     *
     * @return Globally shared instance of {@link LockFreePool}.
     *
     * @deprecated Since 2.18: use one of other implementations instead;
     *   see {@link LockFreePool} Javadocs for details","// since 2.18
@Deprecated
public static RecyclerPool<BufferRecycler> newLockFreePool() {
    return LockFreePool.construct();
}","RecyclerPool","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.sharedBoundedPool()","Method","* Accessor for getting the shared/global {@link BoundedPool} instance.
     *
     * @return Globally shared instance of {@link BoundedPool}.","public static RecyclerPool<BufferRecycler> sharedBoundedPool() {
    return BoundedPool.GLOBAL;
}","RecyclerPool","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.newBoundedPool(int)","Method","* Accessor for constructing a new, non-shared {@link BoundedPool} instance.
     *
     * @param size Maximum number of values to pool
     *
     * @return Globally shared instance of {@link BoundedPool}.","public static RecyclerPool<BufferRecycler> newBoundedPool(int size) {
    return BoundedPool.construct(size);
}","RecyclerPool","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.newBoundedPool(int).size","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonRecyclerPools.newBoundedPool(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$ThreadLocalPool","Class","* {@link ThreadLocal}-based {@link RecyclerPool} implementation used for
     * recycling {@link BufferRecycler} instances:
     * see {@link RecyclerPool.ThreadLocalPoolBase} for full explanation
     * of functioning.","Class do not obtain Source Code","No return type","public , static ","com.fasterxml.jackson.core.util.RecyclerPool.ThreadLocalPoolBase",""
"com.fasterxml.jackson.core.util.JsonRecyclerPools$ThreadLocalPool.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$ThreadLocalPool.GLOBAL","Field","No Comment","protected static final ThreadLocalPool GLOBAL = new ThreadLocalPool();","No return type","protected , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$ThreadLocalPool.acquirePooled()","Method","No Comment","@SuppressWarnings(""deprecation"")
@Override
public BufferRecycler acquirePooled() {
    return BufferRecyclers.getBufferRecycler();
}","BufferRecycler","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$ThreadLocalPool.readResolve()","Method","No Comment","protected Object readResolve() {
    return GLOBAL;
}","Object","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$ThreadLocalPool.<init>()","Constructor","No Comment","private ThreadLocalPool() {
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$NonRecyclingPool","Class","* Dummy {@link RecyclerPool} implementation that does not recycle
     * anything but simply creates new instances when asked to acquire items.","Class do not obtain Source Code","No return type","public , static ","com.fasterxml.jackson.core.util.RecyclerPool.NonRecyclingPoolBase",""
"com.fasterxml.jackson.core.util.JsonRecyclerPools$NonRecyclingPool.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$NonRecyclingPool.GLOBAL","Field","No Comment","protected static final NonRecyclingPool GLOBAL = new NonRecyclingPool();","No return type","protected , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$NonRecyclingPool.acquirePooled()","Method","No Comment","@Override
public BufferRecycler acquirePooled() {
    return new BufferRecycler();
}","BufferRecycler","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$NonRecyclingPool.readResolve()","Method","No Comment","protected Object readResolve() {
    return GLOBAL;
}","Object","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$NonRecyclingPool.<init>()","Constructor","No Comment","protected NonRecyclingPool() {
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$ConcurrentDequePool","Class","* {@link RecyclerPool} implementation that uses
     * {@link ConcurrentLinkedDeque} for recycling instances.
     *<p>
     * Pool is unbounded: see {@link RecyclerPool} what this means.","Class do not obtain Source Code","No return type","public , static ","com.fasterxml.jackson.core.util.RecyclerPool.ConcurrentDequePoolBase",""
"com.fasterxml.jackson.core.util.JsonRecyclerPools$ConcurrentDequePool.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$ConcurrentDequePool.GLOBAL","Field","No Comment","protected static final ConcurrentDequePool GLOBAL = new ConcurrentDequePool(SERIALIZATION_SHARED);","No return type","protected , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$ConcurrentDequePool.construct()","Method","No Comment","public static ConcurrentDequePool construct() {
    return new ConcurrentDequePool(SERIALIZATION_NON_SHARED);
}","ConcurrentDequePool","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$ConcurrentDequePool.createPooled()","Method","No Comment","@Override
public BufferRecycler createPooled() {
    return new BufferRecycler();
}","BufferRecycler","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$ConcurrentDequePool.readResolve()","Method","Make sure to re-link to global/shared or non-shared.","protected Object readResolve() {
    return _resolveToShared(GLOBAL).orElseGet(() -> construct());
}","Object","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$ConcurrentDequePool.<init>(int)","Constructor","No Comment","protected ConcurrentDequePool(int serialization) {
    super(serialization);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$ConcurrentDequePool.<init>(int).serialization","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonRecyclerPools$ConcurrentDequePool.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$LockFreePool","Class","* {@link RecyclerPool} implementation that uses
     * a lock free linked list for recycling instances.
     *<p>
     * Pool is unbounded: see {@link RecyclerPool} for
     * details on what this means.
     *<p>
     * NOTE: serious issues found with 2.17.0 lead to deprecation
     * of this implementation -- basically it is possible to have
     * unbalanced acquire/release success rate lead to excessive
     * growth of pooled instances.
     * See <a href=""https://github.com/FasterXML/jackson-core/issues/1260"">
     * jackson-core#1260</a> for details.
     *
     * @deprecated Since 2.18: use other implementations instead","Class do not obtain Source Code","No return type","public , static ","com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase",""
"com.fasterxml.jackson.core.util.JsonRecyclerPools$LockFreePool.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$LockFreePool.GLOBAL","Field","No Comment","protected static final LockFreePool GLOBAL = new LockFreePool(SERIALIZATION_SHARED);","No return type","protected , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$LockFreePool.construct()","Method","No Comment","public static LockFreePool construct() {
    return new LockFreePool(SERIALIZATION_NON_SHARED);
}","LockFreePool","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$LockFreePool.createPooled()","Method","No Comment","@Override
public BufferRecycler createPooled() {
    return new BufferRecycler();
}","BufferRecycler","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$LockFreePool.readResolve()","Method","Make sure to re-link to global/shared or non-shared.","protected Object readResolve() {
    return _resolveToShared(GLOBAL).orElseGet(() -> construct());
}","Object","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$LockFreePool.<init>(int)","Constructor","No Comment","protected LockFreePool(int serialization) {
    super(serialization);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$LockFreePool.<init>(int).serialization","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonRecyclerPools$LockFreePool.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$BoundedPool","Class","* {@link RecyclerPool} implementation that uses
     * a bounded queue ({@link ArrayBlockingQueue} for recycling instances.
     * This is ""bounded"" pool since it will never hold on to more
     * {@link BufferRecycler} instances than its size configuration:
     * the default size is {@link BoundedPoolBase#DEFAULT_CAPACITY}.","Class do not obtain Source Code","No return type","public , static ","com.fasterxml.jackson.core.util.RecyclerPool.BoundedPoolBase",""
"com.fasterxml.jackson.core.util.JsonRecyclerPools$BoundedPool.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$BoundedPool.GLOBAL","Field","No Comment","protected static final BoundedPool GLOBAL = new BoundedPool(SERIALIZATION_SHARED);","No return type","protected , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$BoundedPool.construct(int)","Method","No Comment","public static BoundedPool construct(int capacity) {
    if (capacity <= 0) {
        throw new IllegalArgumentException(""capacity must be > 0, was: "" + capacity);
    }
    return new BoundedPool(capacity);
}","BoundedPool","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$BoundedPool.construct(int).capacity","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonRecyclerPools$BoundedPool.construct(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$BoundedPool.createPooled()","Method","No Comment","@Override
public BufferRecycler createPooled() {
    return new BufferRecycler();
}","BufferRecycler","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$BoundedPool.readResolve()","Method","Make sure to re-link to global/shared or non-shared.","protected Object readResolve() {
    return _resolveToShared(GLOBAL).orElseGet(() -> construct(_serialization));
}","Object","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$BoundedPool.<init>(int)","Constructor","No Comment","protected BoundedPool(int capacityAsId) {
    super(capacityAsId);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools$BoundedPool.<init>(int).capacityAsId","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonRecyclerPools$BoundedPool.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.ThreadLocalPool","Class","* {@link ThreadLocal}-based {@link RecyclerPool} implementation used for
     * recycling {@link BufferRecycler} instances:
     * see {@link RecyclerPool.ThreadLocalPoolBase} for full explanation
     * of functioning.","Class do not obtain Source Code","No return type","public , static ","com.fasterxml.jackson.core.util.RecyclerPool.ThreadLocalPoolBase",""
"com.fasterxml.jackson.core.util.JsonRecyclerPools.ThreadLocalPool.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.ThreadLocalPool.GLOBAL","Field","No Comment","protected static final ThreadLocalPool GLOBAL = new ThreadLocalPool();","No return type","protected , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.ThreadLocalPool.acquirePooled()","Method","No Comment","@SuppressWarnings(""deprecation"")
@Override
public BufferRecycler acquirePooled() {
    return BufferRecyclers.getBufferRecycler();
}","BufferRecycler","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.ThreadLocalPool.readResolve()","Method","No Comment","protected Object readResolve() {
    return GLOBAL;
}","Object","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.ThreadLocalPool.<init>()","Constructor","No Comment","private ThreadLocalPool() {
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.NonRecyclingPool","Class","* Dummy {@link RecyclerPool} implementation that does not recycle
     * anything but simply creates new instances when asked to acquire items.","Class do not obtain Source Code","No return type","public , static ","com.fasterxml.jackson.core.util.RecyclerPool.NonRecyclingPoolBase",""
"com.fasterxml.jackson.core.util.JsonRecyclerPools.NonRecyclingPool.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.NonRecyclingPool.GLOBAL","Field","No Comment","protected static final NonRecyclingPool GLOBAL = new NonRecyclingPool();","No return type","protected , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.NonRecyclingPool.acquirePooled()","Method","No Comment","@Override
public BufferRecycler acquirePooled() {
    return new BufferRecycler();
}","BufferRecycler","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.NonRecyclingPool.readResolve()","Method","No Comment","protected Object readResolve() {
    return GLOBAL;
}","Object","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.NonRecyclingPool.<init>()","Constructor","No Comment","protected NonRecyclingPool() {
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.ConcurrentDequePool","Class","* {@link RecyclerPool} implementation that uses
     * {@link ConcurrentLinkedDeque} for recycling instances.
     *<p>
     * Pool is unbounded: see {@link RecyclerPool} what this means.","Class do not obtain Source Code","No return type","public , static ","com.fasterxml.jackson.core.util.RecyclerPool.ConcurrentDequePoolBase",""
"com.fasterxml.jackson.core.util.JsonRecyclerPools.ConcurrentDequePool.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.ConcurrentDequePool.GLOBAL","Field","No Comment","protected static final ConcurrentDequePool GLOBAL = new ConcurrentDequePool(SERIALIZATION_SHARED);","No return type","protected , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.ConcurrentDequePool.construct()","Method","No Comment","public static ConcurrentDequePool construct() {
    return new ConcurrentDequePool(SERIALIZATION_NON_SHARED);
}","ConcurrentDequePool","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.ConcurrentDequePool.createPooled()","Method","No Comment","@Override
public BufferRecycler createPooled() {
    return new BufferRecycler();
}","BufferRecycler","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.ConcurrentDequePool.readResolve()","Method","Make sure to re-link to global/shared or non-shared.","protected Object readResolve() {
    return _resolveToShared(GLOBAL).orElseGet(() -> construct());
}","Object","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.ConcurrentDequePool.<init>(int)","Constructor","No Comment","protected ConcurrentDequePool(int serialization) {
    super(serialization);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.ConcurrentDequePool.<init>(int).serialization","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonRecyclerPools.ConcurrentDequePool.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.LockFreePool","Class","* {@link RecyclerPool} implementation that uses
     * a lock free linked list for recycling instances.
     *<p>
     * Pool is unbounded: see {@link RecyclerPool} for
     * details on what this means.
     *<p>
     * NOTE: serious issues found with 2.17.0 lead to deprecation
     * of this implementation -- basically it is possible to have
     * unbalanced acquire/release success rate lead to excessive
     * growth of pooled instances.
     * See <a href=""https://github.com/FasterXML/jackson-core/issues/1260"">
     * jackson-core#1260</a> for details.
     *
     * @deprecated Since 2.18: use other implementations instead","Class do not obtain Source Code","No return type","public , static ","com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase",""
"com.fasterxml.jackson.core.util.JsonRecyclerPools.LockFreePool.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.LockFreePool.GLOBAL","Field","No Comment","protected static final LockFreePool GLOBAL = new LockFreePool(SERIALIZATION_SHARED);","No return type","protected , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.LockFreePool.construct()","Method","No Comment","public static LockFreePool construct() {
    return new LockFreePool(SERIALIZATION_NON_SHARED);
}","LockFreePool","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.LockFreePool.createPooled()","Method","No Comment","@Override
public BufferRecycler createPooled() {
    return new BufferRecycler();
}","BufferRecycler","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.LockFreePool.readResolve()","Method","Make sure to re-link to global/shared or non-shared.","protected Object readResolve() {
    return _resolveToShared(GLOBAL).orElseGet(() -> construct());
}","Object","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.LockFreePool.<init>(int)","Constructor","No Comment","protected LockFreePool(int serialization) {
    super(serialization);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.LockFreePool.<init>(int).serialization","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonRecyclerPools.LockFreePool.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.BoundedPool","Class","* {@link RecyclerPool} implementation that uses
     * a bounded queue ({@link ArrayBlockingQueue} for recycling instances.
     * This is ""bounded"" pool since it will never hold on to more
     * {@link BufferRecycler} instances than its size configuration:
     * the default size is {@link BoundedPoolBase#DEFAULT_CAPACITY}.","Class do not obtain Source Code","No return type","public , static ","com.fasterxml.jackson.core.util.RecyclerPool.BoundedPoolBase",""
"com.fasterxml.jackson.core.util.JsonRecyclerPools.BoundedPool.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.BoundedPool.GLOBAL","Field","No Comment","protected static final BoundedPool GLOBAL = new BoundedPool(SERIALIZATION_SHARED);","No return type","protected , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.BoundedPool.construct(int)","Method","No Comment","public static BoundedPool construct(int capacity) {
    if (capacity <= 0) {
        throw new IllegalArgumentException(""capacity must be > 0, was: "" + capacity);
    }
    return new BoundedPool(capacity);
}","BoundedPool","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.BoundedPool.construct(int).capacity","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonRecyclerPools.BoundedPool.construct(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.BoundedPool.createPooled()","Method","No Comment","@Override
public BufferRecycler createPooled() {
    return new BufferRecycler();
}","BufferRecycler","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.BoundedPool.readResolve()","Method","Make sure to re-link to global/shared or non-shared.","protected Object readResolve() {
    return _resolveToShared(GLOBAL).orElseGet(() -> construct(_serialization));
}","Object","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.BoundedPool.<init>(int)","Constructor","No Comment","protected BoundedPool(int capacityAsId) {
    super(capacityAsId);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.JsonRecyclerPools.BoundedPool.<init>(int).capacityAsId","Parameter_1","Belong to com.fasterxml.jackson.core.util.JsonRecyclerPools.BoundedPool.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.util.Instantiatable","Interface","* Add-on interface used to indicate things that may be ""blueprint"" objects
 * which cannot be used as is, but are used for creating usable per-process
 * (serialization, deserialization) instances, using
 * {@link #createInstance} method.
 *<p>
 * Note that some implementations may choose to implement {@link #createInstance}
 * by simply returning 'this': this is acceptable if instances are stateless.
 *
 * @see DefaultPrettyPrinter
 *
 * @since 2.1","Interface do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.util.Instantiatable.createInstance()","Abstract Method","* Method called to ensure that we have a non-blueprint object to use;
     * it is either this object (if stateless), or a newly created object
     * with separate state.
     *
     * @return Actual instance to use","T createInstance();","Object","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints","Class","* The constraints to use for streaming reads: used to guard against malicious
 * input by preventing processing of ""too big"" input constructs (values,
 * structures).
 * Constraints are registered with {@code TokenStreamFactory} (such as
 * {@code JsonFactory}); if nothing explicitly specified, default
 * constraints are used.
 *<p>
 * Currently constrained aspects, with default settings, are:
 * <ul>
 *  <li>Maximum Number value length: default 1000 (see {@link #DEFAULT_MAX_NUM_LEN})
 *   </li>
 *  <li>Maximum String value length: default 20_000_000 (see {@link #DEFAULT_MAX_STRING_LEN})
 *   </li>
 *  <li>Maximum Property name length: default 50_000 (see {@link #DEFAULT_MAX_NAME_LEN})
 *   </li>
 *  <li>Maximum Nesting depth: default 1000 (see {@link #DEFAULT_MAX_DEPTH})
 *   </li>
 *  <li>Maximum Document length: default {@code unlimited} (coded as {@code -1},
 *      (see {@link #DEFAULT_MAX_DOC_LEN})
 *   </li>
 *  <li>Maximum Token count: default {@code unlimited} (coded as {@code -1},
 *      (see {@link #DEFAULT_MAX_TOKEN_COUNT})
 *   </li>
 * </ul>
 *
 * @since 2.15","Class do not obtain Source Code","No return type","public ","","java.io.Serializable"
"com.fasterxml.jackson.core.StreamReadConstraints.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.DEFAULT_MAX_DEPTH","Field","* Default setting for maximum depth: see {@link Builder#maxNestingDepth(int)} for details.","public static final int DEFAULT_MAX_DEPTH = 1000;","No return type","public , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.DEFAULT_MAX_DOC_LEN","Field","* Default setting for maximum document length:
     * see {@link Builder#maxDocumentLength} for details.","public static final long DEFAULT_MAX_DOC_LEN = -1L;","No return type","public , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.DEFAULT_MAX_TOKEN_COUNT","Field","* Default setting for maximum token count:
     * see {@link Builder#maxTokenCount(long)} for details.","public static final long DEFAULT_MAX_TOKEN_COUNT = -1L;","No return type","public , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.DEFAULT_MAX_NUM_LEN","Field","* @since 2.16","public static final int DEFAULT_MAX_NUM_LEN = 1000;","No return type","public , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.DEFAULT_MAX_STRING_LEN","Field","* Default setting for maximum string length: see {@link Builder#maxStringLength(int)}
     * for details.
     *<p>
     * NOTE: Jackson 2.15.0 initially used a lower setting (5_000_000).","public static final int DEFAULT_MAX_STRING_LEN = 20_000_000;","No return type","public , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.DEFAULT_MAX_NAME_LEN","Field","* Default setting for maximum name length: see {@link Builder#maxNameLength(int)}
     * for details.
     *
     * @since 2.16","public static final int DEFAULT_MAX_NAME_LEN = 50_000;","No return type","public , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.MAX_BIGINT_SCALE_MAGNITUDE","Field","* Limit for the maximum magnitude of Scale of {@link java.math.BigDecimal} that can be
     * converted to {@link java.math.BigInteger}.
     *<p>
     * ""100k digits ought to be enough for anybody!""","private static final int MAX_BIGINT_SCALE_MAGNITUDE = 100_000;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints._maxNestingDepth","Field","No Comment","protected final int _maxNestingDepth;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints._maxDocLen","Field","No Comment","protected final long _maxDocLen;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints._maxTokenCount","Field","No Comment","protected final long _maxTokenCount;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints._maxNumLen","Field","No Comment","protected final int _maxNumLen;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints._maxStringLen","Field","No Comment","protected final int _maxStringLen;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints._maxNameLen","Field","No Comment","protected final int _maxNameLen;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.DEFAULT","Field","No Comment","private static StreamReadConstraints DEFAULT = new StreamReadConstraints(DEFAULT_MAX_DEPTH, DEFAULT_MAX_DOC_LEN, DEFAULT_MAX_NUM_LEN, DEFAULT_MAX_STRING_LEN, DEFAULT_MAX_NAME_LEN);","No return type","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.overrideDefaultStreamReadConstraints(StreamReadConstraints)","Method","* Override the default StreamReadConstraints. These defaults are only used when {@link JsonFactory}
     * instances are not configured with their own StreamReadConstraints.
     * <p>
     * Library maintainers should not set this as it will affect other code that uses Jackson.
     * Library maintainers who want to configure StreamReadConstraints for the Jackson usage within their
     * lib should create <code>ObjectMapper</code> instances that have a {@link JsonFactory} instance with
     * the required StreamReadConstraints.
     * <p>
     * This method is meant for users delivering applications. If they use this, they set it when they start
     * their application to avoid having other code initialize their mappers before the defaults are overridden.
     *
     * @param streamReadConstraints new default for StreamReadConstraints (a null value will reset to built-in default)
     * @see #defaults()
     * @see #builder()
     * @since v2.15.2","public static void overrideDefaultStreamReadConstraints(final StreamReadConstraints streamReadConstraints) {
    if (streamReadConstraints == null) {
        DEFAULT = new StreamReadConstraints(DEFAULT_MAX_DEPTH, DEFAULT_MAX_DOC_LEN, DEFAULT_MAX_NUM_LEN, DEFAULT_MAX_STRING_LEN);
    } else {
        DEFAULT = streamReadConstraints;
    }
}","void","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.overrideDefaultStreamReadConstraints(StreamReadConstraints).streamReadConstraints","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints.overrideDefaultStreamReadConstraints(StreamReadConstraints)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.builder()","Method","No Comment","public static Builder builder() {
    return new Builder();
}","Builder","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.defaults()","Method","* @return the default {@link StreamReadConstraints} (when none is set on the {@link JsonFactory} explicitly)
     * @see #overrideDefaultStreamReadConstraints","public static StreamReadConstraints defaults() {
    return DEFAULT;
}","StreamReadConstraints","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.rebuild()","Method","* @return New {@link Builder} initialized with settings of this constraints
     *   instance","public Builder rebuild() {
    return new Builder(this);
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.getMaxNestingDepth()","Method","* Accessor for maximum depth.
     * see {@link Builder#maxNestingDepth(int)} for details.
     *
     * @return Maximum allowed depth","public int getMaxNestingDepth() {
    return _maxNestingDepth;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.getMaxDocumentLength()","Method","* Accessor for maximum document length.
     * see {@link Builder#maxDocumentLength(long)} for details.
     *
     * @return Maximum allowed depth","public long getMaxDocumentLength() {
    return _maxDocLen;
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.hasMaxDocumentLength()","Method","* Convenience method, basically same as:
     *<pre>
     *  getMaxDocumentLength() &gt; 0L
     *</pre>
     *
     * @return {@code True} if this constraints instance has a limit for maximum
     *    document length to enforce; {@code false} otherwise.","public boolean hasMaxDocumentLength() {
    return _maxDocLen > 0L;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.getMaxTokenCount()","Method","* Accessor for maximum token count.
     * see {@link Builder#maxTokenCount(long)} for details.
     *
     * @return Maximum allowed token count
     * @since 2.18","public long getMaxTokenCount() {
    return _maxTokenCount;
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.hasMaxTokenCount()","Method","* Convenience method, basically same as:
     *<pre>
     *  getMaxTokenCount() &gt; 0L
     *</pre>
     *
     * @return {@code True} if this constraints instance has a limit for maximum
     *    token count to enforce; {@code false} otherwise.
     * @since 2.18","public boolean hasMaxTokenCount() {
    return _maxTokenCount > 0L;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.getMaxNumberLength()","Method","* Accessor for maximum length of numbers to decode.
     * see {@link Builder#maxNumberLength(int)} for details.
     *
     * @return Maximum allowed number length","public int getMaxNumberLength() {
    return _maxNumLen;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.getMaxStringLength()","Method","* Accessor for maximum length of strings to decode.
     * see {@link Builder#maxStringLength(int)} for details.
     *
     * @return Maximum allowed string length","public int getMaxStringLength() {
    return _maxStringLen;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.getMaxNameLength()","Method","* Accessor for maximum length of names to decode.
     * see {@link Builder#maxNameLength(int)} for details.
     *
     * @return Maximum allowed name length","public int getMaxNameLength() {
    return _maxNameLen;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.validateNestingDepth(int)","Method","* Convenience method that can be used to verify that the
     * nesting depth does not exceed the maximum specified by this
     * constraints object: if it does, a
     * {@link StreamConstraintsException}
     * is thrown.
     *
     * @param depth count of unclosed objects and arrays
     *
     * @throws StreamConstraintsException If depth exceeds maximum","public void validateNestingDepth(int depth) throws StreamConstraintsException {
    if (depth > _maxNestingDepth) {
        throw _constructException(""Document nesting depth (%d) exceeds the maximum allowed (%d, from %s)"", depth, _maxNestingDepth, _constrainRef(""getMaxNestingDepth""));
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.validateNestingDepth(int).depth","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints.validateNestingDepth(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.validateDocumentLength(long)","Method","* Convenience method that can be used to verify that the
     * document length does not exceed the maximum specified by this
     * constraints object (if any): if it does, a
     * {@link StreamConstraintsException}
     * is thrown.
     *
     * @param len Current length of processed document content
     *
     * @throws StreamConstraintsException If length exceeds maximum
     *
     * @since 2.16","public void validateDocumentLength(long len) throws StreamConstraintsException {
    if ((len > _maxDocLen) && // Note: -1L used as marker for ""unlimited""
    (_maxDocLen > 0L)) {
        throw _constructException(""Document length (%d) exceeds the maximum allowed (%d, from %s)"", len, _maxDocLen, _constrainRef(""getMaxDocumentLength""));
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.validateDocumentLength(long).len","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints.validateDocumentLength(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.validateTokenCount(long)","Method","* Convenience method that can be used to verify that the
     * token count does not exceed the maximum specified by this
     * constraints object (if any): if it does, a
     * {@link StreamConstraintsException}
     * is thrown.
     *
     * @param count Current token count for processed document content
     *
     * @throws StreamConstraintsException If length exceeds maximum
     *
     * @since 2.18","public void validateTokenCount(long count) throws StreamConstraintsException {
    // for performance reasons, it is assumed that users check hasMaxTokenCount()
    // before calling this method - this method will not work properly if hasMaxTokenCount() is false
    if (count > _maxTokenCount) {
        throw _constructException(""Token count (%d) exceeds the maximum allowed (%d, from %s)"", count, _maxTokenCount, _constrainRef(""getMaxTokenCount""));
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.validateTokenCount(long).count","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints.validateTokenCount(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.validateFPLength(int)","Method","* Convenience method that can be used to verify that a floating-point
     * number of specified length does not exceed maximum specified by this
     * constraints object: if it does, a
     * {@link StreamConstraintsException}
     * is thrown.
     *
     * @param length Length of number in input units
     *
     * @throws StreamConstraintsException If length exceeds maximum","public void validateFPLength(int length) throws StreamConstraintsException {
    if (length > _maxNumLen) {
        throw _constructException(""Number value length (%d) exceeds the maximum allowed (%d, from %s)"", length, _maxNumLen, _constrainRef(""getMaxNumberLength""));
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.validateFPLength(int).length","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints.validateFPLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.validateIntegerLength(int)","Method","* Convenience method that can be used to verify that an integer
     * number of specified length does not exceed maximum specific by this
     * constraints object: if it does, a
     * {@link StreamConstraintsException}
     * is thrown.
     *
     * @param length Length of number in input units
     *
     * @throws StreamConstraintsException If length exceeds maximum","public void validateIntegerLength(int length) throws StreamConstraintsException {
    if (length > _maxNumLen) {
        throw _constructException(""Number value length (%d) exceeds the maximum allowed (%d, from %s)"", length, _maxNumLen, _constrainRef(""getMaxNumberLength""));
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.validateIntegerLength(int).length","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints.validateIntegerLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.validateStringLength(int)","Method","* Convenience method that can be used to verify that a String
     * of specified length does not exceed maximum specific by this
     * constraints object: if it does, a
     * {@link StreamConstraintsException}
     * is thrown.
     *
     * @param length Length of string in input units
     *
     * @throws StreamConstraintsException If length exceeds maximum","public void validateStringLength(int length) throws StreamConstraintsException {
    if (length > _maxStringLen) {
        throw _constructException(""String value length (%d) exceeds the maximum allowed (%d, from %s)"", length, _maxStringLen, _constrainRef(""getMaxStringLength""));
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.validateStringLength(int).length","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints.validateStringLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.validateNameLength(int)","Method","* Convenience method that can be used to verify that a name
     * of specified length does not exceed maximum specific by this
     * constraints object: if it does, a
     * {@link StreamConstraintsException}
     * is thrown.
     *
     * @param length Length of name in input units
     *
     * @throws StreamConstraintsException If length exceeds maximum","public void validateNameLength(int length) throws StreamConstraintsException {
    if (length > _maxNameLen) {
        throw _constructException(""Name length (%d) exceeds the maximum allowed (%d, from %s)"", length, _maxNameLen, _constrainRef(""getMaxNameLength""));
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.validateNameLength(int).length","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints.validateNameLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.validateBigIntegerScale(int)","Method","* Convenience method that can be used to verify that a conversion to
     * {@link java.math.BigInteger}
     * {@link StreamConstraintsException}
     * is thrown.
     *
     * @param scale Scale (possibly negative) of {@link java.math.BigDecimal} to convert
     *
     * @throws StreamConstraintsException If magnitude (absolute value) of scale exceeds maximum
     *    allowed","public void validateBigIntegerScale(int scale) throws StreamConstraintsException {
    final int absScale = Math.abs(scale);
    final int limit = MAX_BIGINT_SCALE_MAGNITUDE;
    if (absScale > limit) {
        throw _constructException(""BigDecimal scale (%d) magnitude exceeds the maximum allowed (%d)"", scale, limit);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.validateBigIntegerScale(int).scale","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints.validateBigIntegerScale(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints._constructException(String,Object[])","Method","@since 2.16","protected StreamConstraintsException _constructException(String msgTemplate, Object... args) throws StreamConstraintsException {
    throw new StreamConstraintsException(String.format(msgTemplate, args));
}","StreamConstraintsException","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints._constructException(String,Object[]).msgTemplate","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints._constructException(String,Object[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints._constructException(String,Object[]).args","Parameter_2","Belong to com.fasterxml.jackson.core.StreamReadConstraints._constructException(String,Object[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints._constrainRef(String)","Method","@since 2.16","protected String _constrainRef(String method) {
    return ""`StreamReadConstraints."" + method + ""()`"";
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints._constrainRef(String).method","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints._constrainRef(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int)","Constructor","No Comment","// since 2.16
@Deprecated
protected StreamReadConstraints(final int maxNestingDepth, final long maxDocLen, final int maxNumLen, final int maxStringLen) {
    this(maxNestingDepth, maxDocLen, maxNumLen, maxStringLen, DEFAULT_MAX_NAME_LEN, DEFAULT_MAX_TOKEN_COUNT);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int).maxNestingDepth","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int).maxDocLen","Parameter_2","Belong to com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int).maxNumLen","Parameter_3","Belong to com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int).maxStringLen","Parameter_4","Belong to com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int)","Constructor","* @param maxNestingDepth Maximum input document nesting to allow
     * @param maxDocLen Maximum input document length to allow
     * @param maxNumLen Maximum number representation length to allow
     * @param maxStringLen Maximum String value length to allow
     * @param maxNameLen Maximum Object property name length to allow
     *
     * @since 2.16","// since 2.18
@Deprecated
protected StreamReadConstraints(final int maxNestingDepth, final long maxDocLen, final int maxNumLen, final int maxStringLen, final int maxNameLen) {
    this(maxNestingDepth, maxDocLen, maxNumLen, maxStringLen, maxNameLen, DEFAULT_MAX_TOKEN_COUNT);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int).maxNestingDepth","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int).maxDocLen","Parameter_2","Belong to com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int).maxNumLen","Parameter_3","Belong to com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int).maxStringLen","Parameter_4","Belong to com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int).maxNameLen","Parameter_5","Belong to com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int,long)","Constructor","* @param maxNestingDepth Maximum input document nesting to allow
     * @param maxDocLen Maximum input document length to allow
     * @param maxNumLen Maximum number representation length to allow
     * @param maxStringLen Maximum String value length to allow
     * @param maxNameLen Maximum Object property name length to allow
     * @param maxTokenCount Maximum number of tokens to allow
     *
     * @since 2.18","protected StreamReadConstraints(final int maxNestingDepth, final long maxDocLen, final int maxNumLen, final int maxStringLen, final int maxNameLen, final long maxTokenCount) {
    _maxNestingDepth = maxNestingDepth;
    _maxDocLen = maxDocLen;
    _maxNumLen = maxNumLen;
    _maxStringLen = maxStringLen;
    _maxNameLen = maxNameLen;
    _maxTokenCount = maxTokenCount;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int,long).maxNestingDepth","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int,long).maxDocLen","Parameter_2","Belong to com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int,long).maxNumLen","Parameter_3","Belong to com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int,long).maxStringLen","Parameter_4","Belong to com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int,long).maxNameLen","Parameter_5","Belong to com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int,long).maxTokenCount","Parameter_6","Belong to com.fasterxml.jackson.core.StreamReadConstraints.<init>(int,long,int,int,int,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder","Class","No Comment","Class do not obtain Source Code","No return type","public , static , final ","",""
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxDocLen","Field","No Comment","private long maxDocLen;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxTokenCount","Field","No Comment","private long maxTokenCount;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxNestingDepth","Field","No Comment","private int maxNestingDepth;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxNumLen","Field","No Comment","private int maxNumLen;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxStringLen","Field","No Comment","private int maxStringLen;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxNameLen","Field","No Comment","private int maxNameLen;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxNestingDepth(int)","Method","* Sets the maximum nesting depth. The depth is a count of objects and arrays that have not
         * been closed, `{` and `[` respectively.
         *
         * @param maxNestingDepth the maximum depth
         *
         * @return this builder
         * @throws IllegalArgumentException if the maxNestingDepth is set to a negative value","public Builder maxNestingDepth(final int maxNestingDepth) {
    if (maxNestingDepth < 0) {
        throw new IllegalArgumentException(""Cannot set maxNestingDepth to a negative value"");
    }
    this.maxNestingDepth = maxNestingDepth;
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxNestingDepth(int).maxNestingDepth","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxNestingDepth(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxDocumentLength(long)","Method","* Sets the maximum allowed document length (for positive values over 0) or
         * indicate that any length is acceptable ({@code 0} or negative number).
         * The length is in input units of the input source, that is, in
         * {@code byte}s or {@code char}s.
         *
         * @param maxDocLen the maximum allowed document length if positive number above 0; otherwise
         *   ({@code 0} or negative number) means ""unlimited"".
         *
         * @return this builder
         *
         * @since 2.16","public Builder maxDocumentLength(long maxDocLen) {
    // Negative values and 0 mean ""unlimited"", mark with -1L
    if (maxDocLen <= 0L) {
        maxDocLen = -1L;
    }
    this.maxDocLen = maxDocLen;
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxDocumentLength(long).maxDocLen","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxDocumentLength(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxTokenCount(long)","Method","* Sets the maximum allowed token count (for positive values over 0) or
         * indicate that any count is acceptable ({@code 0} or negative number).
         *
         * <p>
         *   A token is a single unit of input, such as a number, a string, an object
         *   start or end, or an array start or end.
         * </p>
         *
         * @param maxTokenCount the maximum allowed token count if positive number above 0; otherwise
         *   ({@code 0} or negative number) means ""unlimited"".
         *
         * @return this builder
         *
         * @since 2.18","public Builder maxTokenCount(long maxTokenCount) {
    // Negative values and 0 mean ""unlimited"", mark with -1L
    if (maxTokenCount <= 0L) {
        maxTokenCount = -1L;
    }
    this.maxTokenCount = maxTokenCount;
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxTokenCount(long).maxTokenCount","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxTokenCount(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxNumberLength(int)","Method","* Sets the maximum number length (in chars or bytes, depending on input context).
         * The default is 1000.
         *
         * @param maxNumLen the maximum number length (in chars or bytes, depending on input context)
         *
         * @return this builder
         * @throws IllegalArgumentException if the maxNumLen is set to a negative value","public Builder maxNumberLength(final int maxNumLen) {
    if (maxNumLen < 0) {
        throw new IllegalArgumentException(""Cannot set maxNumberLength to a negative value"");
    }
    this.maxNumLen = maxNumLen;
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxNumberLength(int).maxNumLen","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxNumberLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxStringLength(int)","Method","* Sets the maximum string length (in chars or bytes, depending on input context).
         * The default is 20,000,000. This limit is not exact, the limit is applied when we increase
         * internal buffer sizes and an exception will happen at sizes greater than this limit. Some
         * text values that are a little bigger than the limit may be treated as valid but no text
         * values with sizes less than or equal to this limit will be treated as invalid.
         * <p>
         *   Setting this value to lower than the {@link #maxNumberLength(int)} is not recommended.
         * </p>
         *<p>
         * NOTE: Jackson 2.15.0 initially used a lower setting (5_000_000).
         *
         * @param maxStringLen the maximum string length (in chars or bytes, depending on input context)
         *
         * @return this builder
         * @throws IllegalArgumentException if the maxStringLen is set to a negative value","public Builder maxStringLength(final int maxStringLen) {
    if (maxStringLen < 0) {
        throw new IllegalArgumentException(""Cannot set maxStringLen to a negative value"");
    }
    this.maxStringLen = maxStringLen;
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxStringLength(int).maxStringLen","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxStringLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxNameLength(int)","Method","* Sets the maximum name length (in chars or bytes, depending on input context).
         * The default is 50,000. This limit is not exact, the limit is applied when we increase
         * internal buffer sizes and an exception will happen at sizes greater than this limit. Some
         * text values that are a little bigger than the limit may be treated as valid but no text
         * values with sizes less than or equal to this limit will be treated as invalid.
         *
         * @param maxNameLen the maximum string length (in chars or bytes, depending on input context)
         *
         * @return this builder
         * @throws IllegalArgumentException if the maxStringLen is set to a negative value
         * @since 2.16.0","public Builder maxNameLength(final int maxNameLen) {
    if (maxNameLen < 0) {
        throw new IllegalArgumentException(""Cannot set maxNameLen to a negative value"");
    }
    this.maxNameLen = maxNameLen;
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxNameLength(int).maxNameLen","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxNameLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.build()","Method","No Comment","public StreamReadConstraints build() {
    return new StreamReadConstraints(maxNestingDepth, maxDocLen, maxNumLen, maxStringLen, maxNameLen, maxTokenCount);
}","StreamReadConstraints","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.<init>()","Constructor","No Comment","Builder() {
    this(DEFAULT_MAX_DEPTH, DEFAULT_MAX_DOC_LEN, DEFAULT_MAX_TOKEN_COUNT, DEFAULT_MAX_NUM_LEN, DEFAULT_MAX_STRING_LEN, DEFAULT_MAX_NAME_LEN);
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.<init>(int,long,long,int,int,int)","Constructor","No Comment","Builder(final int maxNestingDepth, final long maxDocLen, final long maxTokenCount, final int maxNumLen, final int maxStringLen, final int maxNameLen) {
    this.maxNestingDepth = maxNestingDepth;
    this.maxDocLen = maxDocLen;
    this.maxTokenCount = maxTokenCount;
    this.maxNumLen = maxNumLen;
    this.maxStringLen = maxStringLen;
    this.maxNameLen = maxNameLen;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.<init>(int,long,long,int,int,int).maxNestingDepth","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints$Builder.<init>(int,long,long,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.<init>(int,long,long,int,int,int).maxDocLen","Parameter_2","Belong to com.fasterxml.jackson.core.StreamReadConstraints$Builder.<init>(int,long,long,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.<init>(int,long,long,int,int,int).maxTokenCount","Parameter_3","Belong to com.fasterxml.jackson.core.StreamReadConstraints$Builder.<init>(int,long,long,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.<init>(int,long,long,int,int,int).maxNumLen","Parameter_4","Belong to com.fasterxml.jackson.core.StreamReadConstraints$Builder.<init>(int,long,long,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.<init>(int,long,long,int,int,int).maxStringLen","Parameter_5","Belong to com.fasterxml.jackson.core.StreamReadConstraints$Builder.<init>(int,long,long,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.<init>(int,long,long,int,int,int).maxNameLen","Parameter_6","Belong to com.fasterxml.jackson.core.StreamReadConstraints$Builder.<init>(int,long,long,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.<init>(StreamReadConstraints)","Constructor","No Comment","Builder(StreamReadConstraints src) {
    maxNestingDepth = src._maxNestingDepth;
    maxDocLen = src._maxDocLen;
    maxTokenCount = src._maxTokenCount;
    maxNumLen = src._maxNumLen;
    maxStringLen = src._maxStringLen;
    maxNameLen = src._maxNameLen;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints$Builder.<init>(StreamReadConstraints).src","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints$Builder.<init>(StreamReadConstraints)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder","Class","No Comment","Class do not obtain Source Code","No return type","public , static , final ","",""
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxDocLen","Field","No Comment","private long maxDocLen;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxTokenCount","Field","No Comment","private long maxTokenCount;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxNestingDepth","Field","No Comment","private int maxNestingDepth;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxNumLen","Field","No Comment","private int maxNumLen;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxStringLen","Field","No Comment","private int maxStringLen;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxNameLen","Field","No Comment","private int maxNameLen;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxNestingDepth(int)","Method","* Sets the maximum nesting depth. The depth is a count of objects and arrays that have not
         * been closed, `{` and `[` respectively.
         *
         * @param maxNestingDepth the maximum depth
         *
         * @return this builder
         * @throws IllegalArgumentException if the maxNestingDepth is set to a negative value","public Builder maxNestingDepth(final int maxNestingDepth) {
    if (maxNestingDepth < 0) {
        throw new IllegalArgumentException(""Cannot set maxNestingDepth to a negative value"");
    }
    this.maxNestingDepth = maxNestingDepth;
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxNestingDepth(int).maxNestingDepth","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxNestingDepth(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxDocumentLength(long)","Method","* Sets the maximum allowed document length (for positive values over 0) or
         * indicate that any length is acceptable ({@code 0} or negative number).
         * The length is in input units of the input source, that is, in
         * {@code byte}s or {@code char}s.
         *
         * @param maxDocLen the maximum allowed document length if positive number above 0; otherwise
         *   ({@code 0} or negative number) means ""unlimited"".
         *
         * @return this builder
         *
         * @since 2.16","public Builder maxDocumentLength(long maxDocLen) {
    // Negative values and 0 mean ""unlimited"", mark with -1L
    if (maxDocLen <= 0L) {
        maxDocLen = -1L;
    }
    this.maxDocLen = maxDocLen;
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxDocumentLength(long).maxDocLen","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxDocumentLength(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxTokenCount(long)","Method","* Sets the maximum allowed token count (for positive values over 0) or
         * indicate that any count is acceptable ({@code 0} or negative number).
         *
         * <p>
         *   A token is a single unit of input, such as a number, a string, an object
         *   start or end, or an array start or end.
         * </p>
         *
         * @param maxTokenCount the maximum allowed token count if positive number above 0; otherwise
         *   ({@code 0} or negative number) means ""unlimited"".
         *
         * @return this builder
         *
         * @since 2.18","public Builder maxTokenCount(long maxTokenCount) {
    // Negative values and 0 mean ""unlimited"", mark with -1L
    if (maxTokenCount <= 0L) {
        maxTokenCount = -1L;
    }
    this.maxTokenCount = maxTokenCount;
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxTokenCount(long).maxTokenCount","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxTokenCount(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxNumberLength(int)","Method","* Sets the maximum number length (in chars or bytes, depending on input context).
         * The default is 1000.
         *
         * @param maxNumLen the maximum number length (in chars or bytes, depending on input context)
         *
         * @return this builder
         * @throws IllegalArgumentException if the maxNumLen is set to a negative value","public Builder maxNumberLength(final int maxNumLen) {
    if (maxNumLen < 0) {
        throw new IllegalArgumentException(""Cannot set maxNumberLength to a negative value"");
    }
    this.maxNumLen = maxNumLen;
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxNumberLength(int).maxNumLen","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxNumberLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxStringLength(int)","Method","* Sets the maximum string length (in chars or bytes, depending on input context).
         * The default is 20,000,000. This limit is not exact, the limit is applied when we increase
         * internal buffer sizes and an exception will happen at sizes greater than this limit. Some
         * text values that are a little bigger than the limit may be treated as valid but no text
         * values with sizes less than or equal to this limit will be treated as invalid.
         * <p>
         *   Setting this value to lower than the {@link #maxNumberLength(int)} is not recommended.
         * </p>
         *<p>
         * NOTE: Jackson 2.15.0 initially used a lower setting (5_000_000).
         *
         * @param maxStringLen the maximum string length (in chars or bytes, depending on input context)
         *
         * @return this builder
         * @throws IllegalArgumentException if the maxStringLen is set to a negative value","public Builder maxStringLength(final int maxStringLen) {
    if (maxStringLen < 0) {
        throw new IllegalArgumentException(""Cannot set maxStringLen to a negative value"");
    }
    this.maxStringLen = maxStringLen;
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxStringLength(int).maxStringLen","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxStringLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxNameLength(int)","Method","* Sets the maximum name length (in chars or bytes, depending on input context).
         * The default is 50,000. This limit is not exact, the limit is applied when we increase
         * internal buffer sizes and an exception will happen at sizes greater than this limit. Some
         * text values that are a little bigger than the limit may be treated as valid but no text
         * values with sizes less than or equal to this limit will be treated as invalid.
         *
         * @param maxNameLen the maximum string length (in chars or bytes, depending on input context)
         *
         * @return this builder
         * @throws IllegalArgumentException if the maxStringLen is set to a negative value
         * @since 2.16.0","public Builder maxNameLength(final int maxNameLen) {
    if (maxNameLen < 0) {
        throw new IllegalArgumentException(""Cannot set maxNameLen to a negative value"");
    }
    this.maxNameLen = maxNameLen;
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxNameLength(int).maxNameLen","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints.Builder.maxNameLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.build()","Method","No Comment","public StreamReadConstraints build() {
    return new StreamReadConstraints(maxNestingDepth, maxDocLen, maxNumLen, maxStringLen, maxNameLen, maxTokenCount);
}","StreamReadConstraints","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.<init>()","Constructor","No Comment","Builder() {
    this(DEFAULT_MAX_DEPTH, DEFAULT_MAX_DOC_LEN, DEFAULT_MAX_TOKEN_COUNT, DEFAULT_MAX_NUM_LEN, DEFAULT_MAX_STRING_LEN, DEFAULT_MAX_NAME_LEN);
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.<init>(int,long,long,int,int,int)","Constructor","No Comment","Builder(final int maxNestingDepth, final long maxDocLen, final long maxTokenCount, final int maxNumLen, final int maxStringLen, final int maxNameLen) {
    this.maxNestingDepth = maxNestingDepth;
    this.maxDocLen = maxDocLen;
    this.maxTokenCount = maxTokenCount;
    this.maxNumLen = maxNumLen;
    this.maxStringLen = maxStringLen;
    this.maxNameLen = maxNameLen;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.<init>(int,long,long,int,int,int).maxNestingDepth","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints.Builder.<init>(int,long,long,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.<init>(int,long,long,int,int,int).maxDocLen","Parameter_2","Belong to com.fasterxml.jackson.core.StreamReadConstraints.Builder.<init>(int,long,long,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.<init>(int,long,long,int,int,int).maxTokenCount","Parameter_3","Belong to com.fasterxml.jackson.core.StreamReadConstraints.Builder.<init>(int,long,long,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.<init>(int,long,long,int,int,int).maxNumLen","Parameter_4","Belong to com.fasterxml.jackson.core.StreamReadConstraints.Builder.<init>(int,long,long,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.<init>(int,long,long,int,int,int).maxStringLen","Parameter_5","Belong to com.fasterxml.jackson.core.StreamReadConstraints.Builder.<init>(int,long,long,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.<init>(int,long,long,int,int,int).maxNameLen","Parameter_6","Belong to com.fasterxml.jackson.core.StreamReadConstraints.Builder.<init>(int,long,long,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.<init>(StreamReadConstraints)","Constructor","No Comment","Builder(StreamReadConstraints src) {
    maxNestingDepth = src._maxNestingDepth;
    maxDocLen = src._maxDocLen;
    maxTokenCount = src._maxTokenCount;
    maxNumLen = src._maxNumLen;
    maxStringLen = src._maxStringLen;
    maxNameLen = src._maxNameLen;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadConstraints.Builder.<init>(StreamReadConstraints).src","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadConstraints.Builder.<init>(StreamReadConstraints)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonTokenId","Interface","* Interface defined to contain ids accessible with {@link JsonToken#id()}.
 * Needed because it is impossible to define these constants in
 * {@link JsonToken} itself, as static constants (oddity of how Enums
 * are implemented by JVM).
 *
 * @since 2.3","Interface do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.JsonTokenId.ID_NOT_AVAILABLE","Field","* Id used to represent {@link JsonToken#NOT_AVAILABLE}, used in
     * cases where a token may become available when more input
     * is available: this occurs in non-blocking use cases.","public final static int ID_NOT_AVAILABLE = -1;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonTokenId.ID_NO_TOKEN","Field","* Id used to represent the case where no {@link JsonToken}
     * is available: either because {@link JsonParser} has not been
     * advanced to first token, or because no more tokens will be
     * available (end-of-input or explicit closing of parser}.","public final static int ID_NO_TOKEN = 0;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonTokenId.ID_START_OBJECT","Field","* Id used to represent {@link JsonToken#START_OBJECT}","public final static int ID_START_OBJECT = 1;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonTokenId.ID_END_OBJECT","Field","* Id used to represent {@link JsonToken#END_OBJECT}","public final static int ID_END_OBJECT = 2;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonTokenId.ID_START_ARRAY","Field","* Id used to represent {@link JsonToken#START_ARRAY}","public final static int ID_START_ARRAY = 3;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonTokenId.ID_END_ARRAY","Field","* Id used to represent {@link JsonToken#END_ARRAY}","public final static int ID_END_ARRAY = 4;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonTokenId.ID_FIELD_NAME","Field","* Id used to represent {@link JsonToken#FIELD_NAME}
     *<p>
     * NOTE: in Jackson 3.x this enum is renamed as {@code ID_PROPERTY_NAME}","public final static int ID_FIELD_NAME = 5;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonTokenId.ID_STRING","Field","* Id used to represent {@link JsonToken#VALUE_STRING}","public final static int ID_STRING = 6;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonTokenId.ID_NUMBER_INT","Field","* Id used to represent {@link JsonToken#VALUE_NUMBER_INT}","public final static int ID_NUMBER_INT = 7;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonTokenId.ID_NUMBER_FLOAT","Field","* Id used to represent {@link JsonToken#VALUE_NUMBER_FLOAT}","public final static int ID_NUMBER_FLOAT = 8;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonTokenId.ID_TRUE","Field","* Id used to represent {@link JsonToken#VALUE_TRUE}","public final static int ID_TRUE = 9;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonTokenId.ID_FALSE","Field","* Id used to represent {@link JsonToken#VALUE_FALSE}","public final static int ID_FALSE = 10;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonTokenId.ID_NULL","Field","No Comment","public final static int ID_NULL = 11;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonTokenId.ID_EMBEDDED_OBJECT","Field","* Id used to represent {@link JsonToken#VALUE_EMBEDDED_OBJECT}","public final static int ID_EMBEDDED_OBJECT = 12;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken","Enum","* Enumeration for basic token types used for returning results
 * of parsing JSON content.","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.JsonToken.NOT_AVAILABLE","Enum Constant","* NOT_AVAILABLE can be returned if {@link JsonParser}
     * implementation cannot currently return the requested
     * token (usually next one), or even if any will be
     * available, but that may be able to determine this in
     * future. This is the case with non-blocking parsers --
     * they cannot block to wait for more data to parse and
     * must return something.","NOT_AVAILABLE(null, JsonTokenId.ID_NOT_AVAILABLE)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.START_OBJECT","Enum Constant","* START_OBJECT is returned when encountering '{'
     * which signals starting of an Object value.","START_OBJECT(""{"", JsonTokenId.ID_START_OBJECT)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.END_OBJECT","Enum Constant","* END_OBJECT is returned when encountering '}'
     * which signals ending of an Object value","END_OBJECT(""}"", JsonTokenId.ID_END_OBJECT)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.START_ARRAY","Enum Constant","* START_ARRAY is returned when encountering '['
     * which signals starting of an Array value","START_ARRAY(""["", JsonTokenId.ID_START_ARRAY)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.END_ARRAY","Enum Constant","* END_ARRAY is returned when encountering ']'
     * which signals ending of an Array value","END_ARRAY(""]"", JsonTokenId.ID_END_ARRAY)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.FIELD_NAME","Enum Constant","* FIELD_NAME is returned when a String token is encountered
     * as a field name (same lexical value, different function).
     *<p>
     * NOTE: in Jackson 3.x this enum is renamed as {@code PROPERTY_NAME}","FIELD_NAME(null, JsonTokenId.ID_FIELD_NAME)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT","Enum Constant","* Placeholder token returned when the input source has a concept
     * of embedded Object that are not accessible as usual structure
     * (of starting with {@link #START_OBJECT}, having values, ending with
     * {@link #END_OBJECT}), but as ""raw"" objects.
     *<p>
     * Note: this token is never returned by regular JSON readers, but
     * only by readers that expose other kinds of source (like
     * <code>JsonNode</code>-based JSON trees, Maps, Lists and such).","VALUE_EMBEDDED_OBJECT(null, JsonTokenId.ID_EMBEDDED_OBJECT)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.VALUE_STRING","Enum Constant","* VALUE_STRING is returned when a String token is encountered
     * in value context (array element, field value, or root-level
     * stand-alone value)","VALUE_STRING(null, JsonTokenId.ID_STRING)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT","Enum Constant","* VALUE_NUMBER_INT is returned when an integer numeric token is
     * encountered in value context: that is, a number that does
     * not have floating point or exponent marker in it (consists
     * only of an optional sign, followed by one or more digits;
     * or, for binary formats, is indicated as integral number
     * by internal representation).","VALUE_NUMBER_INT(null, JsonTokenId.ID_NUMBER_INT)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT","Enum Constant","* VALUE_NUMBER_FLOAT is returned when a numeric token other
     * than integer is encountered: that is, a number that does
     * have floating point or exponent marker in it, in addition
     * to one or more digits (or, for non-textual formats,
     * has internal floating-point representation).","VALUE_NUMBER_FLOAT(null, JsonTokenId.ID_NUMBER_FLOAT)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.VALUE_TRUE","Enum Constant","* VALUE_TRUE is returned when encountering literal ""true"" in
     * value context","VALUE_TRUE(""true"", JsonTokenId.ID_TRUE)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.VALUE_FALSE","Enum Constant","* VALUE_FALSE is returned when encountering literal ""false"" in
     * value context","VALUE_FALSE(""false"", JsonTokenId.ID_FALSE)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.VALUE_NULL","Enum Constant","* VALUE_NULL is returned when encountering literal ""null"" in
     * value context","VALUE_NULL(""null"", JsonTokenId.ID_NULL)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.id()","Method","No Comment","public final int id() {
    return _id;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.asString()","Method","No Comment","public final String asString() {
    return _serialized;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.asCharArray()","Method","No Comment","public final char[] asCharArray() {
    return _serializedChars;
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.asByteArray()","Method","No Comment","public final byte[] asByteArray() {
    return _serializedBytes;
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.isNumeric()","Method","* @return {@code True} if this token is {@code VALUE_NUMBER_INT} or {@code VALUE_NUMBER_FLOAT},
     *   {@code false} otherwise","public final boolean isNumeric() {
    return _isNumber;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.isStructStart()","Method","* Accessor that is functionally equivalent to:
     * <code>
     *    this == JsonToken.START_OBJECT || this == JsonToken.START_ARRAY
     * </code>
     *
     * @return {@code True} if this token is {@code START_OBJECT} or {@code START_ARRAY},
     *   {@code false} otherwise
     *
     * @since 2.3","public final boolean isStructStart() {
    return _isStructStart;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.isStructEnd()","Method","* Accessor that is functionally equivalent to:
     * <code>
     *    this == JsonToken.END_OBJECT || this == JsonToken.END_ARRAY
     * </code>
     *
     * @return {@code True} if this token is {@code END_OBJECT} or {@code END_ARRAY},
     *   {@code false} otherwise
     *
     * @since 2.3","public final boolean isStructEnd() {
    return _isStructEnd;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.isScalarValue()","Method","* Method that can be used to check whether this token represents
     * a valid non-structured value. This means all {@code VALUE_xxx} tokens;
     * excluding {@code START_xxx} and {@code END_xxx} tokens as well
     * {@code FIELD_NAME}.
     *
     * @return {@code True} if this token is a scalar value token (one of
     *   {@code VALUE_xxx} tokens), {@code false} otherwise","public final boolean isScalarValue() {
    return _isScalar;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.isBoolean()","Method","* @return {@code True} if this token is {@code VALUE_TRUE} or {@code VALUE_FALSE},
     *   {@code false} otherwise","public final boolean isBoolean() {
    return _isBoolean;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.valueDescFor(JsonToken)","Method","* Helper method for constructing description like ""Object value"" given
     * {@link JsonToken} encountered.
     *
     * @param t Token to get description for
     *
     * @return String description of given token
     *
     * @since 2.16","public static String valueDescFor(JsonToken t) {
    if (t == null) {
        return ""<end of input>"";
    }
    switch(t) {
        case START_OBJECT:
        case END_OBJECT:
        case FIELD_NAME:
            return ""Object value"";
        case START_ARRAY:
        case END_ARRAY:
            return ""Array value"";
        case VALUE_FALSE:
        case VALUE_TRUE:
            return ""Boolean value"";
        case VALUE_EMBEDDED_OBJECT:
            return ""Embedded Object value"";
        case VALUE_NUMBER_FLOAT:
            return ""Floating-point value"";
        case VALUE_NUMBER_INT:
            return ""Integer value"";
        case VALUE_STRING:
            return ""String value"";
        case VALUE_NULL:
            return ""Null value"";
        case NOT_AVAILABLE:
        default:
            return ""[Unavailable value]"";
    }
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.valueDescFor(JsonToken).t","Parameter_1","Belong to com.fasterxml.jackson.core.JsonToken.valueDescFor(JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.<init>(String,int)","Constructor","* @param token representation for this token, if there is a
     *   single static representation; null otherwise
     * @param id Numeric id from {@link JsonTokenId}","JsonToken(String token, int id) {
    if (token == null) {
        _serialized = null;
        _serializedChars = null;
        _serializedBytes = null;
    } else {
        _serialized = token;
        _serializedChars = token.toCharArray();
        // It's all in ascii, can just case...
        int len = _serializedChars.length;
        _serializedBytes = new byte[len];
        for (int i = 0; i < len; ++i) {
            _serializedBytes[i] = (byte) _serializedChars[i];
        }
    }
    _id = id;
    _isBoolean = (id == JsonTokenId.ID_FALSE || id == JsonTokenId.ID_TRUE);
    _isNumber = (id == JsonTokenId.ID_NUMBER_INT || id == JsonTokenId.ID_NUMBER_FLOAT);
    _isStructStart = (id == JsonTokenId.ID_START_OBJECT || id == JsonTokenId.ID_START_ARRAY);
    _isStructEnd = (id == JsonTokenId.ID_END_OBJECT || id == JsonTokenId.ID_END_ARRAY);
    _isScalar = !_isStructStart && !_isStructEnd && (id != JsonTokenId.ID_FIELD_NAME) && (id != JsonTokenId.ID_NOT_AVAILABLE);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.<init>(String,int).token","Parameter_1","Belong to com.fasterxml.jackson.core.JsonToken.<init>(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonToken.<init>(String,int).id","Parameter_2","Belong to com.fasterxml.jackson.core.JsonToken.<init>(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode","Interface","* Marker interface used to denote JSON Tree nodes, as far as
 * the core package knows them (which is very little): mostly
 * needed to allow {@link ObjectCodec} to have some level
 * of interoperability.
 * Most functionality is within <code>JsonNode</code>
 * base class in <code>mapper</code> package.
 *<p>
 * Note that in Jackson 1.x <code>JsonNode</code> itself
 * was part of core package: Jackson 2.x refactored this
 * since conceptually Tree Model is part of mapper package,
 * and so part visible to <code>core</code> package should
 * be minimized.
 *<p>
 * NOTE: starting with Jackson 2.2, there is more functionality
 * available via this class, and the intent was that this should
 * form actual base for multiple alternative tree representations;
 * for example, immutable trees could use different implementation
 * than mutable trees.
 *
 * @since 2.2","Interface do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.TreeNode.asToken()","Abstract Method","* Method that can be used for efficient type detection
     * when using stream abstraction for traversing nodes.
     * Will return the first {@link JsonToken} that equivalent
     * stream event would produce (for most nodes there is just
     * one token but for structured/container types multiple)
     *
     * @return {@link JsonToken} that is most closely associated with the node type","JsonToken asToken();","JsonToken","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.numberType()","Abstract Method","* If this node is a numeric type (as per {@link JsonToken#isNumeric}),
     * returns native type that node uses to store the numeric value;
     * otherwise returns null.
     *
     * @return Type of number contained, if any; or null if node does not
     *  contain numeric value.","JsonParser.NumberType numberType();","JsonParser.NumberType","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.size()","Abstract Method","* Method that returns number of child nodes this node contains:
     * for Array nodes, number of child elements, for Object nodes,
     * number of fields, and for all other nodes 0.
     *
     * @return For non-container nodes returns 0; for arrays number of
     *   contained elements, and for objects number of fields.
     *
     * @since 2.2","int size();","int","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.isValueNode()","Abstract Method","* Method that returns true for all value nodes: ones that
     * are not containers, and that do not represent ""missing"" nodes
     * in the path. Such value nodes represent String, Number, Boolean
     * and null values from JSON.
     *<p>
     * Note: one and only one of methods {@link #isValueNode},
     * {@link #isContainerNode} and {@link #isMissingNode} ever
     * returns true for any given node.
     *
     * @return True if this node is considered a value node; something that
     *    represents either a scalar value or explicit {@code null}
     *
     * @since 2.2","boolean isValueNode();","boolean","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.isContainerNode()","Abstract Method","* Method that returns true for container nodes: Arrays and Objects.
     *<p>
     * Note: one and only one of methods {@link #isValueNode},
     * {@link #isContainerNode} and {@link #isMissingNode} ever
     * returns true for any given node.
     *
     * @return {@code True} for Array and Object nodes, {@code false} otherwise
     *
     * @since 2.2","boolean isContainerNode();","boolean","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.isMissingNode()","Abstract Method","* Method that returns true for ""virtual"" nodes which represent
     * missing entries constructed by path accessor methods when
     * there is no actual node matching given criteria.
     *<p>
     * Note: one and only one of methods {@link #isValueNode},
     * {@link #isContainerNode} and {@link #isMissingNode} ever
     * returns true for any given node.
     *
     * @return {@code True} if this node represents a ""missing"" node
     *
     * @since 2.2","boolean isMissingNode();","boolean","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.isArray()","Abstract Method","* Method that returns true if this node is an Array node, false
     * otherwise.
     * Note that if true is returned, {@link #isContainerNode}
     * must also return true.
     *
     * @return {@code True} for Array nodes, {@code false} for everything else
     *
     * @since 2.2","boolean isArray();","boolean","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.isObject()","Abstract Method","* Method that returns true if this node is an Object node, false
     * otherwise.
     * Note that if true is returned, {@link #isContainerNode}
     * must also return true.
     *
     * @return {@code True} for Object nodes, {@code false} for everything else
     *
     * @since 2.2","boolean isObject();","boolean","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.get(String)","Abstract Method","* Method for accessing value of the specified field of
     * an object node. If this node is not an object (or it
     * does not have a value for specified field name), or
     * if there is no field with such name, null is returned.
     *<p>
     * NOTE: handling of explicit null values may vary between
     * implementations; some trees may retain explicit nulls, others
     * not.
     *
     * @param fieldName Name of the field (of Object node) to access
     *
     * @return Node that represent value of the specified field,
     *   if this node is an Object and has value for the specified
     *   field; {@code null} otherwise.
     *
     * @since 2.2","TreeNode get(String fieldName);","TreeNode","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.get(String).fieldName","Parameter_1","Belong to com.fasterxml.jackson.core.TreeNode.get(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.get(int)","Abstract Method","* Method for accessing value of the specified element of
     * an array node. For other nodes, null is returned.
     *<p>
     * For array nodes, index specifies
     * exact location within array and allows for efficient iteration
     * over child elements (underlying storage is guaranteed to
     * be efficiently indexable, i.e. has random-access to elements).
     * If index is less than 0, or equal-or-greater than
     * <code>node.size()</code>, null is returned; no exception is
     * thrown for any index.
     *
     * @param index Index of the Array node element to access
     *
     * @return Node that represent value of the specified element,
     *   if this node is an array and has specified element;
     *   {@code null} otherwise.
     *
     * @since 2.2","TreeNode get(int index);","TreeNode","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.get(int).index","Parameter_1","Belong to com.fasterxml.jackson.core.TreeNode.get(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.path(String)","Abstract Method","* Method for accessing value of the specified field of
     * an object node.
     * For other nodes, a ""missing node"" (virtual node
     * for which {@link #isMissingNode} returns true) is returned.
     *
     * @param fieldName Name of the field (of Object node) to access
     *
     * @return Node that represent value of the specified field,
     *   if this node is an object and has value for the specified field;
     *   otherwise ""missing node"" is returned.
     *
     * @since 2.2","TreeNode path(String fieldName);","TreeNode","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.path(String).fieldName","Parameter_1","Belong to com.fasterxml.jackson.core.TreeNode.path(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.path(int)","Abstract Method","* Method for accessing value of the specified element of
     * an array node.
     * For other nodes, a ""missing node"" (virtual node
     * for which {@link #isMissingNode} returns true) is returned.
     *<p>
     * For array nodes, index specifies
     * exact location within array and allows for efficient iteration
     * over child elements (underlying storage is guaranteed to
     * be efficiently indexable, i.e. has random-access to elements).
     * If index is less than 0, or equal-or-greater than
     * <code>node.size()</code>, ""missing node"" is returned; no exception is
     * thrown for any index.
     *
     * @param index Index of the Array node element to access
     *
     * @return Node that represent value of the specified element,
     *   if this node is an array and has specified element;
     *   otherwise ""missing node"" is returned.
     *
     * @since 2.2","TreeNode path(int index);","TreeNode","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.path(int).index","Parameter_1","Belong to com.fasterxml.jackson.core.TreeNode.path(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.fieldNames()","Abstract Method","* Method for accessing names of all fields for this node, if (and only if)
     * this node is an Object node. Number of field names accessible
     * will be {@link #size}.
     *
     * @return An iterator for traversing names of all fields this Object node
     *   has (if Object node); empty {@link Iterator} otherwise (never {@code null}).
     *
     * @since 2.2","Iterator<String> fieldNames();","Iterator","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.at(JsonPointer)","Abstract Method","* Method for locating node specified by given JSON pointer instances.
     * Method will never return null; if no matching node exists,
     * will return a node for which {@link TreeNode#isMissingNode()} returns true.
     *
     * @param ptr {@link JsonPointer} expression for descendant node to return
     *
     * @return Node that matches given JSON Pointer, if any: if no match exists,
     *   will return a ""missing"" node (for which {@link TreeNode#isMissingNode()}
     *   returns {@code true}).
     *
     * @since 2.3","TreeNode at(JsonPointer ptr);","TreeNode","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.at(JsonPointer).ptr","Parameter_1","Belong to com.fasterxml.jackson.core.TreeNode.at(JsonPointer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.at(String)","Abstract Method","* Convenience method that is functionally equivalent to:
     *<pre>
     *   return at(JsonPointer.valueOf(jsonPointerExpression));
     *</pre>
     *<p>
     * Note that if the same expression is used often, it is preferable to construct
     * {@link JsonPointer} instance once and reuse it: this method will not perform
     * any caching of compiled expressions.
     *
     * @param jsonPointerExpression Expression to compile as a {@link JsonPointer}
     *   instance
     *
     * @return Node that matches given JSON Pointer, if any: if no match exists,
     *   will return a ""missing"" node (for which {@link TreeNode#isMissingNode()}
     *   returns {@code true}).
     *
     * @since 2.3","TreeNode at(String jsonPointerExpression) throws IllegalArgumentException;","TreeNode","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.at(String).jsonPointerExpression","Parameter_1","Belong to com.fasterxml.jackson.core.TreeNode.at(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.traverse()","Abstract Method","* Method for constructing a {@link JsonParser} instance for
     * iterating over contents of the tree that this node is root of.
     * Functionally equivalent to first serializing tree using
     * {@link ObjectCodec} and then re-parsing but
     * more efficient.
     *<p>
     * NOTE: constructed parser instance will NOT initially point to a token,
     * so before passing it to deserializers, it is typically necessary to
     * advance it to the first available token by calling {@link JsonParser#nextToken()}.
     *<p>
     * Also note that calling this method will <b>NOT</b> pass {@link ObjectCodec}
     * reference, so data-binding callback methods like {@link JsonParser#readValueAs(Class)}
     * will not work with calling {@link JsonParser#setCodec}).
     * It is often better to call {@link #traverse(ObjectCodec)} to pass the codec explicitly.
     *
     * @return {@link JsonParser} that will stream over contents of this node","JsonParser traverse();","JsonParser","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.traverse(ObjectCodec)","Abstract Method","* Same as {@link #traverse()}, but additionally passes {@link com.fasterxml.jackson.core.ObjectCodec}
     * to use if {@link JsonParser#readValueAs(Class)} is used (otherwise caller must call
     * {@link JsonParser#setCodec} on response explicitly).
     *<p>
     * NOTE: constructed parser instance will NOT initially point to a token,
     * so before passing it to deserializers, it is typically necessary to
     * advance it to the first available token by calling {@link JsonParser#nextToken()}.
     *
     * @param codec {@link ObjectCodec} to associate with parser constructed
     *
     * @return {@link JsonParser} that will stream over contents of this node
     *
     * @since 2.1","JsonParser traverse(ObjectCodec codec);","JsonParser","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeNode.traverse(ObjectCodec).codec","Parameter_1","Belong to com.fasterxml.jackson.core.TreeNode.traverse(ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory","Class","* The main factory class of Jackson package, used to configure and
 * construct
 * reader (aka parser, {@link JsonParser})
 * and
 * writer (aka generator, {@link JsonGenerator})
 * instances.
 *<p>
 * Factory instances are thread-safe and reusable after configuration
 * (if any). Typically applications and services use only a single
 * globally shared factory instance, unless they need differently
 * configured factories. Factory reuse is important if efficiency matters;
 * most recycling of expensive construct is done on per-factory basis.
 *<p>
 * Creation of a factory instance is a light-weight operation,
 * and since there is no need for pluggable alternative implementations
 * (as there is no ""standard"" JSON processor API to implement),
 * the default constructor is used for constructing factory
 * instances.
 *
 * @author Tatu Saloranta","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.TokenStreamFactory","java.io.Serializable"
"com.fasterxml.jackson.core.JsonFactory.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 2;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.FORMAT_NAME_JSON","Field","* Name used to identify JSON format
     * (and returned by {@link #getFormatName()}","public final static String FORMAT_NAME_JSON = ""JSON"";","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.DEFAULT_FACTORY_FEATURE_FLAGS","Field","* Bitfield (set of flags) of all factory features that are enabled by default.","protected final static int DEFAULT_FACTORY_FEATURE_FLAGS = JsonFactory.Feature.collectDefaults();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.DEFAULT_PARSER_FEATURE_FLAGS","Field","* Bitfield (set of flags) of all parser features that are enabled
     * by default.","protected final static int DEFAULT_PARSER_FEATURE_FLAGS = JsonParser.Feature.collectDefaults();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.DEFAULT_GENERATOR_FEATURE_FLAGS","Field","* Bitfield (set of flags) of all generator features that are enabled
     * by default.","protected final static int DEFAULT_GENERATOR_FEATURE_FLAGS = JsonGenerator.Feature.collectDefaults();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.DEFAULT_ROOT_VALUE_SEPARATOR","Field","No Comment","public final static SerializableString DEFAULT_ROOT_VALUE_SEPARATOR = new SerializedString(Separators.DEFAULT_ROOT_VALUE_SEPARATOR);","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.DEFAULT_QUOTE_CHAR","Field","* @since 2.10","public final static char DEFAULT_QUOTE_CHAR = '""';","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._rootCharSymbols","Field","* Each factory comes equipped with a shared root symbol table.
     * It should not be linked back to the original blueprint, to
     * avoid contents from leaking between factories.
     *<p>
     * NOTE: non-final since 2.17 due to need to re-create if
     * {@link StreamReadConstraints} re-configured for factory.","protected transient CharsToNameCanonicalizer _rootCharSymbols;","No return type","protected , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._byteSymbolCanonicalizer","Field","* Alternative to the basic symbol table, some stream-based
     * parsers use different name canonicalization method.
     *
     * @since 2.6","protected final transient ByteQuadsCanonicalizer _byteSymbolCanonicalizer = ByteQuadsCanonicalizer.createRoot();","No return type","protected , final , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._factoryFeatures","Field","* Currently enabled factory features.","protected int _factoryFeatures = DEFAULT_FACTORY_FEATURE_FLAGS;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._parserFeatures","Field","* Currently enabled parser features.","protected int _parserFeatures = DEFAULT_PARSER_FEATURE_FLAGS;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._generatorFeatures","Field","* Currently enabled generator features.","protected int _generatorFeatures = DEFAULT_GENERATOR_FEATURE_FLAGS;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._recyclerPool","Field","* {@link RecyclerPool} configured for use by this factory: used for
     * recycling underlying read and/or write buffers via {@link BufferRecycler}.
     *
     * @since 2.16","protected RecyclerPool<BufferRecycler> _recyclerPool;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._objectCodec","Field","* Object that implements conversion functionality between
     * Java objects and JSON content. For base JsonFactory implementation
     * usually not set by default, but can be explicitly set.
     * Sub-classes (like @link org.codehaus.jackson.map.MappingJsonFactory}
     * usually provide an implementation.","protected ObjectCodec _objectCodec;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._characterEscapes","Field","* Definition of custom character escapes to use for generators created
     * by this factory, if any. If null, standard data format specific
     * escapes are used.","protected CharacterEscapes _characterEscapes;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._streamReadConstraints","Field","* Read constraints to use for {@link JsonParser}s constructed using
     * this factory.
     *
     * @since 2.15","protected StreamReadConstraints _streamReadConstraints;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._errorReportConfiguration","Field","* Container for configuration values used when handling erroneous token inputs. 
     *
     * @since 2.16","protected ErrorReportConfiguration _errorReportConfiguration;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._streamWriteConstraints","Field","* Write constraints to use for {@link JsonGenerator}s constructed using
     * this factory.
     *
     * @since 2.16","protected StreamWriteConstraints _streamWriteConstraints;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._inputDecorator","Field","* Optional helper object that may decorate input sources, to do
     * additional processing on input during parsing.","protected InputDecorator _inputDecorator;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._outputDecorator","Field","* Optional helper object that may decorate output object, to do
     * additional processing on output during content generation.","protected OutputDecorator _outputDecorator;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._generatorDecorators","Field","* List of {@link JsonGeneratorDecorator}s to apply to {@link JsonGenerator}s
     * after construction; applied in the order of addition.
     *
     * @since 2.16","protected final List<JsonGeneratorDecorator> _generatorDecorators;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._rootValueSeparator","Field","* Separator used between root-level values, if any; null indicates
     * ""do not add separator"".
     * Default separator is a single space character.
     *
     * @since 2.1","protected SerializableString _rootValueSeparator = DEFAULT_ROOT_VALUE_SEPARATOR;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._maximumNonEscapedChar","Field","* Optional threshold used for automatically escaping character above certain character
     * code value: either {@code 0} to indicate that no threshold is specified, or value
     * at or above 127 to indicate last character code that is NOT automatically escaped
     * (but depends on other configuration rules for checking).
     *
     * @since 2.10","protected int _maximumNonEscapedChar;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._quoteChar","Field","* Character used for quoting field names (if field name quoting has not
     * been disabled with {@link JsonWriteFeature#QUOTE_FIELD_NAMES})
     * and JSON String values.","protected final char _quoteChar;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.rebuild()","Method","* Method that allows construction of differently configured factory, starting
     * with settings of this factory.
     *
     * @return Builder instance to use
     *
     * @since 2.10","public TSFBuilder<?, ?> rebuild() {
    // 13-Jun-2018, tatu: Verify sub-classing to prevent strange bugs in format impls
    _requireJSONFactory(""Factory implementation for format (%s) MUST override `rebuild()` method"");
    return new JsonFactoryBuilder(this);
}","TSFBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.builder()","Method","* Main factory method to use for constructing {@link JsonFactory} instances with
     * different configuration: creates and returns a builder for collecting configuration
     * settings; instance created by calling {@code build()} after all configuration
     * set.
     *<p>
     * NOTE: signature unfortunately does not expose true implementation type; this
     * will be fixed in 3.0.
     *
     * @return Builder instance to use","public static TSFBuilder<?, ?> builder() {
    return new JsonFactoryBuilder();
}","TSFBuilder","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.copy()","Method","* Method for constructing a new {@link JsonFactory} that has
     * the same settings as this instance, but is otherwise
     * independent (i.e. nothing is actually shared, symbol tables
     * are separate).
     * Note that {@link ObjectCodec} reference is not copied but is
     * set to null; caller typically needs to set it after calling
     * this method. Reason for this is that the codec is used for
     * callbacks, and assumption is that there is strict 1-to-1
     * mapping between codec, factory. Caller has to, then, explicitly
     * set codec after making the copy.
     *
     * @return Copy of this factory instance
     *
     * @since 2.1","public JsonFactory copy() {
    _checkInvalidCopy(JsonFactory.class);
    // as per above, do clear ObjectCodec
    return new JsonFactory(this, null);
}","JsonFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._checkInvalidCopy(Class)","Method","No Comment","protected void _checkInvalidCopy(Class<?> exp) {
    if (getClass() != exp) {
        throw new IllegalStateException(""Failed copy(): "" + getClass().getName() + "" (version: "" + version() + "") does not override copy(); it has to"");
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._checkInvalidCopy(Class).exp","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._checkInvalidCopy(Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._copy(List)","Method","@since 2.16","protected static <T> List<T> _copy(List<T> src) {
    if (src == null) {
        return src;
    }
    return new ArrayList<>(src);
}","List","protected , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._copy(List).src","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._copy(List)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.readResolve()","Method","* Method that we need to override to actually make restoration go
     * through constructors etc: needed to allow JDK serializability of
     * factory instances.
     *<p>
     * Note: must be overridden by sub-classes as well.
     *
     * @return Newly constructed instance","protected Object readResolve() {
    return new JsonFactory(this, _objectCodec);
}","Object","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.requiresPropertyOrdering()","Method","* Introspection method that higher-level functionality may call
     * to see whether underlying data format requires a stable ordering
     * of object properties or not.
     * This is usually used for determining
     * whether to force a stable ordering (like alphabetic ordering by name)
     * if no ordering if explicitly specified.
     *<p>
     * Default implementation returns <code>false</code> as JSON does NOT
     * require stable ordering. Formats that require ordering include positional
     * textual formats like <code>CSV</code>, and schema-based binary formats
     * like <code>Avro</code>.
     *
     * @return Whether format supported by this factory
     *   requires Object properties to be ordered.
     *
     * @since 2.3","@Override
public boolean requiresPropertyOrdering() {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.canHandleBinaryNatively()","Method","* Introspection method that higher-level functionality may call
     * to see whether underlying data format can read and write binary
     * data natively; that is, embeded it as-is without using encodings
     * such as Base64.
     *<p>
     * Default implementation returns <code>false</code> as JSON does not
     * support native access: all binary content must use Base64 encoding.
     * Most binary formats (like Smile and Avro) support native binary content.
     *
     * @return Whether format supported by this factory
     *    supports native binary content
     *
     * @since 2.3","@Override
public boolean canHandleBinaryNatively() {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.canUseCharArrays()","Method","* Introspection method that can be used by base factory to check
     * whether access using <code>char[]</code> is something that actual
     * parser implementations can take advantage of, over having to
     * use {@link java.io.Reader}. Sub-types are expected to override
     * definition; default implementation (suitable for JSON) alleges
     * that optimization are possible; and thereby is likely to try
     * to access {@link java.lang.String} content by first copying it into
     * recyclable intermediate buffer.
     *
     * @return Whether access to decoded textual content can be efficiently
     *   accessed using parser method {@code getTextCharacters()}.
     *
     * @since 2.4","public boolean canUseCharArrays() {
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.canParseAsync()","Method","* Introspection method that can be used to check whether this
     * factory can create non-blocking parsers: parsers that do not
     * use blocking I/O abstractions but instead use a
     * {@link com.fasterxml.jackson.core.async.NonBlockingInputFeeder}.
     *
     * @return Whether this factory supports non-blocking (""async"") parsing or
     *    not (and consequently whether {@code createNonBlockingXxx()} method(s) work)
     *
     * @since 2.9","@Override
public boolean canParseAsync() {
    // 31-May-2017, tatu: Jackson 2.9 does support async parsing for JSON,
    //   but not all other formats, so need to do this:
    return _isJSONFactory();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.getFormatReadFeatureType()","Method","No Comment","@Override
public Class<? extends FormatFeature> getFormatReadFeatureType() {
    return null;
}","Class","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.getFormatWriteFeatureType()","Method","No Comment","@Override
public Class<? extends FormatFeature> getFormatWriteFeatureType() {
    return null;
}","Class","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.canUseSchema(FormatSchema)","Method","* Method that can be used to quickly check whether given schema
     * is something that parsers and/or generators constructed by this
     * factory could use. Note that this means possible use, at the level
     * of data format (i.e. schema is for same data format as parsers and
     * generators this factory constructs); individual schema instances
     * may have further usage restrictions.
     *
     * @param schema Schema instance to check
     *
     * @return Whether parsers and generators constructed by this factory
     *   can use specified format schema instance","@Override
public boolean canUseSchema(FormatSchema schema) {
    if (schema == null) {
        return false;
    }
    String ourFormat = getFormatName();
    return (ourFormat != null) && ourFormat.equals(schema.getSchemaType());
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.canUseSchema(FormatSchema).schema","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.canUseSchema(FormatSchema)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.getFormatName()","Method","* Method that returns short textual id identifying format
     * this factory supports.
     *<p>
     * Note: sub-classes should override this method; default
     * implementation will return null for all sub-classes
     *
     * @return Name of the format handled by parsers, generators this factory creates","@Override
public String getFormatName() {
    /* Somewhat nasty check: since we can't make this abstract
         * (due to backwards compatibility concerns), need to prevent
         * format name ""leakage""
         */
    if (getClass() == JsonFactory.class) {
        return FORMAT_NAME_JSON;
    }
    return null;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.hasFormat(InputAccessor)","Method","No Comment","public MatchStrength hasFormat(InputAccessor acc) throws IOException {
    // since we can't keep this abstract, only implement for ""vanilla"" instance
    if (getClass() == JsonFactory.class) {
        return hasJSONFormat(acc);
    }
    return null;
}","MatchStrength","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.hasFormat(InputAccessor).acc","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.hasFormat(InputAccessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.requiresCustomCodec()","Method","* Method that can be called to determine if a custom
     * {@link ObjectCodec} is needed for binding data parsed
     * using {@link JsonParser} constructed by this factory
     * (which typically also implies the same for serialization
     * with {@link JsonGenerator}).
     *
     * @return True if custom codec is needed with parsers and
     *   generators created by this factory; false if a general
     *   {@link ObjectCodec} is enough
     *
     * @since 2.1","public boolean requiresCustomCodec() {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.hasJSONFormat(InputAccessor)","Method","No Comment","protected MatchStrength hasJSONFormat(InputAccessor acc) throws IOException {
    return ByteSourceJsonBootstrapper.hasJSONFormat(acc);
}","MatchStrength","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.hasJSONFormat(InputAccessor).acc","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.hasJSONFormat(InputAccessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.version()","Method","No Comment","@Override
public Version version() {
    return PackageVersion.VERSION;
}","Version","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.configure(JsonFactory.Feature,boolean)","Method","* Method for enabling or disabling specified parser feature
     * (check {@link JsonParser.Feature} for list of features)
     *
     * @param f Feature to enable/disable
     * @param state Whether to enable or disable the feature
     *
     * @return This factory instance (to allow call chaining)
     *
     * @deprecated since 2.10 use {@link JsonFactoryBuilder#configure(JsonFactory.Feature, boolean)} instead","@Deprecated
public final JsonFactory configure(JsonFactory.Feature f, boolean state) {
    return state ? enable(f) : disable(f);
}","JsonFactory","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.configure(JsonFactory.Feature,boolean).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.configure(JsonFactory.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.configure(JsonFactory.Feature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory.configure(JsonFactory.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.enable(JsonFactory.Feature)","Method","* Method for enabling specified parser feature
     * (check {@link JsonFactory.Feature} for list of features)
     *
     * @param f Feature to enable
     *
     * @return This factory instance (to allow call chaining)
     *
     * @deprecated since 2.10 use {@link JsonFactoryBuilder#configure(JsonFactory.Feature, boolean)} instead","@Deprecated
public JsonFactory enable(JsonFactory.Feature f) {
    _factoryFeatures |= f.getMask();
    return this;
}","JsonFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.enable(JsonFactory.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.enable(JsonFactory.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.disable(JsonFactory.Feature)","Method","* Method for disabling specified parser features
     * (check {@link JsonFactory.Feature} for list of features)
     *
     * @param f Feature to disable
     *
     * @return This factory instance (to allow call chaining)
     *
     * @deprecated since 2.10 use {@link JsonFactoryBuilder#configure(JsonFactory.Feature, boolean)} instead","@Deprecated
public JsonFactory disable(JsonFactory.Feature f) {
    _factoryFeatures &= ~f.getMask();
    return this;
}","JsonFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.disable(JsonFactory.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.disable(JsonFactory.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.isEnabled(JsonFactory.Feature)","Method","* Checked whether specified parser feature is enabled.
     *
     * @param f Feature to check
     *
     * @return True if the specified feature is enabled","@Override
public final boolean isEnabled(JsonFactory.Feature f) {
    return (_factoryFeatures & f.getMask()) != 0;
}","boolean","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.isEnabled(JsonFactory.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.isEnabled(JsonFactory.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.getFactoryFeatures()","Method","No Comment","@Override
public final int getFactoryFeatures() {
    return _factoryFeatures;
}","int","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.getParserFeatures()","Method","No Comment","@Override
public final int getParserFeatures() {
    return _parserFeatures;
}","int","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.getGeneratorFeatures()","Method","No Comment","@Override
public final int getGeneratorFeatures() {
    return _generatorFeatures;
}","int","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.getFormatParserFeatures()","Method","MUST be overridden by sub-classes that support format-specific parser features","@Override
public int getFormatParserFeatures() {
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.getFormatGeneratorFeatures()","Method","MUST be overridden by sub-classes that support format-specific generator features","@Override
public int getFormatGeneratorFeatures() {
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.streamReadConstraints()","Method","No Comment","@Override
public StreamReadConstraints streamReadConstraints() {
    return _streamReadConstraints;
}","StreamReadConstraints","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.streamWriteConstraints()","Method","No Comment","@Override
public StreamWriteConstraints streamWriteConstraints() {
    return _streamWriteConstraints;
}","StreamWriteConstraints","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.setStreamReadConstraints(StreamReadConstraints)","Method","* Method for overriding {@link StreamReadConstraints} defined for
     * this factory.
     *<p>
     * NOTE: the preferred way to set constraints is by using
     * {@link JsonFactoryBuilder#streamReadConstraints}: this method is only
     * provided to support older non-builder-based construction.
     * In Jackson 3.x this method will not be available.
     *
     * @param src Constraints
     *
     * @return This factory instance (to allow call chaining)
     *
     * @since 2.15","public JsonFactory setStreamReadConstraints(StreamReadConstraints src) {
    final int maxNameLen = _streamReadConstraints.getMaxNameLength();
    _streamReadConstraints = Objects.requireNonNull(src);
    // 30-Jan-2024, tatu: [core#1207] Need to recreate if max-name-length
    //    setting changes
    if (_streamReadConstraints.getMaxNameLength() != maxNameLen) {
        _rootCharSymbols = CharsToNameCanonicalizer.createRoot(this);
    }
    return this;
}","JsonFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.setStreamReadConstraints(StreamReadConstraints).src","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.setStreamReadConstraints(StreamReadConstraints)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.setErrorReportConfiguration(ErrorReportConfiguration)","Method","* Method for overriding {@link ErrorReportConfiguration} defined for
     * this factory.
     *<p>
     * NOTE: the preferred way to set constraints is by using
     * {@link JsonFactoryBuilder#errorReportConfiguration}: this method is only
     * provided to support older non-builder-based construction.
     * In Jackson 3.x this method will not be available.
     *
     * @param src Configuration
     *
     * @return This factory instance (to allow call chaining)
     *
     * @since 2.16","public JsonFactory setErrorReportConfiguration(ErrorReportConfiguration src) {
    _errorReportConfiguration = Objects.requireNonNull(src, ""Cannot pass null ErrorReportConfiguration"");
    return this;
}","JsonFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.setErrorReportConfiguration(ErrorReportConfiguration).src","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.setErrorReportConfiguration(ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.setStreamWriteConstraints(StreamWriteConstraints)","Method","* Method for overriding {@link StreamWriteConstraints} defined for
     * this factory.
     *<p>
     * NOTE: the preferred way to set constraints is by using
     * {@link JsonFactoryBuilder#streamWriteConstraints}: this method is only
     * provided to support older non-builder-based construction.
     * In Jackson 3.x this method will not be available.
     *
     * @param swc Constraints
     *
     * @return This factory instance (to allow call chaining)
     *
     * @since 2.16","public JsonFactory setStreamWriteConstraints(StreamWriteConstraints swc) {
    _streamWriteConstraints = Objects.requireNonNull(swc);
    return this;
}","JsonFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.setStreamWriteConstraints(StreamWriteConstraints).swc","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.setStreamWriteConstraints(StreamWriteConstraints)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.configure(JsonParser.Feature,boolean)","Method","* Method for enabling or disabling specified parser feature
     * (check {@link JsonParser.Feature} for list of features)
     *
     * @param f Feature to enable/disable
     * @param state Whether to enable or disable the feature
     *
     * @return This factory instance (to allow call chaining)","public final JsonFactory configure(JsonParser.Feature f, boolean state) {
    return state ? enable(f) : disable(f);
}","JsonFactory","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.configure(JsonParser.Feature,boolean).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.configure(JsonParser.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.configure(JsonParser.Feature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory.configure(JsonParser.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.enable(JsonParser.Feature)","Method","* Method for enabling specified parser feature
     * (check {@link JsonParser.Feature} for list of features)
     *
     * @param f Feature to enable
     *
     * @return This factory instance (to allow call chaining)","public JsonFactory enable(JsonParser.Feature f) {
    _parserFeatures |= f.getMask();
    return this;
}","JsonFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.enable(JsonParser.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.enable(JsonParser.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.disable(JsonParser.Feature)","Method","* Method for disabling specified parser features
     * (check {@link JsonParser.Feature} for list of features)
     *
     * @param f Feature to disable
     *
     * @return This factory instance (to allow call chaining)","public JsonFactory disable(JsonParser.Feature f) {
    _parserFeatures &= ~f.getMask();
    return this;
}","JsonFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.disable(JsonParser.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.disable(JsonParser.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.isEnabled(JsonParser.Feature)","Method","* Method for checking if the specified parser feature is enabled.
     *
     * @param f Feature to check
     *
     * @return True if specified feature is enabled","@Override
public final boolean isEnabled(JsonParser.Feature f) {
    return (_parserFeatures & f.getMask()) != 0;
}","boolean","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.isEnabled(JsonParser.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.isEnabled(JsonParser.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.isEnabled(StreamReadFeature)","Method","* Method for checking if the specified stream read feature is enabled.
     *
     * @param f Feature to check
     *
     * @return True if specified feature is enabled
     *
     * @since 2.10","@Override
public final boolean isEnabled(StreamReadFeature f) {
    return (_parserFeatures & f.mappedFeature().getMask()) != 0;
}","boolean","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.isEnabled(StreamReadFeature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.isEnabled(StreamReadFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.getInputDecorator()","Method","* Method for getting currently configured input decorator (if any;
     * there is no default decorator).
     *
     * @return InputDecorator configured, if any","public InputDecorator getInputDecorator() {
    return _inputDecorator;
}","InputDecorator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.setInputDecorator(InputDecorator)","Method","* Method for overriding currently configured input decorator
     *
     * @param d Decorator to configure for this factory, if any ({@code null} if none)
     *
     * @return This factory instance (to allow call chaining)
     *
     * @deprecated Since 2.10 use {@link JsonFactoryBuilder#inputDecorator(InputDecorator)} instead","@Deprecated
public JsonFactory setInputDecorator(InputDecorator d) {
    _inputDecorator = d;
    return this;
}","JsonFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.setInputDecorator(InputDecorator).d","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.setInputDecorator(InputDecorator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.configure(JsonGenerator.Feature,boolean)","Method","* Method for enabling or disabling specified generator feature
     * (check {@link JsonGenerator.Feature} for list of features)
     *
     * @param f Feature to enable/disable
     * @param state Whether to enable or disable the feature
     *
     * @return This factory instance (to allow call chaining)","public final JsonFactory configure(JsonGenerator.Feature f, boolean state) {
    return state ? enable(f) : disable(f);
}","JsonFactory","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.configure(JsonGenerator.Feature,boolean).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.configure(JsonGenerator.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.configure(JsonGenerator.Feature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory.configure(JsonGenerator.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.enable(JsonGenerator.Feature)","Method","* Method for enabling specified generator features
     * (check {@link JsonGenerator.Feature} for list of features)
     *
     * @param f Feature to enable
     *
     * @return This factory instance (to allow call chaining)","public JsonFactory enable(JsonGenerator.Feature f) {
    _generatorFeatures |= f.getMask();
    return this;
}","JsonFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.enable(JsonGenerator.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.enable(JsonGenerator.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.disable(JsonGenerator.Feature)","Method","* Method for disabling specified generator feature
     * (check {@link JsonGenerator.Feature} for list of features)
     *
     * @param f Feature to disable
     *
     * @return This factory instance (to allow call chaining)","public JsonFactory disable(JsonGenerator.Feature f) {
    _generatorFeatures &= ~f.getMask();
    return this;
}","JsonFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.disable(JsonGenerator.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.disable(JsonGenerator.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.isEnabled(JsonGenerator.Feature)","Method","* Check whether specified generator feature is enabled.
     *
     * @param f Feature to check
     *
     * @return Whether specified feature is enabled","@Override
public final boolean isEnabled(JsonGenerator.Feature f) {
    return (_generatorFeatures & f.getMask()) != 0;
}","boolean","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.isEnabled(JsonGenerator.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.isEnabled(JsonGenerator.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.isEnabled(StreamWriteFeature)","Method","* Check whether specified stream write feature is enabled.
     *
     * @param f Feature to check
     *
     * @return Whether specified feature is enabled
     *
     * @since 2.10","@Override
public final boolean isEnabled(StreamWriteFeature f) {
    return (_generatorFeatures & f.mappedFeature().getMask()) != 0;
}","boolean","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.isEnabled(StreamWriteFeature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.isEnabled(StreamWriteFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.getCharacterEscapes()","Method","* Method for accessing custom escapes factory uses for {@link JsonGenerator}s
     * it creates.
     *
     * @return Configured {@code CharacterEscapes}, if any; {@code null} if none","public CharacterEscapes getCharacterEscapes() {
    return _characterEscapes;
}","CharacterEscapes","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.setCharacterEscapes(CharacterEscapes)","Method","* Method for defining custom escapes factory uses for {@link JsonGenerator}s
     * it creates.
     *
     * @param esc CharaterEscapes to set (or {@code null} for ""none"")
     *
     * @return This factory instance (to allow call chaining)","public JsonFactory setCharacterEscapes(CharacterEscapes esc) {
    _characterEscapes = esc;
    return this;
}","JsonFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.setCharacterEscapes(CharacterEscapes).esc","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.setCharacterEscapes(CharacterEscapes)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.getOutputDecorator()","Method","* Method for getting currently configured output decorator (if any;
     * there is no default decorator).
     *
     * @return OutputDecorator configured for generators factory creates, if any;
     *    {@code null} if none.","public OutputDecorator getOutputDecorator() {
    return _outputDecorator;
}","OutputDecorator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.setOutputDecorator(OutputDecorator)","Method","* Method for overriding currently configured output decorator
     *
     * @return This factory instance (to allow call chaining)
     *
     * @param d Output decorator to use, if any
     *
     * @deprecated Since 2.10 use {@link JsonFactoryBuilder#outputDecorator(OutputDecorator)} instead","@Deprecated
public JsonFactory setOutputDecorator(OutputDecorator d) {
    _outputDecorator = d;
    return this;
}","JsonFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.setOutputDecorator(OutputDecorator).d","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.setOutputDecorator(OutputDecorator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.setRootValueSeparator(String)","Method","* Method that allows overriding String used for separating root-level
     * JSON values (default is single space character)
     *
     * @param sep Separator to use, if any; null means that no separator is
     *   automatically added
     *
     * @return This factory instance (to allow call chaining)","public JsonFactory setRootValueSeparator(String sep) {
    _rootValueSeparator = (sep == null) ? null : new SerializedString(sep);
    return this;
}","JsonFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.setRootValueSeparator(String).sep","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.setRootValueSeparator(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.getRootValueSeparator()","Method","* @return Root value separator configured, if any","public String getRootValueSeparator() {
    return (_rootValueSeparator == null) ? null : _rootValueSeparator.getValue();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.setRecyclerPool(RecyclerPool)","Method","No Comment","public JsonFactory setRecyclerPool(RecyclerPool<BufferRecycler> p) {
    _recyclerPool = Objects.requireNonNull(p);
    return this;
}","JsonFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.setRecyclerPool(RecyclerPool).p","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.setRecyclerPool(RecyclerPool)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.setCodec(ObjectCodec)","Method","* Method for associating a {@link ObjectCodec} (typically
     * a <code>com.fasterxml.jackson.databind.ObjectMapper</code>)
     * with this factory (and more importantly, parsers and generators
     * it constructs). This is needed to use data-binding methods
     * of {@link JsonParser} and {@link JsonGenerator} instances.
     *
     * @param oc Codec to use
     *
     * @return This factory instance (to allow call chaining)","public JsonFactory setCodec(ObjectCodec oc) {
    _objectCodec = oc;
    return this;
}","JsonFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.setCodec(ObjectCodec).oc","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.setCodec(ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.getCodec()","Method","No Comment","public ObjectCodec getCodec() {
    return _objectCodec;
}","ObjectCodec","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(File)","Method","* Method for constructing JSON parser instance to parse
     * contents of specified file.
     *
     *<p>
     * Encoding is auto-detected from contents according to JSON
     * specification recommended mechanism. Json specification
     * supports only UTF-8, UTF-16 and UTF-32 as valid encodings,
     * so auto-detection implemented only for this charsets.
     * For other charsets use {@link #createParser(java.io.Reader)}.
     *
     *<p>
     * Underlying input stream (needed for reading contents)
     * will be <b>owned</b> (and managed, i.e. closed as need be) by
     * the parser, since caller has no access to it.
     *
     * @param f File that contains JSON content to parse
     *
     * @since 2.1","@Override
public JsonParser createParser(File f) throws IOException, JsonParseException {
    // true, since we create InputStream from File
    IOContext ctxt = _createContext(_createContentReference(f), true);
    InputStream in = _fileInputStream(f);
    return _createParser(_decorate(in, ctxt), ctxt);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(File).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createParser(File)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(URL)","Method","* Method for constructing JSON parser instance to parse
     * contents of resource reference by given URL.
     *<p>
     * Encoding is auto-detected from contents according to JSON
     * specification recommended mechanism. Json specification
     * supports only UTF-8, UTF-16 and UTF-32 as valid encodings,
     * so auto-detection implemented only for this charsets.
     * For other charsets use {@link #createParser(java.io.Reader)}.
     *<p>
     * Underlying input stream (needed for reading contents)
     * will be <b>owned</b> (and managed, i.e. closed as need be) by
     * the parser, since caller has no access to it.
     *
     * @param url URL pointing to resource that contains JSON content to parse
     *
     * @since 2.1","@Override
public JsonParser createParser(URL url) throws IOException, JsonParseException {
    // true, since we create InputStream from URL
    IOContext ctxt = _createContext(_createContentReference(url), true);
    InputStream in = _optimizedStreamFromURL(url);
    return _createParser(_decorate(in, ctxt), ctxt);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(URL).url","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createParser(URL)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(InputStream)","Method","* Method for constructing JSON parser instance to parse
     * the contents accessed via specified input stream.
     *<p>
     * The input stream will <b>not be owned</b> by
     * the parser, it will still be managed (i.e. closed if
     * end-of-stream is reacher, or parser close method called)
     * if (and only if) {@link com.fasterxml.jackson.core.StreamReadFeature#AUTO_CLOSE_SOURCE}
     * is enabled.
     *<p>
     *
     * Note: no encoding argument is taken since it can always be
     * auto-detected as suggested by JSON RFC. Json specification
     * supports only UTF-8, UTF-16 and UTF-32 as valid encodings,
     * so auto-detection implemented only for this charsets.
     * For other charsets use {@link #createParser(java.io.Reader)}.
     *
     * @param in InputStream to use for reading JSON content to parse
     *
     * @since 2.1","@Override
public JsonParser createParser(InputStream in) throws IOException, JsonParseException {
    IOContext ctxt = _createContext(_createContentReference(in), false);
    return _createParser(_decorate(in, ctxt), ctxt);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(InputStream).in","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createParser(InputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(Reader)","Method","* Method for constructing parser for parsing
     * the contents accessed via specified Reader.
     <p>
     * The read stream will <b>not be owned</b> by
     * the parser, it will still be managed (i.e. closed if
     * end-of-stream is reacher, or parser close method called)
     * if (and only if) {@link com.fasterxml.jackson.core.StreamReadFeature#AUTO_CLOSE_SOURCE}
     * is enabled.
     *
     * @param r Reader to use for reading JSON content to parse
     *
     * @since 2.1","@Override
public JsonParser createParser(Reader r) throws IOException, JsonParseException {
    // false -> we do NOT own Reader (did not create it)
    IOContext ctxt = _createContext(_createContentReference(r), false);
    return _createParser(_decorate(r, ctxt), ctxt);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(Reader).r","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createParser(Reader)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(byte[])","Method","* Method for constructing parser for parsing
     * the contents of given byte array.
     *
     * @since 2.1","@Override
public JsonParser createParser(byte[] data) throws IOException, JsonParseException {
    IOContext ctxt = _createContext(_createContentReference(data), true);
    if (_inputDecorator != null) {
        InputStream in = _inputDecorator.decorate(ctxt, data, 0, data.length);
        if (in != null) {
            return _createParser(in, ctxt);
        }
    }
    return _createParser(data, 0, data.length, ctxt);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(byte[]).data","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createParser(byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(byte[],int,int)","Method","* Method for constructing parser for parsing
     * the contents of given byte array.
     *
     * @param data Buffer that contains data to parse
     * @param offset Offset of the first data byte within buffer
     * @param len Length of contents to parse within buffer
     *
     * @since 2.1","@Override
public JsonParser createParser(byte[] data, int offset, int len) throws IOException, JsonParseException {
    _checkRangeBoundsForByteArray(data, offset, len);
    IOContext ctxt = _createContext(_createContentReference(data, offset, len), true);
    // [JACKSON-512]: allow wrapping with InputDecorator
    if (_inputDecorator != null) {
        InputStream in = _inputDecorator.decorate(ctxt, data, offset, len);
        if (in != null) {
            return _createParser(in, ctxt);
        }
    }
    return _createParser(data, offset, len, ctxt);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(byte[],int,int).data","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createParser(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory.createParser(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(byte[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.JsonFactory.createParser(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(String)","Method","* Method for constructing parser for parsing
     * contents of given String.
     *
     * @since 2.1","@Override
public JsonParser createParser(String content) throws IOException, JsonParseException {
    final int strLen = content.length();
    // Actually, let's use this for medium-sized content, up to 64kB chunk (32kb char)
    if ((_inputDecorator != null) || (strLen > 0x8000) || !canUseCharArrays()) {
        // easier to just wrap in a Reader than extend InputDecorator; or, if content
        // is too long for us to copy it over
        return createParser(new StringReader(content));
    }
    IOContext ctxt = _createContext(_createContentReference(content), true);
    char[] buf = ctxt.allocTokenBuffer(strLen);
    content.getChars(0, strLen, buf, 0);
    return _createParser(buf, 0, strLen, ctxt, true);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(String).content","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createParser(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(char[])","Method","* Method for constructing parser for parsing
     * contents of given char array.
     *
     * @since 2.4","@Override
public JsonParser createParser(char[] content) throws IOException {
    return createParser(content, 0, content.length);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(char[]).content","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createParser(char[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(char[],int,int)","Method","* Method for constructing parser for parsing contents of given char array.
     *
     * @since 2.4","@Override
public JsonParser createParser(char[] content, int offset, int len) throws IOException {
    _checkRangeBoundsForCharArray(content, offset, len);
    if (_inputDecorator != null) {
        // easier to just wrap in a Reader than extend InputDecorator
        return createParser(new CharArrayReader(content, offset, len));
    }
    return _createParser(content, offset, len, _createContext(_createContentReference(content, offset, len), true), // important: buffer is NOT recyclable, as it's from caller
    false);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(char[],int,int).content","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createParser(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory.createParser(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.JsonFactory.createParser(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(DataInput)","Method","* Optional method for constructing parser for reading contents from specified {@link DataInput}
     * instance.
     *<p>
     * If this factory does not support {@link DataInput} as source,
     * will throw {@link UnsupportedOperationException}
     *
     * @since 2.8","@Override
public JsonParser createParser(DataInput in) throws IOException {
    IOContext ctxt = _createContext(_createContentReference(in), false);
    return _createParser(_decorate(in, ctxt), ctxt);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createParser(DataInput).in","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createParser(DataInput)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createNonBlockingByteArrayParser()","Method","* Optional method for constructing parser for non-blocking parsing
     * via {@link com.fasterxml.jackson.core.async.ByteArrayFeeder}
     * interface (accessed using {@link JsonParser#getNonBlockingInputFeeder()}
     * from constructed instance).
     *<p>
     * If this factory does not support non-blocking parsing (either at all,
     * or from byte array),
     * will throw {@link UnsupportedOperationException}.
     *<p>
     * Note that JSON-backed factory only supports parsing of UTF-8 encoded JSON content
     * (and US-ASCII since it is proper subset); other encodings are not supported
     * at this point.
     *
     * @since 2.9","@Override
public JsonParser createNonBlockingByteArrayParser() throws IOException {
    // 17-May-2017, tatu: Need to take care not to accidentally create JSON parser
    //   for non-JSON input:
    _requireJSONFactory(""Non-blocking source not (yet?) supported for this format (%s)"");
    IOContext ctxt = _createNonBlockingContext(null);
    ByteQuadsCanonicalizer can = _byteSymbolCanonicalizer.makeChildOrPlaceholder(_factoryFeatures);
    return new NonBlockingJsonParser(ctxt, _parserFeatures, can);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createNonBlockingByteBufferParser()","Method","* Optional method for constructing parser for non-blocking parsing
     * via {@link com.fasterxml.jackson.core.async.ByteBufferFeeder}
     * interface (accessed using {@link JsonParser#getNonBlockingInputFeeder()}
     * from constructed instance).
     *<p>
     * If this factory does not support non-blocking parsing (either at all,
     * or from byte array),
     * will throw {@link UnsupportedOperationException}.
     *<p>
     * Note that JSON-backed factory only supports parsing of UTF-8 encoded JSON content
     * (and US-ASCII since it is proper subset); other encodings are not supported
     * at this point.
     *
     * @since 2.14","@Override
public JsonParser createNonBlockingByteBufferParser() throws IOException {
    // 17-May-2017, tatu: Need to take care not to accidentally create JSON parser
    //   for non-JSON input:
    _requireJSONFactory(""Non-blocking source not (yet?) supported for this format (%s)"");
    IOContext ctxt = _createNonBlockingContext(null);
    ByteQuadsCanonicalizer can = _byteSymbolCanonicalizer.makeChildOrPlaceholder(_factoryFeatures);
    return new NonBlockingByteBufferJsonParser(ctxt, _parserFeatures, can);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createGenerator(OutputStream,JsonEncoding)","Method","* Method for constructing JSON generator for writing JSON content
     * using specified output stream.
     * Encoding to use must be specified, and needs to be one of available
     * types (as per JSON specification).
     *<p>
     * Underlying stream <b>is NOT owned</b> by the generator constructed,
     * so that generator will NOT close the output stream when
     * {@link JsonGenerator#close} is called (unless auto-closing
     * feature,
     * {@link com.fasterxml.jackson.core.JsonGenerator.Feature#AUTO_CLOSE_TARGET}
     * is enabled).
     * Using application needs to close it explicitly if this is the case.
     *<p>
     * Note: there are formats that use fixed encoding (like most binary data formats)
     * and that ignore passed in encoding.
     *
     * @param out OutputStream to use for writing JSON content
     * @param enc Character encoding to use
     *
     * @since 2.1","@Override
public JsonGenerator createGenerator(OutputStream out, JsonEncoding enc) throws IOException {
    // false -> we won't manage the stream unless explicitly directed to
    IOContext ctxt = _createContext(_createContentReference(out), false);
    ctxt.setEncoding(enc);
    if (enc == JsonEncoding.UTF8) {
        return _createUTF8Generator(_decorate(out, ctxt), ctxt);
    }
    Writer w = _createWriter(out, enc, ctxt);
    return _createGenerator(_decorate(w, ctxt), ctxt);
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createGenerator(OutputStream,JsonEncoding).out","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createGenerator(OutputStream,JsonEncoding)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createGenerator(OutputStream,JsonEncoding).enc","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory.createGenerator(OutputStream,JsonEncoding)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createGenerator(OutputStream)","Method","* Convenience method for constructing generator that uses default
     * encoding of the format (UTF-8 for JSON and most other data formats).
     *<p>
     * Note: there are formats that use fixed encoding (like most binary data formats).
     *
     * @since 2.1","@Override
public JsonGenerator createGenerator(OutputStream out) throws IOException {
    return createGenerator(out, JsonEncoding.UTF8);
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createGenerator(OutputStream).out","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createGenerator(OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createGenerator(Writer)","Method","* Method for constructing JSON generator for writing JSON content
     * using specified Writer.
     *<p>
     * Underlying stream <b>is NOT owned</b> by the generator constructed,
     * so that generator will NOT close the Reader when
     * {@link JsonGenerator#close} is called (unless auto-closing
     * feature,
     * {@link com.fasterxml.jackson.core.JsonGenerator.Feature#AUTO_CLOSE_TARGET} is enabled).
     * Using application needs to close it explicitly.
     *
     * @since 2.1
     *
     * @param w Writer to use for writing JSON content","@Override
public JsonGenerator createGenerator(Writer w) throws IOException {
    IOContext ctxt = _createContext(_createContentReference(w), false);
    return _createGenerator(_decorate(w, ctxt), ctxt);
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createGenerator(Writer).w","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createGenerator(Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createGenerator(File,JsonEncoding)","Method","* Method for constructing JSON generator for writing JSON content
     * to specified file, overwriting contents it might have (or creating
     * it if such file does not yet exist).
     * Encoding to use must be specified, and needs to be one of available
     * types (as per JSON specification).
     *<p>
     * Underlying stream <b>is owned</b> by the generator constructed,
     * i.e. generator will handle closing of file when
     * {@link JsonGenerator#close} is called.
     *
     * @param f File to write contents to
     * @param enc Character encoding to use
     *
     * @since 2.1","@Override
public JsonGenerator createGenerator(File f, JsonEncoding enc) throws IOException {
    OutputStream out = _fileOutputStream(f);
    // true -> yes, we have to manage the stream since we created it
    IOContext ctxt = _createContext(_createContentReference(out), true);
    ctxt.setEncoding(enc);
    if (enc == JsonEncoding.UTF8) {
        return _createUTF8Generator(_decorate(out, ctxt), ctxt);
    }
    Writer w = _createWriter(out, enc, ctxt);
    return _createGenerator(_decorate(w, ctxt), ctxt);
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createGenerator(File,JsonEncoding).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createGenerator(File,JsonEncoding)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createGenerator(File,JsonEncoding).enc","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory.createGenerator(File,JsonEncoding)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createGenerator(DataOutput,JsonEncoding)","Method","* Method for constructing generator for writing content using specified
     * {@link DataOutput} instance.
     *
     * @since 2.8","@Override
public JsonGenerator createGenerator(DataOutput out, JsonEncoding enc) throws IOException {
    return createGenerator(_createDataOutputWrapper(out), enc);
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createGenerator(DataOutput,JsonEncoding).out","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createGenerator(DataOutput,JsonEncoding)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createGenerator(DataOutput,JsonEncoding).enc","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory.createGenerator(DataOutput,JsonEncoding)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createGenerator(DataOutput)","Method","* Convenience method for constructing generator that uses default
     * encoding of the format (UTF-8 for JSON and most other data formats).
     *<p>
     * Note: there are formats that use fixed encoding (like most binary data formats).
     *
     * @since 2.8","@Override
public JsonGenerator createGenerator(DataOutput out) throws IOException {
    return createGenerator(_createDataOutputWrapper(out), JsonEncoding.UTF8);
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createGenerator(DataOutput).out","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createGenerator(DataOutput)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonParser(File)","Method","* Method for constructing JSON parser instance to parse
     * contents of specified file.
     *<p>
     * Encoding is auto-detected from contents according to JSON
     * specification recommended mechanism. Json specification
     * supports only UTF-8, UTF-16 and UTF-32 as valid encodings,
     * so auto-detection implemented only for this charsets.
     * For other charsets use {@link #createParser(java.io.Reader)}.
     *
     *<p>
     * Underlying input stream (needed for reading contents)
     * will be <b>owned</b> (and managed, i.e. closed as need be) by
     * the parser, since caller has no access to it.
     *
     * @param f File that contains JSON content to parse
     *
     * @return Parser constructed
     *
     * @throws IOException if parser initialization fails due to I/O (read) problem
     * @throws JsonParseException if parser initialization fails due to content decoding problem
     *
     * @deprecated Since 2.2, use {@link #createParser(File)} instead.","@Deprecated
public JsonParser createJsonParser(File f) throws IOException, JsonParseException {
    return createParser(f);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonParser(File).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createJsonParser(File)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonParser(URL)","Method","* Method for constructing JSON parser instance to parse
     * contents of resource reference by given URL.
     *<p>
     * Encoding is auto-detected from contents according to JSON
     * specification recommended mechanism. Json specification
     * supports only UTF-8, UTF-16 and UTF-32 as valid encodings,
     * so auto-detection implemented only for this charsets.
     * For other charsets use {@link #createParser(java.io.Reader)}.
     *<p>
     * Underlying input stream (needed for reading contents)
     * will be <b>owned</b> (and managed, i.e. closed as need be) by
     * the parser, since caller has no access to it.
     *
     * @param url URL pointing to resource that contains JSON content to parse
     *
     * @return Parser constructed
     *
     * @throws IOException if parser initialization fails due to I/O (read) problem
     * @throws JsonParseException if parser initialization fails due to content decoding problem
     *
     * @deprecated Since 2.2, use {@link #createParser(URL)} instead.","@Deprecated
public JsonParser createJsonParser(URL url) throws IOException, JsonParseException {
    return createParser(url);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonParser(URL).url","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createJsonParser(URL)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonParser(InputStream)","Method","* Method for constructing JSON parser instance to parse
     * the contents accessed via specified input stream.
     *<p>
     * The input stream will <b>not be owned</b> by
     * the parser, it will still be managed (i.e. closed if
     * end-of-stream is reacher, or parser close method called)
     * if (and only if) {@link com.fasterxml.jackson.core.JsonParser.Feature#AUTO_CLOSE_SOURCE}
     * is enabled.
     *<p>
     *
     * Note: no encoding argument is taken since it can always be
     * auto-detected as suggested by JSON RFC. Json specification
     * supports only UTF-8, UTF-16 and UTF-32 as valid encodings,
     * so auto-detection implemented only for this charsets.
     * For other charsets use {@link #createParser(java.io.Reader)}.
     *
     * @param in InputStream to use for reading JSON content to parse
     *
     * @return Parser constructed
     *
     * @throws IOException if parser initialization fails due to I/O (read) problem
     * @throws JsonParseException if parser initialization fails due to content decoding problem
     *
     * @deprecated Since 2.2, use {@link #createParser(InputStream)} instead.","@Deprecated
public JsonParser createJsonParser(InputStream in) throws IOException, JsonParseException {
    return createParser(in);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonParser(InputStream).in","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createJsonParser(InputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonParser(Reader)","Method","* Method for constructing parser for parsing
     * the contents accessed via specified Reader.
     <p>
     * The read stream will <b>not be owned</b> by
     * the parser, it will still be managed (i.e. closed if
     * end-of-stream is reacher, or parser close method called)
     * if (and only if) {@link com.fasterxml.jackson.core.JsonParser.Feature#AUTO_CLOSE_SOURCE}
     * is enabled.
     *
     * @param r Reader to use for reading JSON content to parse
     *
     * @return Parser constructed
     *
     * @throws IOException if parser initialization fails due to I/O (read) problem
     * @throws JsonParseException if parser initialization fails due to content decoding problem
     *
     * @deprecated Since 2.2, use {@link #createParser(Reader)} instead.","@Deprecated
public JsonParser createJsonParser(Reader r) throws IOException, JsonParseException {
    return createParser(r);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonParser(Reader).r","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createJsonParser(Reader)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonParser(byte[])","Method","* Method for constructing parser for parsing the contents of given byte array.
     *
     * @param data Input content to parse
     *
     * @return Parser constructed
     *
     * @throws IOException if parser initialization fails due to I/O (read) problem
     * @throws JsonParseException if parser initialization fails due to content decoding problem
     *
     * @deprecated Since 2.2, use {@link #createParser(byte[])} instead.","@Deprecated
public JsonParser createJsonParser(byte[] data) throws IOException, JsonParseException {
    return createParser(data);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonParser(byte[]).data","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createJsonParser(byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonParser(byte[],int,int)","Method","* Method for constructing parser for parsing
     * the contents of given byte array.
     *
     * @param data Buffer that contains data to parse
     * @param offset Offset of the first data byte within buffer
     * @param len Length of contents to parse within buffer
     *
     * @return Parser constructed
     *
     * @throws IOException if parser initialization fails due to I/O (read) problem
     * @throws JsonParseException if parser initialization fails due to content decoding problem
     *
     * @deprecated Since 2.2, use {@link #createParser(byte[],int,int)} instead.","@Deprecated
public JsonParser createJsonParser(byte[] data, int offset, int len) throws IOException, JsonParseException {
    return createParser(data, offset, len);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonParser(byte[],int,int).data","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createJsonParser(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonParser(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory.createJsonParser(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonParser(byte[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.JsonFactory.createJsonParser(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonParser(String)","Method","* Method for constructing parser for parsing
     * contents of given String.
     *
     * @param content Input content to parse
     *
     * @return Parser constructed
     *
     * @throws IOException if parser initialization fails due to I/O (read) problem
     * @throws JsonParseException if parser initialization fails due to content decoding problem
     *
     * @deprecated Since 2.2, use {@link #createParser(String)} instead.","@Deprecated
public JsonParser createJsonParser(String content) throws IOException, JsonParseException {
    return createParser(content);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonParser(String).content","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createJsonParser(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(OutputStream,JsonEncoding)","Method","* Method for constructing JSON generator for writing JSON content
     * using specified output stream.
     * Encoding to use must be specified, and needs to be one of available
     * types (as per JSON specification).
     *<p>
     * Underlying stream <b>is NOT owned</b> by the generator constructed,
     * so that generator will NOT close the output stream when
     * {@link JsonGenerator#close} is called (unless auto-closing
     * feature,
     * {@link com.fasterxml.jackson.core.JsonGenerator.Feature#AUTO_CLOSE_TARGET}
     * is enabled).
     * Using application needs to close it explicitly if this is the case.
     *<p>
     * Note: there are formats that use fixed encoding (like most binary data formats)
     * and that ignore passed in encoding.
     *
     * @param out OutputStream to use for writing JSON content
     * @param enc Character encoding to use
     *
     * @return Generator constructed
     *
     * @throws IOException if parser initialization fails due to I/O (write) problem
     *
     * @deprecated Since 2.2, use {@link #createGenerator(OutputStream, JsonEncoding)} instead.","@Deprecated
public JsonGenerator createJsonGenerator(OutputStream out, JsonEncoding enc) throws IOException {
    return createGenerator(out, enc);
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(OutputStream,JsonEncoding).out","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(OutputStream,JsonEncoding)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(OutputStream,JsonEncoding).enc","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(OutputStream,JsonEncoding)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(Writer)","Method","* Method for constructing JSON generator for writing JSON content
     * using specified Writer.
     *<p>
     * Underlying stream <b>is NOT owned</b> by the generator constructed,
     * so that generator will NOT close the Reader when
     * {@link JsonGenerator#close} is called (unless auto-closing
     * feature,
     * {@link com.fasterxml.jackson.core.JsonGenerator.Feature#AUTO_CLOSE_TARGET} is enabled).
     * Using application needs to close it explicitly.
     *
     * @param out Writer to use for writing JSON content
     *
     * @return Generator constructed
     *
     * @throws IOException if parser initialization fails due to I/O (write) problem
     *
     * @deprecated Since 2.2, use {@link #createGenerator(Writer)} instead.","@Deprecated
public JsonGenerator createJsonGenerator(Writer out) throws IOException {
    return createGenerator(out);
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(Writer).out","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(OutputStream)","Method","* Convenience method for constructing generator that uses default
     * encoding of the format (UTF-8 for JSON and most other data formats).
     *<p>
     * Note: there are formats that use fixed encoding (like most binary data formats).
     *
     * @param out OutputStream to use for writing JSON content
     *
     * @return Generator constructed
     *
     * @throws IOException if parser initialization fails due to I/O (write) problem
     *
     * @deprecated Since 2.2, use {@link #createGenerator(OutputStream)} instead.","@Deprecated
public JsonGenerator createJsonGenerator(OutputStream out) throws IOException {
    return createGenerator(out, JsonEncoding.UTF8);
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(OutputStream).out","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createParser(InputStream,IOContext)","Method","* Overridable factory method that actually instantiates desired parser
     * given {@link InputStream} and context object.
     *<p>
     * This method is specifically designed to remain
     * compatible between minor versions so that sub-classes can count
     * on it being called as expected. That is, it is part of official
     * interface from sub-class perspective, although not a public
     * method available to users of factory implementations.
     *
     * @param in InputStream to use for reading content to parse
     * @param ctxt I/O context to use for parsing
     *
     * @throws IOException if parser initialization fails due to I/O (read) problem
     *
     * @return Parser constructed
     *
     * @since 2.1","protected JsonParser _createParser(InputStream in, IOContext ctxt) throws IOException {
    try {
        return new ByteSourceJsonBootstrapper(ctxt, in).constructParser(_parserFeatures, _objectCodec, _byteSymbolCanonicalizer, _rootCharSymbols, _factoryFeatures);
    } catch (IOException | RuntimeException e) {
        // 10-Jun-2022, tatu: For [core#763] may need to close InputStream here
        if (ctxt.isResourceManaged()) {
            try {
                in.close();
            } catch (Exception e2) {
                e.addSuppressed(e2);
            }
        }
        ctxt.close();
        throw e;
    }
}","JsonParser","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createParser(InputStream,IOContext).in","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._createParser(InputStream,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createParser(InputStream,IOContext).ctxt","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory._createParser(InputStream,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createParser(Reader,IOContext)","Method","* Overridable factory method that actually instantiates parser
     * using given {@link Reader} object for reading content.
     *<p>
     * This method is specifically designed to remain
     * compatible between minor versions so that sub-classes can count
     * on it being called as expected. That is, it is part of official
     * interface from sub-class perspective, although not a public
     * method available to users of factory implementations.
     *
     * @param r Reader to use for reading content to parse
     * @param ctxt I/O context to use for parsing
     *
     * @return Actual parser to use
     *
     * @throws IOException if parser initialization fails due to I/O (read) problem
     *
     * @since 2.1","protected JsonParser _createParser(Reader r, IOContext ctxt) throws IOException {
    return new ReaderBasedJsonParser(ctxt, _parserFeatures, r, _objectCodec, _rootCharSymbols.makeChild());
}","JsonParser","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createParser(Reader,IOContext).r","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._createParser(Reader,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createParser(Reader,IOContext).ctxt","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory._createParser(Reader,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createParser(char[],int,int,IOContext,boolean)","Method","* Overridable factory method that actually instantiates parser
     * using given <code>char[]</code> object for accessing content.
     *
     * @param data Buffer that contains content to parse
     * @param offset Offset to the first character of data to parse
     * @param len Number of characters within buffer to parse
     * @param ctxt I/O context to use for parsing
     * @param recyclable Whether input buffer is recycled by the factory
     *
     * @return Actual parser to use
     *
     * @throws IOException if parser initialization fails due to I/O (read) problem
     *
     * @since 2.4","protected JsonParser _createParser(char[] data, int offset, int len, IOContext ctxt, boolean recyclable) throws IOException {
    return new ReaderBasedJsonParser(ctxt, _parserFeatures, null, _objectCodec, _rootCharSymbols.makeChild(), data, offset, offset + len, recyclable);
}","JsonParser","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createParser(char[],int,int,IOContext,boolean).data","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._createParser(char[],int,int,IOContext,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createParser(char[],int,int,IOContext,boolean).offset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory._createParser(char[],int,int,IOContext,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createParser(char[],int,int,IOContext,boolean).len","Parameter_3","Belong to com.fasterxml.jackson.core.JsonFactory._createParser(char[],int,int,IOContext,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createParser(char[],int,int,IOContext,boolean).ctxt","Parameter_4","Belong to com.fasterxml.jackson.core.JsonFactory._createParser(char[],int,int,IOContext,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createParser(char[],int,int,IOContext,boolean).recyclable","Parameter_5","Belong to com.fasterxml.jackson.core.JsonFactory._createParser(char[],int,int,IOContext,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createParser(byte[],int,int,IOContext)","Method","* Overridable factory method that actually instantiates parser
     * using given {@link Reader} object for reading content
     * passed as raw byte array.
     *<p>
     * This method is specifically designed to remain
     * compatible between minor versions so that sub-classes can count
     * on it being called as expected. That is, it is part of official
     * interface from sub-class perspective, although not a public
     * method available to users of factory implementations.
     *
     * @param data Buffer that contains content to parse
     * @param offset Offset to the first character of data to parse
     * @param len Number of characters within buffer to parse
     * @param ctxt I/O context to use for parsing
     *
     * @return Actual parser to use
     *
     * @throws IOException if parser initialization fails due to I/O (read) problem","protected JsonParser _createParser(byte[] data, int offset, int len, IOContext ctxt) throws IOException {
    return new ByteSourceJsonBootstrapper(ctxt, data, offset, len).constructParser(_parserFeatures, _objectCodec, _byteSymbolCanonicalizer, _rootCharSymbols, _factoryFeatures);
}","JsonParser","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createParser(byte[],int,int,IOContext).data","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._createParser(byte[],int,int,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createParser(byte[],int,int,IOContext).offset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory._createParser(byte[],int,int,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createParser(byte[],int,int,IOContext).len","Parameter_3","Belong to com.fasterxml.jackson.core.JsonFactory._createParser(byte[],int,int,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createParser(byte[],int,int,IOContext).ctxt","Parameter_4","Belong to com.fasterxml.jackson.core.JsonFactory._createParser(byte[],int,int,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createParser(DataInput,IOContext)","Method","* Optional factory method, expected to be overridden
     *
     * @param input DataInput to use for reading content to parse
     * @param ctxt I/O context to use for parsing
     *
     * @return Actual parser to use
     *
     * @throws IOException if parser initialization fails due to I/O (read) problem
     *
     * @since 2.8","protected JsonParser _createParser(DataInput input, IOContext ctxt) throws IOException {
    // 13-May-2016, tatu: Need to take care not to accidentally create JSON parser for
    //   non-JSON input.
    _requireJSONFactory(""InputData source not (yet?) supported for this format (%s)"");
    // Also: while we can't do full bootstrapping (due to read-ahead limitations), should
    // at least handle possible UTF-8 BOM
    int firstByte = ByteSourceJsonBootstrapper.skipUTF8BOM(input);
    ByteQuadsCanonicalizer can = _byteSymbolCanonicalizer.makeChildOrPlaceholder(_factoryFeatures);
    return new UTF8DataInputJsonParser(ctxt, _parserFeatures, input, _objectCodec, can, firstByte);
}","JsonParser","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createParser(DataInput,IOContext).input","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._createParser(DataInput,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createParser(DataInput,IOContext).ctxt","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory._createParser(DataInput,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createGenerator(Writer,IOContext)","Method","* Overridable factory method that actually instantiates generator for
     * given {@link Writer} and context object.
     *<p>
     * This method is specifically designed to remain
     * compatible between minor versions so that sub-classes can count
     * on it being called as expected. That is, it is part of official
     * interface from sub-class perspective, although not a public
     * method available to users of factory implementations.
     *
     * @param out Writer underlying writer to write generated content to
     * @param ctxt I/O context to use
     *
     * @return This factory instance (to allow call chaining)
     *
     * @throws IOException if parser initialization fails due to I/O (write) problem","protected JsonGenerator _createGenerator(Writer out, IOContext ctxt) throws IOException {
    WriterBasedJsonGenerator gen = new WriterBasedJsonGenerator(ctxt, _generatorFeatures, _objectCodec, out, _quoteChar);
    if (_maximumNonEscapedChar > 0) {
        gen.setHighestNonEscapedChar(_maximumNonEscapedChar);
    }
    if (_characterEscapes != null) {
        gen.setCharacterEscapes(_characterEscapes);
    }
    SerializableString rootSep = _rootValueSeparator;
    if (rootSep != DEFAULT_ROOT_VALUE_SEPARATOR) {
        gen.setRootValueSeparator(rootSep);
    }
    return _decorate(gen);
}","JsonGenerator","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createGenerator(Writer,IOContext).out","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._createGenerator(Writer,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createGenerator(Writer,IOContext).ctxt","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory._createGenerator(Writer,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createUTF8Generator(OutputStream,IOContext)","Method","* Overridable factory method that actually instantiates generator for
     * given {@link OutputStream} and context object, using UTF-8 encoding.
     *<p>
     * This method is specifically designed to remain
     * compatible between minor versions so that sub-classes can count
     * on it being called as expected. That is, it is part of official
     * interface from sub-class perspective, although not a public
     * method available to users of factory implementations.
     *
     * @param out OutputStream underlying writer to write generated content to
     * @param ctxt I/O context to use
     *
     * @return This factory instance (to allow call chaining)
     *
     * @throws IOException if parser initialization fails due to I/O (write) problem","protected JsonGenerator _createUTF8Generator(OutputStream out, IOContext ctxt) throws IOException {
    UTF8JsonGenerator gen = new UTF8JsonGenerator(ctxt, _generatorFeatures, _objectCodec, out, _quoteChar);
    if (_maximumNonEscapedChar > 0) {
        gen.setHighestNonEscapedChar(_maximumNonEscapedChar);
    }
    if (_characterEscapes != null) {
        gen.setCharacterEscapes(_characterEscapes);
    }
    SerializableString rootSep = _rootValueSeparator;
    if (rootSep != DEFAULT_ROOT_VALUE_SEPARATOR) {
        gen.setRootValueSeparator(rootSep);
    }
    return _decorate(gen);
}","JsonGenerator","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createUTF8Generator(OutputStream,IOContext).out","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._createUTF8Generator(OutputStream,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createUTF8Generator(OutputStream,IOContext).ctxt","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory._createUTF8Generator(OutputStream,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createWriter(OutputStream,JsonEncoding,IOContext)","Method","No Comment","protected Writer _createWriter(OutputStream out, JsonEncoding enc, IOContext ctxt) throws IOException {
    // note: this should not get called any more (caller checks, dispatches)
    if (enc == JsonEncoding.UTF8) {
        // We have optimized writer for UTF-8
        return new UTF8Writer(ctxt, out);
    }
    // not optimal, but should do unless we really care about UTF-16/32 encoding speed
    return new OutputStreamWriter(out, enc.getJavaName());
}","Writer","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createWriter(OutputStream,JsonEncoding,IOContext).out","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._createWriter(OutputStream,JsonEncoding,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createWriter(OutputStream,JsonEncoding,IOContext).enc","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory._createWriter(OutputStream,JsonEncoding,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createWriter(OutputStream,JsonEncoding,IOContext).ctxt","Parameter_3","Belong to com.fasterxml.jackson.core.JsonFactory._createWriter(OutputStream,JsonEncoding,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._decorate(InputStream,IOContext)","Method","No Comment","protected final InputStream _decorate(InputStream in, IOContext ctxt) throws IOException {
    if (_inputDecorator != null) {
        InputStream in2 = _inputDecorator.decorate(ctxt, in);
        if (in2 != null) {
            return in2;
        }
    }
    return in;
}","InputStream","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._decorate(InputStream,IOContext).in","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._decorate(InputStream,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._decorate(InputStream,IOContext).ctxt","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory._decorate(InputStream,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._decorate(Reader,IOContext)","Method","No Comment","protected final Reader _decorate(Reader in, IOContext ctxt) throws IOException {
    if (_inputDecorator != null) {
        Reader in2 = _inputDecorator.decorate(ctxt, in);
        if (in2 != null) {
            return in2;
        }
    }
    return in;
}","Reader","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._decorate(Reader,IOContext).in","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._decorate(Reader,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._decorate(Reader,IOContext).ctxt","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory._decorate(Reader,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._decorate(DataInput,IOContext)","Method","@since 2.8","protected final DataInput _decorate(DataInput in, IOContext ctxt) throws IOException {
    if (_inputDecorator != null) {
        DataInput in2 = _inputDecorator.decorate(ctxt, in);
        if (in2 != null) {
            return in2;
        }
    }
    return in;
}","DataInput","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._decorate(DataInput,IOContext).in","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._decorate(DataInput,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._decorate(DataInput,IOContext).ctxt","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory._decorate(DataInput,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._decorate(OutputStream,IOContext)","Method","No Comment","protected final OutputStream _decorate(OutputStream out, IOContext ctxt) throws IOException {
    if (_outputDecorator != null) {
        OutputStream out2 = _outputDecorator.decorate(ctxt, out);
        if (out2 != null) {
            return out2;
        }
    }
    return out;
}","OutputStream","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._decorate(OutputStream,IOContext).out","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._decorate(OutputStream,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._decorate(OutputStream,IOContext).ctxt","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory._decorate(OutputStream,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._decorate(Writer,IOContext)","Method","No Comment","protected final Writer _decorate(Writer out, IOContext ctxt) throws IOException {
    if (_outputDecorator != null) {
        Writer out2 = _outputDecorator.decorate(ctxt, out);
        if (out2 != null) {
            return out2;
        }
    }
    return out;
}","Writer","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._decorate(Writer,IOContext).out","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._decorate(Writer,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._decorate(Writer,IOContext).ctxt","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory._decorate(Writer,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._decorate(JsonGenerator)","Method","* Helper method for applying all registered {@link JsonGeneratorDecorator}s
     * on freshly constructed {@link JsonGenerator}.
     *
     * @param g Generator constructed that is to be decorated
     *
     * @return Generator after applying all registered {@link JsonGeneratorDecorator}s.
     *
     * @since 2.16","protected JsonGenerator _decorate(JsonGenerator g) {
    if (_generatorDecorators != null) {
        for (JsonGeneratorDecorator decorator : _generatorDecorators) {
            g = decorator.decorate(this, g);
        }
    }
    return g;
}","JsonGenerator","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._decorate(JsonGenerator).g","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._decorate(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._getBufferRecycler()","Method","* Method used by factory to create buffer recycler instances
     * for parsers and generators.
     *<p>
     * Note: only public to give access for {@code ObjectMapper}
     *
     * @return Buffer recycler instance to use","public BufferRecycler _getBufferRecycler() {
    return _getRecyclerPool().acquireAndLinkPooled();
}","BufferRecycler","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._getRecyclerPool()","Method","* Accessor for getting access to {@link RecyclerPool} for getting
     * {@link BufferRecycler} instance to use.
     *
     * @return RecyclerPool to use.
     *
     * @since 2.16","public RecyclerPool<BufferRecycler> _getRecyclerPool() {
    // 23-Apr-2015, tatu: Let's allow disabling of buffer recycling
    //   scheme, for cases where it is considered harmful (possibly
    //   on Android, for example)
    if (!Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING.enabledIn(_factoryFeatures)) {
        return JsonRecyclerPools.nonRecyclingPool();
    }
    return _recyclerPool;
}","RecyclerPool","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createContext(ContentReference,boolean)","Method","* Overridable factory method that actually instantiates desired
     * context object.
     *
     * @param contentRef Source/target reference to use for diagnostics, exception messages
     * @param resourceManaged Whether input/output buffer is managed by this factory or not
     *
     * @return I/O context created","protected IOContext _createContext(ContentReference contentRef, boolean resourceManaged) {
    BufferRecycler br = null;
    boolean recyclerExternal = false;
    if (contentRef == null) {
        contentRef = ContentReference.unknown();
    } else {
        Object content = contentRef.getRawContent();
        // 18-Jan-2024, tatu: [core#1195] Let's see if we can reuse already allocated recycler
        //   (is the case when SegmentedStringWriter / ByteArrayBuilder passed)
        if (content instanceof BufferRecycler.Gettable) {
            br = ((BufferRecycler.Gettable) content).bufferRecycler();
            recyclerExternal = (br != null);
        }
    }
    if (br == null) {
        br = _getBufferRecycler();
    }
    IOContext ctxt = new IOContext(_streamReadConstraints, _streamWriteConstraints, _errorReportConfiguration, br, contentRef, resourceManaged);
    if (recyclerExternal) {
        ctxt.markBufferRecyclerReleased();
    }
    return ctxt;
}","IOContext","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createContext(ContentReference,boolean).contentRef","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._createContext(ContentReference,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createContext(ContentReference,boolean).resourceManaged","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory._createContext(ContentReference,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createContext(Object,boolean)","Method","* Deprecated variant of {@link #_createContext(Object, boolean)}
     *
     * @param rawContentRef ""Raw"" source/target reference
     * @param resourceManaged Whether input/output buffer is managed by this factory or not
     *
     * @return I/O context created
     *
     * @deprecated Since 2.13","// @since 2.13
@Deprecated
protected IOContext _createContext(Object rawContentRef, boolean resourceManaged) {
    return new IOContext(_streamReadConstraints, _streamWriteConstraints, _errorReportConfiguration, _getBufferRecycler(), _createContentReference(rawContentRef), resourceManaged);
}","IOContext","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createContext(Object,boolean).rawContentRef","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._createContext(Object,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createContext(Object,boolean).resourceManaged","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory._createContext(Object,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createNonBlockingContext(Object)","Method","* Overridable factory method that actually instantiates desired
     * context object for async (non-blocking) parsing
     *
     * @param srcRef Source reference to use for diagnostics, exception messages
     *
     * @return I/O context created
     *
     * @since 2.9.7","protected IOContext _createNonBlockingContext(Object srcRef) {
    // [jackson-core#479]: allow recycling for non-blocking parser again
    // now that access is thread-safe
    return new IOContext(_streamReadConstraints, _streamWriteConstraints, _errorReportConfiguration, _getBufferRecycler(), _createContentReference(srcRef), false);
}","IOContext","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createNonBlockingContext(Object).srcRef","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._createNonBlockingContext(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createContentReference(Object)","Method","* Overridable factory method for constructing {@link ContentReference}
     * to pass to parser or generator being created; used in cases where no offset
     * or length is applicable (either irrelevant, or full contents assumed).
     *
     * @param contentAccessor Access to underlying content; depends on source/target,
     *    as well as content representation
     *
     * @return Reference instance to use
     *
     * @since 2.13","protected ContentReference _createContentReference(Object contentAccessor) {
    // 21-Mar-2021, tatu: For now assume ""canHandleBinaryNatively()"" is reliable
    //    indicator of textual vs binary format:
    return ContentReference.construct(!canHandleBinaryNatively(), contentAccessor, _errorReportConfiguration);
}","ContentReference","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createContentReference(Object).contentAccessor","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._createContentReference(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createContentReference(Object,int,int)","Method","* Overridable factory method for constructing {@link ContentReference}
     * to pass to parser or generator being created; used in cases where content
     * is available in a static buffer with relevant offset and length (mostly
     * when reading from {@code byte[]}, {@code char[]} or {@code String}).
     *
     * @param contentAccessor Access to underlying content; depends on source/target,
     *    as well as content representation
     * @param offset Offset of content
     * @param length Length of content
     *
     * @return Reference instance to use
     *
     * @since 2.13","protected ContentReference _createContentReference(Object contentAccessor, int offset, int length) {
    // 21-Mar-2021, tatu: For now assume ""canHandleBinaryNatively()"" is reliable
    //    indicator of textual vs binary format:
    return ContentReference.construct(!canHandleBinaryNatively(), contentAccessor, offset, length, _errorReportConfiguration);
}","ContentReference","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createContentReference(Object,int,int).contentAccessor","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._createContentReference(Object,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createContentReference(Object,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory._createContentReference(Object,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._createContentReference(Object,int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.JsonFactory._createContentReference(Object,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._requireJSONFactory(String)","Method","* Helper method called to work around the problem of this class both defining
     * general API for constructing parsers+generators AND implementing the API
     * for JSON handling. Problem here is that when adding new functionality
     * via factory methods, it is not possible to leave these methods abstract
     * (because we are implementing them for JSON); but there is risk that
     * sub-classes do not override them all (plus older version cannot implement).
     * So a work-around is to add a check to ensure that factory is still one
     * used for JSON; and if not, make base implementation of a factory method fail.
     *
     * @param msg Message template to use for reporting problem (if necessary)
     *
     * @since 2.9","private final void _requireJSONFactory(String msg) {
    if (!_isJSONFactory()) {
        throw new UnsupportedOperationException(String.format(msg, getFormatName()));
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._requireJSONFactory(String).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory._requireJSONFactory(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory._isJSONFactory()","Method","No Comment","private final boolean _isJSONFactory() {
    // NOTE: since we only really care about whether this is standard JSON-backed factory,
    // or its sub-class / delegated to one, no need to check for equality, identity is enough
    return getFormatName() == FORMAT_NAME_JSON;
}","boolean","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.<init>()","Constructor","* Default constructor used to create factory instances.
     * Creation of a factory instance is a light-weight operation,
     * but it is still a good idea to reuse limited number of
     * factory instances (and quite often just a single instance):
     * factories are used as context for storing some reused
     * processing objects (such as symbol tables parsers use)
     * and this reuse only works within context of a single
     * factory instance.","public JsonFactory() {
    this((ObjectCodec) null);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.<init>(ObjectCodec)","Constructor","No Comment","public JsonFactory(ObjectCodec oc) {
    _recyclerPool = JsonRecyclerPools.defaultPool();
    _objectCodec = oc;
    _quoteChar = DEFAULT_QUOTE_CHAR;
    _streamReadConstraints = StreamReadConstraints.defaults();
    _streamWriteConstraints = StreamWriteConstraints.defaults();
    _errorReportConfiguration = ErrorReportConfiguration.defaults();
    _generatorDecorators = null;
    _rootCharSymbols = CharsToNameCanonicalizer.createRoot(this);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.<init>(ObjectCodec).oc","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.<init>(ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.<init>(JsonFactory,ObjectCodec)","Constructor","* Constructor used when copy()ing a factory instance.
     *
     * @param src Original factory to copy settings from
     * @param codec Databinding-level codec to use, if any
     *
     * @since 2.2.1","protected JsonFactory(JsonFactory src, ObjectCodec codec) {
    _recyclerPool = src._recyclerPool;
    _objectCodec = codec;
    // General
    _factoryFeatures = src._factoryFeatures;
    _parserFeatures = src._parserFeatures;
    _generatorFeatures = src._generatorFeatures;
    _inputDecorator = src._inputDecorator;
    _outputDecorator = src._outputDecorator;
    _generatorDecorators = _copy(src._generatorDecorators);
    _streamReadConstraints = Objects.requireNonNull(src._streamReadConstraints);
    _streamWriteConstraints = Objects.requireNonNull(src._streamWriteConstraints);
    _errorReportConfiguration = Objects.requireNonNull(src._errorReportConfiguration);
    // JSON-specific
    _characterEscapes = src._characterEscapes;
    _rootValueSeparator = src._rootValueSeparator;
    _maximumNonEscapedChar = src._maximumNonEscapedChar;
    _quoteChar = src._quoteChar;
    _rootCharSymbols = CharsToNameCanonicalizer.createRoot(this);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.<init>(JsonFactory,ObjectCodec).src","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.<init>(JsonFactory,ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.<init>(JsonFactory,ObjectCodec).codec","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory.<init>(JsonFactory,ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.<init>(JsonFactoryBuilder)","Constructor","* Constructor used by {@link JsonFactoryBuilder} for instantiation.
     *
     * @param b Builder that contains settings to use
     *
     * @since 2.10","public JsonFactory(JsonFactoryBuilder b) {
    _recyclerPool = b._recyclerPool;
    _objectCodec = null;
    // General
    _factoryFeatures = b._factoryFeatures;
    _parserFeatures = b._streamReadFeatures;
    _generatorFeatures = b._streamWriteFeatures;
    _inputDecorator = b._inputDecorator;
    _outputDecorator = b._outputDecorator;
    _generatorDecorators = _copy(b._generatorDecorators);
    _streamReadConstraints = Objects.requireNonNull(b._streamReadConstraints);
    _streamWriteConstraints = Objects.requireNonNull(b._streamWriteConstraints);
    _errorReportConfiguration = Objects.requireNonNull(b._errorReportConfiguration);
    // JSON-specific
    _characterEscapes = b._characterEscapes;
    _rootValueSeparator = b._rootValueSeparator;
    _maximumNonEscapedChar = b._maximumNonEscapedChar;
    _quoteChar = b._quoteChar;
    _rootCharSymbols = CharsToNameCanonicalizer.createRoot(this);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.<init>(JsonFactoryBuilder).b","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.<init>(JsonFactoryBuilder)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.<init>(TSFBuilder,boolean)","Constructor","* Constructor for subtypes; needed to work around the fact that before 3.0,
     * this factory has cumbersome dual role as generic type as well as actual
     * implementation for json.
     *
     * @param b Builder that contains settings to use
     * @param bogus Argument only needed to separate constructor signature; ignored","protected JsonFactory(TSFBuilder<?, ?> b, boolean bogus) {
    _recyclerPool = b._recyclerPool;
    _objectCodec = null;
    _factoryFeatures = b._factoryFeatures;
    _parserFeatures = b._streamReadFeatures;
    _generatorFeatures = b._streamWriteFeatures;
    _inputDecorator = b._inputDecorator;
    _outputDecorator = b._outputDecorator;
    _generatorDecorators = _copy(b._generatorDecorators);
    _streamReadConstraints = Objects.requireNonNull(b._streamReadConstraints);
    _streamWriteConstraints = Objects.requireNonNull(b._streamWriteConstraints);
    _errorReportConfiguration = Objects.requireNonNull(b._errorReportConfiguration);
    // JSON-specific: need to assign even if not really used
    _characterEscapes = null;
    _rootValueSeparator = null;
    _maximumNonEscapedChar = 0;
    _quoteChar = DEFAULT_QUOTE_CHAR;
    _rootCharSymbols = CharsToNameCanonicalizer.createRoot(this);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.<init>(TSFBuilder,boolean).b","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.<init>(TSFBuilder,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.<init>(TSFBuilder,boolean).bogus","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactory.<init>(TSFBuilder,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory$Feature","Enum","* Enumeration that defines all on/off features that can only be
     * changed for {@link JsonFactory}.","Enum do not obtain Source Code","No return type","public ","enum has no extends","com.fasterxml.jackson.core.util.JacksonFeature"
"com.fasterxml.jackson.core.JsonFactory$Feature","Enum","* Enumeration that defines all on/off features that can only be
     * changed for {@link JsonFactory}.","Enum do not obtain Source Code","No return type","public ","enum has no extends","com.fasterxml.jackson.core.util.JacksonFeature"
"com.fasterxml.jackson.core.JsonFactory$Feature.INTERN_FIELD_NAMES","Enum Constant","* Feature that determines whether JSON object field names are
         * to be canonicalized using {@link String#intern} or not:
         * if enabled, all field names will be intern()ed (and caller
         * can count on this being true for all such names); if disabled,
         * no intern()ing is done. There may still be basic
         * canonicalization (that is, same String will be used to represent
         * all identical object property names for a single document).
         *<p>
         * Note: this setting only has effect if
         * {@link #CANONICALIZE_FIELD_NAMES} is true -- otherwise no
         * canonicalization of any sort is done.
         *<p>
         * This setting is enabled by default.","INTERN_FIELD_NAMES(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory$Feature.CANONICALIZE_FIELD_NAMES","Enum Constant","* Feature that determines whether JSON object field names are
         * to be canonicalized (details of how canonicalization is done
         * then further specified by
         * {@link #INTERN_FIELD_NAMES}).
         *<p>
         * This setting is enabled by default.","CANONICALIZE_FIELD_NAMES(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory$Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW","Enum Constant","* Feature that determines what happens if we encounter a case in symbol
         * handling where number of hash collisions exceeds a safety threshold
         * -- which almost certainly means a denial-of-service attack via generated
         * duplicate hash codes.
         * If feature is enabled, an {@link IllegalStateException} is
         * thrown to indicate the suspected denial-of-service attack; if disabled, processing continues but
         * canonicalization (and thereby <code>intern()</code>ing) is disabled) as protective
         * measure.
         *<p>
         * This setting is enabled by default.
         *
         * @since 2.4","FAIL_ON_SYMBOL_HASH_OVERFLOW(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory$Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING","Enum Constant","* Feature that determines whether we will use a {@link RecyclerPool}
         * for allocating and possibly recycling {@link BufferRecycler} or not.
         * The default {@link RecyclerPool} implementation uses
         * {@link ThreadLocal} and {@link SoftReference} for efficient reuse of
         * underlying input/output buffers.
         * This usually makes sense on normal J2SE/J2EE server-side processing;
         * but may not make sense on platforms where {@link SoftReference} handling
         * is broken (like Android), or if there are retention issues due to
         * {@link ThreadLocal} (see
         * <a href=""https://github.com/FasterXML/jackson-core/issues/189"">jackson-core#189</a>
         * for a possible case)
         *<p>
         * Note that since 2.16 naming here is somewhat misleading as this is used
         * to now enable or disable pooling; but the actual pooling implementation
         * is configurable and may not be based on {@link ThreadLocal}.
         *<p>
         * This setting is enabled by default.
         *
         * @since 2.6","USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory$Feature.CHARSET_DETECTION","Enum Constant","* Feature to control charset detection for byte-based inputs ({@code byte[]}, {@link InputStream}...).
         * When this feature is enabled (the default), the factory will allow UTF-16 and UTF-32 inputs and try to detect
         * them, as specified by RFC 4627. When this feature is disabled the factory will assume UTF-8,
         * as specified by RFC 8259.
         *<p>
         * This setting is enabled by default.
         *
         * @since 2.15","CHARSET_DETECTION(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory$Feature.collectDefaults()","Method","* Method that calculates bit set (flags) of all features that
         * are enabled by default.
         *
         * @return Bit field of features enabled by default","public static int collectDefaults() {
    int flags = 0;
    for (Feature f : values()) {
        if (f.enabledByDefault()) {
            flags |= f.getMask();
        }
    }
    return flags;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory$Feature.enabledByDefault()","Method","No Comment","@Override
public boolean enabledByDefault() {
    return _defaultState;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory$Feature.enabledIn(int)","Method","No Comment","@Override
public boolean enabledIn(int flags) {
    return (flags & getMask()) != 0;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory$Feature.enabledIn(int).flags","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory$Feature.enabledIn(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory$Feature.getMask()","Method","No Comment","@Override
public int getMask() {
    return (1 << ordinal());
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory$Feature.<init>(boolean)","Constructor","No Comment","private Feature(boolean defaultState) {
    _defaultState = defaultState;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory$Feature.<init>(boolean).defaultState","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory$Feature.<init>(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.Feature","Enum","* Enumeration that defines all on/off features that can only be
     * changed for {@link JsonFactory}.","Enum do not obtain Source Code","No return type","public ","enum has no extends","com.fasterxml.jackson.core.util.JacksonFeature"
"com.fasterxml.jackson.core.JsonFactory.Feature.INTERN_FIELD_NAMES","Enum Constant","* Feature that determines whether JSON object field names are
         * to be canonicalized using {@link String#intern} or not:
         * if enabled, all field names will be intern()ed (and caller
         * can count on this being true for all such names); if disabled,
         * no intern()ing is done. There may still be basic
         * canonicalization (that is, same String will be used to represent
         * all identical object property names for a single document).
         *<p>
         * Note: this setting only has effect if
         * {@link #CANONICALIZE_FIELD_NAMES} is true -- otherwise no
         * canonicalization of any sort is done.
         *<p>
         * This setting is enabled by default.","INTERN_FIELD_NAMES(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.Feature.CANONICALIZE_FIELD_NAMES","Enum Constant","* Feature that determines whether JSON object field names are
         * to be canonicalized (details of how canonicalization is done
         * then further specified by
         * {@link #INTERN_FIELD_NAMES}).
         *<p>
         * This setting is enabled by default.","CANONICALIZE_FIELD_NAMES(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW","Enum Constant","* Feature that determines what happens if we encounter a case in symbol
         * handling where number of hash collisions exceeds a safety threshold
         * -- which almost certainly means a denial-of-service attack via generated
         * duplicate hash codes.
         * If feature is enabled, an {@link IllegalStateException} is
         * thrown to indicate the suspected denial-of-service attack; if disabled, processing continues but
         * canonicalization (and thereby <code>intern()</code>ing) is disabled) as protective
         * measure.
         *<p>
         * This setting is enabled by default.
         *
         * @since 2.4","FAIL_ON_SYMBOL_HASH_OVERFLOW(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING","Enum Constant","* Feature that determines whether we will use a {@link RecyclerPool}
         * for allocating and possibly recycling {@link BufferRecycler} or not.
         * The default {@link RecyclerPool} implementation uses
         * {@link ThreadLocal} and {@link SoftReference} for efficient reuse of
         * underlying input/output buffers.
         * This usually makes sense on normal J2SE/J2EE server-side processing;
         * but may not make sense on platforms where {@link SoftReference} handling
         * is broken (like Android), or if there are retention issues due to
         * {@link ThreadLocal} (see
         * <a href=""https://github.com/FasterXML/jackson-core/issues/189"">jackson-core#189</a>
         * for a possible case)
         *<p>
         * Note that since 2.16 naming here is somewhat misleading as this is used
         * to now enable or disable pooling; but the actual pooling implementation
         * is configurable and may not be based on {@link ThreadLocal}.
         *<p>
         * This setting is enabled by default.
         *
         * @since 2.6","USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.Feature.CHARSET_DETECTION","Enum Constant","* Feature to control charset detection for byte-based inputs ({@code byte[]}, {@link InputStream}...).
         * When this feature is enabled (the default), the factory will allow UTF-16 and UTF-32 inputs and try to detect
         * them, as specified by RFC 4627. When this feature is disabled the factory will assume UTF-8,
         * as specified by RFC 8259.
         *<p>
         * This setting is enabled by default.
         *
         * @since 2.15","CHARSET_DETECTION(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.Feature.collectDefaults()","Method","* Method that calculates bit set (flags) of all features that
         * are enabled by default.
         *
         * @return Bit field of features enabled by default","public static int collectDefaults() {
    int flags = 0;
    for (Feature f : values()) {
        if (f.enabledByDefault()) {
            flags |= f.getMask();
        }
    }
    return flags;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.Feature.enabledByDefault()","Method","No Comment","@Override
public boolean enabledByDefault() {
    return _defaultState;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.Feature.enabledIn(int)","Method","No Comment","@Override
public boolean enabledIn(int flags) {
    return (flags & getMask()) != 0;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.Feature.enabledIn(int).flags","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.Feature.enabledIn(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.Feature.getMask()","Method","No Comment","@Override
public int getMask() {
    return (1 << ordinal());
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.Feature.<init>(boolean)","Constructor","No Comment","private Feature(boolean defaultState) {
    _defaultState = defaultState;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactory.Feature.<init>(boolean).defaultState","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactory.Feature.<init>(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.FormatFeature","Interface","* Marker interface that is to be implemented by data format - specific features.
 * Interface used since Java Enums cannot extend classes or other Enums, but
 * they can implement interfaces; and as such we may be able to use limited
 * amount of generic functionality.
 *<p>
 * Since 2.12 this is more of an extra marker feature, as its core API is now
 * defined in more general {@link JacksonFeature}.
 *
 * @since 2.6","Interface do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.util.JacksonFeature",""
"com.fasterxml.jackson.core.FormatFeature.enabledByDefault()","Abstract Method","* Accessor for checking whether this feature is enabled by default.","@Override
public boolean enabledByDefault();","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.FormatFeature.getMask()","Abstract Method","* Returns bit mask for this feature instance; must be a single bit,
     * that is of form <code>(1 &lt;&lt; N)</code>","@Override
public int getMask();","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.FormatFeature.enabledIn(int)","Abstract Method","* Convenience method for checking whether feature is enabled in given bitmask","@Override
public boolean enabledIn(int flags);","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.FormatFeature.enabledIn(int).flags","Parameter_1","Belong to com.fasterxml.jackson.core.FormatFeature.enabledIn(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.async.ByteBufferFeeder","Interface","* {@link NonBlockingInputFeeder} implementation used when feeding data
 * as {@link ByteBuffer} contents.
 *
 * @since 2.9","Interface do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.async.NonBlockingInputFeeder",""
"com.fasterxml.jackson.core.async.ByteBufferFeeder.feedInput(ByteBuffer)","Abstract Method","* Method that can be called to feed more data, if (and only if)
      * {@link NonBlockingInputFeeder#needMoreInput} returns true.
      *
      * @param buffer Buffer that contains additional input to read
      *
      * @throws IOException if the state is such that this method should not be called
      *   (has not yet consumed existing input data, or has been marked as closed)","public void feedInput(ByteBuffer buffer) throws IOException;","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.async.ByteBufferFeeder.feedInput(ByteBuffer).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.async.ByteBufferFeeder.feedInput(ByteBuffer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.async.NonBlockingInputFeeder","Interface","* Interface used by non-blocking {@link com.fasterxml.jackson.core.JsonParser}
 * implementations to feed input to parse.
 * Feeder is used by entity that feeds content to parse; at any given point
 * only one chunk of content can be processed so caller has to take care to
 * only feed more content when existing content has been parsed (which occurs
 * when parser's <code>nextToken</code> is called). Once application using
 * non-blocking parser has no more data to feed it should call
 * {@link #endOfInput} to indicate end of logical input (stream) to parse.
 *
 * @since 2.9","Interface do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.async.NonBlockingInputFeeder.needMoreInput()","Abstract Method","* Method called to check whether it is ok to feed more data: parser returns true
     * if it has no more content to parse (and it is ok to feed more); otherwise false
     * (and no data should yet be fed).
     *
     * @return {@code True} if more input is needed (and can be fed); {@code false} if
     *    there is still some input to decode","public boolean needMoreInput();","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.async.NonBlockingInputFeeder.endOfInput()","Abstract Method","* Method that should be called after last chunk of data to parse has been fed
     * (with {@code feedInput} in sub-class); can be called regardless of what
     * {@link #needMoreInput}
     * returns. After calling this method, no more data can be fed; and parser assumes
     * no more data will be available.","public void endOfInput();","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.async.ByteArrayFeeder","Interface","* {@link NonBlockingInputFeeder} implementation used when feeding data
 * as byte arrays.
 *
 * @since 2.9","Interface do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.async.NonBlockingInputFeeder",""
"com.fasterxml.jackson.core.async.ByteArrayFeeder.feedInput(byte[],int,int)","Abstract Method","* Method that can be called to feed more data, if (and only if)
      * {@link #needMoreInput} returns true.
      *
      * @param data Byte array that contains data to feed: caller must ensure data remains
      *    stable until it is fully processed (which is true when {@link #needMoreInput}
      *    returns true)
      * @param offset Offset within array where input data to process starts
      * @param end Offset after last byte contained in the input array
      *
      * @throws IOException if the state is such that this method should not be called
      *   (has not yet consumed existing input data, or has been marked as closed)","public void feedInput(byte[] data, int offset, int end) throws IOException;","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.async.ByteArrayFeeder.feedInput(byte[],int,int).data","Parameter_1","Belong to com.fasterxml.jackson.core.async.ByteArrayFeeder.feedInput(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.async.ByteArrayFeeder.feedInput(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.async.ByteArrayFeeder.feedInput(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.async.ByteArrayFeeder.feedInput(byte[],int,int).end","Parameter_3","Belong to com.fasterxml.jackson.core.async.ByteArrayFeeder.feedInput(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharacterEscapes","Abstract Class","* Abstract base class that defines interface for customizing character
 * escaping aspects for String values, for formats that use escaping.
 * For JSON this applies to both property names and String values.","Abstract Class do not obtain Source Code","No return type","public , abstract ","","java.io.Serializable"
"com.fasterxml.jackson.core.io.CharacterEscapes.ESCAPE_NONE","Field","* Value used for lookup tables to indicate that matching characters
     * do not need to be escaped.","public final static int ESCAPE_NONE = 0;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharacterEscapes.ESCAPE_STANDARD","Field","* Value used for lookup tables to indicate that matching characters
     * are to be escaped using standard escaping; for JSON this means
     * (for example) using ""backslash - u"" escape method.","public final static int ESCAPE_STANDARD = -1;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharacterEscapes.ESCAPE_CUSTOM","Field","* Value used for lookup tables to indicate that matching characters
     * will need custom escapes; and that another call
     * to {@link #getEscapeSequence} is needed to figure out exact escape
     * sequence to output.","public final static int ESCAPE_CUSTOM = -2;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharacterEscapes.getEscapeCodesForAscii()","Abstract Method","* Method generators can call to get lookup table for determining
     * escape handling for first 128 characters of Unicode (ASCII
     * characters. Caller is not to modify contents of this array, since
     * this is expected to be a shared copy.
     *
     * @return Array with size of at least 128, where first 128 entries
     *    have either one of <code>ESCAPE_xxx</code> constants, or non-zero positive
     *    integer (meaning of which is data format specific; for JSON it means
     *    that combination of backslash and character with that value is to be used)
     *    to indicate that specific escape sequence is to be used.","public abstract int[] getEscapeCodesForAscii();","int[]","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharacterEscapes.getEscapeSequence(int)","Abstract Method","* Method generators can call to get lookup table for determining
     * exact escape sequence to use for given character.
     * It can be called for any character, but typically is called for
     * either for ASCII characters for which custom escape
     * sequence is needed; or for any non-ASCII character.
     *
     * @param ch Character to look escape sequence for
     *
     * @return Escape sequence to use for the character, if any; {@code null} if not","public abstract SerializableString getEscapeSequence(int ch);","SerializableString","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharacterEscapes.getEscapeSequence(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.io.CharacterEscapes.getEscapeSequence(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharacterEscapes.standardAsciiEscapesForJSON()","Method","* Helper method that can be used to get a copy of standard JSON
     * escape definitions; this is useful when just wanting to slightly
     * customize definitions. Caller can modify this array as it sees
     * fit and usually returns modified instance via {@link #getEscapeCodesForAscii}
     *
     * @return Set of escapes, similar to {@link #getEscapeCodesForAscii()} (array of
     *    128 {@code int}s), but a copy that caller owns and is free to modify","public static int[] standardAsciiEscapesForJSON() {
    int[] esc = CharTypes.get7BitOutputEscapes();
    return Arrays.copyOf(esc, esc.length);
}","int[]","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader","Class","* Since JDK does not come with UTF-32/UCS-4, let's implement a simple
 * decoder to use.","Class do not obtain Source Code","No return type","public ","java.io.Reader",""
"com.fasterxml.jackson.core.io.UTF32Reader.LAST_VALID_UNICODE_CHAR","Field","* JSON actually limits available Unicode range in the high end
     * to the same as xml (to basically limit UTF-8 max byte sequence
     * length to 4)","protected final static int LAST_VALID_UNICODE_CHAR = 0x10FFFF;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.NC","Field","No Comment","protected final static char NC = (char) 0;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader._context","Field","No Comment","protected final IOContext _context;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader._in","Field","No Comment","protected InputStream _in;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader._buffer","Field","No Comment","protected byte[] _buffer;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader._ptr","Field","No Comment","protected int _ptr;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader._length","Field","No Comment","protected int _length;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader._bigEndian","Field","No Comment","protected final boolean _bigEndian;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader._surrogate","Field","* Although input is fine with full Unicode set, Java still uses
     * 16-bit chars, so we may have to split high-order chars into
     * surrogate pairs.","protected char _surrogate = NC;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader._charCount","Field","* Total read character count; used for error reporting purposes","protected int _charCount;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader._byteCount","Field","* Total read byte count; used for error reporting purposes","protected int _byteCount;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader._managedBuffers","Field","No Comment","protected final boolean _managedBuffers;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader._tmpBuf","Field","No Comment","protected char[] _tmpBuf;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.close()","Method","No Comment","@Override
public void close() throws IOException {
    InputStream in = _in;
    if (in != null) {
        _in = null;
        freeBuffers();
        in.close();
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.read()","Method","* Although this method is implemented by the base class, AND it should
     * never be called by main code, let's still implement it bit more
     * efficiently just in case","@Override
public int read() throws IOException {
    if (_tmpBuf == null) {
        _tmpBuf = new char[1];
    }
    if (read(_tmpBuf, 0, 1) < 1) {
        return -1;
    }
    return _tmpBuf[0];
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.read(char[],int,int)","Method","No Comment","@Override
public int read(char[] cbuf, int start, int len) throws IOException {
    // Already EOF?
    if (_buffer == null) {
        return -1;
    }
    if (len < 1) {
        return len;
    }
    // Let's then ensure there's enough room...
    if (start < 0 || (start + len) > cbuf.length) {
        reportBounds(cbuf, start, len);
    }
    int outPtr = start;
    final int outEnd = len + start;
    // Ok, first; do we have a surrogate from last round?
    if (_surrogate != NC) {
        cbuf[outPtr++] = _surrogate;
        _surrogate = NC;
        // No need to load more, already got one char
    } else {
        // Note: we'll try to avoid blocking as much as possible. As a
        // result, we only need to get 4 bytes for a full char.
        int left = (_length - _ptr);
        if (left < 4) {
            if (!loadMore(left)) {
                // (legal) EOF?
                // Ok if (but only if!) was at boundary
                if (left == 0) {
                    return -1;
                }
                reportUnexpectedEOF(_length - _ptr, 4);
            }
        }
    }
    // 02-Jun-2017, tatu: Must ensure we don't try to read past buffer end:
    final int lastValidInputStart = (_length - 4);
    main_loop: while ((outPtr < outEnd) && (_ptr <= lastValidInputStart)) {
        int ptr = _ptr;
        int hi, lo;
        if (_bigEndian) {
            hi = (_buffer[ptr] << 8) | (_buffer[ptr + 1] & 0xFF);
            lo = ((_buffer[ptr + 2] & 0xFF) << 8) | (_buffer[ptr + 3] & 0xFF);
        } else {
            lo = (_buffer[ptr] & 0xFF) | ((_buffer[ptr + 1] & 0xFF) << 8);
            hi = (_buffer[ptr + 2] & 0xFF) | (_buffer[ptr + 3] << 8);
        }
        _ptr += 4;
        // Does it need to be split to surrogates?
        // (also, we can and need to verify illegal chars)
        if (hi != 0) {
            // need to split into surrogates?
            // since it may be sign extended
            hi &= 0xFFFF;
            // ch -= 0x10000; to normalize starting with 0x0
            int ch = ((hi - 1) << 16) | lo;
            if (hi > 0x10) {
                // last valid is 0x10FFFF
                reportInvalid(ch, outPtr - start, String.format("" (above 0x%08x)"", LAST_VALID_UNICODE_CHAR));
            }
            cbuf[outPtr++] = (char) (0xD800 + (ch >> 10));
            // hmmh. can this ever be 0? (not legal, at least?)
            lo = (0xDC00 | (ch & 0x03FF));
            // Room for second part?
            if (outPtr >= outEnd) {
                // nope
                _surrogate = (char) ch;
                break main_loop;
            }
        }
        cbuf[outPtr++] = (char) lo;
    }
    int actualLen = (outPtr - start);
    _charCount += actualLen;
    return actualLen;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.read(char[],int,int).cbuf","Parameter_1","Belong to com.fasterxml.jackson.core.io.UTF32Reader.read(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.read(char[],int,int).start","Parameter_2","Belong to com.fasterxml.jackson.core.io.UTF32Reader.read(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.read(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.io.UTF32Reader.read(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.reportUnexpectedEOF(int,int)","Method","No Comment","private void reportUnexpectedEOF(int gotBytes, int needed) throws IOException {
    int bytePos = _byteCount + gotBytes, charPos = _charCount;
    throw new CharConversionException(""Unexpected EOF in the middle of a 4-byte UTF-32 char: got "" + gotBytes + "", needed "" + needed + "", at char #"" + charPos + "", byte #"" + bytePos + "")"");
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.reportUnexpectedEOF(int,int).gotBytes","Parameter_1","Belong to com.fasterxml.jackson.core.io.UTF32Reader.reportUnexpectedEOF(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.reportUnexpectedEOF(int,int).needed","Parameter_2","Belong to com.fasterxml.jackson.core.io.UTF32Reader.reportUnexpectedEOF(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.reportInvalid(int,int,String)","Method","No Comment","private void reportInvalid(int value, int offset, String msg) throws IOException {
    int bytePos = _byteCount + _ptr - 1, charPos = _charCount + offset;
    throw new CharConversionException(""Invalid UTF-32 character 0x"" + Integer.toHexString(value) + msg + "" at char #"" + charPos + "", byte #"" + bytePos + "")"");
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.reportInvalid(int,int,String).value","Parameter_1","Belong to com.fasterxml.jackson.core.io.UTF32Reader.reportInvalid(int,int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.reportInvalid(int,int,String).offset","Parameter_2","Belong to com.fasterxml.jackson.core.io.UTF32Reader.reportInvalid(int,int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.reportInvalid(int,int,String).msg","Parameter_3","Belong to com.fasterxml.jackson.core.io.UTF32Reader.reportInvalid(int,int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.loadMore(int)","Method","* @param available Number of ""unused"" bytes in the input buffer
     *
     * @return True, if enough bytes were read to allow decoding of at least
     *   one full character; false if EOF was encountered instead.","private boolean loadMore(int available) throws IOException {
    // 06-Apr-2021, tatu: If no InputStream (either due to closure or
    //    input being passed direcly in buffer) let's NOT bother
    //    trying to read (can't).
    //    Similarly, without read buffer cannot really read...
    if ((_in == null) || (_buffer == null)) {
        return false;
    }
    _byteCount += (_length - available);
    // Bytes that need to be moved to the beginning of buffer?
    if (available > 0) {
        if (_ptr > 0) {
            System.arraycopy(_buffer, _ptr, _buffer, 0, available);
            _ptr = 0;
        }
        _length = available;
    } else {
        // Ok; here we can actually reasonably expect an EOF,
        // so let's do a separate read right away:
        _ptr = 0;
        int count = _in.read(_buffer);
        if (count < 1) {
            _length = 0;
            if (count < 0) {
                // -1
                if (_managedBuffers) {
                    // to help GC?
                    freeBuffers();
                }
                return false;
            }
            // 0 count is no good; let's err out
            reportStrangeStream();
        }
        _length = count;
    }
    // Need at least 4 bytes; if we don't get that many, it's an error.
    while (_length < 4) {
        int count = _in.read(_buffer, _length, _buffer.length - _length);
        if (count < 1) {
            if (count < 0) {
                // -1, EOF... no good!
                if (_managedBuffers) {
                    // to help GC?
                    freeBuffers();
                }
                reportUnexpectedEOF(_length, 4);
            }
            // 0 count is no good; let's err out
            reportStrangeStream();
        }
        _length += count;
    }
    return true;
}","boolean","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.loadMore(int).available","Parameter_1","Belong to com.fasterxml.jackson.core.io.UTF32Reader.loadMore(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.freeBuffers()","Method","* This method should be called along with (or instead of) normal
     * close. After calling this method, no further reads should be tried.
     * Method will try to recycle read buffers (if any).","private void freeBuffers() {
    byte[] buf = _buffer;
    if (buf != null) {
        _buffer = null;
        if (_context != null) {
            // tests pass null
            _context.releaseReadIOBuffer(buf);
        }
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.reportBounds(char[],int,int)","Method","No Comment","private void reportBounds(char[] cbuf, int start, int len) throws IOException {
    throw new ArrayIndexOutOfBoundsException(String.format(""read(buf,%d,%d), cbuf[%d]"", start, len, cbuf.length));
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.reportBounds(char[],int,int).cbuf","Parameter_1","Belong to com.fasterxml.jackson.core.io.UTF32Reader.reportBounds(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.reportBounds(char[],int,int).start","Parameter_2","Belong to com.fasterxml.jackson.core.io.UTF32Reader.reportBounds(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.reportBounds(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.io.UTF32Reader.reportBounds(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.reportStrangeStream()","Method","No Comment","private void reportStrangeStream() throws IOException {
    throw new IOException(""Strange I/O stream, returned 0 bytes on read"");
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.<init>(IOContext,InputStream,byte[],int,int,boolean)","Constructor","No Comment","public UTF32Reader(IOContext ctxt, InputStream in, byte[] buf, int ptr, int len, boolean isBigEndian) {
    _context = ctxt;
    _in = in;
    _buffer = buf;
    _ptr = ptr;
    _length = len;
    _bigEndian = isBigEndian;
    _managedBuffers = (in != null);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.<init>(IOContext,InputStream,byte[],int,int,boolean).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.io.UTF32Reader.<init>(IOContext,InputStream,byte[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.<init>(IOContext,InputStream,byte[],int,int,boolean).in","Parameter_2","Belong to com.fasterxml.jackson.core.io.UTF32Reader.<init>(IOContext,InputStream,byte[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.<init>(IOContext,InputStream,byte[],int,int,boolean).buf","Parameter_3","Belong to com.fasterxml.jackson.core.io.UTF32Reader.<init>(IOContext,InputStream,byte[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.<init>(IOContext,InputStream,byte[],int,int,boolean).ptr","Parameter_4","Belong to com.fasterxml.jackson.core.io.UTF32Reader.<init>(IOContext,InputStream,byte[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.<init>(IOContext,InputStream,byte[],int,int,boolean).len","Parameter_5","Belong to com.fasterxml.jackson.core.io.UTF32Reader.<init>(IOContext,InputStream,byte[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF32Reader.<init>(IOContext,InputStream,byte[],int,int,boolean).isBigEndian","Parameter_6","Belong to com.fasterxml.jackson.core.io.UTF32Reader.<init>(IOContext,InputStream,byte[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes","Class","No Comment","Class do not obtain Source Code","No return type","public , final ","",""
"com.fasterxml.jackson.core.io.CharTypes.HC","Field","No Comment","protected final static char[] HC = ""0123456789ABCDEF"".toCharArray();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.HClower","Field","No Comment","protected final static char[] HClower = ""0123456789abcdef"".toCharArray();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.HB","Field","No Comment","protected final static byte[] HB;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.HBlower","Field","No Comment","protected final static byte[] HBlower;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.sInputCodes","Field","* Lookup table used for determining which input characters
     * need special handling when contained in text segment.","protected final static int[] sInputCodes;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.sInputCodesUTF8","Field","* Additionally we can combine UTF-8 decoding info into similar
     * data table.","protected final static int[] sInputCodesUTF8;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.sInputCodesJsNames","Field","* To support non-default (and -standard) unquoted field names mode,
     * need to have alternate checking.
     * Basically this is list of 8-bit ASCII characters that are legal
     * as part of Javascript identifier","protected final static int[] sInputCodesJsNames;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.sInputCodesUtf8JsNames","Field","* This table is similar to Latin-1, except that it marks all ""high-bit""
     * code as ok. They will be validated at a later point, when decoding
     * name","protected final static int[] sInputCodesUtf8JsNames;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.sInputCodesComment","Field","* Decoding table used to quickly determine characters that are
     * relevant within comment content.","protected final static int[] sInputCodesComment;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.sInputCodesWS","Field","* Decoding table used for skipping white space and comments.
     *
     * @since 2.3","protected final static int[] sInputCodesWS;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.sOutputEscapes128","Field","* Lookup table used for determining which output characters in
     * 7-bit ASCII range need to be quoted.","protected final static int[] sOutputEscapes128;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.sOutputEscapes128WithSlash","Field","* Lookup table same as {@link #sOutputEscapes128} except that
     * forward slash ('/') is also escaped","protected final static int[] sOutputEscapes128WithSlash;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.sHexValues","Field","* Lookup table for the first 256 Unicode characters (ASCII / UTF-8)
     * range. For actual hex digits, contains corresponding value;
     * for others -1.
     *<p>
     * NOTE: before 2.10.1, was of size 128, extended for simpler handling","protected final static int[] sHexValues = new int[256];","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.getInputCodeLatin1()","Method","No Comment","public static int[] getInputCodeLatin1() {
    return sInputCodes;
}","int[]","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.getInputCodeUtf8()","Method","No Comment","public static int[] getInputCodeUtf8() {
    return sInputCodesUTF8;
}","int[]","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.getInputCodeLatin1JsNames()","Method","No Comment","public static int[] getInputCodeLatin1JsNames() {
    return sInputCodesJsNames;
}","int[]","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.getInputCodeUtf8JsNames()","Method","No Comment","public static int[] getInputCodeUtf8JsNames() {
    return sInputCodesUtf8JsNames;
}","int[]","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.getInputCodeComment()","Method","No Comment","public static int[] getInputCodeComment() {
    return sInputCodesComment;
}","int[]","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.getInputCodeWS()","Method","No Comment","public static int[] getInputCodeWS() {
    return sInputCodesWS;
}","int[]","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.get7BitOutputEscapes()","Method","* Accessor for getting a read-only encoding table for first 128 Unicode
     * code points (single-byte UTF-8 characters).
     * Value of 0 means ""no escaping""; other positive values that value is character
     * to use after backslash; and negative values that generic (backslash - u)
     * escaping is to be used.
     *
     * @return 128-entry {@code int[]} that contains escape definitions","public static int[] get7BitOutputEscapes() {
    return sOutputEscapes128;
}","int[]","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.get7BitOutputEscapes(int)","Method","* Alternative to {@link #get7BitOutputEscapes()} when a non-standard quote character
     * is used.
     *
     * @param quoteChar Character used for quoting textual values and property names;
     *    usually double-quote but sometimes changed to single-quote (apostrophe)
     *
     * @return 128-entry {@code int[]} that contains escape definitions
     *
     * @since 2.10","public static int[] get7BitOutputEscapes(int quoteChar) {
    if (quoteChar == '""') {
        return sOutputEscapes128;
    }
    return AltEscapes.instance.escapesFor(quoteChar);
}","int[]","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.get7BitOutputEscapes(int).quoteChar","Parameter_1","Belong to com.fasterxml.jackson.core.io.CharTypes.get7BitOutputEscapes(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.get7BitOutputEscapes(int,boolean)","Method","* Alternative to {@link #get7BitOutputEscapes()} when either a non-standard
     * quote character is used, or forward slash is to be escaped.
     *
     * @param quoteChar Character used for quoting textual values and property names;
     *    usually double-quote but sometimes changed to single-quote (apostrophe)
     * @param escapeSlash
     *
     * @return 128-entry {@code int[]} that contains escape definitions
     *
     * @since 2.17","public static int[] get7BitOutputEscapes(int quoteChar, boolean escapeSlash) {
    if (quoteChar == '""') {
        if (escapeSlash) {
            return sOutputEscapes128WithSlash;
        }
        return sOutputEscapes128;
    }
    return AltEscapes.instance.escapesFor(quoteChar, escapeSlash);
}","int[]","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.get7BitOutputEscapes(int,boolean).quoteChar","Parameter_1","Belong to com.fasterxml.jackson.core.io.CharTypes.get7BitOutputEscapes(int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.get7BitOutputEscapes(int,boolean).escapeSlash","Parameter_2","Belong to com.fasterxml.jackson.core.io.CharTypes.get7BitOutputEscapes(int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.charToHex(int)","Method","No Comment","public static int charToHex(int ch) {
    // 08-Nov-2019, tatu: As per [core#540] and [core#578], changed to
    //   force masking here so caller need not do that.
    return sHexValues[ch & 0xFF];
}","int","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.charToHex(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.io.CharTypes.charToHex(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.hexToChar(int)","Method","@since 2.13","public static char hexToChar(int ch) {
    return HC[ch];
}","char","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.hexToChar(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.io.CharTypes.hexToChar(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.appendQuoted(StringBuilder,String)","Method","* Helper method for appending JSON-escaped version of contents
     * into specific {@link StringBuilder}, using default JSON specification
     * mandated minimum escaping rules.
     *
     * @param sb Buffer to append escaped contents in
     *
     * @param content Unescaped String value to append with escaping applied","public static void appendQuoted(StringBuilder sb, String content) {
    final int[] escCodes = sOutputEscapes128;
    int escLen = escCodes.length;
    for (int i = 0, len = content.length(); i < len; ++i) {
        char c = content.charAt(i);
        if (c >= escLen || escCodes[c] == 0) {
            sb.append(c);
            continue;
        }
        sb.append('\\');
        int escCode = escCodes[c];
        if (escCode < 0) {
            // generic quoting (hex value)
            // The only negative value sOutputEscapes128 returns
            // is CharacterEscapes.ESCAPE_STANDARD, which mean
            // appendQuotes should encode using the Unicode encoding;
            // not sure if this is the right way to encode for
            // CharacterEscapes.ESCAPE_CUSTOM or other (future)
            // CharacterEscapes.ESCAPE_XXX values.
            // We know that it has to fit in just 2 hex chars
            sb.append('u');
            sb.append('0');
            sb.append('0');
            // widening
            int value = c;
            sb.append(HC[value >> 4]);
            sb.append(HC[value & 0xF]);
        } else {
            // ""named"", i.e. prepend with slash
            sb.append((char) escCode);
        }
    }
}","void","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.appendQuoted(StringBuilder,String).sb","Parameter_1","Belong to com.fasterxml.jackson.core.io.CharTypes.appendQuoted(StringBuilder,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.appendQuoted(StringBuilder,String).content","Parameter_2","Belong to com.fasterxml.jackson.core.io.CharTypes.appendQuoted(StringBuilder,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.copyHexChars()","Method","* @return Copy of array of 16 upper-case hexadecimal characters
     *
     * @deprecated Since 2.14 Use {@link #copyHexChars(boolean)} instead","// since 2.14
@Deprecated
public static char[] copyHexChars() {
    return copyHexChars(true);
}","char[]","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.copyHexChars(boolean)","Method","No Comment","public static char[] copyHexChars(boolean uppercase) {
    return (uppercase) ? HC.clone() : HClower.clone();
}","char[]","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.copyHexChars(boolean).uppercase","Parameter_1","Belong to com.fasterxml.jackson.core.io.CharTypes.copyHexChars(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.copyHexBytes()","Method","* @return Copy of array of 16 upper-case hexadecimal characters as bytes
     *
     * @deprecated Since 2.14 Use {@link #copyHexBytes(boolean)} instead","// since 2.14
@Deprecated
public static byte[] copyHexBytes() {
    return copyHexBytes(true);
}","byte[]","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.copyHexBytes(boolean)","Method","No Comment","public static byte[] copyHexBytes(boolean uppercase) {
    return (uppercase) ? HB.clone() : HBlower.clone();
}","byte[]","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.copyHexBytes(boolean).uppercase","Parameter_1","Belong to com.fasterxml.jackson.core.io.CharTypes.copyHexBytes(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes$AltEscapes","Class","* Helper used for lazy initialization of alternative escape (quoting)
     * table, used for escaping content that uses non-standard quote
     * character (usually apostrophe).
     *
     * @since 2.10","Class do not obtain Source Code","No return type","private , static ","",""
"com.fasterxml.jackson.core.io.CharTypes$AltEscapes.instance","Field","No Comment","public final static AltEscapes instance = new AltEscapes();","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes$AltEscapes._altEscapes","Field","No Comment","private int[][] _altEscapes = new int[128][];","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes$AltEscapes._altEscapesWithSlash","Field","@since 2.17","private int[][] _altEscapesWithSlash = new int[128][];","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes$AltEscapes.escapesFor(int)","Method","No Comment","public int[] escapesFor(int quoteChar) {
    int[] esc = _altEscapes[quoteChar];
    if (esc == null) {
        esc = Arrays.copyOf(sOutputEscapes128, 128);
        // Only add escape setting if character does not already have it
        if (esc[quoteChar] == 0) {
            esc[quoteChar] = CharacterEscapes.ESCAPE_STANDARD;
        }
        _altEscapes[quoteChar] = esc;
    }
    return esc;
}","int[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes$AltEscapes.escapesFor(int).quoteChar","Parameter_1","Belong to com.fasterxml.jackson.core.io.CharTypes$AltEscapes.escapesFor(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes$AltEscapes.escapesFor(int,boolean)","Method","@since 2.17","public int[] escapesFor(int quoteChar, boolean escapeSlash) {
    if (!escapeSlash) {
        return escapesFor(quoteChar);
    }
    int[] esc = _altEscapesWithSlash[quoteChar];
    if (esc == null) {
        esc = escapesFor(quoteChar);
        esc['/'] = '/';
        _altEscapesWithSlash[quoteChar] = esc;
    }
    return esc;
}","int[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes$AltEscapes.escapesFor(int,boolean).quoteChar","Parameter_1","Belong to com.fasterxml.jackson.core.io.CharTypes$AltEscapes.escapesFor(int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes$AltEscapes.escapesFor(int,boolean).escapeSlash","Parameter_2","Belong to com.fasterxml.jackson.core.io.CharTypes$AltEscapes.escapesFor(int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.AltEscapes","Class","* Helper used for lazy initialization of alternative escape (quoting)
     * table, used for escaping content that uses non-standard quote
     * character (usually apostrophe).
     *
     * @since 2.10","Class do not obtain Source Code","No return type","private , static ","",""
"com.fasterxml.jackson.core.io.CharTypes.AltEscapes.instance","Field","No Comment","public final static AltEscapes instance = new AltEscapes();","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.AltEscapes._altEscapes","Field","No Comment","private int[][] _altEscapes = new int[128][];","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.AltEscapes._altEscapesWithSlash","Field","@since 2.17","private int[][] _altEscapesWithSlash = new int[128][];","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.AltEscapes.escapesFor(int)","Method","No Comment","public int[] escapesFor(int quoteChar) {
    int[] esc = _altEscapes[quoteChar];
    if (esc == null) {
        esc = Arrays.copyOf(sOutputEscapes128, 128);
        // Only add escape setting if character does not already have it
        if (esc[quoteChar] == 0) {
            esc[quoteChar] = CharacterEscapes.ESCAPE_STANDARD;
        }
        _altEscapes[quoteChar] = esc;
    }
    return esc;
}","int[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.AltEscapes.escapesFor(int).quoteChar","Parameter_1","Belong to com.fasterxml.jackson.core.io.CharTypes.AltEscapes.escapesFor(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.AltEscapes.escapesFor(int,boolean)","Method","@since 2.17","public int[] escapesFor(int quoteChar, boolean escapeSlash) {
    if (!escapeSlash) {
        return escapesFor(quoteChar);
    }
    int[] esc = _altEscapesWithSlash[quoteChar];
    if (esc == null) {
        esc = escapesFor(quoteChar);
        esc['/'] = '/';
        _altEscapesWithSlash[quoteChar] = esc;
    }
    return esc;
}","int[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.AltEscapes.escapesFor(int,boolean).quoteChar","Parameter_1","Belong to com.fasterxml.jackson.core.io.CharTypes.AltEscapes.escapesFor(int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.CharTypes.AltEscapes.escapesFor(int,boolean).escapeSlash","Parameter_2","Belong to com.fasterxml.jackson.core.io.CharTypes.AltEscapes.escapesFor(int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal","Class","* This class exposes a method to render a {@code double} as a string.
 *
 * @author Raffaello Giulietti","Class do not obtain Source Code","No return type","final , public ","",""
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.P","Field","The precision in bits.","static final int P = 53;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.W","Field","Exponent width in bits.","private static final int W = (Double.SIZE - 1) - (P - 1);","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.Q_MIN","Field","Minimum value of the exponent: -(2^(W-1)) - P + 3.","static final int Q_MIN = (-1 << W - 1) - P + 3;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.Q_MAX","Field","Maximum value of the exponent: 2^(W-1) - P.","static final int Q_MAX = (1 << W - 1) - P;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.E_MIN","Field","10^(E_MIN - 1) <= MIN_VALUE < 10^E_MIN","static final int E_MIN = -323;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.E_MAX","Field","10^(E_MAX - 1) <= MAX_VALUE < 10^E_MAX","static final int E_MAX = 309;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.C_TINY","Field","Threshold to detect tiny values, as in section 8.1.1 of [1]","static final long C_TINY = 3;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.K_MIN","Field","The minimum and maximum k, as in section 8 of [1]","static final int K_MIN = -324;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.K_MAX","Field","No Comment","static final int K_MAX = 292;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.H","Field","H is as in section 8 of [1].","static final int H = 17;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.C_MIN","Field","Minimum value of the significand of a normal value: 2^(P-1).","private static final long C_MIN = 1L << P - 1;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.BQ_MASK","Field","Mask to extract the biased exponent.","private static final int BQ_MASK = (1 << W) - 1;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.T_MASK","Field","Mask to extract the fraction bits.","private static final long T_MASK = (1L << P - 1) - 1;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.MASK_63","Field","Used in rop().","private static final long MASK_63 = (1L << 63) - 1;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.MASK_28","Field","Used for left-to-tight digit extraction.","private static final int MASK_28 = (1 << 28) - 1;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.NON_SPECIAL","Field","No Comment","private static final int NON_SPECIAL = 0;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.PLUS_ZERO","Field","No Comment","private static final int PLUS_ZERO = 1;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.MINUS_ZERO","Field","No Comment","private static final int MINUS_ZERO = 2;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.PLUS_INF","Field","No Comment","private static final int PLUS_INF = 3;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.MINUS_INF","Field","No Comment","private static final int MINUS_INF = 4;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.NAN","Field","No Comment","private static final int NAN = 5;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.MAX_CHARS","Field","Room for the longer of the forms
        -ddddd.dddddddddddd         H + 2 characters
        -0.00ddddddddddddddddd      H + 5 characters
        -d.ddddddddddddddddE-eee    H + 7 characters
    where there are H digits d","public final int MAX_CHARS = H + 7;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.bytes","Field","Numerical results are created here...","private final byte[] bytes = new byte[MAX_CHARS];","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.index","Field","Index into bytes of rightmost valid character.","private int index;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toString(double)","Method","* Returns a string rendering of the {@code double} argument.
     *
     * <p>The characters of the result are all drawn from the ASCII set.
     * <ul>
     * <li> Any NaN, whether quiet or signaling, is rendered as
     * {@code ""NaN""}, regardless of the sign bit.
     * <li> The infinities +&infin; and -&infin; are rendered as
     * {@code ""Infinity""} and {@code ""-Infinity""}, respectively.
     * <li> The positive and negative zeroes are rendered as
     * {@code ""0.0""} and {@code ""-0.0""}, respectively.
     * <li> A finite negative {@code v} is rendered as the sign
     * '{@code -}' followed by the rendering of the magnitude -{@code v}.
     * <li> A finite positive {@code v} is rendered in two stages:
     * <ul>
     * <li> <em>Selection of a decimal</em>: A well-defined
     * decimal <i>d</i><sub><code>v</code></sub> is selected
     * to represent {@code v}.
     * <li> <em>Formatting as a string</em>: The decimal
     * <i>d</i><sub><code>v</code></sub> is formatted as a string,
     * either in plain or in computerized scientific notation,
     * depending on its value.
     * </ul>
     * </ul>
     *
     * <p>A <em>decimal</em> is a number of the form
     * <i>d</i>&times;10<sup><i>i</i></sup>
     * for some (unique) integers <i>d</i> &gt; 0 and <i>i</i> such that
     * <i>d</i> is not a multiple of 10.
     * These integers are the <em>significand</em> and
     * the <em>exponent</em>, respectively, of the decimal.
     * The <em>length</em> of the decimal is the (unique)
     * integer <i>n</i> meeting
     * 10<sup><i>n</i>-1</sup> &le; <i>d</i> &lt; 10<sup><i>n</i></sup>.
     *
     * <p>The decimal <i>d</i><sub><code>v</code></sub>
     * for a finite positive {@code v} is defined as follows:
     * <ul>
     * <li>Let <i>R</i> be the set of all decimals that round to {@code v}
     * according to the usual round-to-closest rule of
     * IEEE 754 floating-point arithmetic.
     * <li>Let <i>m</i> be the minimal length over all decimals in <i>R</i>.
     * <li>When <i>m</i> &ge; 2, let <i>T</i> be the set of all decimals
     * in <i>R</i> with length <i>m</i>.
     * Otherwise, let <i>T</i> be the set of all decimals
     * in <i>R</i> with length 1 or 2.
     * <li>Define <i>d</i><sub><code>v</code></sub> as
     * the decimal in <i>T</i> that is closest to {@code v}.
     * Or if there are two such decimals in <i>T</i>,
     * select the one with the even significand (there is exactly one).
     * </ul>
     *
     * <p>The (uniquely) selected decimal <i>d</i><sub><code>v</code></sub>
     * is then formatted.
     *
     * <p>Let <i>d</i>, <i>i</i> and <i>n</i> be the significand, exponent and
     * length of <i>d</i><sub><code>v</code></sub>, respectively.
     * Further, let <i>e</i> = <i>n</i> + <i>i</i> - 1 and let
     * <i>d</i><sub>1</sub>&hellip;<i>d</i><sub><i>n</i></sub>
     * be the usual decimal expansion of the significand.
     * Note that <i>d</i><sub>1</sub> &ne; 0 &ne; <i>d</i><sub><i>n</i></sub>.
     * <ul>
     * <li>Case -3 &le; <i>e</i> &lt; 0:
     * <i>d</i><sub><code>v</code></sub> is formatted as
     * <code>0.0</code>&hellip;<code>0</code><!--
     * --><i>d</i><sub>1</sub>&hellip;<i>d</i><sub><i>n</i></sub>,
     * where there are exactly -(<i>n</i> + <i>i</i>) zeroes between
     * the decimal point and <i>d</i><sub>1</sub>.
     * For example, 123 &times; 10<sup>-4</sup> is formatted as
     * {@code 0.0123}.
     * <li>Case 0 &le; <i>e</i> &lt; 7:
     * <ul>
     * <li>Subcase <i>i</i> &ge; 0:
     * <i>d</i><sub><code>v</code></sub> is formatted as
     * <i>d</i><sub>1</sub>&hellip;<i>d</i><sub><i>n</i></sub><!--
     * --><code>0</code>&hellip;<code>0.0</code>,
     * where there are exactly <i>i</i> zeroes
     * between <i>d</i><sub><i>n</i></sub> and the decimal point.
     * For example, 123 &times; 10<sup>2</sup> is formatted as
     * {@code 12300.0}.
     * <li>Subcase <i>i</i> &lt; 0:
     * <i>d</i><sub><code>v</code></sub> is formatted as
     * <i>d</i><sub>1</sub>&hellip;<!--
     * --><i>d</i><sub><i>n</i>+<i>i</i></sub>.<!--
     * --><i>d</i><sub><i>n</i>+<i>i</i>+1</sub>&hellip;<!--
     * --><i>d</i><sub><i>n</i></sub>.
     * There are exactly -<i>i</i> digits to the right of
     * the decimal point.
     * For example, 123 &times; 10<sup>-1</sup> is formatted as
     * {@code 12.3}.
     * </ul>
     * <li>Case <i>e</i> &lt; -3 or <i>e</i> &ge; 7:
     * computerized scientific notation is used to format
     * <i>d</i><sub><code>v</code></sub>.
     * Here <i>e</i> is formatted as by {@link Integer#toString(int)}.
     * <ul>
     * <li>Subcase <i>n</i> = 1:
     * <i>d</i><sub><code>v</code></sub> is formatted as
     * <i>d</i><sub>1</sub><code>.0E</code><i>e</i>.
     * For example, 1 &times; 10<sup>23</sup> is formatted as
     * {@code 1.0E23}.
     * <li>Subcase <i>n</i> &gt; 1:
     * <i>d</i><sub><code>v</code></sub> is formatted as
     * <i>d</i><sub>1</sub><code>.</code><i>d</i><sub>2</sub><!--
     * -->&hellip;<i>d</i><sub><i>n</i></sub><code>E</code><i>e</i>.
     * For example, 123 &times; 10<sup>-21</sup> is formatted as
     * {@code 1.23E-19}.
     * </ul>
     * </ul>
     *
     * @param v the {@code double} to be rendered.
     * @return a string rendering of the argument.","public static String toString(double v) {
    return new DoubleToDecimal().toDecimalString(v);
}","String","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toString(double).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toString(double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toDecimalString(double)","Method","No Comment","private String toDecimalString(double v) {
    switch(toDecimal(v)) {
        case NON_SPECIAL:
            return charsToString();
        case PLUS_ZERO:
            return ""0.0"";
        case MINUS_ZERO:
            return ""-0.0"";
        case PLUS_INF:
            return ""Infinity"";
        case MINUS_INF:
            return ""-Infinity"";
        default:
            return ""NaN"";
    }
}","String","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toDecimalString(double).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toDecimalString(double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toDecimal(double)","Method","Returns
        PLUS_ZERO       iff v is 0.0
        MINUS_ZERO      iff v is -0.0
        PLUS_INF        iff v is POSITIVE_INFINITY
        MINUS_INF       iff v is NEGATIVE_INFINITY
        NAN             iff v is NaN","private int toDecimal(double v) {
    /*
        For full details see references [2] and [1].

        For finite v != 0, determine integers c and q such that
            |v| = c 2^q    and
            Q_MIN <= q <= Q_MAX    and
                either    2^(P-1) <= c < 2^P                 (normal)
                or        0 < c < 2^(P-1)  and  q = Q_MIN    (subnormal)
         */
    long bits = doubleToRawLongBits(v);
    long t = bits & T_MASK;
    int bq = (int) (bits >>> P - 1) & BQ_MASK;
    if (bq < BQ_MASK) {
        index = -1;
        if (bits < 0) {
            append('-');
        }
        if (bq != 0) {
            // normal value. Here mq = -q
            int mq = -Q_MIN + 1 - bq;
            long c = C_MIN | t;
            // The fast path discussed in section 8.2 of [1].
            if (0 < mq & mq < P) {
                long f = c >> mq;
                if (f << mq == c) {
                    return toChars(f, 0);
                }
            }
            return toDecimal(-mq, c, 0);
        }
        if (t != 0) {
            // subnormal value
            return t < C_TINY ? toDecimal(Q_MIN, 10 * t, -1) : toDecimal(Q_MIN, t, 0);
        }
        return bits == 0 ? PLUS_ZERO : MINUS_ZERO;
    }
    if (t != 0) {
        return NAN;
    }
    return bits > 0 ? PLUS_INF : MINUS_INF;
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toDecimal(double).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toDecimal(double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toDecimal(int,long,int)","Method","No Comment","private int toDecimal(int q, long c, int dk) {
    /*
        The skeleton corresponds to figure 4 of [1].
        The efficient computations are those summarized in figure 7.

        Here's a correspondence between Java names and names in [1],
        expressed as approximate LaTeX source code and informally.
        Other names are identical.
        cb:     \bar{c}     ""c-bar""
        cbr:    \bar{c}_r   ""c-bar-r""
        cbl:    \bar{c}_l   ""c-bar-l""

        vb:     \bar{v}     ""v-bar""
        vbr:    \bar{v}_r   ""v-bar-r""
        vbl:    \bar{v}_l   ""v-bar-l""

        rop:    r_o'        ""r-o-prime""
         */
    int out = (int) c & 0x1;
    long cb = c << 2;
    long cbr = cb + 2;
    long cbl;
    int k;
    /*
        flog10pow2(e) = floor(log_10(2^e))
        flog10threeQuartersPow2(e) = floor(log_10(3/4 2^e))
        flog2pow10(e) = floor(log_2(10^e))
         */
    if (c != C_MIN | q == Q_MIN) {
        // regular spacing
        cbl = cb - 2;
        k = flog10pow2(q);
    } else {
        // irregular spacing
        cbl = cb - 1;
        k = flog10threeQuartersPow2(q);
    }
    int h = q + flog2pow10(-k) + 2;
    // g1 and g0 are as in section 9.9.3 of [1], so g = g1 2^63 + g0
    long g1 = g1(k);
    long g0 = g0(k);
    long vb = rop(g1, g0, cb << h);
    long vbl = rop(g1, g0, cbl << h);
    long vbr = rop(g1, g0, cbr << h);
    long s = vb >> 2;
    if (s >= 100) {
        /*
            For n = 17, m = 1 the table in section 10 of [1] shows
                s' = floor(s / 10) = floor(s 115_292_150_460_684_698 / 2^60)
                   = floor(s 115_292_150_460_684_698 2^4 / 2^64)

            sp10 = 10 s'
            tp10 = 10 t'
            upin    iff    u' = sp10 10^k in Rv
            wpin    iff    w' = tp10 10^k in Rv
            See section 9.4 of [1].
             */
        long sp10 = 10 * multiplyHigh(s, 115_292_150_460_684_698L << 4);
        long tp10 = sp10 + 10;
        boolean upin = vbl + out <= sp10 << 2;
        boolean wpin = (tp10 << 2) + out <= vbr;
        if (upin != wpin) {
            return toChars(upin ? sp10 : tp10, k);
        }
    }
    /*
        10 <= s < 100    or    s >= 100  and  u', w' not in Rv
        uin    iff    u = s 10^k in Rv
        win    iff    w = t 10^k in Rv
        See section 9.4 of [1].
         */
    long t = s + 1;
    boolean uin = vbl + out <= s << 2;
    boolean win = (t << 2) + out <= vbr;
    if (uin != win) {
        // Exactly one of u or w lies in Rv.
        return toChars(uin ? s : t, k + dk);
    }
    /*
        Both u and w lie in Rv: determine the one closest to v.
        See section 9.4 of [1].
         */
    long cmp = vb - (s + t << 1);
    return toChars(cmp < 0 || cmp == 0 && (s & 0x1) == 0 ? s : t, k + dk);
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toDecimal(int,long,int).q","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toDecimal(int,long,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toDecimal(int,long,int).c","Parameter_2","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toDecimal(int,long,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toDecimal(int,long,int).dk","Parameter_3","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toDecimal(int,long,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.rop(long,long,long)","Method","Computes rop(cp g 2^(-127)), where g = g1 2^63 + g0
    See section 9.10 and figure 5 of [1].","private static long rop(long g1, long g0, long cp) {
    long x1 = multiplyHigh(g0, cp);
    long y0 = g1 * cp;
    long y1 = multiplyHigh(g1, cp);
    long z = (y0 >>> 1) + x1;
    long vbp = y1 + (z >>> 63);
    return vbp | (z & MASK_63) + MASK_63 >>> 63;
}","long","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.rop(long,long,long).g1","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.rop(long,long,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.rop(long,long,long).g0","Parameter_2","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.rop(long,long,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.rop(long,long,long).cp","Parameter_3","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.rop(long,long,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars(long,int)","Method","Formats the decimal f 10^e.","private int toChars(long f, int e) {
    /*
        For details not discussed here see section 10 of [1].

        Determine len such that
            10^(len-1) <= f < 10^len
         */
    int len = flog10pow2(Long.SIZE - numberOfLeadingZeros(f));
    if (f >= pow10(len)) {
        len += 1;
    }
    /*
        Let fp and ep be the original f and e, respectively.
        Transform f and e to ensure
            10^(H-1) <= f < 10^H
            fp 10^ep = f 10^(e-H) = 0.f 10^e
         */
    f *= pow10(H - len);
    e += len;
    /*
        The toChars?() methods perform left-to-right digits extraction
        using ints, provided that the arguments are limited to 8 digits.
        Therefore, split the H = 17 digits of f into:
            h = the most significant digit of f
            m = the next 8 most significant digits of f
            l = the last 8, least significant digits of f

        For n = 17, m = 8 the table in section 10 of [1] shows
            floor(f / 10^8) = floor(193_428_131_138_340_668 f / 2^84) =
            floor(floor(193_428_131_138_340_668 f / 2^64) / 2^20)
        and for n = 9, m = 8
            floor(hm / 10^8) = floor(1_441_151_881 hm / 2^57)
         */
    long hm = multiplyHigh(f, 193_428_131_138_340_668L) >>> 20;
    int l = (int) (f - 100_000_000L * hm);
    int h = (int) (hm * 1_441_151_881L >>> 57);
    int m = (int) (hm - 100_000_000 * h);
    if (0 < e && e <= 7) {
        return toChars1(h, m, l, e);
    }
    if (-3 < e && e <= 0) {
        return toChars2(h, m, l, e);
    }
    return toChars3(h, m, l, e);
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars(long,int).f","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars(long,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars(long,int).e","Parameter_2","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars(long,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars1(int,int,int,int)","Method","No Comment","private int toChars1(int h, int m, int l, int e) {
    /*
        0 < e <= 7: plain format without leading zeroes.
        Left-to-right digits extraction:
        algorithm 1 in [3], with b = 10, k = 8, n = 28.
         */
    appendDigit(h);
    int y = y(m);
    int t;
    int i = 1;
    for (; i < e; ++i) {
        t = 10 * y;
        appendDigit(t >>> 28);
        y = t & MASK_28;
    }
    append('.');
    for (; i <= 8; ++i) {
        t = 10 * y;
        appendDigit(t >>> 28);
        y = t & MASK_28;
    }
    lowDigits(l);
    return NON_SPECIAL;
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars1(int,int,int,int).h","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars1(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars1(int,int,int,int).m","Parameter_2","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars1(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars1(int,int,int,int).l","Parameter_3","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars1(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars1(int,int,int,int).e","Parameter_4","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars1(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars2(int,int,int,int)","Method","No Comment","private int toChars2(int h, int m, int l, int e) {
    // -3 < e <= 0: plain format with leading zeroes.
    appendDigit(0);
    append('.');
    for (; e < 0; ++e) {
        appendDigit(0);
    }
    appendDigit(h);
    append8Digits(m);
    lowDigits(l);
    return NON_SPECIAL;
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars2(int,int,int,int).h","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars2(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars2(int,int,int,int).m","Parameter_2","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars2(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars2(int,int,int,int).l","Parameter_3","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars2(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars2(int,int,int,int).e","Parameter_4","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars2(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars3(int,int,int,int)","Method","No Comment","private int toChars3(int h, int m, int l, int e) {
    // -3 >= e | e > 7: computerized scientific notation
    appendDigit(h);
    append('.');
    append8Digits(m);
    lowDigits(l);
    exponent(e - 1);
    return NON_SPECIAL;
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars3(int,int,int,int).h","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars3(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars3(int,int,int,int).m","Parameter_2","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars3(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars3(int,int,int,int).l","Parameter_3","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars3(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars3(int,int,int,int).e","Parameter_4","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.toChars3(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.lowDigits(int)","Method","No Comment","private void lowDigits(int l) {
    if (l != 0) {
        append8Digits(l);
    }
    removeTrailingZeroes();
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.lowDigits(int).l","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.lowDigits(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.append8Digits(int)","Method","No Comment","private void append8Digits(int m) {
    /*
        Left-to-right digits extraction:
        algorithm 1 in [3], with b = 10, k = 8, n = 28.
         */
    int y = y(m);
    for (int i = 0; i < 8; ++i) {
        int t = 10 * y;
        appendDigit(t >>> 28);
        y = t & MASK_28;
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.append8Digits(int).m","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.append8Digits(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.removeTrailingZeroes()","Method","No Comment","private void removeTrailingZeroes() {
    while (bytes[index] == '0') {
        --index;
    }
    // ... but do not remove the one directly to the right of '.'
    if (bytes[index] == '.') {
        ++index;
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.y(int)","Method","No Comment","private int y(int a) {
    /*
        Algorithm 1 in [3] needs computation of
            floor((a + 1) 2^n / b^k) - 1
        with a < 10^8, b = 10, k = 8, n = 28.
        Noting that
            (a + 1) 2^n <= 10^8 2^28 < 10^17
        For n = 17, m = 8 the table in section 10 of [1] leads to:
         */
    return (int) (multiplyHigh((long) (a + 1) << 28, 193_428_131_138_340_668L) >>> 20) - 1;
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.y(int).a","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.y(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.exponent(int)","Method","No Comment","private void exponent(int e) {
    append('E');
    if (e < 0) {
        append('-');
        e = -e;
    }
    if (e < 10) {
        appendDigit(e);
        return;
    }
    int d;
    if (e >= 100) {
        /*
            For n = 3, m = 2 the table in section 10 of [1] shows
                floor(e / 100) = floor(1_311 e / 2^17)
             */
        d = e * 1_311 >>> 17;
        appendDigit(d);
        e -= 100 * d;
    }
    /*
        For n = 2, m = 1 the table in section 10 of [1] shows
            floor(e / 10) = floor(103 e / 2^10)
         */
    d = e * 103 >>> 10;
    appendDigit(d);
    appendDigit(e - 10 * d);
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.exponent(int).e","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.exponent(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.append(int)","Method","No Comment","private void append(int c) {
    bytes[++index] = (byte) c;
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.append(int).c","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.append(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.appendDigit(int)","Method","No Comment","private void appendDigit(int d) {
    bytes[++index] = (byte) ('0' + d);
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.appendDigit(int).d","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.appendDigit(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.charsToString()","Method","Using the deprecated constructor enhances performance.","@SuppressWarnings(""deprecation"")
private String charsToString() {
    return new String(bytes, 0, 0, index + 1);
}","String","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.<init>()","Constructor","No Comment","private DoubleToDecimal() {
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils","Class","* This class exposes package private utilities for other classes.
 * Thus, all methods are assumed to be invoked with correct arguments,
 * so these are not checked at all.
 *
 * @author Raffaello Giulietti","Class do not obtain Source Code","No return type","final ","",""
"com.fasterxml.jackson.core.io.schubfach.MathUtils.K_MIN","Field","The boundaries for k in g0(int) and g1(int).
    K_MIN must be DoubleToDecimal.K_MIN or less.
    K_MAX must be DoubleToDecimal.K_MAX or more.","static final int K_MIN = -324;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.K_MAX","Field","No Comment","static final int K_MAX = 292;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.H","Field","Must be DoubleToDecimal.H or more","static final int H = 17;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.Q_10","Field","C_10 = floor(log10(2) * 2^Q_10), A_10 = floor(log10(3/4) * 2^Q_10)","private static final int Q_10 = 41;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.C_10","Field","No Comment","private static final long C_10 = 661_971_961_083L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.A_10","Field","No Comment","private static final long A_10 = -274_743_187_321L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.Q_2","Field","C_2 = floor(log2(10) * 2^Q_2)","private static final int Q_2 = 38;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.C_2","Field","No Comment","private static final long C_2 = 913_124_641_741L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.pow10","Field","The first powers of 10. The last entry must be 10^H.","private static final long[] pow10 = { 1L, 10L, 100L, 1_000L, 10_000L, 100_000L, 1_000_000L, 10_000_000L, 100_000_000L, 1_000_000_000L, 10_000_000_000L, 100_000_000_000L, 1_000_000_000_000L, 10_000_000_000_000L, 100_000_000_000_000L, 1_000_000_000_000_000L, 10_000_000_000_000_000L, 100_000_000_000_000_000L };","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.g","Field","The precomputed values for g1(int) and g0(int).
    The first entry must be for an exponent of K_MIN or less.
    The last entry must be for an exponent of K_MAX or more.","private static final long[] g = { /* -324 */
0x4F0C_EDC9_5A71_8DD4L, 0x5B01_E8B0_9AA0_D1B5L, /* -323 */
0x7E7B_160E_F71C_1621L, 0x119C_A780_F767_B5EEL, /* -322 */
0x652F_44D8_C5B0_11B4L, 0x0E16_EC67_2C52_F7F2L, /* -321 */
0x50F2_9D7A_37C0_0E29L, 0x5812_56B8_F042_5FF5L, /* -320 */
0x40C2_1794_F966_71BAL, 0x79A8_4560_C035_1991L, /* -319 */
0x679C_F287_F570_B5F7L, 0x75DA_089A_CD21_C281L, /* -318 */
0x52E3_F539_9126_F7F9L, 0x44AE_6D48_A41B_0201L, /* -317 */
0x424F_F761_40EB_F994L, 0x36F1_F106_E9AF_34CDL, /* -316 */
0x6A19_8BCE_CE46_5C20L, 0x57E9_81A4_A918_547BL, /* -315 */
0x54E1_3CA5_71D1_E34DL, 0x2CBA_CE1D_5413_76C9L, /* -314 */
0x43E7_63B7_8E41_82A4L, 0x23C8_A4E4_4342_C56EL, /* -313 */
0x6CA5_6C58_E39C_043AL, 0x060D_D4A0_6B9E_08B0L, /* -312 */
0x56EA_BD13_E949_9CFBL, 0x1E71_76E6_BC7E_6D59L, /* -311 */
0x4588_9743_2107_B0C8L, 0x7EC1_2BEB_C9FE_BDE1L, /* -310 */
0x6F40_F205_01A5_E7A7L, 0x7E01_DFDF_A997_9635L, /* -309 */
0x5900_C19D_9AEB_1FB9L, 0x4B34_B319_5479_44F7L, /* -308 */
0x4733_CE17_AF22_7FC7L, 0x55C3_C27A_A9FA_9D93L, /* -307 */
0x71EC_7CF2_B1D0_CC72L, 0x5606_03F7_765D_C8EAL, /* -306 */
0x5B23_9728_8E40_A38EL, 0x7804_CFF9_2B7E_3A55L, /* -305 */
0x48E9_45BA_0B66_E93FL, 0x1337_0CC7_55FE_9511L, /* -304 */
0x74A8_6F90_123E_41FEL, 0x51F1_AE0B_BCCA_881BL, /* -303 */
0x5D53_8C73_41CB_67FEL, 0x74C1_5809_63D5_39AFL, /* -302 */
0x4AA9_3D29_016F_8665L, 0x43CD_E007_8310_FAF3L, /* -301 */
0x7775_2EA8_024C_0A3CL, 0x0616_333F_381B_2B1EL, /* -300 */
0x5F90_F220_01D6_6E96L, 0x3811_C298_F9AF_55B1L, /* -299 */
0x4C73_F4E6_67DE_BEDEL, 0x600E_3547_2E25_DE28L, /* -298 */
0x7A53_2170_A631_3164L, 0x3349_EED8_49D6_303FL, /* -297 */
0x61DC_1AC0_84F4_2783L, 0x42A1_8BE0_3B11_C033L, /* -296 */
0x4E49_AF00_6A5C_EC69L, 0x1BB4_6FE6_95A7_CCF5L, /* -295 */
0x7D42_B19A_43C7_E0A8L, 0x2C53_E63D_BC3F_AE55L, /* -294 */
0x6435_5AE1_CFD3_1A20L, 0x2376_51CA_FCFF_BEAAL, /* -293 */
0x502A_AF1B_0CA8_E1B3L, 0x35F8_416F_30CC_9888L, /* -292 */
0x4022_25AF_3D53_E7C2L, 0x5E60_3458_F3D6_E06DL, /* -291 */
0x669D_0918_621F_D937L, 0x4A33_86F4_B957_CD7BL, /* -290 */
0x5217_3A79_E819_7A92L, 0x6E8F_9F2A_2DDF_D796L, /* -289 */
0x41AC_2EC7_ECE1_2EDBL, 0x720C_7F54_F17F_DFABL, /* -288 */
0x6913_7E0C_AE35_17C6L, 0x1CE0_CBBB_1BFF_CC45L, /* -287 */
0x540F_980A_24F7_4638L, 0x171A_3C95_AFFF_D69EL, /* -286 */
0x433F_ACD4_EA5F_6B60L, 0x127B_63AA_F333_1218L, /* -285 */
0x6B99_1487_DD65_7899L, 0x6A5F_05DE_51EB_5026L, /* -284 */
0x5614_106C_B11D_FA14L, 0x5518_D17E_A7EF_7352L, /* -283 */
0x44DC_D9F0_8DB1_94DDL, 0x2A7A_4132_1FF2_C2A8L, /* -282 */
0x6E2E_2980_E2B5_BAFBL, 0x5D90_6850_331E_043FL, /* -281 */
0x5824_EE00_B55E_2F2FL, 0x6473_86A6_8F4B_3699L, /* -280 */
0x4683_F19A_2AB1_BF59L, 0x36C2_D21E_D908_F87BL, /* -279 */
0x70D3_1C29_DDE9_3228L, 0x579E_1CFE_280E_5A5DL, /* -278 */
0x5A42_7CEE_4B20_F4EDL, 0x2C7E_7D98_200B_7B7EL, /* -277 */
0x4835_30BE_A280_C3F1L, 0x09FE_CAE0_19A2_C932L, /* -276 */
0x7388_4DFD_D0CE_064EL, 0x4331_4499_C29E_0EB6L, /* -275 */
0x5C6D_0B31_73D8_050BL, 0x4F5A_9D47_CEE4_D891L, /* -274 */
0x49F0_D5C1_2979_9DA2L, 0x72AE_E439_7250_AD41L, /* -273 */
0x764E_22CE_A8C2_95D1L, 0x377E_39F5_83B4_4868L, /* -272 */
0x5EA4_E8A5_53CE_DE41L, 0x12CB_6191_3629_D387L, /* -271 */
0x4BB7_2084_430B_E500L, 0x756F_8140_F821_7605L, /* -270 */
0x7925_00D3_9E79_6E67L, 0x6F18_CECE_59CF_233CL, /* -269 */
0x60EA_670F_B1FA_BEB9L, 0x3F47_0BD8_47D8_E8FDL, /* -268 */
0x4D88_5272_F4C8_9894L, 0x329F_3CAD_0647_20CAL, /* -267 */
0x7C0D_50B7_EE0D_C0EDL, 0x3765_2DE1_A3A5_0143L, /* -266 */
0x633D_DA2C_BE71_6724L, 0x2C50_F181_4FB7_3436L, /* -265 */
0x4F64_AE8A_31F4_5283L, 0x3D0D_8E01_0C92_902BL, /* -264 */
0x7F07_7DA9_E986_EA6BL, 0x7B48_E334_E0EA_8045L, /* -263 */
0x659F_97BB_2138_BB89L, 0x4907_1C2A_4D88_669DL, /* -262 */
0x514C_7962_80FA_2FA1L, 0x20D2_7CEE_A46D_1EE4L, /* -261 */
0x4109_FAB5_33FB_594DL, 0x670E_CA58_838A_7F1DL, /* -260 */
0x680F_F788_532B_C216L, 0x0B4A_DD5A_6C10_CB62L, /* -259 */
0x533F_F939_DC23_01ABL, 0x22A2_4AAE_BCDA_3C4EL, /* -258 */
0x4299_942E_49B5_9AEFL, 0x354E_A225_63E1_C9D8L, /* -257 */
0x6A8F_537D_42BC_2B18L, 0x554A_9D08_9FCF_A95AL, /* -256 */
0x553F_75FD_CEFC_EF46L, 0x776E_E406_E63F_BAAEL, /* -255 */
0x4432_C4CB_0BFD_8C38L, 0x5F8B_E99F_1E99_6225L, /* -254 */
0x6D1E_07AB_4662_79F4L, 0x3279_75CB_6428_9D08L, /* -253 */
0x574B_3955_D1E8_6190L, 0x2861_2B09_1CED_4A6DL, /* -252 */
0x45D5_C777_DB20_4E0DL, 0x06B4_226D_B0BD_D524L, /* -251 */
0x6FBC_7259_5E9A_167BL, 0x2453_6A49_1AC9_5506L, /* -250 */
0x5963_8EAD_E548_11FCL, 0x1D0F_883A_7BD4_4405L, /* -249 */
0x4782_D88B_1DD3_4196L, 0x4A72_D361_FCA9_D004L, /* -248 */
0x726A_F411_C952_028AL, 0x43EA_EBCF_FAA9_4CD3L, /* -247 */
0x5B88_C341_6DDB_353BL, 0x4FEF_230C_C887_70A9L, /* -246 */
0x493A_35CD_F17C_2A96L, 0x0CBF_4F3D_6D39_26EEL, /* -245 */
0x7529_EFAF_E8C6_AA89L, 0x6132_1862_485B_717CL, /* -244 */
0x5DBB_2626_53D2_2207L, 0x675B_46B5_06AF_8DFDL, /* -243 */
0x4AFC_1E85_0FDB_4E6CL, 0x52AF_6BC4_0559_3E64L, /* -242 */
0x77F9_CA6E_7FC5_4A47L, 0x377F_12D3_3BC1_FD6DL, /* -241 */
0x5FFB_0858_6637_6E9FL, 0x45FF_4242_9634_CABDL, /* -240 */
0x4CC8_D379_EB5F_8BB2L, 0x6B32_9B68_782A_3BCBL, /* -239 */
0x7ADA_EBF6_4565_AC51L, 0x2B84_2BDA_59DD_2C77L, /* -238 */
0x6248_BCC5_0451_56A7L, 0x3C69_BCAE_AE4A_89F9L, /* -237 */
0x4EA0_9704_0374_4552L, 0x6387_CA25_583B_A194L, /* -236 */
0x7DCD_BE6C_D253_A21EL, 0x05A6_103B_C05F_68EDL, /* -235 */
0x64A4_9857_0EA9_4E7EL, 0x37B8_0CFC_99E5_ED8AL, /* -234 */
0x5083_AD12_7221_0B98L, 0x2C93_3D96_E184_BE08L, /* -233 */
0x4069_5741_F4E7_3C79L, 0x7075_CADF_1AD0_9807L, /* -232 */
0x670E_F203_2171_FA5CL, 0x4D89_4498_2AE7_59A4L, /* -231 */
0x5272_5B35_B45B_2EB0L, 0x3E07_6A13_5585_E150L, /* -230 */
0x41F5_15C4_9048_F226L, 0x64D2_BB42_AAD1_810DL, /* -229 */
0x6988_22D4_1A0E_503EL, 0x07B7_9204_4482_6815L, /* -228 */
0x546C_E8A9_AE71_D9CBL, 0x1FC6_0E69_D068_5344L, /* -227 */
0x438A_53BA_F1F4_AE3CL, 0x196B_3EBB_0D20_429DL, /* -226 */
0x6C10_85F7_E987_7D2DL, 0x0F11_FDF8_1500_6A94L, /* -225 */
0x5673_9E5F_EE05_FDBDL, 0x58DB_3193_4400_5543L, /* -224 */
0x4529_4B7F_F19E_6497L, 0x60AF_5ADC_3666_AA9CL, /* -223 */
0x6EA8_78CC_B5CA_3A8CL, 0x344B_C493_8A3D_DDC7L, /* -222 */
0x5886_C70A_2B08_2ED6L, 0x5D09_6A0F_A1CB_17D2L, /* -221 */
0x46D2_38D4_EF39_BF12L, 0x173A_BB3F_B4A2_7975L, /* -220 */
0x7150_5AEE_4B8F_981DL, 0x0B91_2B99_2103_F588L, /* -219 */
0x5AA6_AF25_093F_ACE4L, 0x0940_EFAD_B403_2AD3L, /* -218 */
0x4885_58EA_6DCC_8A50L, 0x0767_2624_9002_88A9L, /* -217 */
0x7408_8E43_E2E0_DD4CL, 0x723E_A36D_B337_410EL, /* -216 */
0x5CD3_A503_1BE7_1770L, 0x5B65_4F8A_F5C5_CDA5L, /* -215 */
0x4A42_EA68_E31F_45F3L, 0x62B7_72D5_916B_0AEBL, /* -214 */
0x76D1_770E_3832_0986L, 0x0458_B7BC_1BDE_77DDL, /* -213 */
0x5F0D_F8D8_2CF4_D46BL, 0x1D13_C630_164B_9318L, /* -212 */
0x4C0B_2D79_BD90_A9EFL, 0x30DC_9E8C_DEA2_DC13L, /* -211 */
0x79AB_7BF5_FC1A_A97FL, 0x0160_FDAE_3104_9351L, /* -210 */
0x6155_FCC4_C9AE_EDFFL, 0x1AB3_FE24_F403_A90EL, /* -209 */
0x4DDE_63D0_A158_BE65L, 0x6229_981D_9002_EDA5L, /* -208 */
0x7C97_061A_9BC1_30A2L, 0x69DC_2695_B337_E2A1L, /* -207 */
0x63AC_04E2_1634_26E8L, 0x54B0_1EDE_28F9_821BL, /* -206 */
0x4FBC_D0B4_DE90_1F20L, 0x43C0_18B1_BA61_34E2L, /* -205 */
0x7F94_8121_6419_CB67L, 0x1F99_C11C_5D68_549DL, /* -204 */
0x6610_674D_E9AE_3C52L, 0x4C7B_00E3_7DED_107EL, /* -203 */
0x51A6_B90B_2158_3042L, 0x09FC_00B5_FE57_4065L, /* -202 */
0x4152_2DA2_8113_59CEL, 0x3B30_0091_9845_CD1DL, /* -201 */
0x6883_7C37_34EB_C2E3L, 0x784C_CDB5_C06F_AE95L, /* -200 */
0x539C_635F_5D89_68B6L, 0x2D0A_3E2B_0059_5877L, /* -199 */
0x42E3_82B2_B13A_BA2BL, 0x3DA1_CB55_99E1_1393L, /* -198 */
0x6B05_9DEA_B52A_C378L, 0x629C_7888_F634_EC1EL, /* -197 */
0x559E_17EE_F755_692DL, 0x3549_FA07_2B5D_89B1L, /* -196 */
0x447E_798B_F911_20F1L, 0x1107_FB38_EF7E_07C1L, /* -195 */
0x6D97_28DF_F4E8_34B5L, 0x01A6_5EC1_7F30_0C68L, /* -194 */
0x57AC_20B3_2A53_5D5DL, 0x4E1E_B234_65C0_09EDL, /* -193 */
0x4623_4D5C_21DC_4AB1L, 0x24E5_5B5D_1E33_3B24L, /* -192 */
0x7038_7BC6_9C93_AAB5L, 0x216E_F894_FD1E_C506L, /* -191 */
0x59C6_C96B_B076_222AL, 0x4DF2_6077_30E5_6A6CL, /* -190 */
0x47D2_3ABC_8D2B_4E88L, 0x3E5B_805F_5A51_21F0L, /* -189 */
0x72E9_F794_1512_1740L, 0x63C5_9A32_2A1B_697FL, /* -188 */
0x5BEE_5FA9_AA74_DF67L, 0x0304_7B5B_54E2_BACCL, /* -187 */
0x498B_7FBA_EEC3_E5ECL, 0x0269_FC49_10B5_623DL, /* -186 */
0x75AB_FF91_7E06_3CACL, 0x6A43_2D41_B455_69FBL, /* -185 */
0x5E23_32DA_CB38_308AL, 0x21CF_5767_C377_87FCL, /* -184 */
0x4B4F_5BE2_3C2C_F3A1L, 0x67D9_12B9_692C_6CCAL, /* -183 */
0x787E_F969_F9E1_85CFL, 0x595B_5128_A847_1476L, /* -182 */
0x6065_9454_C7E7_9E3FL, 0x6115_DA86_ED05_A9F8L, /* -181 */
0x4D1E_1043_D31F_B1CCL, 0x4DAB_1538_BD9E_2193L, /* -180 */
0x7B63_4D39_51CC_4FADL, 0x62AB_5527_95C9_CF52L, /* -179 */
0x62B5_D761_0E3D_0C8BL, 0x0222_AA86_116E_3F75L, /* -178 */
0x4EF7_DF80_D830_D6D5L, 0x4E82_2204_DABE_992AL, /* -177 */
0x7E59_659A_F381_57BCL, 0x1736_9CD4_9130_F510L, /* -176 */
0x6514_5148_C2CD_DFC9L, 0x5F5E_E3DD_40F3_F740L, /* -175 */
0x50DD_0DD3_CF0B_196EL, 0x1918_B64A_9A5C_C5CDL, /* -174 */
0x40B0_D7DC_A5A2_7ABEL, 0x4746_F83B_AEB0_9E3EL, /* -173 */
0x6781_5961_0903_F797L, 0x253E_59F9_1780_FD2FL, /* -172 */
0x52CD_E11A_6D9C_C612L, 0x50FE_AE60_DF9A_6426L, /* -171 */
0x423E_4DAE_BE17_04DBL, 0x5A65_584D_7FAE_B685L, /* -170 */
0x69FD_4917_968B_3AF9L, 0x10A2_26E2_65E4_573BL, /* -169 */
0x54CA_A0DF_ABA2_9594L, 0x0D4E_8581_EB1D_1295L, /* -168 */
0x43D5_4D7F_BC82_1143L, 0x243E_D134_BC17_4211L, /* -167 */
0x6C88_7BFF_9403_4ED2L, 0x06CA_E854_6025_3682L, /* -166 */
0x56D3_9666_1002_A574L, 0x6BD5_86A9_E684_2B9BL, /* -165 */
0x4576_11EB_4002_1DF7L, 0x0977_9EEE_5203_5616L, /* -164 */
0x6F23_4FDE_CCD0_2FF1L, 0x5BF2_97E3_B66B_BCEFL, /* -163 */
0x58E9_0CB2_3D73_598EL, 0x165B_ACB6_2B89_63F3L, /* -162 */
0x4720_D6F4_FDF5_E13EL, 0x4516_23C4_EFA1_1CC2L, /* -161 */
0x71CE_24BB_2FEF_CECAL, 0x3B56_9FA1_7F68_2E03L, /* -160 */
0x5B0B_5095_BFF3_0BD5L, 0x15DE_E61A_CC53_5803L, /* -159 */
0x48D5_DA11_665C_0977L, 0x2B18_B815_7042_ACCFL, /* -158 */
0x7489_5CE8_A3C6_758BL, 0x5E8D_F355_806A_AE18L, /* -157 */
0x5D3A_B0BA_1C9E_C46FL, 0x653E_5C44_66BB_BE7AL, /* -156 */
0x4A95_5A2E_7D4B_D059L, 0x3765_169D_1EFC_9861L, /* -155 */
0x7755_5D17_2EDF_B3C2L, 0x256E_8A94_FE60_F3CFL, /* -154 */
0x5F77_7DAC_257F_C301L, 0x6ABE_D543_FEB3_F63FL, /* -153 */
0x4C5F_97BC_EACC_9C01L, 0x3BCB_DDCF_FEF6_5E99L, /* -152 */
0x7A32_8C61_77AD_C668L, 0x5FAC_9619_97F0_975BL, /* -151 */
0x61C2_09E7_92F1_6B86L, 0x7FBD_44E1_465A_12AFL, /* -150 */
0x4E34_D4B9_425A_BC6BL, 0x7FCA_9D81_0514_DBBFL, /* -149 */
0x7D21_545B_9D5D_FA46L, 0x32DD_C8CE_6E87_C5FFL, /* -148 */
0x641A_A9E2_E44B_2E9EL, 0x5BE4_A0A5_2539_6B32L, /* -147 */
0x5015_54B5_836F_587EL, 0x7CB6_E6EA_842D_EF5CL, /* -146 */
0x4011_1091_35F2_AD32L, 0x3092_5255_368B_25E3L, /* -145 */
0x6681_B41B_8984_4850L, 0x4DB6_EA21_F0DE_A304L, /* -144 */
0x5201_5CE2_D469_D373L, 0x57C5_881B_2718_826AL, /* -143 */
0x419A_B0B5_76BB_0F8FL, 0x5FD1_39AF_527A_01EFL, /* -142 */
0x68F7_8122_5791_B27FL, 0x4C81_F5E5_50C3_364AL, /* -141 */
0x53F9_341B_7941_5B99L, 0x239B_2B1D_DA35_C508L, /* -140 */
0x432D_C349_2DCD_E2E1L, 0x02E2_88E4_AE91_6A6DL, /* -139 */
0x6B7C_6BA8_4949_6B01L, 0x516A_74A1_174F_10AEL, /* -138 */
0x55FD_22ED_076D_EF34L, 0x4121_F6E7_45D8_DA25L, /* -137 */
0x44CA_8257_3924_BF5DL, 0x1A81_9252_9E47_14EBL, /* -136 */
0x6E10_D08B_8EA1_322EL, 0x5D9C_1D50_FD3E_87DDL, /* -135 */
0x580D_73A2_D880_F4F2L, 0x17B0_1773_FDCB_9FE4L, /* -134 */
0x4671_294F_139A_5D8EL, 0x4626_7929_97D6_1984L, /* -133 */
0x70B5_0EE4_EC2A_2F4AL, 0x3D0A_5B75_BFBC_F59FL, /* -132 */
0x5A2A_7250_BCEE_8C3BL, 0x4A6E_AF91_6630_C47FL, /* -131 */
0x4821_F50D_63F2_09C9L, 0x21F2_260D_EB5A_36CCL, /* -130 */
0x7369_8815_6CB6_760EL, 0x6983_7016_455D_247AL, /* -129 */
0x5C54_6CDD_F091_F80BL, 0x6E02_C011_D117_5062L, /* -128 */
0x49DD_23E4_C074_C66FL, 0x719B_CCDB_0DAC_404EL, /* -127 */
0x762E_9FD4_6721_3D7FL, 0x68F9_47C4_E2AD_33B0L, /* -126 */
0x5E8B_B310_5280_FDFFL, 0x6D94_396A_4EF0_F627L, /* -125 */
0x4BA2_F5A6_A867_3199L, 0x3E10_2DEE_A58D_91B9L, /* -124 */
0x7904_BC3D_DA3E_B5C2L, 0x3019_E317_6F48_E927L, /* -123 */
0x60D0_9697_E1CB_C49BL, 0x4014_B5AC_5907_20ECL, /* -122 */
0x4D73_ABAC_B4A3_03AFL, 0x4CDD_5E23_7A6C_1A57L, /* -121 */
0x7BEC_45E1_2104_D2B2L, 0x47C8_969F_2A46_908AL, /* -120 */
0x6323_6B1A_80D0_A88EL, 0x6CA0_787F_5505_406FL, /* -119 */
0x4F4F_88E2_00A6_ED3FL, 0x0A19_F9FF_7737_66BFL, /* -118 */
0x7EE5_A7D0_010B_1531L, 0x5CF6_5CCB_F1F2_3DFEL, /* -117 */
0x6584_8640_00D5_AA8EL, 0x172B_7D6F_F4C1_CB32L, /* -116 */
0x5136_D1CC_CD77_BBA4L, 0x78EF_978C_C3CE_3C28L, /* -115 */
0x40F8_A7D7_0AC6_2FB7L, 0x13F2_DFA3_CFD8_3020L, /* -114 */
0x67F4_3FBE_77A3_7F8BL, 0x3984_9906_1959_E699L, /* -113 */
0x5329_CC98_5FB5_FFA2L, 0x6136_E0D1_ADE1_8548L, /* -112 */
0x4287_D6E0_4C91_994FL, 0x00F8_B3DA_F181_376DL, /* -111 */
0x6A72_F166_E0E8_F54BL, 0x1B27_862B_1C01_F247L, /* -110 */
0x5528_C11F_1A53_F76FL, 0x2F52_D1BC_1667_F506L, /* -109 */
0x4420_9A7F_4843_2C59L, 0x0C42_4163_451F_F738L, /* -108 */
0x6D00_F732_0D38_46F4L, 0x7A03_9BD2_0833_2526L, /* -107 */
0x5733_F8F4_D760_38C3L, 0x7B36_1641_A028_EA85L, /* -106 */
0x45C3_2D90_AC4C_FA36L, 0x2F5E_7834_8020_BB9EL, /* -105 */
0x6F9E_AF4D_E07B_29F0L, 0x4BCA_59ED_99CD_F8FCL, /* -104 */
0x594B_BF71_8062_87F3L, 0x563B_7B24_7B0B_2D96L, /* -103 */
0x476F_CC5A_CD1B_9FF6L, 0x11C9_2F50_626F_57ACL, /* -102 */
0x724C_7A2A_E1C5_CCBDL, 0x02DB_7EE7_03E5_5912L, /* -101 */
0x5B70_61BB_E7D1_7097L, 0x1BE2_CBEC_031D_E0DCL, /* -100 */
0x4926_B496_530D_F3ACL, 0x164F_0989_9C17_E716L, /*  -99 */
0x750A_BA8A_1E7C_B913L, 0x3D4B_4275_C68C_A4F0L, /*  -98 */
0x5DA2_2ED4_E530_940FL, 0x4AA2_9B91_6BA3_B726L, /*  -97 */
0x4AE8_2577_1DC0_7672L, 0x6EE8_7C74_561C_9285L, /*  -96 */
0x77D9_D58B_62CD_8A51L, 0x3173_FA53_BCFA_8408L, /*  -95 */
0x5FE1_77A2_B571_3B74L, 0x278F_FB76_30C8_69A0L, /*  -94 */
0x4CB4_5FB5_5DF4_2F90L, 0x1FA6_62C4_F3D3_87B3L, /*  -93 */
0x7ABA_32BB_C986_B280L, 0x32A3_D13B_1FB8_D91FL, /*  -92 */
0x622E_8EFC_A138_8ECDL, 0x0EE9_742F_4C93_E0E6L, /*  -91 */
0x4E8B_A596_E760_723DL, 0x58BA_C359_0A0F_E71EL, /*  -90 */
0x7DAC_3C24_A567_1D2FL, 0x412A_D228_1019_71C9L, /*  -89 */
0x6489_C9B6_EAB8_E426L, 0x00EF_0E86_7347_8E3BL, /*  -88 */
0x506E_3AF8_BBC7_1CEBL, 0x1A58_D86B_8F6C_71C9L, /*  -87 */
0x4058_2F2D_6305_B0BCL, 0x1513_E056_0C56_C16EL, /*  -86 */
0x66F3_7EAF_04D5_E793L, 0x3B53_0089_AD57_9BE2L, /*  -85 */
0x525C_6558_D0AB_1FA9L, 0x15DC_006E_2446_164FL, /*  -84 */
0x41E3_8447_0D55_B2EDL, 0x5E49_99F1_B69E_783FL, /*  -83 */
0x696C_06D8_1555_EB15L, 0x7D42_8FE9_2430_C065L, /*  -82 */
0x5456_6BE0_1111_88DEL, 0x3102_0CBA_835A_3384L, /*  -81 */
0x4378_564C_DA74_6D7EL, 0x5A68_0A2E_CF7B_5C69L, /*  -80 */
0x6BF3_BD47_C3ED_7BFDL, 0x770C_DD17_B25E_FA42L, /*  -79 */
0x565C_976C_9CBD_FCCBL, 0x1270_B0DF_C1E5_9502L, /*  -78 */
0x4516_DF8A_16FE_63D5L, 0x5B8D_5A4C_9B1E_10CEL, /*  -77 */
0x6E8A_FF43_57FD_6C89L, 0x127B_C3AD_C4FC_E7B0L, /*  -76 */
0x586F_329C_4664_56D4L, 0x0EC9_6957_D0CA_52F3L, /*  -75 */
0x46BF_5BB0_3850_4576L, 0x3F07_8779_73D5_0F29L, /*  -74 */
0x7132_2C4D_26E6_D58AL, 0x31A5_A58F_1FBB_4B75L, /*  -73 */
0x5A8E_89D7_5252_446EL, 0x5AEA_EAD8_E62F_6F91L, /*  -72 */
0x4872_07DF_750E_9D25L, 0x2F22_557A_51BF_8C74L, /*  -71 */
0x73E9_A632_54E4_2EA2L, 0x1836_EF2A_1C65_AD86L, /*  -70 */
0x5CBA_EB5B_771C_F21BL, 0x2CF8_BF54_E384_8AD2L, /*  -69 */
0x4A2F_22AF_927D_8E7CL, 0x23FA_32AA_4F9D_3BDBL, /*  -68 */
0x76B1_D118_EA62_7D93L, 0x5329_EAAA_18FB_92F8L, /*  -67 */
0x5EF4_A747_21E8_6476L, 0x0F54_BBBB_472F_A8C6L, /*  -66 */
0x4BF6_EC38_E7ED_1D2BL, 0x25DD_62FC_38F2_ED6CL, /*  -65 */
0x798B_138E_3FE1_C845L, 0x22FB_D193_8E51_7BDFL, /*  -64 */
0x613C_0FA4_FFE7_D36AL, 0x4F2F_DADC_71DA_C97FL, /*  -63 */
0x4DC9_A61D_9986_42BBL, 0x58F3_157D_27E2_3ACCL, /*  -62 */
0x7C75_D695_C270_6AC5L, 0x74B8_2261_D969_F7ADL, /*  -61 */
0x6391_7877_CEC0_556BL, 0x1093_4EB4_ADEE_5FBEL, /*  -60 */
0x4FA7_9393_0BCD_1122L, 0x4075_D890_8B25_1965L, /*  -59 */
0x7F72_85B8_12E1_B504L, 0x00BC_8DB4_11D4_F56EL, /*  -58 */
0x65F5_37C6_7581_5D9CL, 0x66FD_3E29_A7DD_9125L, /*  -57 */
0x5190_F96B_9134_4AE3L, 0x6BFD_CB54_864A_DA84L, /*  -56 */
0x4140_C789_40F6_A24FL, 0x6FFE_3C43_9EA2_486AL, /*  -55 */
0x6867_A5A8_67F1_03B2L, 0x7FFD_2D38_FDD0_73DCL, /*  -54 */
0x5386_1E20_5327_3628L, 0x6664_242D_97D9_F64AL, /*  -53 */
0x42D1_B1B3_75B8_F820L, 0x51E9_B68A_DFE1_91D5L, /*  -52 */
0x6AE9_1C52_55F4_C034L, 0x1CA9_2411_6635_B621L, /*  -51 */
0x5587_49DB_77F7_0029L, 0x63BA_8341_1E91_5E81L, /*  -50 */
0x446C_3B15_F992_6687L, 0x6962_029A_7EDA_B201L, /*  -49 */
0x6D79_F823_28EA_3DA6L, 0x0F03_375D_97C4_5001L, /*  -48 */
0x5794_C682_8721_CAEBL, 0x259C_2C4A_DFD0_4001L, /*  -47 */
0x4610_9ECE_D281_6F22L, 0x5149_BD08_B30D_0001L, /*  -46 */
0x701A_97B1_50CF_1837L, 0x3542_C80D_EB48_0001L, /*  -45 */
0x59AE_DFC1_0D72_79C5L, 0x7768_A00B_22A0_0001L, /*  -44 */
0x47BF_1967_3DF5_2E37L, 0x7920_8008_E880_0001L, /*  -43 */
0x72CB_5BD8_6321_E38CL, 0x5B67_3341_7400_0001L, /*  -42 */
0x5BD5_E313_8281_82D6L, 0x7C52_8F67_9000_0001L, /*  -41 */
0x4977_E8DC_6867_9BDFL, 0x16A8_72B9_4000_0001L, /*  -40 */
0x758C_A7C7_0D72_92FEL, 0x5773_EAC2_0000_0001L, /*  -39 */
0x5E0A_1FD2_7128_7598L, 0x45F6_5568_0000_0001L, /*  -38 */
0x4B3B_4CA8_5A86_C47AL, 0x04C5_1120_0000_0001L, /*  -37 */
0x785E_E10D_5DA4_6D90L, 0x07A1_B500_0000_0001L, /*  -36 */
0x604B_E73D_E483_8AD9L, 0x52E7_C400_0000_0001L, /*  -35 */
0x4D09_85CB_1D36_08AEL, 0x0F1F_D000_0000_0001L, /*  -34 */
0x7B42_6FAB_61F0_0DE3L, 0x31CC_8000_0000_0001L, /*  -33 */
0x629B_8C89_1B26_7182L, 0x5B0A_0000_0000_0001L, /*  -32 */
0x4EE2_D6D4_15B8_5ACEL, 0x7C08_0000_0000_0001L, /*  -31 */
0x7E37_BE20_22C0_914BL, 0x1340_0000_0000_0001L, /*  -30 */
0x64F9_64E6_8233_A76FL, 0x2900_0000_0000_0001L, /*  -29 */
0x50C7_83EB_9B5C_85F2L, 0x5400_0000_0000_0001L, /*  -28 */
0x409F_9CBC_7C4A_04C2L, 0x1000_0000_0000_0001L, /*  -27 */
0x6765_C793_FA10_079DL, 0x0000_0000_0000_0001L, /*  -26 */
0x52B7_D2DC_C80C_D2E4L, 0x0000_0000_0000_0001L, /*  -25 */
0x422C_A8B0_A00A_4250L, 0x0000_0000_0000_0001L, /*  -24 */
0x69E1_0DE7_6676_D080L, 0x0000_0000_0000_0001L, /*  -23 */
0x54B4_0B1F_852B_DA00L, 0x0000_0000_0000_0001L, /*  -22 */
0x43C3_3C19_3756_4800L, 0x0000_0000_0000_0001L, /*  -21 */
0x6C6B_935B_8BBD_4000L, 0x0000_0000_0000_0001L, /*  -20 */
0x56BC_75E2_D631_0000L, 0x0000_0000_0000_0001L, /*  -19 */
0x4563_9182_44F4_0000L, 0x0000_0000_0000_0001L, /*  -18 */
0x6F05_B59D_3B20_0000L, 0x0000_0000_0000_0001L, /*  -17 */
0x58D1_5E17_6280_0000L, 0x0000_0000_0000_0001L, /*  -16 */
0x470D_E4DF_8200_0000L, 0x0000_0000_0000_0001L, /*  -15 */
0x71AF_D498_D000_0000L, 0x0000_0000_0000_0001L, /*  -14 */
0x5AF3_107A_4000_0000L, 0x0000_0000_0000_0001L, /*  -13 */
0x48C2_7395_0000_0000L, 0x0000_0000_0000_0001L, /*  -12 */
0x746A_5288_0000_0000L, 0x0000_0000_0000_0001L, /*  -11 */
0x5D21_DBA0_0000_0000L, 0x0000_0000_0000_0001L, /*  -10 */
0x4A81_7C80_0000_0000L, 0x0000_0000_0000_0001L, /*   -9 */
0x7735_9400_0000_0000L, 0x0000_0000_0000_0001L, /*   -8 */
0x5F5E_1000_0000_0000L, 0x0000_0000_0000_0001L, /*   -7 */
0x4C4B_4000_0000_0000L, 0x0000_0000_0000_0001L, /*   -6 */
0x7A12_0000_0000_0000L, 0x0000_0000_0000_0001L, /*   -5 */
0x61A8_0000_0000_0000L, 0x0000_0000_0000_0001L, /*   -4 */
0x4E20_0000_0000_0000L, 0x0000_0000_0000_0001L, /*   -3 */
0x7D00_0000_0000_0000L, 0x0000_0000_0000_0001L, /*   -2 */
0x6400_0000_0000_0000L, 0x0000_0000_0000_0001L, /*   -1 */
0x5000_0000_0000_0000L, 0x0000_0000_0000_0001L, /*    0 */
0x4000_0000_0000_0000L, 0x0000_0000_0000_0001L, /*    1 */
0x6666_6666_6666_6666L, 0x3333_3333_3333_3334L, /*    2 */
0x51EB_851E_B851_EB85L, 0x0F5C_28F5_C28F_5C29L, /*    3 */
0x4189_374B_C6A7_EF9DL, 0x5916_872B_020C_49BBL, /*    4 */
0x68DB_8BAC_710C_B295L, 0x74F0_D844_D013_A92BL, /*    5 */
0x53E2_D623_8DA3_C211L, 0x43F3_E037_0CDC_8755L, /*    6 */
0x431B_DE82_D7B6_34DAL, 0x698F_E692_70B0_6C44L, /*    7 */
0x6B5F_CA6A_F2BD_215EL, 0x0F4C_A41D_811A_46D4L, /*    8 */
0x55E6_3B88_C230_E77EL, 0x3F70_834A_CDAE_9F10L, /*    9 */
0x44B8_2FA0_9B5A_52CBL, 0x4C5A_02A2_3E25_4C0DL, /*   10 */
0x6DF3_7F67_5EF6_EADFL, 0x2D5C_D103_96A2_1347L, /*   11 */
0x57F5_FF85_E592_557FL, 0x3DE3_DA69_454E_75D3L, /*   12 */
0x465E_6604_B7A8_4465L, 0x7E4F_E1ED_D10B_9175L, /*   13 */
0x7097_09A1_25DA_0709L, 0x4A19_697C_81AC_1BEFL, /*   14 */
0x5A12_6E1A_84AE_6C07L, 0x54E1_2130_67BC_E326L, /*   15 */
0x480E_BE7B_9D58_566CL, 0x43E7_4DC0_52FD_8285L, /*   16 */
0x734A_CA5F_6226_F0ADL, 0x530B_AF9A_1E62_6A6DL, /*   17 */
0x5C3B_D519_1B52_5A24L, 0x426F_BFAE_7EB5_21F1L, /*   18 */
0x49C9_7747_490E_AE83L, 0x4EBF_CC8B_9890_E7F4L, /*   19 */
0x760F_253E_DB4A_B0D2L, 0x4ACC_7A78_F41B_0CBAL, /*   20 */
0x5E72_8432_4908_8D75L, 0x223D_2EC7_29AF_3D62L, /*   21 */
0x4B8E_D028_3A6D_3DF7L, 0x34FD_BF05_BAF2_9781L, /*   22 */
0x78E4_8040_5D7B_9658L, 0x54C9_31A2_C4B7_58CFL, /*   23 */
0x60B6_CD00_4AC9_4513L, 0x5D6D_C14F_03C5_E0A5L, /*   24 */
0x4D5F_0A66_A23A_9DA9L, 0x3124_9AA5_9C9E_4D51L, /*   25 */
0x7BCB_43D7_69F7_62A8L, 0x4EA0_F76F_60FD_4882L, /*   26 */
0x6309_0312_BB2C_4EEDL, 0x254D_92BF_80CA_A068L, /*   27 */
0x4F3A_68DB_C8F0_3F24L, 0x1DD7_A899_33D5_4D20L, /*   28 */
0x7EC3_DAF9_4180_6506L, 0x62F2_A75B_8622_1500L, /*   29 */
0x6569_7BFA_9ACD_1D9FL, 0x025B_B916_04E8_10CDL, /*   30 */
0x5121_2FFB_AF0A_7E18L, 0x6849_60DE_6A53_40A4L, /*   31 */
0x40E7_5996_25A1_FE7AL, 0x203A_B3E5_21DC_33B6L, /*   32 */
0x67D8_8F56_A29C_CA5DL, 0x19F7_863B_6960_52BDL, /*   33 */
0x5313_A5DE_E87D_6EB0L, 0x7B2C_6B62_BAB3_7564L, /*   34 */
0x4276_1E4B_ED31_255AL, 0x2F56_BC4E_FBC2_C450L, /*   35 */
0x6A56_96DF_E1E8_3BC3L, 0x6557_93B1_92D1_3A1AL, /*   36 */
0x5512_124C_B4B9_C969L, 0x3779_42F4_7574_2E7BL, /*   37 */
0x440E_750A_2A2E_3ABAL, 0x5F94_3590_5DF6_8B96L, /*   38 */
0x6CE3_EE76_A9E3_912AL, 0x65B9_EF4D_6324_1289L, /*   39 */
0x571C_BEC5_54B6_0DBBL, 0x6AFB_25D7_8283_4207L, /*   40 */
0x45B0_989D_DD5E_7163L, 0x08C8_EB12_CECF_6806L, /*   41 */
0x6F80_F42F_C897_1BD1L, 0x5ADB_11B7_B14B_D9A3L, /*   42 */
0x5933_F68C_A078_E30EL, 0x157C_0E2C_8DD6_47B5L, /*   43 */
0x475C_C53D_4D2D_8271L, 0x5DFC_D823_A4AB_6C91L, /*   44 */
0x722E_0862_1515_9D82L, 0x632E_269F_6DDF_141BL, /*   45 */
0x5B58_06B4_DDAA_E468L, 0x4F58_1EE5_F17F_4349L, /*   46 */
0x4913_3890_B155_8386L, 0x72AC_E584_C132_9C3BL, /*   47 */
0x74EB_8DB4_4EEF_38D7L, 0x6AAE_3C07_9B84_2D2AL, /*   48 */
0x5D89_3E29_D8BF_60ACL, 0x5558_3006_1603_5755L, /*   49 */
0x4AD4_31BB_13CC_4D56L, 0x7779_C004_DE69_12ABL, /*   50 */
0x77B9_E92B_52E0_7BBEL, 0x258F_99A1_63DB_5111L, /*   51 */
0x5FC7_EDBC_424D_2FCBL, 0x37A6_1481_1CAF_740DL, /*   52 */
0x4C9F_F163_683D_BFD5L, 0x7951_AA00_E3BF_900BL, /*   53 */
0x7A99_8238_A6C9_32EFL, 0x754F_7667_D2CC_19ABL, /*   54 */
0x6214_682D_523A_8F26L, 0x2AA5_F853_0F09_AE22L, /*   55 */
0x4E76_B9BD_DB62_0C1EL, 0x5551_9375_A5A1_581BL, /*   56 */
0x7D8A_C2C9_5F03_4697L, 0x3BB5_B8BC_3C35_59C5L, /*   57 */
0x646F_023A_B269_0545L, 0x7C91_6096_9691_149EL, /*   58 */
0x5058_CE95_5B87_376BL, 0x16DA_B3AB_ABA7_43B2L, /*   59 */
0x4047_0BAA_AF9F_5F88L, 0x78AE_F622_EFB9_02F5L, /*   60 */
0x66D8_12AA_B298_98DBL, 0x0DE4_BD04_B2C1_9E54L, /*   61 */
0x5246_7555_5BAD_4715L, 0x57EA_30D0_8F01_4B76L, /*   62 */
0x41D1_F777_7C8A_9F44L, 0x4654_F3DA_0C01_092CL, /*   63 */
0x694F_F258_C744_3207L, 0x23BB_1FC3_4668_0EACL, /*   64 */
0x543F_F513_D29C_F4D2L, 0x4FC8_E635_D1EC_D88AL, /*   65 */
0x4366_5DA9_754A_5D75L, 0x263A_51C4_A7F0_AD3BL, /*   66 */
0x6BD6_FC42_5543_C8BBL, 0x56C3_B607_731A_AEC4L, /*   67 */
0x5645_969B_7769_6D62L, 0x789C_919F_8F48_8BD0L, /*   68 */
0x4504_787C_5F87_8AB5L, 0x46E3_A7B2_D906_D640L, /*   69 */
0x6E6D_8D93_CC0C_1122L, 0x3E39_0C51_5B3E_239AL, /*   70 */
0x5857_A476_3CD6_741BL, 0x4B60_D6A7_7C31_B615L, /*   71 */
0x46AC_8391_CA45_29AFL, 0x55E7_121F_968E_2B44L, /*   72 */
0x7114_05B6_106E_A919L, 0x0971_B698_F0E3_786DL, /*   73 */
0x5A76_6AF8_0D25_5414L, 0x078E_2BAD_8D82_C6BDL, /*   74 */
0x485E_BBF9_A41D_DCDCL, 0x6C71_BC8A_D79B_D231L, /*   75 */
0x73CA_C65C_39C9_6161L, 0x2D82_C744_8C2C_8382L, /*   76 */
0x5CA2_3849_C7D4_4DE7L, 0x3E02_3903_A356_CF9BL, /*   77 */
0x4A1B_603B_0643_7185L, 0x7E68_2D9C_82AB_D949L, /*   78 */
0x7692_3391_A39F_1C09L, 0x4A40_48FA_6AAC_8EDBL, /*   79 */
0x5EDB_5C74_82E5_B007L, 0x5500_3A61_EEF0_7249L, /*   80 */
0x4BE2_B05D_3584_8CD2L, 0x7733_61E7_F259_F507L, /*   81 */
0x796A_B3C8_55A0_E151L, 0x3EB8_9CA6_508F_EE71L, /*   82 */
0x6122_296D_114D_810DL, 0x7EFA_16EB_73A6_585BL, /*   83 */
0x4DB4_EDF0_DAA4_673EL, 0x3261_ABEF_8FB8_46AFL, /*   84 */
0x7C54_AFE7_C43A_3ECAL, 0x1D69_1318_E5F3_A44BL, /*   85 */
0x6376_F31F_D02E_98A1L, 0x6454_0F47_1E5C_836FL, /*   86 */
0x4F92_5C19_7358_7A1BL, 0x0376_729F_4B7D_35F3L, /*   87 */
0x7F50_935B_EBC0_C35EL, 0x38BD_8432_1261_EFEBL, /*   88 */
0x65DA_0F7C_BC9A_35E5L, 0x13CA_D028_0EB4_BFEFL, /*   89 */
0x517B_3F96_FD48_2B1DL, 0x5CA2_4020_0BC3_CCBFL, /*   90 */
0x412F_6612_6439_BC17L, 0x63B5_0019_A303_0A33L, /*   91 */
0x684B_D683_D38F_9359L, 0x1F88_0029_04D1_A9EAL, /*   92 */
0x536F_DECF_DC72_DC47L, 0x32D3_3354_03DA_EE55L, /*   93 */
0x42BF_E573_16C2_49D2L, 0x5BDC_2910_0315_8B77L, /*   94 */
0x6ACC_A251_BE03_A951L, 0x12F9_DB4C_D1BC_1258L, /*   95 */
0x5570_81DA_FE69_5440L, 0x7594_AF70_A7C9_A847L, /*   96 */
0x445A_017B_FEBA_A9CDL, 0x4476_F2C0_863A_ED06L, /*   97 */
0x6D5C_CF2C_CAC4_42E2L, 0x3A57_EACD_A391_7B3CL, /*   98 */
0x577D_728A_3BD0_3581L, 0x7B79_88A4_82DA_C8FDL, /*   99 */
0x45FD_F53B_630C_F79BL, 0x15FA_D3B6_CF15_6D97L, /*  100 */
0x6FFC_BB92_3814_BF5EL, 0x565E_1F8A_E4EF_15BEL, /*  101 */
0x5996_FC74_F9AA_32B2L, 0x11E4_E608_B725_AAFFL, /*  102 */
0x47AB_FD2A_6154_F55BL, 0x27EA_51A0_9284_88CCL, /*  103 */
0x72AC_C843_CEEE_555EL, 0x7310_829A_8407_4146L, /*  104 */
0x5BBD_6D03_0BF1_DDE5L, 0x4273_9BAE_D005_CDD2L, /*  105 */
0x4964_5735_A327_E4B7L, 0x4EC2_E2F2_4004_A4A8L, /*  106 */
0x756D_5855_D1D9_6DF2L, 0x4AD1_6B1D_333A_A10CL, /*  107 */
0x5DF1_1377_DB14_57F5L, 0x2241_227D_C295_4DA3L, /*  108 */
0x4B27_42C6_48DD_132AL, 0x4E9A_81FE_3544_3E1CL, /*  109 */
0x783E_D13D_4161_B844L, 0x175D_9CC9_EED3_9694L, /*  110 */
0x6032_40FD_CDE7_C69CL, 0x7917_B0A1_8BDC_7876L, /*  111 */
0x4CF5_00CB_0B1F_D217L, 0x1412_F3B4_6FE3_9392L, /*  112 */
0x7B21_9ADE_7832_E9BEL, 0x5351_85ED_7FD2_85B6L, /*  113 */
0x6281_48B1_F9C2_5498L, 0x42A7_9E57_9975_37C5L, /*  114 */
0x4ECD_D3C1_949B_76E0L, 0x3552_E512_E12A_9304L, /*  115 */
0x7E16_1F9C_20F8_BE33L, 0x6EEB_081E_3510_EB39L, /*  116 */
0x64DE_7FB0_1A60_9829L, 0x3F22_6CE4_F740_BC2EL, /*  117 */
0x50B1_FFC0_151A_1354L, 0x3281_F0B7_2C33_C9BEL, /*  118 */
0x408E_6633_4414_DC43L, 0x4201_8D5F_568F_D498L, /*  119 */
0x674A_3D1E_D354_939FL, 0x1CCF_4898_8A7F_BA8DL, /*  120 */
0x52A1_CA7F_0F76_DC7FL, 0x30A5_D3AD_3B99_620BL, /*  121 */
0x421B_0865_A5F8_B065L, 0x73B7_DC8A_9614_4E6FL, /*  122 */
0x69C4_DA3C_3CC1_1A3CL, 0x52BF_C744_2353_B0B1L, /*  123 */
0x549D_7B63_63CD_AE96L, 0x7566_3903_4F76_26F4L, /*  124 */
0x43B1_2F82_B63E_2545L, 0x4451_C735_D92B_525DL, /*  125 */
0x6C4E_B26A_BD30_3BA2L, 0x3A1C_71EF_C1DE_EA2EL, /*  126 */
0x56A5_5B88_9759_C94EL, 0x61B0_5B26_34B2_54F2L, /*  127 */
0x4551_1606_DF7B_0772L, 0x1AF3_7C1E_908E_AA5BL, /*  128 */
0x6EE8_233E_325E_7250L, 0x2B1F_2CFD_B417_76F8L, /*  129 */
0x58B9_B5CB_5B7E_C1D9L, 0x6F4C_23FE_29AC_5F2DL, /*  130 */
0x46FA_F7D5_E2CB_CE47L, 0x72A3_4FFE_87BD_18F1L, /*  131 */
0x7191_8C89_6ADF_B073L, 0x0438_7FFD_A5FB_5B1BL, /*  132 */
0x5ADA_D6D4_557F_C05CL, 0x0360_6664_84C9_15AFL, /*  133 */
0x48AF_1243_7799_66B0L, 0x02B3_851D_3707_448CL, /*  134 */
0x744B_506B_F28F_0AB3L, 0x1DEC_082E_BE72_0746L, /*  135 */
0x5D09_0D23_2872_6EF5L, 0x64BC_D358_985B_3905L, /*  136 */
0x4A6D_A41C_205B_8BF7L, 0x6A30_A913_AD15_C738L, /*  137 */
0x7715_D360_33C5_ACBFL, 0x5D1A_A81F_7B56_0B8CL, /*  138 */
0x5F44_A919_C304_8A32L, 0x7DAE_ECE5_FC44_D609L, /*  139 */
0x4C36_EDAE_359D_3B5BL, 0x7E25_8A51_969D_7808L, /*  140 */
0x79F1_7C49_EF61_F893L, 0x16A2_76E8_F0FB_F33FL, /*  141 */
0x618D_FD07_F2B4_C6DCL, 0x121B_9253_F3FC_C299L, /*  142 */
0x4E0B_30D3_2890_9F16L, 0x41AF_A843_2997_0214L, /*  143 */
0x7CDE_B485_0DB4_31BDL, 0x4F7F_739E_A8F1_9CEDL, /*  144 */
0x63E5_5D37_3E29_C164L, 0x3F99_294B_BA5A_E3F1L, /*  145 */
0x4FEA_B0F8_FE87_CDE9L, 0x7FAD_BAA2_FB7B_E98DL, /*  146 */
0x7FDD_E7F4_CA72_E30FL, 0x7F7C_5DD1_925F_DC15L, /*  147 */
0x664B_1FF7_085B_E8D9L, 0x4C63_7E41_41E6_49ABL, /*  148 */
0x51D5_B32C_06AF_ED7AL, 0x704F_9834_34B8_3AEFL, /*  149 */
0x4177_C289_9EF3_2462L, 0x26A6_135C_F6F9_C8BFL, /*  150 */
0x68BF_9DA8_FE51_D3D0L, 0x3DD6_8561_8B29_4132L, /*  151 */
0x53CC_7E20_CB74_A973L, 0x4B12_044E_08ED_CDC2L, /*  152 */
0x4309_FE80_A2C3_BAC2L, 0x6F41_9D0B_3A57_D7CEL, /*  153 */
0x6B43_30CD_D139_2AD1L, 0x3202_94DE_C3BF_BFB0L, /*  154 */
0x55CF_5A3E_40FA_88A7L, 0x419B_AA4B_CFCC_995AL, /*  155 */
0x44A5_E1CB_672E_D3B9L, 0x1AE2_EEA3_0CA3_ADE1L, /*  156 */
0x6DD6_3612_3EB1_52C1L, 0x77D1_7DD1_ADD2_AFCFL, /*  157 */
0x57DE_91A8_3227_7567L, 0x7974_64A7_BE42_263FL, /*  158 */
0x464B_A7B9_C1B9_2AB9L, 0x4790_5086_31CE_84FFL, /*  159 */
0x7079_0C5C_6928_445CL, 0x0C1A_1A70_4FB0_D4CCL, /*  160 */
0x59FA_7049_EDB9_D049L, 0x567B_4859_D95A_43D6L, /*  161 */
0x47FB_8D07_F161_736EL, 0x11FC_39E1_7AAE_9CABL, /*  162 */
0x732C_14D9_8235_857DL, 0x032D_2968_C44A_9445L, /*  163 */
0x5C23_43E1_34F7_9DFDL, 0x4F57_5453_D03B_A9D1L, /*  164 */
0x49B5_CFE7_5D92_E4CAL, 0x72AC_4376_402F_BB0EL, /*  165 */
0x75EF_B30B_C8EB_07ABL, 0x0446_D256_CD19_2B49L, /*  166 */
0x5E59_5C09_6D88_D2EFL, 0x1D05_7512_3DAD_BC3AL, /*  167 */
0x4B7A_B007_8AD3_DBF2L, 0x4A6A_C40E_97BE_302FL, /*  168 */
0x78C4_4CD8_DE1F_C650L, 0x7711_39B0_F2C9_E6B1L, /*  169 */
0x609D_0A47_1819_6B73L, 0x78DA_948D_8F07_EBC1L, /*  170 */
0x4D4A_6E9F_467A_BC5CL, 0x60AE_DD3E_0C06_5634L, /*  171 */
0x7BAA_4A98_70C4_6094L, 0x344A_FB96_79A3_BD20L, /*  172 */
0x62EE_A213_8D69_E6DDL, 0x103B_FC78_614F_CA80L, /*  173 */
0x4F25_4E76_0ABB_1F17L, 0x2696_6393_810C_A200L, /*  174 */
0x7EA2_1723_445E_9825L, 0x2423_D285_9B47_6999L, /*  175 */
0x654E_78E9_037E_E01DL, 0x69B6_4204_7C39_2148L, /*  176 */
0x510B_93ED_9C65_8017L, 0x6E2B_6803_9694_1AA0L, /*  177 */
0x40D6_0FF1_49EA_CCDFL, 0x71BC_5336_1210_154DL, /*  178 */
0x67BC_E64E_DCAA_E166L, 0x1C60_8523_5019_BBAEL, /*  179 */
0x52FD_850B_E3BB_E784L, 0x7D1A_041C_4014_9625L, /*  180 */
0x4264_6A6F_E963_1F9DL, 0x4A7B_367D_0010_781DL, /*  181 */
0x6A3A_43E6_4238_3295L, 0x5D91_F0C8_001A_59C8L, /*  182 */
0x54FB_6985_01C6_8EDEL, 0x17A7_F3D3_3348_47D4L, /*  183 */
0x43FC_546A_67D2_0BE4L, 0x7953_2975_C2A0_3976L, /*  184 */
0x6CC6_ED77_0C83_463BL, 0x0EEB_7589_3766_C256L, /*  185 */
0x5705_8AC5_A39C_382FL, 0x2589_2AD4_2C52_3512L, /*  186 */
0x459E_089E_1C7C_F9BFL, 0x37A0_EF10_2374_F742L, /*  187 */
0x6F63_40FC_FA61_8F98L, 0x5901_7E80_38BB_2536L, /*  188 */
0x591C_33FD_951A_D946L, 0x7A67_9866_93C8_EA91L, /*  189 */
0x4749_C331_4415_7A9FL, 0x151F_AD1E_DCA0_BBA8L, /*  190 */
0x720F_9EB5_39BB_F765L, 0x0832_AE97_C767_92A5L, /*  191 */
0x5B3F_B22A_9496_5F84L, 0x068E_F213_05EC_7551L, /*  192 */
0x48FF_C1BB_AA11_E603L, 0x1ED8_C1A8_D189_F774L, /*  193 */
0x74CC_692C_434F_D66BL, 0x4AF4_690E_1C0F_F253L, /*  194 */
0x5D70_5423_690C_AB89L, 0x225D_20D8_1673_2843L, /*  195 */
0x4AC0_434F_873D_5607L, 0x3517_4D79_AB8F_5369L, /*  196 */
0x779A_054C_0B95_5672L, 0x21BE_E25C_45B2_1F0EL, /*  197 */
0x5FAE_6AA3_3C77_785BL, 0x3498_B516_9E28_18D8L, /*  198 */
0x4C8B_8882_96C5_F9E2L, 0x5D46_F745_4B53_4713L, /*  199 */
0x7A78_DA6A_8AD6_5C9DL, 0x7BA4_BED5_4552_0B52L, /*  200 */
0x61FA_4855_3BDE_B07EL, 0x2FB6_FF11_0441_A2A8L, /*  201 */
0x4E61_D377_6318_8D31L, 0x72F8_CC0D_9D01_4EEDL, /*  202 */
0x7D69_5258_9E8D_AEB6L, 0x1E5A_E015_C802_17E1L, /*  203 */
0x6454_41E0_7ED7_BEF8L, 0x1848_B344_A001_ACB4L, /*  204 */
0x5043_67E6_CBDF_CBF9L, 0x603A_2903_B334_8A2AL, /*  205 */
0x4035_ECB8_A319_6FFBL, 0x002E_8736_28F6_D4EEL, /*  206 */
0x66BC_ADF4_3828_B32BL, 0x19E4_0B89_DB24_87E3L, /*  207 */
0x5230_8B29_C686_F5BCL, 0x14B6_6FA1_7C1D_3983L, /*  208 */
0x41C0_6F54_9ED2_5E30L, 0x1091_F2E7_967D_C79CL, /*  209 */
0x6933_E554_3150_96B3L, 0x341C_B7D8_F0C9_3F5FL, /*  210 */
0x5429_8443_5AA6_DEF5L, 0x767D_5FE0_C0A0_FF80L, /*  211 */
0x4354_69CF_7BB8_B25EL, 0x2B97_7FE7_0080_CC66L, /*  212 */
0x6BBA_42E5_92C1_1D63L, 0x5F58_CCA4_CD9A_E0A3L, /*  213 */
0x562E_9BEA_DBCD_B11CL, 0x4C47_0A1D_7148_B3B6L, /*  214 */
0x44F2_1655_7CA4_8DB0L, 0x3D05_A1B1_276D_5C92L, /*  215 */
0x6E50_23BB_FAA0_E2B3L, 0x7B3C_35E8_3F15_60E9L, /*  216 */
0x5840_1C96_621A_4EF6L, 0x2F63_5E53_65AA_B3EDL, /*  217 */
0x4699_B078_4E7B_725EL, 0x591C_4B75_EAEE_F658L, /*  218 */
0x70F5_E726_E3F8_B6FDL, 0x74FA_1256_44B1_8A26L, /*  219 */
0x5A5E_5285_832D_5F31L, 0x43FB_41DE_9D5A_D4EBL, /*  220 */
0x484B_7537_9C24_4C27L, 0x4FFC_34B2_177B_DD89L, /*  221 */
0x73AB_EEBF_603A_1372L, 0x4CC6_BAB6_8BF9_6274L, /*  222 */
0x5C89_8BCC_4CFB_42C2L, 0x0A38_955E_D661_1B90L, /*  223 */
0x4A07_A309_D72F_689BL, 0x21C6_DDE5_784D_AFA7L, /*  224 */
0x7672_9E76_2518_A75EL, 0x693E_2FD5_8D49_190BL, /*  225 */
0x5EC2_185E_8413_B918L, 0x5431_BFDE_0AA0_E0D5L, /*  226 */
0x4BCE_79E5_3676_2DADL, 0x29C1_664B_3BB3_E711L, /*  227 */
0x794A_5CA1_F0BD_15E2L, 0x0F9B_D6DE_C5EC_A4E8L, /*  228 */
0x6108_4A1B_26FD_AB1BL, 0x2616_457F_04BD_50BAL, /*  229 */
0x4DA0_3B48_EBFE_227CL, 0x1E78_3798_D097_73C8L, /*  230 */
0x7C33_920E_4663_6A60L, 0x30C0_58F4_80F2_52D9L, /*  231 */
0x635C_74D8_384F_884DL, 0x0D66_AD90_6728_4247L, /*  232 */
0x4F7D_2A46_9372_D370L, 0x711E_F140_5286_9B6CL, /*  233 */
0x7F2E_AA0A_8584_8581L, 0x34FE_4ECD_50D7_5F14L, /*  234 */
0x65BE_EE6E_D136_D134L, 0x2A65_0BD7_73DF_7F43L, /*  235 */
0x5165_8B8B_DA92_40F6L, 0x551D_A312_C319_329CL, /*  236 */
0x411E_093C_AEDB_672BL, 0x5DB1_4F42_35AD_C217L, /*  237 */
0x6830_0EC7_7E2B_D845L, 0x7C4E_E536_BC49_368AL, /*  238 */
0x5359_A56C_64EF_E037L, 0x7D0B_EA92_303A_9208L, /*  239 */
0x42AE_1DF0_50BF_E693L, 0x173C_BBA8_2695_41A0L, /*  240 */
0x6AB0_2FE6_E799_70EBL, 0x3EC7_92A6_A422_029AL, /*  241 */
0x5559_BFEB_EC7A_C0BCL, 0x3239_421E_E9B4_CEE1L, /*  242 */
0x4447_CCBC_BD2F_0096L, 0x5B61_01B2_5490_A581L, /*  243 */
0x6D3F_ADFA_C84B_3424L, 0x2BCE_691D_541A_A268L, /*  244 */
0x5766_24C8_A03C_29B6L, 0x563E_BA7D_DCE2_1B87L, /*  245 */
0x45EB_50A0_8030_215EL, 0x7832_2ECB_171B_4939L, /*  246 */
0x6FDE_E767_3380_3564L, 0x59E9_E478_24F8_7527L, /*  247 */
0x597F_1F85_C2CC_F783L, 0x6187_E9F9_B72D_2A86L, /*  248 */
0x4798_E604_9BD7_2C69L, 0x346C_BB2E_2C24_2205L, /*  249 */
0x728E_3CD4_2C8B_7A42L, 0x20AD_F849_E039_D007L, /*  250 */
0x5BA4_FD76_8A09_2E9BL, 0x33BE_603B_19C7_D99FL, /*  251 */
0x4950_CAC5_3B3A_8BAFL, 0x42FE_B362_7B06_47B3L, /*  252 */
0x754E_113B_91F7_45E5L, 0x5197_856A_5E70_72B8L, /*  253 */
0x5DD8_0DC9_4192_9E51L, 0x27AC_6ABB_7EC0_5BC6L, /*  254 */
0x4B13_3E3A_9ADB_B1DAL, 0x52F0_5562_CBCD_1638L, /*  255 */
0x781E_C9F7_5E2C_4FC4L, 0x1E4D_556A_DFAE_89F3L, /*  256 */
0x6018_A192_B1BD_0C9CL, 0x7EA4_4455_7FBE_D4C3L, /*  257 */
0x4CE0_8142_27CA_707DL, 0x4BB6_9D11_32FF_109CL, /*  258 */
0x7B00_CED0_3FAA_4D95L, 0x5F8A_94E8_5198_1A93L, /*  259 */
0x6267_0BD9_CC88_3E11L, 0x32D5_43ED_0E13_4875L, /*  260 */
0x4EB8_D647_D6D3_64DAL, 0x5BDD_CFF0_D80F_6D2BL, /*  261 */
0x7DF4_8A0C_8AEB_D491L, 0x12FC_7FE7_C018_AEABL, /*  262 */
0x64C3_A1A3_A256_43A7L, 0x28C9_FFEC_99AD_5889L, /*  263 */
0x509C_814F_B511_CFB9L, 0x0707_FFF0_7AF1_13A1L, /*  264 */
0x407D_343F_C40E_3FC7L, 0x1F39_998D_2F27_42E7L, /*  265 */
0x672E_B9FF_A016_CC71L, 0x7EC2_8F48_4B72_04A4L, /*  266 */
0x528B_C7FF_B345_705BL, 0x189B_A5D3_6F8E_6A1DL, /*  267 */
0x4209_6CCC_8F6A_C048L, 0x7A16_1E42_BFA5_21B1L, /*  268 */
0x69A8_AE14_18AA_CD41L, 0x4356_96D1_32A1_CF81L, /*  269 */
0x5486_F1A9_AD55_7101L, 0x1C45_4574_2881_72CEL, /*  270 */
0x439F_27BA_F111_2734L, 0x169D_D129_BA01_28A5L, /*  271 */
0x6C31_D92B_1B4E_A520L, 0x242F_B50F_9001_DAA1L, /*  272 */
0x568E_4755_AF72_1DB3L, 0x368C_90D9_4001_7BB4L, /*  273 */
0x453E_9F77_BF8E_7E29L, 0x120A_0D7A_999A_C95DL, /*  274 */
0x6ECA_98BF_98E3_FD0EL, 0x5010_1590_F5C4_7561L, /*  275 */
0x58A2_13CC_7A4F_FDA5L, 0x2673_4473_F7D0_5DE8L, /*  276 */
0x46E8_0FD6_C83F_FE1DL, 0x6B8F_69F6_5FD9_E4B9L, /*  277 */
0x7173_4C8A_D9FF_FCFCL, 0x45B2_4323_CC8F_D45CL, /*  278 */
0x5AC2_A3A2_47FF_FD96L, 0x6AF5_0283_0A0C_A9E3L, /*  279 */
0x489B_B61B_6CCC_CADFL, 0x08C4_0202_6E70_87E9L, /*  280 */
0x742C_5692_47AE_1164L, 0x746C_D003_E3E7_3FDBL, /*  281 */
0x5CF0_4541_D2F1_A783L, 0x76BD_7336_4FEC_3315L, /*  282 */
0x4A59_D101_758E_1F9CL, 0x5EFD_F5C5_0CBC_F5ABL, /*  283 */
0x76F6_1B35_88E3_65C7L, 0x4B2F_EFA1_ADFB_22ABL, /*  284 */
0x5F2B_48F7_A0B5_EB06L, 0x08F3_261A_F195_B555L, /*  285 */
0x4C22_A0C6_1A2B_226BL, 0x20C2_84E2_5ADE_2AABL, /*  286 */
0x79D1_013C_F6AB_6A45L, 0x1AD0_D49D_5E30_4444L, /*  287 */
0x6174_00FD_9222_BB6AL, 0x48A7_107D_E4F3_69D0L, /*  288 */
0x4DF6_6731_41B5_62BBL, 0x53B8_D9FE_50C2_BB0DL, /*  289 */
0x7CBD_71E8_6922_3792L, 0x52C1_5CCA_1AD1_2B48L, /*  290 */
0x63CA_C186_BA81_C60EL, 0x7567_7D6E_7BDA_8906L, /*  291 */
0x4FD5_679E_FB9B_04D8L, 0x5DEC_6458_6315_3A6CL, /*  292 */
0x7FBB_D8FE_5F5E_6E27L, 0x497A_3A27_04EE_C3DFL };","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.pow10(int)","Method","* Returns 10<sup>{@code e}</sup>.
     *
     * @param e The exponent which must meet
     *          0 &le; {@code e} &le; {@link #H}.
     * @return 10<sup>{@code e}</sup>.","static long pow10(int e) {
    return pow10[e];
}","long","static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.pow10(int).e","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.MathUtils.pow10(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.flog10pow2(int)","Method","* Returns the unique integer <i>k</i> such that
     * 10<sup><i>k</i></sup> &le; 2<sup>{@code e}</sup>
     * &lt; 10<sup><i>k</i>+1</sup>.
     * <p>
     * The result is correct when |{@code e}| &le; 5_456_721.
     * Otherwise the result is undefined.
     *
     * @param e The exponent of 2, which should meet
     *          |{@code e}| &le; 5_456_721 for safe results.
     * @return &lfloor;log<sub>10</sub>2<sup>{@code e}</sup>&rfloor;.","static int flog10pow2(int e) {
    return (int) (e * C_10 >> Q_10);
}","int","static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.flog10pow2(int).e","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.MathUtils.flog10pow2(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.flog10threeQuartersPow2(int)","Method","* Returns the unique integer <i>k</i> such that
     * 10<sup><i>k</i></sup> &le; 3/4 &middot; 2<sup>{@code e}</sup>
     * &lt; 10<sup><i>k</i>+1</sup>.
     * <p>
     * The result is correct when
     * -2_956_395 &le; {@code e} &le; 2_500_325.
     * Otherwise the result is undefined.
     *
     * @param e The exponent of 2, which should meet
     *          -2_956_395 &le; {@code e} &le; 2_500_325 for safe results.
     * @return &lfloor;log<sub>10</sub>(3/4 &middot;
     * 2<sup>{@code e}</sup>)&rfloor;.","static int flog10threeQuartersPow2(int e) {
    return (int) (e * C_10 + A_10 >> Q_10);
}","int","static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.flog10threeQuartersPow2(int).e","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.MathUtils.flog10threeQuartersPow2(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.flog2pow10(int)","Method","* Returns the unique integer <i>k</i> such that
     * 2<sup><i>k</i></sup> &le; 10<sup>{@code e}</sup>
     * &lt; 2<sup><i>k</i>+1</sup>.
     * <p>
     * The result is correct when |{@code e}| &le; 1_838_394.
     * Otherwise the result is undefined.
     *
     * @param e The exponent of 10, which should meet
     *          |{@code e}| &le; 1_838_394 for safe results.
     * @return &lfloor;log<sub>2</sub>10<sup>{@code e}</sup>&rfloor;.","static int flog2pow10(int e) {
    return (int) (e * C_2 >> Q_2);
}","int","static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.flog2pow10(int).e","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.MathUtils.flog2pow10(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.g1(int)","Method","* Let 10<sup>-{@code k}</sup> = <i>&beta;</i> 2<sup><i>r</i></sup>,
     * for the unique pair of integer <i>r</i> and real <i>&beta;</i> meeting
     * 2<sup>125</sup> &le; <i>&beta;</i> &lt; 2<sup>126</sup>.
     * Further, let <i>g</i> = &lfloor;<i>&beta;</i>&rfloor; + 1.
     * Split <i>g</i> into the higher 63 bits <i>g</i><sub>1</sub> and
     * the lower 63 bits <i>g</i><sub>0</sub>. Thus,
     * <i>g</i><sub>1</sub> =
     * &lfloor;<i>g</i> 2<sup>-63</sup>&rfloor;
     * and
     * <i>g</i><sub>0</sub> =
     * <i>g</i> - <i>g</i><sub>1</sub> 2<sup>63</sup>.
     * <p>
     * This method returns <i>g</i><sub>1</sub> while
     * {@link #g0(int)} returns <i>g</i><sub>0</sub>.
     * <p>
     * If needed, the exponent <i>r</i> can be computed as
     * <i>r</i> = {@code flog2pow10(-k)} - 125 (see {@link #flog2pow10(int)}).
     *
     * @param k The exponent of 10, which must meet
     *          {@link #K_MIN} &le; {@code e} &le; {@link #K_MAX}.
     * @return <i>g</i><sub>1</sub> as described above.","static long g1(int k) {
    return g[k - K_MIN << 1];
}","long","static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.g1(int).k","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.MathUtils.g1(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.g0(int)","Method","* Returns <i>g</i><sub>0</sub> as described in
     * {@link #g1(int)}.
     *
     * @param k The exponent of 10, which must meet
     *          {@link #K_MIN} &le; {@code e} &le; {@link #K_MAX}.
     * @return <i>g</i><sub>0</sub> as described in
     * {@link #g1(int)}.","static long g0(int k) {
    return g[k - K_MIN << 1 | 1];
}","long","static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.g0(int).k","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.MathUtils.g0(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.multiplyHigh(long,long)","Method","a Java port of https://github.com/plokhotnyuk/jsoniter-scala/blob/c70a293ac802dc2eb44165471d76d7df2d4657b6/jsoniter-scala-core/native/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala#L2027","static long multiplyHigh(long x, long y) {
    // Karatsuba technique for two positive ints
    long x2 = x & 0xFFFFFFFFL;
    long y2 = y & 0xFFFFFFFFL;
    long b = x2 * y2;
    long x1 = x >>> 32;
    long y1 = y >>> 32;
    long a = x1 * y1;
    return (((b >>> 32) + (x1 + x2) * (y1 + y2) - b - a) >>> 32) + a;
}","long","static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.multiplyHigh(long,long).x","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.MathUtils.multiplyHigh(long,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.multiplyHigh(long,long).y","Parameter_2","Belong to com.fasterxml.jackson.core.io.schubfach.MathUtils.multiplyHigh(long,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.MathUtils.<init>()","Constructor","No Comment","private MathUtils() {
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal","Class","* This class exposes a method to render a {@code float} as a string.
 *
 * @author Raffaello Giulietti","Class do not obtain Source Code","No return type","final , public ","",""
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.P","Field","The precision in bits.","static final int P = 24;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.W","Field","Exponent width in bits.","private static final int W = (Float.SIZE - 1) - (P - 1);","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.Q_MIN","Field","Minimum value of the exponent: -(2^(W-1)) - P + 3.","static final int Q_MIN = (-1 << W - 1) - P + 3;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.Q_MAX","Field","Maximum value of the exponent: 2^(W-1) - P.","static final int Q_MAX = (1 << W - 1) - P;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.E_MIN","Field","10^(E_MIN - 1) <= MIN_VALUE < 10^E_MIN","static final int E_MIN = -44;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.E_MAX","Field","10^(E_MAX - 1) <= MAX_VALUE < 10^E_MAX","static final int E_MAX = 39;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.C_TINY","Field","Threshold to detect tiny values, as in section 8.1.1 of [1]","static final int C_TINY = 8;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.K_MIN","Field","The minimum and maximum k, as in section 8 of [1]","static final int K_MIN = -45;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.K_MAX","Field","No Comment","static final int K_MAX = 31;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.H","Field","H is as in section 8 of [1].","static final int H = 9;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.C_MIN","Field","Minimum value of the significand of a normal value: 2^(P-1).","private static final int C_MIN = 1 << P - 1;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.BQ_MASK","Field","Mask to extract the biased exponent.","private static final int BQ_MASK = (1 << W) - 1;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.T_MASK","Field","Mask to extract the fraction bits.","private static final int T_MASK = (1 << P - 1) - 1;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.MASK_32","Field","Used in rop().","private static final long MASK_32 = (1L << 32) - 1;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.MASK_28","Field","Used for left-to-tight digit extraction.","private static final int MASK_28 = (1 << 28) - 1;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.NON_SPECIAL","Field","No Comment","private static final int NON_SPECIAL = 0;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.PLUS_ZERO","Field","No Comment","private static final int PLUS_ZERO = 1;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.MINUS_ZERO","Field","No Comment","private static final int MINUS_ZERO = 2;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.PLUS_INF","Field","No Comment","private static final int PLUS_INF = 3;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.MINUS_INF","Field","No Comment","private static final int MINUS_INF = 4;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.NAN","Field","No Comment","private static final int NAN = 5;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.MAX_CHARS","Field","Room for the longer of the forms
        -ddddd.dddd         H + 2 characters
        -0.00ddddddddd      H + 5 characters
        -d.ddddddddE-ee     H + 6 characters
    where there are H digits d","public final int MAX_CHARS = H + 6;","No return type","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.bytes","Field","Numerical results are created here...","private final byte[] bytes = new byte[MAX_CHARS];","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.index","Field","Index into buf of rightmost valid character.","private int index;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toString(float)","Method","* Returns a string rendering of the {@code float} argument.
     *
     * <p>The characters of the result are all drawn from the ASCII set.
     * <ul>
     * <li> Any NaN, whether quiet or signaling, is rendered as
     * {@code ""NaN""}, regardless of the sign bit.
     * <li> The infinities +&infin; and -&infin; are rendered as
     * {@code ""Infinity""} and {@code ""-Infinity""}, respectively.
     * <li> The positive and negative zeroes are rendered as
     * {@code ""0.0""} and {@code ""-0.0""}, respectively.
     * <li> A finite negative {@code v} is rendered as the sign
     * '{@code -}' followed by the rendering of the magnitude -{@code v}.
     * <li> A finite positive {@code v} is rendered in two stages:
     * <ul>
     * <li> <em>Selection of a decimal</em>: A well-defined
     * decimal <i>d</i><sub><code>v</code></sub> is selected
     * to represent {@code v}.
     * <li> <em>Formatting as a string</em>: The decimal
     * <i>d</i><sub><code>v</code></sub> is formatted as a string,
     * either in plain or in computerized scientific notation,
     * depending on its value.
     * </ul>
     * </ul>
     *
     * <p>A <em>decimal</em> is a number of the form
     * <i>d</i>&times;10<sup><i>i</i></sup>
     * for some (unique) integers <i>d</i> &gt; 0 and <i>i</i> such that
     * <i>d</i> is not a multiple of 10.
     * These integers are the <em>significand</em> and
     * the <em>exponent</em>, respectively, of the decimal.
     * The <em>length</em> of the decimal is the (unique)
     * integer <i>n</i> meeting
     * 10<sup><i>n</i>-1</sup> &le; <i>d</i> &lt; 10<sup><i>n</i></sup>.
     *
     * <p>The decimal <i>d</i><sub><code>v</code></sub>
     * for a finite positive {@code v} is defined as follows:
     * <ul>
     * <li>Let <i>R</i> be the set of all decimals that round to {@code v}
     * according to the usual round-to-closest rule of
     * IEEE 754 floating-point arithmetic.
     * <li>Let <i>m</i> be the minimal length over all decimals in <i>R</i>.
     * <li>When <i>m</i> &ge; 2, let <i>T</i> be the set of all decimals
     * in <i>R</i> with length <i>m</i>.
     * Otherwise, let <i>T</i> be the set of all decimals
     * in <i>R</i> with length 1 or 2.
     * <li>Define <i>d</i><sub><code>v</code></sub> as
     * the decimal in <i>T</i> that is closest to {@code v}.
     * Or if there are two such decimals in <i>T</i>,
     * select the one with the even significand (there is exactly one).
     * </ul>
     *
     * <p>The (uniquely) selected decimal <i>d</i><sub><code>v</code></sub>
     * is then formatted.
     *
     * <p>Let <i>d</i>, <i>i</i> and <i>n</i> be the significand, exponent and
     * length of <i>d</i><sub><code>v</code></sub>, respectively.
     * Further, let <i>e</i> = <i>n</i> + <i>i</i> - 1 and let
     * <i>d</i><sub>1</sub>&hellip;<i>d</i><sub><i>n</i></sub>
     * be the usual decimal expansion of the significand.
     * Note that <i>d</i><sub>1</sub> &ne; 0 &ne; <i>d</i><sub><i>n</i></sub>.
     * <ul>
     * <li>Case -3 &le; <i>e</i> &lt; 0:
     * <i>d</i><sub><code>v</code></sub> is formatted as
     * <code>0.0</code>&hellip;<code>0</code><!--
     * --><i>d</i><sub>1</sub>&hellip;<i>d</i><sub><i>n</i></sub>,
     * where there are exactly -(<i>n</i> + <i>i</i>) zeroes between
     * the decimal point and <i>d</i><sub>1</sub>.
     * For example, 123 &times; 10<sup>-4</sup> is formatted as
     * {@code 0.0123}.
     * <li>Case 0 &le; <i>e</i> &lt; 7:
     * <ul>
     * <li>Subcase <i>i</i> &ge; 0:
     * <i>d</i><sub><code>v</code></sub> is formatted as
     * <i>d</i><sub>1</sub>&hellip;<i>d</i><sub><i>n</i></sub><!--
     * --><code>0</code>&hellip;<code>0.0</code>,
     * where there are exactly <i>i</i> zeroes
     * between <i>d</i><sub><i>n</i></sub> and the decimal point.
     * For example, 123 &times; 10<sup>2</sup> is formatted as
     * {@code 12300.0}.
     * <li>Subcase <i>i</i> &lt; 0:
     * <i>d</i><sub><code>v</code></sub> is formatted as
     * <i>d</i><sub>1</sub>&hellip;<!--
     * --><i>d</i><sub><i>n</i>+<i>i</i></sub>.<!--
     * --><i>d</i><sub><i>n</i>+<i>i</i>+1</sub>&hellip;<!--
     * --><i>d</i><sub><i>n</i></sub>.
     * There are exactly -<i>i</i> digits to the right of
     * the decimal point.
     * For example, 123 &times; 10<sup>-1</sup> is formatted as
     * {@code 12.3}.
     * </ul>
     * <li>Case <i>e</i> &lt; -3 or <i>e</i> &ge; 7:
     * computerized scientific notation is used to format
     * <i>d</i><sub><code>v</code></sub>.
     * Here <i>e</i> is formatted as by {@link Integer#toString(int)}.
     * <ul>
     * <li>Subcase <i>n</i> = 1:
     * <i>d</i><sub><code>v</code></sub> is formatted as
     * <i>d</i><sub>1</sub><code>.0E</code><i>e</i>.
     * For example, 1 &times; 10<sup>23</sup> is formatted as
     * {@code 1.0E23}.
     * <li>Subcase <i>n</i> &gt; 1:
     * <i>d</i><sub><code>v</code></sub> is formatted as
     * <i>d</i><sub>1</sub><code>.</code><i>d</i><sub>2</sub><!--
     * -->&hellip;<i>d</i><sub><i>n</i></sub><code>E</code><i>e</i>.
     * For example, 123 &times; 10<sup>-21</sup> is formatted as
     * {@code 1.23E-19}.
     * </ul>
     * </ul>
     *
     * @param  v the {@code float} to be rendered.
     * @return a string rendering of the argument.","public static String toString(float v) {
    return new FloatToDecimal().toDecimalString(v);
}","String","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toString(float).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toString(float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toDecimalString(float)","Method","No Comment","private String toDecimalString(float v) {
    switch(toDecimal(v)) {
        case NON_SPECIAL:
            return charsToString();
        case PLUS_ZERO:
            return ""0.0"";
        case MINUS_ZERO:
            return ""-0.0"";
        case PLUS_INF:
            return ""Infinity"";
        case MINUS_INF:
            return ""-Infinity"";
        default:
            return ""NaN"";
    }
}","String","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toDecimalString(float).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toDecimalString(float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toDecimal(float)","Method","Returns
        PLUS_ZERO       iff v is 0.0
        MINUS_ZERO      iff v is -0.0
        PLUS_INF        iff v is POSITIVE_INFINITY
        MINUS_INF       iff v is NEGATIVE_INFINITY
        NAN             iff v is NaN","private int toDecimal(float v) {
    /*
        For full details see references [2] and [1].

        For finite v != 0, determine integers c and q such that
            |v| = c 2^q    and
            Q_MIN <= q <= Q_MAX    and
                either    2^(P-1) <= c < 2^P                 (normal)
                or        0 < c < 2^(P-1)  and  q = Q_MIN    (subnormal)
         */
    int bits = floatToRawIntBits(v);
    int t = bits & T_MASK;
    int bq = (bits >>> P - 1) & BQ_MASK;
    if (bq < BQ_MASK) {
        index = -1;
        if (bits < 0) {
            append('-');
        }
        if (bq != 0) {
            // normal value. Here mq = -q
            int mq = -Q_MIN + 1 - bq;
            int c = C_MIN | t;
            // The fast path discussed in section 8.2 of [1].
            if (0 < mq & mq < P) {
                int f = c >> mq;
                if (f << mq == c) {
                    return toChars(f, 0);
                }
            }
            return toDecimal(-mq, c, 0);
        }
        if (t != 0) {
            // subnormal value
            return t < C_TINY ? toDecimal(Q_MIN, 10 * t, -1) : toDecimal(Q_MIN, t, 0);
        }
        return bits == 0 ? PLUS_ZERO : MINUS_ZERO;
    }
    if (t != 0) {
        return NAN;
    }
    return bits > 0 ? PLUS_INF : MINUS_INF;
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toDecimal(float).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toDecimal(float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toDecimal(int,int,int)","Method","No Comment","private int toDecimal(int q, int c, int dk) {
    /*
        The skeleton corresponds to figure 4 of [1].
        The efficient computations are those summarized in figure 7.
        Also check the appendix.

        Here's a correspondence between Java names and names in [1],
        expressed as approximate LaTeX source code and informally.
        Other names are identical.
        cb:     \bar{c}     ""c-bar""
        cbr:    \bar{c}_r   ""c-bar-r""
        cbl:    \bar{c}_l   ""c-bar-l""

        vb:     \bar{v}     ""v-bar""
        vbr:    \bar{v}_r   ""v-bar-r""
        vbl:    \bar{v}_l   ""v-bar-l""

        rop:    r_o'        ""r-o-prime""
         */
    int out = c & 0x1;
    long cb = c << 2;
    long cbr = cb + 2;
    long cbl;
    int k;
    /*
        flog10pow2(e) = floor(log_10(2^e))
        flog10threeQuartersPow2(e) = floor(log_10(3/4 2^e))
        flog2pow10(e) = floor(log_2(10^e))
         */
    if (c != C_MIN | q == Q_MIN) {
        // regular spacing
        cbl = cb - 2;
        k = flog10pow2(q);
    } else {
        // irregular spacing0
        cbl = cb - 1;
        k = flog10threeQuartersPow2(q);
    }
    int h = q + flog2pow10(-k) + 33;
    // g is as in the appendix
    long g = g1(k) + 1;
    int vb = rop(g, cb << h);
    int vbl = rop(g, cbl << h);
    int vbr = rop(g, cbr << h);
    int s = vb >> 2;
    if (s >= 100) {
        /*
            For n = 9, m = 1 the table in section 10 of [1] shows
                s' = floor(s / 10) = floor(s 1_717_986_919 / 2^34)

            sp10 = 10 s'
            tp10 = 10 t'
            upin    iff    u' = sp10 10^k in Rv
            wpin    iff    w' = tp10 10^k in Rv
            See section 9.4 of [1].
             */
        int sp10 = 10 * (int) (s * 1_717_986_919L >>> 34);
        int tp10 = sp10 + 10;
        boolean upin = vbl + out <= sp10 << 2;
        boolean wpin = (tp10 << 2) + out <= vbr;
        if (upin != wpin) {
            return toChars(upin ? sp10 : tp10, k);
        }
    }
    /*
        10 <= s < 100    or    s >= 100  and  u', w' not in Rv
        uin    iff    u = s 10^k in Rv
        win    iff    w = t 10^k in Rv
        See section 9.4 of [1].
         */
    int t = s + 1;
    boolean uin = vbl + out <= s << 2;
    boolean win = (t << 2) + out <= vbr;
    if (uin != win) {
        // Exactly one of u or w lies in Rv.
        return toChars(uin ? s : t, k + dk);
    }
    /*
        Both u and w lie in Rv: determine the one closest to v.
        See section 9.4 of [1].
         */
    int cmp = vb - (s + t << 1);
    return toChars(cmp < 0 || cmp == 0 && (s & 0x1) == 0 ? s : t, k + dk);
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toDecimal(int,int,int).q","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toDecimal(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toDecimal(int,int,int).c","Parameter_2","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toDecimal(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toDecimal(int,int,int).dk","Parameter_3","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toDecimal(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.rop(long,long)","Method","Computes rop(cp g 2^(-95))
    See appendix and figure 8 of [1].","private static int rop(long g, long cp) {
    long x1 = multiplyHigh(g, cp);
    long vbp = x1 >>> 31;
    return (int) (vbp | (x1 & MASK_32) + MASK_32 >>> 32);
}","int","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.rop(long,long).g","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.rop(long,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.rop(long,long).cp","Parameter_2","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.rop(long,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars(int,int)","Method","Formats the decimal f 10^e.","private int toChars(int f, int e) {
    /*
        For details not discussed here see section 10 of [1].

        Determine len such that
            10^(len-1) <= f < 10^len
         */
    int len = flog10pow2(Integer.SIZE - numberOfLeadingZeros(f));
    if (f >= pow10(len)) {
        len += 1;
    }
    /*
        Let fp and ep be the original f and e, respectively.
        Transform f and e to ensure
            10^(H-1) <= f < 10^H
            fp 10^ep = f 10^(e-H) = 0.f 10^e
         */
    f *= pow10(H - len);
    e += len;
    /*
        The toChars?() methods perform left-to-right digits extraction
        using ints, provided that the arguments are limited to 8 digits.
        Therefore, split the H = 9 digits of f into:
            h = the most significant digit of f
            l = the last 8, least significant digits of f

        For n = 9, m = 8 the table in section 10 of [1] shows
            floor(f / 10^8) = floor(1_441_151_881 f / 2^57)
         */
    int h = (int) (f * 1_441_151_881L >>> 57);
    int l = f - 100_000_000 * h;
    if (0 < e && e <= 7) {
        return toChars1(h, l, e);
    }
    if (-3 < e && e <= 0) {
        return toChars2(h, l, e);
    }
    return toChars3(h, l, e);
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars(int,int).f","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars(int,int).e","Parameter_2","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars1(int,int,int)","Method","No Comment","private int toChars1(int h, int l, int e) {
    /*
        0 < e <= 7: plain format without leading zeroes.
        Left-to-right digits extraction:
        algorithm 1 in [3], with b = 10, k = 8, n = 28.
         */
    appendDigit(h);
    int y = y(l);
    int t;
    int i = 1;
    for (; i < e; ++i) {
        t = 10 * y;
        appendDigit(t >>> 28);
        y = t & MASK_28;
    }
    append('.');
    for (; i <= 8; ++i) {
        t = 10 * y;
        appendDigit(t >>> 28);
        y = t & MASK_28;
    }
    removeTrailingZeroes();
    return NON_SPECIAL;
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars1(int,int,int).h","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars1(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars1(int,int,int).l","Parameter_2","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars1(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars1(int,int,int).e","Parameter_3","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars1(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars2(int,int,int)","Method","No Comment","private int toChars2(int h, int l, int e) {
    // -3 < e <= 0: plain format with leading zeroes.
    appendDigit(0);
    append('.');
    for (; e < 0; ++e) {
        appendDigit(0);
    }
    appendDigit(h);
    append8Digits(l);
    removeTrailingZeroes();
    return NON_SPECIAL;
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars2(int,int,int).h","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars2(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars2(int,int,int).l","Parameter_2","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars2(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars2(int,int,int).e","Parameter_3","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars2(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars3(int,int,int)","Method","No Comment","private int toChars3(int h, int l, int e) {
    // -3 >= e | e > 7: computerized scientific notation
    appendDigit(h);
    append('.');
    append8Digits(l);
    removeTrailingZeroes();
    exponent(e - 1);
    return NON_SPECIAL;
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars3(int,int,int).h","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars3(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars3(int,int,int).l","Parameter_2","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars3(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars3(int,int,int).e","Parameter_3","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.toChars3(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.append8Digits(int)","Method","No Comment","private void append8Digits(int m) {
    /*
        Left-to-right digits extraction:
        algorithm 1 in [3], with b = 10, k = 8, n = 28.
         */
    int y = y(m);
    for (int i = 0; i < 8; ++i) {
        int t = 10 * y;
        appendDigit(t >>> 28);
        y = t & MASK_28;
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.append8Digits(int).m","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.append8Digits(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.removeTrailingZeroes()","Method","No Comment","private void removeTrailingZeroes() {
    while (bytes[index] == '0') {
        --index;
    }
    // ... but do not remove the one directly to the right of '.'
    if (bytes[index] == '.') {
        ++index;
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.y(int)","Method","No Comment","private int y(int a) {
    /*
        Algorithm 1 in [3] needs computation of
            floor((a + 1) 2^n / b^k) - 1
        with a < 10^8, b = 10, k = 8, n = 28.
        Noting that
            (a + 1) 2^n <= 10^8 2^28 < 10^17
        For n = 17, m = 8 the table in section 10 of [1] leads to:
         */
    return (int) (multiplyHigh((long) (a + 1) << 28, 193_428_131_138_340_668L) >>> 20) - 1;
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.y(int).a","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.y(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.exponent(int)","Method","No Comment","private void exponent(int e) {
    append('E');
    if (e < 0) {
        append('-');
        e = -e;
    }
    if (e < 10) {
        appendDigit(e);
        return;
    }
    /*
        For n = 2, m = 1 the table in section 10 of [1] shows
            floor(e / 10) = floor(103 e / 2^10)
         */
    int d = e * 103 >>> 10;
    appendDigit(d);
    appendDigit(e - 10 * d);
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.exponent(int).e","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.exponent(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.append(int)","Method","No Comment","private void append(int c) {
    bytes[++index] = (byte) c;
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.append(int).c","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.append(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.appendDigit(int)","Method","No Comment","private void appendDigit(int d) {
    bytes[++index] = (byte) ('0' + d);
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.appendDigit(int).d","Parameter_1","Belong to com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.appendDigit(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.charsToString()","Method","Using the deprecated constructor enhances performance.","@SuppressWarnings(""deprecation"")
private String charsToString() {
    return new String(bytes, 0, 0, index + 1);
}","String","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.<init>()","Constructor","No Comment","private FloatToDecimal() {
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder","Class","* Helper class used for efficient encoding of JSON String values (including
 * JSON field names) into Strings or UTF-8 byte arrays.
 *<p>
 * Note that methods in here are somewhat optimized, but not ridiculously so.
 * Reason is that conversion method results are expected to be cached so that
 * these methods will not be hot spots during normal operation.","Class do not obtain Source Code","No return type","public , final ","",""
"com.fasterxml.jackson.core.io.JsonStringEncoder.HC","Field","No Comment","private final static char[] HC = CharTypes.copyHexChars(true);","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.HB","Field","No Comment","private final static byte[] HB = CharTypes.copyHexBytes(true);","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.SURR1_FIRST","Field","No Comment","private final static int SURR1_FIRST = 0xD800;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.SURR1_LAST","Field","No Comment","private final static int SURR1_LAST = 0xDBFF;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.SURR2_FIRST","Field","No Comment","private final static int SURR2_FIRST = 0xDC00;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.SURR2_LAST","Field","No Comment","private final static int SURR2_LAST = 0xDFFF;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.MIN_CHAR_BUFFER_SIZE","Field","No Comment","final static int MIN_CHAR_BUFFER_SIZE = 16;","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.MAX_CHAR_BUFFER_SIZE","Field","use segments beyond","final static int MAX_CHAR_BUFFER_SIZE = 32000;","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.MIN_BYTE_BUFFER_SIZE","Field","No Comment","final static int MIN_BYTE_BUFFER_SIZE = 24;","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.MAX_BYTE_BUFFER_SIZE","Field","use segments beyond","final static int MAX_BYTE_BUFFER_SIZE = 32000;","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.instance","Field","Since 2.10 we have stateless singleton and NO fancy ThreadLocal/SofRef caching!!!","private final static JsonStringEncoder instance = new JsonStringEncoder();","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.getInstance()","Method","* Factory method for getting an instance; this is either recycled per-thread instance,
     * or a newly constructed one.
     *
     * @return Static stateless encoder instance","public static JsonStringEncoder getInstance() {
    return instance;
}","JsonStringEncoder","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsString(String)","Method","* Method that will escape text contents using JSON standard escaping,
     * and return results as a character array.
     *
     * @param input Value String to process
     *
     * @return JSON-escaped String matching {@code input}","public char[] quoteAsString(String input) {
    final int inputLen = input.length();
    char[] outputBuffer = new char[_initialCharBufSize(inputLen)];
    final int[] escCodes = CharTypes.get7BitOutputEscapes();
    final int escCodeCount = escCodes.length;
    int inPtr = 0;
    TextBuffer textBuffer = null;
    int outPtr = 0;
    char[] qbuf = null;
    outer: while (inPtr < inputLen) {
        tight_loop: while (true) {
            char c = input.charAt(inPtr);
            if (c < escCodeCount && escCodes[c] != 0) {
                break tight_loop;
            }
            if (outPtr >= outputBuffer.length) {
                if (textBuffer == null) {
                    textBuffer = TextBuffer.fromInitial(outputBuffer);
                }
                try {
                    outputBuffer = textBuffer.finishCurrentSegment();
                } catch (IOException e) {
                    // IOException won't happen here, can only occur when ReadConstrainedTextBuffer is used
                    throw new IllegalStateException(e);
                }
                outPtr = 0;
            }
            outputBuffer[outPtr++] = c;
            if (++inPtr >= inputLen) {
                break outer;
            }
        }
        // something to escape; 2 or 6-char variant?
        if (qbuf == null) {
            qbuf = _qbuf();
        }
        char d = input.charAt(inPtr++);
        int escCode = escCodes[d];
        int length = (escCode < 0) ? _appendNumeric(d, qbuf) : _appendNamed(escCode, qbuf);
        if ((outPtr + length) > outputBuffer.length) {
            int first = outputBuffer.length - outPtr;
            if (first > 0) {
                System.arraycopy(qbuf, 0, outputBuffer, outPtr, first);
            }
            if (textBuffer == null) {
                textBuffer = TextBuffer.fromInitial(outputBuffer);
            }
            try {
                outputBuffer = textBuffer.finishCurrentSegment();
            } catch (IOException e) {
                // IOException won't happen here, can only occur when ReadConstrainedTextBuffer is used
                throw new IllegalStateException(e);
            }
            int second = length - first;
            System.arraycopy(qbuf, first, outputBuffer, 0, second);
            outPtr = second;
        } else {
            System.arraycopy(qbuf, 0, outputBuffer, outPtr, length);
            outPtr += length;
        }
    }
    if (textBuffer == null) {
        return Arrays.copyOfRange(outputBuffer, 0, outPtr);
    }
    textBuffer.setCurrentLength(outPtr);
    try {
        return textBuffer.contentsAsArray();
    } catch (IOException e) {
        // IOException won't happen here, can only occur when ReadConstrainedTextBuffer is used
        throw new IllegalStateException(e);
    }
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsString(String).input","Parameter_1","Belong to com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsString(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsString(CharSequence)","Method","* Overloaded variant of {@link #quoteAsString(String)}.
     *
     * @param input Value {@link CharSequence} to process
     *
     * @return JSON-escaped String matching {@code input}
     *
     * @since 2.10","public char[] quoteAsString(CharSequence input) {
    // 15-Aug-2019, tatu: Optimize common case as JIT can't get rid of overhead otherwise
    if (input instanceof String) {
        return quoteAsString((String) input);
    }
    TextBuffer textBuffer = null;
    final int inputLen = input.length();
    char[] outputBuffer = new char[_initialCharBufSize(inputLen)];
    final int[] escCodes = CharTypes.get7BitOutputEscapes();
    final int escCodeCount = escCodes.length;
    int inPtr = 0;
    int outPtr = 0;
    char[] qbuf = null;
    outer: while (inPtr < inputLen) {
        tight_loop: while (true) {
            char c = input.charAt(inPtr);
            if (c < escCodeCount && escCodes[c] != 0) {
                break tight_loop;
            }
            if (outPtr >= outputBuffer.length) {
                if (textBuffer == null) {
                    textBuffer = TextBuffer.fromInitial(outputBuffer);
                }
                try {
                    outputBuffer = textBuffer.finishCurrentSegment();
                } catch (IOException e) {
                    // IOException won't happen here, can only occur when ReadConstrainedTextBuffer is used
                    throw new IllegalStateException(e);
                }
                outPtr = 0;
            }
            outputBuffer[outPtr++] = c;
            if (++inPtr >= inputLen) {
                break outer;
            }
        }
        // something to escape; 2 or 6-char variant?
        if (qbuf == null) {
            qbuf = _qbuf();
        }
        char d = input.charAt(inPtr++);
        int escCode = escCodes[d];
        int length = (escCode < 0) ? _appendNumeric(d, qbuf) : _appendNamed(escCode, qbuf);
        if ((outPtr + length) > outputBuffer.length) {
            int first = outputBuffer.length - outPtr;
            if (first > 0) {
                System.arraycopy(qbuf, 0, outputBuffer, outPtr, first);
            }
            if (textBuffer == null) {
                textBuffer = TextBuffer.fromInitial(outputBuffer);
            }
            try {
                outputBuffer = textBuffer.finishCurrentSegment();
            } catch (IOException e) {
                // IOException won't happen here, can only occur when ReadConstrainedTextBuffer is used
                throw new IllegalStateException(e);
            }
            int second = length - first;
            System.arraycopy(qbuf, first, outputBuffer, 0, second);
            outPtr = second;
        } else {
            System.arraycopy(qbuf, 0, outputBuffer, outPtr, length);
            outPtr += length;
        }
    }
    if (textBuffer == null) {
        return Arrays.copyOfRange(outputBuffer, 0, outPtr);
    }
    textBuffer.setCurrentLength(outPtr);
    try {
        return textBuffer.contentsAsArray();
    } catch (IOException e) {
        // IOException won't happen here, can only occur when ReadConstrainedTextBuffer is used
        throw new IllegalStateException(e);
    }
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsString(CharSequence).input","Parameter_1","Belong to com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsString(CharSequence)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsString(CharSequence,StringBuilder)","Method","* Method that will quote text contents using JSON standard quoting,
     * and append results to a supplied {@link StringBuilder}.
     * Use this variant if you have e.g. a {@link StringBuilder} and want to avoid superfluous copying of it.
     *
     * @param input Value {@link CharSequence} to process
     * @param output {@link StringBuilder} to append escaped contents to
     *
     * @since 2.8","public void quoteAsString(CharSequence input, StringBuilder output) {
    final int[] escCodes = CharTypes.get7BitOutputEscapes();
    final int escCodeCount = escCodes.length;
    int inPtr = 0;
    final int inputLen = input.length();
    char[] qbuf = null;
    outer: while (inPtr < inputLen) {
        tight_loop: while (true) {
            char c = input.charAt(inPtr);
            if (c < escCodeCount && escCodes[c] != 0) {
                break tight_loop;
            }
            output.append(c);
            if (++inPtr >= inputLen) {
                break outer;
            }
        }
        // something to escape; 2 or 6-char variant?
        if (qbuf == null) {
            qbuf = _qbuf();
        }
        char d = input.charAt(inPtr++);
        int escCode = escCodes[d];
        int length = (escCode < 0) ? _appendNumeric(d, qbuf) : _appendNamed(escCode, qbuf);
        output.append(qbuf, 0, length);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsString(CharSequence,StringBuilder).input","Parameter_1","Belong to com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsString(CharSequence,StringBuilder)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsString(CharSequence,StringBuilder).output","Parameter_2","Belong to com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsString(CharSequence,StringBuilder)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsUTF8(String)","Method","* Method that will escape text contents using JSON standard escaping,
     * encode resulting String as UTF-8 bytes
     * and return results as a  byte array.
     *
     * @param text Value {@link String} to process
     *
     * @return UTF-8 encoded bytes of JSON-escaped {@code text}","@SuppressWarnings(""resource"")
public byte[] quoteAsUTF8(String text) {
    int inputPtr = 0;
    int inputEnd = text.length();
    int outputPtr = 0;
    byte[] outputBuffer = new byte[_initialByteBufSize(inputEnd)];
    ByteArrayBuilder bb = null;
    main: while (inputPtr < inputEnd) {
        final int[] escCodes = CharTypes.get7BitOutputEscapes();
        // ASCII and escapes
        inner_loop: while (true) {
            int ch = text.charAt(inputPtr);
            if (ch > 0x7F || escCodes[ch] != 0) {
                break inner_loop;
            }
            if (outputPtr >= outputBuffer.length) {
                if (bb == null) {
                    bb = ByteArrayBuilder.fromInitial(outputBuffer, outputPtr);
                }
                outputBuffer = bb.finishCurrentSegment();
                outputPtr = 0;
            }
            outputBuffer[outputPtr++] = (byte) ch;
            if (++inputPtr >= inputEnd) {
                break main;
            }
        }
        if (bb == null) {
            bb = ByteArrayBuilder.fromInitial(outputBuffer, outputPtr);
        }
        if (outputPtr >= outputBuffer.length) {
            outputBuffer = bb.finishCurrentSegment();
            outputPtr = 0;
        }
        // Ok, so what did we hit?
        int ch = text.charAt(inputPtr++);
        if (ch <= 0x7F) {
            // needs quoting
            int escape = escCodes[ch];
            // ctrl-char, 6-byte escape...
            outputPtr = _appendByte(ch, escape, bb, outputPtr);
            outputBuffer = bb.getCurrentSegment();
            continue main;
        }
        if (ch <= 0x7FF) {
            // fine, just needs 2 byte output
            outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));
            ch = (0x80 | (ch & 0x3f));
        } else {
            // 3 or 4 bytes
            // Surrogates?
            if (ch < SURR1_FIRST || ch > SURR2_LAST) {
                // nope
                outputBuffer[outputPtr++] = (byte) (0xe0 | (ch >> 12));
                if (outputPtr >= outputBuffer.length) {
                    outputBuffer = bb.finishCurrentSegment();
                    outputPtr = 0;
                }
                outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 6) & 0x3f));
                ch = (0x80 | (ch & 0x3f));
            } else {
                // yes, surrogate pair
                if (ch > SURR1_LAST) {
                    // must be from first range
                    _illegal(ch);
                }
                // and if so, followed by another from next range
                if (inputPtr >= inputEnd) {
                    _illegal(ch);
                }
                ch = _convert(ch, text.charAt(inputPtr++));
                if (ch > 0x10FFFF) {
                    // illegal, as per RFC 4627
                    _illegal(ch);
                }
                outputBuffer[outputPtr++] = (byte) (0xf0 | (ch >> 18));
                if (outputPtr >= outputBuffer.length) {
                    outputBuffer = bb.finishCurrentSegment();
                    outputPtr = 0;
                }
                outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 12) & 0x3f));
                if (outputPtr >= outputBuffer.length) {
                    outputBuffer = bb.finishCurrentSegment();
                    outputPtr = 0;
                }
                outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 6) & 0x3f));
                ch = (0x80 | (ch & 0x3f));
            }
        }
        if (outputPtr >= outputBuffer.length) {
            outputBuffer = bb.finishCurrentSegment();
            outputPtr = 0;
        }
        outputBuffer[outputPtr++] = (byte) ch;
    }
    if (bb == null) {
        return Arrays.copyOfRange(outputBuffer, 0, outputPtr);
    }
    return bb.completeAndCoalesce(outputPtr);
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsUTF8(String).text","Parameter_1","Belong to com.fasterxml.jackson.core.io.JsonStringEncoder.quoteAsUTF8(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.encodeAsUTF8(String)","Method","* Will encode given String as UTF-8 (without any escaping) and return
     * the resulting byte array.
     *
     * @param text Value {@link String} to process
     *
     * @return UTF-8 encoded bytes of {@code text} (without any escaping)","@SuppressWarnings(""resource"")
public byte[] encodeAsUTF8(String text) {
    int inputPtr = 0;
    int inputEnd = text.length();
    int outputPtr = 0;
    byte[] outputBuffer = new byte[_initialByteBufSize(inputEnd)];
    int outputEnd = outputBuffer.length;
    ByteArrayBuilder bb = null;
    main_loop: while (inputPtr < inputEnd) {
        int c = text.charAt(inputPtr++);
        // first tight loop for ascii
        while (c <= 0x7F) {
            if (outputPtr >= outputEnd) {
                if (bb == null) {
                    bb = ByteArrayBuilder.fromInitial(outputBuffer, outputPtr);
                }
                outputBuffer = bb.finishCurrentSegment();
                outputEnd = outputBuffer.length;
                outputPtr = 0;
            }
            outputBuffer[outputPtr++] = (byte) c;
            if (inputPtr >= inputEnd) {
                break main_loop;
            }
            c = text.charAt(inputPtr++);
        }
        // then multi-byte...
        if (bb == null) {
            bb = ByteArrayBuilder.fromInitial(outputBuffer, outputPtr);
        }
        if (outputPtr >= outputEnd) {
            outputBuffer = bb.finishCurrentSegment();
            outputEnd = outputBuffer.length;
            outputPtr = 0;
        }
        if (c < 0x800) {
            // 2-byte
            outputBuffer[outputPtr++] = (byte) (0xc0 | (c >> 6));
        } else {
            // 3 or 4 bytes
            // Surrogates?
            if (c < SURR1_FIRST || c > SURR2_LAST) {
                // nope
                outputBuffer[outputPtr++] = (byte) (0xe0 | (c >> 12));
                if (outputPtr >= outputEnd) {
                    outputBuffer = bb.finishCurrentSegment();
                    outputEnd = outputBuffer.length;
                    outputPtr = 0;
                }
                outputBuffer[outputPtr++] = (byte) (0x80 | ((c >> 6) & 0x3f));
            } else {
                // yes, surrogate pair
                if (c > SURR1_LAST) {
                    // must be from first range
                    _illegal(c);
                }
                // and if so, followed by another from next range
                if (inputPtr >= inputEnd) {
                    _illegal(c);
                }
                c = _convert(c, text.charAt(inputPtr++));
                if (c > 0x10FFFF) {
                    // illegal, as per RFC 4627
                    _illegal(c);
                }
                outputBuffer[outputPtr++] = (byte) (0xf0 | (c >> 18));
                if (outputPtr >= outputEnd) {
                    outputBuffer = bb.finishCurrentSegment();
                    outputEnd = outputBuffer.length;
                    outputPtr = 0;
                }
                outputBuffer[outputPtr++] = (byte) (0x80 | ((c >> 12) & 0x3f));
                if (outputPtr >= outputEnd) {
                    outputBuffer = bb.finishCurrentSegment();
                    outputEnd = outputBuffer.length;
                    outputPtr = 0;
                }
                outputBuffer[outputPtr++] = (byte) (0x80 | ((c >> 6) & 0x3f));
            }
        }
        if (outputPtr >= outputEnd) {
            outputBuffer = bb.finishCurrentSegment();
            outputEnd = outputBuffer.length;
            outputPtr = 0;
        }
        outputBuffer[outputPtr++] = (byte) (0x80 | (c & 0x3f));
    }
    if (bb == null) {
        return Arrays.copyOfRange(outputBuffer, 0, outputPtr);
    }
    return bb.completeAndCoalesce(outputPtr);
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.encodeAsUTF8(String).text","Parameter_1","Belong to com.fasterxml.jackson.core.io.JsonStringEncoder.encodeAsUTF8(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.encodeAsUTF8(CharSequence)","Method","* Overloaded variant of {@link #encodeAsUTF8(String)}.
     *
     * @param text Value {@link CharSequence} to process
     *
     * @return UTF-8 encoded bytes of {@code text} (without any escaping)
     *
     * @since 2.11","@SuppressWarnings(""resource"")
public byte[] encodeAsUTF8(CharSequence text) {
    int inputPtr = 0;
    int inputEnd = text.length();
    int outputPtr = 0;
    byte[] outputBuffer = new byte[_initialByteBufSize(inputEnd)];
    int outputEnd = outputBuffer.length;
    ByteArrayBuilder bb = null;
    main_loop: while (inputPtr < inputEnd) {
        int c = text.charAt(inputPtr++);
        // first tight loop for ascii
        while (c <= 0x7F) {
            if (outputPtr >= outputEnd) {
                if (bb == null) {
                    bb = ByteArrayBuilder.fromInitial(outputBuffer, outputPtr);
                }
                outputBuffer = bb.finishCurrentSegment();
                outputEnd = outputBuffer.length;
                outputPtr = 0;
            }
            outputBuffer[outputPtr++] = (byte) c;
            if (inputPtr >= inputEnd) {
                break main_loop;
            }
            c = text.charAt(inputPtr++);
        }
        // then multi-byte...
        if (bb == null) {
            bb = ByteArrayBuilder.fromInitial(outputBuffer, outputPtr);
        }
        if (outputPtr >= outputEnd) {
            outputBuffer = bb.finishCurrentSegment();
            outputEnd = outputBuffer.length;
            outputPtr = 0;
        }
        if (c < 0x800) {
            // 2-byte
            outputBuffer[outputPtr++] = (byte) (0xc0 | (c >> 6));
        } else {
            // 3 or 4 bytes
            // Surrogates?
            if (c < SURR1_FIRST || c > SURR2_LAST) {
                // nope
                outputBuffer[outputPtr++] = (byte) (0xe0 | (c >> 12));
                if (outputPtr >= outputEnd) {
                    outputBuffer = bb.finishCurrentSegment();
                    outputEnd = outputBuffer.length;
                    outputPtr = 0;
                }
                outputBuffer[outputPtr++] = (byte) (0x80 | ((c >> 6) & 0x3f));
            } else {
                // yes, surrogate pair
                if (c > SURR1_LAST) {
                    // must be from first range
                    _illegal(c);
                }
                // and if so, followed by another from next range
                if (inputPtr >= inputEnd) {
                    _illegal(c);
                }
                c = _convert(c, text.charAt(inputPtr++));
                if (c > 0x10FFFF) {
                    // illegal, as per RFC 4627
                    _illegal(c);
                }
                outputBuffer[outputPtr++] = (byte) (0xf0 | (c >> 18));
                if (outputPtr >= outputEnd) {
                    outputBuffer = bb.finishCurrentSegment();
                    outputEnd = outputBuffer.length;
                    outputPtr = 0;
                }
                outputBuffer[outputPtr++] = (byte) (0x80 | ((c >> 12) & 0x3f));
                if (outputPtr >= outputEnd) {
                    outputBuffer = bb.finishCurrentSegment();
                    outputEnd = outputBuffer.length;
                    outputPtr = 0;
                }
                outputBuffer[outputPtr++] = (byte) (0x80 | ((c >> 6) & 0x3f));
            }
        }
        if (outputPtr >= outputEnd) {
            outputBuffer = bb.finishCurrentSegment();
            outputEnd = outputBuffer.length;
            outputPtr = 0;
        }
        outputBuffer[outputPtr++] = (byte) (0x80 | (c & 0x3f));
    }
    if (bb == null) {
        return Arrays.copyOfRange(outputBuffer, 0, outputPtr);
    }
    return bb.completeAndCoalesce(outputPtr);
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.encodeAsUTF8(CharSequence).text","Parameter_1","Belong to com.fasterxml.jackson.core.io.JsonStringEncoder.encodeAsUTF8(CharSequence)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._qbuf()","Method","No Comment","private char[] _qbuf() {
    char[] qbuf = new char[6];
    qbuf[0] = '\\';
    qbuf[2] = '0';
    qbuf[3] = '0';
    return qbuf;
}","char[]","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._appendNumeric(int,char[])","Method","No Comment","private int _appendNumeric(int value, char[] qbuf) {
    qbuf[1] = 'u';
    // We know it's a control char, so only the last 2 chars are non-0
    qbuf[4] = HC[value >> 4];
    qbuf[5] = HC[value & 0xF];
    return 6;
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._appendNumeric(int,char[]).value","Parameter_1","Belong to com.fasterxml.jackson.core.io.JsonStringEncoder._appendNumeric(int,char[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._appendNumeric(int,char[]).qbuf","Parameter_2","Belong to com.fasterxml.jackson.core.io.JsonStringEncoder._appendNumeric(int,char[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._appendNamed(int,char[])","Method","No Comment","private int _appendNamed(int esc, char[] qbuf) {
    qbuf[1] = (char) esc;
    return 2;
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._appendNamed(int,char[]).esc","Parameter_1","Belong to com.fasterxml.jackson.core.io.JsonStringEncoder._appendNamed(int,char[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._appendNamed(int,char[]).qbuf","Parameter_2","Belong to com.fasterxml.jackson.core.io.JsonStringEncoder._appendNamed(int,char[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._appendByte(int,int,ByteArrayBuilder,int)","Method","No Comment","private int _appendByte(int ch, int esc, ByteArrayBuilder bb, int ptr) {
    bb.setCurrentSegmentLength(ptr);
    bb.append('\\');
    if (esc < 0) {
        // standard escape
        bb.append('u');
        if (ch > 0xFF) {
            int hi = (ch >> 8);
            bb.append(HB[hi >> 4]);
            bb.append(HB[hi & 0xF]);
            ch &= 0xFF;
        } else {
            bb.append('0');
            bb.append('0');
        }
        bb.append(HB[ch >> 4]);
        bb.append(HB[ch & 0xF]);
    } else {
        // 2-char simple escape
        bb.append((byte) esc);
    }
    return bb.getCurrentSegmentLength();
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._appendByte(int,int,ByteArrayBuilder,int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.io.JsonStringEncoder._appendByte(int,int,ByteArrayBuilder,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._appendByte(int,int,ByteArrayBuilder,int).esc","Parameter_2","Belong to com.fasterxml.jackson.core.io.JsonStringEncoder._appendByte(int,int,ByteArrayBuilder,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._appendByte(int,int,ByteArrayBuilder,int).bb","Parameter_3","Belong to com.fasterxml.jackson.core.io.JsonStringEncoder._appendByte(int,int,ByteArrayBuilder,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._appendByte(int,int,ByteArrayBuilder,int).ptr","Parameter_4","Belong to com.fasterxml.jackson.core.io.JsonStringEncoder._appendByte(int,int,ByteArrayBuilder,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._convert(int,int)","Method","No Comment","private static int _convert(int p1, int p2) {
    // Ok, then, is the second part valid?
    if (p2 < SURR2_FIRST || p2 > SURR2_LAST) {
        throw new IllegalArgumentException(""Broken surrogate pair: first char 0x"" + Integer.toHexString(p1) + "", second 0x"" + Integer.toHexString(p2) + ""; illegal combination"");
    }
    return (p1 << 10) + p2 + UTF8Writer.SURROGATE_BASE;
}","int","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._convert(int,int).p1","Parameter_1","Belong to com.fasterxml.jackson.core.io.JsonStringEncoder._convert(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._convert(int,int).p2","Parameter_2","Belong to com.fasterxml.jackson.core.io.JsonStringEncoder._convert(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._illegal(int)","Method","No Comment","private static void _illegal(int c) {
    throw new IllegalArgumentException(UTF8Writer.illegalSurrogateDesc(c));
}","void","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._illegal(int).c","Parameter_1","Belong to com.fasterxml.jackson.core.io.JsonStringEncoder._illegal(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._initialCharBufSize(int)","Method","non-private for unit test access","static int _initialCharBufSize(int strLen) {
    // char->char won't expand but we need to give some room for escaping
    // like 1/8 (12.5% expansion) but cap addition to something modest
    final int estimated = Math.max(MIN_CHAR_BUFFER_SIZE, strLen + Math.min(6 + (strLen >> 3), 1000));
    return Math.min(estimated, MAX_CHAR_BUFFER_SIZE);
}","int","static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._initialCharBufSize(int).strLen","Parameter_1","Belong to com.fasterxml.jackson.core.io.JsonStringEncoder._initialCharBufSize(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._initialByteBufSize(int)","Method","non-private for unit test access","static int _initialByteBufSize(int strLen) {
    // char->byte for UTF-8 can expand size by x3 itself, and escaping
    // more... but let's use lower factor of 1.5
    final int doubled = Math.max(MIN_BYTE_BUFFER_SIZE, strLen + 6 + (strLen >> 1));
    // but use upper bound for humongous cases (segmented)
    return Math.min(doubled, MAX_BYTE_BUFFER_SIZE);
}","int","static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder._initialByteBufSize(int).strLen","Parameter_1","Belong to com.fasterxml.jackson.core.io.JsonStringEncoder._initialByteBufSize(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonStringEncoder.<init>()","Constructor","No Comment","public JsonStringEncoder() {
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString","Class","* String token that can lazily serialize String contained and then reuse that
 * serialization later on. This is similar to JDBC prepared statements, for example,
 * in that instances should only be created when they are used more than use;
 * prime candidates are various serializers.
 *<p>
 * Class is final for performance reasons and since this is not designed to
 * be extensible or customizable (customizations would occur in calling code)","Class do not obtain Source Code","No return type","public ","","com.fasterxml.jackson.core.SerializableString;java.io.Serializable"
"com.fasterxml.jackson.core.io.SerializedString.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.JSON_ENCODER","Field","No Comment","private static final JsonStringEncoder JSON_ENCODER = JsonStringEncoder.getInstance();","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString._value","Field","No Comment","protected final String _value;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString._quotedUTF8Ref","Field","No Comment","protected volatile byte[] _quotedUTF8Ref;","No return type","protected , volatile ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString._unquotedUTF8Ref","Field","No Comment","protected volatile byte[] _unquotedUTF8Ref;","No return type","protected , volatile ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString._quotedChars","Field","No Comment","protected volatile char[] _quotedChars;","No return type","protected , volatile ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString._jdkSerializeValue","Field","* Ugly hack, to work through the requirement that _value is indeed final,
     * and that JDK serialization won't call ctor(s).
     *
     * @since 2.1","protected transient String _jdkSerializeValue;","No return type","protected , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.readObject(ObjectInputStream)","Method","No Comment","private void readObject(ObjectInputStream in) throws IOException {
    _jdkSerializeValue = in.readUTF();
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.readObject(ObjectInputStream).in","Parameter_1","Belong to com.fasterxml.jackson.core.io.SerializedString.readObject(ObjectInputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.writeObject(ObjectOutputStream)","Method","No Comment","private void writeObject(ObjectOutputStream out) throws IOException {
    out.writeUTF(_value);
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.writeObject(ObjectOutputStream).out","Parameter_1","Belong to com.fasterxml.jackson.core.io.SerializedString.writeObject(ObjectOutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.readResolve()","Method","No Comment","protected Object readResolve() {
    return new SerializedString(_jdkSerializeValue);
}","Object","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.getValue()","Method","No Comment","@Override
public final String getValue() {
    return _value;
}","String","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.charLength()","Method","* Returns length of the String as characters","@Override
public final int charLength() {
    return _value.length();
}","int","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.asQuotedChars()","Method","* Accessor for accessing value that has been quoted (escaped) using JSON
     * quoting rules (using backslash-prefixed codes) into a char array.","@Override
public final char[] asQuotedChars() {
    char[] result = _quotedChars;
    if (result == null) {
        _quotedChars = result = JSON_ENCODER.quoteAsString(_value);
    }
    return result;
}","char[]","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.asQuotedUTF8()","Method","* Accessor for accessing value that has been quoted (escaped) using JSON
     * quoting rules (using backslash-prefixed codes), and encoded using
     * UTF-8 encoding into a byte array.","@Override
public final byte[] asQuotedUTF8() {
    byte[] result = _quotedUTF8Ref;
    if (result == null) {
        _quotedUTF8Ref = result = JSON_ENCODER.quoteAsUTF8(_value);
    }
    return result;
}","byte[]","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.asUnquotedUTF8()","Method","* Accessor for accessing value as is (without JSON quoting (ecaping))
     * encoded as UTF-8 byte array.","@Override
public final byte[] asUnquotedUTF8() {
    byte[] result = _unquotedUTF8Ref;
    if (result == null) {
        _unquotedUTF8Ref = result = JSON_ENCODER.encodeAsUTF8(_value);
    }
    return result;
}","byte[]","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.appendQuoted(char[],int)","Method","No Comment","@Override
public int appendQuoted(char[] buffer, int offset) {
    char[] result = _quotedChars;
    if (result == null) {
        _quotedChars = result = JSON_ENCODER.quoteAsString(_value);
    }
    final int length = result.length;
    if ((offset + length) > buffer.length) {
        return -1;
    }
    System.arraycopy(result, 0, buffer, offset, length);
    return length;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.appendQuoted(char[],int).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.io.SerializedString.appendQuoted(char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.appendQuoted(char[],int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.io.SerializedString.appendQuoted(char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.appendQuotedUTF8(byte[],int)","Method","No Comment","@Override
public int appendQuotedUTF8(byte[] buffer, int offset) {
    byte[] result = _quotedUTF8Ref;
    if (result == null) {
        _quotedUTF8Ref = result = JSON_ENCODER.quoteAsUTF8(_value);
    }
    final int length = result.length;
    if ((offset + length) > buffer.length) {
        return -1;
    }
    System.arraycopy(result, 0, buffer, offset, length);
    return length;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.appendQuotedUTF8(byte[],int).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.io.SerializedString.appendQuotedUTF8(byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.appendQuotedUTF8(byte[],int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.io.SerializedString.appendQuotedUTF8(byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.appendUnquoted(char[],int)","Method","No Comment","@Override
public int appendUnquoted(char[] buffer, int offset) {
    String str = _value;
    final int length = str.length();
    if ((offset + length) > buffer.length) {
        return -1;
    }
    str.getChars(0, length, buffer, offset);
    return length;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.appendUnquoted(char[],int).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.io.SerializedString.appendUnquoted(char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.appendUnquoted(char[],int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.io.SerializedString.appendUnquoted(char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.appendUnquotedUTF8(byte[],int)","Method","No Comment","@Override
public int appendUnquotedUTF8(byte[] buffer, int offset) {
    byte[] result = _unquotedUTF8Ref;
    if (result == null) {
        _unquotedUTF8Ref = result = JSON_ENCODER.encodeAsUTF8(_value);
    }
    final int length = result.length;
    if ((offset + length) > buffer.length) {
        return -1;
    }
    System.arraycopy(result, 0, buffer, offset, length);
    return length;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.appendUnquotedUTF8(byte[],int).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.io.SerializedString.appendUnquotedUTF8(byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.appendUnquotedUTF8(byte[],int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.io.SerializedString.appendUnquotedUTF8(byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.writeQuotedUTF8(OutputStream)","Method","No Comment","@Override
public int writeQuotedUTF8(OutputStream out) throws IOException {
    byte[] result = _quotedUTF8Ref;
    if (result == null) {
        _quotedUTF8Ref = result = JSON_ENCODER.quoteAsUTF8(_value);
    }
    final int length = result.length;
    out.write(result, 0, length);
    return length;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.writeQuotedUTF8(OutputStream).out","Parameter_1","Belong to com.fasterxml.jackson.core.io.SerializedString.writeQuotedUTF8(OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.writeUnquotedUTF8(OutputStream)","Method","No Comment","@Override
public int writeUnquotedUTF8(OutputStream out) throws IOException {
    byte[] result = _unquotedUTF8Ref;
    if (result == null) {
        _unquotedUTF8Ref = result = JSON_ENCODER.encodeAsUTF8(_value);
    }
    final int length = result.length;
    out.write(result, 0, length);
    return length;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.writeUnquotedUTF8(OutputStream).out","Parameter_1","Belong to com.fasterxml.jackson.core.io.SerializedString.writeUnquotedUTF8(OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.putQuotedUTF8(ByteBuffer)","Method","No Comment","@Override
public int putQuotedUTF8(ByteBuffer buffer) {
    byte[] result = _quotedUTF8Ref;
    if (result == null) {
        _quotedUTF8Ref = result = JSON_ENCODER.quoteAsUTF8(_value);
    }
    final int length = result.length;
    if (length > buffer.remaining()) {
        return -1;
    }
    buffer.put(result, 0, length);
    return length;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.putQuotedUTF8(ByteBuffer).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.io.SerializedString.putQuotedUTF8(ByteBuffer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.putUnquotedUTF8(ByteBuffer)","Method","No Comment","@Override
public int putUnquotedUTF8(ByteBuffer buffer) {
    byte[] result = _unquotedUTF8Ref;
    if (result == null) {
        _unquotedUTF8Ref = result = JSON_ENCODER.encodeAsUTF8(_value);
    }
    final int length = result.length;
    if (length > buffer.remaining()) {
        return -1;
    }
    buffer.put(result, 0, length);
    return length;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.putUnquotedUTF8(ByteBuffer).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.io.SerializedString.putUnquotedUTF8(ByteBuffer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.toString()","Method","No Comment","@Override
public final String toString() {
    return _value;
}","String","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.hashCode()","Method","No Comment","@Override
public final int hashCode() {
    return _value.hashCode();
}","int","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.equals(Object)","Method","No Comment","@Override
public final boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null || o.getClass() != getClass())
        return false;
    SerializedString other = (SerializedString) o;
    return _value.equals(other._value);
}","boolean","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.equals(Object).o","Parameter_1","Belong to com.fasterxml.jackson.core.io.SerializedString.equals(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.<init>(String)","Constructor","No Comment","public SerializedString(String v) {
    _value = Objects.requireNonNull(v, ""Null String illegal for SerializedString"");
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SerializedString.<init>(String).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.SerializedString.<init>(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput","Class","No Comment","Class do not obtain Source Code","No return type","public , final ","",""
"com.fasterxml.jackson.core.io.NumberOutput.MILLION","Field","No Comment","private static int MILLION = 1000000;","No return type","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.BILLION","Field","No Comment","private static int BILLION = 1000000000;","No return type","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.BILLION_L","Field","No Comment","private static long BILLION_L = 1000000000L;","No return type","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.MIN_INT_AS_LONG","Field","No Comment","private static long MIN_INT_AS_LONG = Integer.MIN_VALUE;","No return type","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.MAX_INT_AS_LONG","Field","No Comment","private static long MAX_INT_AS_LONG = Integer.MAX_VALUE;","No return type","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.SMALLEST_INT","Field","No Comment","final static String SMALLEST_INT = String.valueOf(Integer.MIN_VALUE);","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.SMALLEST_LONG","Field","No Comment","final static String SMALLEST_LONG = String.valueOf(Long.MIN_VALUE);","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.TRIPLET_TO_CHARS","Field","* Encoded representations of 3-decimal-digit indexed values, where
     * 3 LSB are ascii characters
     *
     * @since 2.8.2","private final static int[] TRIPLET_TO_CHARS = new int[1000];","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.sSmallIntStrs","Field","No Comment","private final static String[] sSmallIntStrs = new String[] { ""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"" };","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.sSmallIntStrs2","Field","No Comment","private final static String[] sSmallIntStrs2 = new String[] { ""-1"", ""-2"", ""-3"", ""-4"", ""-5"", ""-6"", ""-7"", ""-8"", ""-9"", ""-10"" };","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.outputInt(int,char[],int)","Method","* Method for appending value of given {@code int} value into
     * specified {@code char[]}.
     *<p>
     * NOTE: caller must guarantee that the output buffer has enough room
     * for String representation of the value.
     *
     * @param v Value to append to buffer
     * @param b Buffer to append value to: caller must guarantee there is enough room
     * @param off Offset within output buffer ({@code b}) to append number at
     *
     * @return Offset within buffer after outputting {@code int}","public static int outputInt(int v, char[] b, int off) {
    if (v < 0) {
        if (v == Integer.MIN_VALUE) {
            // Special case: no matching positive value within range;
            // let's then ""upgrade"" to long and output as such.
            return _outputSmallestI(b, off);
        }
        b[off++] = '-';
        v = -v;
    }
    if (v < MILLION) {
        // at most 2 triplets...
        if (v < 1000) {
            if (v < 10) {
                b[off] = (char) ('0' + v);
                return off + 1;
            }
            return _leading3(v, b, off);
        }
        int thousands = divBy1000(v);
        // == value % 1000
        v -= (thousands * 1000);
        off = _leading3(thousands, b, off);
        off = _full3(v, b, off);
        return off;
    }
    // ok, all 3 triplets included
    /* Let's first hand possible billions separately before
         * handling 3 triplets. This is possible since we know we
         * can have at most '2' as billion count.
         */
    if (v >= BILLION) {
        v -= BILLION;
        if (v >= BILLION) {
            v -= BILLION;
            b[off++] = '2';
        } else {
            b[off++] = '1';
        }
        return _outputFullBillion(v, b, off);
    }
    int newValue = divBy1000(v);
    // == value % 1000
    int ones = (v - (newValue * 1000));
    v = newValue;
    newValue = divBy1000(newValue);
    int thousands = (v - (newValue * 1000));
    off = _leading3(newValue, b, off);
    off = _full3(thousands, b, off);
    return _full3(ones, b, off);
}","int","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.outputInt(int,char[],int).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput.outputInt(int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.outputInt(int,char[],int).b","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberOutput.outputInt(int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.outputInt(int,char[],int).off","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberOutput.outputInt(int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.outputInt(int,byte[],int)","Method","No Comment","public static int outputInt(int v, byte[] b, int off) {
    if (v < 0) {
        if (v == Integer.MIN_VALUE) {
            return _outputSmallestI(b, off);
        }
        b[off++] = '-';
        v = -v;
    }
    if (v < MILLION) {
        // at most 2 triplets...
        if (v < 1000) {
            if (v < 10) {
                b[off++] = (byte) ('0' + v);
            } else {
                off = _leading3(v, b, off);
            }
        } else {
            int thousands = divBy1000(v);
            // == value % 1000
            v -= (thousands * 1000);
            off = _leading3(thousands, b, off);
            off = _full3(v, b, off);
        }
        return off;
    }
    if (v >= BILLION) {
        v -= BILLION;
        if (v >= BILLION) {
            v -= BILLION;
            b[off++] = '2';
        } else {
            b[off++] = '1';
        }
        return _outputFullBillion(v, b, off);
    }
    int newValue = divBy1000(v);
    // == value % 1000
    int ones = (v - (newValue * 1000));
    v = newValue;
    newValue = divBy1000(newValue);
    int thousands = (v - (newValue * 1000));
    off = _leading3(newValue, b, off);
    off = _full3(thousands, b, off);
    return _full3(ones, b, off);
}","int","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.outputInt(int,byte[],int).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput.outputInt(int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.outputInt(int,byte[],int).b","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberOutput.outputInt(int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.outputInt(int,byte[],int).off","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberOutput.outputInt(int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.outputLong(long,char[],int)","Method","* Method for appending value of given {@code long} value into
     * specified {@code char[]}.
     *<p>
     * NOTE: caller must guarantee that the output buffer has enough room
     * for String representation of the value.
     *
     * @param v Value to append to buffer
     * @param b Buffer to append value to: caller must guarantee there is enough room
     * @param off Offset within output buffer ({@code b}) to append number at
     *
     * @return Offset within buffer after outputting {@code long}","public static int outputLong(long v, char[] b, int off) {
    // First: does it actually fit in an int?
    if (v < 0L) {
        if (v > MIN_INT_AS_LONG) {
            return outputInt((int) v, b, off);
        }
        if (v == Long.MIN_VALUE) {
            return _outputSmallestL(b, off);
        }
        b[off++] = '-';
        v = -v;
    } else {
        if (v <= MAX_INT_AS_LONG) {
            return outputInt((int) v, b, off);
        }
    }
    // Ok, let's separate last 9 digits (3 x full sets of 3)
    long upper = v / BILLION_L;
    v -= (upper * BILLION_L);
    // two integers?
    if (upper < BILLION_L) {
        off = _outputUptoBillion((int) upper, b, off);
    } else {
        // no, two ints and bits; hi may be about 16 or so
        long hi = upper / BILLION_L;
        upper -= (hi * BILLION_L);
        off = _leading3((int) hi, b, off);
        off = _outputFullBillion((int) upper, b, off);
    }
    return _outputFullBillion((int) v, b, off);
}","int","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.outputLong(long,char[],int).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput.outputLong(long,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.outputLong(long,char[],int).b","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberOutput.outputLong(long,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.outputLong(long,char[],int).off","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberOutput.outputLong(long,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.outputLong(long,byte[],int)","Method","No Comment","public static int outputLong(long v, byte[] b, int off) {
    if (v < 0L) {
        if (v > MIN_INT_AS_LONG) {
            return outputInt((int) v, b, off);
        }
        if (v == Long.MIN_VALUE) {
            return _outputSmallestL(b, off);
        }
        b[off++] = '-';
        v = -v;
    } else {
        if (v <= MAX_INT_AS_LONG) {
            return outputInt((int) v, b, off);
        }
    }
    // Ok, let's separate last 9 digits (3 x full sets of 3)
    long upper = v / BILLION_L;
    v -= (upper * BILLION_L);
    // two integers?
    if (upper < BILLION_L) {
        off = _outputUptoBillion((int) upper, b, off);
    } else {
        // no, two ints and bits; hi may be about 16 or so
        long hi = upper / BILLION_L;
        upper -= (hi * BILLION_L);
        off = _leading3((int) hi, b, off);
        off = _outputFullBillion((int) upper, b, off);
    }
    return _outputFullBillion((int) v, b, off);
}","int","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.outputLong(long,byte[],int).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput.outputLong(long,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.outputLong(long,byte[],int).b","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberOutput.outputLong(long,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.outputLong(long,byte[],int).off","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberOutput.outputLong(long,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.divBy1000(int)","Method","* Optimized code for integer division by 1000; typically 50% higher
     * throughput for calculation
     *
     * @since 2.17","static int divBy1000(int number) {
    return (int) (number * 274_877_907L >>> 38);
}","int","static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.divBy1000(int).number","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput.divBy1000(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.toString(int)","Method","!!! 05-Aug-2008, tatus: Any ways to further optimize
     *   these? (or need: only called by diagnostics methods?)","public static String toString(int v) {
    // Lookup table for small values
    if (v < sSmallIntStrs.length) {
        if (v >= 0) {
            return sSmallIntStrs[v];
        }
        int v2 = -v - 1;
        if (v2 < sSmallIntStrs2.length) {
            return sSmallIntStrs2[v2];
        }
    }
    return Integer.toString(v);
}","String","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.toString(int).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput.toString(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.toString(long)","Method","No Comment","public static String toString(long v) {
    if (v <= Integer.MAX_VALUE && v >= Integer.MIN_VALUE) {
        return toString((int) v);
    }
    return Long.toString(v);
}","String","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.toString(long).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput.toString(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.toString(double)","Method","* @param v double
     * @return double as a string","public static String toString(final double v) {
    return toString(v, false);
}","String","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.toString(double).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput.toString(double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.toString(double,boolean)","Method","* @param v double
     * @param useFastWriter whether to use Schubfach algorithm to write output (default false)
     * @return double as a string
     * @since 2.14","public static String toString(final double v, final boolean useFastWriter) {
    return useFastWriter ? DoubleToDecimal.toString(v) : Double.toString(v);
}","String","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.toString(double,boolean).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput.toString(double,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.toString(double,boolean).useFastWriter","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberOutput.toString(double,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.toString(float)","Method","* @param v float
     * @return float as a string
     * @since 2.6","public static String toString(final float v) {
    return toString(v, false);
}","String","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.toString(float).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput.toString(float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.toString(float,boolean)","Method","* @param v float
     * @param useFastWriter whether to use Schubfach algorithm to write output (default false)
     * @return float as a string
     * @since 2.14","public static String toString(final float v, final boolean useFastWriter) {
    return useFastWriter ? FloatToDecimal.toString(v) : Float.toString(v);
}","String","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.toString(float,boolean).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput.toString(float,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.toString(float,boolean).useFastWriter","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberOutput.toString(float,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.notFinite(double)","Method","* Helper method to verify whether given {@code double} value is finite
     * (regular rational number} or not (NaN or Infinity).
     *
     * @param value {@code double} value to check
     *
     * @return True if number is NOT finite (is Infinity or NaN); false otherwise
     *
     * Since 2.10","public static boolean notFinite(double value) {
    return !Double.isFinite(value);
}","boolean","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.notFinite(double).value","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput.notFinite(double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.notFinite(float)","Method","* Helper method to verify whether given {@code float} value is finite
     * (regular rational number} or not (NaN or Infinity).
     *
     * @param value {@code float} value to check
     *
     * @return True if number is NOT finite (is Infinity or NaN); false otherwise
     *
     * Since 2.10","public static boolean notFinite(float value) {
    return !Float.isFinite(value);
}","boolean","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput.notFinite(float).value","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput.notFinite(float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputUptoBillion(int,char[],int)","Method","No Comment","private static int _outputUptoBillion(int v, char[] b, int off) {
    if (v < MILLION) {
        // at most 2 triplets...
        if (v < 1000) {
            return _leading3(v, b, off);
        }
        int thousands = divBy1000(v);
        // == value % 1000
        int ones = v - (thousands * 1000);
        return _outputUptoMillion(b, off, thousands, ones);
    }
    int thousands = divBy1000(v);
    // == value % 1000
    int ones = (v - (thousands * 1000));
    int millions = divBy1000(thousands);
    thousands -= (millions * 1000);
    off = _leading3(millions, b, off);
    int enc = TRIPLET_TO_CHARS[thousands];
    b[off++] = (char) (enc >> 16);
    b[off++] = (char) ((enc >> 8) & 0x7F);
    b[off++] = (char) (enc & 0x7F);
    enc = TRIPLET_TO_CHARS[ones];
    b[off++] = (char) (enc >> 16);
    b[off++] = (char) ((enc >> 8) & 0x7F);
    b[off++] = (char) (enc & 0x7F);
    return off;
}","int","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputUptoBillion(int,char[],int).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputUptoBillion(int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputUptoBillion(int,char[],int).b","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputUptoBillion(int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputUptoBillion(int,char[],int).off","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputUptoBillion(int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputFullBillion(int,char[],int)","Method","No Comment","private static int _outputFullBillion(int v, char[] b, int off) {
    int thousands = divBy1000(v);
    // == value % 1000
    int ones = (v - (thousands * 1000));
    int millions = divBy1000(thousands);
    int enc = TRIPLET_TO_CHARS[millions];
    b[off++] = (char) (enc >> 16);
    b[off++] = (char) ((enc >> 8) & 0x7F);
    b[off++] = (char) (enc & 0x7F);
    thousands -= (millions * 1000);
    enc = TRIPLET_TO_CHARS[thousands];
    b[off++] = (char) (enc >> 16);
    b[off++] = (char) ((enc >> 8) & 0x7F);
    b[off++] = (char) (enc & 0x7F);
    enc = TRIPLET_TO_CHARS[ones];
    b[off++] = (char) (enc >> 16);
    b[off++] = (char) ((enc >> 8) & 0x7F);
    b[off++] = (char) (enc & 0x7F);
    return off;
}","int","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputFullBillion(int,char[],int).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputFullBillion(int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputFullBillion(int,char[],int).b","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputFullBillion(int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputFullBillion(int,char[],int).off","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputFullBillion(int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputUptoBillion(int,byte[],int)","Method","No Comment","private static int _outputUptoBillion(int v, byte[] b, int off) {
    if (v < MILLION) {
        // at most 2 triplets...
        if (v < 1000) {
            return _leading3(v, b, off);
        }
        int thousands = divBy1000(v);
        // == value % 1000
        int ones = v - (thousands * 1000);
        return _outputUptoMillion(b, off, thousands, ones);
    }
    int thousands = divBy1000(v);
    // == value % 1000
    int ones = (v - (thousands * 1000));
    int millions = divBy1000(thousands);
    thousands -= (millions * 1000);
    off = _leading3(millions, b, off);
    int enc = TRIPLET_TO_CHARS[thousands];
    b[off++] = (byte) (enc >> 16);
    b[off++] = (byte) (enc >> 8);
    b[off++] = (byte) enc;
    enc = TRIPLET_TO_CHARS[ones];
    b[off++] = (byte) (enc >> 16);
    b[off++] = (byte) (enc >> 8);
    b[off++] = (byte) enc;
    return off;
}","int","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputUptoBillion(int,byte[],int).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputUptoBillion(int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputUptoBillion(int,byte[],int).b","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputUptoBillion(int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputUptoBillion(int,byte[],int).off","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputUptoBillion(int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputFullBillion(int,byte[],int)","Method","No Comment","private static int _outputFullBillion(int v, byte[] b, int off) {
    int thousands = divBy1000(v);
    // == value % 1000
    int ones = (v - (thousands * 1000));
    int millions = divBy1000(thousands);
    thousands -= (millions * 1000);
    int enc = TRIPLET_TO_CHARS[millions];
    b[off++] = (byte) (enc >> 16);
    b[off++] = (byte) (enc >> 8);
    b[off++] = (byte) enc;
    enc = TRIPLET_TO_CHARS[thousands];
    b[off++] = (byte) (enc >> 16);
    b[off++] = (byte) (enc >> 8);
    b[off++] = (byte) enc;
    enc = TRIPLET_TO_CHARS[ones];
    b[off++] = (byte) (enc >> 16);
    b[off++] = (byte) (enc >> 8);
    b[off++] = (byte) enc;
    return off;
}","int","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputFullBillion(int,byte[],int).v","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputFullBillion(int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputFullBillion(int,byte[],int).b","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputFullBillion(int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputFullBillion(int,byte[],int).off","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputFullBillion(int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputUptoMillion(char[],int,int,int)","Method","No Comment","private static int _outputUptoMillion(char[] b, int off, int thousands, int ones) {
    int enc = TRIPLET_TO_CHARS[thousands];
    if (thousands > 9) {
        if (thousands > 99) {
            b[off++] = (char) (enc >> 16);
        }
        b[off++] = (char) ((enc >> 8) & 0x7F);
    }
    b[off++] = (char) (enc & 0x7F);
    // and then full
    enc = TRIPLET_TO_CHARS[ones];
    b[off++] = (char) (enc >> 16);
    b[off++] = (char) ((enc >> 8) & 0x7F);
    b[off++] = (char) (enc & 0x7F);
    return off;
}","int","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputUptoMillion(char[],int,int,int).b","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputUptoMillion(char[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputUptoMillion(char[],int,int,int).off","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputUptoMillion(char[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputUptoMillion(char[],int,int,int).thousands","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputUptoMillion(char[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputUptoMillion(char[],int,int,int).ones","Parameter_4","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputUptoMillion(char[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputUptoMillion(byte[],int,int,int)","Method","No Comment","private static int _outputUptoMillion(byte[] b, int off, int thousands, int ones) {
    int enc = TRIPLET_TO_CHARS[thousands];
    if (thousands > 9) {
        if (thousands > 99) {
            b[off++] = (byte) (enc >> 16);
        }
        b[off++] = (byte) (enc >> 8);
    }
    b[off++] = (byte) enc;
    // and then full
    enc = TRIPLET_TO_CHARS[ones];
    b[off++] = (byte) (enc >> 16);
    b[off++] = (byte) (enc >> 8);
    b[off++] = (byte) enc;
    return off;
}","int","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputUptoMillion(byte[],int,int,int).b","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputUptoMillion(byte[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputUptoMillion(byte[],int,int,int).off","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputUptoMillion(byte[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputUptoMillion(byte[],int,int,int).thousands","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputUptoMillion(byte[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputUptoMillion(byte[],int,int,int).ones","Parameter_4","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputUptoMillion(byte[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._leading3(int,char[],int)","Method","No Comment","private static int _leading3(int t, char[] b, int off) {
    int enc = TRIPLET_TO_CHARS[t];
    if (t > 9) {
        if (t > 99) {
            b[off++] = (char) (enc >> 16);
        }
        b[off++] = (char) ((enc >> 8) & 0x7F);
    }
    b[off++] = (char) (enc & 0x7F);
    return off;
}","int","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._leading3(int,char[],int).t","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput._leading3(int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._leading3(int,char[],int).b","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberOutput._leading3(int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._leading3(int,char[],int).off","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberOutput._leading3(int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._leading3(int,byte[],int)","Method","No Comment","private static int _leading3(int t, byte[] b, int off) {
    int enc = TRIPLET_TO_CHARS[t];
    if (t > 9) {
        if (t > 99) {
            b[off++] = (byte) (enc >> 16);
        }
        b[off++] = (byte) (enc >> 8);
    }
    b[off++] = (byte) enc;
    return off;
}","int","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._leading3(int,byte[],int).t","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput._leading3(int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._leading3(int,byte[],int).b","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberOutput._leading3(int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._leading3(int,byte[],int).off","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberOutput._leading3(int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._full3(int,char[],int)","Method","No Comment","private static int _full3(int t, char[] b, int off) {
    int enc = TRIPLET_TO_CHARS[t];
    b[off++] = (char) (enc >> 16);
    b[off++] = (char) ((enc >> 8) & 0x7F);
    b[off++] = (char) (enc & 0x7F);
    return off;
}","int","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._full3(int,char[],int).t","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput._full3(int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._full3(int,char[],int).b","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberOutput._full3(int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._full3(int,char[],int).off","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberOutput._full3(int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._full3(int,byte[],int)","Method","No Comment","private static int _full3(int t, byte[] b, int off) {
    int enc = TRIPLET_TO_CHARS[t];
    b[off++] = (byte) (enc >> 16);
    b[off++] = (byte) (enc >> 8);
    b[off++] = (byte) enc;
    return off;
}","int","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._full3(int,byte[],int).t","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput._full3(int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._full3(int,byte[],int).b","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberOutput._full3(int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._full3(int,byte[],int).off","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberOutput._full3(int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputSmallestL(char[],int)","Method","No Comment","private static int _outputSmallestL(char[] b, int off) {
    int len = SMALLEST_LONG.length();
    SMALLEST_LONG.getChars(0, len, b, off);
    return (off + len);
}","int","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputSmallestL(char[],int).b","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputSmallestL(char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputSmallestL(char[],int).off","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputSmallestL(char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputSmallestL(byte[],int)","Method","No Comment","private static int _outputSmallestL(byte[] b, int off) {
    int len = SMALLEST_LONG.length();
    for (int i = 0; i < len; ++i) {
        b[off++] = (byte) SMALLEST_LONG.charAt(i);
    }
    return off;
}","int","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputSmallestL(byte[],int).b","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputSmallestL(byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputSmallestL(byte[],int).off","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputSmallestL(byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputSmallestI(char[],int)","Method","No Comment","private static int _outputSmallestI(char[] b, int off) {
    int len = SMALLEST_INT.length();
    SMALLEST_INT.getChars(0, len, b, off);
    return (off + len);
}","int","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputSmallestI(char[],int).b","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputSmallestI(char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputSmallestI(char[],int).off","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputSmallestI(char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputSmallestI(byte[],int)","Method","No Comment","private static int _outputSmallestI(byte[] b, int off) {
    int len = SMALLEST_INT.length();
    for (int i = 0; i < len; ++i) {
        b[off++] = (byte) SMALLEST_INT.charAt(i);
    }
    return off;
}","int","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputSmallestI(byte[],int).b","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputSmallestI(byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberOutput._outputSmallestI(byte[],int).off","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberOutput._outputSmallestI(byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser","Class","* Internal Jackson Helper class used to implement more optimized parsing of {@link BigDecimal} for REALLY
 * big values (over 500 characters).
 *<p>
 * This class is not meant to be used directly. It is designed to be used by Jackson JSON parsers (and parsers
 * for other Jackson supported data formats). The parsers check for invalid characters and the length of the number.
 * Without these checks, this parser is susceptible to performing badly with invalid inputs. If you need to parse
 * numbers directly, please use JavaBigDecimalParser in <a href=""https://github.com/wrandelshofer/FastDoubleParser"">fastdoubleparser</a>
 * instead.
 *</p>
 *<p>
 * Based on ideas from this
 * <a href=""https://github.com/eobermuhlner/big-math/commit/7a5419aac8b2adba2aa700ccf00197f97b2ad89f"">this
 * git commit</a>.
 *</p>
 *
 * @since 2.13","Class do not obtain Source Code","No return type","public , final ","",""
"com.fasterxml.jackson.core.io.BigDecimalParser.MAX_CHARS_TO_REPORT","Field","No Comment","final static int MAX_CHARS_TO_REPORT = 1000;","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser.SIZE_FOR_SWITCH_TO_FASTDOUBLEPARSER","Field","No Comment","private final static int SIZE_FOR_SWITCH_TO_FASTDOUBLEPARSER = 500;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser.parse(String)","Method","* Internal Jackson method. Please do not use.
     *<p>
     * Note: Caller MUST pre-validate that given String represents a valid representation
     * of {@link BigDecimal} value: parsers in {@code jackson-core} do that; other
     * code must do the same.
     *
     * @param valueStr
     * @return BigDecimal value
     * @throws NumberFormatException","public static BigDecimal parse(String valueStr) {
    try {
        if (valueStr.length() < SIZE_FOR_SWITCH_TO_FASTDOUBLEPARSER) {
            return new BigDecimal(valueStr);
        }
        return JavaBigDecimalParser.parseBigDecimal(valueStr);
        // 20-Aug-2022, tatu: Although ""new BigDecimal(...)"" only throws NumberFormatException
        //    operations by ""parseBigDecimal()"" can throw ""ArithmeticException"", so handle both:
    } catch (ArithmeticException | NumberFormatException e) {
        throw _parseFailure(e, valueStr);
    }
}","BigDecimal","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser.parse(String).valueStr","Parameter_1","Belong to com.fasterxml.jackson.core.io.BigDecimalParser.parse(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser.parse(char[],int,int)","Method","* Internal Jackson method. Please do not use.
     *<p>
     * Note: Caller MUST pre-validate that given String represents a valid representation
     * of {@link BigDecimal} value: parsers in {@code jackson-core} do that; other
     * code must do the same.
     *
     * @return BigDecimal value
     * @throws NumberFormatException","public static BigDecimal parse(final char[] chars, final int off, final int len) {
    try {
        if (len < SIZE_FOR_SWITCH_TO_FASTDOUBLEPARSER) {
            return new BigDecimal(chars, off, len);
        }
        return JavaBigDecimalParser.parseBigDecimal(chars, off, len);
        // 20-Aug-2022, tatu: Although ""new BigDecimal(...)"" only throws NumberFormatException
        //    operations by ""parseBigDecimal()"" can throw ""ArithmeticException"", so handle both:
    } catch (ArithmeticException | NumberFormatException e) {
        throw _parseFailure(e, chars, off, len);
    }
}","BigDecimal","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser.parse(char[],int,int).chars","Parameter_1","Belong to com.fasterxml.jackson.core.io.BigDecimalParser.parse(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser.parse(char[],int,int).off","Parameter_2","Belong to com.fasterxml.jackson.core.io.BigDecimalParser.parse(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser.parse(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.io.BigDecimalParser.parse(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser.parse(char[])","Method","* Internal Jackson method. Please do not use.
     *<p>
     * Note: Caller MUST pre-validate that given String represents a valid representation
     * of {@link BigDecimal} value: parsers in {@code jackson-core} do that; other
     * code must do the same.
     *
     * @param chars
     * @return BigDecimal value
     * @throws NumberFormatException","public static BigDecimal parse(char[] chars) {
    return parse(chars, 0, chars.length);
}","BigDecimal","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser.parse(char[]).chars","Parameter_1","Belong to com.fasterxml.jackson.core.io.BigDecimalParser.parse(char[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser.parseWithFastParser(String)","Method","* Internal Jackson method. Please do not use.
     *<p>
     * Note: Caller MUST pre-validate that given String represents a valid representation
     * of {@link BigDecimal} value: parsers in {@code jackson-core} do that; other
     * code must do the same.
     *
     * @param valueStr
     * @return BigDecimal value
     * @throws NumberFormatException","public static BigDecimal parseWithFastParser(final String valueStr) {
    try {
        return JavaBigDecimalParser.parseBigDecimal(valueStr);
    } catch (ArithmeticException | NumberFormatException e) {
        throw _parseFailure(e, valueStr);
    }
}","BigDecimal","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser.parseWithFastParser(String).valueStr","Parameter_1","Belong to com.fasterxml.jackson.core.io.BigDecimalParser.parseWithFastParser(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser.parseWithFastParser(char[],int,int)","Method","* Internal Jackson method. Please do not use.
     *<p>
     * Note: Caller MUST pre-validate that given String represents a valid representation
     * of {@link BigDecimal} value: parsers in {@code jackson-core} do that; other
     * code must do the same.
     *
     * @return BigDecimal value
     * @throws NumberFormatException","public static BigDecimal parseWithFastParser(final char[] ch, final int off, final int len) {
    try {
        return JavaBigDecimalParser.parseBigDecimal(ch, off, len);
    } catch (ArithmeticException | NumberFormatException e) {
        throw _parseFailure(e, ch, off, len);
    }
}","BigDecimal","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser.parseWithFastParser(char[],int,int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.io.BigDecimalParser.parseWithFastParser(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser.parseWithFastParser(char[],int,int).off","Parameter_2","Belong to com.fasterxml.jackson.core.io.BigDecimalParser.parseWithFastParser(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser.parseWithFastParser(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.io.BigDecimalParser.parseWithFastParser(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser._parseFailure(Exception,String)","Method","No Comment","private static NumberFormatException _parseFailure(Exception e, String fullValue) {
    String desc = e.getMessage();
    // 05-Feb-2021, tatu: Alas, JDK mostly has null message so:
    if (desc == null) {
        desc = ""Not a valid number representation"";
    }
    String valueToReport = _getValueDesc(fullValue);
    return new NumberFormatException(_generateExceptionMessage(valueToReport, desc));
}","NumberFormatException","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser._parseFailure(Exception,String).e","Parameter_1","Belong to com.fasterxml.jackson.core.io.BigDecimalParser._parseFailure(Exception,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser._parseFailure(Exception,String).fullValue","Parameter_2","Belong to com.fasterxml.jackson.core.io.BigDecimalParser._parseFailure(Exception,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser._parseFailure(Exception,char[],int,int)","Method","No Comment","private static NumberFormatException _parseFailure(final Exception e, final char[] array, final int offset, final int len) {
    String desc = e.getMessage();
    // 05-Feb-2021, tatu: Alas, JDK mostly has null message so:
    if (desc == null) {
        desc = ""Not a valid number representation"";
    }
    String valueToReport = _getValueDesc(array, offset, len);
    return new NumberFormatException(_generateExceptionMessage(valueToReport, desc));
}","NumberFormatException","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser._parseFailure(Exception,char[],int,int).e","Parameter_1","Belong to com.fasterxml.jackson.core.io.BigDecimalParser._parseFailure(Exception,char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser._parseFailure(Exception,char[],int,int).array","Parameter_2","Belong to com.fasterxml.jackson.core.io.BigDecimalParser._parseFailure(Exception,char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser._parseFailure(Exception,char[],int,int).offset","Parameter_3","Belong to com.fasterxml.jackson.core.io.BigDecimalParser._parseFailure(Exception,char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser._parseFailure(Exception,char[],int,int).len","Parameter_4","Belong to com.fasterxml.jackson.core.io.BigDecimalParser._parseFailure(Exception,char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser._getValueDesc(String)","Method","No Comment","private static String _getValueDesc(final String fullValue) {
    final int len = fullValue.length();
    if (len <= MAX_CHARS_TO_REPORT) {
        return String.format(""\""%s\"""", fullValue);
    }
    return String.format(""\""%s\"" (truncated to %d chars (from %d))"", fullValue.substring(0, MAX_CHARS_TO_REPORT), MAX_CHARS_TO_REPORT, len);
}","String","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser._getValueDesc(String).fullValue","Parameter_1","Belong to com.fasterxml.jackson.core.io.BigDecimalParser._getValueDesc(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser._getValueDesc(char[],int,int)","Method","No Comment","private static String _getValueDesc(final char[] array, final int offset, final int len) {
    if (len <= MAX_CHARS_TO_REPORT) {
        return String.format(""\""%s\"""", new String(array, offset, len));
    }
    return String.format(""\""%s\"" (truncated to %d chars (from %d))"", new String(array, offset, MAX_CHARS_TO_REPORT), MAX_CHARS_TO_REPORT, len);
}","String","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser._getValueDesc(char[],int,int).array","Parameter_1","Belong to com.fasterxml.jackson.core.io.BigDecimalParser._getValueDesc(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser._getValueDesc(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.io.BigDecimalParser._getValueDesc(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser._getValueDesc(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.io.BigDecimalParser._getValueDesc(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser._generateExceptionMessage(String,String)","Method","No Comment","private static String _generateExceptionMessage(final String valueToReport, final String desc) {
    return String.format(""Value %s can not be deserialized as `java.math.BigDecimal`, reason:  %s"", valueToReport, desc);
}","String","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser._generateExceptionMessage(String,String).valueToReport","Parameter_1","Belong to com.fasterxml.jackson.core.io.BigDecimalParser._generateExceptionMessage(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser._generateExceptionMessage(String,String).desc","Parameter_2","Belong to com.fasterxml.jackson.core.io.BigDecimalParser._generateExceptionMessage(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigDecimalParser.<init>()","Constructor","No Comment","private BigDecimalParser() {
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.DataOutputAsStream","Class","* Helper class to support use of {@link DataOutput} for output, directly,
 * without caller having to provide for implementation.
 *
 * @since 2.8","Class do not obtain Source Code","No return type","public ","java.io.OutputStream",""
"com.fasterxml.jackson.core.io.DataOutputAsStream._output","Field","No Comment","protected final DataOutput _output;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.DataOutputAsStream.write(int)","Method","No Comment","@Override
public void write(int b) throws IOException {
    _output.write(b);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.DataOutputAsStream.write(int).b","Parameter_1","Belong to com.fasterxml.jackson.core.io.DataOutputAsStream.write(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.DataOutputAsStream.write(byte[])","Method","No Comment","@Override
public void write(byte[] b) throws IOException {
    _output.write(b, 0, b.length);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.DataOutputAsStream.write(byte[]).b","Parameter_1","Belong to com.fasterxml.jackson.core.io.DataOutputAsStream.write(byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.DataOutputAsStream.write(byte[],int,int)","Method","No Comment","@Override
public void write(byte[] b, int offset, int length) throws IOException {
    _output.write(b, offset, length);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.DataOutputAsStream.write(byte[],int,int).b","Parameter_1","Belong to com.fasterxml.jackson.core.io.DataOutputAsStream.write(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.DataOutputAsStream.write(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.io.DataOutputAsStream.write(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.DataOutputAsStream.write(byte[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.io.DataOutputAsStream.write(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.DataOutputAsStream.<init>(DataOutput)","Constructor","No Comment","public DataOutputAsStream(DataOutput out) {
    super();
    _output = out;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.DataOutputAsStream.<init>(DataOutput).out","Parameter_1","Belong to com.fasterxml.jackson.core.io.DataOutputAsStream.<init>(DataOutput)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext","Class","* To limit number of configuration and state objects to pass, all
 * contextual objects that need to be passed by the factory to
 * readers and writers are combined under this object. One instance
 * is created for each reader and writer.
 *<p>
 * NOTE: non-final since 2.4, to allow sub-classing.","Class do not obtain Source Code","No return type","public ","","java.lang.AutoCloseable"
"com.fasterxml.jackson.core.io.IOContext._contentReference","Field","* Reference to the source object, which can be used for displaying
     * location information","protected final ContentReference _contentReference;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._sourceRef","Field","* Old, deprecated ""raw"" reference to input source.
     *
     * @deprecated Since 2.13, use {@link #_contentReference} instead","@Deprecated
protected final Object _sourceRef;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._encoding","Field","* Encoding used by the underlying stream, if known.","protected JsonEncoding _encoding;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._managedResource","Field","* Flag that indicates whether underlying input/output source/target
     * object is fully managed by the owner of this context (parser or
     * generator). If true, it is, and is to be closed by parser/generator;
     * if false, calling application has to do closing (unless auto-closing
     * feature is enabled for the parser/generator in question; in which
     * case it acts like the owner).","protected final boolean _managedResource;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._bufferRecycler","Field","* Recycler used for actual allocation/deallocation/reuse","protected final BufferRecycler _bufferRecycler;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._releaseRecycler","Field","* Flag that indicates whether this context instance should release
     * configured {@code _bufferRecycler} or not: if it does, it needs to call
     * (via {@link BufferRecycler#releaseToPool()} when closed; if not,
     * should do nothing (recycler life-cycle is externally managed)
     *
     * @since 2.17","protected boolean _releaseRecycler = true;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._streamReadConstraints","Field","* @since 2.15","protected final StreamReadConstraints _streamReadConstraints;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._streamWriteConstraints","Field","* @since 2.16","protected final StreamWriteConstraints _streamWriteConstraints;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._errorReportConfiguration","Field","* @since 2.16","protected final ErrorReportConfiguration _errorReportConfiguration;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._readIOBuffer","Field","* Reference to the allocated I/O buffer for low-level input reading,
     * if any allocated.","protected byte[] _readIOBuffer;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._writeEncodingBuffer","Field","* Reference to the allocated I/O buffer used for low-level
     * encoding-related buffering.","protected byte[] _writeEncodingBuffer;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._base64Buffer","Field","* Reference to the buffer allocated for temporary use with
     * base64 encoding or decoding.","protected byte[] _base64Buffer;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._tokenCBuffer","Field","* Reference to the buffer allocated for tokenization purposes,
     * in which character input is read, and from which it can be
     * further returned.","protected char[] _tokenCBuffer;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._concatCBuffer","Field","* Reference to the buffer allocated for buffering it for
     * output, before being encoded: generally this means concatenating
     * output, then encoding when buffer fills up.","protected char[] _concatCBuffer;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._nameCopyBuffer","Field","* Reference temporary buffer Parser instances need if calling
     * app decides it wants to access name via 'getTextCharacters' method.
     * Regular text buffer cannot be used as it may contain textual
     * representation of the value token.","protected char[] _nameCopyBuffer;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._closed","Field","No Comment","private boolean _closed = false;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.markBufferRecyclerReleased()","Method","* Method to call to prevent {@link #_bufferRecycler} release upon
     * {@link #close()}: called when {@link #_bufferRecycler} life-cycle is
     * externally managed.
     *
     * @return This context instance, for call chaining
     *
     * @since 2.17","public IOContext markBufferRecyclerReleased() {
    _releaseRecycler = false;
    return this;
}","IOContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.streamReadConstraints()","Method","* @return Constraints to use for streaming reads
     * @since 2.15","public StreamReadConstraints streamReadConstraints() {
    return _streamReadConstraints;
}","StreamReadConstraints","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.streamWriteConstraints()","Method","* @return constraints for streaming writes
     * @since 2.16","public StreamWriteConstraints streamWriteConstraints() {
    return _streamWriteConstraints;
}","StreamWriteConstraints","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.errorReportConfiguration()","Method","* @return Configured {@link ErrorReportConfiguration}, containing configured values for
     * handling error reporting.
     *
     * @since 2.16","public ErrorReportConfiguration errorReportConfiguration() {
    return _errorReportConfiguration;
}","ErrorReportConfiguration","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.setEncoding(JsonEncoding)","Method","No Comment","public void setEncoding(JsonEncoding enc) {
    _encoding = enc;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.setEncoding(JsonEncoding).enc","Parameter_1","Belong to com.fasterxml.jackson.core.io.IOContext.setEncoding(JsonEncoding)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.withEncoding(JsonEncoding)","Method","No Comment","public IOContext withEncoding(JsonEncoding enc) {
    _encoding = enc;
    return this;
}","IOContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.withEncoding(JsonEncoding).enc","Parameter_1","Belong to com.fasterxml.jackson.core.io.IOContext.withEncoding(JsonEncoding)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.getEncoding()","Method","No Comment","public JsonEncoding getEncoding() {
    return _encoding;
}","JsonEncoding","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.isResourceManaged()","Method","No Comment","public boolean isResourceManaged() {
    return _managedResource;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.contentReference()","Method","* Accessor for getting (some) information about input source, mostly
     * usable for error reporting purposes.
     *
     * @return Reference to input source
     *
     * @since 2.13","public ContentReference contentReference() {
    return _contentReference;
}","ContentReference","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.getSourceReference()","Method","* @deprecated Since 2.13, use {@link #contentReference()} instead
     * @return ""Raw"" source reference","@Deprecated
public Object getSourceReference() {
    return _sourceRef;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.bufferRecycler()","Method","@since 2.17","public BufferRecycler bufferRecycler() {
    return _bufferRecycler;
}","BufferRecycler","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.constructTextBuffer()","Method","No Comment","public TextBuffer constructTextBuffer() {
    return new TextBuffer(_bufferRecycler);
}","TextBuffer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.constructReadConstrainedTextBuffer()","Method","No Comment","public TextBuffer constructReadConstrainedTextBuffer() {
    return new ReadConstrainedTextBuffer(_streamReadConstraints, _bufferRecycler);
}","TextBuffer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.allocReadIOBuffer()","Method","* Method for recycling or allocation byte buffer of ""read I/O"" type.
     *<p>
     * Note: the method can only be called once during its life cycle.
     * This is to protect against accidental sharing.
     *
     * @return Allocated or recycled byte buffer","public byte[] allocReadIOBuffer() {
    _verifyAlloc(_readIOBuffer);
    return (_readIOBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_READ_IO_BUFFER));
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.allocReadIOBuffer(int)","Method","* Variant of {@link #allocReadIOBuffer()} that specifies smallest acceptable
     * buffer size.
     *
     * @param minSize Minimum size of the buffer to recycle or allocate
     *
     * @return Allocated or recycled byte buffer
     *
     * @since 2.4","public byte[] allocReadIOBuffer(int minSize) {
    _verifyAlloc(_readIOBuffer);
    return (_readIOBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_READ_IO_BUFFER, minSize));
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.allocReadIOBuffer(int).minSize","Parameter_1","Belong to com.fasterxml.jackson.core.io.IOContext.allocReadIOBuffer(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.allocWriteEncodingBuffer()","Method","* Method for recycling or allocation byte buffer of ""write encoding"" type.
     *<p>
     * Note: the method can only be called once during its life cycle.
     * This is to protect against accidental sharing.
     *
     * @return Allocated or recycled byte buffer","public byte[] allocWriteEncodingBuffer() {
    _verifyAlloc(_writeEncodingBuffer);
    return (_writeEncodingBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_WRITE_ENCODING_BUFFER));
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.allocWriteEncodingBuffer(int)","Method","* Variant of {@link #allocWriteEncodingBuffer()} that specifies smallest acceptable
     * buffer size.
     *
     * @param minSize Minimum size of the buffer to recycle or allocate
     *
     * @return Allocated or recycled byte buffer
     *
     * @since 2.4","public byte[] allocWriteEncodingBuffer(int minSize) {
    _verifyAlloc(_writeEncodingBuffer);
    return (_writeEncodingBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_WRITE_ENCODING_BUFFER, minSize));
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.allocWriteEncodingBuffer(int).minSize","Parameter_1","Belong to com.fasterxml.jackson.core.io.IOContext.allocWriteEncodingBuffer(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.allocBase64Buffer()","Method","* Method for recycling or allocation byte buffer of ""base 64 encode/decode"" type.
     *<p>
     * Note: the method can only be called once during its life cycle.
     * This is to protect against accidental sharing.
     *
     * @return Allocated or recycled byte buffer","public byte[] allocBase64Buffer() {
    _verifyAlloc(_base64Buffer);
    return (_base64Buffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_BASE64_CODEC_BUFFER));
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.allocBase64Buffer(int)","Method","* Variant of {@link #allocBase64Buffer()} that specifies smallest acceptable
     * buffer size.
     *
     * @param minSize Minimum size of the buffer to recycle or allocate
     *
     * @return Allocated or recycled byte buffer
     *
     * @since 2.9","public byte[] allocBase64Buffer(int minSize) {
    _verifyAlloc(_base64Buffer);
    return (_base64Buffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_BASE64_CODEC_BUFFER, minSize));
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.allocBase64Buffer(int).minSize","Parameter_1","Belong to com.fasterxml.jackson.core.io.IOContext.allocBase64Buffer(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.allocTokenBuffer()","Method","No Comment","public char[] allocTokenBuffer() {
    _verifyAlloc(_tokenCBuffer);
    return (_tokenCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_TOKEN_BUFFER));
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.allocTokenBuffer(int)","Method","@since 2.4","public char[] allocTokenBuffer(int minSize) {
    _verifyAlloc(_tokenCBuffer);
    return (_tokenCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_TOKEN_BUFFER, minSize));
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.allocTokenBuffer(int).minSize","Parameter_1","Belong to com.fasterxml.jackson.core.io.IOContext.allocTokenBuffer(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.allocConcatBuffer()","Method","No Comment","public char[] allocConcatBuffer() {
    _verifyAlloc(_concatCBuffer);
    return (_concatCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_CONCAT_BUFFER));
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.allocNameCopyBuffer(int)","Method","No Comment","public char[] allocNameCopyBuffer(int minSize) {
    _verifyAlloc(_nameCopyBuffer);
    return (_nameCopyBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_NAME_COPY_BUFFER, minSize));
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.allocNameCopyBuffer(int).minSize","Parameter_1","Belong to com.fasterxml.jackson.core.io.IOContext.allocNameCopyBuffer(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.releaseReadIOBuffer(byte[])","Method","* Method to call when all the processing buffers can be safely
     * recycled.
     *
     * @param buf Buffer instance to release (return for recycling)","public void releaseReadIOBuffer(byte[] buf) {
    if (buf != null) {
        // Let's do sanity checks to ensure once-and-only-once release,
        // as well as avoiding trying to release buffers not owned
        _verifyRelease(buf, _readIOBuffer);
        _readIOBuffer = null;
        _bufferRecycler.releaseByteBuffer(BufferRecycler.BYTE_READ_IO_BUFFER, buf);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.releaseReadIOBuffer(byte[]).buf","Parameter_1","Belong to com.fasterxml.jackson.core.io.IOContext.releaseReadIOBuffer(byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.releaseWriteEncodingBuffer(byte[])","Method","No Comment","public void releaseWriteEncodingBuffer(byte[] buf) {
    if (buf != null) {
        // Let's do sanity checks to ensure once-and-only-once release,
        // as well as avoiding trying to release buffers not owned
        _verifyRelease(buf, _writeEncodingBuffer);
        _writeEncodingBuffer = null;
        _bufferRecycler.releaseByteBuffer(BufferRecycler.BYTE_WRITE_ENCODING_BUFFER, buf);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.releaseWriteEncodingBuffer(byte[]).buf","Parameter_1","Belong to com.fasterxml.jackson.core.io.IOContext.releaseWriteEncodingBuffer(byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.releaseBase64Buffer(byte[])","Method","No Comment","public void releaseBase64Buffer(byte[] buf) {
    if (buf != null) {
        // sanity checks, release once-and-only-once, must be one owned
        _verifyRelease(buf, _base64Buffer);
        _base64Buffer = null;
        _bufferRecycler.releaseByteBuffer(BufferRecycler.BYTE_BASE64_CODEC_BUFFER, buf);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.releaseBase64Buffer(byte[]).buf","Parameter_1","Belong to com.fasterxml.jackson.core.io.IOContext.releaseBase64Buffer(byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.releaseTokenBuffer(char[])","Method","No Comment","public void releaseTokenBuffer(char[] buf) {
    if (buf != null) {
        _verifyRelease(buf, _tokenCBuffer);
        _tokenCBuffer = null;
        _bufferRecycler.releaseCharBuffer(BufferRecycler.CHAR_TOKEN_BUFFER, buf);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.releaseTokenBuffer(char[]).buf","Parameter_1","Belong to com.fasterxml.jackson.core.io.IOContext.releaseTokenBuffer(char[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.releaseConcatBuffer(char[])","Method","No Comment","public void releaseConcatBuffer(char[] buf) {
    if (buf != null) {
        // 14-Jan-2014, tatu: Let's actually allow upgrade of the original buffer.
        _verifyRelease(buf, _concatCBuffer);
        _concatCBuffer = null;
        _bufferRecycler.releaseCharBuffer(BufferRecycler.CHAR_CONCAT_BUFFER, buf);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.releaseConcatBuffer(char[]).buf","Parameter_1","Belong to com.fasterxml.jackson.core.io.IOContext.releaseConcatBuffer(char[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.releaseNameCopyBuffer(char[])","Method","No Comment","public void releaseNameCopyBuffer(char[] buf) {
    if (buf != null) {
        // 14-Jan-2014, tatu: Let's actually allow upgrade of the original buffer.
        _verifyRelease(buf, _nameCopyBuffer);
        _nameCopyBuffer = null;
        _bufferRecycler.releaseCharBuffer(BufferRecycler.CHAR_NAME_COPY_BUFFER, buf);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.releaseNameCopyBuffer(char[]).buf","Parameter_1","Belong to com.fasterxml.jackson.core.io.IOContext.releaseNameCopyBuffer(char[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._verifyAlloc(Object)","Method","No Comment","protected final void _verifyAlloc(Object buffer) {
    if (buffer != null) {
        throw new IllegalStateException(""Trying to call same allocXxx() method second time"");
    }
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._verifyAlloc(Object).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.io.IOContext._verifyAlloc(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._verifyRelease(byte[],byte[])","Method","No Comment","protected final void _verifyRelease(byte[] toRelease, byte[] src) {
    // 07-Mar-2016, tatu: As per [core#255], only prevent shrinking of buffer
    if ((toRelease != src) && (toRelease.length < src.length)) {
        throw wrongBuf();
    }
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._verifyRelease(byte[],byte[]).toRelease","Parameter_1","Belong to com.fasterxml.jackson.core.io.IOContext._verifyRelease(byte[],byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._verifyRelease(byte[],byte[]).src","Parameter_2","Belong to com.fasterxml.jackson.core.io.IOContext._verifyRelease(byte[],byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._verifyRelease(char[],char[])","Method","No Comment","protected final void _verifyRelease(char[] toRelease, char[] src) {
    // 07-Mar-2016, tatu: As per [core#255], only prevent shrinking of buffer
    if ((toRelease != src) && (toRelease.length < src.length)) {
        throw wrongBuf();
    }
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._verifyRelease(char[],char[]).toRelease","Parameter_1","Belong to com.fasterxml.jackson.core.io.IOContext._verifyRelease(char[],char[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext._verifyRelease(char[],char[]).src","Parameter_2","Belong to com.fasterxml.jackson.core.io.IOContext._verifyRelease(char[],char[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.wrongBuf()","Method","No Comment","private IllegalArgumentException wrongBuf() {
    // sanity check failed; trying to return different, smaller buffer.
    return new IllegalArgumentException(""Trying to release buffer smaller than original"");
}","IllegalArgumentException","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.close()","Method","No Comment","@Override
public void close() {
    if (!_closed) {
        _closed = true;
        if (_releaseRecycler) {
            _releaseRecycler = false;
            _bufferRecycler.releaseToPool();
        }
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,StreamWriteConstraints,ErrorReportConfiguration,BufferRecycler,ContentReference,boolean)","Constructor","* Main constructor to use.
     *
     * @param src constraints for streaming reads
     * @param swc constraints for streaming writes
     * @param br BufferRecycler to use, if any ({@code null} if none)
     * @param contentRef Input source reference for location reporting
     * @param managedResource Whether input source is managed (owned) by Jackson library
     * @param erc Error report configuration to use
     *
     * @since 2.16","public IOContext(StreamReadConstraints src, StreamWriteConstraints swc, ErrorReportConfiguration erc, BufferRecycler br, ContentReference contentRef, boolean managedResource) {
    _streamReadConstraints = src;
    _streamWriteConstraints = swc;
    _errorReportConfiguration = erc;
    _bufferRecycler = br;
    _contentReference = contentRef;
    _sourceRef = contentRef.getRawContent();
    _managedResource = managedResource;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,StreamWriteConstraints,ErrorReportConfiguration,BufferRecycler,ContentReference,boolean).src","Parameter_1","Belong to com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,StreamWriteConstraints,ErrorReportConfiguration,BufferRecycler,ContentReference,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,StreamWriteConstraints,ErrorReportConfiguration,BufferRecycler,ContentReference,boolean).swc","Parameter_2","Belong to com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,StreamWriteConstraints,ErrorReportConfiguration,BufferRecycler,ContentReference,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,StreamWriteConstraints,ErrorReportConfiguration,BufferRecycler,ContentReference,boolean).erc","Parameter_3","Belong to com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,StreamWriteConstraints,ErrorReportConfiguration,BufferRecycler,ContentReference,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,StreamWriteConstraints,ErrorReportConfiguration,BufferRecycler,ContentReference,boolean).br","Parameter_4","Belong to com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,StreamWriteConstraints,ErrorReportConfiguration,BufferRecycler,ContentReference,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,StreamWriteConstraints,ErrorReportConfiguration,BufferRecycler,ContentReference,boolean).contentRef","Parameter_5","Belong to com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,StreamWriteConstraints,ErrorReportConfiguration,BufferRecycler,ContentReference,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,StreamWriteConstraints,ErrorReportConfiguration,BufferRecycler,ContentReference,boolean).managedResource","Parameter_6","Belong to com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,StreamWriteConstraints,ErrorReportConfiguration,BufferRecycler,ContentReference,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,BufferRecycler,ContentReference,boolean)","Constructor","* Deprecated legacy constructor.
     *
     * @param src constraints for streaming reads
     * @param br BufferRecycler to use, if any ({@code null} if none)
     * @param contentRef Input source reference for location reporting
     * @param managedResource Whether input source is managed (owned) by Jackson library
     *
     * @since 2.15
     * @deprecated Since 2.16. Use {@link #IOContext(StreamReadConstraints, StreamWriteConstraints,
     * ErrorReportConfiguration, BufferRecycler, ContentReference, boolean)} instead.","@Deprecated
public IOContext(StreamReadConstraints src, BufferRecycler br, ContentReference contentRef, boolean managedResource) {
    this(src, StreamWriteConstraints.defaults(), ErrorReportConfiguration.defaults(), br, contentRef, managedResource);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,BufferRecycler,ContentReference,boolean).src","Parameter_1","Belong to com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,BufferRecycler,ContentReference,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,BufferRecycler,ContentReference,boolean).br","Parameter_2","Belong to com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,BufferRecycler,ContentReference,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,BufferRecycler,ContentReference,boolean).contentRef","Parameter_3","Belong to com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,BufferRecycler,ContentReference,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,BufferRecycler,ContentReference,boolean).managedResource","Parameter_4","Belong to com.fasterxml.jackson.core.io.IOContext.<init>(StreamReadConstraints,BufferRecycler,ContentReference,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.<init>(BufferRecycler,ContentReference,boolean)","Constructor","* Deprecated legacy constructor.
     *
     * @param br BufferRecycler to use, if any ({@code null} if none)
     * @param contentRef Input source reference for location reporting
     * @param managedResource Whether input source is managed (owned) by Jackson library
     *
     * @since 2.13
     * @deprecated Since 2.15. Use {@link #IOContext(StreamReadConstraints, StreamWriteConstraints,
     * ErrorReportConfiguration, BufferRecycler, ContentReference, boolean)} instead.","// since 2.15
@Deprecated
public IOContext(BufferRecycler br, ContentReference contentRef, boolean managedResource) {
    this(StreamReadConstraints.defaults(), StreamWriteConstraints.defaults(), ErrorReportConfiguration.defaults(), br, contentRef, managedResource);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.<init>(BufferRecycler,ContentReference,boolean).br","Parameter_1","Belong to com.fasterxml.jackson.core.io.IOContext.<init>(BufferRecycler,ContentReference,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.<init>(BufferRecycler,ContentReference,boolean).contentRef","Parameter_2","Belong to com.fasterxml.jackson.core.io.IOContext.<init>(BufferRecycler,ContentReference,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.<init>(BufferRecycler,ContentReference,boolean).managedResource","Parameter_3","Belong to com.fasterxml.jackson.core.io.IOContext.<init>(BufferRecycler,ContentReference,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.<init>(BufferRecycler,Object,boolean)","Constructor","No Comment","// since 2.13
@Deprecated
public IOContext(BufferRecycler br, Object rawContent, boolean managedResource) {
    this(br, ContentReference.rawReference(rawContent), managedResource);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.<init>(BufferRecycler,Object,boolean).br","Parameter_1","Belong to com.fasterxml.jackson.core.io.IOContext.<init>(BufferRecycler,Object,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.<init>(BufferRecycler,Object,boolean).rawContent","Parameter_2","Belong to com.fasterxml.jackson.core.io.IOContext.<init>(BufferRecycler,Object,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.IOContext.<init>(BufferRecycler,Object,boolean).managedResource","Parameter_3","Belong to com.fasterxml.jackson.core.io.IOContext.<init>(BufferRecycler,Object,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.InputDecorator","Abstract Class","* Handler class that can be used to decorate input sources.
 * Typical use is to use a filter abstraction (filtered stream,
 * reader) around original input source, and apply additional
 * processing during read operations.","Abstract Class do not obtain Source Code","No return type","public , abstract ","","java.io.Serializable"
"com.fasterxml.jackson.core.io.InputDecorator.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,InputStream)","Abstract Method","* Method called by {@link com.fasterxml.jackson.core.JsonFactory} instance when
     * creating parser given an {@link InputStream}, when this decorator
     * has been registered.
     *
     * @param ctxt IO context in use (provides access to declared encoding).
     *   NOTE: at this point context may not have all information initialized;
     *   specifically auto-detected encoding is only available once parsing starts,
     *   which may occur only after this method is called.
     * @param in Original input source
     *
     * @return InputStream to use; either 'in' as is, or decorator
     *   version that typically delogates to 'in'
     *
     * @throws IOException if construction of {@link InputStream} fails","public abstract InputStream decorate(IOContext ctxt, InputStream in) throws IOException;","InputStream","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,InputStream).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,InputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,InputStream).in","Parameter_2","Belong to com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,InputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,byte[],int,int)","Abstract Method","* Method called by {@link com.fasterxml.jackson.core.JsonFactory} instance when
     * creating parser on given ""raw"" byte source.
     * Method can either construct a {@link InputStream} for reading; or return
     * null to indicate that no wrapping should occur.
     *
     * @param ctxt IO context in use (provides access to declared encoding)
     *   NOTE: at this point context may not have all information initialized;
     *   specifically auto-detected encoding is only available once parsing starts,
     *   which may occur only after this method is called.
     * @param src Input buffer that contains contents to parse
     * @param offset Offset of the first available byte in the input buffer
     * @param length Number of bytes available in the input buffer
     *
     * @return Either {@link InputStream} to use as input source; or null to indicate
     *   that contents are to be processed as-is by caller
     *
     * @throws IOException if construction of {@link InputStream} fails","public abstract InputStream decorate(IOContext ctxt, byte[] src, int offset, int length) throws IOException;","InputStream","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,byte[],int,int).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,byte[],int,int).src","Parameter_2","Belong to com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,byte[],int,int).offset","Parameter_3","Belong to com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,byte[],int,int).length","Parameter_4","Belong to com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,DataInput)","Method","* Method called by {@link com.fasterxml.jackson.core.JsonFactory} instance when
     * creating parser given an {@link DataInput}, when this decorator
     * has been registered.
     *<p>
     * Default implementation simply throws {@link UnsupportedOperationException}
     *
     * @param ctxt IO context in use (provides access to declared encoding).
     *   NOTE: at this point context may not have all information initialized;
     *   specifically auto-detected encoding is only available once parsing starts,
     *   which may occur only after this method is called.
     * @param input Original input source
     *
     * @return InputStream to use; either 'input' as is, or decorator
     *   version that typically delogates to 'input'
     *
     * @throws IOException if construction of {@link DataInput} fails
     *
     * @since 2.8","public DataInput decorate(IOContext ctxt, DataInput input) throws IOException {
    throw new UnsupportedOperationException();
}","DataInput","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,DataInput).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,DataInput)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,DataInput).input","Parameter_2","Belong to com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,DataInput)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,Reader)","Abstract Method","* Method called by {@link com.fasterxml.jackson.core.JsonFactory} instance when
     * creating parser given an {@link Reader}, when this decorator
     * has been registered.
     *
     * @param ctxt IO context in use (provides access to declared encoding)
     *   NOTE: at this point context may not have all information initialized;
     *   specifically auto-detected encoding is only available once parsing starts,
     *   which may occur only after this method is called.
     * @param r Original reader
     *
     * @return Reader to use; either passed in argument, or something that
     *   calls it (for example, a {@link FilterReader})
     *
     * @throws IOException if construction of {@link Reader} fails","public abstract Reader decorate(IOContext ctxt, Reader r) throws IOException;","Reader","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,Reader).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,Reader)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,Reader).r","Parameter_2","Belong to com.fasterxml.jackson.core.io.InputDecorator.decorate(IOContext,Reader)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigIntegerParser","Class","* Helper class used to implement more optimized parsing of {@link BigInteger} for REALLY
 * big values (over 500 characters).
 *
 * @since 2.15","Class do not obtain Source Code","No return type","public , final ","",""
"com.fasterxml.jackson.core.io.BigIntegerParser.parseWithFastParser(String)","Method","No Comment","public static BigInteger parseWithFastParser(final String valueStr) {
    try {
        return JavaBigIntegerParser.parseBigInteger(valueStr);
    } catch (NumberFormatException nfe) {
        final String reportNum = valueStr.length() <= MAX_CHARS_TO_REPORT ? valueStr : valueStr.substring(0, MAX_CHARS_TO_REPORT) + "" [truncated]"";
        throw new NumberFormatException(""Value \"""" + reportNum + ""\"" can not be represented as `java.math.BigInteger`, reason: "" + nfe.getMessage());
    }
}","BigInteger","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigIntegerParser.parseWithFastParser(String).valueStr","Parameter_1","Belong to com.fasterxml.jackson.core.io.BigIntegerParser.parseWithFastParser(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigIntegerParser.parseWithFastParser(String,int)","Method","No Comment","public static BigInteger parseWithFastParser(final String valueStr, final int radix) {
    try {
        return JavaBigIntegerParser.parseBigInteger(valueStr, radix);
    } catch (NumberFormatException nfe) {
        final String reportNum = valueStr.length() <= MAX_CHARS_TO_REPORT ? valueStr : valueStr.substring(0, MAX_CHARS_TO_REPORT) + "" [truncated]"";
        throw new NumberFormatException(""Value \"""" + reportNum + ""\"" can not be represented as `java.math.BigInteger` with radix "" + radix + "", reason: "" + nfe.getMessage());
    }
}","BigInteger","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigIntegerParser.parseWithFastParser(String,int).valueStr","Parameter_1","Belong to com.fasterxml.jackson.core.io.BigIntegerParser.parseWithFastParser(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigIntegerParser.parseWithFastParser(String,int).radix","Parameter_2","Belong to com.fasterxml.jackson.core.io.BigIntegerParser.parseWithFastParser(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.BigIntegerParser.<init>()","Constructor","No Comment","private BigIntegerParser() {
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter","Class","* Efficient alternative to {@link StringWriter}, based on using segmented
 * internal buffer. Initial input buffer is also recyclable.
 *<p>
 * This class is most useful when serializing JSON content as a String:
 * if so, instance of this class can be given as the writer to
 * <code>JsonGenerator</code>.","Class do not obtain Source Code","No return type","public , final ","java.io.Writer","com.fasterxml.jackson.core.util.BufferRecycler.Gettable"
"com.fasterxml.jackson.core.io.SegmentedStringWriter._buffer","Field","No Comment","final private TextBuffer _buffer;","No return type","final , private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.bufferRecycler()","Method","No Comment","@Override
public BufferRecycler bufferRecycler() {
    return _buffer.bufferRecycler();
}","BufferRecycler","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.append(char)","Method","No Comment","@Override
public Writer append(char c) throws IOException {
    write(c);
    return this;
}","Writer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.append(char).c","Parameter_1","Belong to com.fasterxml.jackson.core.io.SegmentedStringWriter.append(char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.append(CharSequence)","Method","No Comment","@Override
public Writer append(CharSequence csq) throws IOException {
    String str = csq.toString();
    _buffer.append(str, 0, str.length());
    return this;
}","Writer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.append(CharSequence).csq","Parameter_1","Belong to com.fasterxml.jackson.core.io.SegmentedStringWriter.append(CharSequence)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.append(CharSequence,int,int)","Method","No Comment","@Override
public Writer append(CharSequence csq, int start, int end) throws IOException {
    String str = csq.subSequence(start, end).toString();
    _buffer.append(str, 0, str.length());
    return this;
}","Writer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.append(CharSequence,int,int).csq","Parameter_1","Belong to com.fasterxml.jackson.core.io.SegmentedStringWriter.append(CharSequence,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.append(CharSequence,int,int).start","Parameter_2","Belong to com.fasterxml.jackson.core.io.SegmentedStringWriter.append(CharSequence,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.append(CharSequence,int,int).end","Parameter_3","Belong to com.fasterxml.jackson.core.io.SegmentedStringWriter.append(CharSequence,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.close()","Method","No Comment","@Override
public void close() // NOP
{
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.flush()","Method","No Comment","@Override
public void flush() // NOP
{
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.write(char[])","Method","No Comment","@Override
public void write(char[] cbuf) throws IOException {
    _buffer.append(cbuf, 0, cbuf.length);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.write(char[]).cbuf","Parameter_1","Belong to com.fasterxml.jackson.core.io.SegmentedStringWriter.write(char[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.write(char[],int,int)","Method","No Comment","@Override
public void write(char[] cbuf, int off, int len) throws IOException {
    _buffer.append(cbuf, off, len);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.write(char[],int,int).cbuf","Parameter_1","Belong to com.fasterxml.jackson.core.io.SegmentedStringWriter.write(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.write(char[],int,int).off","Parameter_2","Belong to com.fasterxml.jackson.core.io.SegmentedStringWriter.write(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.write(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.io.SegmentedStringWriter.write(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.write(int)","Method","No Comment","@Override
public void write(int c) throws IOException {
    _buffer.append((char) c);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.write(int).c","Parameter_1","Belong to com.fasterxml.jackson.core.io.SegmentedStringWriter.write(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.write(String)","Method","No Comment","@Override
public void write(String str) throws IOException {
    _buffer.append(str, 0, str.length());
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.write(String).str","Parameter_1","Belong to com.fasterxml.jackson.core.io.SegmentedStringWriter.write(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.write(String,int,int)","Method","No Comment","@Override
public void write(String str, int off, int len) throws IOException {
    _buffer.append(str, off, len);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.write(String,int,int).str","Parameter_1","Belong to com.fasterxml.jackson.core.io.SegmentedStringWriter.write(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.write(String,int,int).off","Parameter_2","Belong to com.fasterxml.jackson.core.io.SegmentedStringWriter.write(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.write(String,int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.io.SegmentedStringWriter.write(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.getAndClear()","Method","* Main access method that will construct a String that contains
     * all the contents, release all internal buffers we may have,
     * and return result String.
     * Note that the method is not idempotent -- if called second time,
     * will just return an empty String.
     *
     * @return String that contains all aggregated content
     * @throws IOException if there are general I/O or parse issues, including if the text is too large,
     * see {@link com.fasterxml.jackson.core.StreamReadConstraints.Builder#maxStringLength(int)}","public String getAndClear() throws IOException {
    String result = _buffer.contentsAsString();
    _buffer.releaseBuffers();
    return result;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.<init>(BufferRecycler)","Constructor","No Comment","public SegmentedStringWriter(BufferRecycler br) {
    super();
    _buffer = new TextBuffer(br);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.SegmentedStringWriter.<init>(BufferRecycler).br","Parameter_1","Belong to com.fasterxml.jackson.core.io.SegmentedStringWriter.<init>(BufferRecycler)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference","Class","* Abstraction that encloses information about content being processed --
 * input source or output target, streaming or
 * not -- for the purpose of including pertinent information in
 * location (see {@link com.fasterxml.jackson.core.JsonLocation})
 * objections, most commonly to be printed out as part of {@code Exception}
 * messages.
 *
 * @since 2.13","Class do not obtain Source Code","No return type","public ","","java.io.Serializable"
"com.fasterxml.jackson.core.io.ContentReference.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.UNKNOWN_CONTENT","Field","* Constant that may be used when source/target content is not known
     * (or not exposed).
     *<p>
     * NOTE: As of 2.13 assume to contain Binary content, meaning that no
     * content snippets will be included.","protected final static ContentReference UNKNOWN_CONTENT = new ContentReference(false, null);","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.REDACTED_CONTENT","Field","* As content will be redacted by default in Jackson 2.16 and later,
     * we'll use a new marker reference for slightly different description
     * from ""unknown"", to indicate explicit removal of source/content reference
     * (as opposed to it missing from not being available or so)
     *
     * @since 2.16","protected final static ContentReference REDACTED_CONTENT = new ContentReference(false, null);","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.DEFAULT_MAX_CONTENT_SNIPPET","Field","* Include at most first 500 characters/bytes from contents; should be enough
     * to give context, but not cause unfortunate side effects in things like
     * logs.
     *
     * @since 2.9
     * @deprecated Since 2.16. {@link ErrorReportConfiguration#DEFAULT_MAX_RAW_CONTENT_LENGTH} will be used instead.","@Deprecated
public static final int DEFAULT_MAX_CONTENT_SNIPPET = 500;","No return type","public , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._rawContent","Field","* Reference to the actual underlying content.","protected final transient Object _rawContent;","No return type","protected , final , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._offset","Field","* For static content, indicates offset from the beginning
     * of static array.
     * {@code -1} if not in use.","protected final int _offset;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._length","Field","* For static content, indicates length of content in
     * the static array.
     * {@code -1} if not in use.","protected final int _length;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._isContentTextual","Field","* Marker flag to indicate whether included content is textual or not:
     * this is taken to mean, by default, that a snippet of content may be
     * displayed for exception messages.","protected final boolean _isContentTextual;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._maxRawContentLength","Field","* max raw content to return as configured 
     *
     * @since 2.16","protected final int _maxRawContentLength;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.unknown()","Method","* Accessor for getting a placeholder for cases where actual content
     * is not known (or is not something that system wants to expose).
     *
     * @return Placeholder ""unknown"" (or ""empty"") instance to use instead of
     *    {@code null} reference","public static ContentReference unknown() {
    return UNKNOWN_CONTENT;
}","ContentReference","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.redacted()","Method","* Accessor for getting a placeholder when actual content
     * is not to be exposed: different from {@link #unknown()} where
     * content is not available to be referenced.
     *
     * @return Placeholder instance to use in cases where reference is explicitly
     *   blocked, usually for security reasons.
     *
     * @since 2.16","public static ContentReference redacted() {
    return REDACTED_CONTENT;
}","ContentReference","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object)","Method","* @deprecated Since 2.16. Use {@link #construct(boolean, Object, ErrorReportConfiguration)} instead.","@Deprecated
public static ContentReference construct(boolean isContentTextual, Object rawContent) {
    return new ContentReference(isContentTextual, rawContent, ErrorReportConfiguration.defaults());
}","ContentReference","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object).isContentTextual","Parameter_1","Belong to com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object).rawContent","Parameter_2","Belong to com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,int,int)","Method","* @deprecated Since 2.16. Use {@link #construct(boolean, Object, int, int, ErrorReportConfiguration)} instead.","@Deprecated
public static ContentReference construct(boolean isContentTextual, Object rawContent, int offset, int length) {
    return new ContentReference(isContentTextual, rawContent, offset, length, ErrorReportConfiguration.defaults());
}","ContentReference","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,int,int).isContentTextual","Parameter_1","Belong to com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,int,int).rawContent","Parameter_2","Belong to com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,int,int).offset","Parameter_3","Belong to com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,int,int).length","Parameter_4","Belong to com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,int,int,ErrorReportConfiguration)","Method","* @since 2.16","public static ContentReference construct(boolean isContentTextual, Object rawContent, int offset, int length, ErrorReportConfiguration errorReportConfiguration) {
    return new ContentReference(isContentTextual, rawContent, offset, length, errorReportConfiguration);
}","ContentReference","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,int,int,ErrorReportConfiguration).isContentTextual","Parameter_1","Belong to com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,int,int,ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,int,int,ErrorReportConfiguration).rawContent","Parameter_2","Belong to com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,int,int,ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,int,int,ErrorReportConfiguration).offset","Parameter_3","Belong to com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,int,int,ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,int,int,ErrorReportConfiguration).length","Parameter_4","Belong to com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,int,int,ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,int,int,ErrorReportConfiguration).errorReportConfiguration","Parameter_5","Belong to com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,int,int,ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,ErrorReportConfiguration)","Method","* @since 2.16","public static ContentReference construct(boolean isContentTextual, Object rawContent, ErrorReportConfiguration errorReportConfiguration) {
    return new ContentReference(isContentTextual, rawContent, errorReportConfiguration);
}","ContentReference","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,ErrorReportConfiguration).isContentTextual","Parameter_1","Belong to com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,ErrorReportConfiguration).rawContent","Parameter_2","Belong to com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,ErrorReportConfiguration).errorReportConfiguration","Parameter_3","Belong to com.fasterxml.jackson.core.io.ContentReference.construct(boolean,Object,ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.rawReference(boolean,Object)","Method","* Factory method for legacy code to use for constructing instances to
     * content about which only minimal amount of information is available.
     * Assumed not to contain textual content (no snippet displayed).
     *
     * @param isContentTextual Is raw content assumed to have textual content
     *    ({@code true}) or binary ({@code false})
     * @param rawContent Underlying raw content access
     *
     * @return Instance with minimal information about content (basically just
     *    raw content reference without offsets","public static ContentReference rawReference(boolean isContentTextual, Object rawContent) {
    // Just to avoid russian-doll-nesting, let's:
    if (rawContent instanceof ContentReference) {
        return (ContentReference) rawContent;
    }
    return new ContentReference(isContentTextual, rawContent);
}","ContentReference","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.rawReference(boolean,Object).isContentTextual","Parameter_1","Belong to com.fasterxml.jackson.core.io.ContentReference.rawReference(boolean,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.rawReference(boolean,Object).rawContent","Parameter_2","Belong to com.fasterxml.jackson.core.io.ContentReference.rawReference(boolean,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.rawReference(Object)","Method","No Comment","public static ContentReference rawReference(Object rawContent) {
    return rawReference(false, rawContent);
}","ContentReference","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.rawReference(Object).rawContent","Parameter_1","Belong to com.fasterxml.jackson.core.io.ContentReference.rawReference(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.readObject(ObjectInputStream)","Method","No Comment","private void readObject(ObjectInputStream in) throws IOException {
    // nop: but must override the method
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.readObject(ObjectInputStream).in","Parameter_1","Belong to com.fasterxml.jackson.core.io.ContentReference.readObject(ObjectInputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.writeObject(ObjectOutputStream)","Method","No Comment","private void writeObject(ObjectOutputStream out) throws IOException {
    // nop: but must override the method
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.writeObject(ObjectOutputStream).out","Parameter_1","Belong to com.fasterxml.jackson.core.io.ContentReference.writeObject(ObjectOutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.readResolve()","Method","No Comment","protected Object readResolve() {
    return UNKNOWN_CONTENT;
}","Object","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.hasTextualContent()","Method","No Comment","public boolean hasTextualContent() {
    return _isContentTextual;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.getRawContent()","Method","No Comment","public Object getRawContent() {
    return _rawContent;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.contentOffset()","Method","No Comment","public int contentOffset() {
    return _offset;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.contentLength()","Method","No Comment","public int contentLength() {
    return _length;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.maxRawContentLength()","Method","* Internal accessor, overridable, used for checking length (in units in
     * which content is counted, either bytes or chars) to use for truncation
     * (so as not to include full content for humongous sources or targets)
     *
     * @see ErrorReportConfiguration#getMaxRawContentLength()
     * @return Maximum content snippet to include before truncating","protected int maxRawContentLength() {
    return _maxRawContentLength;
}","int","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.buildSourceDescription()","Method","* Method for constructing a ""source description"" when content represented
     * by this reference is read.
     *
     * @return Description constructed","public String buildSourceDescription() {
    return appendSourceDescription(new StringBuilder(200)).toString();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.appendSourceDescription(StringBuilder)","Method","* Method for appending a ""source description"" when content represented
     * by this reference is read.
     *
     * @param sb StringBuilder to append description to
     *
     * @return StringBuilder passed as argument (for call chaining)","public StringBuilder appendSourceDescription(StringBuilder sb) {
    final Object srcRef = getRawContent();
    if (srcRef == null) {
        if (this == REDACTED_CONTENT) {
            // ugly but...
            sb.append(""REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled)"");
        } else {
            sb.append(""UNKNOWN"");
        }
        return sb;
    }
    // First, figure out what name to use as source type
    Class<?> srcType = (srcRef instanceof Class<?>) ? ((Class<?>) srcRef) : srcRef.getClass();
    String tn = srcType.getName();
    // standard JDK types without package
    if (tn.startsWith(""java."")) {
        tn = srcType.getSimpleName();
    } else if (srcRef instanceof byte[]) {
        // then some other special cases
        tn = ""byte[]"";
    } else if (srcRef instanceof char[]) {
        tn = ""char[]"";
    }
    sb.append('(').append(tn).append(')');
    // and then, include (part of) contents for selected types
    // (never for binary-format data)
    if (hasTextualContent()) {
        String unitStr = "" chars"";
        String trimmed;
        // poor man's tuple...
        final int maxLen = maxRawContentLength();
        int[] offsets = new int[] { contentOffset(), contentLength() };
        if (srcRef instanceof CharSequence) {
            trimmed = _truncate((CharSequence) srcRef, offsets, maxLen);
        } else if (srcRef instanceof char[]) {
            trimmed = _truncate((char[]) srcRef, offsets, maxLen);
        } else if (srcRef instanceof byte[]) {
            trimmed = _truncate((byte[]) srcRef, offsets, maxLen);
            unitStr = "" bytes"";
        } else {
            trimmed = null;
        }
        if (trimmed != null) {
            _append(sb, trimmed);
            if (offsets[1] > maxLen) {
                sb.append(""[truncated "").append(offsets[1] - maxLen).append(unitStr).append(']');
            }
        }
    } else {
        // What should we do with binary content? Indicate length, if possible
        if (srcRef instanceof byte[]) {
            int length = contentLength();
            // -1 is marker for ""till the end"" (should we consider offset then, too?)
            if (length < 0) {
                length = ((byte[]) srcRef).length;
            }
            sb.append('[').append(length).append("" bytes]"");
        }
    }
    return sb;
}","StringBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.appendSourceDescription(StringBuilder).sb","Parameter_1","Belong to com.fasterxml.jackson.core.io.ContentReference.appendSourceDescription(StringBuilder)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._truncate(CharSequence,int[],int)","Method","No Comment","protected String _truncate(CharSequence cs, int[] offsets, int maxSnippetLen) {
    _truncateOffsets(offsets, cs.length());
    final int start = offsets[0];
    final int length = Math.min(offsets[1], maxSnippetLen);
    return cs.subSequence(start, start + length).toString();
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._truncate(CharSequence,int[],int).cs","Parameter_1","Belong to com.fasterxml.jackson.core.io.ContentReference._truncate(CharSequence,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._truncate(CharSequence,int[],int).offsets","Parameter_2","Belong to com.fasterxml.jackson.core.io.ContentReference._truncate(CharSequence,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._truncate(CharSequence,int[],int).maxSnippetLen","Parameter_3","Belong to com.fasterxml.jackson.core.io.ContentReference._truncate(CharSequence,int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._truncate(char[],int[],int)","Method","No Comment","protected String _truncate(char[] cs, int[] offsets, int maxSnippetLen) {
    _truncateOffsets(offsets, cs.length);
    final int start = offsets[0];
    final int length = Math.min(offsets[1], maxSnippetLen);
    return new String(cs, start, length);
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._truncate(char[],int[],int).cs","Parameter_1","Belong to com.fasterxml.jackson.core.io.ContentReference._truncate(char[],int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._truncate(char[],int[],int).offsets","Parameter_2","Belong to com.fasterxml.jackson.core.io.ContentReference._truncate(char[],int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._truncate(char[],int[],int).maxSnippetLen","Parameter_3","Belong to com.fasterxml.jackson.core.io.ContentReference._truncate(char[],int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._truncate(byte[],int[],int)","Method","No Comment","protected String _truncate(byte[] b, int[] offsets, int maxSnippetLen) {
    _truncateOffsets(offsets, b.length);
    final int start = offsets[0];
    final int length = Math.min(offsets[1], maxSnippetLen);
    return new String(b, start, length, StandardCharsets.UTF_8);
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._truncate(byte[],int[],int).b","Parameter_1","Belong to com.fasterxml.jackson.core.io.ContentReference._truncate(byte[],int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._truncate(byte[],int[],int).offsets","Parameter_2","Belong to com.fasterxml.jackson.core.io.ContentReference._truncate(byte[],int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._truncate(byte[],int[],int).maxSnippetLen","Parameter_3","Belong to com.fasterxml.jackson.core.io.ContentReference._truncate(byte[],int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._truncateOffsets(int[],int)","Method","these to fit","protected void _truncateOffsets(int[] offsets, int actualLength) {
    int start = offsets[0];
    // first, move start to be within area
    if (start < 0) {
        // means effectively ""start at beginning""
        start = 0;
    } else if (start >= actualLength) {
        start = actualLength;
    }
    offsets[0] = start;
    // And then ensure that we obey maximum physical length restriction
    int length = offsets[1];
    final int maxLength = actualLength - start;
    if ((length < 0) || (length > maxLength)) {
        offsets[1] = maxLength;
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._truncateOffsets(int[],int).offsets","Parameter_1","Belong to com.fasterxml.jackson.core.io.ContentReference._truncateOffsets(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._truncateOffsets(int[],int).actualLength","Parameter_2","Belong to com.fasterxml.jackson.core.io.ContentReference._truncateOffsets(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._append(StringBuilder,String)","Method","No Comment","protected int _append(StringBuilder sb, String content) {
    sb.append('""');
    // [core#658]: make sure to escape non-printable
    for (int i = 0, end = content.length(); i < end; ++i) {
        // 06-Apr-2021, tatu: Gee... there is no ""Character.isPrintable()"",
        //   and from what I can see things get rather complicated trying
        //   to figure out proper way. Hence, we'll do this
        char ch = content.charAt(i);
        if (!Character.isISOControl(ch) || !_appendEscaped(sb, ch)) {
            sb.append(ch);
        }
    }
    sb.append('""');
    return content.length();
}","int","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._append(StringBuilder,String).sb","Parameter_1","Belong to com.fasterxml.jackson.core.io.ContentReference._append(StringBuilder,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._append(StringBuilder,String).content","Parameter_2","Belong to com.fasterxml.jackson.core.io.ContentReference._append(StringBuilder,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._appendEscaped(StringBuilder,int)","Method","No Comment","protected boolean _appendEscaped(StringBuilder sb, int ctrlChar) {
    // We'll escape most, but NOT regular CR or LF
    if (ctrlChar == '\r' || ctrlChar == '\n') {
        return false;
    }
    sb.append('\\');
    sb.append('u');
    sb.append(CharTypes.hexToChar((ctrlChar >> 12) & 0xF));
    sb.append(CharTypes.hexToChar((ctrlChar >> 8) & 0xF));
    sb.append(CharTypes.hexToChar((ctrlChar >> 4) & 0xF));
    sb.append(CharTypes.hexToChar(ctrlChar & 0xF));
    return true;
}","boolean","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._appendEscaped(StringBuilder,int).sb","Parameter_1","Belong to com.fasterxml.jackson.core.io.ContentReference._appendEscaped(StringBuilder,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference._appendEscaped(StringBuilder,int).ctrlChar","Parameter_2","Belong to com.fasterxml.jackson.core.io.ContentReference._appendEscaped(StringBuilder,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.equals(Object)","Method","bit more","@Override
public boolean equals(Object other) {
    if (other == this)
        return true;
    if (other == null)
        return false;
    if (!(other instanceof ContentReference))
        return false;
    ContentReference otherSrc = (ContentReference) other;
    // 16-Jan-2022, tatu: First ensure offset/length the same
    if ((_offset != otherSrc._offset) || (_length != otherSrc._length)) {
        return false;
    }
    // 16-Jan-2022, tatu: As per [core#739] we'll want to consider some
    //   but not all content cases with real equality: the concern here is
    //   to avoid expensive comparisons and/or possible security issues
    final Object otherRaw = otherSrc._rawContent;
    if (_rawContent == null) {
        return (otherRaw == null);
    } else if (otherRaw == null) {
        return false;
    }
    if ((_rawContent instanceof File) || (_rawContent instanceof URL) || (_rawContent instanceof URI)) {
        return _rawContent.equals(otherRaw);
    }
    return _rawContent == otherSrc._rawContent;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.equals(Object).other","Parameter_1","Belong to com.fasterxml.jackson.core.io.ContentReference.equals(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.hashCode()","Method","Just to appease LGTM...","@Override
public int hashCode() {
    return Objects.hashCode(_rawContent);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object)","Constructor","* @param isContentTextual Whether content is textual (not binary)
     * @param rawContent Contents being referenced
     *
     * @deprecated Since 2.16. Use {@link #ContentReference(boolean, Object, ErrorReportConfiguration)} instead.","@Deprecated
protected ContentReference(boolean isContentTextual, Object rawContent) {
    this(isContentTextual, rawContent, -1, -1, ErrorReportConfiguration.defaults());
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object).isContentTextual","Parameter_1","Belong to com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object).rawContent","Parameter_2","Belong to com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,int,int)","Constructor","* @param isContentTextual Whether content is textual (not binary)
     * @param rawContent Contents being referenced
     * @param offset Offset of content within {@code rawContent}
     * @param length Length of content within {@code rawContent}
     *
     * @deprecated Since 2.16. Use {@link #ContentReference(boolean, Object, int, int, ErrorReportConfiguration)} instead.","@Deprecated
protected ContentReference(boolean isContentTextual, Object rawContent, int offset, int length) {
    this(isContentTextual, rawContent, offset, length, ErrorReportConfiguration.defaults());
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,int,int).isContentTextual","Parameter_1","Belong to com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,int,int).rawContent","Parameter_2","Belong to com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,int,int).offset","Parameter_3","Belong to com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,int,int).length","Parameter_4","Belong to com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,ErrorReportConfiguration)","Constructor","@since 2.16","protected ContentReference(boolean isContentTextual, Object rawContent, ErrorReportConfiguration errorReportConfiguration) {
    this(isContentTextual, rawContent, -1, -1, errorReportConfiguration);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,ErrorReportConfiguration).isContentTextual","Parameter_1","Belong to com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,ErrorReportConfiguration).rawContent","Parameter_2","Belong to com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,ErrorReportConfiguration).errorReportConfiguration","Parameter_3","Belong to com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,int,int,ErrorReportConfiguration)","Constructor","@since 2.16","protected ContentReference(boolean isContentTextual, Object rawContent, int offset, int length, ErrorReportConfiguration errorReportConfiguration) {
    _isContentTextual = isContentTextual;
    _rawContent = rawContent;
    _offset = offset;
    _length = length;
    _maxRawContentLength = errorReportConfiguration.getMaxRawContentLength();
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,int,int,ErrorReportConfiguration).isContentTextual","Parameter_1","Belong to com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,int,int,ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,int,int,ErrorReportConfiguration).rawContent","Parameter_2","Belong to com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,int,int,ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,int,int,ErrorReportConfiguration).offset","Parameter_3","Belong to com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,int,int,ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,int,int,ErrorReportConfiguration).length","Parameter_4","Belong to com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,int,int,ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,int,int,ErrorReportConfiguration).errorReportConfiguration","Parameter_5","Belong to com.fasterxml.jackson.core.io.ContentReference.<init>(boolean,Object,int,int,ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.OutputDecorator","Abstract Class","* Handler class that can be used to decorate output destinations.
 * Typical use is to use a filter abstraction (filtered output stream,
 * writer) around original output destination, and apply additional
 * processing during write operations.","Abstract Class do not obtain Source Code","No return type","public , abstract ","","java.io.Serializable"
"com.fasterxml.jackson.core.io.OutputDecorator.decorate(IOContext,OutputStream)","Abstract Method","* Method called by {@link com.fasterxml.jackson.core.JsonFactory} instance when
     * creating generator for given {@link OutputStream}, when this decorator
     * has been registered.
     *
     * @param ctxt IO context in use (provides access to declared encoding)
     * @param out Original output destination
     *
     * @return OutputStream to use; either passed in argument, or something that
     *   calls it
     *
     * @throws IOException if construction of decorated {@link OutputStream} fails","public abstract OutputStream decorate(IOContext ctxt, OutputStream out) throws IOException;","OutputStream","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.OutputDecorator.decorate(IOContext,OutputStream).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.io.OutputDecorator.decorate(IOContext,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.OutputDecorator.decorate(IOContext,OutputStream).out","Parameter_2","Belong to com.fasterxml.jackson.core.io.OutputDecorator.decorate(IOContext,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.OutputDecorator.decorate(IOContext,Writer)","Abstract Method","* Method called by {@link com.fasterxml.jackson.core.JsonFactory} instance when
     * creating generator for given {@link Writer}, when this decorator
     * has been registered.
     *
     * @param ctxt IO context in use (provides access to declared encoding)
     * @param w Original output writer
     *
     * @return Writer to use; either passed in argument, or something that calls it
     *
     * @throws IOException if construction of decorated {@link Writer} fails","public abstract Writer decorate(IOContext ctxt, Writer w) throws IOException;","Writer","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.OutputDecorator.decorate(IOContext,Writer).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.io.OutputDecorator.decorate(IOContext,Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.OutputDecorator.decorate(IOContext,Writer).w","Parameter_2","Belong to com.fasterxml.jackson.core.io.OutputDecorator.decorate(IOContext,Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream","Class","* Simple {@link InputStream} implementation that is used to ""unwind"" some
 * data previously read from an input stream; so that as long as some of
 * that data remains, it's returned; but as long as it's read, we'll
 * just use data from the underlying original stream.
 * This is similar to {@link java.io.PushbackInputStream}, but here there's
 * only one implicit pushback, when instance is constructed.","Class do not obtain Source Code","No return type","public , final ","java.io.InputStream",""
"com.fasterxml.jackson.core.io.MergedStream._ctxt","Field","No Comment","final private IOContext _ctxt;","No return type","final , private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream._in","Field","No Comment","final private InputStream _in;","No return type","final , private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream._b","Field","No Comment","private byte[] _b;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream._ptr","Field","No Comment","private int _ptr;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream._end","Field","No Comment","final private int _end;","No return type","final , private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.available()","Method","No Comment","@Override
public int available() throws IOException {
    if (_b != null) {
        return _end - _ptr;
    }
    return _in.available();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.close()","Method","No Comment","@Override
public void close() throws IOException {
    _free();
    _in.close();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.mark(int)","Method","No Comment","@Override
public synchronized void mark(int readlimit) {
    if (_b == null) {
        _in.mark(readlimit);
    }
}","void","public , synchronized ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.mark(int).readlimit","Parameter_1","Belong to com.fasterxml.jackson.core.io.MergedStream.mark(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.markSupported()","Method","No Comment","@Override
public boolean markSupported() {
    // Only supports marks past the initial rewindable section...
    return (_b == null) && _in.markSupported();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.read()","Method","No Comment","@Override
public int read() throws IOException {
    if (_b != null) {
        int c = _b[_ptr++] & 0xFF;
        if (_ptr >= _end) {
            _free();
        }
        return c;
    }
    return _in.read();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.read(byte[])","Method","No Comment","@Override
public int read(byte[] b) throws IOException {
    return read(b, 0, b.length);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.read(byte[]).b","Parameter_1","Belong to com.fasterxml.jackson.core.io.MergedStream.read(byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.read(byte[],int,int)","Method","No Comment","@Override
public int read(byte[] b, int off, int len) throws IOException {
    if (_b != null) {
        int avail = _end - _ptr;
        if (len > avail) {
            len = avail;
        }
        System.arraycopy(_b, _ptr, b, off, len);
        _ptr += len;
        if (_ptr >= _end) {
            _free();
        }
        return len;
    }
    return _in.read(b, off, len);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.read(byte[],int,int).b","Parameter_1","Belong to com.fasterxml.jackson.core.io.MergedStream.read(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.read(byte[],int,int).off","Parameter_2","Belong to com.fasterxml.jackson.core.io.MergedStream.read(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.read(byte[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.io.MergedStream.read(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.reset()","Method","No Comment","@Override
public synchronized void reset() throws IOException {
    if (_b == null) {
        _in.reset();
    }
}","void","public , synchronized ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.skip(long)","Method","No Comment","@Override
public long skip(long n) throws IOException {
    long count = 0L;
    if (_b != null) {
        int amount = _end - _ptr;
        if (amount > n) {
            // all in pushed back segment?
            _ptr += (int) n;
            return n;
        }
        _free();
        count += amount;
        n -= amount;
    }
    if (n > 0) {
        count += _in.skip(n);
    }
    return count;
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.skip(long).n","Parameter_1","Belong to com.fasterxml.jackson.core.io.MergedStream.skip(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream._free()","Method","No Comment","private void _free() {
    byte[] buf = _b;
    if (buf != null) {
        _b = null;
        if (_ctxt != null) {
            _ctxt.releaseReadIOBuffer(buf);
        }
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.<init>(IOContext,InputStream,byte[],int,int)","Constructor","No Comment","public MergedStream(IOContext ctxt, InputStream in, byte[] buf, int start, int end) {
    _ctxt = ctxt;
    _in = in;
    _b = buf;
    _ptr = start;
    _end = end;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.<init>(IOContext,InputStream,byte[],int,int).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.io.MergedStream.<init>(IOContext,InputStream,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.<init>(IOContext,InputStream,byte[],int,int).in","Parameter_2","Belong to com.fasterxml.jackson.core.io.MergedStream.<init>(IOContext,InputStream,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.<init>(IOContext,InputStream,byte[],int,int).buf","Parameter_3","Belong to com.fasterxml.jackson.core.io.MergedStream.<init>(IOContext,InputStream,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.<init>(IOContext,InputStream,byte[],int,int).start","Parameter_4","Belong to com.fasterxml.jackson.core.io.MergedStream.<init>(IOContext,InputStream,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.MergedStream.<init>(IOContext,InputStream,byte[],int,int).end","Parameter_5","Belong to com.fasterxml.jackson.core.io.MergedStream.<init>(IOContext,InputStream,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer","Class","No Comment","Class do not obtain Source Code","No return type","public , final ","java.io.Writer",""
"com.fasterxml.jackson.core.io.UTF8Writer.SURR1_FIRST","Field","No Comment","final static int SURR1_FIRST = 0xD800;","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.SURR1_LAST","Field","No Comment","final static int SURR1_LAST = 0xDBFF;","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.SURR2_FIRST","Field","No Comment","final static int SURR2_FIRST = 0xDC00;","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.SURR2_LAST","Field","No Comment","final static int SURR2_LAST = 0xDFFF;","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.SURROGATE_BASE","Field","* @since 2.17","public static final int SURROGATE_BASE = 0x10000 - UTF8Writer.SURR2_FIRST - (UTF8Writer.SURR1_FIRST << 10);","No return type","public , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer._context","Field","No Comment","final private IOContext _context;","No return type","final , private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer._out","Field","No Comment","private OutputStream _out;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer._outBuffer","Field","No Comment","private byte[] _outBuffer;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer._outBufferEnd","Field","No Comment","final private int _outBufferEnd;","No return type","final , private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer._outPtr","Field","No Comment","private int _outPtr;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer._surrogate","Field","* When outputting chars from BMP, surrogate pairs need to be coalesced.
     * To do this, both pairs must be known first; and since it is possible
     * pairs may be split, we need temporary storage for the first half","private int _surrogate;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.append(char)","Method","No Comment","@Override
public Writer append(char c) throws IOException {
    write(c);
    return this;
}","Writer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.append(char).c","Parameter_1","Belong to com.fasterxml.jackson.core.io.UTF8Writer.append(char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.close()","Method","No Comment","@Override
public void close() throws IOException {
    if (_out != null) {
        if (_outPtr > 0) {
            _out.write(_outBuffer, 0, _outPtr);
            _outPtr = 0;
        }
        OutputStream out = _out;
        _out = null;
        byte[] buf = _outBuffer;
        if (buf != null) {
            _outBuffer = null;
            _context.releaseWriteEncodingBuffer(buf);
        }
        out.close();
        // Let's 'flush' orphan surrogate, no matter what; but only
        // after cleanly closing everything else.
        int code = _surrogate;
        _surrogate = 0;
        if (code > 0) {
            illegalSurrogate(code);
        }
    }
    _context.close();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.flush()","Method","No Comment","@Override
public void flush() throws IOException {
    if (_out != null) {
        if (_outPtr > 0) {
            _out.write(_outBuffer, 0, _outPtr);
            _outPtr = 0;
        }
        _out.flush();
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.write(char[])","Method","No Comment","@Override
public void write(char[] cbuf) throws IOException {
    write(cbuf, 0, cbuf.length);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.write(char[]).cbuf","Parameter_1","Belong to com.fasterxml.jackson.core.io.UTF8Writer.write(char[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.write(char[],int,int)","Method","No Comment","@Override
public void write(char[] cbuf, int off, int len) throws IOException {
    if (len < 2) {
        if (len == 1) {
            write(cbuf[off]);
        }
        return;
    }
    // First: do we have a leftover surrogate to deal with?
    if (_surrogate > 0) {
        char second = cbuf[off++];
        --len;
        write(convertSurrogate(second));
        // will have at least one more char
    }
    int outPtr = _outPtr;
    byte[] outBuf = _outBuffer;
    // has 4 'spare' bytes
    int outBufLast = _outBufferEnd;
    // All right; can just loop it nice and easy now:
    // len will now be the end of input buffer
    len += off;
    output_loop: for (; off < len; ) {
        /* First, let's ensure we can output at least 4 bytes
             * (longest UTF-8 encoded codepoint):
             */
        if (outPtr >= outBufLast) {
            _out.write(outBuf, 0, outPtr);
            outPtr = 0;
        }
        int c = cbuf[off++];
        // And then see if we have an Ascii char:
        if (c < 0x80) {
            // If so, can do a tight inner loop:
            outBuf[outPtr++] = (byte) c;
            // Let's calc how many ascii chars we can copy at most:
            int maxInCount = (len - off);
            int maxOutCount = (outBufLast - outPtr);
            if (maxInCount > maxOutCount) {
                maxInCount = maxOutCount;
            }
            maxInCount += off;
            ascii_loop: while (true) {
                if (off >= maxInCount) {
                    // done with max. ascii seq
                    continue output_loop;
                }
                c = cbuf[off++];
                if (c >= 0x80) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (byte) c;
            }
        }
        // Nope, multi-byte:
        if (c < 0x800) {
            // 2-byte
            outBuf[outPtr++] = (byte) (0xc0 | (c >> 6));
            outBuf[outPtr++] = (byte) (0x80 | (c & 0x3f));
        } else {
            // 3 or 4 bytes
            // Surrogates?
            if (c < SURR1_FIRST || c > SURR2_LAST) {
                outBuf[outPtr++] = (byte) (0xe0 | (c >> 12));
                outBuf[outPtr++] = (byte) (0x80 | ((c >> 6) & 0x3f));
                outBuf[outPtr++] = (byte) (0x80 | (c & 0x3f));
                continue;
            }
            // Yup, a surrogate:
            if (c > SURR1_LAST) {
                // must be from first range
                _outPtr = outPtr;
                illegalSurrogate(c);
            }
            _surrogate = c;
            // and if so, followed by another from next range
            if (off >= len) {
                // unless we hit the end?
                break;
            }
            c = convertSurrogate(cbuf[off++]);
            if (c > 0x10FFFF) {
                // illegal in JSON as well as in XML
                _outPtr = outPtr;
                illegalSurrogate(c);
            }
            outBuf[outPtr++] = (byte) (0xf0 | (c >> 18));
            outBuf[outPtr++] = (byte) (0x80 | ((c >> 12) & 0x3f));
            outBuf[outPtr++] = (byte) (0x80 | ((c >> 6) & 0x3f));
            outBuf[outPtr++] = (byte) (0x80 | (c & 0x3f));
        }
    }
    _outPtr = outPtr;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.write(char[],int,int).cbuf","Parameter_1","Belong to com.fasterxml.jackson.core.io.UTF8Writer.write(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.write(char[],int,int).off","Parameter_2","Belong to com.fasterxml.jackson.core.io.UTF8Writer.write(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.write(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.io.UTF8Writer.write(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.write(int)","Method","No Comment","@Override
public void write(int c) throws IOException {
    // First; do we have a left over surrogate?
    if (_surrogate > 0) {
        c = convertSurrogate(c);
        // If not, do we start with a surrogate?
    } else if (c >= SURR1_FIRST && c <= SURR2_LAST) {
        // Illegal to get second part without first:
        if (c > SURR1_LAST) {
            illegalSurrogate(c);
        }
        // First part just needs to be held for now
        _surrogate = c;
        return;
    }
    if (_outPtr >= _outBufferEnd) {
        // let's require enough room, first
        _out.write(_outBuffer, 0, _outPtr);
        _outPtr = 0;
    }
    if (c < 0x80) {
        // ascii
        _outBuffer[_outPtr++] = (byte) c;
    } else {
        int ptr = _outPtr;
        if (c < 0x800) {
            // 2-byte
            _outBuffer[ptr++] = (byte) (0xc0 | (c >> 6));
            _outBuffer[ptr++] = (byte) (0x80 | (c & 0x3f));
        } else if (c <= 0xFFFF) {
            // 3 bytes
            _outBuffer[ptr++] = (byte) (0xe0 | (c >> 12));
            _outBuffer[ptr++] = (byte) (0x80 | ((c >> 6) & 0x3f));
            _outBuffer[ptr++] = (byte) (0x80 | (c & 0x3f));
        } else {
            // 4 bytes
            if (c > 0x10FFFF) {
                // illegal
                illegalSurrogate(c);
            }
            _outBuffer[ptr++] = (byte) (0xf0 | (c >> 18));
            _outBuffer[ptr++] = (byte) (0x80 | ((c >> 12) & 0x3f));
            _outBuffer[ptr++] = (byte) (0x80 | ((c >> 6) & 0x3f));
            _outBuffer[ptr++] = (byte) (0x80 | (c & 0x3f));
        }
        _outPtr = ptr;
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.write(int).c","Parameter_1","Belong to com.fasterxml.jackson.core.io.UTF8Writer.write(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.write(String)","Method","No Comment","@Override
public void write(String str) throws IOException {
    write(str, 0, str.length());
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.write(String).str","Parameter_1","Belong to com.fasterxml.jackson.core.io.UTF8Writer.write(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.write(String,int,int)","Method","No Comment","@Override
public void write(String str, int off, int len) throws IOException {
    if (len < 2) {
        if (len == 1) {
            write(str.charAt(off));
        }
        return;
    }
    // First: do we have a leftover surrogate to deal with?
    if (_surrogate > 0) {
        char second = str.charAt(off++);
        --len;
        write(convertSurrogate(second));
        // will have at least one more char (case of 1 char was checked earlier on)
    }
    int outPtr = _outPtr;
    byte[] outBuf = _outBuffer;
    // has 4 'spare' bytes
    int outBufLast = _outBufferEnd;
    // All right; can just loop it nice and easy now:
    // len will now be the end of input buffer
    len += off;
    output_loop: for (; off < len; ) {
        /* First, let's ensure we can output at least 4 bytes
             * (longest UTF-8 encoded codepoint):
             */
        if (outPtr >= outBufLast) {
            _out.write(outBuf, 0, outPtr);
            outPtr = 0;
        }
        int c = str.charAt(off++);
        // And then see if we have an Ascii char:
        if (c < 0x80) {
            // If so, can do a tight inner loop:
            outBuf[outPtr++] = (byte) c;
            // Let's calc how many ascii chars we can copy at most:
            int maxInCount = (len - off);
            int maxOutCount = (outBufLast - outPtr);
            if (maxInCount > maxOutCount) {
                maxInCount = maxOutCount;
            }
            maxInCount += off;
            ascii_loop: while (true) {
                if (off >= maxInCount) {
                    // done with max. ascii seq
                    continue output_loop;
                }
                c = str.charAt(off++);
                if (c >= 0x80) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (byte) c;
            }
        }
        // Nope, multi-byte:
        if (c < 0x800) {
            // 2-byte
            outBuf[outPtr++] = (byte) (0xc0 | (c >> 6));
            outBuf[outPtr++] = (byte) (0x80 | (c & 0x3f));
        } else {
            // 3 or 4 bytes
            // Surrogates?
            if (c < SURR1_FIRST || c > SURR2_LAST) {
                outBuf[outPtr++] = (byte) (0xe0 | (c >> 12));
                outBuf[outPtr++] = (byte) (0x80 | ((c >> 6) & 0x3f));
                outBuf[outPtr++] = (byte) (0x80 | (c & 0x3f));
                continue;
            }
            // Yup, a surrogate:
            if (c > SURR1_LAST) {
                // must be from first range
                _outPtr = outPtr;
                illegalSurrogate(c);
            }
            _surrogate = c;
            // and if so, followed by another from next range
            if (off >= len) {
                // unless we hit the end?
                break;
            }
            c = convertSurrogate(str.charAt(off++));
            if (c > 0x10FFFF) {
                // illegal, as per RFC 4627
                _outPtr = outPtr;
                illegalSurrogate(c);
            }
            outBuf[outPtr++] = (byte) (0xf0 | (c >> 18));
            outBuf[outPtr++] = (byte) (0x80 | ((c >> 12) & 0x3f));
            outBuf[outPtr++] = (byte) (0x80 | ((c >> 6) & 0x3f));
            outBuf[outPtr++] = (byte) (0x80 | (c & 0x3f));
        }
    }
    _outPtr = outPtr;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.write(String,int,int).str","Parameter_1","Belong to com.fasterxml.jackson.core.io.UTF8Writer.write(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.write(String,int,int).off","Parameter_2","Belong to com.fasterxml.jackson.core.io.UTF8Writer.write(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.write(String,int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.io.UTF8Writer.write(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.convertSurrogate(int)","Method","* Method called to calculate Unicode code-point, from a surrogate pair.
     *
     * @param secondPart Second UTF-16 unit of surrogate (first part stored in {@code _surrogate})
     *
     * @return Decoded Unicode point
     *
     * @throws IOException If surrogate pair is invalid","protected int convertSurrogate(int secondPart) throws IOException {
    int firstPart = _surrogate;
    _surrogate = 0;
    // Ok, then, is the second part valid?
    if (secondPart < SURR2_FIRST || secondPart > SURR2_LAST) {
        throw new IOException(""Broken surrogate pair: first char 0x"" + Integer.toHexString(firstPart) + "", second 0x"" + Integer.toHexString(secondPart) + ""; illegal combination"");
    }
    return (firstPart << 10) + secondPart + UTF8Writer.SURROGATE_BASE;
}","int","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.convertSurrogate(int).secondPart","Parameter_1","Belong to com.fasterxml.jackson.core.io.UTF8Writer.convertSurrogate(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.illegalSurrogate(int)","Method","No Comment","protected static void illegalSurrogate(int code) throws IOException {
    throw new IOException(illegalSurrogateDesc(code));
}","void","protected , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.illegalSurrogate(int).code","Parameter_1","Belong to com.fasterxml.jackson.core.io.UTF8Writer.illegalSurrogate(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.illegalSurrogateDesc(int)","Method","No Comment","protected static String illegalSurrogateDesc(int code) {
    if (code > 0x10FFFF) {
        // over max?
        return ""Illegal character point (0x"" + Integer.toHexString(code) + "") to output; max is 0x10FFFF as per RFC 4627"";
    }
    if (code >= SURR1_FIRST) {
        if (code <= SURR1_LAST) {
            // Unmatched first part (closing without second part?)
            return ""Unmatched first part of surrogate pair (0x"" + Integer.toHexString(code) + "")"";
        }
        return ""Unmatched second part of surrogate pair (0x"" + Integer.toHexString(code) + "")"";
    }
    // should we ever get this?
    return ""Illegal character point (0x"" + Integer.toHexString(code) + "") to output"";
}","String","protected , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.illegalSurrogateDesc(int).code","Parameter_1","Belong to com.fasterxml.jackson.core.io.UTF8Writer.illegalSurrogateDesc(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.<init>(IOContext,OutputStream)","Constructor","No Comment","public UTF8Writer(IOContext ctxt, OutputStream out) {
    _context = ctxt;
    _out = out;
    _outBuffer = ctxt.allocWriteEncodingBuffer();
    /* Max. expansion for a single char (in unmodified UTF-8) is
         * 4 bytes (or 3 depending on how you view it -- 4 when recombining
         * surrogate pairs)
         */
    _outBufferEnd = _outBuffer.length - 4;
    _outPtr = 0;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.<init>(IOContext,OutputStream).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.io.UTF8Writer.<init>(IOContext,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.UTF8Writer.<init>(IOContext,OutputStream).out","Parameter_2","Belong to com.fasterxml.jackson.core.io.UTF8Writer.<init>(IOContext,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonEOFException","Class","* Specialized {@link JsonParseException} that is thrown when end-of-input
 * is reached unexpectedly, either within token being decoded, or during
 * skipping of intervening white-space that is not between root-level
 * tokens (that is, is within JSON Object or JSON Array construct).
 *
 * @since 2.8","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.JsonParseException",""
"com.fasterxml.jackson.core.io.JsonEOFException.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonEOFException._token","Field","* Type of token that was being decoded, if parser had enough information
     * to recognize type (such as starting double-quote for Strings)","protected final JsonToken _token;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonEOFException.getTokenBeingDecoded()","Method","* Accessor for possibly available information about token that was being
     * decoded while encountering end of input.
     *
     * @return JsonToken that was being decoded while encountering end-of-input","public JsonToken getTokenBeingDecoded() {
    return _token;
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonEOFException.<init>(JsonParser,JsonToken,String)","Constructor","No Comment","public JsonEOFException(JsonParser p, JsonToken token, String msg) {
    super(p, msg);
    _token = token;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonEOFException.<init>(JsonParser,JsonToken,String).p","Parameter_1","Belong to com.fasterxml.jackson.core.io.JsonEOFException.<init>(JsonParser,JsonToken,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonEOFException.<init>(JsonParser,JsonToken,String).token","Parameter_2","Belong to com.fasterxml.jackson.core.io.JsonEOFException.<init>(JsonParser,JsonToken,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.JsonEOFException.<init>(JsonParser,JsonToken,String).msg","Parameter_3","Belong to com.fasterxml.jackson.core.io.JsonEOFException.<init>(JsonParser,JsonToken,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput","Class","* Helper class for efficient parsing of various JSON numbers.
 *<p>
 * NOTE! Does NOT validate against maximum length limits: caller must
 * do that if and as necessary.","Class do not obtain Source Code","No return type","public , final ","",""
"com.fasterxml.jackson.core.io.NumberInput.NASTY_SMALL_DOUBLE","Field","* Formerly used constant for a value that was problematic on certain
     * pre-1.8 JDKs.
     *
     * @deprecated Since 2.14 -- do not use","// since 2.14
@Deprecated
public final static String NASTY_SMALL_DOUBLE = ""2.2250738585072012e-308"";","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.L_BILLION","Field","* Constants needed for parsing longs from basic int parsing methods","final static long L_BILLION = 1000000000;","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.MIN_LONG_STR_NO_SIGN","Field","No Comment","final static String MIN_LONG_STR_NO_SIGN = String.valueOf(Long.MIN_VALUE).substring(1);","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.MAX_LONG_STR","Field","No Comment","final static String MAX_LONG_STR = String.valueOf(Long.MAX_VALUE);","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.PATTERN_FLOAT","Field","* Regexp used to pre-validate ""Stringified Numbers"": slightly looser than
     * JSON Number definition (allows leading zeroes, positive sign).
     *
     * @since 2.17","private final static Pattern PATTERN_FLOAT = Pattern.compile(""[+-]?[0-9]*[\\.]?[0-9]+([eE][+-]?[0-9]+)?"");","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.PATTERN_FLOAT_TRAILING_DOT","Field","* Secondary regexp used along with {@code PATTERN_FLOAT} to cover
     * case where number ends with dot, like {@code ""+12.""}
     *
     * @since 2.17.2","private final static Pattern PATTERN_FLOAT_TRAILING_DOT = Pattern.compile(""[+-]?[0-9]+[\\.]"");","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseInt(char[],int,int)","Method","* Fast method for parsing unsigned integers that are known to fit into
     * regular 32-bit signed int type. This means that length is
     * between 1 and 9 digits (inclusive) and there is no sign character.
     *<p>
     * Note: public to let unit tests call it; not meant to be used by any
     * code outside this package.
     *
     * @param ch Buffer that contains integer value to decode
     * @param off Offset of the first digit character in buffer
     * @param len Length of the number to decode (in characters)
     *
     * @return Decoded {@code int} value","public static int parseInt(char[] ch, int off, int len) {
    if (len > 0 && ch[off] == '+') {
        off++;
        len--;
    }
    int num = ch[off + len - 1] - '0';
    switch(len) {
        case 9:
            num += (ch[off++] - '0') * 100000000;
        case 8:
            num += (ch[off++] - '0') * 10000000;
        case 7:
            num += (ch[off++] - '0') * 1000000;
        case 6:
            num += (ch[off++] - '0') * 100000;
        case 5:
            num += (ch[off++] - '0') * 10000;
        case 4:
            num += (ch[off++] - '0') * 1000;
        case 3:
            num += (ch[off++] - '0') * 100;
        case 2:
            num += (ch[off] - '0') * 10;
    }
    return num;
}","int","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseInt(char[],int,int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseInt(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseInt(char[],int,int).off","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.parseInt(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseInt(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberInput.parseInt(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseInt(String)","Method","* Helper method to (more) efficiently parse integer numbers from
     * String values. Input String must be simple Java integer value.
     * No range checks are made to verify that the value fits in 32-bit Java {@code int}:
     * caller is expected to only calls this in cases where this can be guaranteed
     * (basically: number of digits does not exceed 9)
     *<p>
     * NOTE: semantics differ significantly from {@link #parseInt(char[], int, int)}.
     *
     * @param s String that contains integer value to decode
     *
     * @return Decoded {@code int} value","public static int parseInt(String s) {
    /* Ok: let's keep strategy simple: ignoring optional minus sign,
         * we'll accept 1 - 9 digits and parse things efficiently;
         * otherwise just defer to JDK parse functionality.
         */
    char c = s.charAt(0);
    int len = s.length();
    boolean neg = (c == '-');
    int offset = 1;
    // must have 1 - 9 digits after optional sign:
    // negative?
    if (neg) {
        if (len == 1 || len > 10) {
            return Integer.parseInt(s);
        }
        c = s.charAt(offset++);
    } else {
        if (len > 9) {
            return Integer.parseInt(s);
        }
    }
    if (c > '9' || c < '0') {
        return Integer.parseInt(s);
    }
    int num = c - '0';
    if (offset < len) {
        c = s.charAt(offset++);
        if (c > '9' || c < '0') {
            return Integer.parseInt(s);
        }
        num = (num * 10) + (c - '0');
        if (offset < len) {
            c = s.charAt(offset++);
            if (c > '9' || c < '0') {
                return Integer.parseInt(s);
            }
            num = (num * 10) + (c - '0');
            // Let's just loop if we have more than 3 digits:
            if (offset < len) {
                do {
                    c = s.charAt(offset++);
                    if (c > '9' || c < '0') {
                        return Integer.parseInt(s);
                    }
                    num = (num * 10) + (c - '0');
                } while (offset < len);
            }
        }
    }
    return neg ? -num : num;
}","int","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseInt(String).s","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseInt(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseLong(char[],int,int)","Method","No Comment","public static long parseLong(char[] ch, int off, int len) {
    // Note: caller must ensure length is [10, 18]
    int len1 = len - 9;
    long val = parseInt(ch, off, len1) * L_BILLION;
    return val + parseInt(ch, off + len1, 9);
}","long","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseLong(char[],int,int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseLong(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseLong(char[],int,int).off","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.parseLong(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseLong(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberInput.parseLong(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseLong19(char[],int,boolean)","Method","* Parses an unsigned long made up of exactly 19 digits.
     * <p>
     * It is the callers responsibility to make sure the input is exactly 19 digits.
     * and fits into a 64bit long by calling {@link #inLongRange(char[], int, int, boolean)}
     * first.
     * <p>
     * Note that input String must NOT contain leading minus sign (even
     * if {@code negative} is set to true).
     *
     * @param ch Buffer that contains integer value to decode
     * @param off Offset of the first digit character in buffer
     * @param negative Whether original number had a minus sign
     * @return Decoded {@code long} value
     *
     * @since 2.15.0","public static long parseLong19(char[] ch, int off, boolean negative) {
    // Note: caller must ensure length is 19
    long num = 0L;
    for (int i = 0; i < 19; i++) {
        char c = ch[off + i];
        num = (num * 10) + (c - '0');
    }
    return negative ? -num : num;
}","long","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseLong19(char[],int,boolean).ch","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseLong19(char[],int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseLong19(char[],int,boolean).off","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.parseLong19(char[],int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseLong19(char[],int,boolean).negative","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberInput.parseLong19(char[],int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseLong(String)","Method","* Similar to {@link #parseInt(String)} but for {@code long} values.
     *
     * @param s String that contains {@code long} value to decode
     *
     * @return Decoded {@code long} value","public static long parseLong(String s) {
    // Ok, now; as the very first thing, let's just optimize case of ""fake longs"";
    // that is, if we know they must be ints, call int parsing
    int length = s.length();
    if (length <= 9) {
        return parseInt(s);
    }
    // !!! TODO: implement efficient 2-int parsing...
    return Long.parseLong(s);
}","long","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseLong(String).s","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseLong(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.inLongRange(char[],int,int,boolean)","Method","* Helper method for determining if given String representation of
     * an integral number would fit in 64-bit Java long or not.
     * Note that input String must NOT contain leading minus sign (even
     * if 'negative' is set to true).
     *
     * @param ch Buffer that contains long value to check
     * @param off Offset of the first digit character in buffer
     * @param len Length of the number to decode (in characters)
     * @param negative Whether original number had a minus sign (which is
     *    NOT passed to this method) or not
     *
     * @return {@code True} if specified String representation is within Java
     *   {@code long} range; {@code false} if not.","public static boolean inLongRange(char[] ch, int off, int len, boolean negative) {
    String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;
    int cmpLen = cmpStr.length();
    if (len < cmpLen)
        return true;
    if (len > cmpLen)
        return false;
    for (int i = 0; i < cmpLen; ++i) {
        int diff = ch[off + i] - cmpStr.charAt(i);
        if (diff != 0) {
            return (diff < 0);
        }
    }
    return true;
}","boolean","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.inLongRange(char[],int,int,boolean).ch","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.inLongRange(char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.inLongRange(char[],int,int,boolean).off","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.inLongRange(char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.inLongRange(char[],int,int,boolean).len","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberInput.inLongRange(char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.inLongRange(char[],int,int,boolean).negative","Parameter_4","Belong to com.fasterxml.jackson.core.io.NumberInput.inLongRange(char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.inLongRange(String,boolean)","Method","* Similar to {@link #inLongRange(char[],int,int,boolean)}, but
     * with String argument
     *
     * @param s String that contains {@code long} value to check
     * @param negative Whether original number had a minus sign (which is
     *    NOT passed to this method) or not
     *
     * @return {@code True} if specified String representation is within Java
     *   {@code long} range; {@code false} if not.","public static boolean inLongRange(String s, boolean negative) {
    String cmp = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;
    int cmpLen = cmp.length();
    int alen = s.length();
    if (alen < cmpLen)
        return true;
    if (alen > cmpLen)
        return false;
    // could perhaps just use String.compareTo()?
    for (int i = 0; i < cmpLen; ++i) {
        int diff = s.charAt(i) - cmp.charAt(i);
        if (diff != 0) {
            return (diff < 0);
        }
    }
    return true;
}","boolean","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.inLongRange(String,boolean).s","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.inLongRange(String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.inLongRange(String,boolean).negative","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.inLongRange(String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseAsInt(String,int)","Method","No Comment","public static int parseAsInt(String s, int def) {
    if (s == null) {
        return def;
    }
    s = s.trim();
    int len = s.length();
    if (len == 0) {
        return def;
    }
    // One more thing: use integer parsing for 'simple'
    int i = 0;
    // skip leading sign, if any
    final char sign = s.charAt(0);
    if (sign == '+') {
        // for plus, actually physically remove
        s = s.substring(1);
        len = s.length();
    } else if (sign == '-') {
        // minus, just skip for checks, must retain
        i = 1;
    }
    for (; i < len; ++i) {
        char c = s.charAt(i);
        // if other symbols, parse as Double, coerce
        if (c > '9' || c < '0') {
            try {
                //useFastParser=true is used because there is a lot less risk that small changes in result will have an affect
                //and performance benefit is useful
                return (int) parseDouble(s, true);
            } catch (NumberFormatException e) {
                return def;
            }
        }
    }
    try {
        return Integer.parseInt(s);
    } catch (NumberFormatException e) {
    }
    return def;
}","int","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseAsInt(String,int).s","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseAsInt(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseAsInt(String,int).def","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.parseAsInt(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseAsLong(String,long)","Method","No Comment","public static long parseAsLong(String s, long def) {
    if (s == null) {
        return def;
    }
    s = s.trim();
    int len = s.length();
    if (len == 0) {
        return def;
    }
    // One more thing: use long parsing for 'simple'
    int i = 0;
    // skip leading sign, if any
    final char sign = s.charAt(0);
    if (sign == '+') {
        // for plus, actually physically remove
        s = s.substring(1);
        len = s.length();
    } else if (sign == '-') {
        // minus, just skip for checks, must retain
        i = 1;
    }
    for (; i < len; ++i) {
        char c = s.charAt(i);
        // if other symbols, parse as Double, coerce
        if (c > '9' || c < '0') {
            try {
                //useFastParser=true is used because there is a lot less risk that small changes in result will have an affect
                //and performance benefit is useful
                return (long) parseDouble(s, true);
            } catch (NumberFormatException e) {
                return def;
            }
        }
    }
    try {
        return Long.parseLong(s);
    } catch (NumberFormatException e) {
    }
    return def;
}","long","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseAsLong(String,long).s","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseAsLong(String,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseAsLong(String,long).def","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.parseAsLong(String,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseAsDouble(String,double)","Method","* @param s a string representing a number to parse
     * @param def the default to return if `s` is not a parseable number
     * @return closest matching double (or `def` if there is an issue with `s`) where useFastParser=false
     * @see #parseAsDouble(String, double, boolean)","public static double parseAsDouble(final String s, final double def) {
    return parseAsDouble(s, def, false);
}","double","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseAsDouble(String,double).s","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseAsDouble(String,double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseAsDouble(String,double).def","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.parseAsDouble(String,double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseAsDouble(String,double,boolean)","Method","* @param s a string representing a number to parse
     * @param def the default to return if `s` is not a parseable number
     * @param useFastParser whether to use {@code FastDoubleParser}
     * @return closest matching double (or `def` if there is an issue with `s`)
     * @since 2.14","public static double parseAsDouble(String s, final double def, final boolean useFastParser) {
    if (s == null) {
        return def;
    }
    s = s.trim();
    if (s.isEmpty()) {
        return def;
    }
    try {
        return parseDouble(s, useFastParser);
    } catch (NumberFormatException e) {
    }
    return def;
}","double","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseAsDouble(String,double,boolean).s","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseAsDouble(String,double,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseAsDouble(String,double,boolean).def","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.parseAsDouble(String,double,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseAsDouble(String,double,boolean).useFastParser","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberInput.parseAsDouble(String,double,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseDouble(String)","Method","* @param s a string representing a number to parse
     * @return closest matching double
     * @throws NumberFormatException if string cannot be represented by a double where useFastParser=false
     * @see #parseDouble(String, boolean)
     *
     * @deprecated Since 2.17 use {@link #parseDouble(String, boolean)} instead","// since 2.17
@Deprecated
public static double parseDouble(final String s) throws NumberFormatException {
    return parseDouble(s, false);
}","double","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseDouble(String).s","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseDouble(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseDouble(String,boolean)","Method","* @param s a string representing a number to parse
     * @param useFastParser whether to use {@code FastDoubleParser}
     * @return closest matching double
     * @throws NumberFormatException if string cannot be represented by a double
     * @since v2.14","public static double parseDouble(final String s, final boolean useFastParser) throws NumberFormatException {
    return useFastParser ? JavaDoubleParser.parseDouble(s) : Double.parseDouble(s);
}","double","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseDouble(String,boolean).s","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseDouble(String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseDouble(String,boolean).useFastParser","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.parseDouble(String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseDouble(char[],boolean)","Method","* @param array a char array containing a number to parse
     * @param useFastParser whether to use {@code FastDoubleParser}
     * @return closest matching double
     * @throws NumberFormatException if value cannot be represented by a double
     * @since 2.18","public static double parseDouble(final char[] array, final boolean useFastParser) throws NumberFormatException {
    return parseDouble(array, 0, array.length, useFastParser);
}","double","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseDouble(char[],boolean).array","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseDouble(char[],boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseDouble(char[],boolean).useFastParser","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.parseDouble(char[],boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseDouble(char[],int,int,boolean)","Method","* @param array a char array containing a number to parse
     * @param offset the offset to apply when parsing the number in the char array
     * @param len the length of the number in the char array
     * @param useFastParser whether to use {@code FastDoubleParser}
     * @return closest matching double
     * @throws NumberFormatException if value cannot be represented by a double
     * @since 2.18","public static double parseDouble(final char[] array, final int offset, final int len, final boolean useFastParser) throws NumberFormatException {
    return useFastParser ? JavaDoubleParser.parseDouble(array, offset, len) : Double.parseDouble(new String(array, offset, len));
}","double","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseDouble(char[],int,int,boolean).array","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseDouble(char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseDouble(char[],int,int,boolean).offset","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.parseDouble(char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseDouble(char[],int,int,boolean).len","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberInput.parseDouble(char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseDouble(char[],int,int,boolean).useFastParser","Parameter_4","Belong to com.fasterxml.jackson.core.io.NumberInput.parseDouble(char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseFloat(String)","Method","* @param s a string representing a number to parse
     * @return closest matching float
     * @throws NumberFormatException if string cannot be represented by a float where useFastParser=false
     * @see #parseFloat(String, boolean)
     * @since v2.14
     *
     * @deprecated Since 2.17 use {@link #parseFloat(String, boolean)} instead","// since 2.17
@Deprecated
public static float parseFloat(final String s) throws NumberFormatException {
    return parseFloat(s, false);
}","float","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseFloat(String).s","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseFloat(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseFloat(String,boolean)","Method","* @param s a string representing a number to parse
     * @param useFastParser whether to use {@code FastDoubleParser}
     * @return closest matching float
     * @throws NumberFormatException if string cannot be represented by a float
     * @since v2.14","public static float parseFloat(final String s, final boolean useFastParser) throws NumberFormatException {
    if (useFastParser) {
        return JavaFloatParser.parseFloat(s);
    }
    return Float.parseFloat(s);
}","float","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseFloat(String,boolean).s","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseFloat(String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseFloat(String,boolean).useFastParser","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.parseFloat(String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseFloat(char[],boolean)","Method","* @param array a char array containing a number to parse
     * @param useFastParser whether to use {@code FastDoubleParser}
     * @return closest matching float
     * @throws NumberFormatException if value cannot be represented by a float
     * @since 2.18","public static float parseFloat(final char[] array, final boolean useFastParser) throws NumberFormatException {
    return parseFloat(array, 0, array.length, useFastParser);
}","float","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseFloat(char[],boolean).array","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseFloat(char[],boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseFloat(char[],boolean).useFastParser","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.parseFloat(char[],boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseFloat(char[],int,int,boolean)","Method","* @param array a char array containing a number to parse
     * @param offset the offset to apply when parsing the number in the char array
     * @param len the length of the number in the char array
     * @param useFastParser whether to use {@code FastDoubleParser}
     * @return closest matching float
     * @throws NumberFormatException if value cannot be represented by a float
     * @since 2.18","public static float parseFloat(final char[] array, final int offset, final int len, final boolean useFastParser) throws NumberFormatException {
    return useFastParser ? JavaFloatParser.parseFloat(array, offset, len) : Float.parseFloat(new String(array, offset, len));
}","float","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseFloat(char[],int,int,boolean).array","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseFloat(char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseFloat(char[],int,int,boolean).offset","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.parseFloat(char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseFloat(char[],int,int,boolean).len","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberInput.parseFloat(char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseFloat(char[],int,int,boolean).useFastParser","Parameter_4","Belong to com.fasterxml.jackson.core.io.NumberInput.parseFloat(char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(String)","Method","* @param s a string representing a number to parse
     * @return a BigDecimal
     * @throws NumberFormatException if the char array cannot be represented by a BigDecimal
     *
     * @deprecated Since 2.17 use {@link #parseBigDecimal(String, boolean)} instead","// since 2.17
@Deprecated
public static BigDecimal parseBigDecimal(final String s) throws NumberFormatException {
    return parseBigDecimal(s, false);
}","BigDecimal","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(String).s","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(String,boolean)","Method","* @param s a string representing a number to parse
     * @param useFastParser whether to use custom fast parser (true) or JDK default (false) parser
     * @return a BigDecimal
     * @throws NumberFormatException if the char array cannot be represented by a BigDecimal
     * @since v2.15","public static BigDecimal parseBigDecimal(final String s, final boolean useFastParser) throws NumberFormatException {
    if (useFastParser) {
        return BigDecimalParser.parseWithFastParser(s);
    }
    return BigDecimalParser.parse(s);
}","BigDecimal","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(String,boolean).s","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(String,boolean).useFastParser","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],int,int)","Method","* @param ch a char array with text that makes up a number
     * @param off the offset to apply when parsing the number in the char array
     * @param len the length of the number in the char array
     * @return a BigDecimal
     * @throws NumberFormatException if the char array cannot be represented by a BigDecimal
     *
     * @deprecated Since 2.17 use {@link #parseBigDecimal(char[], int, int, boolean)} instead","// since 2.17
@Deprecated
public static BigDecimal parseBigDecimal(final char[] ch, final int off, final int len) throws NumberFormatException {
    return BigDecimalParser.parse(ch, off, len);
}","BigDecimal","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],int,int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],int,int).off","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],int,int,boolean)","Method","* @param ch a char array with text that makes up a number
     * @param off the offset to apply when parsing the number in the char array
     * @param len the length of the number in the char array
     * @param useFastParser whether to use custom fast parser (true) or JDK default (false) parser
     * @return a BigDecimal
     * @throws NumberFormatException if the char array cannot be represented by a BigDecimal
     * @since v2.15","public static BigDecimal parseBigDecimal(final char[] ch, final int off, final int len, final boolean useFastParser) throws NumberFormatException {
    if (useFastParser) {
        return BigDecimalParser.parseWithFastParser(ch, off, len);
    }
    return BigDecimalParser.parse(ch, off, len);
}","BigDecimal","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],int,int,boolean).ch","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],int,int,boolean).off","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],int,int,boolean).len","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],int,int,boolean).useFastParser","Parameter_4","Belong to com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[])","Method","* @param ch a char array with text that makes up a number
     * @return a BigDecimal
     * @throws NumberFormatException if the char array cannot be represented by a BigDecimal
     *
     * @deprecated Since 2.17 use {@link #parseBigDecimal(char[], boolean)} instead","// since 2.17
@Deprecated
public static BigDecimal parseBigDecimal(final char[] ch) throws NumberFormatException {
    return BigDecimalParser.parse(ch);
}","BigDecimal","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[]).ch","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],boolean)","Method","* @param ch a char array with text that makes up a number
     * @param useFastParser whether to use custom fast parser (true) or JDK default (false) parser
     * @return a BigDecimal
     * @throws NumberFormatException if the char array cannot be represented by a BigDecimal
     * @since v2.15","public static BigDecimal parseBigDecimal(final char[] ch, final boolean useFastParser) throws NumberFormatException {
    if (useFastParser) {
        return BigDecimalParser.parseWithFastParser(ch, 0, ch.length);
    }
    return BigDecimalParser.parse(ch);
}","BigDecimal","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],boolean).ch","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],boolean).useFastParser","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigInteger(String)","Method","* @param s a string representing a number to parse
     * @return a BigInteger
     * @throws NumberFormatException if string cannot be represented by a BigInteger
     * @since v2.14
     *
     * @deprecated Since 2.17 use {@link #parseBigInteger(String, boolean)} instead","// since 2.17
@Deprecated
public static BigInteger parseBigInteger(final String s) throws NumberFormatException {
    return parseBigInteger(s, false);
}","BigInteger","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigInteger(String).s","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseBigInteger(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigInteger(String,boolean)","Method","* @param s a string representing a number to parse
     * @param useFastParser whether to use custom fast parser (true) or JDK default (false) parser
     * @return a BigInteger
     * @throws NumberFormatException if string cannot be represented by a BigInteger
     * @since v2.15","public static BigInteger parseBigInteger(final String s, final boolean useFastParser) throws NumberFormatException {
    if (useFastParser) {
        return BigIntegerParser.parseWithFastParser(s);
    }
    return new BigInteger(s);
}","BigInteger","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigInteger(String,boolean).s","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseBigInteger(String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigInteger(String,boolean).useFastParser","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.parseBigInteger(String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigIntegerWithRadix(String,int,boolean)","Method","* @param s a string representing a number to parse
     * @param radix for parse
     * @param useFastParser whether to use custom fast parser (true) or JDK default (false) parser
     * @return a BigInteger
     * @throws NumberFormatException if string cannot be represented by a BigInteger
     * @since v2.15","public static BigInteger parseBigIntegerWithRadix(final String s, final int radix, final boolean useFastParser) throws NumberFormatException {
    if (useFastParser) {
        return BigIntegerParser.parseWithFastParser(s, radix);
    }
    return new BigInteger(s, radix);
}","BigInteger","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigIntegerWithRadix(String,int,boolean).s","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.parseBigIntegerWithRadix(String,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigIntegerWithRadix(String,int,boolean).radix","Parameter_2","Belong to com.fasterxml.jackson.core.io.NumberInput.parseBigIntegerWithRadix(String,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.parseBigIntegerWithRadix(String,int,boolean).useFastParser","Parameter_3","Belong to com.fasterxml.jackson.core.io.NumberInput.parseBigIntegerWithRadix(String,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.looksLikeValidNumber(String)","Method","* Method called to check whether given pattern looks like a valid Java
     * Number (which is bit looser definition than valid JSON Number).
     * Used as pre-parsing check when parsing ""Stringified numbers"".
     *<p>
     * The differences to stricter JSON Number are:
     * <ul>
     *   <li>Positive sign is allowed
     *     </li>
     *   <li>Leading zeroes are allowed
     *     </li>
     * </ul>
     *<p>
     * Note: no trimming ({@code String.trim()}) nor null checks are performed
     * on String passed.
     *<p>
     * Note: this method returning {@code true} DOES NOT GUARANTEE String is valid
     * number but just that it looks close enough.
     *
     * @param s String to validate
     *
     * @return True if String looks like valid Java number; false otherwise.
     *
     * @since 2.17","public static boolean looksLikeValidNumber(final String s) {
    // While PATTERN_FLOAT handles most cases we can optimize some simple ones:
    if (s == null || s.isEmpty()) {
        return false;
    }
    if (s.length() == 1) {
        char c = s.charAt(0);
        return (c <= '9') && (c >= '0');
    }
    return PATTERN_FLOAT.matcher(s).matches() || PATTERN_FLOAT_TRAILING_DOT.matcher(s).matches();
}","boolean","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.io.NumberInput.looksLikeValidNumber(String).s","Parameter_1","Belong to com.fasterxml.jackson.core.io.NumberInput.looksLikeValidNumber(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder","Abstract Class","* Since 2.10, Builder class is offered for creating token stream factories
 * with difference configurations: with 3.x they will be fully immutable.
 *
 * @since 2.10","Abstract Class do not obtain Source Code","No return type","public , abstract ","",""
"com.fasterxml.jackson.core.TSFBuilder.DEFAULT_FACTORY_FEATURE_FLAGS","Field","* Bitfield (set of flags) of all factory features that are enabled by default.","protected final static int DEFAULT_FACTORY_FEATURE_FLAGS = JsonFactory.Feature.collectDefaults();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.DEFAULT_PARSER_FEATURE_FLAGS","Field","* Bitfield (set of flags) of all parser features that are enabled
     * by default.","protected final static int DEFAULT_PARSER_FEATURE_FLAGS = JsonParser.Feature.collectDefaults();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.DEFAULT_GENERATOR_FEATURE_FLAGS","Field","* Bitfield (set of flags) of all generator features that are enabled
     * by default.","protected final static int DEFAULT_GENERATOR_FEATURE_FLAGS = JsonGenerator.Feature.collectDefaults();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._factoryFeatures","Field","* Set of {@link com.fasterxml.jackson.core.JsonFactory.Feature}s enabled,
     * as bitmask.","protected int _factoryFeatures;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._streamReadFeatures","Field","* Set of {@link JsonParser.Feature}s enabled, as bitmask.","protected int _streamReadFeatures;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._streamWriteFeatures","Field","* Set of {@link JsonGenerator.Feature}s enabled, as bitmask.","protected int _streamWriteFeatures;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._recyclerPool","Field","* @since 2.16","protected RecyclerPool<BufferRecycler> _recyclerPool;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._inputDecorator","Field","* Optional helper object that may decorate input sources, to do
     * additional processing on input during parsing.","protected InputDecorator _inputDecorator;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._outputDecorator","Field","* Optional helper object that may decorate output object, to do
     * additional processing on output during content generation.","protected OutputDecorator _outputDecorator;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._streamReadConstraints","Field","* {@link StreamReadConstraints} to use.
     *
     * @since 2.15","protected StreamReadConstraints _streamReadConstraints;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._streamWriteConstraints","Field","* {@link StreamWriteConstraints} to use.
     *
     * @since 2.16","protected StreamWriteConstraints _streamWriteConstraints;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._errorReportConfiguration","Field","* {@link ErrorReportConfiguration} to use.
     *
     * @since 2.16","protected ErrorReportConfiguration _errorReportConfiguration;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._generatorDecorators","Field","* @since 2.16","protected List<JsonGeneratorDecorator> _generatorDecorators;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._copy(List)","Method","@since 2.16","protected static <T> List<T> _copy(List<T> src) {
    if (src == null) {
        return src;
    }
    return new ArrayList<>(src);
}","List","protected , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._copy(List).src","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder._copy(List)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.factoryFeaturesMask()","Method","No Comment","public int factoryFeaturesMask() {
    return _factoryFeatures;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.streamReadFeatures()","Method","No Comment","public int streamReadFeatures() {
    return _streamReadFeatures;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.streamWriteFeatures()","Method","No Comment","public int streamWriteFeatures() {
    return _streamWriteFeatures;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.recyclerPool()","Method","No Comment","public RecyclerPool<BufferRecycler> recyclerPool() {
    return _recyclerPool;
}","RecyclerPool","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.inputDecorator()","Method","No Comment","public InputDecorator inputDecorator() {
    return _inputDecorator;
}","InputDecorator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.outputDecorator()","Method","No Comment","public OutputDecorator outputDecorator() {
    return _outputDecorator;
}","OutputDecorator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(JsonFactory.Feature)","Method","No Comment","public B enable(JsonFactory.Feature f) {
    _factoryFeatures |= f.getMask();
    return _this();
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(JsonFactory.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.enable(JsonFactory.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(JsonFactory.Feature)","Method","No Comment","public B disable(JsonFactory.Feature f) {
    _factoryFeatures &= ~f.getMask();
    return _this();
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(JsonFactory.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.disable(JsonFactory.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.configure(JsonFactory.Feature,boolean)","Method","No Comment","public B configure(JsonFactory.Feature f, boolean state) {
    return state ? enable(f) : disable(f);
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.configure(JsonFactory.Feature,boolean).f","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.configure(JsonFactory.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.configure(JsonFactory.Feature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.core.TSFBuilder.configure(JsonFactory.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(StreamReadFeature)","Method","No Comment","public B enable(StreamReadFeature f) {
    _streamReadFeatures |= f.mappedFeature().getMask();
    return _this();
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(StreamReadFeature).f","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.enable(StreamReadFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(StreamReadFeature,StreamReadFeature[])","Method","No Comment","public B enable(StreamReadFeature first, StreamReadFeature... other) {
    _streamReadFeatures |= first.mappedFeature().getMask();
    for (StreamReadFeature f : other) {
        _streamReadFeatures |= f.mappedFeature().getMask();
    }
    return _this();
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(StreamReadFeature,StreamReadFeature[]).first","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.enable(StreamReadFeature,StreamReadFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(StreamReadFeature,StreamReadFeature[]).other","Parameter_2","Belong to com.fasterxml.jackson.core.TSFBuilder.enable(StreamReadFeature,StreamReadFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(StreamReadFeature)","Method","No Comment","public B disable(StreamReadFeature f) {
    _streamReadFeatures &= ~f.mappedFeature().getMask();
    return _this();
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(StreamReadFeature).f","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.disable(StreamReadFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(StreamReadFeature,StreamReadFeature[])","Method","No Comment","public B disable(StreamReadFeature first, StreamReadFeature... other) {
    _streamReadFeatures &= ~first.mappedFeature().getMask();
    for (StreamReadFeature f : other) {
        _streamReadFeatures &= ~f.mappedFeature().getMask();
    }
    return _this();
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(StreamReadFeature,StreamReadFeature[]).first","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.disable(StreamReadFeature,StreamReadFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(StreamReadFeature,StreamReadFeature[]).other","Parameter_2","Belong to com.fasterxml.jackson.core.TSFBuilder.disable(StreamReadFeature,StreamReadFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.configure(StreamReadFeature,boolean)","Method","No Comment","public B configure(StreamReadFeature f, boolean state) {
    return state ? enable(f) : disable(f);
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.configure(StreamReadFeature,boolean).f","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.configure(StreamReadFeature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.configure(StreamReadFeature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.core.TSFBuilder.configure(StreamReadFeature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(StreamWriteFeature)","Method","No Comment","public B enable(StreamWriteFeature f) {
    _streamWriteFeatures |= f.mappedFeature().getMask();
    return _this();
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(StreamWriteFeature).f","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.enable(StreamWriteFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(StreamWriteFeature,StreamWriteFeature[])","Method","No Comment","public B enable(StreamWriteFeature first, StreamWriteFeature... other) {
    _streamWriteFeatures |= first.mappedFeature().getMask();
    for (StreamWriteFeature f : other) {
        _streamWriteFeatures |= f.mappedFeature().getMask();
    }
    return _this();
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(StreamWriteFeature,StreamWriteFeature[]).first","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.enable(StreamWriteFeature,StreamWriteFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(StreamWriteFeature,StreamWriteFeature[]).other","Parameter_2","Belong to com.fasterxml.jackson.core.TSFBuilder.enable(StreamWriteFeature,StreamWriteFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(StreamWriteFeature)","Method","No Comment","public B disable(StreamWriteFeature f) {
    _streamWriteFeatures &= ~f.mappedFeature().getMask();
    return _this();
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(StreamWriteFeature).f","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.disable(StreamWriteFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(StreamWriteFeature,StreamWriteFeature[])","Method","No Comment","public B disable(StreamWriteFeature first, StreamWriteFeature... other) {
    _streamWriteFeatures &= ~first.mappedFeature().getMask();
    for (StreamWriteFeature f : other) {
        _streamWriteFeatures &= ~f.mappedFeature().getMask();
    }
    return _this();
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(StreamWriteFeature,StreamWriteFeature[]).first","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.disable(StreamWriteFeature,StreamWriteFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(StreamWriteFeature,StreamWriteFeature[]).other","Parameter_2","Belong to com.fasterxml.jackson.core.TSFBuilder.disable(StreamWriteFeature,StreamWriteFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.configure(StreamWriteFeature,boolean)","Method","No Comment","public B configure(StreamWriteFeature f, boolean state) {
    return state ? enable(f) : disable(f);
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.configure(StreamWriteFeature,boolean).f","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.configure(StreamWriteFeature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.configure(StreamWriteFeature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.core.TSFBuilder.configure(StreamWriteFeature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(JsonReadFeature)","Method","No Comment","public B enable(JsonReadFeature f) {
    return _failNonJSON(f);
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(JsonReadFeature).f","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.enable(JsonReadFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(JsonReadFeature,JsonReadFeature[])","Method","No Comment","public B enable(JsonReadFeature first, JsonReadFeature... other) {
    return _failNonJSON(first);
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(JsonReadFeature,JsonReadFeature[]).first","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.enable(JsonReadFeature,JsonReadFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(JsonReadFeature,JsonReadFeature[]).other","Parameter_2","Belong to com.fasterxml.jackson.core.TSFBuilder.enable(JsonReadFeature,JsonReadFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(JsonReadFeature)","Method","No Comment","public B disable(JsonReadFeature f) {
    return _failNonJSON(f);
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(JsonReadFeature).f","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.disable(JsonReadFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(JsonReadFeature,JsonReadFeature[])","Method","No Comment","public B disable(JsonReadFeature first, JsonReadFeature... other) {
    return _failNonJSON(first);
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(JsonReadFeature,JsonReadFeature[]).first","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.disable(JsonReadFeature,JsonReadFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(JsonReadFeature,JsonReadFeature[]).other","Parameter_2","Belong to com.fasterxml.jackson.core.TSFBuilder.disable(JsonReadFeature,JsonReadFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.configure(JsonReadFeature,boolean)","Method","No Comment","public B configure(JsonReadFeature f, boolean state) {
    return _failNonJSON(f);
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.configure(JsonReadFeature,boolean).f","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.configure(JsonReadFeature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.configure(JsonReadFeature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.core.TSFBuilder.configure(JsonReadFeature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._failNonJSON(Object)","Method","No Comment","private B _failNonJSON(Object feature) {
    throw new IllegalArgumentException(""Feature "" + feature.getClass().getName() + ""#"" + feature.toString() + "" not supported for non-JSON backend"");
}","TSFBuilder<F, B>","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._failNonJSON(Object).feature","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder._failNonJSON(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(JsonWriteFeature)","Method","No Comment","public B enable(JsonWriteFeature f) {
    return _failNonJSON(f);
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(JsonWriteFeature).f","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.enable(JsonWriteFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(JsonWriteFeature,JsonWriteFeature[])","Method","No Comment","public B enable(JsonWriteFeature first, JsonWriteFeature... other) {
    return _failNonJSON(first);
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(JsonWriteFeature,JsonWriteFeature[]).first","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.enable(JsonWriteFeature,JsonWriteFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.enable(JsonWriteFeature,JsonWriteFeature[]).other","Parameter_2","Belong to com.fasterxml.jackson.core.TSFBuilder.enable(JsonWriteFeature,JsonWriteFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(JsonWriteFeature)","Method","No Comment","public B disable(JsonWriteFeature f) {
    return _failNonJSON(f);
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(JsonWriteFeature).f","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.disable(JsonWriteFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(JsonWriteFeature,JsonWriteFeature[])","Method","No Comment","public B disable(JsonWriteFeature first, JsonWriteFeature... other) {
    return _failNonJSON(first);
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(JsonWriteFeature,JsonWriteFeature[]).first","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.disable(JsonWriteFeature,JsonWriteFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.disable(JsonWriteFeature,JsonWriteFeature[]).other","Parameter_2","Belong to com.fasterxml.jackson.core.TSFBuilder.disable(JsonWriteFeature,JsonWriteFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.configure(JsonWriteFeature,boolean)","Method","No Comment","public B configure(JsonWriteFeature f, boolean state) {
    return _failNonJSON(f);
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.configure(JsonWriteFeature,boolean).f","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.configure(JsonWriteFeature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.configure(JsonWriteFeature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.core.TSFBuilder.configure(JsonWriteFeature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.recyclerPool(RecyclerPool)","Method","* @param p RecyclerPool to use for buffer allocation
     *
     * @return this builder (for call chaining)
     *
     * @since 2.16","public B recyclerPool(RecyclerPool<BufferRecycler> p) {
    _recyclerPool = Objects.requireNonNull(p);
    return _this();
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.recyclerPool(RecyclerPool).p","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.recyclerPool(RecyclerPool)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.inputDecorator(InputDecorator)","Method","No Comment","public B inputDecorator(InputDecorator dec) {
    _inputDecorator = dec;
    return _this();
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.inputDecorator(InputDecorator).dec","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.inputDecorator(InputDecorator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.outputDecorator(OutputDecorator)","Method","No Comment","public B outputDecorator(OutputDecorator dec) {
    _outputDecorator = dec;
    return _this();
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.outputDecorator(OutputDecorator).dec","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.outputDecorator(OutputDecorator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.addDecorator(JsonGeneratorDecorator)","Method","No Comment","public B addDecorator(JsonGeneratorDecorator decorator) {
    if (_generatorDecorators == null) {
        _generatorDecorators = new ArrayList<>();
    }
    _generatorDecorators.add(decorator);
    return _this();
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.addDecorator(JsonGeneratorDecorator).decorator","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.addDecorator(JsonGeneratorDecorator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.streamReadConstraints(StreamReadConstraints)","Method","* Sets the constraints for streaming reads.
     *
     * @param streamReadConstraints constraints for streaming reads
     * @return this builder (for call chaining)
     * @since 2.15","public B streamReadConstraints(StreamReadConstraints streamReadConstraints) {
    _streamReadConstraints = Objects.requireNonNull(streamReadConstraints);
    return _this();
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.streamReadConstraints(StreamReadConstraints).streamReadConstraints","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.streamReadConstraints(StreamReadConstraints)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.streamWriteConstraints(StreamWriteConstraints)","Method","* Sets the constraints for streaming writes.
     *
     * @param streamWriteConstraints constraints for streaming reads
     * @return this builder (for call chaining)
     * @since 2.16","public B streamWriteConstraints(StreamWriteConstraints streamWriteConstraints) {
    _streamWriteConstraints = Objects.requireNonNull(streamWriteConstraints);
    return _this();
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.streamWriteConstraints(StreamWriteConstraints).streamWriteConstraints","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.streamWriteConstraints(StreamWriteConstraints)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.errorReportConfiguration(ErrorReportConfiguration)","Method","* Sets the configuration for error reporting.
     *
     * @param errorReportConfiguration configuration values used for handling erroneous token inputs. 
     * @return this builder (for call chaining)
     * @since 2.16","public B errorReportConfiguration(ErrorReportConfiguration errorReportConfiguration) {
    _errorReportConfiguration = Objects.requireNonNull(errorReportConfiguration);
    return _this();
}","TSFBuilder<F, B>","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.errorReportConfiguration(ErrorReportConfiguration).errorReportConfiguration","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.errorReportConfiguration(ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.build()","Abstract Method","* Method for constructing actual {@link TokenStreamFactory} instance, given
     * configuration.
     *
     * @return {@link TokenStreamFactory} build based on current configuration","public abstract F build();","JsonFactory","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._this()","Method","silly convenience cast method we need","@SuppressWarnings(""unchecked"")
protected final B _this() {
    return (B) this;
}","TSFBuilder<F, B>","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._legacyEnable(JsonParser.Feature)","Method","No Comment","protected void _legacyEnable(JsonParser.Feature f) {
    if (f != null) {
        _streamReadFeatures |= f.getMask();
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._legacyEnable(JsonParser.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder._legacyEnable(JsonParser.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._legacyDisable(JsonParser.Feature)","Method","No Comment","protected void _legacyDisable(JsonParser.Feature f) {
    if (f != null) {
        _streamReadFeatures &= ~f.getMask();
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._legacyDisable(JsonParser.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder._legacyDisable(JsonParser.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._legacyEnable(JsonGenerator.Feature)","Method","No Comment","protected void _legacyEnable(JsonGenerator.Feature f) {
    if (f != null) {
        _streamWriteFeatures |= f.getMask();
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._legacyEnable(JsonGenerator.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder._legacyEnable(JsonGenerator.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._legacyDisable(JsonGenerator.Feature)","Method","No Comment","protected void _legacyDisable(JsonGenerator.Feature f) {
    if (f != null) {
        _streamWriteFeatures &= ~f.getMask();
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder._legacyDisable(JsonGenerator.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder._legacyDisable(JsonGenerator.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.<init>()","Constructor","No Comment","protected TSFBuilder() {
    this(DEFAULT_FACTORY_FEATURE_FLAGS, DEFAULT_PARSER_FEATURE_FLAGS, DEFAULT_GENERATOR_FEATURE_FLAGS);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.<init>(JsonFactory)","Constructor","No Comment","protected TSFBuilder(JsonFactory base) {
    this(base._factoryFeatures, base._parserFeatures, base._generatorFeatures);
    _inputDecorator = base._inputDecorator;
    _outputDecorator = base._outputDecorator;
    _streamReadConstraints = base._streamReadConstraints;
    _streamWriteConstraints = base._streamWriteConstraints;
    _errorReportConfiguration = base._errorReportConfiguration;
    _generatorDecorators = _copy(base._generatorDecorators);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.<init>(JsonFactory).base","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.<init>(JsonFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.<init>(int,int,int)","Constructor","No Comment","protected TSFBuilder(int factoryFeatures, int parserFeatures, int generatorFeatures) {
    _recyclerPool = JsonRecyclerPools.defaultPool();
    _factoryFeatures = factoryFeatures;
    _streamReadFeatures = parserFeatures;
    _streamWriteFeatures = generatorFeatures;
    _inputDecorator = null;
    _outputDecorator = null;
    _streamReadConstraints = StreamReadConstraints.defaults();
    _streamWriteConstraints = StreamWriteConstraints.defaults();
    _errorReportConfiguration = ErrorReportConfiguration.defaults();
    _generatorDecorators = null;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.<init>(int,int,int).factoryFeatures","Parameter_1","Belong to com.fasterxml.jackson.core.TSFBuilder.<init>(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.<init>(int,int,int).parserFeatures","Parameter_2","Belong to com.fasterxml.jackson.core.TSFBuilder.<init>(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TSFBuilder.<init>(int,int,int).generatorFeatures","Parameter_3","Belong to com.fasterxml.jackson.core.TSFBuilder.<init>(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec","Abstract Class","* Abstract class that defines the interface that {@link JsonParser} and
 * {@link JsonGenerator} use to serialize and deserialize regular
 * Java objects (POJOs aka Beans).
 *<p>
 * The standard implementation of this class is
 * <code>com.fasterxml.jackson.databind.ObjectMapper</code>,
 * defined in the ""jackson-databind"".","Abstract Class do not obtain Source Code","No return type","public , abstract ","com.fasterxml.jackson.core.TreeCodec","com.fasterxml.jackson.core.Versioned"
"com.fasterxml.jackson.core.ObjectCodec.version()","Abstract Method","Since 2.3","@Override
public abstract Version version();","Version","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.readValue(JsonParser,Class)","Abstract Method","* Method to deserialize JSON content into a non-container
     * type (it can be an array type, however): typically a bean, array
     * or a wrapper type (like {@link java.lang.Boolean}).
     *<p>
     * Note: this method should NOT be used if the result type is a
     * container ({@link java.util.Collection} or {@link java.util.Map}.
     * The reason is that due to type erasure, key and value types
     * cannot be introspected when using this method.
     *
     * @param <T> Nominal parameter for target type
     *
     * @param p Parser to use for decoding content to bind
     * @param valueType Java value type to bind content to
     *
     * @return Value deserialized
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public abstract <T> T readValue(JsonParser p, Class<T> valueType) throws IOException;","Object","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.readValue(JsonParser,Class).p","Parameter_1","Belong to com.fasterxml.jackson.core.ObjectCodec.readValue(JsonParser,Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.readValue(JsonParser,Class).valueType","Parameter_2","Belong to com.fasterxml.jackson.core.ObjectCodec.readValue(JsonParser,Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.readValue(JsonParser,TypeReference)","Abstract Method","* Method to deserialize JSON content into a Java type, reference
     * to which is passed as argument. Type is passed using so-called
     * ""super type token""
     * and specifically needs to be used if the root type is a
     * parameterized (generic) container type.
     *
     * @param <T> Nominal parameter for target type
     *
     * @param p Parser to use for decoding content to bind
     * @param valueTypeRef Java value type to bind content to
     *
     * @return Value deserialized
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public abstract <T> T readValue(JsonParser p, TypeReference<T> valueTypeRef) throws IOException;","Object","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.readValue(JsonParser,TypeReference).p","Parameter_1","Belong to com.fasterxml.jackson.core.ObjectCodec.readValue(JsonParser,TypeReference)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.readValue(JsonParser,TypeReference).valueTypeRef","Parameter_2","Belong to com.fasterxml.jackson.core.ObjectCodec.readValue(JsonParser,TypeReference)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.readValue(JsonParser,ResolvedType)","Abstract Method","* Method to deserialize JSON content into a POJO, type specified
     * with fully resolved type object (so it can be a generic type,
     * including containers like {@link java.util.Collection} and
     * {@link java.util.Map}).
     *
     * @param <T> Nominal parameter for target type
     *
     * @param p Parser to use for decoding content to bind
     * @param valueType Java value type to bind content to
     *
     * @return Value deserialized
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public abstract <T> T readValue(JsonParser p, ResolvedType valueType) throws IOException;","Object","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.readValue(JsonParser,ResolvedType).p","Parameter_1","Belong to com.fasterxml.jackson.core.ObjectCodec.readValue(JsonParser,ResolvedType)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.readValue(JsonParser,ResolvedType).valueType","Parameter_2","Belong to com.fasterxml.jackson.core.ObjectCodec.readValue(JsonParser,ResolvedType)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.readValues(JsonParser,Class)","Abstract Method","* Method for reading sequence of Objects from parser stream,
     * all with same specified value type.
     *
     * @param <T> Nominal parameter for target type
     *
     * @param p Parser to use for decoding content to bind
     * @param valueType Java value type to bind content to
     *
     * @return Iterator for incrementally deserializing values
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public abstract <T> Iterator<T> readValues(JsonParser p, Class<T> valueType) throws IOException;","Iterator","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.readValues(JsonParser,Class).p","Parameter_1","Belong to com.fasterxml.jackson.core.ObjectCodec.readValues(JsonParser,Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.readValues(JsonParser,Class).valueType","Parameter_2","Belong to com.fasterxml.jackson.core.ObjectCodec.readValues(JsonParser,Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.readValues(JsonParser,TypeReference)","Abstract Method","* Method for reading sequence of Objects from parser stream,
     * all with same specified value type.
     *
     * @param <T> Nominal parameter for target type
     *
     * @param p Parser to use for decoding content to bind
     * @param valueTypeRef Java value type to bind content to
     *
     * @return Iterator for incrementally deserializing values
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public abstract <T> Iterator<T> readValues(JsonParser p, TypeReference<T> valueTypeRef) throws IOException;","Iterator","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.readValues(JsonParser,TypeReference).p","Parameter_1","Belong to com.fasterxml.jackson.core.ObjectCodec.readValues(JsonParser,TypeReference)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.readValues(JsonParser,TypeReference).valueTypeRef","Parameter_2","Belong to com.fasterxml.jackson.core.ObjectCodec.readValues(JsonParser,TypeReference)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.readValues(JsonParser,ResolvedType)","Abstract Method","* Method for reading sequence of Objects from parser stream,
     * all with same specified value type.
     *
     * @param <T> Nominal parameter for target type
     *
     * @param p Parser to use for decoding content to bind
     * @param valueType Java value type to bind content to
     *
     * @return Iterator for incrementally deserializing values
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public abstract <T> Iterator<T> readValues(JsonParser p, ResolvedType valueType) throws IOException;","Iterator","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.readValues(JsonParser,ResolvedType).p","Parameter_1","Belong to com.fasterxml.jackson.core.ObjectCodec.readValues(JsonParser,ResolvedType)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.readValues(JsonParser,ResolvedType).valueType","Parameter_2","Belong to com.fasterxml.jackson.core.ObjectCodec.readValues(JsonParser,ResolvedType)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.writeValue(JsonGenerator,Object)","Abstract Method","* Method to serialize given Java Object, using generator
     * provided.
     *
     * @param gen Generator to use for serializing value
     * @param value Value to serialize
     *
     * @throws IOException for low-level write issues, or
     *   {@link JsonGenerationException} for decoding problems","public abstract void writeValue(JsonGenerator gen, Object value) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.writeValue(JsonGenerator,Object).gen","Parameter_1","Belong to com.fasterxml.jackson.core.ObjectCodec.writeValue(JsonGenerator,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.writeValue(JsonGenerator,Object).value","Parameter_2","Belong to com.fasterxml.jackson.core.ObjectCodec.writeValue(JsonGenerator,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.readTree(JsonParser)","Abstract Method","* Method for deserializing JSON content as tree expressed
     * using set of {@link TreeNode} instances. Returns
     * root of the resulting tree (where root can consist
     * of just a single node if the current event is a
     * value event, not container). Empty or whitespace
     * documents return null.
     *
     * @return next tree from {@code p}, or {@code null} if empty.
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","@Override
public abstract <T extends TreeNode> T readTree(JsonParser p) throws IOException;","TreeNode","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.readTree(JsonParser).p","Parameter_1","Belong to com.fasterxml.jackson.core.ObjectCodec.readTree(JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.writeTree(JsonGenerator,TreeNode)","Abstract Method","* Method for serializing JSON content from given Tree instance, using
     * specified generator.
     *
     * @param gen Generator to use for serializing value
     * @param tree Tree to serialize
     *
     * @throws IOException for low-level write issues, or
     *   {@link JsonGenerationException} for decoding problems","@Override
public abstract void writeTree(JsonGenerator gen, TreeNode tree) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.writeTree(JsonGenerator,TreeNode).gen","Parameter_1","Belong to com.fasterxml.jackson.core.ObjectCodec.writeTree(JsonGenerator,TreeNode)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.writeTree(JsonGenerator,TreeNode).tree","Parameter_2","Belong to com.fasterxml.jackson.core.ObjectCodec.writeTree(JsonGenerator,TreeNode)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.createObjectNode()","Abstract Method","* Method for construct root level Object nodes
     * for Tree Model instances.
     *
     * @return Object node created","@Override
public abstract TreeNode createObjectNode();","TreeNode","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.createArrayNode()","Abstract Method","* Method for construct root level Array nodes
     * for Tree Model instances.
     *
     * @return Array node created","@Override
public abstract TreeNode createArrayNode();","TreeNode","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.treeAsTokens(TreeNode)","Abstract Method","* Method for constructing a {@link JsonParser} for reading
     * contents of a JSON tree, as if it was external serialized
     * JSON content.
     *
     * @param n Content to traverse over
     *
     * @return Parser constructed for traversing over contents of specified node","@Override
public abstract JsonParser treeAsTokens(TreeNode n);","JsonParser","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.treeAsTokens(TreeNode).n","Parameter_1","Belong to com.fasterxml.jackson.core.ObjectCodec.treeAsTokens(TreeNode)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.treeToValue(TreeNode,Class)","Abstract Method","* Convenience method for converting given JSON tree into instance of specified
     * value type. This is equivalent to first constructing a {@link JsonParser} to
     * iterate over contents of the tree, and using that parser for data binding.
     *
     * @param <T> Nominal parameter for target type
     *
     * @param n Tree to convert
     * @param valueType Java target value type to convert content to
     *
     * @return Converted value instance
     *
     * @throws JsonProcessingException if structural conversion fails","public abstract <T> T treeToValue(TreeNode n, Class<T> valueType) throws JsonProcessingException;","Object","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.treeToValue(TreeNode,Class).n","Parameter_1","Belong to com.fasterxml.jackson.core.ObjectCodec.treeToValue(TreeNode,Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.treeToValue(TreeNode,Class).valueType","Parameter_2","Belong to com.fasterxml.jackson.core.ObjectCodec.treeToValue(TreeNode,Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.getJsonFactory()","Method","* @deprecated Use {@link #getFactory} instead.
     *
     * @return Underlying {@link JsonFactory} instance","@Deprecated
public JsonFactory getJsonFactory() {
    return getFactory();
}","JsonFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.getFactory()","Method","* Accessor for finding underlying data format factory
     * ({@link JsonFactory}) codec will use for data binding.
     *
     * @return Underlying {@link JsonFactory} instance","public JsonFactory getFactory() {
    return getJsonFactory();
}","JsonFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ObjectCodec.<init>()","Constructor","No Comment","protected ObjectCodec() {
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString","Interface","* Interface that defines how Jackson package can interact with efficient
 * pre-serialized or lazily-serialized and reused String representations.
 * Typically implementations store possible serialized version(s) so that
 * serialization of String can be done more efficiently, especially when
 * used multiple times.
 *<p>
 * Note that ""quoted"" in methods means quoting of 'special' characters using
 * JSON backlash notation (and not use of actual double quotes).
 *
 * @see com.fasterxml.jackson.core.io.SerializedString","Interface do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.SerializableString.getValue()","Abstract Method","* Returns unquoted String that this object represents (and offers
     * serialized forms for)
     *
     * @return Unquoted String","String getValue();","String","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.charLength()","Abstract Method","* Returns length of the (unquoted) String as characters.
     * Functionally equivalent to:
     *<pre>
     *   getValue().length();
     *</pre>
     *
     * @return Length of the String in characters","int charLength();","int","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.asQuotedChars()","Abstract Method","* Returns JSON quoted form of the String, as character array.
     * Result can be embedded as-is in textual JSON as property name or JSON String.
     *
     * @return JSON quoted form of the String as {@code char[]}","char[] asQuotedChars();","char[]","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.asUnquotedUTF8()","Abstract Method","* Returns UTF-8 encoded version of unquoted String.
     * Functionally equivalent to (but more efficient than):
     *<pre>
     * getValue().getBytes(""UTF-8"");
     *</pre>
     *
     * @return UTF-8 encoded version of String, without any escaping","byte[] asUnquotedUTF8();","byte[]","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.asQuotedUTF8()","Abstract Method","* Returns UTF-8 encoded version of JSON-quoted String.
     * Functionally equivalent to (but more efficient than):
     *<pre>
     * new String(asQuotedChars()).getBytes(""UTF-8"");
     *</pre>
     *
     * @return UTF-8 encoded version of JSON-escaped String","byte[] asQuotedUTF8();","byte[]","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.appendQuotedUTF8(byte[],int)","Abstract Method","* Method that will append quoted UTF-8 bytes of this String into given
     * buffer, if there is enough room; if not, returns -1.
     * Functionally equivalent to:
     *<pre>
     *  byte[] bytes = str.asQuotedUTF8();
     *  System.arraycopy(bytes, 0, buffer, offset, bytes.length);
     *  return bytes.length;
     *</pre>
     *
     * @param buffer Buffer to append JSON-escaped String into
     * @param offset Offset in {@code buffer} to append String at
     *
     * @return Number of bytes appended, if successful, otherwise -1","int appendQuotedUTF8(byte[] buffer, int offset);","int","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.appendQuotedUTF8(byte[],int).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.SerializableString.appendQuotedUTF8(byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.appendQuotedUTF8(byte[],int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.SerializableString.appendQuotedUTF8(byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.appendQuoted(char[],int)","Abstract Method","* Method that will append quoted characters of this String into given
     * buffer. Functionally equivalent to:
     *<pre>
     *  char[] ch = str.asQuotedChars();
     *  System.arraycopy(ch, 0, buffer, offset, ch.length);
     *  return ch.length;
     *</pre>
     *
     * @param buffer Buffer to append JSON-escaped String into
     * @param offset Offset in {@code buffer} to append String at
     *
     * @return Number of characters appended, if successful, otherwise -1","int appendQuoted(char[] buffer, int offset);","int","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.appendQuoted(char[],int).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.SerializableString.appendQuoted(char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.appendQuoted(char[],int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.SerializableString.appendQuoted(char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.appendUnquotedUTF8(byte[],int)","Abstract Method","* Method that will append unquoted ('raw') UTF-8 bytes of this String into given
     * buffer. Functionally equivalent to:
     *<pre>
     *  byte[] bytes = str.asUnquotedUTF8();
     *  System.arraycopy(bytes, 0, buffer, offset, bytes.length);
     *  return bytes.length;
     *</pre>
     *
     * @param buffer Buffer to append literal (unescaped) String into
     * @param offset Offset in {@code buffer} to append String at
     *
     * @return Number of bytes appended, if successful, otherwise -1","int appendUnquotedUTF8(byte[] buffer, int offset);","int","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.appendUnquotedUTF8(byte[],int).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.SerializableString.appendUnquotedUTF8(byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.appendUnquotedUTF8(byte[],int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.SerializableString.appendUnquotedUTF8(byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.appendUnquoted(char[],int)","Abstract Method","* Method that will append unquoted characters of this String into given
     * buffer. Functionally equivalent to:
     *<pre>
     *  char[] ch = str.getValue().toCharArray();
     *  System.arraycopy(bytes, 0, buffer, offset, ch.length);
     *  return ch.length;
     *</pre>
     *
     * @param buffer Buffer to append literal (unescaped) String into
     * @param offset Offset in {@code buffer} to append String at
     *
     * @return Number of characters appended, if successful, otherwise -1","int appendUnquoted(char[] buffer, int offset);","int","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.appendUnquoted(char[],int).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.SerializableString.appendUnquoted(char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.appendUnquoted(char[],int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.SerializableString.appendUnquoted(char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.writeQuotedUTF8(OutputStream)","Abstract Method","* Method for writing JSON-escaped UTF-8 encoded String value using given
     * {@link java.io.OutputStream}.
     *
     * @param out {@link java.io.OutputStream} to write String into
     *
     * @return Number of bytes written
     *
     * @throws IOException if underlying stream write fails","int writeQuotedUTF8(OutputStream out) throws IOException;","int","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.writeQuotedUTF8(OutputStream).out","Parameter_1","Belong to com.fasterxml.jackson.core.SerializableString.writeQuotedUTF8(OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.writeUnquotedUTF8(OutputStream)","Abstract Method","* Method for writing unescaped UTF-8 encoded String value using given
     * {@link java.io.OutputStream}.
     *
     * @param out {@link java.io.OutputStream} to write String into
     *
     * @return Number of bytes written
     *
     * @throws IOException if underlying stream write fails","int writeUnquotedUTF8(OutputStream out) throws IOException;","int","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.writeUnquotedUTF8(OutputStream).out","Parameter_1","Belong to com.fasterxml.jackson.core.SerializableString.writeUnquotedUTF8(OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.putQuotedUTF8(ByteBuffer)","Abstract Method","* Method for appending JSON-escaped UTF-8 encoded String value into given
     * {@link java.nio.ByteBuffer}, if it fits.
     *
     * @param buffer {@link java.nio.ByteBuffer} to append String into
     *
     * @return Number of bytes put, if contents fit, otherwise -1
     *
     * @throws IOException if underlying buffer append operation fails","int putQuotedUTF8(ByteBuffer buffer) throws IOException;","int","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.putQuotedUTF8(ByteBuffer).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.SerializableString.putQuotedUTF8(ByteBuffer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.putUnquotedUTF8(ByteBuffer)","Abstract Method","* Method for appending unquoted ('raw') UTF-8 encoded String value into given
     * {@link java.nio.ByteBuffer}, if it fits.
     *
     * @param buffer {@link java.nio.ByteBuffer} to append String into
     *
     * @return Number of bytes put, if contents fit, otherwise -1
     *
     * @throws IOException if underlying buffer append operation fails","int putUnquotedUTF8(ByteBuffer buffer) throws IOException;","int","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.SerializableString.putUnquotedUTF8(ByteBuffer).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.SerializableString.putUnquotedUTF8(ByteBuffer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext","Abstract Class","* Shared base class for streaming processing contexts used during
 * reading and writing of Json content using Streaming API.
 * This context is also exposed to applications:
 * context object can be used by applications to get an idea of
 * relative position of the parser/generator within json content
 * being processed. This allows for some contextual processing: for
 * example, output within Array context can differ from that of
 * Object context.
 *<p>
 * NOTE: in Jackson 3.x this class is renamed as {@code TokenStreamContext}","Abstract Class do not obtain Source Code","No return type","public , abstract ","",""
"com.fasterxml.jackson.core.JsonStreamContext.TYPE_ROOT","Field","* Indicator for ""Root Value"" context (has not parent)","public final static int TYPE_ROOT = 0;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.TYPE_ARRAY","Field","* Indicator for ""Array"" context.","public final static int TYPE_ARRAY = 1;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.TYPE_OBJECT","Field","* Indicator for ""Object"" context.","public final static int TYPE_OBJECT = 2;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext._type","Field","* Indicates logical type of context as one of {@code TYPE_xxx} constants.","protected int _type;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext._index","Field","* Index of the currently processed entry. Starts with -1 to signal
     * that no entries have been started, and gets advanced each
     * time a new entry is started, either by encountering an expected
     * separator, or with new values if no separators are expected
     * (the case for root context).","protected int _index;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext._nestingDepth","Field","* The nesting depth is a count of objects and arrays that have not
     * been closed, `{` and `[` respectively.
     *
     * @since 2.15","protected int _nestingDepth;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.getParent()","Abstract Method","* Accessor for finding parent context of this context; will
     * return null for root context.
     *
     * @return Parent context of this context, if any; {@code null} for Root contexts","public abstract JsonStreamContext getParent();","JsonStreamContext","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.inArray()","Method","* Method that returns true if this context is an Array context;
     * that is, content is being read from or written to a JSON Array.
     *
     * @return {@code True} if this context represents an Array; {@code false} otherwise","public final boolean inArray() {
    return _type == TYPE_ARRAY;
}","boolean","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.inRoot()","Method","* Method that returns true if this context is a Root context;
     * that is, content is being read from or written to without
     * enclosing array or object structure.
     *
     * @return {@code True} if this context represents a sequence of Root values; {@code false} otherwise","public final boolean inRoot() {
    return _type == TYPE_ROOT;
}","boolean","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.inObject()","Method","* Method that returns true if this context is an Object context;
     * that is, content is being read from or written to a JSON Object.
     *
     * @return {@code True} if this context represents an Object; {@code false} otherwise","public final boolean inObject() {
    return _type == TYPE_OBJECT;
}","boolean","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.getNestingDepth()","Method","* The nesting depth is a count of objects and arrays that have not
     * been closed, `{` and `[` respectively.
     *
     * @return Nesting depth
     *
     * @since 2.15","public final int getNestingDepth() {
    return _nestingDepth;
}","int","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.getTypeDesc()","Method","* @return Type description String
     *
     * @deprecated Since 2.8 use {@link #typeDesc} instead","// since 2.8
@Deprecated
public final String getTypeDesc() {
    switch(_type) {
        case TYPE_ROOT:
            return ""ROOT"";
        case TYPE_ARRAY:
            return ""ARRAY"";
        case TYPE_OBJECT:
            return ""OBJECT"";
    }
    return ""?"";
}","String","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.typeDesc()","Method","* Method for accessing simple type description of current context;
     * either ROOT (for root-level values), OBJECT (for field names and
     * values of JSON Objects) or ARRAY (for values of JSON Arrays)
     *
     * @return Type description String
     *
     * @since 2.8","public String typeDesc() {
    switch(_type) {
        case TYPE_ROOT:
            return ""root"";
        case TYPE_ARRAY:
            return ""Array"";
        case TYPE_OBJECT:
            return ""Object"";
    }
    return ""?"";
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.getEntryCount()","Method","* @return Number of entries that are complete and started.","public final int getEntryCount() {
    return _index + 1;
}","int","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.getCurrentIndex()","Method","* @return Index of the currently processed entry, if any","public final int getCurrentIndex() {
    return (_index < 0) ? 0 : _index;
}","int","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.hasCurrentIndex()","Method","* Method that may be called to verify whether this context has valid index:
     * will return `false` before the first entry of Object context or before
     * first element of Array context; otherwise returns `true`.
     *
     * @return {@code True} if this context has value index to access, {@code false} otherwise
     *
     * @since 2.9","public boolean hasCurrentIndex() {
    return _index >= 0;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.hasPathSegment()","Method","* Method that may be called to check if this context is either:
     *<ul>
     * <li>Object, with at least one entry written (partially or completely)
     *  </li>
     * <li>Array, with at least one entry written (partially or completely)
     *  </li>
     *</ul>
     * and if so, return `true`; otherwise return `false`. Latter case includes
     * Root context (always), and Object/Array contexts before any entries/elements
     * have been read or written.
     *<p>
     * Method is mostly used to determine whether this context should be used for
     * constructing {@link JsonPointer}
     *
     * @return {@code True} if this context has value path segment to access, {@code false} otherwise
     *
     * @since 2.9","public boolean hasPathSegment() {
    if (_type == TYPE_OBJECT) {
        return hasCurrentName();
    } else if (_type == TYPE_ARRAY) {
        return hasCurrentIndex();
    }
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.getCurrentName()","Abstract Method","* Method for accessing name associated with the current location.
     * Non-null for <code>FIELD_NAME</code> and value events that directly
     * follow field names; null for root level and array values.
     *
     * @return Current field name within context, if any; {@code null} if none","public abstract String getCurrentName();","String","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.hasCurrentName()","Method","* @return {@code True} if a call to {@link #getCurrentName()} would return non-{@code null}
     *    name; {@code false} otherwise
     *
     * @since 2.9","public boolean hasCurrentName() {
    return getCurrentName() != null;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.getCurrentValue()","Method","* Method for accessing currently active value being used by data-binding
     * (as the source of streaming data to write, or destination of data being
     * read), at this level in hierarchy.
     *<p>
     * Note that ""current value"" is NOT populated (or used) by Streaming parser or generator;
     * it is only used by higher-level data-binding functionality.
     * The reason it is included here is that it can be stored and accessed hierarchically,
     * and gets passed through data-binding.
     *
     * @return Currently active value, if one has been assigned.
     *
     * @since 2.5","public Object getCurrentValue() {
    return null;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.setCurrentValue(Object)","Method","* Method to call to pass value to be returned via {@link #getCurrentValue}; typically
     * called indirectly through {@link JsonParser#setCurrentValue}
     * or {@link JsonGenerator#setCurrentValue}).
     *
     * @param v Current value to assign to this context
     *
     * @since 2.5","public void setCurrentValue(Object v) {
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.setCurrentValue(Object).v","Parameter_1","Belong to com.fasterxml.jackson.core.JsonStreamContext.setCurrentValue(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.pathAsPointer()","Method","* Factory method for constructing a {@link JsonPointer} that points to the current
     * location within the stream that this context is for, excluding information about
     * ""root context"" (only relevant for multi-root-value cases)
     *
     * @return Pointer instance constructed
     *
     * @since 2.9","public JsonPointer pathAsPointer() {
    return JsonPointer.forPath(this, false);
}","JsonPointer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.pathAsPointer(boolean)","Method","* Factory method for constructing a {@link JsonPointer} that points to the current
     * location within the stream that this context is for, optionally including
     * ""root value index""
     *
     * @param includeRoot Whether root-value offset is included as the first segment or not;
     *
     * @return Pointer instance constructed
     *
     * @since 2.9","public JsonPointer pathAsPointer(boolean includeRoot) {
    return JsonPointer.forPath(this, includeRoot);
}","JsonPointer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.pathAsPointer(boolean).includeRoot","Parameter_1","Belong to com.fasterxml.jackson.core.JsonStreamContext.pathAsPointer(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.startLocation(ContentReference)","Method","* Optional method that may be used to access starting location of this context:
     * for example, in case of JSON `Object` context, offset at which `[` token was
     * read or written. Often used for error reporting purposes.
     * Implementations that do not keep track of such location are expected to return
     * {@link JsonLocation#NA}; this is what the default implementation does.
     *
     * @param srcRef Source reference needed to construct location instance
     *
     * @return Location pointing to the point where the context
     *   start marker was found (or written); never {@code null}.
     *
     * @since 2.13","public JsonLocation startLocation(ContentReference srcRef) {
    return JsonLocation.NA;
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.startLocation(ContentReference).srcRef","Parameter_1","Belong to com.fasterxml.jackson.core.JsonStreamContext.startLocation(ContentReference)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.getStartLocation(Object)","Method","* @param srcRef Source reference needed to construct location instance
     * @return Location pointing to the point where the context
     *   start marker was found (or written); never {@code null}.
     * @since 2.9
     * @deprecated Since 2.13 use {@link #startLocation} instead","@Deprecated
public JsonLocation getStartLocation(Object srcRef) {
    return JsonLocation.NA;
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.getStartLocation(Object).srcRef","Parameter_1","Belong to com.fasterxml.jackson.core.JsonStreamContext.getStartLocation(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.toString()","Method","* Overridden to provide developer readable ""JsonPath"" representation
     * of the context.
     *
     * @return Simple developer-readable description this context layer
     *   (note: NOT constructed with parents, unlike {@link #pathAsPointer})
     *
     * @since 2.9","@Override
public String toString() {
    StringBuilder sb = new StringBuilder(64);
    switch(_type) {
        case TYPE_ROOT:
            sb.append(""/"");
            break;
        case TYPE_ARRAY:
            sb.append('[');
            sb.append(getCurrentIndex());
            sb.append(']');
            break;
        case TYPE_OBJECT:
        default:
            sb.append('{');
            String currentName = getCurrentName();
            if (currentName != null) {
                sb.append('""');
                CharTypes.appendQuoted(sb, currentName);
                sb.append('""');
            } else {
                sb.append('?');
            }
            sb.append('}');
            break;
    }
    return sb.toString();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.<init>()","Constructor","No Comment","protected JsonStreamContext() {
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.<init>(JsonStreamContext)","Constructor","* Copy constructor used by sub-classes for creating copies for
     * buffering.
     *
     * @param base Context instance to copy type and index from
     *
     * @since 2.9","protected JsonStreamContext(JsonStreamContext base) {
    _type = base._type;
    _index = base._index;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.<init>(JsonStreamContext).base","Parameter_1","Belong to com.fasterxml.jackson.core.JsonStreamContext.<init>(JsonStreamContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.<init>(int,int)","Constructor","@since 2.9","protected JsonStreamContext(int type, int index) {
    _type = type;
    _index = index;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.<init>(int,int).type","Parameter_1","Belong to com.fasterxml.jackson.core.JsonStreamContext.<init>(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonStreamContext.<init>(int,int).index","Parameter_2","Belong to com.fasterxml.jackson.core.JsonStreamContext.<init>(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeCodec","Abstract Class","* Interface that defines objects that can read and write
 * {@link TreeNode} instances using Streaming API.
 *
 * @since 2.3","Abstract Class do not obtain Source Code","No return type","public , abstract ","",""
"com.fasterxml.jackson.core.TreeCodec.readTree(JsonParser)","Abstract Method","No Comment","public abstract <T extends TreeNode> T readTree(JsonParser p) throws IOException, JsonProcessingException;","TreeNode","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeCodec.readTree(JsonParser).p","Parameter_1","Belong to com.fasterxml.jackson.core.TreeCodec.readTree(JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeCodec.writeTree(JsonGenerator,TreeNode)","Abstract Method","No Comment","public abstract void writeTree(JsonGenerator g, TreeNode tree) throws IOException, JsonProcessingException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeCodec.writeTree(JsonGenerator,TreeNode).g","Parameter_1","Belong to com.fasterxml.jackson.core.TreeCodec.writeTree(JsonGenerator,TreeNode)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeCodec.writeTree(JsonGenerator,TreeNode).tree","Parameter_2","Belong to com.fasterxml.jackson.core.TreeCodec.writeTree(JsonGenerator,TreeNode)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeCodec.missingNode()","Method","* @return Node that represents ""missing"" node during traversal: something
     *   referenced but that does not exist in content model
     *
     * @since 2.10","public TreeNode missingNode() {
    return null;
}","TreeNode","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeCodec.nullNode()","Method","* @return Node that represents explicit {@code null} value in content
     *
     * @since 2.10","public TreeNode nullNode() {
    return null;
}","TreeNode","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeCodec.createArrayNode()","Abstract Method","No Comment","public abstract TreeNode createArrayNode();","TreeNode","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeCodec.createObjectNode()","Abstract Method","No Comment","public abstract TreeNode createObjectNode();","TreeNode","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeCodec.treeAsTokens(TreeNode)","Abstract Method","No Comment","public abstract JsonParser treeAsTokens(TreeNode node);","JsonParser","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TreeCodec.treeAsTokens(TreeNode).node","Parameter_1","Belong to com.fasterxml.jackson.core.TreeCodec.treeAsTokens(TreeNode)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteFeature","Enum","* Token writer features specific to JSON backend.
 *
 * @since 2.10","Enum do not obtain Source Code","No return type","public ","enum has no extends","com.fasterxml.jackson.core.FormatFeature"
"com.fasterxml.jackson.core.json.JsonWriteFeature.QUOTE_FIELD_NAMES","Enum Constant","* Feature that determines whether JSON Object field names are
     * quoted using double-quotes, as specified by JSON specification
     * or not. Ability to disable quoting was added to support use
     * cases where they are not usually expected, which most commonly
     * occurs when used straight from Javascript.
     *<p>
     * Feature is enabled by default (since it is required by JSON specification).","@SuppressWarnings(""deprecation"")
QUOTE_FIELD_NAMES(true, JsonGenerator.Feature.QUOTE_FIELD_NAMES)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteFeature.WRITE_NAN_AS_STRINGS","Enum Constant","* Feature that determines whether ""NaN"" (""not a number"", that is, not
     * real number) float/double values are output as JSON strings.
     * The values checked are Double.Nan,
     * Double.POSITIVE_INFINITY and Double.NEGATIVE_INIFINTY (and
     * associated Float values).
     * If feature is disabled, these numbers are still output using
     * associated literal values, resulting in non-conforming
     * output.
     *<p>
     * Feature is enabled by default.","@SuppressWarnings(""deprecation"")
WRITE_NAN_AS_STRINGS(true, JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteFeature.WRITE_NUMBERS_AS_STRINGS","Enum Constant","* Feature that forces all regular number values to be written as JSON Strings,
     * instead of as JSON Numbers.
     * Default state is 'false', meaning that Java numbers are to
     * be serialized using basic numeric representation but
     * if enabled all such numeric values are instead written out as
     * JSON Strings instead.
     *<p>
     * One use case is to avoid problems with Javascript limitations:
     * since Javascript standard specifies that all number handling
     * should be done using 64-bit IEEE 754 floating point values,
     * result being that some 64-bit integer values cannot be
     * accurately represent (as mantissa is only 51 bit wide).
     *<p>
     * Feature is disabled by default.","@SuppressWarnings(""deprecation"")
WRITE_NUMBERS_AS_STRINGS(false, JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteFeature.ESCAPE_NON_ASCII","Enum Constant","* Feature that specifies that all characters beyond 7-bit ASCII
     * range (i.e. code points of 128 and above) need to be output
     * using format-specific escapes (for JSON, backslash escapes),
     * if format uses escaping mechanisms (which is generally true
     * for textual formats but not for binary formats).
     *<p>
     * Feature is disabled by default.","@SuppressWarnings(""deprecation"")
ESCAPE_NON_ASCII(false, JsonGenerator.Feature.ESCAPE_NON_ASCII)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteFeature.WRITE_HEX_UPPER_CASE","Enum Constant","* Feature that specifies that hex values are encoded with capital letters.
     *<p>
     * Can be disabled to have a better possibility to compare between other JSON
     * writer libraries, such as JSON.stringify from Javascript.
     *<p>
     * Feature is enabled by default for backwards compatibility with earlier
     * versions.
     *
     * @since 2.14","@SuppressWarnings(""deprecation"")
WRITE_HEX_UPPER_CASE(true, JsonGenerator.Feature.WRITE_HEX_UPPER_CASE)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteFeature.ESCAPE_FORWARD_SLASHES","Enum Constant","* Feature that specifies whether {@link JsonGenerator} should escape forward slashes.
     * <p>
     * Feature is disabled by default for Jackson 2.x version, and enabled by default in Jackson 3.0.
     *
     * @since 2.17","ESCAPE_FORWARD_SLASHES(false, JsonGenerator.Feature.ESCAPE_FORWARD_SLASHES)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteFeature.COMBINE_UNICODE_SURROGATES_IN_UTF8","Enum Constant","* Feature that specifies how characters outside ""Basic Multilingual Plane"" (BMP) -- ones encoded
     * as 4-byte UTF-8 sequences but represented in JVM memory as 2 16-bit ""surrogate"" {@code chars} --
     * should be encoded as UTF-8 by {@link JsonGenerator}.
     * If enabled, surrogate pairs are combined and flushed as a
     * single, 4-byte UTF-8 character.
     * If disabled, each {@code char} of pair is written as 2 separate characters: that is, as 2
     * separate 3-byte UTF-8 characters with values in Surrogate character ranges
     * ({@code 0xD800} - {@code 0xDBFF} and {@code 0xDC00} - {@code 0xDFFF})
     * <p>
     * Note that this feature only has effect for {@link JsonGenerator}s that directly encode
     * {@code byte}-based output, as UTF-8 (target {@link java.io.OutputStream}, {@code byte[]}
     * and so on); it will not (cannot) change handling of
     * {@code char}-based output (like {@link java.io.Writer} or {@link java.lang.String}).
     * <p>
     * Feature is disabled by default in 2.x for backwards-compatibility (will be enabled
     * in 3.0).
     *
     * @since 2.18","COMBINE_UNICODE_SURROGATES_IN_UTF8(false, JsonGenerator.Feature.COMBINE_UNICODE_SURROGATES_IN_UTF8)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteFeature.collectDefaults()","Method","* Method that calculates bit set (flags) of all features that
     * are enabled by default.
     *
     * @return Bit mask of all features that are enabled by default","public static int collectDefaults() {
    int flags = 0;
    for (JsonWriteFeature f : values()) {
        if (f.enabledByDefault()) {
            flags |= f.getMask();
        }
    }
    return flags;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteFeature.enabledByDefault()","Method","No Comment","@Override
public boolean enabledByDefault() {
    return _defaultState;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteFeature.getMask()","Method","No Comment","@Override
public int getMask() {
    return _mask;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteFeature.enabledIn(int)","Method","No Comment","@Override
public boolean enabledIn(int flags) {
    return (flags & _mask) != 0;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteFeature.enabledIn(int).flags","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonWriteFeature.enabledIn(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteFeature.mappedFeature()","Method","No Comment","public JsonGenerator.Feature mappedFeature() {
    return _mappedFeature;
}","JsonGenerator.Feature","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteFeature.<init>(boolean,JsonGenerator.Feature)","Constructor","No Comment","private JsonWriteFeature(boolean defaultState, JsonGenerator.Feature mapTo) {
    _defaultState = defaultState;
    _mask = (1 << ordinal());
    _mappedFeature = mapTo;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteFeature.<init>(boolean,JsonGenerator.Feature).defaultState","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonWriteFeature.<init>(boolean,JsonGenerator.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteFeature.<init>(boolean,JsonGenerator.Feature).mapTo","Parameter_2","Belong to com.fasterxml.jackson.core.json.JsonWriteFeature.<init>(boolean,JsonGenerator.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator","Class","* {@link JsonGenerator} that outputs JSON content using a {@link java.io.Writer}
 * which handles character encoding.","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.json.JsonGeneratorImpl",""
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.SHORT_WRITE","Field","No Comment","protected final static int SHORT_WRITE = 32;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.HEX_CHARS_UPPER","Field","No Comment","protected final static char[] HEX_CHARS_UPPER = CharTypes.copyHexChars(true);","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.HEX_CHARS_LOWER","Field","No Comment","protected final static char[] HEX_CHARS_LOWER = CharTypes.copyHexChars(false);","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writer","Field","No Comment","protected final Writer _writer;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._quoteChar","Field","* Character used for quoting JSON Object property names
     * and String values.","protected char _quoteChar;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._outputBuffer","Field","* Intermediate buffer in which contents are buffered before
     * being written using {@link #_writer}.","protected char[] _outputBuffer;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._outputHead","Field","* Pointer to the first buffered character to output","protected int _outputHead;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._outputTail","Field","* Pointer to the position right beyond the last character to output
     * (end marker; may point to position right beyond the end of the buffer)","protected int _outputTail;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._outputEnd","Field","* End marker of the output buffer; one past the last valid position
     * within the buffer.","protected int _outputEnd;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._entityBuffer","Field","* Short (14 char) temporary buffer allocated if needed, for constructing
     * escape sequences","protected char[] _entityBuffer;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._currentEscape","Field","* When custom escapes are used, this member variable is used
     * internally to hold a reference to currently used escape","protected SerializableString _currentEscape;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._copyBuffer","Field","* Intermediate buffer in which characters of a String are copied
     * before being encoded.
     *
     * @since 2.10","protected char[] _copyBuffer;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.getHexChars()","Method","No Comment","private char[] getHexChars() {
    return _cfgWriteHexUppercase ? HEX_CHARS_UPPER : HEX_CHARS_LOWER;
}","char[]","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.getOutputTarget()","Method","No Comment","@Override
public Object getOutputTarget() {
    return _writer;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.getOutputBuffered()","Method","No Comment","@Override
public int getOutputBuffered() {
    // Assuming tail and head are kept but... trust and verify:
    int len = _outputTail - _outputHead;
    return Math.max(0, len);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.canWriteFormattedNumbers()","Method","json does allow this so","@Override
public boolean canWriteFormattedNumbers() {
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(String)","Method","No Comment","@Override
public void writeFieldName(String name) throws IOException {
    int status = _writeContext.writeFieldName(name);
    if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {
        _reportError(""Can not write a field name, expecting a value"");
    }
    _writeFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA));
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(SerializableString)","Method","No Comment","@Override
public void writeFieldName(SerializableString name) throws IOException {
    // Object is a value, need to verify it's allowed
    int status = _writeContext.writeFieldName(name.getValue());
    if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {
        _reportError(""Can not write a field name, expecting a value"");
    }
    _writeFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA));
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(SerializableString).name","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeFieldName(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(String,boolean)","Method","No Comment","protected void _writeFieldName(String name, boolean commaBefore) throws IOException {
    if (_cfgPrettyPrinter != null) {
        _writePPFieldName(name, commaBefore);
        return;
    }
    // for fast+std case, need to output up to 2 chars, comma, dquote
    if ((_outputTail + 1) >= _outputEnd) {
        _flushBuffer();
    }
    if (commaBefore) {
        _outputBuffer[_outputTail++] = ',';
    }
    // Alternate mode, in which quoting of field names disabled?
    if (_cfgUnqNames) {
        _writeString(name);
        return;
    }
    // we know there's room for at least one more char
    _outputBuffer[_outputTail++] = _quoteChar;
    // The beef:
    _writeString(name);
    // and closing quotes; need room for one more char:
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(String,boolean).name","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(String,boolean).commaBefore","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(SerializableString,boolean)","Method","No Comment","protected void _writeFieldName(SerializableString name, boolean commaBefore) throws IOException {
    if (_cfgPrettyPrinter != null) {
        _writePPFieldName(name, commaBefore);
        return;
    }
    // for fast+std case, need to output up to 2 chars, comma, dquote
    if ((_outputTail + 1) >= _outputEnd) {
        _flushBuffer();
    }
    if (commaBefore) {
        _outputBuffer[_outputTail++] = ',';
    }
    // Alternate mode, in which quoting of field names disabled?
    if (_cfgUnqNames) {
        final char[] ch = name.asQuotedChars();
        writeRaw(ch, 0, ch.length);
        return;
    }
    // we know there's room for at least one more char
    _outputBuffer[_outputTail++] = _quoteChar;
    // The beef:
    int len = name.appendQuoted(_outputBuffer, _outputTail);
    if (len < 0) {
        _writeFieldNameTail(name);
        return;
    }
    _outputTail += len;
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(SerializableString,boolean).name","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(SerializableString,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(SerializableString,boolean).commaBefore","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldName(SerializableString,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldNameTail(SerializableString)","Method","No Comment","protected void _writeFieldNameTail(SerializableString name) throws IOException {
    final char[] quoted = name.asQuotedChars();
    writeRaw(quoted, 0, quoted.length);
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldNameTail(SerializableString).name","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeFieldNameTail(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray()","Method","No Comment","@Override
public void writeStartArray() throws IOException {
    _verifyValueWrite(""start an array"");
    _writeContext = _writeContext.createChildArrayContext();
    streamWriteConstraints().validateNestingDepth(_writeContext.getNestingDepth());
    if (_cfgPrettyPrinter != null) {
        _cfgPrettyPrinter.writeStartArray(this);
    } else {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = '[';
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray(Object)","Method","No Comment","// since 2.12
@Override
public void writeStartArray(Object currentValue) throws IOException {
    _verifyValueWrite(""start an array"");
    _writeContext = _writeContext.createChildArrayContext(currentValue);
    streamWriteConstraints().validateNestingDepth(_writeContext.getNestingDepth());
    if (_cfgPrettyPrinter != null) {
        _cfgPrettyPrinter.writeStartArray(this);
    } else {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = '[';
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray(Object).currentValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray(Object,int)","Method","No Comment","// since 2.12
@Override
public void writeStartArray(Object currentValue, int size) throws IOException {
    _verifyValueWrite(""start an array"");
    _writeContext = _writeContext.createChildArrayContext(currentValue);
    streamWriteConstraints().validateNestingDepth(_writeContext.getNestingDepth());
    if (_cfgPrettyPrinter != null) {
        _cfgPrettyPrinter.writeStartArray(this);
    } else {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = '[';
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray(Object,int).currentValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray(Object,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray(Object,int).size","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartArray(Object,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndArray()","Method","No Comment","@Override
public void writeEndArray() throws IOException {
    if (!_writeContext.inArray()) {
        _reportError(""Current context not Array but "" + _writeContext.typeDesc());
    }
    if (_cfgPrettyPrinter != null) {
        _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount());
    } else {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = ']';
    }
    _writeContext = _writeContext.clearAndGetParent();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject()","Method","No Comment","@Override
public void writeStartObject() throws IOException {
    _verifyValueWrite(""start an object"");
    _writeContext = _writeContext.createChildObjectContext();
    streamWriteConstraints().validateNestingDepth(_writeContext.getNestingDepth());
    if (_cfgPrettyPrinter != null) {
        _cfgPrettyPrinter.writeStartObject(this);
    } else {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = '{';
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject(Object)","Method","No Comment","// since 2.8
@Override
public void writeStartObject(Object forValue) throws IOException {
    _verifyValueWrite(""start an object"");
    JsonWriteContext ctxt = _writeContext.createChildObjectContext(forValue);
    streamWriteConstraints().validateNestingDepth(_writeContext.getNestingDepth());
    _writeContext = ctxt;
    if (_cfgPrettyPrinter != null) {
        _cfgPrettyPrinter.writeStartObject(this);
    } else {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = '{';
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject(Object).forValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject(Object,int)","Method","No Comment","// since 2.14
@Override
public void writeStartObject(Object forValue, int size) throws IOException {
    writeStartObject(forValue);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject(Object,int).forValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject(Object,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject(Object,int).size","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeStartObject(Object,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeEndObject()","Method","No Comment","@Override
public void writeEndObject() throws IOException {
    if (!_writeContext.inObject()) {
        _reportError(""Current context not Object but "" + _writeContext.typeDesc());
    }
    if (_cfgPrettyPrinter != null) {
        _cfgPrettyPrinter.writeEndObject(this, _writeContext.getEntryCount());
    } else {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = '}';
    }
    _writeContext = _writeContext.clearAndGetParent();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(String,boolean)","Method","to keep the ""fast path"" as simple (and hopefully fast) as possible.","protected void _writePPFieldName(String name, boolean commaBefore) throws IOException {
    if (commaBefore) {
        _cfgPrettyPrinter.writeObjectEntrySeparator(this);
    } else {
        _cfgPrettyPrinter.beforeObjectEntries(this);
    }
    if (_cfgUnqNames) {
        // non-standard, omit quotes
        _writeString(name);
    } else {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = _quoteChar;
        _writeString(name);
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = _quoteChar;
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(String,boolean).name","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(String,boolean).commaBefore","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(SerializableString,boolean)","Method","No Comment","protected void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException {
    if (commaBefore) {
        _cfgPrettyPrinter.writeObjectEntrySeparator(this);
    } else {
        _cfgPrettyPrinter.beforeObjectEntries(this);
    }
    final char[] quoted = name.asQuotedChars();
    if (_cfgUnqNames) {
        // non-standard, omit quotes
        writeRaw(quoted, 0, quoted.length);
    } else {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = _quoteChar;
        writeRaw(quoted, 0, quoted.length);
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = _quoteChar;
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(SerializableString,boolean).name","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(SerializableString,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(SerializableString,boolean).commaBefore","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writePPFieldName(SerializableString,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(String)","Method","No Comment","@Override
public void writeString(String text) throws IOException {
    _verifyValueWrite(WRITE_STRING);
    if (text == null) {
        _writeNull();
        return;
    }
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    _writeString(text);
    // And finally, closing quotes
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(String).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Reader,int)","Method","No Comment","@Override
public void writeString(Reader reader, int len) throws IOException {
    _verifyValueWrite(WRITE_STRING);
    if (reader == null) {
        _reportError(""null reader"");
        // just to block warnings by lgtm.com
        return;
    }
    int toRead = (len >= 0) ? len : Integer.MAX_VALUE;
    // Add leading quote
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    final char[] buf = _allocateCopyBuffer();
    while (toRead > 0) {
        int toReadNow = Math.min(toRead, buf.length);
        int numRead = reader.read(buf, 0, toReadNow);
        if (numRead <= 0) {
            break;
        }
        _writeString(buf, 0, numRead);
        toRead -= numRead;
    }
    // Add trailing quote
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    if (toRead > 0 && len >= 0) {
        _reportError(""Didn't read enough from reader"");
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Reader,int).reader","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Reader,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Reader,int).len","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(Reader,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(char[],int,int)","Method","No Comment","@Override
public void writeString(char[] text, int offset, int len) throws IOException {
    _verifyValueWrite(WRITE_STRING);
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    _writeString(text, offset, len);
    // And finally, closing quotes
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(char[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(SerializableString)","Method","No Comment","@Override
public void writeString(SerializableString sstr) throws IOException {
    _verifyValueWrite(WRITE_STRING);
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    int len = sstr.appendQuoted(_outputBuffer, _outputTail);
    if (len < 0) {
        _writeString2(sstr);
        return;
    }
    _outputTail += len;
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(SerializableString).sstr","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeString(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(SerializableString)","Method","No Comment","private void _writeString2(SerializableString sstr) throws IOException {
    // Note: copied from writeRaw:
    char[] text = sstr.asQuotedChars();
    final int len = text.length;
    if (len < SHORT_WRITE) {
        int room = _outputEnd - _outputTail;
        if (len > room) {
            _flushBuffer();
        }
        System.arraycopy(text, 0, _outputBuffer, _outputTail, len);
        _outputTail += len;
    } else {
        _flushBuffer();
        _writer.write(text, 0, len);
    }
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(SerializableString).sstr","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawUTF8String(byte[],int,int)","Method","No Comment","@Override
public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException {
    // could add support for buffering if we really want it...
    _reportUnsupportedOperation();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawUTF8String(byte[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawUTF8String(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawUTF8String(byte[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeUTF8String(byte[],int,int)","Method","No Comment","@Override
public void writeUTF8String(byte[] text, int offset, int length) throws IOException {
    // could add support for buffering if we really want it...
    _reportUnsupportedOperation();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeUTF8String(byte[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeUTF8String(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeUTF8String(byte[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(String)","Method","No Comment","@Override
public void writeRaw(String text) throws IOException {
    // Nothing to check, can just output as is
    int len = text.length();
    int room = _outputEnd - _outputTail;
    if (room == 0) {
        _flushBuffer();
        room = _outputEnd - _outputTail;
    }
    // But would it nicely fit in? If yes, it's easy
    if (room >= len) {
        text.getChars(0, len, _outputBuffer, _outputTail);
        _outputTail += len;
    } else {
        writeRawLong(text);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(String).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(String,int,int)","Method","No Comment","@Override
public void writeRaw(String text, int offset, int len) throws IOException {
    _checkRangeBoundsForString(text, offset, len);
    // Nothing to check, can just output as is
    int room = _outputEnd - _outputTail;
    if (room < len) {
        _flushBuffer();
        room = _outputEnd - _outputTail;
    }
    // But would it nicely fit in? If yes, it's easy
    if (room >= len) {
        text.getChars(offset, offset + len, _outputBuffer, _outputTail);
        _outputTail += len;
    } else {
        writeRawLong(text.substring(offset, offset + len));
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(String,int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(String,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(String,int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(SerializableString)","Method","@since 2.1","@Override
public void writeRaw(SerializableString text) throws IOException {
    int len = text.appendUnquoted(_outputBuffer, _outputTail);
    if (len < 0) {
        writeRaw(text.getValue());
        return;
    }
    _outputTail += len;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(SerializableString).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(char[],int,int)","Method","No Comment","@Override
public void writeRaw(char[] cbuf, int offset, int len) throws IOException {
    _checkRangeBoundsForCharArray(cbuf, offset, len);
    // Only worth buffering if it's a short write?
    if (len < SHORT_WRITE) {
        int room = _outputEnd - _outputTail;
        if (len > room) {
            _flushBuffer();
        }
        System.arraycopy(cbuf, offset, _outputBuffer, _outputTail, len);
        _outputTail += len;
        return;
    }
    // Otherwise, better just pass through:
    _flushBuffer();
    _writer.write(cbuf, offset, len);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(char[],int,int).cbuf","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(char)","Method","No Comment","@Override
public void writeRaw(char c) throws IOException {
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = c;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(char).c","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRaw(char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(String)","Method","No Comment","private void writeRawLong(String text) throws IOException {
    int room = _outputEnd - _outputTail;
    // If not, need to do it by looping
    text.getChars(0, room, _outputBuffer, _outputTail);
    _outputTail += room;
    _flushBuffer();
    int offset = room;
    int len = text.length() - room;
    while (len > _outputEnd) {
        int amount = _outputEnd;
        text.getChars(offset, offset + amount, _outputBuffer, 0);
        _outputHead = 0;
        _outputTail = amount;
        _flushBuffer();
        offset += amount;
        len -= amount;
    }
    // And last piece (at most length of buffer)
    text.getChars(offset, offset + len, _outputBuffer, 0);
    _outputHead = 0;
    _outputTail = len;
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(String).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeRawLong(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Base64Variant,byte[],int,int)","Method","No Comment","@Override
public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException {
    _checkRangeBoundsForByteArray(data, offset, len);
    _verifyValueWrite(WRITE_BINARY);
    // Starting quotes
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    _writeBinary(b64variant, data, offset, offset + len);
    // and closing quotes
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Base64Variant,byte[],int,int).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Base64Variant,byte[],int,int).data","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Base64Variant,byte[],int,int).offset","Parameter_3","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Base64Variant,byte[],int,int).len","Parameter_4","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Base64Variant,InputStream,int)","Method","No Comment","@Override
public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException {
    _verifyValueWrite(WRITE_BINARY);
    // Starting quotes
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    byte[] encodingBuffer = _ioContext.allocBase64Buffer();
    int bytes;
    try {
        if (dataLength < 0) {
            // length unknown
            bytes = _writeBinary(b64variant, data, encodingBuffer);
        } else {
            int missing = _writeBinary(b64variant, data, encodingBuffer, dataLength);
            if (missing > 0) {
                _reportError(""Too few bytes available: missing "" + missing + "" bytes (out of "" + dataLength + "")"");
            }
            bytes = dataLength;
        }
    } finally {
        _ioContext.releaseBase64Buffer(encodingBuffer);
    }
    // and closing quotes
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    return bytes;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Base64Variant,InputStream,int).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Base64Variant,InputStream,int).data","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Base64Variant,InputStream,int).dataLength","Parameter_3","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(short)","Method","No Comment","@Override
public void writeNumber(short s) throws IOException {
    _verifyValueWrite(WRITE_NUMBER);
    if (_cfgNumbersAsStrings) {
        _writeQuotedShort(s);
        return;
    }
    // up to 5 digits and possible minus sign
    if ((_outputTail + 6) >= _outputEnd) {
        _flushBuffer();
    }
    _outputTail = NumberOutput.outputInt(s, _outputBuffer, _outputTail);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(short).s","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(short)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedShort(short)","Method","No Comment","private void _writeQuotedShort(short s) throws IOException {
    if ((_outputTail + 8) >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    _outputTail = NumberOutput.outputInt(s, _outputBuffer, _outputTail);
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedShort(short).s","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedShort(short)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(int)","Method","No Comment","@Override
public void writeNumber(int i) throws IOException {
    _verifyValueWrite(WRITE_NUMBER);
    if (_cfgNumbersAsStrings) {
        _writeQuotedInt(i);
        return;
    }
    // up to 10 digits and possible minus sign
    if ((_outputTail + 11) >= _outputEnd) {
        _flushBuffer();
    }
    _outputTail = NumberOutput.outputInt(i, _outputBuffer, _outputTail);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(int).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedInt(int)","Method","No Comment","private void _writeQuotedInt(int i) throws IOException {
    if ((_outputTail + 13) >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    _outputTail = NumberOutput.outputInt(i, _outputBuffer, _outputTail);
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedInt(int).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedInt(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(long)","Method","No Comment","@Override
public void writeNumber(long l) throws IOException {
    _verifyValueWrite(WRITE_NUMBER);
    if (_cfgNumbersAsStrings) {
        _writeQuotedLong(l);
        return;
    }
    if ((_outputTail + 21) >= _outputEnd) {
        // up to 20 digits, minus sign
        _flushBuffer();
    }
    _outputTail = NumberOutput.outputLong(l, _outputBuffer, _outputTail);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(long).l","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedLong(long)","Method","No Comment","private void _writeQuotedLong(long l) throws IOException {
    if ((_outputTail + 23) >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    _outputTail = NumberOutput.outputLong(l, _outputBuffer, _outputTail);
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedLong(long).l","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedLong(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(BigInteger)","Method","No Comment","@Override
public void writeNumber(BigInteger value) throws IOException {
    _verifyValueWrite(WRITE_NUMBER);
    if (value == null) {
        _writeNull();
    } else if (_cfgNumbersAsStrings) {
        _writeQuotedRaw(value.toString());
    } else {
        writeRaw(value.toString());
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(BigInteger).value","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(BigInteger)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(double)","Method","No Comment","@SuppressWarnings(""deprecation"")
@Override
public void writeNumber(double d) throws IOException {
    if (_cfgNumbersAsStrings || (NumberOutput.notFinite(d) && isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))) {
        writeString(NumberOutput.toString(d, isEnabled(Feature.USE_FAST_DOUBLE_WRITER)));
        return;
    }
    // What is the max length for doubles? 40 chars?
    _verifyValueWrite(WRITE_NUMBER);
    writeRaw(NumberOutput.toString(d, isEnabled(Feature.USE_FAST_DOUBLE_WRITER)));
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(double).d","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(float)","Method","No Comment","@SuppressWarnings(""deprecation"")
@Override
public void writeNumber(float f) throws IOException {
    if (_cfgNumbersAsStrings || (NumberOutput.notFinite(f) && isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS))) {
        writeString(NumberOutput.toString(f, isEnabled(Feature.USE_FAST_DOUBLE_WRITER)));
        return;
    }
    // What is the max length for floats?
    _verifyValueWrite(WRITE_NUMBER);
    writeRaw(NumberOutput.toString(f, isEnabled(Feature.USE_FAST_DOUBLE_WRITER)));
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(float).f","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(BigDecimal)","Method","No Comment","@Override
public void writeNumber(BigDecimal value) throws IOException {
    // Don't really know max length for big decimal, no point checking
    _verifyValueWrite(WRITE_NUMBER);
    if (value == null) {
        _writeNull();
    } else if (_cfgNumbersAsStrings) {
        _writeQuotedRaw(_asString(value));
    } else {
        writeRaw(_asString(value));
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(BigDecimal).value","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(BigDecimal)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(String)","Method","No Comment","@Override
public void writeNumber(String encodedValue) throws IOException {
    _verifyValueWrite(WRITE_NUMBER);
    if (encodedValue == null) {
        _writeNull();
    } else if (_cfgNumbersAsStrings) {
        _writeQuotedRaw(encodedValue);
    } else {
        writeRaw(encodedValue);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(String).encodedValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(char[],int,int)","Method","No Comment","@Override
public void writeNumber(char[] encodedValueBuffer, int offset, int length) throws IOException {
    _verifyValueWrite(WRITE_NUMBER);
    if (_cfgNumbersAsStrings) {
        _writeQuotedRaw(encodedValueBuffer, offset, length);
    } else {
        writeRaw(encodedValueBuffer, offset, length);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(char[],int,int).encodedValueBuffer","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(char[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNumber(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(String)","Method","No Comment","private void _writeQuotedRaw(String value) throws IOException {
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    writeRaw(value);
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(String).value","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(char[],int,int)","Method","No Comment","private void _writeQuotedRaw(char[] text, int offset, int length) throws IOException {
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    writeRaw(text, offset, length);
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(char[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(char[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeQuotedRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBoolean(boolean)","Method","No Comment","@Override
public void writeBoolean(boolean state) throws IOException {
    _verifyValueWrite(WRITE_BOOLEAN);
    if ((_outputTail + 5) >= _outputEnd) {
        _flushBuffer();
    }
    int ptr = _outputTail;
    char[] buf = _outputBuffer;
    if (state) {
        buf[ptr] = 't';
        buf[++ptr] = 'r';
        buf[++ptr] = 'u';
        buf[++ptr] = 'e';
    } else {
        buf[ptr] = 'f';
        buf[++ptr] = 'a';
        buf[++ptr] = 'l';
        buf[++ptr] = 's';
        buf[++ptr] = 'e';
    }
    _outputTail = ptr + 1;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBoolean(boolean).state","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBoolean(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeNull()","Method","No Comment","@Override
public void writeNull() throws IOException {
    _verifyValueWrite(WRITE_NULL);
    _writeNull();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyValueWrite(String)","Method","No Comment","@Override
protected void _verifyValueWrite(String typeMsg) throws IOException {
    final int status = _writeContext.writeValue();
    if (_cfgPrettyPrinter != null) {
        // Otherwise, pretty printer knows what to do...
        _verifyPrettyValueWrite(typeMsg, status);
        return;
    }
    char c;
    switch(status) {
        case JsonWriteContext.STATUS_OK_AS_IS:
        default:
            return;
        case JsonWriteContext.STATUS_OK_AFTER_COMMA:
            c = ',';
            break;
        case JsonWriteContext.STATUS_OK_AFTER_COLON:
            c = ':';
            break;
        case // root-value separator
        JsonWriteContext.STATUS_OK_AFTER_SPACE:
            if (_rootValueSeparator != null) {
                writeRaw(_rootValueSeparator.getValue());
            }
            return;
        case JsonWriteContext.STATUS_EXPECT_NAME:
            _reportCantWriteValueExpectName(typeMsg);
            return;
    }
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = c;
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyValueWrite(String).typeMsg","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._verifyValueWrite(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.flush()","Method","No Comment","@Override
public void flush() throws IOException {
    _flushBuffer();
    if (_writer != null) {
        if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {
            _writer.flush();
        }
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.close()","Method","No Comment","@Override
public void close() throws IOException {
    super.close();
    // 05-Dec-2008, tatu: To add [JACKSON-27], need to close open scopes
    // First: let's see that we still have buffers...
    IOException flushFail = null;
    try {
        if ((_outputBuffer != null) && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {
            while (true) {
                JsonStreamContext ctxt = getOutputContext();
                if (ctxt.inArray()) {
                    writeEndArray();
                } else if (ctxt.inObject()) {
                    writeEndObject();
                } else {
                    break;
                }
            }
        }
        _flushBuffer();
    } catch (IOException e) {
        // 10-Jun-2022, tatu: [core#764] Need to avoid failing here; may
        //    still need to close the underlying output stream
        flushFail = e;
    }
    _outputHead = 0;
    _outputTail = 0;
    /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()
         *   on the underlying Reader, unless we ""own"" it, or auto-closing
         *   feature is enabled.
         *   One downside: when using UTF8Writer, underlying buffer(s)
         *   may not be properly recycled if we don't close the writer.
         */
    if (_writer != null) {
        try {
            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {
                _writer.close();
            } else if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {
                // If we can't close it, we should at least flush
                _writer.flush();
            }
        } catch (IOException | RuntimeException e) {
            if (flushFail != null) {
                e.addSuppressed(flushFail);
            }
            throw e;
        }
    }
    // Internal buffer(s) generator has can now be released as well
    _releaseBuffers();
    if (flushFail != null) {
        throw flushFail;
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._releaseBuffers()","Method","No Comment","@Override
protected void _releaseBuffers() {
    char[] buf = _outputBuffer;
    if (buf != null) {
        _outputBuffer = null;
        _ioContext.releaseConcatBuffer(buf);
    }
    buf = _copyBuffer;
    if (buf != null) {
        _copyBuffer = null;
        _ioContext.releaseNameCopyBuffer(buf);
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(String)","Method","No Comment","private void _writeString(String text) throws IOException {
    /* One check first: if String won't fit in the buffer, let's
         * segment writes. No point in extending buffer to huge sizes
         * (like if someone wants to include multi-megabyte base64
         * encoded stuff or such)
         */
    final int len = text.length();
    if (len > _outputEnd) {
        // Let's reserve space for entity at begin/end
        _writeLongString(text);
        return;
    }
    // Ok: we know String will fit in buffer ok
    // But do we need to flush first?
    if ((_outputTail + len) > _outputEnd) {
        _flushBuffer();
    }
    text.getChars(0, len, _outputBuffer, _outputTail);
    if (_characterEscapes != null) {
        _writeStringCustom(len);
    } else if (_maximumNonEscapedChar != 0) {
        _writeStringASCII(len, _maximumNonEscapedChar);
    } else {
        _writeString2(len);
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(String).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(int)","Method","No Comment","private void _writeString2(final int len) throws IOException {
    // And then we'll need to verify need for escaping etc:
    final int end = _outputTail + len;
    final int[] escCodes = _outputEscapes;
    final int escLen = escCodes.length;
    output_loop: while (_outputTail < end) {
        // Fast loop for chars not needing escaping
        escape_loop: while (true) {
            char c = _outputBuffer[_outputTail];
            if (c < escLen && escCodes[c] != 0) {
                break escape_loop;
            }
            if (++_outputTail >= end) {
                break output_loop;
            }
        }
        // Ok, bumped into something that needs escaping.
        /* First things first: need to flush the buffer.
             * Inlined, as we don't want to lose tail pointer
             */
        int flushLen = (_outputTail - _outputHead);
        if (flushLen > 0) {
            _writer.write(_outputBuffer, _outputHead, flushLen);
        }
        /* In any case, tail will be the new start, so hopefully
             * we have room now.
             */
        char c = _outputBuffer[_outputTail++];
        _prependOrWriteCharacterEscape(c, escCodes[c]);
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(int).len","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString2(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeLongString(String)","Method","* Method called to write ""long strings"", strings whose length exceeds
     * output buffer length.","private void _writeLongString(String text) throws IOException {
    // First things first: let's flush the buffer to get some more room
    _flushBuffer();
    // Then we can write
    final int textLen = text.length();
    int offset = 0;
    do {
        int max = _outputEnd;
        int segmentLen = ((offset + max) > textLen) ? (textLen - offset) : max;
        text.getChars(offset, offset + segmentLen, _outputBuffer, 0);
        if (_characterEscapes != null) {
            _writeSegmentCustom(segmentLen);
        } else if (_maximumNonEscapedChar != 0) {
            _writeSegmentASCII(segmentLen, _maximumNonEscapedChar);
        } else {
            _writeSegment(segmentLen);
        }
        offset += segmentLen;
    } while (offset < textLen);
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeLongString(String).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeLongString(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(int)","Method","* Method called to output textual context which has been copied
     * to the output buffer prior to call. If any escaping is needed,
     * it will also be handled by the method.
     *<p>
     * Note: when called, textual content to write is within output
     * buffer, right after buffered content (if any). That's why only
     * length of that text is passed, as buffer and offset are implied.","private void _writeSegment(int end) throws IOException {
    final int[] escCodes = _outputEscapes;
    final int escLen = escCodes.length;
    int ptr = 0;
    int start = ptr;
    output_loop: while (ptr < end) {
        // Fast loop for chars not needing escaping
        char c;
        while (true) {
            c = _outputBuffer[ptr];
            if (c < escLen && escCodes[c] != 0) {
                break;
            }
            if (++ptr >= end) {
                break;
            }
        }
        // Ok, bumped into something that needs escaping.
        /* First things first: need to flush the buffer.
             * Inlined, as we don't want to lose tail pointer
             */
        int flushLen = (ptr - start);
        if (flushLen > 0) {
            _writer.write(_outputBuffer, start, flushLen);
            if (ptr >= end) {
                break output_loop;
            }
        }
        ++ptr;
        // So; either try to prepend (most likely), or write directly:
        start = _prependOrWriteCharacterEscape(_outputBuffer, ptr, end, c, escCodes[c]);
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(int).end","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegment(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(char[],int,int)","Method","* This method called when the string content is already in
     * a char buffer, and need not be copied for processing.","private void _writeString(char[] text, int offset, int len) throws IOException {
    if (_characterEscapes != null) {
        _writeStringCustom(text, offset, len);
        return;
    }
    if (_maximumNonEscapedChar != 0) {
        _writeStringASCII(text, offset, len, _maximumNonEscapedChar);
        return;
    }
    // Let's just find longest spans of non-escapable content, and for
    // each see if it makes sense to copy them, or write through
    // -> len marks the end from now on
    len += offset;
    final int[] escCodes = _outputEscapes;
    final int escLen = escCodes.length;
    while (offset < len) {
        int start = offset;
        while (true) {
            char c = text[offset];
            if (c < escLen && escCodes[c] != 0) {
                break;
            }
            if (++offset >= len) {
                break;
            }
        }
        // Short span? Better just copy it to buffer first:
        int newAmount = offset - start;
        if (newAmount < SHORT_WRITE) {
            // Note: let's reserve room for escaped char (up to 6 chars)
            if ((_outputTail + newAmount) > _outputEnd) {
                _flushBuffer();
            }
            if (newAmount > 0) {
                System.arraycopy(text, start, _outputBuffer, _outputTail, newAmount);
                _outputTail += newAmount;
            }
        } else {
            // Nope: better just write through
            _flushBuffer();
            _writer.write(text, start, newAmount);
        }
        // Was this the end?
        if (offset >= len) {
            // yup
            break;
        }
        // Nope, need to escape the char.
        char c = text[offset++];
        _appendCharacterEscape(c, escCodes[c]);
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(char[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(int,int)","Method","Same as ""_writeString2()"", except needs additional escaping
     * for subset of characters","private void _writeStringASCII(final int len, final int maxNonEscaped) throws IOException, JsonGenerationException {
    // And then we'll need to verify need for escaping etc:
    int end = _outputTail + len;
    final int[] escCodes = _outputEscapes;
    final int escLimit = Math.min(escCodes.length, maxNonEscaped + 1);
    int escCode = 0;
    output_loop: while (_outputTail < end) {
        char c;
        // Fast loop for chars not needing escaping
        escape_loop: while (true) {
            c = _outputBuffer[_outputTail];
            if (c < escLimit) {
                escCode = escCodes[c];
                if (escCode != 0) {
                    break escape_loop;
                }
            } else if (c > maxNonEscaped) {
                escCode = CharacterEscapes.ESCAPE_STANDARD;
                break escape_loop;
            }
            if (++_outputTail >= end) {
                break output_loop;
            }
        }
        int flushLen = (_outputTail - _outputHead);
        if (flushLen > 0) {
            _writer.write(_outputBuffer, _outputHead, flushLen);
        }
        ++_outputTail;
        _prependOrWriteCharacterEscape(c, escCode);
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(int,int).len","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(int,int).maxNonEscaped","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(int,int)","Method","No Comment","private void _writeSegmentASCII(int end, final int maxNonEscaped) throws IOException, JsonGenerationException {
    final int[] escCodes = _outputEscapes;
    final int escLimit = Math.min(escCodes.length, maxNonEscaped + 1);
    int ptr = 0;
    int escCode = 0;
    int start = ptr;
    output_loop: while (ptr < end) {
        // Fast loop for chars not needing escaping
        char c;
        while (true) {
            c = _outputBuffer[ptr];
            if (c < escLimit) {
                escCode = escCodes[c];
                if (escCode != 0) {
                    break;
                }
            } else if (c > maxNonEscaped) {
                escCode = CharacterEscapes.ESCAPE_STANDARD;
                break;
            }
            if (++ptr >= end) {
                break;
            }
        }
        int flushLen = (ptr - start);
        if (flushLen > 0) {
            _writer.write(_outputBuffer, start, flushLen);
            if (ptr >= end) {
                break output_loop;
            }
        }
        ++ptr;
        start = _prependOrWriteCharacterEscape(_outputBuffer, ptr, end, c, escCode);
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(int,int).end","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(int,int).maxNonEscaped","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentASCII(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(char[],int,int,int)","Method","No Comment","private void _writeStringASCII(char[] text, int offset, int len, final int maxNonEscaped) throws IOException, JsonGenerationException {
    // -> len marks the end from now on
    len += offset;
    final int[] escCodes = _outputEscapes;
    final int escLimit = Math.min(escCodes.length, maxNonEscaped + 1);
    int escCode = 0;
    while (offset < len) {
        int start = offset;
        char c;
        while (true) {
            c = text[offset];
            if (c < escLimit) {
                escCode = escCodes[c];
                if (escCode != 0) {
                    break;
                }
            } else if (c > maxNonEscaped) {
                escCode = CharacterEscapes.ESCAPE_STANDARD;
                break;
            }
            if (++offset >= len) {
                break;
            }
        }
        // Short span? Better just copy it to buffer first:
        int newAmount = offset - start;
        if (newAmount < SHORT_WRITE) {
            // Note: let's reserve room for escaped char (up to 6 chars)
            if ((_outputTail + newAmount) > _outputEnd) {
                _flushBuffer();
            }
            if (newAmount > 0) {
                System.arraycopy(text, start, _outputBuffer, _outputTail, newAmount);
                _outputTail += newAmount;
            }
        } else {
            // Nope: better just write through
            _flushBuffer();
            _writer.write(text, start, newAmount);
        }
        // Was this the end?
        if (offset >= len) {
            // yup
            break;
        }
        // Nope, need to escape the char.
        ++offset;
        _appendCharacterEscape(c, escCode);
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(char[],int,int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(char[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(char[],int,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(char[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(char[],int,int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(char[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(char[],int,int,int).maxNonEscaped","Parameter_4","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringASCII(char[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(int)","Method","Same as ""_writeString2()"", except needs additional escaping
     * for subset of characters","private void _writeStringCustom(final int len) throws IOException, JsonGenerationException {
    // And then we'll need to verify need for escaping etc:
    int end = _outputTail + len;
    final int[] escCodes = _outputEscapes;
    final int maxNonEscaped = (_maximumNonEscapedChar < 1) ? 0xFFFF : _maximumNonEscapedChar;
    final int escLimit = Math.min(escCodes.length, maxNonEscaped + 1);
    int escCode = 0;
    final CharacterEscapes customEscapes = _characterEscapes;
    output_loop: while (_outputTail < end) {
        char c;
        // Fast loop for chars not needing escaping
        escape_loop: while (true) {
            c = _outputBuffer[_outputTail];
            if (c < escLimit) {
                escCode = escCodes[c];
                if (escCode != 0) {
                    break escape_loop;
                }
            } else if (c > maxNonEscaped) {
                escCode = CharacterEscapes.ESCAPE_STANDARD;
                break escape_loop;
            } else {
                if ((_currentEscape = customEscapes.getEscapeSequence(c)) != null) {
                    escCode = CharacterEscapes.ESCAPE_CUSTOM;
                    break escape_loop;
                }
            }
            if (++_outputTail >= end) {
                break output_loop;
            }
        }
        int flushLen = (_outputTail - _outputHead);
        if (flushLen > 0) {
            _writer.write(_outputBuffer, _outputHead, flushLen);
        }
        ++_outputTail;
        _prependOrWriteCharacterEscape(c, escCode);
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(int).len","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(int)","Method","No Comment","private void _writeSegmentCustom(int end) throws IOException, JsonGenerationException {
    final int[] escCodes = _outputEscapes;
    final int maxNonEscaped = (_maximumNonEscapedChar < 1) ? 0xFFFF : _maximumNonEscapedChar;
    final int escLimit = Math.min(escCodes.length, maxNonEscaped + 1);
    final CharacterEscapes customEscapes = _characterEscapes;
    int ptr = 0;
    int escCode = 0;
    int start = ptr;
    output_loop: while (ptr < end) {
        // Fast loop for chars not needing escaping
        char c;
        while (true) {
            c = _outputBuffer[ptr];
            if (c < escLimit) {
                escCode = escCodes[c];
                if (escCode != 0) {
                    break;
                }
            } else if (c > maxNonEscaped) {
                escCode = CharacterEscapes.ESCAPE_STANDARD;
                break;
            } else {
                if ((_currentEscape = customEscapes.getEscapeSequence(c)) != null) {
                    escCode = CharacterEscapes.ESCAPE_CUSTOM;
                    break;
                }
            }
            if (++ptr >= end) {
                break;
            }
        }
        int flushLen = (ptr - start);
        if (flushLen > 0) {
            _writer.write(_outputBuffer, start, flushLen);
            if (ptr >= end) {
                break output_loop;
            }
        }
        ++ptr;
        start = _prependOrWriteCharacterEscape(_outputBuffer, ptr, end, c, escCode);
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(int).end","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeSegmentCustom(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(char[],int,int)","Method","No Comment","private void _writeStringCustom(char[] text, int offset, int len) throws IOException, JsonGenerationException {
    // -> len marks the end from now on
    len += offset;
    final int[] escCodes = _outputEscapes;
    final int maxNonEscaped = (_maximumNonEscapedChar < 1) ? 0xFFFF : _maximumNonEscapedChar;
    final int escLimit = Math.min(escCodes.length, maxNonEscaped + 1);
    final CharacterEscapes customEscapes = _characterEscapes;
    int escCode = 0;
    while (offset < len) {
        int start = offset;
        char c;
        while (true) {
            c = text[offset];
            if (c < escLimit) {
                escCode = escCodes[c];
                if (escCode != 0) {
                    break;
                }
            } else if (c > maxNonEscaped) {
                escCode = CharacterEscapes.ESCAPE_STANDARD;
                break;
            } else {
                if ((_currentEscape = customEscapes.getEscapeSequence(c)) != null) {
                    escCode = CharacterEscapes.ESCAPE_CUSTOM;
                    break;
                }
            }
            if (++offset >= len) {
                break;
            }
        }
        // Short span? Better just copy it to buffer first:
        int newAmount = offset - start;
        if (newAmount < SHORT_WRITE) {
            // Note: let's reserve room for escaped char (up to 6 chars)
            if ((_outputTail + newAmount) > _outputEnd) {
                _flushBuffer();
            }
            if (newAmount > 0) {
                System.arraycopy(text, start, _outputBuffer, _outputTail, newAmount);
                _outputTail += newAmount;
            }
        } else {
            // Nope: better just write through
            _flushBuffer();
            _writer.write(text, start, newAmount);
        }
        // Was this the end?
        if (offset >= len) {
            // yup
            break;
        }
        // Nope, need to escape the char.
        ++offset;
        _appendCharacterEscape(c, escCode);
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(char[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeStringCustom(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,byte[],int,int)","Method","No Comment","protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException {
    // Encoding is by chunks of 3 input, 4 output chars, so:
    int safeInputEnd = inputEnd - 3;
    // Let's also reserve room for possible (and quoted) lf char each round
    int safeOutputEnd = _outputEnd - 6;
    int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
    // Ok, first we loop through all full triplets of data:
    while (inputPtr <= safeInputEnd) {
        if (_outputTail > safeOutputEnd) {
            // need to flush
            _flushBuffer();
        }
        // First, mash 3 bytes into lsb of 32-bit int
        int b24 = (input[inputPtr++]) << 8;
        b24 |= (input[inputPtr++]) & 0xFF;
        b24 = (b24 << 8) | ((input[inputPtr++]) & 0xFF);
        _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);
        if (--chunksBeforeLF <= 0) {
            // note: must quote in JSON value
            _outputBuffer[_outputTail++] = '\\';
            _outputBuffer[_outputTail++] = 'n';
            chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
        }
    }
    // And then we may have 1 or 2 leftover bytes to encode
    // 0, 1 or 2
    int inputLeft = inputEnd - inputPtr;
    if (inputLeft > 0) {
        // yes, but do we have room for output?
        if (_outputTail > safeOutputEnd) {
            // don't really need 6 bytes but...
            _flushBuffer();
        }
        int b24 = (input[inputPtr++]) << 16;
        if (inputLeft == 2) {
            b24 |= ((input[inputPtr++]) & 0xFF) << 8;
        }
        _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,byte[],int,int).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,byte[],int,int).input","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,byte[],int,int).inputPtr","Parameter_3","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,byte[],int,int).inputEnd","Parameter_4","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,InputStream,byte[],int)","Method","write-method called when length is definitely known","protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException {
    int inputPtr = 0;
    int inputEnd = 0;
    int lastFullOffset = -3;
    // Let's also reserve room for possible (and quoted) lf char each round
    int safeOutputEnd = _outputEnd - 6;
    int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
    while (bytesLeft > 2) {
        // main loop for full triplets
        if (inputPtr > lastFullOffset) {
            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);
            inputPtr = 0;
            if (inputEnd < 3) {
                // required to try to read to have at least 3 bytes
                break;
            }
            lastFullOffset = inputEnd - 3;
        }
        if (_outputTail > safeOutputEnd) {
            // need to flush
            _flushBuffer();
        }
        int b24 = (readBuffer[inputPtr++]) << 8;
        b24 |= (readBuffer[inputPtr++]) & 0xFF;
        b24 = (b24 << 8) | ((readBuffer[inputPtr++]) & 0xFF);
        bytesLeft -= 3;
        _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);
        if (--chunksBeforeLF <= 0) {
            _outputBuffer[_outputTail++] = '\\';
            _outputBuffer[_outputTail++] = 'n';
            chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
        }
    }
    // And then we may have 1 or 2 leftover bytes to encode
    if (bytesLeft > 0) {
        inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);
        inputPtr = 0;
        if (inputEnd > 0) {
            // yes, but do we have room for output?
            if (_outputTail > safeOutputEnd) {
                // don't really need 6 bytes but...
                _flushBuffer();
            }
            int b24 = (readBuffer[inputPtr++]) << 16;
            int amount;
            if (inputPtr < inputEnd) {
                b24 |= ((readBuffer[inputPtr]) & 0xFF) << 8;
                amount = 2;
            } else {
                amount = 1;
            }
            _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);
            bytesLeft -= amount;
        }
    }
    return bytesLeft;
}","int","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,InputStream,byte[],int).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,InputStream,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,InputStream,byte[],int).data","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,InputStream,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,InputStream,byte[],int).readBuffer","Parameter_3","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,InputStream,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,InputStream,byte[],int).bytesLeft","Parameter_4","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,InputStream,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,InputStream,byte[])","Method","write method when length is unknown","protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException {
    int inputPtr = 0;
    int inputEnd = 0;
    int lastFullOffset = -3;
    int bytesDone = 0;
    // Let's also reserve room for possible (and quoted) LF char each round
    int safeOutputEnd = _outputEnd - 6;
    int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
    // Ok, first we loop through all full triplets of data:
    while (true) {
        if (inputPtr > lastFullOffset) {
            // need to load more
            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, readBuffer.length);
            inputPtr = 0;
            if (inputEnd < 3) {
                // required to try to read to have at least 3 bytes
                break;
            }
            lastFullOffset = inputEnd - 3;
        }
        if (_outputTail > safeOutputEnd) {
            // need to flush
            _flushBuffer();
        }
        // First, mash 3 bytes into lsb of 32-bit int
        int b24 = (readBuffer[inputPtr++]) << 8;
        b24 |= (readBuffer[inputPtr++]) & 0xFF;
        b24 = (b24 << 8) | ((readBuffer[inputPtr++]) & 0xFF);
        bytesDone += 3;
        _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);
        if (--chunksBeforeLF <= 0) {
            _outputBuffer[_outputTail++] = '\\';
            _outputBuffer[_outputTail++] = 'n';
            chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
        }
    }
    // And then we may have 1 or 2 leftover bytes to encode
    if (inputPtr < inputEnd) {
        // yes, but do we have room for output?
        if (_outputTail > safeOutputEnd) {
            // don't really need 6 bytes but...
            _flushBuffer();
        }
        int b24 = (readBuffer[inputPtr++]) << 16;
        int amount = 1;
        if (inputPtr < inputEnd) {
            b24 |= ((readBuffer[inputPtr]) & 0xFF) << 8;
            amount = 2;
        }
        bytesDone += amount;
        _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);
    }
    return bytesDone;
}","int","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,InputStream,byte[]).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,InputStream,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,InputStream,byte[]).data","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,InputStream,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,InputStream,byte[]).readBuffer","Parameter_3","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeBinary(Base64Variant,InputStream,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(InputStream,byte[],int,int,int)","Method","No Comment","private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException {
    // anything to shift to front?
    int i = 0;
    while (inputPtr < inputEnd) {
        readBuffer[i++] = readBuffer[inputPtr++];
    }
    inputPtr = 0;
    inputEnd = i;
    maxRead = Math.min(maxRead, readBuffer.length);
    do {
        int length = maxRead - inputEnd;
        if (length == 0) {
            break;
        }
        int count = in.read(readBuffer, inputEnd, length);
        if (count < 0) {
            return inputEnd;
        }
        inputEnd += count;
    } while (inputEnd < 3);
    return inputEnd;
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(InputStream,byte[],int,int,int).in","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(InputStream,byte[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(InputStream,byte[],int,int,int).readBuffer","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(InputStream,byte[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(InputStream,byte[],int,int,int).inputPtr","Parameter_3","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(InputStream,byte[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(InputStream,byte[],int,int,int).inputEnd","Parameter_4","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(InputStream,byte[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(InputStream,byte[],int,int,int).maxRead","Parameter_5","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._readMore(InputStream,byte[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writeNull()","Method","No Comment","private final void _writeNull() throws IOException {
    if ((_outputTail + 4) >= _outputEnd) {
        _flushBuffer();
    }
    int ptr = _outputTail;
    char[] buf = _outputBuffer;
    buf[ptr] = 'n';
    buf[++ptr] = 'u';
    buf[++ptr] = 'l';
    buf[++ptr] = 'l';
    _outputTail = ptr + 1;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(char,int)","Method","* Method called to try to either prepend character escape at front of
     * given buffer; or if not possible, to write it out directly.
     * Uses head and tail pointers (and updates as necessary)","private void _prependOrWriteCharacterEscape(char ch, int escCode) throws IOException, JsonGenerationException {
    if (escCode >= 0) {
        // \\N (2 char)
        if (_outputTail >= 2) {
            // fits, just prepend
            int ptr = _outputTail - 2;
            _outputHead = ptr;
            _outputBuffer[ptr++] = '\\';
            _outputBuffer[ptr] = (char) escCode;
            return;
        }
        // won't fit, write
        char[] buf = _entityBuffer;
        if (buf == null) {
            buf = _allocateEntityBuffer();
        }
        _outputHead = _outputTail;
        buf[1] = (char) escCode;
        _writer.write(buf, 0, 2);
        return;
    }
    if (escCode != CharacterEscapes.ESCAPE_CUSTOM) {
        // std, \\uXXXX
        char[] HEX_CHARS = getHexChars();
        if (_outputTail >= 6) {
            // fits, prepend to buffer
            char[] buf = _outputBuffer;
            int ptr = _outputTail - 6;
            _outputHead = ptr;
            buf[ptr] = '\\';
            buf[++ptr] = 'u';
            // We know it's a control char, so only the last 2 chars are non-0
            if (ch > 0xFF) {
                // beyond 8 bytes
                int hi = (ch >> 8) & 0xFF;
                buf[++ptr] = HEX_CHARS[hi >> 4];
                buf[++ptr] = HEX_CHARS[hi & 0xF];
                ch &= 0xFF;
            } else {
                buf[++ptr] = '0';
                buf[++ptr] = '0';
            }
            buf[++ptr] = HEX_CHARS[ch >> 4];
            buf[++ptr] = HEX_CHARS[ch & 0xF];
            return;
        }
        // won't fit, flush and write
        char[] buf = _entityBuffer;
        if (buf == null) {
            buf = _allocateEntityBuffer();
        }
        _outputHead = _outputTail;
        if (ch > 0xFF) {
            // beyond 8 bytes
            int hi = (ch >> 8) & 0xFF;
            int lo = ch & 0xFF;
            buf[10] = HEX_CHARS[hi >> 4];
            buf[11] = HEX_CHARS[hi & 0xF];
            buf[12] = HEX_CHARS[lo >> 4];
            buf[13] = HEX_CHARS[lo & 0xF];
            _writer.write(buf, 8, 6);
        } else {
            // We know it's a control char, so only the last 2 chars are non-0
            buf[6] = HEX_CHARS[ch >> 4];
            buf[7] = HEX_CHARS[ch & 0xF];
            _writer.write(buf, 2, 6);
        }
        return;
    }
    String escape;
    if (_currentEscape == null) {
        escape = _characterEscapes.getEscapeSequence(ch).getValue();
    } else {
        escape = _currentEscape.getValue();
        _currentEscape = null;
    }
    int len = escape.length();
    if (_outputTail >= len) {
        // fits in, prepend
        int ptr = _outputTail - len;
        _outputHead = ptr;
        escape.getChars(0, len, _outputBuffer, ptr);
        return;
    }
    // won't fit, write separately
    _outputHead = _outputTail;
    _writer.write(escape);
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(char,int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(char,int).escCode","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(char[],int,int,char,int)","Method","* Method called to try to either prepend character escape at front of
     * given buffer; or if not possible, to write it out directly.
     *
     * @return Pointer to start of prepended entity (if prepended); or 'ptr'
     *   if not.","private int _prependOrWriteCharacterEscape(char[] buffer, int ptr, int end, char ch, int escCode) throws IOException, JsonGenerationException {
    if (escCode >= 0) {
        // \\N (2 char)
        if (ptr > 1 && ptr < end) {
            // fits, just prepend
            ptr -= 2;
            buffer[ptr] = '\\';
            buffer[ptr + 1] = (char) escCode;
        } else {
            // won't fit, write
            char[] ent = _entityBuffer;
            if (ent == null) {
                ent = _allocateEntityBuffer();
            }
            ent[1] = (char) escCode;
            _writer.write(ent, 0, 2);
        }
        return ptr;
    }
    if (escCode != CharacterEscapes.ESCAPE_CUSTOM) {
        // std, \\uXXXX
        char[] HEX_CHARS = getHexChars();
        if (ptr > 5 && ptr < end) {
            // fits, prepend to buffer
            ptr -= 6;
            buffer[ptr++] = '\\';
            buffer[ptr++] = 'u';
            // We know it's a control char, so only the last 2 chars are non-0
            if (ch > 0xFF) {
                // beyond 8 bytes
                int hi = (ch >> 8) & 0xFF;
                buffer[ptr++] = HEX_CHARS[hi >> 4];
                buffer[ptr++] = HEX_CHARS[hi & 0xF];
                ch &= 0xFF;
            } else {
                buffer[ptr++] = '0';
                buffer[ptr++] = '0';
            }
            buffer[ptr++] = HEX_CHARS[ch >> 4];
            buffer[ptr] = HEX_CHARS[ch & 0xF];
            ptr -= 5;
        } else {
            // won't fit, flush and write
            char[] ent = _entityBuffer;
            if (ent == null) {
                ent = _allocateEntityBuffer();
            }
            _outputHead = _outputTail;
            if (ch > 0xFF) {
                // beyond 8 bytes
                int hi = (ch >> 8) & 0xFF;
                int lo = ch & 0xFF;
                ent[10] = HEX_CHARS[hi >> 4];
                ent[11] = HEX_CHARS[hi & 0xF];
                ent[12] = HEX_CHARS[lo >> 4];
                ent[13] = HEX_CHARS[lo & 0xF];
                _writer.write(ent, 8, 6);
            } else {
                // We know it's a control char, so only the last 2 chars are non-0
                ent[6] = HEX_CHARS[ch >> 4];
                ent[7] = HEX_CHARS[ch & 0xF];
                _writer.write(ent, 2, 6);
            }
        }
        return ptr;
    }
    String escape;
    if (_currentEscape == null) {
        escape = _characterEscapes.getEscapeSequence(ch).getValue();
    } else {
        escape = _currentEscape.getValue();
        _currentEscape = null;
    }
    int len = escape.length();
    if (ptr >= len && ptr < end) {
        // fits in, prepend
        ptr -= len;
        escape.getChars(0, len, buffer, ptr);
    } else {
        // won't fit, write separately
        _writer.write(escape);
    }
    return ptr;
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(char[],int,int,char,int).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(char[],int,int,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(char[],int,int,char,int).ptr","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(char[],int,int,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(char[],int,int,char,int).end","Parameter_3","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(char[],int,int,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(char[],int,int,char,int).ch","Parameter_4","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(char[],int,int,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(char[],int,int,char,int).escCode","Parameter_5","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._prependOrWriteCharacterEscape(char[],int,int,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(char,int)","Method","* Method called to append escape sequence for given character, at the
     * end of standard output buffer; or if not possible, write out directly.","private void _appendCharacterEscape(char ch, int escCode) throws IOException, JsonGenerationException {
    if (escCode >= 0) {
        // \\N (2 char)
        if ((_outputTail + 2) > _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = '\\';
        _outputBuffer[_outputTail++] = (char) escCode;
        return;
    }
    if (escCode != CharacterEscapes.ESCAPE_CUSTOM) {
        // std, \\uXXXX
        if ((_outputTail + 5) >= _outputEnd) {
            _flushBuffer();
        }
        int ptr = _outputTail;
        char[] buf = _outputBuffer;
        char[] HEX_CHARS = getHexChars();
        buf[ptr++] = '\\';
        buf[ptr++] = 'u';
        // We know it's a control char, so only the last 2 chars are non-0
        if (ch > 0xFF) {
            // beyond 8 bytes
            int hi = (ch >> 8) & 0xFF;
            buf[ptr++] = HEX_CHARS[hi >> 4];
            buf[ptr++] = HEX_CHARS[hi & 0xF];
            ch &= 0xFF;
        } else {
            buf[ptr++] = '0';
            buf[ptr++] = '0';
        }
        buf[ptr++] = HEX_CHARS[ch >> 4];
        buf[ptr++] = HEX_CHARS[ch & 0xF];
        _outputTail = ptr;
        return;
    }
    String escape;
    if (_currentEscape == null) {
        escape = _characterEscapes.getEscapeSequence(ch).getValue();
    } else {
        escape = _currentEscape.getValue();
        _currentEscape = null;
    }
    int len = escape.length();
    if ((_outputTail + len) > _outputEnd) {
        _flushBuffer();
        if (len > _outputEnd) {
            // very very long escape; unlikely but theoretically possible
            _writer.write(escape);
            return;
        }
    }
    escape.getChars(0, len, _outputBuffer, _outputTail);
    _outputTail += len;
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(char,int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(char,int).escCode","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._appendCharacterEscape(char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateEntityBuffer()","Method","No Comment","private char[] _allocateEntityBuffer() {
    char[] buf = new char[14];
    // first 2 chars, non-numeric escapes (like \n)
    buf[0] = '\\';
    // next 6; 8-bit escapes (control chars mostly)
    buf[2] = '\\';
    buf[3] = 'u';
    buf[4] = '0';
    buf[5] = '0';
    // last 6, beyond 8 bits
    buf[8] = '\\';
    buf[9] = 'u';
    _entityBuffer = buf;
    return buf;
}","char[]","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._allocateCopyBuffer()","Method","* @since 2.9","private char[] _allocateCopyBuffer() {
    if (_copyBuffer == null) {
        _copyBuffer = _ioContext.allocNameCopyBuffer(2000);
    }
    return _copyBuffer;
}","char[]","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._flushBuffer()","Method","No Comment","protected void _flushBuffer() throws IOException {
    int len = _outputTail - _outputHead;
    if (len > 0) {
        int offset = _outputHead;
        _outputTail = _outputHead = 0;
        _writer.write(_outputBuffer, offset, len);
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.<init>(IOContext,int,ObjectCodec,Writer)","Constructor","No Comment","// since 2.10
@Deprecated
public WriterBasedJsonGenerator(IOContext ctxt, int features, ObjectCodec codec, Writer w) {
    this(ctxt, features, codec, w, JsonFactory.DEFAULT_QUOTE_CHAR);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.<init>(IOContext,int,ObjectCodec,Writer).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.<init>(IOContext,int,ObjectCodec,Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.<init>(IOContext,int,ObjectCodec,Writer).features","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.<init>(IOContext,int,ObjectCodec,Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.<init>(IOContext,int,ObjectCodec,Writer).codec","Parameter_3","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.<init>(IOContext,int,ObjectCodec,Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.<init>(IOContext,int,ObjectCodec,Writer).w","Parameter_4","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.<init>(IOContext,int,ObjectCodec,Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.<init>(IOContext,int,ObjectCodec,Writer,char)","Constructor","@since 2.10","public WriterBasedJsonGenerator(IOContext ctxt, int features, ObjectCodec codec, Writer w, char quoteChar) {
    super(ctxt, features, codec);
    _writer = w;
    _outputBuffer = ctxt.allocConcatBuffer();
    _outputEnd = _outputBuffer.length;
    _quoteChar = quoteChar;
    boolean escapeSlash = isEnabled(JsonWriteFeature.ESCAPE_FORWARD_SLASHES.mappedFeature());
    if (quoteChar != '""' || escapeSlash) {
        _outputEscapes = CharTypes.get7BitOutputEscapes(quoteChar, escapeSlash);
    }
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.<init>(IOContext,int,ObjectCodec,Writer,char).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.<init>(IOContext,int,ObjectCodec,Writer,char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.<init>(IOContext,int,ObjectCodec,Writer,char).features","Parameter_2","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.<init>(IOContext,int,ObjectCodec,Writer,char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.<init>(IOContext,int,ObjectCodec,Writer,char).codec","Parameter_3","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.<init>(IOContext,int,ObjectCodec,Writer,char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.<init>(IOContext,int,ObjectCodec,Writer,char).w","Parameter_4","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.<init>(IOContext,int,ObjectCodec,Writer,char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.<init>(IOContext,int,ObjectCodec,Writer,char).quoteChar","Parameter_5","Belong to com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.<init>(IOContext,int,ObjectCodec,Writer,char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl","Abstract Class","* Intermediate base class shared by JSON-backed generators
 * like {@link UTF8JsonGenerator} and {@link WriterBasedJsonGenerator}.
 *
 * @since 2.1","Abstract Class do not obtain Source Code","No return type","public , abstract ","com.fasterxml.jackson.core.base.GeneratorBase",""
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.sOutputEscapes","Field","* This is the default set of escape codes, over 7-bit ASCII range
     * (first 128 character codes), used for single-byte UTF-8 characters.","protected final static int[] sOutputEscapes = CharTypes.get7BitOutputEscapes();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.JSON_WRITE_CAPABILITIES","Field","* Default capabilities for JSON generator implementations which do not
     * different from ""general textual"" defaults
     *
     * @since 2.12","protected final static JacksonFeatureSet<StreamWriteCapability> JSON_WRITE_CAPABILITIES = DEFAULT_TEXTUAL_WRITE_CAPABILITIES;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl._streamWriteConstraints","Field","* @since 2.16","protected final StreamWriteConstraints _streamWriteConstraints;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl._outputEscapes","Field","* Currently active set of output escape code definitions (whether
     * and how to escape or not) for 7-bit ASCII range (first 128
     * character codes). Defined separately to make potentially
     * customizable","protected int[] _outputEscapes = sOutputEscapes;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl._maximumNonEscapedChar","Field","* Value between 128 (0x80) and 65535 (0xFFFF) that indicates highest
     * Unicode code point that will not need escaping; or 0 to indicate
     * that all characters can be represented without escaping.
     * Typically used to force escaping of some portion of character set;
     * for example to always escape non-ASCII characters (if value was 127).
     *<p>
     * NOTE: not all sub-classes make use of this setting.","protected int _maximumNonEscapedChar;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl._characterEscapes","Field","* Definition of custom character escapes to use for generators created
     * by this factory, if any. If null, standard data format specific
     * escapes are used.","protected CharacterEscapes _characterEscapes;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl._rootValueSeparator","Field","* Separator to use, if any, between root-level values.
     *
     * @since 2.1","protected SerializableString _rootValueSeparator = JsonFactory.DEFAULT_ROOT_VALUE_SEPARATOR;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl._cfgUnqNames","Field","* Flag that is set if quoting is not to be added around
     * JSON Object property names.
     *
     * @since 2.7","protected boolean _cfgUnqNames;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl._cfgWriteHexUppercase","Field","* Write Hex values with uppercase letters
     *
     * @since 2.14","protected boolean _cfgWriteHexUppercase;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.version()","Method","No Comment","@Override
public Version version() {
    return VersionUtil.versionFor(getClass());
}","Version","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.streamWriteConstraints()","Method","No Comment","@Override
public StreamWriteConstraints streamWriteConstraints() {
    return _streamWriteConstraints;
}","StreamWriteConstraints","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.enable(Feature)","Method","No Comment","@SuppressWarnings(""deprecation"")
@Override
public JsonGenerator enable(Feature f) {
    super.enable(f);
    if (f == Feature.QUOTE_FIELD_NAMES) {
        _cfgUnqNames = false;
    } else if (f == Feature.WRITE_HEX_UPPER_CASE) {
        _cfgWriteHexUppercase = true;
    }
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.enable(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonGeneratorImpl.enable(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.disable(Feature)","Method","No Comment","@SuppressWarnings(""deprecation"")
@Override
public JsonGenerator disable(Feature f) {
    super.disable(f);
    if (f == Feature.QUOTE_FIELD_NAMES) {
        _cfgUnqNames = true;
    } else if (f == Feature.WRITE_HEX_UPPER_CASE) {
        _cfgWriteHexUppercase = false;
    }
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.disable(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonGeneratorImpl.disable(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl._checkStdFeatureChanges(int,int)","Method","No Comment","@SuppressWarnings(""deprecation"")
@Override
protected void _checkStdFeatureChanges(int newFeatureFlags, int changedFeatures) {
    super._checkStdFeatureChanges(newFeatureFlags, changedFeatures);
    _cfgUnqNames = !Feature.QUOTE_FIELD_NAMES.enabledIn(newFeatureFlags);
    _cfgWriteHexUppercase = Feature.WRITE_HEX_UPPER_CASE.enabledIn(newFeatureFlags);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl._checkStdFeatureChanges(int,int).newFeatureFlags","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonGeneratorImpl._checkStdFeatureChanges(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl._checkStdFeatureChanges(int,int).changedFeatures","Parameter_2","Belong to com.fasterxml.jackson.core.json.JsonGeneratorImpl._checkStdFeatureChanges(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.setHighestNonEscapedChar(int)","Method","No Comment","@Override
public JsonGenerator setHighestNonEscapedChar(int charCode) {
    _maximumNonEscapedChar = (charCode < 0) ? 0 : charCode;
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.setHighestNonEscapedChar(int).charCode","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonGeneratorImpl.setHighestNonEscapedChar(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.getHighestEscapedChar()","Method","No Comment","@Override
public int getHighestEscapedChar() {
    return _maximumNonEscapedChar;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.setCharacterEscapes(CharacterEscapes)","Method","No Comment","@Override
public JsonGenerator setCharacterEscapes(CharacterEscapes esc) {
    _characterEscapes = esc;
    if (esc == null) {
        // revert to standard escapes
        _outputEscapes = sOutputEscapes;
    } else {
        _outputEscapes = esc.getEscapeCodesForAscii();
    }
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.setCharacterEscapes(CharacterEscapes).esc","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonGeneratorImpl.setCharacterEscapes(CharacterEscapes)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.getCharacterEscapes()","Method","* Method for accessing custom escapes factory uses for {@link JsonGenerator}s
     * it creates.","@Override
public CharacterEscapes getCharacterEscapes() {
    return _characterEscapes;
}","CharacterEscapes","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.setRootValueSeparator(SerializableString)","Method","No Comment","@Override
public JsonGenerator setRootValueSeparator(SerializableString sep) {
    _rootValueSeparator = sep;
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.setRootValueSeparator(SerializableString).sep","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonGeneratorImpl.setRootValueSeparator(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.getWriteCapabilities()","Method","No Comment","@Override
public JacksonFeatureSet<StreamWriteCapability> getWriteCapabilities() {
    return JSON_WRITE_CAPABILITIES;
}","JacksonFeatureSet","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl._verifyPrettyValueWrite(String,int)","Method","No Comment","protected void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException {
    // If we have a pretty printer, it knows what to do:
    switch(status) {
        case // array
        JsonWriteContext.STATUS_OK_AFTER_COMMA:
            _cfgPrettyPrinter.writeArrayValueSeparator(this);
            break;
        case JsonWriteContext.STATUS_OK_AFTER_COLON:
            _cfgPrettyPrinter.writeObjectFieldValueSeparator(this);
            break;
        case JsonWriteContext.STATUS_OK_AFTER_SPACE:
            _cfgPrettyPrinter.writeRootValueSeparator(this);
            break;
        case JsonWriteContext.STATUS_OK_AS_IS:
            // First entry, but of which context?
            if (_writeContext.inArray()) {
                _cfgPrettyPrinter.beforeArrayValues(this);
            } else if (_writeContext.inObject()) {
                _cfgPrettyPrinter.beforeObjectEntries(this);
            }
            break;
        case JsonWriteContext.STATUS_EXPECT_NAME:
            _reportCantWriteValueExpectName(typeMsg);
            break;
        default:
            _throwInternal();
            break;
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl._verifyPrettyValueWrite(String,int).typeMsg","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonGeneratorImpl._verifyPrettyValueWrite(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl._verifyPrettyValueWrite(String,int).status","Parameter_2","Belong to com.fasterxml.jackson.core.json.JsonGeneratorImpl._verifyPrettyValueWrite(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl._reportCantWriteValueExpectName(String)","Method","No Comment","protected void _reportCantWriteValueExpectName(String typeMsg) throws IOException {
    _reportError(String.format(""Can not %s, expecting field name (context: %s)"", typeMsg, _writeContext.typeDesc()));
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl._reportCantWriteValueExpectName(String).typeMsg","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonGeneratorImpl._reportCantWriteValueExpectName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.<init>(IOContext,int,ObjectCodec)","Constructor","No Comment","@SuppressWarnings(""deprecation"")
public JsonGeneratorImpl(IOContext ctxt, int features, ObjectCodec codec) {
    super(features, codec, ctxt);
    _streamWriteConstraints = ctxt.streamWriteConstraints();
    if (Feature.ESCAPE_NON_ASCII.enabledIn(features)) {
        // inlined `setHighestNonEscapedChar()`
        _maximumNonEscapedChar = 127;
    }
    _cfgWriteHexUppercase = Feature.WRITE_HEX_UPPER_CASE.enabledIn(features);
    _cfgUnqNames = !Feature.QUOTE_FIELD_NAMES.enabledIn(features);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.<init>(IOContext,int,ObjectCodec).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonGeneratorImpl.<init>(IOContext,int,ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.<init>(IOContext,int,ObjectCodec).features","Parameter_2","Belong to com.fasterxml.jackson.core.json.JsonGeneratorImpl.<init>(IOContext,int,ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonGeneratorImpl.<init>(IOContext,int,ObjectCodec).codec","Parameter_3","Belong to com.fasterxml.jackson.core.json.JsonGeneratorImpl.<init>(IOContext,int,ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator","Class","No Comment","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.json.JsonGeneratorImpl",""
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_u","Field","No Comment","private final static byte BYTE_u = (byte) 'u';","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_0","Field","No Comment","private final static byte BYTE_0 = (byte) '0';","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_LBRACKET","Field","No Comment","private final static byte BYTE_LBRACKET = (byte) '[';","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_RBRACKET","Field","No Comment","private final static byte BYTE_RBRACKET = (byte) ']';","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_LCURLY","Field","No Comment","private final static byte BYTE_LCURLY = (byte) '{';","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_RCURLY","Field","No Comment","private final static byte BYTE_RCURLY = (byte) '}';","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_BACKSLASH","Field","No Comment","private final static byte BYTE_BACKSLASH = (byte) '\\';","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_COMMA","Field","No Comment","private final static byte BYTE_COMMA = (byte) ',';","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_COLON","Field","No Comment","private final static byte BYTE_COLON = (byte) ':';","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.MAX_BYTES_TO_BUFFER","Field","intermediate copies only made up to certain length...","private final static int MAX_BYTES_TO_BUFFER = 512;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.HEX_BYTES_UPPER","Field","No Comment","private final static byte[] HEX_BYTES_UPPER = CharTypes.copyHexBytes(true);","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.HEX_BYTES_LOWER","Field","No Comment","private final static byte[] HEX_BYTES_LOWER = CharTypes.copyHexBytes(false);","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.NULL_BYTES","Field","No Comment","private final static byte[] NULL_BYTES = { 'n', 'u', 'l', 'l' };","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.TRUE_BYTES","Field","No Comment","private final static byte[] TRUE_BYTES = { 't', 'r', 'u', 'e' };","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.FALSE_BYTES","Field","No Comment","private final static byte[] FALSE_BYTES = { 'f', 'a', 'l', 's', 'e' };","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputStream","Field","* Underlying output stream used for writing JSON content.","final protected OutputStream _outputStream;","No return type","final , protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._quoteChar","Field","* Character used for quoting JSON Object property names
     * and String values.
     *
     * @since 2.8","protected byte _quoteChar;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputBuffer","Field","* Intermediate buffer in which contents are buffered before
     * being written using {@link #_outputStream}.","protected byte[] _outputBuffer;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputTail","Field","* Pointer to the position right beyond the last character to output
     * (end marker; may be past the buffer)","protected int _outputTail;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputEnd","Field","* End marker of the output buffer; one past the last valid position
     * within the buffer.","protected final int _outputEnd;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputMaxContiguous","Field","* Maximum number of <code>char</code>s that we know will always fit
     * in the output buffer after escaping","protected final int _outputMaxContiguous;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._charBuffer","Field","* Intermediate buffer in which characters of a String are copied
     * before being encoded.","protected char[] _charBuffer;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._charBufferLength","Field","* Length of <code>_charBuffer</code>","protected final int _charBufferLength;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._entityBuffer","Field","* 6 character temporary buffer allocated if needed, for constructing
     * escape sequences","protected byte[] _entityBuffer;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._bufferRecyclable","Field","* Flag that indicates whether the output buffer is recycable (and
     * needs to be returned to recycler once we are done) or not.","protected boolean _bufferRecyclable;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.getOutputTarget()","Method","No Comment","@Override
public Object getOutputTarget() {
    return _outputStream;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.getOutputBuffered()","Method","No Comment","@Override
public int getOutputBuffered() {
    // Assuming tail is always valid, set to 0 on close
    return _outputTail;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName(String)","Method","No Comment","@Override
public void writeFieldName(String name) throws IOException {
    if (_cfgPrettyPrinter != null) {
        _writePPFieldName(name);
        return;
    }
    final int status = _writeContext.writeFieldName(name);
    if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {
        _reportError(""Can not write a field name, expecting a value"");
    }
    if (status == JsonWriteContext.STATUS_OK_AFTER_COMMA) {
        // need comma
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = BYTE_COMMA;
    }
    /* To support [JACKSON-46], we'll do this:
         * (Question: should quoting of spaces (etc) still be enabled?)
         */
    if (_cfgUnqNames) {
        _writeStringSegments(name, false);
        return;
    }
    final int len = name.length();
    // Does it fit in buffer?
    if (len > _charBufferLength) {
        // no, offline
        _writeStringSegments(name, true);
        return;
    }
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    // But as one segment, or multiple?
    if (len <= _outputMaxContiguous) {
        if ((_outputTail + len) > _outputEnd) {
            // caller must ensure enough space
            _flushBuffer();
        }
        _writeStringSegment(name, 0, len);
    } else {
        _writeStringSegments(name, 0, len);
    }
    // and closing quotes; need room for one more char:
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName(SerializableString)","Method","No Comment","@Override
public void writeFieldName(SerializableString name) throws IOException {
    if (_cfgPrettyPrinter != null) {
        _writePPFieldName(name);
        return;
    }
    final int status = _writeContext.writeFieldName(name.getValue());
    if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {
        _reportError(""Can not write a field name, expecting a value"");
    }
    if (status == JsonWriteContext.STATUS_OK_AFTER_COMMA) {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = BYTE_COMMA;
    }
    if (_cfgUnqNames) {
        _writeUnq(name);
        return;
    }
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    int len = name.appendQuotedUTF8(_outputBuffer, _outputTail);
    if (len < 0) {
        // couldn't append, bit longer processing
        _writeBytes(name.asQuotedUTF8());
    } else {
        _outputTail += len;
    }
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName(SerializableString).name","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeFieldName(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUnq(SerializableString)","Method","No Comment","private final void _writeUnq(SerializableString name) throws IOException {
    int len = name.appendQuotedUTF8(_outputBuffer, _outputTail);
    if (len < 0) {
        _writeBytes(name.asQuotedUTF8());
    } else {
        _outputTail += len;
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUnq(SerializableString).name","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUnq(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray()","Method","No Comment","@Override
public final void writeStartArray() throws IOException {
    _verifyValueWrite(""start an array"");
    _writeContext = _writeContext.createChildArrayContext();
    streamWriteConstraints().validateNestingDepth(_writeContext.getNestingDepth());
    if (_cfgPrettyPrinter != null) {
        _cfgPrettyPrinter.writeStartArray(this);
    } else {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = BYTE_LBRACKET;
    }
}","void","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray(Object)","Method","No Comment","// since 2.12
@Override
public final void writeStartArray(Object currentValue) throws IOException {
    _verifyValueWrite(""start an array"");
    _writeContext = _writeContext.createChildArrayContext(currentValue);
    streamWriteConstraints().validateNestingDepth(_writeContext.getNestingDepth());
    if (_cfgPrettyPrinter != null) {
        _cfgPrettyPrinter.writeStartArray(this);
    } else {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = BYTE_LBRACKET;
    }
}","void","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray(Object).currentValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray(Object,int)","Method","No Comment","// since 2.12
@Override
public void writeStartArray(Object currentValue, int size) throws IOException {
    _verifyValueWrite(""start an array"");
    _writeContext = _writeContext.createChildArrayContext(currentValue);
    streamWriteConstraints().validateNestingDepth(_writeContext.getNestingDepth());
    if (_cfgPrettyPrinter != null) {
        _cfgPrettyPrinter.writeStartArray(this);
    } else {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = BYTE_LBRACKET;
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray(Object,int).currentValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray(Object,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray(Object,int).size","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartArray(Object,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeEndArray()","Method","No Comment","@Override
public final void writeEndArray() throws IOException {
    if (!_writeContext.inArray()) {
        _reportError(""Current context not Array but "" + _writeContext.typeDesc());
    }
    if (_cfgPrettyPrinter != null) {
        _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount());
    } else {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = BYTE_RBRACKET;
    }
    _writeContext = _writeContext.clearAndGetParent();
}","void","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject()","Method","No Comment","@Override
public final void writeStartObject() throws IOException {
    _verifyValueWrite(""start an object"");
    _writeContext = _writeContext.createChildObjectContext();
    streamWriteConstraints().validateNestingDepth(_writeContext.getNestingDepth());
    if (_cfgPrettyPrinter != null) {
        _cfgPrettyPrinter.writeStartObject(this);
    } else {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = BYTE_LCURLY;
    }
}","void","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject(Object)","Method","No Comment","// since 2.8
@Override
public void writeStartObject(Object forValue) throws IOException {
    _verifyValueWrite(""start an object"");
    JsonWriteContext ctxt = _writeContext.createChildObjectContext(forValue);
    streamWriteConstraints().validateNestingDepth(ctxt.getNestingDepth());
    _writeContext = ctxt;
    if (_cfgPrettyPrinter != null) {
        _cfgPrettyPrinter.writeStartObject(this);
    } else {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = '{';
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject(Object).forValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject(Object,int)","Method","No Comment","// since 2.14
@Override
public void writeStartObject(Object forValue, int size) throws IOException {
    writeStartObject(forValue);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject(Object,int).forValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject(Object,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject(Object,int).size","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeStartObject(Object,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeEndObject()","Method","No Comment","@Override
public final void writeEndObject() throws IOException {
    if (!_writeContext.inObject()) {
        _reportError(""Current context not Object but "" + _writeContext.typeDesc());
    }
    if (_cfgPrettyPrinter != null) {
        _cfgPrettyPrinter.writeEndObject(this, _writeContext.getEntryCount());
    } else {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = BYTE_RCURLY;
    }
    _writeContext = _writeContext.clearAndGetParent();
}","void","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writePPFieldName(String)","Method","to keep the ""fast path"" as simple (and hopefully fast) as possible.","protected final void _writePPFieldName(String name) throws IOException {
    int status = _writeContext.writeFieldName(name);
    if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {
        _reportError(""Can not write a field name, expecting a value"");
    }
    if ((status == JsonWriteContext.STATUS_OK_AFTER_COMMA)) {
        _cfgPrettyPrinter.writeObjectEntrySeparator(this);
    } else {
        _cfgPrettyPrinter.beforeObjectEntries(this);
    }
    if (_cfgUnqNames) {
        _writeStringSegments(name, false);
        return;
    }
    final int len = name.length();
    if (len > _charBufferLength) {
        _writeStringSegments(name, true);
        return;
    }
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    name.getChars(0, len, _charBuffer, 0);
    // But as one segment, or multiple?
    if (len <= _outputMaxContiguous) {
        if ((_outputTail + len) > _outputEnd) {
            // caller must ensure enough space
            _flushBuffer();
        }
        _writeStringSegment(_charBuffer, 0, len);
    } else {
        _writeStringSegments(_charBuffer, 0, len);
    }
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writePPFieldName(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writePPFieldName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writePPFieldName(SerializableString)","Method","No Comment","protected final void _writePPFieldName(SerializableString name) throws IOException {
    final int status = _writeContext.writeFieldName(name.getValue());
    if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {
        _reportError(""Can not write a field name, expecting a value"");
    }
    if (status == JsonWriteContext.STATUS_OK_AFTER_COMMA) {
        _cfgPrettyPrinter.writeObjectEntrySeparator(this);
    } else {
        _cfgPrettyPrinter.beforeObjectEntries(this);
    }
    // standard
    final boolean addQuotes = !_cfgUnqNames;
    if (addQuotes) {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = _quoteChar;
    }
    int len = name.appendQuotedUTF8(_outputBuffer, _outputTail);
    if (len < 0) {
        _writeBytes(name.asQuotedUTF8());
    } else {
        _outputTail += len;
    }
    if (addQuotes) {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = _quoteChar;
    }
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writePPFieldName(SerializableString).name","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writePPFieldName(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(String)","Method","No Comment","@Override
public void writeString(String text) throws IOException {
    _verifyValueWrite(WRITE_STRING);
    if (text == null) {
        _writeNull();
        return;
    }
    // First: if we can't guarantee it all fits, quoted, within output, offline
    final int len = text.length();
    if (len > _outputMaxContiguous) {
        // nope: off-line handling
        _writeStringSegments(text, true);
        return;
    }
    if ((_outputTail + len) >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    // we checked space already above
    _writeStringSegment(text, 0, len);
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(String).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(Reader,int)","Method","No Comment","@Override
public void writeString(Reader reader, int len) throws IOException {
    _verifyValueWrite(WRITE_STRING);
    if (reader == null) {
        _reportError(""null reader"");
        // just to block warnings by lgtm.com
        return;
    }
    int toRead = (len >= 0) ? len : Integer.MAX_VALUE;
    final char[] buf = _charBuffer;
    // Add leading quote
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    // read
    while (toRead > 0) {
        int toReadNow = Math.min(toRead, buf.length);
        int numRead = reader.read(buf, 0, toReadNow);
        if (numRead <= 0) {
            break;
        }
        if ((_outputTail + len) >= _outputEnd) {
            _flushBuffer();
        }
        _writeStringSegments(buf, 0, numRead);
        //decrease tracker
        toRead -= numRead;
    }
    // Add trailing quote
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    if (toRead > 0 && len >= 0) {
        _reportError(""Didn't read enough from reader"");
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(Reader,int).reader","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(Reader,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(Reader,int).len","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(Reader,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(char[],int,int)","Method","No Comment","@Override
public void writeString(char[] text, int offset, int len) throws IOException {
    _verifyValueWrite(WRITE_STRING);
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    // One or multiple segments?
    if (len <= _outputMaxContiguous) {
        if ((_outputTail + len) > _outputEnd) {
            // caller must ensure enough space
            _flushBuffer();
        }
        _writeStringSegment(text, offset, len);
    } else {
        _writeStringSegments(text, offset, len);
    }
    // And finally, closing quotes
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(char[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(SerializableString)","Method","No Comment","@Override
public final void writeString(SerializableString text) throws IOException {
    _verifyValueWrite(WRITE_STRING);
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    int len = text.appendQuotedUTF8(_outputBuffer, _outputTail);
    if (len < 0) {
        _writeBytes(text.asQuotedUTF8());
    } else {
        _outputTail += len;
    }
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(SerializableString).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawUTF8String(byte[],int,int)","Method","No Comment","@Override
public void writeRawUTF8String(byte[] text, int offset, int len) throws IOException {
    _checkRangeBoundsForByteArray(text, offset, len);
    _verifyValueWrite(WRITE_STRING);
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    _writeBytes(text, offset, len);
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawUTF8String(byte[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawUTF8String(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawUTF8String(byte[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeUTF8String(byte[],int,int)","Method","No Comment","@Override
public void writeUTF8String(byte[] text, int offset, int len) throws IOException {
    _checkRangeBoundsForByteArray(text, offset, len);
    _verifyValueWrite(WRITE_STRING);
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    // One or multiple segments?
    if (len <= _outputMaxContiguous) {
        _writeUTF8Segment(text, offset, len);
    } else {
        _writeUTF8Segments(text, offset, len);
    }
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeUTF8String(byte[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeUTF8String(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeUTF8String(byte[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(String)","Method","No Comment","@Override
public void writeRaw(String text) throws IOException {
    final int len = text.length();
    final char[] buf = _charBuffer;
    if (len <= buf.length) {
        text.getChars(0, len, buf, 0);
        writeRaw(buf, 0, len);
    } else {
        writeRaw(text, 0, len);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(String).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(String,int,int)","Method","No Comment","@Override
public void writeRaw(String text, int offset, int len) throws IOException {
    _checkRangeBoundsForString(text, offset, len);
    final char[] buf = _charBuffer;
    final int cbufLen = buf.length;
    // minor optimization: see if we can just get and copy
    if (len <= cbufLen) {
        text.getChars(offset, offset + len, buf, 0);
        writeRaw(buf, 0, len);
        return;
    }
    // If not, need segmented approach. For speed, let's also use input buffer
    // size that is guaranteed to fit in output buffer; each char can expand to
    // at most 3 bytes, so at most 1/3 of buffer size.
    final int maxChunk = Math.min(cbufLen, // == (1/4 + 1/16) == 5/16
    (_outputEnd >> 2) + (_outputEnd >> 4));
    final int maxBytes = maxChunk * 3;
    while (len > 0) {
        int len2 = Math.min(maxChunk, len);
        text.getChars(offset, offset + len2, buf, 0);
        if ((_outputTail + maxBytes) > _outputEnd) {
            _flushBuffer();
        }
        // If this is NOT the last segment and if the last character looks like
        // split surrogate second half, drop it
        // 21-Mar-2017, tatu: Note that we could check for either `len` or `len2`;
        //    point here is really that we only ""punt"" surrogate if it is NOT the
        //    only character left; otherwise we'd end up with a poison pill if the
        //    very last character was unpaired first-surrogate
        if (len2 > 1) {
            char ch = buf[len2 - 1];
            if ((ch >= SURR1_FIRST) && (ch <= SURR1_LAST)) {
                --len2;
            }
        }
        _writeRawSegment(buf, 0, len2);
        offset += len2;
        len -= len2;
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(String,int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(String,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(String,int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(SerializableString)","Method","No Comment","@Override
public void writeRaw(SerializableString text) throws IOException {
    int len = text.appendUnquotedUTF8(_outputBuffer, _outputTail);
    if (len < 0) {
        _writeBytes(text.asUnquotedUTF8());
    } else {
        _outputTail += len;
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(SerializableString).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawValue(SerializableString)","Method","since 2.5","@Override
public void writeRawValue(SerializableString text) throws IOException {
    _verifyValueWrite(WRITE_RAW);
    int len = text.appendUnquotedUTF8(_outputBuffer, _outputTail);
    if (len < 0) {
        _writeBytes(text.asUnquotedUTF8());
    } else {
        _outputTail += len;
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawValue(SerializableString).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRawValue(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(char[],int,int)","Method","@TODO: rewrite for speed...","@Override
public final void writeRaw(char[] cbuf, int offset, int len) throws IOException {
    _checkRangeBoundsForCharArray(cbuf, offset, len);
    // First: if we have 3 x charCount spaces, we know it'll fit just fine
    {
        int len3 = len + len + len;
        if ((_outputTail + len3) > _outputEnd) {
            // maybe we could flush?
            if (_outputEnd < len3) {
                // wouldn't be enough...
                _writeSegmentedRaw(cbuf, offset, len);
                return;
            }
            // yes, flushing brings enough space
            _flushBuffer();
        }
    }
    // now marks the end
    len += offset;
    // Note: here we know there is enough room, hence no output boundary checks
    main_loop: while (offset < len) {
        inner_loop: while (true) {
            int ch = cbuf[offset];
            if (ch > 0x7F) {
                break inner_loop;
            }
            _outputBuffer[_outputTail++] = (byte) ch;
            if (++offset >= len) {
                break main_loop;
            }
        }
        char ch = cbuf[offset++];
        if (ch < 0x800) {
            // 2-byte?
            _outputBuffer[_outputTail++] = (byte) (0xc0 | (ch >> 6));
            _outputBuffer[_outputTail++] = (byte) (0x80 | (ch & 0x3f));
        } else {
            offset = _outputRawMultiByteChar(ch, cbuf, offset, len);
        }
    }
}","void","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(char[],int,int).cbuf","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(char)","Method","No Comment","@Override
public void writeRaw(char ch) throws IOException {
    if ((_outputTail + 3) >= _outputEnd) {
        _flushBuffer();
    }
    final byte[] bbuf = _outputBuffer;
    if (ch <= 0x7F) {
        bbuf[_outputTail++] = (byte) ch;
    } else if (ch < 0x800) {
        // 2-byte?
        bbuf[_outputTail++] = (byte) (0xc0 | (ch >> 6));
        bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));
    } else {
        /*offset =*/
        _outputRawMultiByteChar(ch, null, 0, 0);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(char).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeRaw(char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeSegmentedRaw(char[],int,int)","Method","* Helper method called when it is possible that output of raw section
     * to output may cross buffer boundary","private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException {
    final int end = _outputEnd;
    final byte[] bbuf = _outputBuffer;
    final int inputEnd = offset + len;
    main_loop: while (offset < inputEnd) {
        inner_loop: while (true) {
            int ch = cbuf[offset];
            if (ch > 0x7F) {
                break inner_loop;
            }
            // !!! TODO: fast(er) writes (roll input, output checks in one)
            if (_outputTail >= end) {
                _flushBuffer();
            }
            bbuf[_outputTail++] = (byte) ch;
            if (++offset >= inputEnd) {
                break main_loop;
            }
        }
        if ((_outputTail + 3) >= _outputEnd) {
            _flushBuffer();
        }
        char ch = cbuf[offset++];
        if (ch < 0x800) {
            // 2-byte?
            bbuf[_outputTail++] = (byte) (0xc0 | (ch >> 6));
            bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));
        } else {
            offset = _outputRawMultiByteChar(ch, cbuf, offset, inputEnd);
        }
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeSegmentedRaw(char[],int,int).cbuf","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeSegmentedRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeSegmentedRaw(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeSegmentedRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeSegmentedRaw(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeSegmentedRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeRawSegment(char[],int,int)","Method","* Helper method that is called for segmented write of raw content
     * when explicitly outputting a segment of longer thing.
     * Caller has to take care of ensuring there's no split surrogate
     * pair at the end (that is, last char cannot be first part of a
     * surrogate char pair).
     *
     * @since 2.8.2","private void _writeRawSegment(char[] cbuf, int offset, int end) throws IOException {
    main_loop: while (offset < end) {
        inner_loop: while (true) {
            int ch = cbuf[offset];
            if (ch > 0x7F) {
                break inner_loop;
            }
            _outputBuffer[_outputTail++] = (byte) ch;
            if (++offset >= end) {
                break main_loop;
            }
        }
        char ch = cbuf[offset++];
        if (ch < 0x800) {
            // 2-byte?
            _outputBuffer[_outputTail++] = (byte) (0xc0 | (ch >> 6));
            _outputBuffer[_outputTail++] = (byte) (0x80 | (ch & 0x3f));
        } else {
            offset = _outputRawMultiByteChar(ch, cbuf, offset, end);
        }
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeRawSegment(char[],int,int).cbuf","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeRawSegment(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeRawSegment(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeRawSegment(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeRawSegment(char[],int,int).end","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeRawSegment(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(Base64Variant,byte[],int,int)","Method","No Comment","@Override
public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException {
    _checkRangeBoundsForByteArray(data, offset, len);
    _verifyValueWrite(WRITE_BINARY);
    // Starting quotes
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    _writeBinary(b64variant, data, offset, offset + len);
    // and closing quotes
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(Base64Variant,byte[],int,int).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(Base64Variant,byte[],int,int).data","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(Base64Variant,byte[],int,int).offset","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(Base64Variant,byte[],int,int).len","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(Base64Variant,InputStream,int)","Method","No Comment","@Override
public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException {
    _verifyValueWrite(WRITE_BINARY);
    // Starting quotes
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    byte[] encodingBuffer = _ioContext.allocBase64Buffer();
    int bytes;
    try {
        if (dataLength < 0) {
            // length unknown
            bytes = _writeBinary(b64variant, data, encodingBuffer);
        } else {
            int missing = _writeBinary(b64variant, data, encodingBuffer, dataLength);
            if (missing > 0) {
                _reportError(""Too few bytes available: missing "" + missing + "" bytes (out of "" + dataLength + "")"");
            }
            bytes = dataLength;
        }
    } finally {
        _ioContext.releaseBase64Buffer(encodingBuffer);
    }
    // and closing quotes
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    return bytes;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(Base64Variant,InputStream,int).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(Base64Variant,InputStream,int).data","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(Base64Variant,InputStream,int).dataLength","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(short)","Method","No Comment","@Override
public void writeNumber(short s) throws IOException {
    _verifyValueWrite(WRITE_NUMBER);
    // up to 5 digits and possible minus sign
    if ((_outputTail + 6) >= _outputEnd) {
        _flushBuffer();
    }
    if (_cfgNumbersAsStrings) {
        _writeQuotedShort(s);
        return;
    }
    _outputTail = NumberOutput.outputInt(s, _outputBuffer, _outputTail);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(short).s","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(short)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedShort(short)","Method","No Comment","private final void _writeQuotedShort(short s) throws IOException {
    if ((_outputTail + 8) >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    _outputTail = NumberOutput.outputInt(s, _outputBuffer, _outputTail);
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedShort(short).s","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedShort(short)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(int)","Method","No Comment","@Override
public void writeNumber(int i) throws IOException {
    _verifyValueWrite(WRITE_NUMBER);
    // up to 10 digits and possible minus sign
    if ((_outputTail + 11) >= _outputEnd) {
        _flushBuffer();
    }
    if (_cfgNumbersAsStrings) {
        _writeQuotedInt(i);
        return;
    }
    _outputTail = NumberOutput.outputInt(i, _outputBuffer, _outputTail);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(int).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedInt(int)","Method","No Comment","private final void _writeQuotedInt(int i) throws IOException {
    if ((_outputTail + 13) >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    _outputTail = NumberOutput.outputInt(i, _outputBuffer, _outputTail);
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedInt(int).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedInt(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(long)","Method","No Comment","@Override
public void writeNumber(long l) throws IOException {
    _verifyValueWrite(WRITE_NUMBER);
    if (_cfgNumbersAsStrings) {
        _writeQuotedLong(l);
        return;
    }
    if ((_outputTail + 21) >= _outputEnd) {
        // up to 20 digits, minus sign
        _flushBuffer();
    }
    _outputTail = NumberOutput.outputLong(l, _outputBuffer, _outputTail);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(long).l","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedLong(long)","Method","No Comment","private final void _writeQuotedLong(long l) throws IOException {
    if ((_outputTail + 23) >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    _outputTail = NumberOutput.outputLong(l, _outputBuffer, _outputTail);
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedLong(long).l","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedLong(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(BigInteger)","Method","No Comment","@Override
public void writeNumber(BigInteger value) throws IOException {
    _verifyValueWrite(WRITE_NUMBER);
    if (value == null) {
        _writeNull();
    } else if (_cfgNumbersAsStrings) {
        _writeQuotedRaw(value.toString());
    } else {
        writeRaw(value.toString());
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(BigInteger).value","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(BigInteger)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(double)","Method","No Comment","@SuppressWarnings(""deprecation"")
@Override
public void writeNumber(double d) throws IOException {
    if (_cfgNumbersAsStrings || (NumberOutput.notFinite(d) && Feature.QUOTE_NON_NUMERIC_NUMBERS.enabledIn(_features))) {
        writeString(NumberOutput.toString(d, isEnabled(Feature.USE_FAST_DOUBLE_WRITER)));
        return;
    }
    // What is the max length for doubles? 40 chars?
    _verifyValueWrite(WRITE_NUMBER);
    writeRaw(NumberOutput.toString(d, isEnabled(Feature.USE_FAST_DOUBLE_WRITER)));
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(double).d","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(float)","Method","No Comment","@SuppressWarnings(""deprecation"")
@Override
public void writeNumber(float f) throws IOException {
    if (_cfgNumbersAsStrings || (NumberOutput.notFinite(f) && Feature.QUOTE_NON_NUMERIC_NUMBERS.enabledIn(_features))) {
        writeString(NumberOutput.toString(f, isEnabled(Feature.USE_FAST_DOUBLE_WRITER)));
        return;
    }
    // What is the max length for floats?
    _verifyValueWrite(WRITE_NUMBER);
    writeRaw(NumberOutput.toString(f, isEnabled(Feature.USE_FAST_DOUBLE_WRITER)));
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(float).f","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(BigDecimal)","Method","No Comment","@Override
public void writeNumber(BigDecimal value) throws IOException {
    // Don't really know max length for big decimal, no point checking
    _verifyValueWrite(WRITE_NUMBER);
    if (value == null) {
        _writeNull();
    } else if (_cfgNumbersAsStrings) {
        _writeQuotedRaw(_asString(value));
    } else {
        writeRaw(_asString(value));
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(BigDecimal).value","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(BigDecimal)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(String)","Method","No Comment","@Override
public void writeNumber(String encodedValue) throws IOException {
    _verifyValueWrite(WRITE_NUMBER);
    if (encodedValue == null) {
        _writeNull();
    } else if (_cfgNumbersAsStrings) {
        _writeQuotedRaw(encodedValue);
    } else {
        writeRaw(encodedValue);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(String).encodedValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(char[],int,int)","Method","No Comment","@Override
public void writeNumber(char[] encodedValueBuffer, int offset, int length) throws IOException {
    _verifyValueWrite(WRITE_NUMBER);
    if (_cfgNumbersAsStrings) {
        _writeQuotedRaw(encodedValueBuffer, offset, length);
    } else {
        writeRaw(encodedValueBuffer, offset, length);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(char[],int,int).encodedValueBuffer","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(char[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNumber(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedRaw(String)","Method","No Comment","private final void _writeQuotedRaw(String value) throws IOException {
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    writeRaw(value);
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedRaw(String).value","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedRaw(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedRaw(char[],int,int)","Method","No Comment","private void _writeQuotedRaw(char[] text, int offset, int length) throws IOException {
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
    writeRaw(text, offset, length);
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = _quoteChar;
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedRaw(char[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedRaw(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedRaw(char[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeQuotedRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBoolean(boolean)","Method","No Comment","@Override
public void writeBoolean(boolean state) throws IOException {
    _verifyValueWrite(WRITE_BOOLEAN);
    if ((_outputTail + 5) >= _outputEnd) {
        _flushBuffer();
    }
    byte[] keyword = state ? TRUE_BYTES : FALSE_BYTES;
    int len = keyword.length;
    System.arraycopy(keyword, 0, _outputBuffer, _outputTail, len);
    _outputTail += len;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBoolean(boolean).state","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeBoolean(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeNull()","Method","No Comment","@Override
public void writeNull() throws IOException {
    _verifyValueWrite(WRITE_NULL);
    _writeNull();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._verifyValueWrite(String)","Method","No Comment","@Override
protected final void _verifyValueWrite(String typeMsg) throws IOException {
    final int status = _writeContext.writeValue();
    if (_cfgPrettyPrinter != null) {
        // Otherwise, pretty printer knows what to do...
        _verifyPrettyValueWrite(typeMsg, status);
        return;
    }
    byte b;
    switch(status) {
        case JsonWriteContext.STATUS_OK_AS_IS:
        default:
            return;
        case JsonWriteContext.STATUS_OK_AFTER_COMMA:
            b = BYTE_COMMA;
            break;
        case JsonWriteContext.STATUS_OK_AFTER_COLON:
            b = BYTE_COLON;
            break;
        case // root-value separator
        JsonWriteContext.STATUS_OK_AFTER_SPACE:
            if (_rootValueSeparator != null) {
                byte[] raw = _rootValueSeparator.asUnquotedUTF8();
                if (raw.length > 0) {
                    _writeBytes(raw);
                }
            }
            return;
        case JsonWriteContext.STATUS_EXPECT_NAME:
            _reportCantWriteValueExpectName(typeMsg);
            return;
    }
    if (_outputTail >= _outputEnd) {
        _flushBuffer();
    }
    _outputBuffer[_outputTail++] = b;
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._verifyValueWrite(String).typeMsg","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._verifyValueWrite(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.flush()","Method","No Comment","@Override
public void flush() throws IOException {
    _flushBuffer();
    if (_outputStream != null) {
        if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {
            _outputStream.flush();
        }
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.close()","Method","No Comment","@Override
public void close() throws IOException {
    super.close();
    // 05-Dec-2008, tatu: To add [JACKSON-27], need to close open scopes.
    // First: let's see that we still have buffers...
    IOException flushFail = null;
    try {
        if ((_outputBuffer != null) && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {
            while (true) {
                JsonStreamContext ctxt = getOutputContext();
                if (ctxt.inArray()) {
                    writeEndArray();
                } else if (ctxt.inObject()) {
                    writeEndObject();
                } else {
                    break;
                }
            }
        }
        _flushBuffer();
    } catch (IOException e) {
        // 10-Jun-2022, tatu: [core#764] Need to avoid failing here; may
        //    still need to close the underlying output stream
        flushFail = e;
    }
    // just to ensure we don't think there's anything buffered
    _outputTail = 0;
    /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()
         *   on the underlying Reader, unless we ""own"" it, or auto-closing
         *   feature is enabled.
         *   One downside: when using UTF8Writer, underlying buffer(s)
         *   may not be properly recycled if we don't close the writer.
         */
    if (_outputStream != null) {
        try {
            if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) {
                _outputStream.close();
            } else if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) {
                // If we can't close it, we should at least flush
                _outputStream.flush();
            }
        } catch (IOException | RuntimeException e) {
            if (flushFail != null) {
                e.addSuppressed(flushFail);
            }
            throw e;
        }
    }
    // Internal buffer(s) generator has can now be released as well
    _releaseBuffers();
    if (flushFail != null) {
        throw flushFail;
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._releaseBuffers()","Method","No Comment","@Override
protected void _releaseBuffers() {
    byte[] buf = _outputBuffer;
    if (buf != null && _bufferRecyclable) {
        _outputBuffer = null;
        _ioContext.releaseWriteEncodingBuffer(buf);
    }
    char[] cbuf = _charBuffer;
    if (cbuf != null) {
        _charBuffer = null;
        _ioContext.releaseConcatBuffer(cbuf);
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBytes(byte[])","Method","No Comment","private final void _writeBytes(byte[] bytes) throws IOException {
    final int len = bytes.length;
    if ((_outputTail + len) > _outputEnd) {
        _flushBuffer();
        // still not enough?
        if (len > MAX_BYTES_TO_BUFFER) {
            _outputStream.write(bytes, 0, len);
            return;
        }
    }
    System.arraycopy(bytes, 0, _outputBuffer, _outputTail, len);
    _outputTail += len;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBytes(byte[]).bytes","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBytes(byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBytes(byte[],int,int)","Method","No Comment","private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException {
    if ((_outputTail + len) > _outputEnd) {
        _flushBuffer();
        // still not enough?
        if (len > MAX_BYTES_TO_BUFFER) {
            _outputStream.write(bytes, offset, len);
            return;
        }
    }
    System.arraycopy(bytes, offset, _outputBuffer, _outputTail, len);
    _outputTail += len;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBytes(byte[],int,int).bytes","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBytes(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBytes(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBytes(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBytes(byte[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBytes(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(String,boolean)","Method","* Method called when String to write is long enough not to fit
     * completely in temporary copy buffer. If so, we will actually
     * copy it in small enough chunks so it can be directly fed
     * to single-segment writes (instead of maximum slices that
     * would fit in copy buffer)","private final void _writeStringSegments(String text, boolean addQuotes) throws IOException {
    if (addQuotes) {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = _quoteChar;
    }
    int left = text.length();
    int offset = 0;
    while (left > 0) {
        int len = Math.min(_outputMaxContiguous, left);
        if ((_outputTail + len) > _outputEnd) {
            // caller must ensure enough space
            _flushBuffer();
        }
        _writeStringSegment(text, offset, len);
        offset += len;
        left -= len;
    }
    if (addQuotes) {
        if (_outputTail >= _outputEnd) {
            _flushBuffer();
        }
        _outputBuffer[_outputTail++] = _quoteChar;
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(String,boolean).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(String,boolean).addQuotes","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(char[],int,int)","Method","* Method called when character sequence to write is long enough that
     * its maximum encoded and escaped form is not guaranteed to fit in
     * the output buffer. If so, we will need to choose smaller output
     * chunks to write at a time.","private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException {
    do {
        int len = Math.min(_outputMaxContiguous, totalLen);
        if ((_outputTail + len) > _outputEnd) {
            // caller must ensure enough space
            _flushBuffer();
        }
        _writeStringSegment(cbuf, offset, len);
        offset += len;
        totalLen -= len;
    } while (totalLen > 0);
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(char[],int,int).cbuf","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(char[],int,int).totalLen","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(String,int,int)","Method","No Comment","private final void _writeStringSegments(String text, int offset, int totalLen) throws IOException {
    do {
        int len = Math.min(_outputMaxContiguous, totalLen);
        if ((_outputTail + len) > _outputEnd) {
            // caller must ensure enough space
            _flushBuffer();
        }
        _writeStringSegment(text, offset, len);
        offset += len;
        totalLen -= len;
    } while (totalLen > 0);
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(String,int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(String,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(String,int,int).totalLen","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegments(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(char[],int,int)","Method","* This method called when the string content is already in
     * a char buffer, and its maximum total encoded and escaped length
     * cannot exceed size of the output buffer.
     * Caller must ensure that there is enough space in output buffer,
     * assuming case of all non-escaped ASCII characters, as well as
     * potentially enough space for other cases (but not necessarily flushed)","private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException {
    // note: caller MUST ensure (via flushing) there's room for ASCII only
    // Fast+tight loop for ASCII-only, no-escaping-needed output
    // becomes end marker, then
    len += offset;
    int outputPtr = _outputTail;
    final byte[] outputBuffer = _outputBuffer;
    final int[] escCodes = _outputEscapes;
    while (offset < len) {
        int ch = cbuf[offset];
        // note: here we know that (ch > 0x7F) will cover case of escaping non-ASCII too:
        if (ch > 0x7F || escCodes[ch] != 0) {
            break;
        }
        outputBuffer[outputPtr++] = (byte) ch;
        ++offset;
    }
    _outputTail = outputPtr;
    if (offset < len) {
        if (_characterEscapes != null) {
            _writeCustomStringSegment2(cbuf, offset, len);
        } else if (_maximumNonEscapedChar == 0) {
            _writeStringSegment2(cbuf, offset, len);
        } else {
            _writeStringSegmentASCII2(cbuf, offset, len);
        }
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(char[],int,int).cbuf","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(String,int,int)","Method","No Comment","private final void _writeStringSegment(String text, int offset, int len) throws IOException {
    // note: caller MUST ensure (via flushing) there's room for ASCII only
    // Fast+tight loop for ASCII-only, no-escaping-needed output
    // becomes end marker, then
    len += offset;
    int outputPtr = _outputTail;
    final byte[] outputBuffer = _outputBuffer;
    final int[] escCodes = _outputEscapes;
    while (offset < len) {
        int ch = text.charAt(offset);
        // note: here we know that (ch > 0x7F) will cover case of escaping non-ASCII too:
        if (ch > 0x7F || escCodes[ch] != 0) {
            break;
        }
        outputBuffer[outputPtr++] = (byte) ch;
        ++offset;
    }
    _outputTail = outputPtr;
    if (offset < len) {
        if (_characterEscapes != null) {
            _writeCustomStringSegment2(text, offset, len);
        } else if (_maximumNonEscapedChar == 0) {
            _writeStringSegment2(text, offset, len);
        } else {
            _writeStringSegmentASCII2(text, offset, len);
        }
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(String,int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(String,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(String,int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(char[],int,int)","Method","* Secondary method called when content contains characters to escape,
     * and/or multi-byte UTF-8 characters.","private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException {
    // Ok: caller guarantees buffer can have room; but that may require flushing:
    if ((_outputTail + 6 * (end - offset)) > _outputEnd) {
        _flushBuffer();
    }
    int outputPtr = _outputTail;
    final byte[] outputBuffer = _outputBuffer;
    final int[] escCodes = _outputEscapes;
    while (offset < end) {
        int ch = cbuf[offset++];
        if (ch <= 0x7F) {
            if (escCodes[ch] == 0) {
                outputBuffer[outputPtr++] = (byte) ch;
                continue;
            }
            int escape = escCodes[ch];
            if (escape > 0) {
                // 2-char escape, fine
                outputBuffer[outputPtr++] = BYTE_BACKSLASH;
                outputBuffer[outputPtr++] = (byte) escape;
            } else {
                // ctrl-char, 6-byte escape...
                outputPtr = _writeGenericEscape(ch, outputPtr);
            }
            continue;
        }
        if (ch <= 0x7FF) {
            // fine, just needs 2 byte output
            outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));
            outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));
        } else {
            // 3- or 4-byte character
            if (_isStartOfSurrogatePair(ch)) {
                final boolean combineSurrogates = Feature.COMBINE_UNICODE_SURROGATES_IN_UTF8.enabledIn(_features);
                if (combineSurrogates && offset < end) {
                    char highSurrogate = (char) ch;
                    char lowSurrogate = cbuf[offset++];
                    outputPtr = _outputSurrogatePair(highSurrogate, lowSurrogate, outputPtr);
                    continue;
                }
            }
            outputPtr = _outputMultiByteChar(ch, outputPtr);
        }
    }
    _outputTail = outputPtr;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(char[],int,int).cbuf","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(char[],int,int).end","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(String,int,int)","Method","No Comment","private final void _writeStringSegment2(final String text, int offset, final int end) throws IOException {
    if ((_outputTail + 6 * (end - offset)) > _outputEnd) {
        _flushBuffer();
    }
    int outputPtr = _outputTail;
    final byte[] outputBuffer = _outputBuffer;
    final int[] escCodes = _outputEscapes;
    while (offset < end) {
        int ch = text.charAt(offset++);
        if (ch <= 0x7F) {
            if (escCodes[ch] == 0) {
                outputBuffer[outputPtr++] = (byte) ch;
                continue;
            }
            int escape = escCodes[ch];
            if (escape > 0) {
                // 2-char escape, fine
                outputBuffer[outputPtr++] = BYTE_BACKSLASH;
                outputBuffer[outputPtr++] = (byte) escape;
            } else {
                // ctrl-char, 6-byte escape...
                outputPtr = _writeGenericEscape(ch, outputPtr);
            }
            continue;
        }
        if (ch <= 0x7FF) {
            // fine, just needs 2 byte output
            outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));
            outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));
        } else {
            // 3- or 4-byte character
            if (_isStartOfSurrogatePair(ch)) {
                final boolean combineSurrogates = Feature.COMBINE_UNICODE_SURROGATES_IN_UTF8.enabledIn(_features);
                if (combineSurrogates && offset < end) {
                    char highSurrogate = (char) ch;
                    char lowSurrogate = text.charAt(offset++);
                    outputPtr = _outputSurrogatePair(highSurrogate, lowSurrogate, outputPtr);
                    continue;
                }
            }
            outputPtr = _outputMultiByteChar(ch, outputPtr);
        }
    }
    _outputTail = outputPtr;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(String,int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(String,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(String,int,int).end","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegment2(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegmentASCII2(char[],int,int)","Method","* Same as <code>_writeStringSegment2(char[], ...)</code., but with
     * additional escaping for high-range code points","private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException {
    // Ok: caller guarantees buffer can have room; but that may require flushing:
    if ((_outputTail + 6 * (end - offset)) > _outputEnd) {
        _flushBuffer();
    }
    int outputPtr = _outputTail;
    final byte[] outputBuffer = _outputBuffer;
    final int[] escCodes = _outputEscapes;
    final int maxUnescaped = _maximumNonEscapedChar;
    while (offset < end) {
        int ch = cbuf[offset++];
        if (ch <= 0x7F) {
            if (escCodes[ch] == 0) {
                outputBuffer[outputPtr++] = (byte) ch;
                continue;
            }
            int escape = escCodes[ch];
            if (escape > 0) {
                // 2-char escape, fine
                outputBuffer[outputPtr++] = BYTE_BACKSLASH;
                outputBuffer[outputPtr++] = (byte) escape;
            } else {
                // ctrl-char, 6-byte escape...
                outputPtr = _writeGenericEscape(ch, outputPtr);
            }
            continue;
        }
        if (ch > maxUnescaped) {
            // [JACKSON-102] Allow forced escaping if non-ASCII (etc) chars:
            outputPtr = _writeGenericEscape(ch, outputPtr);
            continue;
        }
        if (ch <= 0x7FF) {
            // fine, just needs 2 byte output
            outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));
            outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));
        } else {
            outputPtr = _outputMultiByteChar(ch, outputPtr);
        }
    }
    _outputTail = outputPtr;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegmentASCII2(char[],int,int).cbuf","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegmentASCII2(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegmentASCII2(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegmentASCII2(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegmentASCII2(char[],int,int).end","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegmentASCII2(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegmentASCII2(String,int,int)","Method","No Comment","private final void _writeStringSegmentASCII2(final String text, int offset, final int end) throws IOException {
    // Ok: caller guarantees buffer can have room; but that may require flushing:
    if ((_outputTail + 6 * (end - offset)) > _outputEnd) {
        _flushBuffer();
    }
    int outputPtr = _outputTail;
    final byte[] outputBuffer = _outputBuffer;
    final int[] escCodes = _outputEscapes;
    final int maxUnescaped = _maximumNonEscapedChar;
    while (offset < end) {
        int ch = text.charAt(offset++);
        if (ch <= 0x7F) {
            if (escCodes[ch] == 0) {
                outputBuffer[outputPtr++] = (byte) ch;
                continue;
            }
            int escape = escCodes[ch];
            if (escape > 0) {
                // 2-char escape, fine
                outputBuffer[outputPtr++] = BYTE_BACKSLASH;
                outputBuffer[outputPtr++] = (byte) escape;
            } else {
                // ctrl-char, 6-byte escape...
                outputPtr = _writeGenericEscape(ch, outputPtr);
            }
            continue;
        }
        if (ch > maxUnescaped) {
            // [JACKSON-102] Allow forced escaping if non-ASCII (etc) chars:
            outputPtr = _writeGenericEscape(ch, outputPtr);
            continue;
        }
        if (ch <= 0x7FF) {
            // fine, just needs 2 byte output
            outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));
            outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));
        } else {
            outputPtr = _outputMultiByteChar(ch, outputPtr);
        }
    }
    _outputTail = outputPtr;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegmentASCII2(String,int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegmentASCII2(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegmentASCII2(String,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegmentASCII2(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegmentASCII2(String,int,int).end","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeStringSegmentASCII2(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomStringSegment2(char[],int,int)","Method","* Same as <code>_writeStringSegmentASCII2(char[], ...)</code., but with
     * additional checking for completely custom escapes","private final void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException {
    // Ok: caller guarantees buffer can have room; but that may require flushing:
    if ((_outputTail + 6 * (end - offset)) > _outputEnd) {
        _flushBuffer();
    }
    int outputPtr = _outputTail;
    final byte[] outputBuffer = _outputBuffer;
    final int[] escCodes = _outputEscapes;
    // may or may not have this limit
    final int maxUnescaped = (_maximumNonEscapedChar <= 0) ? 0xFFFF : _maximumNonEscapedChar;
    // non-null
    final CharacterEscapes customEscapes = _characterEscapes;
    while (offset < end) {
        int ch = cbuf[offset++];
        if (ch <= 0x7F) {
            if (escCodes[ch] == 0) {
                outputBuffer[outputPtr++] = (byte) ch;
                continue;
            }
            int escape = escCodes[ch];
            if (escape > 0) {
                // 2-char escape, fine
                outputBuffer[outputPtr++] = BYTE_BACKSLASH;
                outputBuffer[outputPtr++] = (byte) escape;
            } else if (escape == CharacterEscapes.ESCAPE_CUSTOM) {
                SerializableString esc = customEscapes.getEscapeSequence(ch);
                if (esc == null) {
                    _reportError(""Invalid custom escape definitions; custom escape not found for character code 0x"" + Integer.toHexString(ch) + "", although was supposed to have one"");
                }
                outputPtr = _writeCustomEscape(outputBuffer, outputPtr, esc, end - offset);
            } else {
                // ctrl-char, 6-byte escape...
                outputPtr = _writeGenericEscape(ch, outputPtr);
            }
            continue;
        }
        if (ch > maxUnescaped) {
            // [JACKSON-102] Allow forced escaping if non-ASCII (etc) chars:
            outputPtr = _writeGenericEscape(ch, outputPtr);
            continue;
        }
        SerializableString esc = customEscapes.getEscapeSequence(ch);
        if (esc != null) {
            outputPtr = _writeCustomEscape(outputBuffer, outputPtr, esc, end - offset);
            continue;
        }
        if (ch <= 0x7FF) {
            // fine, just needs 2 byte output
            outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));
            outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));
        } else {
            // 3- or 4-byte character
            if (_isStartOfSurrogatePair(ch)) {
                final boolean combineSurrogates = Feature.COMBINE_UNICODE_SURROGATES_IN_UTF8.enabledIn(_features);
                if (combineSurrogates && offset < end) {
                    char highSurrogate = (char) ch;
                    char lowSurrogate = cbuf[offset++];
                    outputPtr = _outputSurrogatePair(highSurrogate, lowSurrogate, outputPtr);
                    continue;
                }
            }
            outputPtr = _outputMultiByteChar(ch, outputPtr);
        }
    }
    _outputTail = outputPtr;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomStringSegment2(char[],int,int).cbuf","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomStringSegment2(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomStringSegment2(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomStringSegment2(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomStringSegment2(char[],int,int).end","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomStringSegment2(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomStringSegment2(String,int,int)","Method","No Comment","private final void _writeCustomStringSegment2(final String text, int offset, final int end) throws IOException {
    // Ok: caller guarantees buffer can have room; but that may require flushing:
    if ((_outputTail + 6 * (end - offset)) > _outputEnd) {
        _flushBuffer();
    }
    int outputPtr = _outputTail;
    final byte[] outputBuffer = _outputBuffer;
    final int[] escCodes = _outputEscapes;
    // may or may not have this limit
    final int maxUnescaped = (_maximumNonEscapedChar <= 0) ? 0xFFFF : _maximumNonEscapedChar;
    // non-null
    final CharacterEscapes customEscapes = _characterEscapes;
    while (offset < end) {
        int ch = text.charAt(offset++);
        if (ch <= 0x7F) {
            if (escCodes[ch] == 0) {
                outputBuffer[outputPtr++] = (byte) ch;
                continue;
            }
            int escape = escCodes[ch];
            if (escape > 0) {
                // 2-char escape, fine
                outputBuffer[outputPtr++] = BYTE_BACKSLASH;
                outputBuffer[outputPtr++] = (byte) escape;
            } else if (escape == CharacterEscapes.ESCAPE_CUSTOM) {
                SerializableString esc = customEscapes.getEscapeSequence(ch);
                if (esc == null) {
                    _reportError(""Invalid custom escape definitions; custom escape not found for character code 0x"" + Integer.toHexString(ch) + "", although was supposed to have one"");
                }
                outputPtr = _writeCustomEscape(outputBuffer, outputPtr, esc, end - offset);
            } else {
                // ctrl-char, 6-byte escape...
                outputPtr = _writeGenericEscape(ch, outputPtr);
            }
            continue;
        }
        if (ch > maxUnescaped) {
            // [JACKSON-102] Allow forced escaping if non-ASCII (etc) chars:
            outputPtr = _writeGenericEscape(ch, outputPtr);
            continue;
        }
        SerializableString esc = customEscapes.getEscapeSequence(ch);
        if (esc != null) {
            outputPtr = _writeCustomEscape(outputBuffer, outputPtr, esc, end - offset);
            continue;
        }
        if (ch <= 0x7FF) {
            // fine, just needs 2 byte output
            outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6));
            outputBuffer[outputPtr++] = (byte) (0x80 | (ch & 0x3f));
        } else {
            // 3- or 4-byte character
            if (_isStartOfSurrogatePair(ch)) {
                final boolean combineSurrogates = Feature.COMBINE_UNICODE_SURROGATES_IN_UTF8.enabledIn(_features);
                if (combineSurrogates && offset < end) {
                    char highSurrogate = (char) ch;
                    char lowSurrogate = text.charAt(offset++);
                    outputPtr = _outputSurrogatePair(highSurrogate, lowSurrogate, outputPtr);
                    continue;
                }
            }
            outputPtr = _outputMultiByteChar(ch, outputPtr);
        }
    }
    _outputTail = outputPtr;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomStringSegment2(String,int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomStringSegment2(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomStringSegment2(String,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomStringSegment2(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomStringSegment2(String,int,int).end","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomStringSegment2(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomEscape(byte[],int,SerializableString,int)","Method","No Comment","private final int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException {
    // must be escaped at this point, shouldn't double-quote
    byte[] raw = esc.asUnquotedUTF8();
    int len = raw.length;
    if (len > 6) {
        // may violate constraints we have, do offline
        return _handleLongCustomEscape(outputBuffer, outputPtr, _outputEnd, raw, remainingChars);
    }
    // otherwise will fit without issues, so:
    System.arraycopy(raw, 0, outputBuffer, outputPtr, len);
    return (outputPtr + len);
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomEscape(byte[],int,SerializableString,int).outputBuffer","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomEscape(byte[],int,SerializableString,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomEscape(byte[],int,SerializableString,int).outputPtr","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomEscape(byte[],int,SerializableString,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomEscape(byte[],int,SerializableString,int).esc","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomEscape(byte[],int,SerializableString,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomEscape(byte[],int,SerializableString,int).remainingChars","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeCustomEscape(byte[],int,SerializableString,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._handleLongCustomEscape(byte[],int,int,byte[],int)","Method","No Comment","private final int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException {
    final int len = raw.length;
    if ((outputPtr + len) > outputEnd) {
        _outputTail = outputPtr;
        _flushBuffer();
        outputPtr = _outputTail;
        if (len > outputBuffer.length) {
            // very unlikely, but possible...
            _outputStream.write(raw, 0, len);
            return outputPtr;
        }
    }
    System.arraycopy(raw, 0, outputBuffer, outputPtr, len);
    outputPtr += len;
    // but is the invariant still obeyed? If not, flush once more
    if ((outputPtr + 6 * remainingChars) > outputEnd) {
        _outputTail = outputPtr;
        _flushBuffer();
        return _outputTail;
    }
    return outputPtr;
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._handleLongCustomEscape(byte[],int,int,byte[],int).outputBuffer","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._handleLongCustomEscape(byte[],int,int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._handleLongCustomEscape(byte[],int,int,byte[],int).outputPtr","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._handleLongCustomEscape(byte[],int,int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._handleLongCustomEscape(byte[],int,int,byte[],int).outputEnd","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._handleLongCustomEscape(byte[],int,int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._handleLongCustomEscape(byte[],int,int,byte[],int).raw","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._handleLongCustomEscape(byte[],int,int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._handleLongCustomEscape(byte[],int,int,byte[],int).remainingChars","Parameter_5","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._handleLongCustomEscape(byte[],int,int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segments(byte[],int,int)","Method","* Method called when UTF-8 encoded (but NOT yet escaped!) content is not guaranteed
     * to fit in the output buffer after escaping; as such, we just need to
     * chunk writes.","private final void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException {
    do {
        int len = Math.min(_outputMaxContiguous, totalLen);
        _writeUTF8Segment(utf8, offset, len);
        offset += len;
        totalLen -= len;
    } while (totalLen > 0);
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segments(byte[],int,int).utf8","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segments(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segments(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segments(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segments(byte[],int,int).totalLen","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segments(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segment(byte[],int,int)","Method","No Comment","private final void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException {
    // fast loop to see if escaping is needed; don't copy, just look
    final int[] escCodes = _outputEscapes;
    for (int ptr = offset, end = offset + len; ptr < end; ) {
        // 28-Feb-2011, tatu: escape codes just cover 7-bit range, so:
        int ch = utf8[ptr++];
        if ((ch >= 0) && escCodes[ch] != 0) {
            _writeUTF8Segment2(utf8, offset, len);
            return;
        }
    }
    // yes, fine, just copy the sucker
    if ((_outputTail + len) > _outputEnd) {
        // enough room or need to flush?
        // but yes once we flush (caller guarantees length restriction)
        _flushBuffer();
    }
    System.arraycopy(utf8, offset, _outputBuffer, _outputTail, len);
    _outputTail += len;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segment(byte[],int,int).utf8","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segment(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segment(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segment(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segment(byte[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segment(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segment2(byte[],int,int)","Method","No Comment","private final void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException {
    int outputPtr = _outputTail;
    // Ok: caller guarantees buffer can have room; but that may require flushing:
    if ((outputPtr + (len * 6)) > _outputEnd) {
        _flushBuffer();
        outputPtr = _outputTail;
    }
    final byte[] outputBuffer = _outputBuffer;
    final int[] escCodes = _outputEscapes;
    // so 'len' becomes 'end'
    len += offset;
    while (offset < len) {
        byte b = utf8[offset++];
        int ch = b;
        if (ch < 0 || escCodes[ch] == 0) {
            outputBuffer[outputPtr++] = b;
            continue;
        }
        int escape = escCodes[ch];
        if (escape > 0) {
            // 2-char escape, fine
            outputBuffer[outputPtr++] = BYTE_BACKSLASH;
            outputBuffer[outputPtr++] = (byte) escape;
        } else {
            // ctrl-char, 6-byte escape...
            outputPtr = _writeGenericEscape(ch, outputPtr);
        }
    }
    _outputTail = outputPtr;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segment2(byte[],int,int).utf8","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segment2(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segment2(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segment2(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segment2(byte[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeUTF8Segment2(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,byte[],int,int)","Method","No Comment","protected final void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException {
    // Encoding is by chunks of 3 input, 4 output chars, so:
    int safeInputEnd = inputEnd - 3;
    // Let's also reserve room for possible (and quoted) lf char each round
    int safeOutputEnd = _outputEnd - 6;
    int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
    // Ok, first we loop through all full triplets of data:
    while (inputPtr <= safeInputEnd) {
        if (_outputTail > safeOutputEnd) {
            // need to flush
            _flushBuffer();
        }
        // First, mash 3 bytes into lsb of 32-bit int
        int b24 = (input[inputPtr++]) << 8;
        b24 |= (input[inputPtr++]) & 0xFF;
        b24 = (b24 << 8) | ((input[inputPtr++]) & 0xFF);
        _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);
        if (--chunksBeforeLF <= 0) {
            // note: must quote in JSON value
            _outputBuffer[_outputTail++] = '\\';
            _outputBuffer[_outputTail++] = 'n';
            chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
        }
    }
    // And then we may have 1 or 2 leftover bytes to encode
    // 0, 1 or 2
    int inputLeft = inputEnd - inputPtr;
    if (inputLeft > 0) {
        // yes, but do we have room for output?
        if (_outputTail > safeOutputEnd) {
            // don't really need 6 bytes but...
            _flushBuffer();
        }
        int b24 = (input[inputPtr++]) << 16;
        if (inputLeft == 2) {
            b24 |= ((input[inputPtr++]) & 0xFF) << 8;
        }
        _outputTail = b64variant.encodeBase64Partial(b24, inputLeft, _outputBuffer, _outputTail);
    }
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,byte[],int,int).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,byte[],int,int).input","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,byte[],int,int).inputPtr","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,byte[],int,int).inputEnd","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,InputStream,byte[],int)","Method","write-method called when length is definitely known","protected final int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException {
    int inputPtr = 0;
    int inputEnd = 0;
    int lastFullOffset = -3;
    // Let's also reserve room for possible (and quoted) LF char each round
    int safeOutputEnd = _outputEnd - 6;
    int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
    while (bytesLeft > 2) {
        // main loop for full triplets
        if (inputPtr > lastFullOffset) {
            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);
            inputPtr = 0;
            if (inputEnd < 3) {
                // required to try to read to have at least 3 bytes
                break;
            }
            lastFullOffset = inputEnd - 3;
        }
        if (_outputTail > safeOutputEnd) {
            // need to flush
            _flushBuffer();
        }
        int b24 = (readBuffer[inputPtr++]) << 8;
        b24 |= (readBuffer[inputPtr++]) & 0xFF;
        b24 = (b24 << 8) | ((readBuffer[inputPtr++]) & 0xFF);
        bytesLeft -= 3;
        _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);
        if (--chunksBeforeLF <= 0) {
            _outputBuffer[_outputTail++] = '\\';
            _outputBuffer[_outputTail++] = 'n';
            chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
        }
    }
    // And then we may have 1 or 2 leftover bytes to encode
    if (bytesLeft > 0) {
        inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, bytesLeft);
        inputPtr = 0;
        if (inputEnd > 0) {
            // yes, but do we have room for output?
            if (_outputTail > safeOutputEnd) {
                // don't really need 6 bytes but...
                _flushBuffer();
            }
            int b24 = (readBuffer[inputPtr++]) << 16;
            int amount;
            if (inputPtr < inputEnd) {
                b24 |= ((readBuffer[inputPtr]) & 0xFF) << 8;
                amount = 2;
            } else {
                amount = 1;
            }
            _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);
            bytesLeft -= amount;
        }
    }
    return bytesLeft;
}","int","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,InputStream,byte[],int).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,InputStream,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,InputStream,byte[],int).data","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,InputStream,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,InputStream,byte[],int).readBuffer","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,InputStream,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,InputStream,byte[],int).bytesLeft","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,InputStream,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,InputStream,byte[])","Method","write method when length is unknown","protected final int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException {
    int inputPtr = 0;
    int inputEnd = 0;
    int lastFullOffset = -3;
    int bytesDone = 0;
    // Let's also reserve room for possible (and quoted) LF char each round
    int safeOutputEnd = _outputEnd - 6;
    int chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
    // Ok, first we loop through all full triplets of data:
    while (true) {
        if (inputPtr > lastFullOffset) {
            // need to load more
            inputEnd = _readMore(data, readBuffer, inputPtr, inputEnd, readBuffer.length);
            inputPtr = 0;
            if (inputEnd < 3) {
                // required to try to read to have at least 3 bytes
                break;
            }
            lastFullOffset = inputEnd - 3;
        }
        if (_outputTail > safeOutputEnd) {
            // need to flush
            _flushBuffer();
        }
        // First, mash 3 bytes into lsb of 32-bit int
        int b24 = (readBuffer[inputPtr++]) << 8;
        b24 |= (readBuffer[inputPtr++]) & 0xFF;
        b24 = (b24 << 8) | ((readBuffer[inputPtr++]) & 0xFF);
        bytesDone += 3;
        _outputTail = b64variant.encodeBase64Chunk(b24, _outputBuffer, _outputTail);
        if (--chunksBeforeLF <= 0) {
            _outputBuffer[_outputTail++] = '\\';
            _outputBuffer[_outputTail++] = 'n';
            chunksBeforeLF = b64variant.getMaxLineLength() >> 2;
        }
    }
    // And then we may have 1 or 2 leftover bytes to encode
    if (inputPtr < inputEnd) {
        // yes, but do we have room for output?
        if (_outputTail > safeOutputEnd) {
            // don't really need 6 bytes but...
            _flushBuffer();
        }
        int b24 = (readBuffer[inputPtr++]) << 16;
        int amount = 1;
        if (inputPtr < inputEnd) {
            b24 |= ((readBuffer[inputPtr]) & 0xFF) << 8;
            amount = 2;
        }
        bytesDone += amount;
        _outputTail = b64variant.encodeBase64Partial(b24, amount, _outputBuffer, _outputTail);
    }
    return bytesDone;
}","int","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,InputStream,byte[]).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,InputStream,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,InputStream,byte[]).data","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,InputStream,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,InputStream,byte[]).readBuffer","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeBinary(Base64Variant,InputStream,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._readMore(InputStream,byte[],int,int,int)","Method","No Comment","private final int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException {
    // anything to shift to front?
    int i = 0;
    while (inputPtr < inputEnd) {
        readBuffer[i++] = readBuffer[inputPtr++];
    }
    inputPtr = 0;
    inputEnd = i;
    maxRead = Math.min(maxRead, readBuffer.length);
    do {
        int length = maxRead - inputEnd;
        if (length == 0) {
            break;
        }
        int count = in.read(readBuffer, inputEnd, length);
        if (count < 0) {
            return inputEnd;
        }
        inputEnd += count;
    } while (inputEnd < 3);
    return inputEnd;
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._readMore(InputStream,byte[],int,int,int).in","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._readMore(InputStream,byte[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._readMore(InputStream,byte[],int,int,int).readBuffer","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._readMore(InputStream,byte[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._readMore(InputStream,byte[],int,int,int).inputPtr","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._readMore(InputStream,byte[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._readMore(InputStream,byte[],int,int,int).inputEnd","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._readMore(InputStream,byte[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._readMore(InputStream,byte[],int,int,int).maxRead","Parameter_5","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._readMore(InputStream,byte[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputRawMultiByteChar(int,char[],int,int)","Method","* Method called to output a character that is beyond range of
     * 1- and 2-byte UTF-8 encodings, when outputting ""raw""
     * text (meaning it is not to be escaped or quoted)","private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputEnd) throws IOException {
    // Let's handle surrogates gracefully (as 4 byte output):
    if (ch >= SURR1_FIRST) {
        if (ch <= SURR2_LAST) {
            // yes, outside of BMP
            // Do we have second part?
            if (inputOffset >= inputEnd || cbuf == null) {
                // nope... have to note down
                _reportError(String.format(""Split surrogate on writeRaw() input (last character): first character 0x%4x"", ch));
            } else {
                _outputSurrogates(ch, cbuf[inputOffset]);
            }
            return inputOffset + 1;
        }
    }
    final byte[] bbuf = _outputBuffer;
    bbuf[_outputTail++] = (byte) (0xe0 | (ch >> 12));
    bbuf[_outputTail++] = (byte) (0x80 | ((ch >> 6) & 0x3f));
    bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));
    return inputOffset;
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputRawMultiByteChar(int,char[],int,int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputRawMultiByteChar(int,char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputRawMultiByteChar(int,char[],int,int).cbuf","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputRawMultiByteChar(int,char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputRawMultiByteChar(int,char[],int,int).inputOffset","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputRawMultiByteChar(int,char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputRawMultiByteChar(int,char[],int,int).inputEnd","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputRawMultiByteChar(int,char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputSurrogates(int,int)","Method","No Comment","protected final void _outputSurrogates(int surr1, int surr2) throws IOException {
    int c = _decodeSurrogate(surr1, surr2);
    if ((_outputTail + 4) > _outputEnd) {
        _flushBuffer();
    }
    final byte[] bbuf = _outputBuffer;
    bbuf[_outputTail++] = (byte) (0xf0 | (c >> 18));
    bbuf[_outputTail++] = (byte) (0x80 | ((c >> 12) & 0x3f));
    bbuf[_outputTail++] = (byte) (0x80 | ((c >> 6) & 0x3f));
    bbuf[_outputTail++] = (byte) (0x80 | (c & 0x3f));
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputSurrogates(int,int).surr1","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputSurrogates(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputSurrogates(int,int).surr2","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputSurrogates(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputSurrogatePair(char,char,int)","Method","@since 2.18","private int _outputSurrogatePair(char highSurrogate, char lowSurrogate, int outputPtr) {
    final int unicode = 0x10000 + ((highSurrogate & 0x03FF) << 10) + (lowSurrogate & 0x03FF);
    _outputBuffer[outputPtr++] = (byte) (0xF0 + ((unicode >> 18) & 0x07));
    _outputBuffer[outputPtr++] = (byte) (0x80 + ((unicode >> 12) & 0x3F));
    _outputBuffer[outputPtr++] = (byte) (0x80 + ((unicode >> 6) & 0x3F));
    _outputBuffer[outputPtr++] = (byte) (0x80 + (unicode & 0x3F));
    return outputPtr;
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputSurrogatePair(char,char,int).highSurrogate","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputSurrogatePair(char,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputSurrogatePair(char,char,int).lowSurrogate","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputSurrogatePair(char,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputSurrogatePair(char,char,int).outputPtr","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputSurrogatePair(char,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputMultiByteChar(int,int)","Method","*
     * @param ch
     * @param outputPtr Position within output buffer to append multi-byte in
     *
     * @return New output position after appending
     *
     * @throws IOException","private final int _outputMultiByteChar(int ch, int outputPtr) throws IOException {
    byte[] HEX_CHARS = getHexBytes();
    byte[] bbuf = _outputBuffer;
    if (ch >= SURR1_FIRST && ch <= SURR2_LAST) {
        // yes, outside of BMP; add an escape
        // 23-Nov-2015, tatu: As per [core#223], may or may not want escapes;
        //   it would be added here... but as things are, we do not have proper
        //   access yet...
        //            if (Feature.ESCAPE_UTF8_SURROGATES.enabledIn(_features)) {
        bbuf[outputPtr++] = BYTE_BACKSLASH;
        bbuf[outputPtr++] = BYTE_u;
        bbuf[outputPtr++] = HEX_CHARS[(ch >> 12) & 0xF];
        bbuf[outputPtr++] = HEX_CHARS[(ch >> 8) & 0xF];
        bbuf[outputPtr++] = HEX_CHARS[(ch >> 4) & 0xF];
        bbuf[outputPtr++] = HEX_CHARS[ch & 0xF];
        //            } else { ... }
    } else {
        bbuf[outputPtr++] = (byte) (0xe0 | (ch >> 12));
        bbuf[outputPtr++] = (byte) (0x80 | ((ch >> 6) & 0x3f));
        bbuf[outputPtr++] = (byte) (0x80 | (ch & 0x3f));
    }
    return outputPtr;
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputMultiByteChar(int,int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputMultiByteChar(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputMultiByteChar(int,int).outputPtr","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputMultiByteChar(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeNull()","Method","No Comment","private final void _writeNull() throws IOException {
    if ((_outputTail + 4) >= _outputEnd) {
        _flushBuffer();
    }
    System.arraycopy(NULL_BYTES, 0, _outputBuffer, _outputTail, 4);
    _outputTail += 4;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeGenericEscape(int,int)","Method","* Method called to write a generic Unicode escape for given character.
     *
     * @param charToEscape Character to escape using escape sequence (\\uXXXX)","private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException {
    final byte[] bbuf = _outputBuffer;
    byte[] HEX_CHARS = getHexBytes();
    bbuf[outputPtr++] = BYTE_BACKSLASH;
    bbuf[outputPtr++] = BYTE_u;
    if (charToEscape > 0xFF) {
        int hi = (charToEscape >> 8) & 0xFF;
        bbuf[outputPtr++] = HEX_CHARS[hi >> 4];
        bbuf[outputPtr++] = HEX_CHARS[hi & 0xF];
        charToEscape &= 0xFF;
    } else {
        bbuf[outputPtr++] = BYTE_0;
        bbuf[outputPtr++] = BYTE_0;
    }
    // We know it's a control char, so only the last 2 chars are non-0
    bbuf[outputPtr++] = HEX_CHARS[charToEscape >> 4];
    bbuf[outputPtr++] = HEX_CHARS[charToEscape & 0xF];
    return outputPtr;
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeGenericEscape(int,int).charToEscape","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeGenericEscape(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeGenericEscape(int,int).outputPtr","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._writeGenericEscape(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._flushBuffer()","Method","No Comment","protected final void _flushBuffer() throws IOException {
    int len = _outputTail;
    if (len > 0) {
        _outputTail = 0;
        _outputStream.write(_outputBuffer, 0, len);
    }
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.getHexBytes()","Method","No Comment","private byte[] getHexBytes() {
    return _cfgWriteHexUppercase ? HEX_BYTES_UPPER : HEX_BYTES_LOWER;
}","byte[]","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._isStartOfSurrogatePair(int)","Method","@since 2.18","private static boolean _isStartOfSurrogatePair(final int ch) {
    // In 0xD800 - 0xDBFF range?
    return (ch & 0xFC00) == 0xD800;
}","boolean","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator._isStartOfSurrogatePair(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator._isStartOfSurrogatePair(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char)","Constructor","@since 2.10","public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, char quoteChar) {
    super(ctxt, features, codec);
    _outputStream = out;
    _quoteChar = (byte) quoteChar;
    boolean escapeSlash = isEnabled(JsonWriteFeature.ESCAPE_FORWARD_SLASHES.mappedFeature());
    if (quoteChar != '""' || escapeSlash) {
        _outputEscapes = CharTypes.get7BitOutputEscapes(quoteChar, escapeSlash);
    }
    _bufferRecyclable = true;
    _outputBuffer = ctxt.allocWriteEncodingBuffer();
    _outputEnd = _outputBuffer.length;
    // To be exact, each char can take up to 6 bytes when escaped (Unicode
    // escape with backslash, 'u' and 4 hex digits); but to avoid fluctuation,
    // we will actually round down to only do up to 1/8 number of chars
    _outputMaxContiguous = _outputEnd >> 3;
    _charBuffer = ctxt.allocConcatBuffer();
    _charBufferLength = _charBuffer.length;
    // By default we use this feature to determine additional quoting
    if (isEnabled(JsonWriteFeature.ESCAPE_NON_ASCII.mappedFeature())) {
        setHighestNonEscapedChar(127);
    }
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char).features","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char).codec","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char).out","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char).quoteChar","Parameter_5","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char,byte[],int,boolean)","Constructor","@since 2.10","public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, char quoteChar, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable) {
    super(ctxt, features, codec);
    _outputStream = out;
    _quoteChar = (byte) quoteChar;
    boolean escapeSlash = isEnabled(JsonWriteFeature.ESCAPE_FORWARD_SLASHES.mappedFeature());
    if (quoteChar != '""' || escapeSlash) {
        _outputEscapes = CharTypes.get7BitOutputEscapes(quoteChar, escapeSlash);
    }
    _bufferRecyclable = bufferRecyclable;
    _outputTail = outputOffset;
    _outputBuffer = outputBuffer;
    _outputEnd = _outputBuffer.length;
    // up to 6 bytes per char (see above), rounded up to 1/8
    _outputMaxContiguous = (_outputEnd >> 3);
    _charBuffer = ctxt.allocConcatBuffer();
    _charBufferLength = _charBuffer.length;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char,byte[],int,boolean).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char,byte[],int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char,byte[],int,boolean).features","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char,byte[],int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char,byte[],int,boolean).codec","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char,byte[],int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char,byte[],int,boolean).out","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char,byte[],int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char,byte[],int,boolean).quoteChar","Parameter_5","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char,byte[],int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char,byte[],int,boolean).outputBuffer","Parameter_6","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char,byte[],int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char,byte[],int,boolean).outputOffset","Parameter_7","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char,byte[],int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char,byte[],int,boolean).bufferRecyclable","Parameter_8","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,char,byte[],int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream)","Constructor","No Comment","// since 2.10
@Deprecated
public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out) {
    this(ctxt, features, codec, out, JsonFactory.DEFAULT_QUOTE_CHAR);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream).features","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream).codec","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream).out","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,byte[],int,boolean)","Constructor","No Comment","// since 2.10
@Deprecated
public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable) {
    this(ctxt, features, codec, out, JsonFactory.DEFAULT_QUOTE_CHAR, outputBuffer, outputOffset, bufferRecyclable);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,byte[],int,boolean).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,byte[],int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,byte[],int,boolean).features","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,byte[],int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,byte[],int,boolean).codec","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,byte[],int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,byte[],int,boolean).out","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,byte[],int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,byte[],int,boolean).outputBuffer","Parameter_5","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,byte[],int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,byte[],int,boolean).outputOffset","Parameter_6","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,byte[],int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,byte[],int,boolean).bufferRecyclable","Parameter_7","Belong to com.fasterxml.jackson.core.json.UTF8JsonGenerator.<init>(IOContext,int,ObjectCodec,OutputStream,byte[],int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser","Class","* This is a concrete implementation of {@link JsonParser}, which is
 * based on a {@link java.io.InputStream} as the input source.","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.json.JsonParserBase",""
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.BYTE_LF","Field","No Comment","protected final static byte BYTE_LF = (byte) '\n';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._symbols","Field","* Symbol table that contains field names encountered so far","protected final ByteQuadsCanonicalizer _symbols;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._quadBuffer","Field","* Temporary buffer used for name parsing.","protected int[] _quadBuffer = new int[16];","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._tokenIncomplete","Field","* Flag that indicates that the current token has not yet
     * been fully processed, and needs to be finished for
     * some access (or skipped to obtain the next token)","protected boolean _tokenIncomplete;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._quad1","Field","* Temporary storage for partially parsed name bytes.","private int _quad1;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nameStartOffset","Field","* Value of {@link #_inputPtr} at the time when the first character of
     * name token was read. Used for calculating token location when requested;
     * combined with {@link #_currInputProcessed}, may be updated appropriately
     * as needed.
     *
     * @since 2.7","protected int _nameStartOffset;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nameStartRow","Field","* @since 2.7","protected int _nameStartRow;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nameStartCol","Field","* @since 2.7","protected int _nameStartCol;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._inputStream","Field","No Comment","protected InputStream _inputStream;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._inputBuffer","Field","* Current buffer from which data is read; generally data is read into
     * buffer from input source, but in some cases pre-loaded buffer
     * is handed to the parser.","protected byte[] _inputBuffer;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._bufferRecyclable","Field","* Flag that indicates whether the input buffer is recycable (and
     * needs to be returned to recycler once we are done) or not.
     *<p>
     * If it is not, it also means that parser can NOT modify underlying
     * buffer.","protected boolean _bufferRecyclable;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.releaseBuffered(OutputStream)","Method","No Comment","@Override
public int releaseBuffered(OutputStream out) throws IOException {
    int count = _inputEnd - _inputPtr;
    if (count < 1) {
        return 0;
    }
    // let's just advance ptr to end
    int origPtr = _inputPtr;
    _inputPtr += count;
    out.write(_inputBuffer, origPtr, count);
    return count;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.releaseBuffered(OutputStream).out","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.releaseBuffered(OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getInputSource()","Method","No Comment","@Override
public Object getInputSource() {
    return _inputStream;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._loadMore()","Method","No Comment","protected final boolean _loadMore() throws IOException {
    if (_inputStream != null) {
        int space = _inputBuffer.length;
        if (space == 0) {
            // only occurs when we've been closed
            return false;
        }
        final int bufSize = _inputEnd;
        _currInputProcessed += bufSize;
        _currInputRowStart -= bufSize;
        // 06-Sep-2023, tatu: [core#1046] Enforce max doc length limit
        _streamReadConstraints.validateDocumentLength(_currInputProcessed);
        int count = _inputStream.read(_inputBuffer, 0, space);
        if (count > 0) {
            // 26-Nov-2015, tatu: Since name-offset requires it too, must offset
            //   this increase to avoid ""moving"" name-offset, resulting most likely
            //   in negative value, which is fine as combine value remains unchanged.
            _nameStartOffset -= bufSize;
            _inputPtr = 0;
            _inputEnd = count;
            return true;
        }
        _inputPtr = _inputEnd = 0;
        // End of input
        _closeInput();
        // Should never return 0, so let's fail
        if (count == 0) {
            throw new IOException(""InputStream.read() returned 0 characters when trying to read "" + _inputBuffer.length + "" bytes"");
        }
    }
    return false;
}","boolean","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._closeInput()","Method","No Comment","@Override
protected void _closeInput() throws IOException {
    // We are not to call close() on the underlying InputStream
    // unless we ""own"" it, or auto-closing feature is enabled.
    if (_inputStream != null) {
        if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE)) {
            _inputStream.close();
        }
        _inputStream = null;
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._releaseBuffers()","Method","* Method called to release internal buffers owned by the base
     * reader. This may be called along with {@link #_closeInput} (for
     * example, when explicitly closing this reader instance), or
     * separately (if need be).","@Override
protected void _releaseBuffers() throws IOException {
    super._releaseBuffers();
    // Merge found symbols, if any:
    _symbols.release();
    if (_bufferRecyclable) {
        byte[] buf = _inputBuffer;
        if (buf != null) {
            // Let's not set it to null; this way should get slightly more meaningful
            // error messages in case someone closes parser indirectly, without realizing.
            if (buf != NO_BYTES) {
                _inputBuffer = NO_BYTES;
                _ioContext.releaseReadIOBuffer(buf);
            }
        }
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText()","Method","No Comment","@Override
public String getText() throws IOException {
    if (_currToken == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            return _finishAndReturnString();
        }
        return _textBuffer.contentsAsString();
    }
    return _getText2(_currToken);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText(Writer)","Method","No Comment","// since 2.8
@Override
public int getText(Writer writer) throws IOException {
    JsonToken t = _currToken;
    if (t == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            _finishString();
        }
        return _textBuffer.contentsToWriter(writer);
    }
    if (t == JsonToken.FIELD_NAME) {
        String n = _parsingContext.getCurrentName();
        writer.write(n);
        return n.length();
    }
    if (t != null) {
        if (t.isNumeric()) {
            return _textBuffer.contentsToWriter(writer);
        }
        char[] ch = t.asCharArray();
        writer.write(ch);
        return ch.length;
    }
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText(Writer).writer","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText(Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString()","Method","@since 2.1","@Override
public String getValueAsString() throws IOException {
    if (_currToken == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            return _finishAndReturnString();
        }
        return _textBuffer.contentsAsString();
    }
    if (_currToken == JsonToken.FIELD_NAME) {
        return currentName();
    }
    return super.getValueAsString(null);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString(String)","Method","@since 2.1","@Override
public String getValueAsString(String defValue) throws IOException {
    if (_currToken == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            return _finishAndReturnString();
        }
        return _textBuffer.contentsAsString();
    }
    if (_currToken == JsonToken.FIELD_NAME) {
        return currentName();
    }
    return super.getValueAsString(defValue);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString(String).defValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsInt()","Method","since 2.6","@Override
public int getValueAsInt() throws IOException {
    JsonToken t = _currToken;
    if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT)) {
        // inlined 'getIntValue()'
        if ((_numTypesValid & NR_INT) == 0) {
            if (_numTypesValid == NR_UNKNOWN) {
                return _parseIntValue();
            }
            if ((_numTypesValid & NR_INT) == 0) {
                convertNumberToInt();
            }
        }
        return _numberInt;
    }
    return super.getValueAsInt(0);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsInt(int)","Method","since 2.6","@Override
public int getValueAsInt(int defValue) throws IOException {
    JsonToken t = _currToken;
    if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT)) {
        // inlined 'getIntValue()'
        if ((_numTypesValid & NR_INT) == 0) {
            if (_numTypesValid == NR_UNKNOWN) {
                return _parseIntValue();
            }
            if ((_numTypesValid & NR_INT) == 0) {
                convertNumberToInt();
            }
        }
        return _numberInt;
    }
    return super.getValueAsInt(defValue);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsInt(int).defValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsInt(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._getText2(JsonToken)","Method","No Comment","protected final String _getText2(JsonToken t) throws IOException {
    if (t == null) {
        return null;
    }
    switch(t.id()) {
        case ID_FIELD_NAME:
            return _parsingContext.getCurrentName();
        case ID_STRING:
        // fall through
        case ID_NUMBER_INT:
        case ID_NUMBER_FLOAT:
            return _textBuffer.contentsAsString();
        default:
            return t.asString();
    }
}","String","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._getText2(JsonToken).t","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._getText2(JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextCharacters()","Method","No Comment","@Override
public char[] getTextCharacters() throws IOException {
    if (_currToken != null) {
        // null only before/after document
        switch(_currToken.id()) {
            case ID_FIELD_NAME:
                if (!_nameCopied) {
                    String name = _parsingContext.getCurrentName();
                    int nameLen = name.length();
                    if (_nameCopyBuffer == null) {
                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);
                    } else if (_nameCopyBuffer.length < nameLen) {
                        _nameCopyBuffer = new char[nameLen];
                    }
                    name.getChars(0, nameLen, _nameCopyBuffer, 0);
                    _nameCopied = true;
                }
                return _nameCopyBuffer;
            case ID_STRING:
                if (_tokenIncomplete) {
                    _tokenIncomplete = false;
                    // only strings can be incomplete
                    _finishString();
                }
            // fall through
            case ID_NUMBER_INT:
            case ID_NUMBER_FLOAT:
                return _textBuffer.getTextBuffer();
            default:
                return _currToken.asCharArray();
        }
    }
    return null;
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextLength()","Method","No Comment","@Override
public int getTextLength() throws IOException {
    if (_currToken != null) {
        // null only before/after document
        switch(_currToken.id()) {
            case ID_FIELD_NAME:
                return _parsingContext.getCurrentName().length();
            case ID_STRING:
                if (_tokenIncomplete) {
                    _tokenIncomplete = false;
                    // only strings can be incomplete
                    _finishString();
                }
            // fall through
            case ID_NUMBER_INT:
            case ID_NUMBER_FLOAT:
                return _textBuffer.size();
            default:
                return _currToken.asCharArray().length;
        }
    }
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextOffset()","Method","No Comment","@Override
public int getTextOffset() throws IOException {
    // Most have offset of 0, only some may have other values:
    if (_currToken != null) {
        switch(_currToken.id()) {
            case ID_FIELD_NAME:
                return 0;
            case ID_STRING:
                if (_tokenIncomplete) {
                    _tokenIncomplete = false;
                    // only strings can be incomplete
                    _finishString();
                }
            // fall through
            case ID_NUMBER_INT:
            case ID_NUMBER_FLOAT:
                return _textBuffer.getTextOffset();
            default:
        }
    }
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getBinaryValue(Base64Variant)","Method","No Comment","@Override
public byte[] getBinaryValue(Base64Variant b64variant) throws IOException {
    if (_currToken != JsonToken.VALUE_STRING && (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null)) {
        _reportError(""Current token ("" + _currToken + "") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary"");
    }
    // To ensure that we won't see inconsistent data, better clear up state...
    if (_tokenIncomplete) {
        try {
            _binaryValue = _decodeBase64(b64variant);
        } catch (IllegalArgumentException iae) {
            throw _constructError(""Failed to decode VALUE_STRING as base64 ("" + b64variant + ""): "" + iae.getMessage());
        }
        // let's clear incomplete only now; allows for accessing other textual content in error cases
        _tokenIncomplete = false;
    } else {
        // may actually require conversion...
        if (_binaryValue == null) {
            @SuppressWarnings(""resource"")
            ByteArrayBuilder builder = _getByteArrayBuilder();
            _decodeBase64(getText(), builder, b64variant);
            _binaryValue = builder.toByteArray();
        }
    }
    return _binaryValue;
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getBinaryValue(Base64Variant).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getBinaryValue(Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.readBinaryValue(Base64Variant,OutputStream)","Method","No Comment","@Override
public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException {
    // if we have already read the token, just use whatever we may have
    if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING) {
        byte[] b = getBinaryValue(b64variant);
        out.write(b);
        return b.length;
    }
    // otherwise do ""real"" incremental parsing...
    byte[] buf = _ioContext.allocBase64Buffer();
    try {
        return _readBinary(b64variant, out, buf);
    } finally {
        _ioContext.releaseBase64Buffer(buf);
    }
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.readBinaryValue(Base64Variant,OutputStream).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.readBinaryValue(Base64Variant,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.readBinaryValue(Base64Variant,OutputStream).out","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.readBinaryValue(Base64Variant,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._readBinary(Base64Variant,OutputStream,byte[])","Method","No Comment","protected int _readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer) throws IOException {
    int outputPtr = 0;
    final int outputEnd = buffer.length - 3;
    int outputCount = 0;
    while (true) {
        // first, we'll skip preceding white space, if any
        int ch;
        do {
            if (_inputPtr >= _inputEnd) {
                _loadMoreGuaranteed();
            }
            ch = _inputBuffer[_inputPtr++] & 0xFF;
        } while (ch <= INT_SPACE);
        int bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            // reached the end, fair and square?
            if (ch == INT_QUOTE) {
                break;
            }
            bits = _decodeBase64Escape(b64variant, ch, 0);
            if (bits < 0) {
                // white space to skip
                continue;
            }
        }
        // enough room? If not, flush
        if (outputPtr > outputEnd) {
            outputCount += outputPtr;
            out.write(buffer, 0, outputPtr);
            outputPtr = 0;
        }
        int decodedData = bits;
        // then second base64 char; can't get padding yet, nor ws
        if (_inputPtr >= _inputEnd) {
            _loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            bits = _decodeBase64Escape(b64variant, ch, 1);
        }
        decodedData = (decodedData << 6) | bits;
        // third base64 char; can be padding, but not ws
        if (_inputPtr >= _inputEnd) {
            _loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        // First branch: can get padding (-> 1 byte)
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // as per [JACKSON-631], could also just be 'missing'  padding
                if (ch == INT_QUOTE) {
                    decodedData >>= 4;
                    buffer[outputPtr++] = (byte) decodedData;
                    if (b64variant.requiresPaddingOnRead()) {
                        // to keep parser state bit more consistent
                        --_inputPtr;
                        _handleBase64MissingPadding(b64variant);
                    }
                    break;
                }
                bits = _decodeBase64Escape(b64variant, ch, 2);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                // Ok, must get padding
                if (_inputPtr >= _inputEnd) {
                    _loadMoreGuaranteed();
                }
                ch = _inputBuffer[_inputPtr++] & 0xFF;
                if (!b64variant.usesPaddingChar(ch)) {
                    if (_decodeBase64Escape(b64variant, ch, 3) != Base64Variant.BASE64_VALUE_PADDING) {
                        throw reportInvalidBase64Char(b64variant, ch, 3, ""expected padding character '"" + b64variant.getPaddingChar() + ""'"");
                    }
                }
                // Got 12 bits, only need 8, need to shift
                decodedData >>= 4;
                buffer[outputPtr++] = (byte) decodedData;
                continue;
            }
        }
        // Nope, 2 or 3 bytes
        decodedData = (decodedData << 6) | bits;
        // fourth and last base64 char; can be padding, but not ws
        if (_inputPtr >= _inputEnd) {
            _loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // as per [JACKSON-631], could also just be 'missing'  padding
                if (ch == INT_QUOTE) {
                    decodedData >>= 2;
                    buffer[outputPtr++] = (byte) (decodedData >> 8);
                    buffer[outputPtr++] = (byte) decodedData;
                    if (b64variant.requiresPaddingOnRead()) {
                        // to keep parser state bit more consistent
                        --_inputPtr;
                        _handleBase64MissingPadding(b64variant);
                    }
                    break;
                }
                bits = _decodeBase64Escape(b64variant, ch, 3);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                /* With padding we only get 2 bytes; but we have
                     * to shift it a bit so it is identical to triplet
                     * case with partial output.
                     * 3 chars gives 3x6 == 18 bits, of which 2 are
                     * dummies, need to discard:
                     */
                decodedData >>= 2;
                buffer[outputPtr++] = (byte) (decodedData >> 8);
                buffer[outputPtr++] = (byte) decodedData;
                continue;
            }
        }
        // otherwise, our triplet is now complete
        decodedData = (decodedData << 6) | bits;
        buffer[outputPtr++] = (byte) (decodedData >> 16);
        buffer[outputPtr++] = (byte) (decodedData >> 8);
        buffer[outputPtr++] = (byte) decodedData;
    }
    _tokenIncomplete = false;
    if (outputPtr > 0) {
        outputCount += outputPtr;
        out.write(buffer, 0, outputPtr);
    }
    return outputCount;
}","int","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._readBinary(Base64Variant,OutputStream,byte[]).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._readBinary(Base64Variant,OutputStream,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._readBinary(Base64Variant,OutputStream,byte[]).out","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._readBinary(Base64Variant,OutputStream,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._readBinary(Base64Variant,OutputStream,byte[]).buffer","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._readBinary(Base64Variant,OutputStream,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken()","Method","* @return Next token from the stream, if any found, or null
     *   to indicate end-of-input","@Override
public JsonToken nextToken() throws IOException {
    /* First: field names are special -- we will always tokenize
         * (part of) value along with field name to simplify
         * state handling. If so, can and need to use secondary token:
         */
    if (_currToken == JsonToken.FIELD_NAME) {
        return _nextAfterName();
    }
    // But if we didn't already have a name, and (partially?) decode number,
    // need to ensure no numeric information is leaked
    _numTypesValid = NR_UNKNOWN;
    if (_tokenIncomplete) {
        // only strings can be partial
        _skipString();
    }
    int i = _skipWSOrEnd();
    if (i < 0) {
        // end-of-input
        // Close/release things like input source, symbol table and recyclable buffers
        close();
        return _updateTokenToNull();
    }
    // clear any data retained so far
    _binaryValue = null;
    // Closing scope?
    if (i == INT_RBRACKET) {
        _closeArrayScope();
        return _updateToken(JsonToken.END_ARRAY);
    }
    if (i == INT_RCURLY) {
        _closeObjectScope();
        return _updateToken(JsonToken.END_OBJECT);
    }
    // Nope: do we then expect a comma?
    if (_parsingContext.expectComma()) {
        if (i != INT_COMMA) {
            _reportUnexpectedChar(i, ""was expecting comma to separate "" + _parsingContext.typeDesc() + "" entries"");
        }
        i = _skipWS();
        // Was that a trailing comma?
        if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {
            if ((i == INT_RBRACKET) || (i == INT_RCURLY)) {
                return _closeScope(i);
            }
        }
    }
    // And should we now have a name? Always true for Object contexts
    // since the intermediate 'expect-value' state is never retained.
    if (!_parsingContext.inObject()) {
        _updateLocation();
        return _nextTokenNotInObject(i);
    }
    // So first parse the field name itself:
    _updateNameLocation();
    String n = _parseName(i);
    _parsingContext.setCurrentName(n);
    _updateToken(JsonToken.FIELD_NAME);
    i = _skipColon();
    _updateLocation();
    // Ok: we must have a value... what is it? Strings are very common, check first:
    if (i == INT_QUOTE) {
        _tokenIncomplete = true;
        _nextToken = JsonToken.VALUE_STRING;
        return _currToken;
    }
    JsonToken t;
    switch(i) {
        case '-':
            t = _parseSignedNumber(true);
            break;
        case '+':
            if (isEnabled(JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS.mappedFeature())) {
                t = _parseSignedNumber(false);
            } else {
                t = _handleUnexpectedValue(i);
            }
            break;
        case // [core#611]:
        '.':
            t = _parseFloatThatStartsWithPeriod(false, false);
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            t = _parseUnsignedNumber(i);
            break;
        case 'f':
            _matchFalse();
            t = JsonToken.VALUE_FALSE;
            break;
        case 'n':
            _matchNull();
            t = JsonToken.VALUE_NULL;
            break;
        case 't':
            _matchTrue();
            t = JsonToken.VALUE_TRUE;
            break;
        case '[':
            t = JsonToken.START_ARRAY;
            break;
        case '{':
            t = JsonToken.START_OBJECT;
            break;
        default:
            t = _handleUnexpectedValue(i);
    }
    _nextToken = t;
    return _currToken;
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nextTokenNotInObject(int)","Method","No Comment","private final JsonToken _nextTokenNotInObject(int i) throws IOException {
    if (i == INT_QUOTE) {
        _tokenIncomplete = true;
        return _updateToken(JsonToken.VALUE_STRING);
    }
    switch(i) {
        case '[':
            createChildArrayContext(_tokenInputRow, _tokenInputCol);
            return _updateToken(JsonToken.START_ARRAY);
        case '{':
            createChildObjectContext(_tokenInputRow, _tokenInputCol);
            return _updateToken(JsonToken.START_OBJECT);
        case 't':
            _matchTrue();
            return _updateToken(JsonToken.VALUE_TRUE);
        case 'f':
            _matchFalse();
            return _updateToken(JsonToken.VALUE_FALSE);
        case 'n':
            _matchNull();
            return _updateToken(JsonToken.VALUE_NULL);
        case '-':
            return _updateToken(_parseSignedNumber(true));
        case '+':
            if (!isEnabled(JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS.mappedFeature())) {
                return _updateToken(_handleUnexpectedValue(i));
            }
            return _updateToken(_parseSignedNumber(false));
        case // [core#611]:
        '.':
            return _updateToken(_parseFloatThatStartsWithPeriod(false, false));
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            return _updateToken(_parseUnsignedNumber(i));
    }
    return _updateToken(_handleUnexpectedValue(i));
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nextTokenNotInObject(int).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nextTokenNotInObject(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nextAfterName()","Method","No Comment","private final JsonToken _nextAfterName() throws IOException {
    // need to invalidate if it was copied
    _nameCopied = false;
    JsonToken t = _nextToken;
    _nextToken = null;
    // !!! 16-Nov-2015, tatu: TODO: fix [databind#37], copy next location to current here
    // Also: may need to start new context?
    if (t == JsonToken.START_ARRAY) {
        createChildArrayContext(_tokenInputRow, _tokenInputCol);
    } else if (t == JsonToken.START_OBJECT) {
        createChildObjectContext(_tokenInputRow, _tokenInputCol);
    }
    return _updateToken(t);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.finishToken()","Method","No Comment","@Override
public void finishToken() throws IOException {
    if (_tokenIncomplete) {
        _tokenIncomplete = false;
        // only strings can be incomplete
        _finishString();
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName(SerializableString)","Method","No Comment","@Override
public boolean nextFieldName(SerializableString str) throws IOException {
    // // // Note: most of code below is copied from nextToken()
    _numTypesValid = NR_UNKNOWN;
    if (_currToken == JsonToken.FIELD_NAME) {
        // can't have name right after name
        _nextAfterName();
        return false;
    }
    if (_tokenIncomplete) {
        _skipString();
    }
    int i = _skipWSOrEnd();
    if (i < 0) {
        // end-of-input
        close();
        _updateTokenToNull();
        return false;
    }
    _binaryValue = null;
    // Closing scope?
    if (i == INT_RBRACKET) {
        _closeArrayScope();
        _updateToken(JsonToken.END_ARRAY);
        return false;
    }
    if (i == INT_RCURLY) {
        _closeObjectScope();
        _updateToken(JsonToken.END_OBJECT);
        return false;
    }
    // Nope: do we then expect a comma?
    if (_parsingContext.expectComma()) {
        if (i != INT_COMMA) {
            _reportUnexpectedChar(i, ""was expecting comma to separate "" + _parsingContext.typeDesc() + "" entries"");
        }
        i = _skipWS();
        // Was that a trailing comma?
        if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {
            if ((i == INT_RBRACKET) || (i == INT_RCURLY)) {
                _closeScope(i);
                return false;
            }
        }
    }
    if (!_parsingContext.inObject()) {
        _updateLocation();
        _nextTokenNotInObject(i);
        return false;
    }
    // // // This part differs, name parsing
    _updateNameLocation();
    if (i == INT_QUOTE) {
        // when doing literal match, must consider escaping:
        byte[] nameBytes = str.asQuotedUTF8();
        final int len = nameBytes.length;
        // 22-May-2014, tatu: Actually, let's require 4 more bytes for faster skipping
        //    of colon that follows name
        if ((_inputPtr + len + 4) < _inputEnd) {
            // maybe...
            // first check length match by
            final int end = _inputPtr + len;
            if (_inputBuffer[end] == INT_QUOTE) {
                int offset = 0;
                int ptr = _inputPtr;
                while (true) {
                    if (ptr == end) {
                        // yes, match!
                        _parsingContext.setCurrentName(str.getValue());
                        i = _skipColonFast(ptr + 1);
                        _isNextTokenNameYes(i);
                        return true;
                    }
                    if (nameBytes[offset] != _inputBuffer[ptr]) {
                        break;
                    }
                    ++offset;
                    ++ptr;
                }
            }
        }
    }
    return _isNextTokenNameMaybe(i, str);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName(SerializableString).str","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName()","Method","No Comment","@Override
public String nextFieldName() throws IOException {
    // // // Note: this is almost a verbatim copy of nextToken()
    _numTypesValid = NR_UNKNOWN;
    if (_currToken == JsonToken.FIELD_NAME) {
        _nextAfterName();
        return null;
    }
    if (_tokenIncomplete) {
        _skipString();
    }
    int i = _skipWSOrEnd();
    if (i < 0) {
        close();
        _updateTokenToNull();
        return null;
    }
    _binaryValue = null;
    if (i == INT_RBRACKET) {
        _closeArrayScope();
        _updateToken(JsonToken.END_ARRAY);
        return null;
    }
    if (i == INT_RCURLY) {
        _closeObjectScope();
        _updateToken(JsonToken.END_OBJECT);
        return null;
    }
    // Nope: do we then expect a comma?
    if (_parsingContext.expectComma()) {
        if (i != INT_COMMA) {
            _reportUnexpectedChar(i, ""was expecting comma to separate "" + _parsingContext.typeDesc() + "" entries"");
        }
        i = _skipWS();
        // Was that a trailing comma?
        if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {
            if ((i == INT_RBRACKET) || (i == INT_RCURLY)) {
                _closeScope(i);
                return null;
            }
        }
    }
    if (!_parsingContext.inObject()) {
        _updateLocation();
        _nextTokenNotInObject(i);
        return null;
    }
    _updateNameLocation();
    final String nameStr = _parseName(i);
    _parsingContext.setCurrentName(nameStr);
    _updateToken(JsonToken.FIELD_NAME);
    i = _skipColon();
    _updateLocation();
    if (i == INT_QUOTE) {
        _tokenIncomplete = true;
        _nextToken = JsonToken.VALUE_STRING;
        return nameStr;
    }
    JsonToken t;
    switch(i) {
        case '-':
            t = _parseSignedNumber(true);
            break;
        case '+':
            if (isEnabled(JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS.mappedFeature())) {
                t = _parseSignedNumber(false);
            } else {
                t = _handleUnexpectedValue(i);
            }
            break;
        case // [core#611]:
        '.':
            t = _parseFloatThatStartsWithPeriod(false, false);
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            t = _parseUnsignedNumber(i);
            break;
        case 'f':
            _matchFalse();
            t = JsonToken.VALUE_FALSE;
            break;
        case 'n':
            _matchNull();
            t = JsonToken.VALUE_NULL;
            break;
        case 't':
            _matchTrue();
            t = JsonToken.VALUE_TRUE;
            break;
        case '[':
            t = JsonToken.START_ARRAY;
            break;
        case '{':
            t = JsonToken.START_OBJECT;
            break;
        default:
            t = _handleUnexpectedValue(i);
    }
    _nextToken = t;
    return nameStr;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipColonFast(int)","Method","Variant called when we know there's at least 4 more bytes available","private final int _skipColonFast(int ptr) throws IOException {
    int i = _inputBuffer[ptr++];
    if (i == INT_COLON) {
        // common case, no leading space
        i = _inputBuffer[ptr++];
        if (i > INT_SPACE) {
            // nor trailing
            if (i != INT_SLASH && i != INT_HASH) {
                _inputPtr = ptr;
                return i;
            }
        } else if (i == INT_SPACE || i == INT_TAB) {
            i = _inputBuffer[ptr++];
            if (i > INT_SPACE) {
                if (i != INT_SLASH && i != INT_HASH) {
                    _inputPtr = ptr;
                    return i;
                }
            }
        }
        _inputPtr = ptr - 1;
        // true -> skipped colon
        return _skipColon2(true);
    }
    if (i == INT_SPACE || i == INT_TAB) {
        i = _inputBuffer[ptr++];
    }
    if (i == INT_COLON) {
        i = _inputBuffer[ptr++];
        if (i > INT_SPACE) {
            if (i != INT_SLASH && i != INT_HASH) {
                _inputPtr = ptr;
                return i;
            }
        } else if (i == INT_SPACE || i == INT_TAB) {
            i = _inputBuffer[ptr++];
            if (i > INT_SPACE) {
                if (i != INT_SLASH && i != INT_HASH) {
                    _inputPtr = ptr;
                    return i;
                }
            }
        }
        _inputPtr = ptr - 1;
        return _skipColon2(true);
    }
    _inputPtr = ptr - 1;
    return _skipColon2(false);
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipColonFast(int).ptr","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipColonFast(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._isNextTokenNameYes(int)","Method","No Comment","private final void _isNextTokenNameYes(int i) throws IOException {
    _updateToken(JsonToken.FIELD_NAME);
    _updateLocation();
    switch(i) {
        case '""':
            _tokenIncomplete = true;
            _nextToken = JsonToken.VALUE_STRING;
            return;
        case '[':
            _nextToken = JsonToken.START_ARRAY;
            return;
        case '{':
            _nextToken = JsonToken.START_OBJECT;
            return;
        case 't':
            _matchTrue();
            _nextToken = JsonToken.VALUE_TRUE;
            return;
        case 'f':
            _matchFalse();
            _nextToken = JsonToken.VALUE_FALSE;
            return;
        case 'n':
            _matchNull();
            _nextToken = JsonToken.VALUE_NULL;
            return;
        case '-':
            _nextToken = _parseSignedNumber(true);
            return;
        case '+':
            if (isEnabled(JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS.mappedFeature())) {
                _nextToken = _parseSignedNumber(false);
            } else {
                _nextToken = _handleUnexpectedValue(i);
            }
            return;
        case // [core#611]
        '.':
            _nextToken = _parseFloatThatStartsWithPeriod(false, false);
            return;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            _nextToken = _parseUnsignedNumber(i);
            return;
    }
    _nextToken = _handleUnexpectedValue(i);
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._isNextTokenNameYes(int).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._isNextTokenNameYes(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._isNextTokenNameMaybe(int,SerializableString)","Method","No Comment","private final boolean _isNextTokenNameMaybe(int i, SerializableString str) throws IOException {
    // // // and this is back to standard nextToken()
    String n = _parseName(i);
    _parsingContext.setCurrentName(n);
    final boolean match = n.equals(str.getValue());
    _updateToken(JsonToken.FIELD_NAME);
    i = _skipColon();
    _updateLocation();
    // Ok: we must have a value... what is it? Strings are very common, check first:
    if (i == INT_QUOTE) {
        _tokenIncomplete = true;
        _nextToken = JsonToken.VALUE_STRING;
        return match;
    }
    JsonToken t;
    switch(i) {
        case '[':
            t = JsonToken.START_ARRAY;
            break;
        case '{':
            t = JsonToken.START_OBJECT;
            break;
        case 't':
            _matchTrue();
            t = JsonToken.VALUE_TRUE;
            break;
        case 'f':
            _matchFalse();
            t = JsonToken.VALUE_FALSE;
            break;
        case 'n':
            _matchNull();
            t = JsonToken.VALUE_NULL;
            break;
        case '-':
            t = _parseSignedNumber(true);
            break;
        case '+':
            if (isEnabled(JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS.mappedFeature())) {
                t = _parseSignedNumber(false);
            } else {
                t = _handleUnexpectedValue(i);
            }
            break;
        case // [core#611]
        '.':
            t = _parseFloatThatStartsWithPeriod(false, false);
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            t = _parseUnsignedNumber(i);
            break;
        default:
            t = _handleUnexpectedValue(i);
    }
    _nextToken = t;
    return match;
}","boolean","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._isNextTokenNameMaybe(int,SerializableString).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._isNextTokenNameMaybe(int,SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._isNextTokenNameMaybe(int,SerializableString).str","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._isNextTokenNameMaybe(int,SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextTextValue()","Method","No Comment","@Override
public String nextTextValue() throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _updateToken(t);
        if (t == JsonToken.VALUE_STRING) {
            if (_tokenIncomplete) {
                _tokenIncomplete = false;
                return _finishAndReturnString();
            }
            return _textBuffer.contentsAsString();
        }
        if (t == JsonToken.START_ARRAY) {
            createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextIntValue(int)","Method","No Comment","@Override
public int nextIntValue(int defaultValue) throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _updateToken(t);
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getIntValue();
        }
        if (t == JsonToken.START_ARRAY) {
            createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextIntValue(int).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextIntValue(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextLongValue(long)","Method","No Comment","@Override
public long nextLongValue(long defaultValue) throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _updateToken(t);
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getLongValue();
        }
        if (t == JsonToken.START_ARRAY) {
            createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextLongValue(long).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextLongValue(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextBooleanValue()","Method","No Comment","@Override
public Boolean nextBooleanValue() throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _updateToken(t);
        if (t == JsonToken.VALUE_TRUE) {
            return Boolean.TRUE;
        }
        if (t == JsonToken.VALUE_FALSE) {
            return Boolean.FALSE;
        }
        if (t == JsonToken.START_ARRAY) {
            createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    JsonToken t = nextToken();
    if (t == JsonToken.VALUE_TRUE) {
        return Boolean.TRUE;
    }
    if (t == JsonToken.VALUE_FALSE) {
        return Boolean.FALSE;
    }
    return null;
}","Boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloatThatStartsWithPeriod()","Method","No Comment","// since 2.14
@Deprecated
protected final JsonToken _parseFloatThatStartsWithPeriod() throws IOException {
    return _parseFloatThatStartsWithPeriod(false, false);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloatThatStartsWithPeriod(boolean,boolean)","Method","No Comment","protected final JsonToken _parseFloatThatStartsWithPeriod(final boolean neg, final boolean hasSign) throws IOException {
    // [core#611]: allow optionally leading decimal point
    if (!isEnabled(JsonReadFeature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS.mappedFeature())) {
        return _handleUnexpectedValue(INT_PERIOD);
    }
    final char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr = 0;
    // 27-Jun-2022, tatu: [core#784] would add plus here too but not yet
    if (neg) {
        outBuf[outPtr++] = '-';
    }
    return _parseFloat(outBuf, outPtr, INT_PERIOD, neg, 0);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloatThatStartsWithPeriod(boolean,boolean).neg","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloatThatStartsWithPeriod(boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloatThatStartsWithPeriod(boolean,boolean).hasSign","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloatThatStartsWithPeriod(boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseUnsignedNumber(int)","Method","* Initial parsing method for number values. It needs to be able
     * to parse enough input to be able to determine whether the
     * value is to be considered a simple integer value, or a more
     * generic decimal value: latter of which needs to be expressed
     * as a floating point number. The basic rule is that if the number
     * has no fractional or exponential part, it is an integer; otherwise
     * a floating point number.
     *<p>
     * Because much of input has to be processed in any case, no partial
     * parsing is done: all input text will be stored for further
     * processing. However, actual numeric value conversion will be
     * deferred, since it is usually the most complicated and costliest
     * part of processing.
     *
     * @param c The first non-null digit character of the number to parse
     *
     * @return Type of token decoded, usually {@link JsonToken#VALUE_NUMBER_INT}
     *    or {@link JsonToken#VALUE_NUMBER_FLOAT}
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","protected JsonToken _parseUnsignedNumber(int c) throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // One special case: if first char is 0, must not be followed by a digit
    if (c == INT_0) {
        c = _verifyNoLeadingZeroes();
    }
    // Ok: we can first just add digit we saw first:
    outBuf[0] = (char) c;
    int intLen = 1;
    int outPtr = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    // 1 == outPtr
    final int end = Math.min(_inputEnd, _inputPtr + outBuf.length - 1);
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // split across boundary, offline
            return _parseNumber2(outBuf, outPtr, false, intLen);
        }
        c = _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == INT_PERIOD || (c | 0x20) == INT_e) {
        // ~ '.eE'
        return _parseFloat(outBuf, outPtr, c, false, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(false, intLen);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseUnsignedNumber(int).c","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseUnsignedNumber(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseSignedNumber(boolean)","Method","No Comment","private final JsonToken _parseSignedNumber(boolean negative) throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr = 0;
    if (negative) {
        // Need to prepend sign?
        outBuf[outPtr++] = '-';
    }
    // Must have something after sign too
    if (_inputPtr >= _inputEnd) {
        _loadMoreGuaranteed();
    }
    int c = _inputBuffer[_inputPtr++] & 0xFF;
    // Note: must be followed by a digit
    if (c <= INT_0) {
        // One special case: if first char is 0, must not be followed by a digit
        if (c != INT_0) {
            if (c == INT_PERIOD) {
                return _parseFloatThatStartsWithPeriod(negative, true);
            }
            return _handleInvalidNumberStart(c, negative, true);
        }
        c = _verifyNoLeadingZeroes();
    } else if (c > INT_9) {
        return _handleInvalidNumberStart(c, negative, true);
    }
    // Ok: we can first just add digit we saw first:
    outBuf[outPtr++] = (char) c;
    int intLen = 1;
    // And then figure out how far we can read without further checks
    // for either input or output
    final int end = Math.min(_inputEnd, _inputPtr + outBuf.length - outPtr);
    // With this, we have a nice and tight loop:
    while (true) {
        if (_inputPtr >= end) {
            // Long enough to be split across boundary, so:
            return _parseNumber2(outBuf, outPtr, negative, intLen);
        }
        c = _inputBuffer[_inputPtr++] & 0xFF;
        if (c < INT_0 || c > INT_9) {
            break;
        }
        ++intLen;
        outBuf[outPtr++] = (char) c;
    }
    if (c == INT_PERIOD || (c | 0x20) == INT_e) {
        // ~ '.eE'
        return _parseFloat(outBuf, outPtr, c, negative, intLen);
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(c);
    }
    // And there we have it!
    return resetInt(negative, intLen);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseSignedNumber(boolean).negative","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseSignedNumber(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseNumber2(char[],int,boolean,int)","Method","(or output is longer than segment used to store it)","private final JsonToken _parseNumber2(char[] outBuf, int outPtr, boolean negative, int intPartLength) throws IOException {
    // Ok, parse the rest
    while (true) {
        if (_inputPtr >= _inputEnd && !_loadMore()) {
            _textBuffer.setCurrentLength(outPtr);
            return resetInt(negative, intPartLength);
        }
        int c = _inputBuffer[_inputPtr++] & 0xFF;
        if (c > INT_9 || c < INT_0) {
            if (c == INT_PERIOD || (c | 0x20) == INT_e) {
                // ~ '.eE'
                return _parseFloat(outBuf, outPtr, c, negative, intPartLength);
            }
            break;
        }
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        outBuf[outPtr++] = (char) c;
        ++intPartLength;
    }
    // to push back trailing char (comma etc)
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(_inputBuffer[_inputPtr] & 0xFF);
    }
    // And there we have it!
    return resetInt(negative, intPartLength);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseNumber2(char[],int,boolean,int).outBuf","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseNumber2(char[],int,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseNumber2(char[],int,boolean,int).outPtr","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseNumber2(char[],int,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseNumber2(char[],int,boolean,int).negative","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseNumber2(char[],int,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseNumber2(char[],int,boolean,int).intPartLength","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseNumber2(char[],int,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._verifyNoLeadingZeroes()","Method","it is not followed by another","private final int _verifyNoLeadingZeroes() throws IOException {
    // Ok to have plain ""0""
    if (_inputPtr >= _inputEnd && !_loadMore()) {
        return INT_0;
    }
    int ch = _inputBuffer[_inputPtr] & 0xFF;
    // if not followed by a number (probably '.'); return zero as is, to be included
    if (ch < INT_0 || ch > INT_9) {
        return INT_0;
    }
    // [JACKSON-358]: we may want to allow them, after all...
    if ((_features & FEAT_MASK_LEADING_ZEROS) == 0) {
        reportInvalidNumber(""Leading zeroes not allowed"");
    }
    // if so, just need to skip either all zeroes (if followed by number); or all but one (if non-number)
    // Leading zero to be skipped
    ++_inputPtr;
    if (ch == INT_0) {
        while (_inputPtr < _inputEnd || _loadMore()) {
            ch = _inputBuffer[_inputPtr] & 0xFF;
            if (ch < INT_0 || ch > INT_9) {
                // followed by non-number; retain one zero
                return INT_0;
            }
            // skip previous zeroes
            ++_inputPtr;
            if (ch != INT_0) {
                // followed by other number; return
                break;
            }
        }
    }
    return ch;
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloat(char[],int,int,boolean,int)","Method","No Comment","private final JsonToken _parseFloat(char[] outBuf, int outPtr, int c, boolean negative, int integerPartLength) throws IOException {
    int fractLen = 0;
    boolean eof = false;
    // And then see if we get other parts
    if (c == INT_PERIOD) {
        // yes, fraction
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        outBuf[outPtr++] = (char) c;
        fract_loop: while (true) {
            if (_inputPtr >= _inputEnd && !_loadMore()) {
                eof = true;
                break fract_loop;
            }
            c = _inputBuffer[_inputPtr++] & 0xFF;
            if (c < INT_0 || c > INT_9) {
                break fract_loop;
            }
            ++fractLen;
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            outBuf[outPtr++] = (char) c;
        }
        // must be followed by sequence of ints, one minimum
        if (fractLen == 0) {
            if (!isEnabled(JsonReadFeature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS.mappedFeature())) {
                _reportUnexpectedNumberChar(c, ""Decimal point not followed by a digit"");
            }
        }
    }
    int expLen = 0;
    if ((c | 0x20) == INT_e) {
        // ~ 'eE' exponent?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        outBuf[outPtr++] = (char) c;
        // Not optional, can require that we get one more char
        if (_inputPtr >= _inputEnd) {
            _loadMoreGuaranteed();
        }
        c = _inputBuffer[_inputPtr++] & 0xFF;
        // Sign indicator?
        if (c == '-' || c == '+') {
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            outBuf[outPtr++] = (char) c;
            // Likewise, non optional:
            if (_inputPtr >= _inputEnd) {
                _loadMoreGuaranteed();
            }
            c = _inputBuffer[_inputPtr++] & 0xFF;
        }
        exp_loop: while (c >= INT_0 && c <= INT_9) {
            ++expLen;
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            outBuf[outPtr++] = (char) c;
            if (_inputPtr >= _inputEnd && !_loadMore()) {
                eof = true;
                break exp_loop;
            }
            c = _inputBuffer[_inputPtr++] & 0xFF;
        }
        // must be followed by sequence of ints, one minimum
        if (expLen == 0) {
            _reportUnexpectedNumberChar(c, ""Exponent indicator not followed by a digit"");
        }
    }
    // Ok; unless we hit end-of-input, need to push last char read back
    if (!eof) {
        --_inputPtr;
        // As per [core#105], need separating space between root values; check here
        if (_parsingContext.inRoot()) {
            _verifyRootSpace(c);
        }
    }
    _textBuffer.setCurrentLength(outPtr);
    // And there we have it!
    return resetFloat(negative, integerPartLength, fractLen, expLen);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloat(char[],int,int,boolean,int).outBuf","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloat(char[],int,int,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloat(char[],int,int,boolean,int).outPtr","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloat(char[],int,int,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloat(char[],int,int,boolean,int).c","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloat(char[],int,int,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloat(char[],int,int,boolean,int).negative","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloat(char[],int,int,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloat(char[],int,int,boolean,int).integerPartLength","Parameter_5","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloat(char[],int,int,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._verifyRootSpace(int)","Method","* Method called to ensure that a root-value is followed by a space
     * token.
     *<p>
     * NOTE: caller MUST ensure there is at least one character available;
     * and that input pointer is AT given char (not past)
     *
     * @param ch First character of likely white space to skip
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems (invalid white space)","private final void _verifyRootSpace(int ch) throws IOException {
    // caller had pushed it back, before calling; reset
    ++_inputPtr;
    // TODO? Handle UTF-8 char decoding for error reporting
    switch(ch) {
        case ' ':
        case '\t':
            return;
        case '\r':
            // 29-Oct-2022, tatu: [core#834] While issue is only relevant for char-backed
            //   sources, let's unify handling to keep behavior uniform.
            // _skipCR();
            --_inputPtr;
            return;
        case '\n':
            ++_currInputRow;
            _currInputRowStart = _inputPtr;
            return;
    }
    _reportMissingRootWS(ch);
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._verifyRootSpace(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._verifyRootSpace(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseName(int)","Method","No Comment","protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) > _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        return slowParseName();
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final byte[] input = _inputBuffer;
    final int[] codes = INPUT_CODES_LATIN1;
    int q = input[_inputPtr++] & 0xFF;
    if (codes[q] == 0) {
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = input[_inputPtr++] & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = input[_inputPtr++] & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = input[_inputPtr++] & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","String","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseName(int).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseName(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName(int)","Method","No Comment","protected final String parseMediumName(int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = INPUT_CODES_LATIN1;
    // Ok, got 5 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 5 bytes
            return findName(_quad1, q2, 1);
        }
        // quoting or invalid char
        return parseName(_quad1, q2, i, 1);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 6 bytes
            return findName(_quad1, q2, 2);
        }
        return parseName(_quad1, q2, i, 2);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 7 bytes
            return findName(_quad1, q2, 3);
        }
        return parseName(_quad1, q2, i, 3);
    }
    q2 = (q2 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 8 bytes
            return findName(_quad1, q2, 4);
        }
        return parseName(_quad1, q2, i, 4);
    }
    return parseMediumName2(i, q2);
}","String","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName(int).q2","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName2(int,int)","Method","@since 2.6","protected final String parseMediumName2(int q3, final int q2) throws IOException {
    final byte[] input = _inputBuffer;
    final int[] codes = INPUT_CODES_LATIN1;
    // Got 9 name bytes so far
    int i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 9 bytes
            return findName(_quad1, q2, q3, 1);
        }
        return parseName(_quad1, q2, q3, i, 1);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 10 bytes
            return findName(_quad1, q2, q3, 2);
        }
        return parseName(_quad1, q2, q3, i, 2);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 11 bytes
            return findName(_quad1, q2, q3, 3);
        }
        return parseName(_quad1, q2, q3, i, 3);
    }
    q3 = (q3 << 8) | i;
    i = input[_inputPtr++] & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 12 bytes
            return findName(_quad1, q2, q3, 4);
        }
        return parseName(_quad1, q2, q3, i, 4);
    }
    return parseLongName(i, q2, q3);
}","String","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName2(int,int).q3","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName2(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName2(int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName2(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongName(int,int,int)","Method","No Comment","protected final String parseLongName(int q, final int q2, int q3) throws IOException {
    _quadBuffer[0] = _quad1;
    _quadBuffer[1] = q2;
    _quadBuffer[2] = q3;
    // As explained above, will ignore UTF-8 encoding at this point
    final byte[] input = _inputBuffer;
    final int[] codes = INPUT_CODES_LATIN1;
    int qlen = 3;
    while ((_inputPtr + 4) <= _inputEnd) {
        int i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 1);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 1);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 2);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 2);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 3);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 3);
        }
        q = (q << 8) | i;
        i = input[_inputPtr++] & 0xFF;
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 4);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 4);
        }
        // Nope, no end in sight. Need to grow quad array etc
        if (qlen >= _quadBuffer.length) {
            _quadBuffer = _growNameDecodeBuffer(_quadBuffer, qlen);
        }
        _quadBuffer[qlen++] = q;
        q = i;
    }
    /* Let's offline if we hit buffer boundary (otherwise would
         * need to [try to] align input, which is bit complicated
         * and may not always be possible)
         */
    return parseEscapedName(_quadBuffer, qlen, 0, q, 0);
}","String","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongName(int,int,int).q","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongName(int,int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongName(int,int,int).q3","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.slowParseName()","Method","plus we'll also do full checks for escaping etc.","protected String slowParseName() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!_loadMore()) {
            _reportInvalidEOF("": was expecting closing '\""' for name"", JsonToken.FIELD_NAME);
        }
    }
    int i = _inputBuffer[_inputPtr++] & 0xFF;
    if (i == INT_QUOTE) {
        // special case, """"
        return """";
    }
    return parseEscapedName(_quadBuffer, 0, 0, i, 0);
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int)","Method","No Comment","private final String parseName(int q1, int ch, int lastQuadBytes) throws IOException {
    return parseEscapedName(_quadBuffer, 0, q1, ch, lastQuadBytes);
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int).ch","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int).lastQuadBytes","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int,int)","Method","No Comment","private final String parseName(int q1, int q2, int ch, int lastQuadBytes) throws IOException {
    _quadBuffer[0] = q1;
    return parseEscapedName(_quadBuffer, 1, q2, ch, lastQuadBytes);
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int,int).ch","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int,int).lastQuadBytes","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int,int,int)","Method","No Comment","private final String parseName(int q1, int q2, int q3, int ch, int lastQuadBytes) throws IOException {
    _quadBuffer[0] = q1;
    _quadBuffer[1] = q2;
    return parseEscapedName(_quadBuffer, 2, q3, ch, lastQuadBytes);
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int,int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int,int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int,int,int).q3","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int,int,int).ch","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int,int,int).lastQuadBytes","Parameter_5","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseName(int,int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseEscapedName(int[],int,int,int,int)","Method","cases, gets slower, and hence is offlined to a separate method.","protected final String parseEscapedName(int[] quads, int qlen, int currQuad, int ch, int currQuadBytes) throws IOException {
    // This may seem weird, but here we do not want to worry about
    // UTF-8 decoding yet. Rather, we'll assume that part is ok (if not it will get
    // caught later on), and just handle quotes and backslashes here.
    final int[] codes = INPUT_CODES_LATIN1;
    while (true) {
        if (codes[ch] != 0) {
            if (ch == INT_QUOTE) {
                // we are done
                break;
            }
            // Unquoted white space?
            if (ch != INT_BACKSLASH) {
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            // Oh crap. May need to UTF-8 (re-)encode it, if it's beyond
            // 7-bit ASCII. Gets pretty messy. If this happens often, may
            // want to use different name canonicalization to avoid these hits.
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = _growNameDecodeBuffer(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = _growNameDecodeBuffer(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = _growNameDecodeBuffer(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!_loadMore()) {
                _reportInvalidEOF("" in field name"", JsonToken.FIELD_NAME);
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = _growNameDecodeBuffer(quads, quads.length);
        }
        quads[qlen++] = _padLastQuad(currQuad, currQuadBytes);
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","String","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseEscapedName(int[],int,int,int,int).quads","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseEscapedName(int[],int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseEscapedName(int[],int,int,int,int).qlen","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseEscapedName(int[],int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseEscapedName(int[],int,int,int,int).currQuad","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseEscapedName(int[],int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseEscapedName(int[],int,int,int,int).ch","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseEscapedName(int[],int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseEscapedName(int[],int,int,int,int).currQuadBytes","Parameter_5","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseEscapedName(int[],int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleOddName(int)","Method","* Method called when we see non-white space character other
     * than double quote, when expecting a field name.
     * In standard mode will just throw an exception; but
     * in non-standard modes may be able to parse name.
     *
     * @param ch First undecoded character of possible ""odd name"" to decode
     *
     * @return Name decoded, if allowed and successful
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems (invalid name)","protected String _handleOddName(int ch) throws IOException {
    // First: may allow single quotes
    if (ch == INT_APOS && (_features & FEAT_MASK_ALLOW_SINGLE_QUOTES) != 0) {
        return _parseAposName();
    }
    // Allow unquoted names if feature enabled:
    if ((_features & FEAT_MASK_ALLOW_UNQUOTED_NAMES) == 0) {
        char c = (char) _decodeCharForError(ch);
        _reportUnexpectedChar(c, ""was expecting double-quote to start field name"");
    }
    /* Also: note that although we use a different table here,
         * it does NOT handle UTF-8 decoding. It'll just pass those
         * high-bit codes as acceptable for later decoding.
         */
    final int[] codes = CharTypes.getInputCodeUtf8JsNames();
    // Also: must start with a valid character...
    if (codes[ch] != 0) {
        _reportUnexpectedChar(ch, ""was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"");
    }
    // Ok, now; instead of ultra-optimizing parsing here (as with regular
    // JSON names), let's just use the generic ""slow"" variant.
    // Can measure its impact later on if need be.
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    while (true) {
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = _growNameDecodeBuffer(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!_loadMore()) {
                _reportInvalidEOF("" in field name"", JsonToken.FIELD_NAME);
            }
        }
        ch = _inputBuffer[_inputPtr] & 0xFF;
        if (codes[ch] != 0) {
            break;
        }
        ++_inputPtr;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = _growNameDecodeBuffer(quads, quads.length);
        }
        quads[qlen++] = currQuad;
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleOddName(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleOddName(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseAposName()","Method","bit slower execution.","protected String _parseAposName() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!_loadMore()) {
            _reportInvalidEOF("": was expecting closing '\'' for field name"", JsonToken.FIELD_NAME);
        }
    }
    int ch = _inputBuffer[_inputPtr++] & 0xFF;
    if (ch == INT_APOS) {
        // special case, ''
        return """";
    }
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    // Copied from parseEscapedFieldName, with minor mods:
    final int[] codes = INPUT_CODES_LATIN1;
    while (true) {
        if (ch == INT_APOS) {
            break;
        }
        // additional check to skip handling of double-quotes
        if ((codes[ch] != 0) && (ch != INT_QUOTE)) {
            if (ch != '\\') {
                // Unquoted white space?
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            // as per main code, inefficient but will have to do
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = _growNameDecodeBuffer(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = _growNameDecodeBuffer(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = _growNameDecodeBuffer(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        if (_inputPtr >= _inputEnd) {
            if (!_loadMore()) {
                _reportInvalidEOF("" in field name"", JsonToken.FIELD_NAME);
            }
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = _growNameDecodeBuffer(quads, quads.length);
        }
        quads[qlen++] = _padLastQuad(currQuad, currQuadBytes);
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int)","Method","No Comment","private final String findName(int q1, int lastQuadBytes) throws JsonParseException, StreamConstraintsException {
    q1 = _padLastQuad(q1, lastQuadBytes);
    // Usually we'll find it from the canonical symbol table already
    String name = _symbols.findName(q1);
    if (name != null) {
        return name;
    }
    // If not, more work. We'll need add stuff to buffer
    _quadBuffer[0] = q1;
    return addName(_quadBuffer, 1, lastQuadBytes);
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int).lastQuadBytes","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int,int)","Method","No Comment","private final String findName(int q1, int q2, int lastQuadBytes) throws JsonParseException, StreamConstraintsException {
    q2 = _padLastQuad(q2, lastQuadBytes);
    // Usually we'll find it from the canonical symbol table already
    String name = _symbols.findName(q1, q2);
    if (name != null) {
        return name;
    }
    // If not, more work. We'll need add stuff to buffer
    _quadBuffer[0] = q1;
    _quadBuffer[1] = q2;
    return addName(_quadBuffer, 2, lastQuadBytes);
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int,int).lastQuadBytes","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int,int,int)","Method","No Comment","private final String findName(int q1, int q2, int q3, int lastQuadBytes) throws JsonParseException, StreamConstraintsException {
    q3 = _padLastQuad(q3, lastQuadBytes);
    String name = _symbols.findName(q1, q2, q3);
    if (name != null) {
        return name;
    }
    int[] quads = _quadBuffer;
    quads[0] = q1;
    quads[1] = q2;
    quads[2] = _padLastQuad(q3, lastQuadBytes);
    return addName(quads, 3, lastQuadBytes);
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int,int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int,int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int,int,int).q3","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int,int,int).lastQuadBytes","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int[],int,int,int)","Method","No Comment","private final String findName(int[] quads, int qlen, int lastQuad, int lastQuadBytes) throws JsonParseException, StreamConstraintsException {
    if (qlen >= quads.length) {
        _quadBuffer = quads = _growNameDecodeBuffer(quads, quads.length);
    }
    quads[qlen++] = _padLastQuad(lastQuad, lastQuadBytes);
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        return addName(quads, qlen, lastQuadBytes);
    }
    return name;
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int[],int,int,int).quads","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int[],int,int,int).qlen","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int[],int,int,int).lastQuad","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int[],int,int,int).lastQuadBytes","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.findName(int[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.addName(int[],int,int)","Method","This is the main workhorse method used when we take a symbol
     * table miss. It needs to demultiplex individual bytes, decode
     * multi-byte chars (if any), and then construct Name instance
     * and add it to the symbol table.","private final String addName(int[] quads, int qlen, int lastQuadBytes) throws JsonParseException, StreamConstraintsException {
    /* Ok: must decode UTF-8 chars. No other validation is
         * needed, since unescaping has been done earlier as necessary
         * (as well as error reporting for unescaped control chars)
         */
    // 4 bytes per quad, except last one maybe less
    final int byteLen = (qlen << 2) - 4 + lastQuadBytes;
    _streamReadConstraints.validateNameLength(byteLen);
    /* And last one is not correctly aligned (leading zero bytes instead
         * need to shift a bit, instead of trailing). Only need to shift it
         * for UTF-8 decoding; need revert for storage (since key will not
         * be aligned, to optimize lookup speed)
         */
    int lastQuad;
    if (lastQuadBytes < 4) {
        lastQuad = quads[qlen - 1];
        // 8/16/24 bit left shift
        quads[qlen - 1] = (lastQuad << ((4 - lastQuadBytes) << 3));
    } else {
        lastQuad = 0;
    }
    // Need some working space, TextBuffer works well:
    char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();
    int cix = 0;
    for (int ix = 0; ix < byteLen; ) {
        // current quad, need to shift+mask
        int ch = quads[ix >> 2];
        int byteIx = (ix & 3);
        ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;
        ++ix;
        if (ch > 127) {
            // multi-byte
            int needed;
            if ((ch & 0xE0) == 0xC0) {
                // 2 bytes (0x0080 - 0x07FF)
                ch &= 0x1F;
                needed = 1;
            } else if ((ch & 0xF0) == 0xE0) {
                // 3 bytes (0x0800 - 0xFFFF)
                ch &= 0x0F;
                needed = 2;
            } else if ((ch & 0xF8) == 0xF0) {
                // 4 bytes; double-char with surrogates and all...
                ch &= 0x07;
                needed = 3;
            } else {
                // 5- and 6-byte chars not valid json chars
                _reportInvalidInitial(ch);
                // never really gets this far
                needed = ch = 1;
            }
            if ((ix + needed) > byteLen) {
                _reportInvalidEOF("" in field name"", JsonToken.FIELD_NAME);
            }
            // Ok, always need at least one more:
            // current quad, need to shift+mask
            int ch2 = quads[ix >> 2];
            byteIx = (ix & 3);
            ch2 = (ch2 >> ((3 - byteIx) << 3));
            ++ix;
            if ((ch2 & 0xC0) != 0x080) {
                _reportInvalidOther(ch2);
            }
            ch = (ch << 6) | (ch2 & 0x3F);
            if (needed > 1) {
                ch2 = quads[ix >> 2];
                byteIx = (ix & 3);
                ch2 = (ch2 >> ((3 - byteIx) << 3));
                ++ix;
                if ((ch2 & 0xC0) != 0x080) {
                    _reportInvalidOther(ch2);
                }
                ch = (ch << 6) | (ch2 & 0x3F);
                if (needed > 2) {
                    // 4 bytes? (need surrogates on output)
                    ch2 = quads[ix >> 2];
                    byteIx = (ix & 3);
                    ch2 = (ch2 >> ((3 - byteIx) << 3));
                    ++ix;
                    if ((ch2 & 0xC0) != 0x080) {
                        _reportInvalidOther(ch2 & 0xFF);
                    }
                    ch = (ch << 6) | (ch2 & 0x3F);
                }
            }
            if (needed > 2) {
                // surrogate pair? once again, let's output one here, one later on
                // to normalize it starting with 0x0
                ch -= 0x10000;
                if (cix >= cbuf.length) {
                    cbuf = _textBuffer.expandCurrentSegment();
                }
                cbuf[cix++] = (char) (0xD800 + (ch >> 10));
                ch = 0xDC00 | (ch & 0x03FF);
            }
        }
        if (cix >= cbuf.length) {
            cbuf = _textBuffer.expandCurrentSegment();
        }
        cbuf[cix++] = (char) ch;
    }
    // Ok. Now we have the character array, and can construct the String
    String baseName = new String(cbuf, 0, cix);
    // And finally, un-align if necessary
    if (lastQuadBytes < 4) {
        quads[qlen - 1] = lastQuad;
    }
    return _symbols.addName(baseName, quads, qlen);
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.addName(int[],int,int).quads","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.addName(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.addName(int[],int,int).qlen","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.addName(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.addName(int[],int,int).lastQuadBytes","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.addName(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._padLastQuad(int,int)","Method","Helper method needed to fix [jackson-core#148], masking of 0x00 character","private final static int _padLastQuad(int q, int bytes) {
    return (bytes == 4) ? q : (q | (-1 << (bytes << 3)));
}","int","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._padLastQuad(int,int).q","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._padLastQuad(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._padLastQuad(int,int).bytes","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._padLastQuad(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._loadMoreGuaranteed()","Method","No Comment","protected void _loadMoreGuaranteed() throws IOException {
    if (!_loadMore()) {
        _reportInvalidEOF();
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString()","Method","No Comment","@Override
protected void _finishString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        _loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = INPUT_CODES_UTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                _textBuffer.setCurrentLength(outPtr);
                return;
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishAndReturnString()","Method","@since 2.6","protected String _finishAndReturnString() throws IOException {
    // First, single tight loop for ASCII content, not split across input buffer boundary:
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        _loadMoreGuaranteed();
        ptr = _inputPtr;
    }
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = INPUT_CODES_UTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    final byte[] inputBuffer = _inputBuffer;
    while (ptr < max) {
        int c = inputBuffer[ptr] & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                return _textBuffer.setCurrentAndReturn(outPtr);
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _inputPtr = ptr;
    _finishString2(outBuf, outPtr);
    return _textBuffer.contentsAsString();
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString2(char[],int)","Method","No Comment","private final void _finishString2(char[] outBuf, int outPtr) throws IOException {
    int c;
    // Here we do want to do full decoding, hence:
    final int[] codes = INPUT_CODES_UTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ASCII non-funny-char loop:
        ascii_loop: while (true) {
            int ptr = _inputPtr;
            if (ptr >= _inputEnd) {
                _loadMoreGuaranteed();
                ptr = _inputPtr;
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            final int max = Math.min(_inputEnd, InternalJacksonUtil.addOverflowSafe(ptr, outBuf.length - outPtr));
            while (ptr < max) {
                c = inputBuffer[ptr++] & 0xFF;
                if (codes[c] != 0) {
                    _inputPtr = ptr;
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
            _inputPtr = ptr;
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                c = _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    // As per [JACKSON-208], call can now return:
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString2(char[],int).outBuf","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString2(char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString2(char[],int).outPtr","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString2(char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipString()","Method","* Method called to skim through rest of unparsed String value,
     * if it is not needed. This can be done bit faster if contents
     * need not be stored for future access.
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems (invalid String value)","protected void _skipString() throws IOException {
    _tokenIncomplete = false;
    // Need to be fully UTF-8 aware here:
    final int[] codes = INPUT_CODES_UTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        int c;
        ascii_loop: while (true) {
            int ptr = _inputPtr;
            int max = _inputEnd;
            if (ptr >= max) {
                _loadMoreGuaranteed();
                ptr = _inputPtr;
                max = _inputEnd;
            }
            while (ptr < max) {
                c = inputBuffer[ptr++] & 0xFF;
                if (codes[c] != 0) {
                    _inputPtr = ptr;
                    break ascii_loop;
                }
            }
            _inputPtr = ptr;
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                _skipUtf8_2();
                break;
            case // 3-byte UTF
            3:
                _skipUtf8_3();
                break;
            case // 4-byte UTF
            4:
                _skipUtf8_4(c);
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleUnexpectedValue(int)","Method","* Method for handling cases where first non-space character
     * of an expected value token is not legal for standard JSON content.
     *
     * @param c First undecoded character of possible ""odd value"" to decode
     *
     * @return Type of value decoded, if allowed and successful
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems (invalid white space)","protected JsonToken _handleUnexpectedValue(int c) throws IOException {
    // Most likely an error, unless we are to allow single-quote-strings
    switch(c) {
        /* This check proceeds only if `Feature.ALLOW_MISSING_VALUES` is enabled;
         * it is for missing values. In case of missing values in an array the next token
         * will be either ',' or ']'. This case, decrements the already incremented _inputPtr
         * in the buffer in case of comma (`,`) so that the existing flow goes back to checking
         * the next token which will be comma again and  it parsing continues.
         * Also the case returns NULL as current token in case of ',' or ']'.
         */
        case ']':
            if (!_parsingContext.inArray()) {
                break;
            }
        // fall through
        case ',':
            // 28-Mar-2016: [core#116]: If Feature.ALLOW_MISSING_VALUES is enabled
            //   we may allow ""missing values"", that is, encountering a trailing
            //   comma or closing marker where value would be expected
            // 11-May-2020, tatu: [core#616] No commas in root level
            if (!_parsingContext.inRoot()) {
                if ((_features & FEAT_MASK_ALLOW_MISSING) != 0) {
                    --_inputPtr;
                    return JsonToken.VALUE_NULL;
                }
            }
        // fall through
        case '}':
            // Error: neither is valid at this point; valid closers have
            // been handled earlier
            _reportUnexpectedChar(c, ""expected a value"");
        case '\'':
            if ((_features & FEAT_MASK_ALLOW_SINGLE_QUOTES) != 0) {
                return _handleApos();
            }
            break;
        case 'N':
            _matchToken(""NaN"", 1);
            if ((_features & FEAT_MASK_NON_NUM_NUMBERS) != 0) {
                return resetAsNaN(""NaN"", Double.NaN);
            }
            _reportError(""Non-standard token 'NaN': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow"");
            break;
        case 'I':
            _matchToken(""Infinity"", 1);
            if ((_features & FEAT_MASK_NON_NUM_NUMBERS) != 0) {
                return resetAsNaN(""Infinity"", Double.POSITIVE_INFINITY);
            }
            _reportError(""Non-standard token 'Infinity': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow"");
            break;
        case // note: '-' is taken as number
        '+':
            if (_inputPtr >= _inputEnd) {
                if (!_loadMore()) {
                    _reportInvalidEOFInValue(JsonToken.VALUE_NUMBER_INT);
                }
            }
            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false, true);
    }
    // [core#77] Try to decode most likely token
    if (Character.isJavaIdentifierStart(c)) {
        _reportInvalidToken("""" + ((char) c), _validJsonTokenList());
    }
    // but if it doesn't look like a token:
    _reportUnexpectedChar(c, ""expected a valid value "" + _validJsonValueList());
    return null;
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleUnexpectedValue(int).c","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleUnexpectedValue(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleApos()","Method","No Comment","protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = INPUT_CODES_UTF8;
    final byte[] inputBuffer = _inputBuffer;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            if (_inputPtr >= _inputEnd) {
                _loadMoreGuaranteed();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            int max = _inputEnd;
            {
                final int max2 = InternalJacksonUtil.addOverflowSafe(_inputPtr, outBuf.length - outPtr);
                if (max2 < max) {
                    max = max2;
                }
            }
            while (_inputPtr < max) {
                c = inputBuffer[_inputPtr++] & 0xFF;
                if (c == INT_APOS) {
                    break main_loop;
                }
                if ((codes[c] != 0) && // 13-Oct-2021, tatu: [core#721] Alas, regular quote is included as
                //    special, need to ignore here
                (c != INT_QUOTE)) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        switch(codes[c]) {
            case // backslash
            1:
                c = _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                if ((_inputEnd - _inputPtr) >= 2) {
                    c = _decodeUtf8_3fast(c);
                } else {
                    c = _decodeUtf8_3(c);
                }
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleInvalidNumberStart(int,boolean)","Method","look like a number","protected JsonToken _handleInvalidNumberStart(int ch, final boolean neg) throws IOException {
    return _handleInvalidNumberStart(ch, neg, false);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleInvalidNumberStart(int,boolean).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleInvalidNumberStart(int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleInvalidNumberStart(int,boolean).neg","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleInvalidNumberStart(int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleInvalidNumberStart(int,boolean,boolean)","Method","No Comment","protected JsonToken _handleInvalidNumberStart(int ch, final boolean neg, final boolean hasSign) throws IOException {
    while (ch == 'I') {
        if (_inputPtr >= _inputEnd) {
            if (!_loadMore()) {
                // possibly?
                _reportInvalidEOFInValue(JsonToken.VALUE_NUMBER_FLOAT);
            }
        }
        ch = _inputBuffer[_inputPtr++];
        String match;
        if (ch == 'N') {
            match = neg ? ""-INF"" : ""+INF"";
        } else if (ch == 'n') {
            match = neg ? ""-Infinity"" : ""+Infinity"";
        } else {
            break;
        }
        _matchToken(match, 3);
        if ((_features & FEAT_MASK_NON_NUM_NUMBERS) != 0) {
            return resetAsNaN(match, neg ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);
        }
        _reportError(""Non-standard token '%s': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow"", match);
    }
    if (!isEnabled(JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS.mappedFeature()) && hasSign && !neg) {
        _reportUnexpectedNumberChar('+', ""JSON spec does not allow numbers to have plus signs: enable `JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS` to allow"");
    }
    final String message = neg ? ""expected digit (0-9) to follow minus sign, for valid numeric value"" : ""expected digit (0-9) for valid numeric value"";
    _reportUnexpectedNumberChar(ch, message);
    return null;
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleInvalidNumberStart(int,boolean,boolean).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleInvalidNumberStart(int,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleInvalidNumberStart(int,boolean,boolean).neg","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleInvalidNumberStart(int,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleInvalidNumberStart(int,boolean,boolean).hasSign","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleInvalidNumberStart(int,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchTrue()","Method","NOTE: first character already decoded","protected final void _matchTrue() throws IOException {
    int ptr = _inputPtr;
    if ((ptr + 3) < _inputEnd) {
        byte[] buf = _inputBuffer;
        if ((buf[ptr++] == 'r') && (buf[ptr++] == 'u') && (buf[ptr++] == 'e')) {
            int ch = buf[ptr] & 0xFF;
            if (ch < INT_0 || (ch | 0x20) == INT_RCURLY) {
                //  < '0' || ~ '}]' expected/allowed chars
                _inputPtr = ptr;
                return;
            }
        }
    }
    _matchToken2(""true"", 1);
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchFalse()","Method","No Comment","protected final void _matchFalse() throws IOException {
    int ptr = _inputPtr;
    if ((ptr + 4) < _inputEnd) {
        byte[] buf = _inputBuffer;
        if ((buf[ptr++] == 'a') && (buf[ptr++] == 'l') && (buf[ptr++] == 's') && (buf[ptr++] == 'e')) {
            int ch = buf[ptr] & 0xFF;
            if (ch < INT_0 || (ch | 0x20) == INT_RCURLY) {
                //  < '0' || ~ '}]' expected/allowed chars
                _inputPtr = ptr;
                return;
            }
        }
    }
    _matchToken2(""false"", 1);
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchNull()","Method","No Comment","protected final void _matchNull() throws IOException {
    int ptr = _inputPtr;
    if ((ptr + 3) < _inputEnd) {
        byte[] buf = _inputBuffer;
        if ((buf[ptr++] == 'u') && (buf[ptr++] == 'l') && (buf[ptr++] == 'l')) {
            int ch = buf[ptr] & 0xFF;
            if (ch < INT_0 || (ch | 0x20) == INT_RCURLY) {
                //  < '0' || ~ '}]' expected/allowed chars
                _inputPtr = ptr;
                return;
            }
        }
    }
    _matchToken2(""null"", 1);
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchToken(String,int)","Method","No Comment","protected final void _matchToken(String matchStr, int i) throws IOException {
    final int len = matchStr.length();
    if ((_inputPtr + len) >= _inputEnd) {
        _matchToken2(matchStr, i);
        return;
    }
    do {
        if (_inputBuffer[_inputPtr] != matchStr.charAt(i)) {
            _reportInvalidToken(matchStr.substring(0, i));
        }
        ++_inputPtr;
    } while (++i < len);
    int ch = _inputBuffer[_inputPtr] & 0xFF;
    if (ch >= '0' && ch != ']' && ch != '}') {
        // expected/allowed chars
        _checkMatchEnd(matchStr, i, ch);
    }
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchToken(String,int).matchStr","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchToken(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchToken(String,int).i","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchToken(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchToken2(String,int)","Method","No Comment","private final void _matchToken2(String matchStr, int i) throws IOException {
    final int len = matchStr.length();
    do {
        if (((_inputPtr >= _inputEnd) && !_loadMore()) || (_inputBuffer[_inputPtr] != matchStr.charAt(i))) {
            _reportInvalidToken(matchStr.substring(0, i));
        }
        ++_inputPtr;
    } while (++i < len);
    // but let's also ensure we either get EOF, or non-alphanum char...
    if (_inputPtr >= _inputEnd && !_loadMore()) {
        return;
    }
    int ch = _inputBuffer[_inputPtr] & 0xFF;
    if (ch >= '0' && ch != ']' && ch != '}') {
        // expected/allowed chars
        _checkMatchEnd(matchStr, i, ch);
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchToken2(String,int).matchStr","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchToken2(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchToken2(String,int).i","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchToken2(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._checkMatchEnd(String,int,int)","Method","No Comment","private final void _checkMatchEnd(String matchStr, int i, int ch) throws IOException {
    // but actually only alphanums are problematic
    char c = (char) _decodeCharForError(ch);
    if (Character.isJavaIdentifierPart(c)) {
        _reportInvalidToken(matchStr.substring(0, i));
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._checkMatchEnd(String,int,int).matchStr","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._checkMatchEnd(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._checkMatchEnd(String,int,int).i","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._checkMatchEnd(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._checkMatchEnd(String,int,int).ch","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._checkMatchEnd(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipWS()","Method","No Comment","private final int _skipWS() throws IOException {
    while (_inputPtr < _inputEnd) {
        int i = _inputBuffer[_inputPtr++] & 0xFF;
        if (i > INT_SPACE) {
            if (i == INT_SLASH || i == INT_HASH) {
                --_inputPtr;
                return _skipWS2();
            }
            return i;
        }
        if (i != INT_SPACE) {
            if (i == INT_LF) {
                ++_currInputRow;
                _currInputRowStart = _inputPtr;
            } else if (i == INT_CR) {
                _skipCR();
            } else if (i != INT_TAB) {
                _throwInvalidSpace(i);
            }
        }
    }
    return _skipWS2();
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipWS2()","Method","No Comment","private final int _skipWS2() throws IOException {
    while (_inputPtr < _inputEnd || _loadMore()) {
        int i = _inputBuffer[_inputPtr++] & 0xFF;
        if (i > INT_SPACE) {
            if (i == INT_SLASH) {
                _skipComment();
                continue;
            }
            if (i == INT_HASH) {
                if (_skipYAMLComment()) {
                    continue;
                }
            }
            return i;
        }
        if (i != INT_SPACE) {
            if (i == INT_LF) {
                ++_currInputRow;
                _currInputRowStart = _inputPtr;
            } else if (i == INT_CR) {
                _skipCR();
            } else if (i != INT_TAB) {
                _throwInvalidSpace(i);
            }
        }
    }
    throw _constructError(""Unexpected end-of-input within/between "" + _parsingContext.typeDesc() + "" entries"");
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipWSOrEnd()","Method","No Comment","private final int _skipWSOrEnd() throws IOException {
    // Let's handle first character separately since it is likely that
    // it is either non-whitespace; or we have longer run of white space
    if (_inputPtr >= _inputEnd) {
        if (!_loadMore()) {
            return _eofAsNextChar();
        }
    }
    int i = _inputBuffer[_inputPtr++] & 0xFF;
    if (i > INT_SPACE) {
        if (i == INT_SLASH || i == INT_HASH) {
            --_inputPtr;
            return _skipWSOrEnd2();
        }
        return i;
    }
    if (i != INT_SPACE) {
        if (i == INT_LF) {
            ++_currInputRow;
            _currInputRowStart = _inputPtr;
        } else if (i == INT_CR) {
            _skipCR();
        } else if (i != INT_TAB) {
            _throwInvalidSpace(i);
        }
    }
    while (_inputPtr < _inputEnd) {
        i = _inputBuffer[_inputPtr++] & 0xFF;
        if (i > INT_SPACE) {
            if (i == INT_SLASH || i == INT_HASH) {
                --_inputPtr;
                return _skipWSOrEnd2();
            }
            return i;
        }
        if (i != INT_SPACE) {
            if (i == INT_LF) {
                ++_currInputRow;
                _currInputRowStart = _inputPtr;
            } else if (i == INT_CR) {
                _skipCR();
            } else if (i != INT_TAB) {
                _throwInvalidSpace(i);
            }
        }
    }
    return _skipWSOrEnd2();
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipWSOrEnd2()","Method","No Comment","private final int _skipWSOrEnd2() throws IOException {
    while ((_inputPtr < _inputEnd) || _loadMore()) {
        int i = _inputBuffer[_inputPtr++] & 0xFF;
        if (i > INT_SPACE) {
            if (i == INT_SLASH) {
                _skipComment();
                continue;
            }
            if (i == INT_HASH) {
                if (_skipYAMLComment()) {
                    continue;
                }
            }
            return i;
        } else if (i != INT_SPACE) {
            if (i == INT_LF) {
                ++_currInputRow;
                _currInputRowStart = _inputPtr;
            } else if (i == INT_CR) {
                _skipCR();
            } else if (i != INT_TAB) {
                _throwInvalidSpace(i);
            }
        }
    }
    // We ran out of input...
    return _eofAsNextChar();
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipColon()","Method","No Comment","private final int _skipColon() throws IOException {
    if ((_inputPtr + 4) >= _inputEnd) {
        return _skipColon2(false);
    }
    // Fast path: colon with optional single-space/tab before and/or after:
    int i = _inputBuffer[_inputPtr];
    if (i == INT_COLON) {
        // common case, no leading space
        i = _inputBuffer[++_inputPtr];
        if (i > INT_SPACE) {
            // nor trailing
            if (i == INT_SLASH || i == INT_HASH) {
                return _skipColon2(true);
            }
            ++_inputPtr;
            return i;
        }
        if (i == INT_SPACE || i == INT_TAB) {
            i = _inputBuffer[++_inputPtr];
            if (i > INT_SPACE) {
                if (i == INT_SLASH || i == INT_HASH) {
                    return _skipColon2(true);
                }
                ++_inputPtr;
                return i;
            }
        }
        // true -> skipped colon
        return _skipColon2(true);
    }
    if (i == INT_SPACE || i == INT_TAB) {
        i = _inputBuffer[++_inputPtr];
    }
    if (i == INT_COLON) {
        i = _inputBuffer[++_inputPtr];
        if (i > INT_SPACE) {
            if (i == INT_SLASH || i == INT_HASH) {
                return _skipColon2(true);
            }
            ++_inputPtr;
            return i;
        }
        if (i == INT_SPACE || i == INT_TAB) {
            i = _inputBuffer[++_inputPtr];
            if (i > INT_SPACE) {
                if (i == INT_SLASH || i == INT_HASH) {
                    return _skipColon2(true);
                }
                ++_inputPtr;
                return i;
            }
        }
        return _skipColon2(true);
    }
    return _skipColon2(false);
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipColon2(boolean)","Method","No Comment","private final int _skipColon2(boolean gotColon) throws IOException {
    while (_inputPtr < _inputEnd || _loadMore()) {
        int i = _inputBuffer[_inputPtr++] & 0xFF;
        if (i > INT_SPACE) {
            if (i == INT_SLASH) {
                _skipComment();
                continue;
            }
            if (i == INT_HASH) {
                if (_skipYAMLComment()) {
                    continue;
                }
            }
            if (gotColon) {
                return i;
            }
            if (i != INT_COLON) {
                _reportUnexpectedChar(i, ""was expecting a colon to separate field name and value"");
            }
            gotColon = true;
        } else if (i != INT_SPACE) {
            if (i == INT_LF) {
                ++_currInputRow;
                _currInputRowStart = _inputPtr;
            } else if (i == INT_CR) {
                _skipCR();
            } else if (i != INT_TAB) {
                _throwInvalidSpace(i);
            }
        }
    }
    _reportInvalidEOF("" within/between "" + _parsingContext.typeDesc() + "" entries"", null);
    return -1;
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipColon2(boolean).gotColon","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipColon2(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipComment()","Method","No Comment","private final void _skipComment() throws IOException {
    if ((_features & FEAT_MASK_ALLOW_JAVA_COMMENTS) == 0) {
        _reportUnexpectedChar('/', ""maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)"");
    }
    // First: check which comment (if either) it is:
    if (_inputPtr >= _inputEnd && !_loadMore()) {
        _reportInvalidEOF("" in a comment"", null);
    }
    int c = _inputBuffer[_inputPtr++] & 0xFF;
    if (c == INT_SLASH) {
        _skipLine();
    } else if (c == INT_ASTERISK) {
        _skipCComment();
    } else {
        _reportUnexpectedChar(c, ""was expecting either '*' or '/' for a comment"");
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipCComment()","Method","No Comment","private final void _skipCComment() throws IOException {
    // Need to be UTF-8 aware here to decode content (for skipping)
    final int[] codes = CharTypes.getInputCodeComment();
    // Ok: need the matching '*/'
    main_loop: while ((_inputPtr < _inputEnd) || _loadMore()) {
        int i = _inputBuffer[_inputPtr++] & 0xFF;
        int code = codes[i];
        if (code != 0) {
            switch(code) {
                case '*':
                    if (_inputPtr >= _inputEnd && !_loadMore()) {
                        break main_loop;
                    }
                    if (_inputBuffer[_inputPtr] == INT_SLASH) {
                        ++_inputPtr;
                        return;
                    }
                    break;
                case INT_LF:
                    ++_currInputRow;
                    _currInputRowStart = _inputPtr;
                    break;
                case INT_CR:
                    _skipCR();
                    break;
                case // 2-byte UTF
                2:
                    _skipUtf8_2();
                    break;
                case // 3-byte UTF
                3:
                    _skipUtf8_3();
                    break;
                case // 4-byte UTF
                4:
                    _skipUtf8_4(i);
                    break;
                default:
                    // e.g. -1
                    // Is this good enough error message?
                    _reportInvalidChar(i);
            }
        }
    }
    _reportInvalidEOF("" in a comment"", null);
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipYAMLComment()","Method","No Comment","private final boolean _skipYAMLComment() throws IOException {
    if ((_features & FEAT_MASK_ALLOW_YAML_COMMENTS) == 0) {
        return false;
    }
    _skipLine();
    return true;
}","boolean","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipLine()","Method","and YAML style comments.","private final void _skipLine() throws IOException {
    // Ok: need to find EOF or linefeed
    final int[] codes = CharTypes.getInputCodeComment();
    while ((_inputPtr < _inputEnd) || _loadMore()) {
        int i = _inputBuffer[_inputPtr++] & 0xFF;
        int code = codes[i];
        if (code != 0) {
            switch(code) {
                case INT_LF:
                    ++_currInputRow;
                    _currInputRowStart = _inputPtr;
                    return;
                case INT_CR:
                    _skipCR();
                    return;
                case // nop for these comments
                '*':
                    break;
                case // 2-byte UTF
                2:
                    _skipUtf8_2();
                    break;
                case // 3-byte UTF
                3:
                    _skipUtf8_3();
                    break;
                case // 4-byte UTF
                4:
                    _skipUtf8_4(i);
                    break;
                default:
                    // e.g. -1
                    if (code < 0) {
                        // Is this good enough error message?
                        _reportInvalidChar(i);
                    }
            }
        }
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeEscaped()","Method","No Comment","@Override
protected char _decodeEscaped() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!_loadMore()) {
            _reportInvalidEOF("" in character escape sequence"", JsonToken.VALUE_STRING);
        }
    }
    int c = _inputBuffer[_inputPtr++];
    switch(c) {
        // First, ones that are mapped
        case 'b':
            return '\b';
        case 't':
            return '\t';
        case 'n':
            return '\n';
        case 'f':
            return '\f';
        case 'r':
            return '\r';
        // And these are to be returned as they are
        case '""':
        case '/':
        case '\\':
            return (char) c;
        case // and finally hex-escaped
        'u':
            break;
        default:
            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));
    }
    // Ok, a hex escape. Need 4 characters
    int value = 0;
    for (int i = 0; i < 4; ++i) {
        if (_inputPtr >= _inputEnd) {
            if (!_loadMore()) {
                _reportInvalidEOF("" in character escape sequence"", JsonToken.VALUE_STRING);
            }
        }
        int ch = _inputBuffer[_inputPtr++];
        int digit = CharTypes.charToHex(ch);
        if (digit < 0) {
            _reportUnexpectedChar(ch & 0xFF, ""expected a hex-digit for character escape sequence"");
        }
        value = (value << 4) | digit;
    }
    return (char) value;
}","char","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeCharForError(int)","Method","No Comment","protected int _decodeCharForError(int firstByte) throws IOException {
    int c = firstByte & 0xFF;
    if (c > 0x7F) {
        // if >= 0, is ascii and fine as is
        int needed;
        // Ok; if we end here, we got multi-byte combination
        if ((c & 0xE0) == 0xC0) {
            // 2 bytes (0x0080 - 0x07FF)
            c &= 0x1F;
            needed = 1;
        } else if ((c & 0xF0) == 0xE0) {
            // 3 bytes (0x0800 - 0xFFFF)
            c &= 0x0F;
            needed = 2;
        } else if ((c & 0xF8) == 0xF0) {
            // 4 bytes; double-char with surrogates and all...
            c &= 0x07;
            needed = 3;
        } else {
            _reportInvalidInitial(c & 0xFF);
            // never gets here
            needed = 1;
        }
        int d = nextByte();
        if ((d & 0xC0) != 0x080) {
            _reportInvalidOther(d & 0xFF);
        }
        c = (c << 6) | (d & 0x3F);
        if (needed > 1) {
            // needed == 1 means 2 bytes total
            // 3rd byte
            d = nextByte();
            if ((d & 0xC0) != 0x080) {
                _reportInvalidOther(d & 0xFF);
            }
            c = (c << 6) | (d & 0x3F);
            if (needed > 2) {
                // 4 bytes? (need surrogates)
                d = nextByte();
                if ((d & 0xC0) != 0x080) {
                    _reportInvalidOther(d & 0xFF);
                }
                c = (c << 6) | (d & 0x3F);
            }
        }
    }
    return c;
}","int","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeCharForError(int).firstByte","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeCharForError(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeUtf8_2(int)","Method","No Comment","private final int _decodeUtf8_2(int c) throws IOException {
    if (_inputPtr >= _inputEnd) {
        _loadMoreGuaranteed();
    }
    int d = _inputBuffer[_inputPtr++];
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF, _inputPtr);
    }
    return ((c & 0x1F) << 6) | (d & 0x3F);
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeUtf8_2(int).c","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeUtf8_2(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeUtf8_3(int)","Method","No Comment","private final int _decodeUtf8_3(int c1) throws IOException {
    if (_inputPtr >= _inputEnd) {
        _loadMoreGuaranteed();
    }
    c1 &= 0x0F;
    int d = _inputBuffer[_inputPtr++];
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF, _inputPtr);
    }
    int c = (c1 << 6) | (d & 0x3F);
    if (_inputPtr >= _inputEnd) {
        _loadMoreGuaranteed();
    }
    d = _inputBuffer[_inputPtr++];
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF, _inputPtr);
    }
    c = (c << 6) | (d & 0x3F);
    return c;
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeUtf8_3(int).c1","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeUtf8_3(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeUtf8_3fast(int)","Method","No Comment","private final int _decodeUtf8_3fast(int c1) throws IOException {
    c1 &= 0x0F;
    int d = _inputBuffer[_inputPtr++];
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF, _inputPtr);
    }
    int c = (c1 << 6) | (d & 0x3F);
    d = _inputBuffer[_inputPtr++];
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF, _inputPtr);
    }
    c = (c << 6) | (d & 0x3F);
    return c;
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeUtf8_3fast(int).c1","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeUtf8_3fast(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeUtf8_4(int)","Method","can readily expand it to actual surrogates","private final int _decodeUtf8_4(int c) throws IOException {
    if (_inputPtr >= _inputEnd) {
        _loadMoreGuaranteed();
    }
    int d = _inputBuffer[_inputPtr++];
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF, _inputPtr);
    }
    c = ((c & 0x07) << 6) | (d & 0x3F);
    if (_inputPtr >= _inputEnd) {
        _loadMoreGuaranteed();
    }
    d = _inputBuffer[_inputPtr++];
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF, _inputPtr);
    }
    c = (c << 6) | (d & 0x3F);
    if (_inputPtr >= _inputEnd) {
        _loadMoreGuaranteed();
    }
    d = _inputBuffer[_inputPtr++];
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF, _inputPtr);
    }
    /* note: won't change it to negative here, since caller
         * already knows it'll need a surrogate
         */
    return ((c << 6) | (d & 0x3F)) - 0x10000;
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeUtf8_4(int).c","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeUtf8_4(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipUtf8_2()","Method","No Comment","private final void _skipUtf8_2() throws IOException {
    if (_inputPtr >= _inputEnd) {
        _loadMoreGuaranteed();
    }
    int c = _inputBuffer[_inputPtr++];
    if ((c & 0xC0) != 0x080) {
        _reportInvalidOther(c & 0xFF, _inputPtr);
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipUtf8_3()","Method","Alas, can't heavily optimize skipping, since we still have to
     * do validity checks...","private final void _skipUtf8_3() throws IOException {
    if (_inputPtr >= _inputEnd) {
        _loadMoreGuaranteed();
    }
    //c &= 0x0F;
    int c = _inputBuffer[_inputPtr++];
    if ((c & 0xC0) != 0x080) {
        _reportInvalidOther(c & 0xFF, _inputPtr);
    }
    if (_inputPtr >= _inputEnd) {
        _loadMoreGuaranteed();
    }
    c = _inputBuffer[_inputPtr++];
    if ((c & 0xC0) != 0x080) {
        _reportInvalidOther(c & 0xFF, _inputPtr);
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipUtf8_4(int)","Method","No Comment","private final void _skipUtf8_4(int c) throws IOException {
    if (_inputPtr >= _inputEnd) {
        _loadMoreGuaranteed();
    }
    int d = _inputBuffer[_inputPtr++];
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF, _inputPtr);
    }
    if (_inputPtr >= _inputEnd) {
        _loadMoreGuaranteed();
    }
    d = _inputBuffer[_inputPtr++];
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF, _inputPtr);
    }
    if (_inputPtr >= _inputEnd) {
        _loadMoreGuaranteed();
    }
    d = _inputBuffer[_inputPtr++];
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF, _inputPtr);
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipUtf8_4(int).c","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipUtf8_4(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipCR()","Method","(to see if we have \n following \r).","protected final void _skipCR() throws IOException {
    if (_inputPtr < _inputEnd || _loadMore()) {
        if (_inputBuffer[_inputPtr] == BYTE_LF) {
            ++_inputPtr;
        }
    }
    ++_currInputRow;
    _currInputRowStart = _inputPtr;
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextByte()","Method","No Comment","private int nextByte() throws IOException {
    if (_inputPtr >= _inputEnd) {
        _loadMoreGuaranteed();
    }
    return _inputBuffer[_inputPtr++] & 0xFF;
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(String,int)","Method","No Comment","protected void _reportInvalidToken(String matchedPart, int ptr) throws IOException {
    _inputPtr = ptr;
    _reportInvalidToken(matchedPart, _validJsonTokenList());
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(String,int).matchedPart","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(String,int).ptr","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(String)","Method","No Comment","protected void _reportInvalidToken(String matchedPart) throws IOException {
    _reportInvalidToken(matchedPart, _validJsonTokenList());
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(String).matchedPart","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(String,String)","Method","No Comment","protected void _reportInvalidToken(String matchedPart, String msg) throws IOException {
    /* Let's just try to find what appears to be the token, using
         * regular Java identifier character rules. It's just a heuristic,
         * nothing fancy here (nor fast).
         */
    StringBuilder sb = new StringBuilder(matchedPart);
    while ((_inputPtr < _inputEnd) || _loadMore()) {
        int i = _inputBuffer[_inputPtr++];
        char c = (char) _decodeCharForError(i);
        if (!Character.isJavaIdentifierPart(c)) {
            // 11-Jan-2016, tatu: note: we will fully consume the character,
            //   included or not, so if recovery was possible, it'd be off-by-one...
            // 04-Apr-2021, tatu: ... and the reason we can't do much about it is
            //   because it may be multi-byte UTF-8 character (and even if saved
            //   offset, on buffer boundary it would not work, still)
            break;
        }
        sb.append(c);
        if (sb.length() >= _ioContext.errorReportConfiguration().getMaxErrorTokenLength()) {
            sb.append(""..."");
            break;
        }
    }
    _reportError(""Unrecognized token '%s': was expecting %s"", sb, msg);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(String,String).matchedPart","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(String,String).msg","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidChar(int)","Method","No Comment","protected void _reportInvalidChar(int c) throws JsonParseException {
    // Either invalid WS or illegal UTF-8 start char
    if (c < INT_SPACE) {
        _throwInvalidSpace(c);
    }
    _reportInvalidInitial(c);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidChar(int).c","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidChar(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidInitial(int)","Method","No Comment","protected void _reportInvalidInitial(int mask) throws JsonParseException {
    _reportError(""Invalid UTF-8 start byte 0x"" + Integer.toHexString(mask));
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidInitial(int).mask","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidInitial(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(int)","Method","No Comment","protected void _reportInvalidOther(int mask) throws JsonParseException {
    _reportError(""Invalid UTF-8 middle byte 0x"" + Integer.toHexString(mask));
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(int).mask","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(int,int)","Method","No Comment","protected void _reportInvalidOther(int mask, int ptr) throws JsonParseException {
    _inputPtr = ptr;
    _reportInvalidOther(mask);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(int,int).mask","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(int,int).ptr","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeBase64(Base64Variant)","Method","* Efficient handling for incremental parsing of base64-encoded
     * textual content.
     *
     * @param b64variant Type of base64 encoding expected in context
     *
     * @return Fully decoded value of base64 content
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems (invalid content)","@SuppressWarnings(""resource"")
protected final byte[] _decodeBase64(Base64Variant b64variant) throws IOException {
    ByteArrayBuilder builder = _getByteArrayBuilder();
    while (true) {
        // first, we'll skip preceding white space, if any
        int ch;
        do {
            if (_inputPtr >= _inputEnd) {
                _loadMoreGuaranteed();
            }
            ch = _inputBuffer[_inputPtr++] & 0xFF;
        } while (ch <= INT_SPACE);
        int bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            // reached the end, fair and square?
            if (ch == INT_QUOTE) {
                return builder.toByteArray();
            }
            bits = _decodeBase64Escape(b64variant, ch, 0);
            if (bits < 0) {
                // white space to skip
                continue;
            }
        }
        int decodedData = bits;
        // then second base64 char; can't get padding yet, nor ws
        if (_inputPtr >= _inputEnd) {
            _loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            bits = _decodeBase64Escape(b64variant, ch, 1);
        }
        decodedData = (decodedData << 6) | bits;
        // third base64 char; can be padding, but not ws
        if (_inputPtr >= _inputEnd) {
            _loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        // First branch: can get padding (-> 1 byte)
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // could also just be 'missing'  padding
                if (ch == INT_QUOTE) {
                    decodedData >>= 4;
                    builder.append(decodedData);
                    if (b64variant.requiresPaddingOnRead()) {
                        // to keep parser state bit more consistent
                        --_inputPtr;
                        _handleBase64MissingPadding(b64variant);
                    }
                    return builder.toByteArray();
                }
                bits = _decodeBase64Escape(b64variant, ch, 2);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                // Ok, must get padding
                if (_inputPtr >= _inputEnd) {
                    _loadMoreGuaranteed();
                }
                ch = _inputBuffer[_inputPtr++] & 0xFF;
                if (!b64variant.usesPaddingChar(ch)) {
                    if (_decodeBase64Escape(b64variant, ch, 3) != Base64Variant.BASE64_VALUE_PADDING) {
                        throw reportInvalidBase64Char(b64variant, ch, 3, ""expected padding character '"" + b64variant.getPaddingChar() + ""'"");
                    }
                }
                // Got 12 bits, only need 8, need to shift
                decodedData >>= 4;
                builder.append(decodedData);
                continue;
            }
        }
        // Nope, 2 or 3 bytes
        decodedData = (decodedData << 6) | bits;
        // fourth and last base64 char; can be padding, but not ws
        if (_inputPtr >= _inputEnd) {
            _loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++] & 0xFF;
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // could also just be 'missing'  padding
                if (ch == INT_QUOTE) {
                    decodedData >>= 2;
                    builder.appendTwoBytes(decodedData);
                    if (b64variant.requiresPaddingOnRead()) {
                        // to keep parser state bit more consistent
                        --_inputPtr;
                        _handleBase64MissingPadding(b64variant);
                    }
                    return builder.toByteArray();
                }
                bits = _decodeBase64Escape(b64variant, ch, 3);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                // With padding we only get 2 bytes; but we have to shift it
                // a bit so it is identical to triplet case with partial output.
                // 3 chars gives 3x6 == 18 bits, of which 2 are dummies, need to discard:
                decodedData >>= 2;
                builder.appendTwoBytes(decodedData);
                continue;
            }
        }
        // otherwise, our triplet is now complete
        decodedData = (decodedData << 6) | bits;
        builder.appendThreeBytes(decodedData);
    }
}","byte[]","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeBase64(Base64Variant).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeBase64(Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.currentLocation()","Method","No Comment","@Override
public JsonLocation currentLocation() {
    // 1-based
    int col = _inputPtr - _currInputRowStart + 1;
    return new JsonLocation(_contentReference(), // bytes, chars
    _currInputProcessed + _inputPtr, // bytes, chars
    -1L, _currInputRow, col);
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._currentLocationMinusOne()","Method","No Comment","// @since 2.17
@Override
protected JsonLocation _currentLocationMinusOne() {
    final int prevInputPtr = _inputPtr - 1;
    // 1-based
    final int col = prevInputPtr - _currInputRowStart + 1;
    return new JsonLocation(_contentReference(), // bytes, chars
    _currInputProcessed + prevInputPtr, // bytes, chars
    -1L, _currInputRow, col);
}","JsonLocation","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.currentTokenLocation()","Method","No Comment","@Override
public JsonLocation currentTokenLocation() {
    if (_currToken == JsonToken.FIELD_NAME) {
        long total = _currInputProcessed + (_nameStartOffset - 1);
        return new JsonLocation(_contentReference(), total, -1L, _nameStartRow, _nameStartCol);
    }
    return new JsonLocation(_contentReference(), _tokenInputTotal - 1, -1L, _tokenInputRow, _tokenInputCol);
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._updateLocation()","Method","@since 2.7","private final void _updateLocation() {
    _tokenInputRow = _currInputRow;
    final int ptr = _inputPtr;
    _tokenInputTotal = _currInputProcessed + ptr;
    _tokenInputCol = ptr - _currInputRowStart;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._updateNameLocation()","Method","@since 2.7","private final void _updateNameLocation() {
    _nameStartRow = _currInputRow;
    final int ptr = _inputPtr;
    _nameStartOffset = ptr;
    _nameStartCol = ptr - _currInputRowStart;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._closeScope(int)","Method","No Comment","private final JsonToken _closeScope(int i) throws IOException {
    if (i == INT_RCURLY) {
        _closeObjectScope();
        return _updateToken(JsonToken.END_OBJECT);
    }
    _closeArrayScope();
    return _updateToken(JsonToken.END_ARRAY);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._closeScope(int).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser._closeScope(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._closeArrayScope()","Method","No Comment","private final void _closeArrayScope() throws IOException {
    _updateLocation();
    if (!_parsingContext.inArray()) {
        _reportMismatchedEndMarker(']', '}');
    }
    _parsingContext = _parsingContext.clearAndGetParent();
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser._closeObjectScope()","Method","No Comment","private final void _closeObjectScope() throws IOException {
    _updateLocation();
    if (!_parsingContext.inObject()) {
        _reportMismatchedEndMarker('}', ']');
    }
    _parsingContext = _parsingContext.clearAndGetParent();
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,boolean)","Constructor","* Constructor called when caller wants to provide input buffer directly
     * (or needs to, in case of bootstrapping having read some of contents)
     * and it may or may not be recyclable use standard recycle context.
     *
     * @param ctxt I/O context to use
     * @param features Standard stream read features enabled
     * @param in InputStream used for reading actual content, if any; {@code null} if none
     * @param codec {@code ObjectCodec} to delegate object deserialization to
     * @param sym Name canonicalizer to use
     * @param inputBuffer Input buffer to read initial content from (before Reader)
     * @param start Pointer in {@code inputBuffer} that has the first content character to decode
     * @param end Pointer past the last content character in {@code inputBuffer}
     * @param bufferRecyclable Whether {@code inputBuffer} passed is managed by Jackson core
     *    (and thereby needs recycling)
     *
     * @deprecated Since 2.10","@Deprecated
public UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in, ObjectCodec codec, ByteQuadsCanonicalizer sym, byte[] inputBuffer, int start, int end, boolean bufferRecyclable) {
    this(ctxt, features, in, codec, sym, inputBuffer, start, end, 0, bufferRecyclable);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,boolean).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,boolean).features","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,boolean).in","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,boolean).codec","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,boolean).sym","Parameter_5","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,boolean).inputBuffer","Parameter_6","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,boolean).start","Parameter_7","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,boolean).end","Parameter_8","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,boolean).bufferRecyclable","Parameter_9","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean)","Constructor","* Constructor called when caller wants to provide input buffer directly
     * (or needs to, in case of bootstrapping having read some of contents)
     * and it may or may not be recyclable use standard recycle context.
     *
     * @param ctxt I/O context to use
     * @param features Standard stream read features enabled
     * @param in InputStream used for reading actual content, if any; {@code null} if none
     * @param codec {@code ObjectCodec} to delegate object deserialization to
     * @param sym Name canonicalizer to use
     * @param inputBuffer Input buffer to read initial content from (before Reader)
     * @param start Pointer in {@code inputBuffer} that has the first content character to decode
     * @param end Pointer past the last content character in {@code inputBuffer}
     * @param bytesPreProcessed Number of bytes that have been consumed already (by bootstrapping)
     * @param bufferRecyclable Whether {@code inputBuffer} passed is managed by Jackson core
     *    (and thereby needs recycling)","public UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in, ObjectCodec codec, ByteQuadsCanonicalizer sym, byte[] inputBuffer, int start, int end, int bytesPreProcessed, boolean bufferRecyclable) {
    super(ctxt, features, codec);
    _inputStream = in;
    _symbols = sym;
    _inputBuffer = inputBuffer;
    _inputPtr = start;
    _inputEnd = end;
    _currInputRowStart = start - bytesPreProcessed;
    // If we have offset, need to omit that from byte offset, so:
    _currInputProcessed = -start + bytesPreProcessed;
    _bufferRecyclable = bufferRecyclable;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean).features","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean).in","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean).codec","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean).sym","Parameter_5","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean).inputBuffer","Parameter_6","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean).start","Parameter_7","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean).end","Parameter_8","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean).bytesPreProcessed","Parameter_9","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean).bufferRecyclable","Parameter_10","Belong to com.fasterxml.jackson.core.json.UTF8StreamJsonParser.<init>(IOContext,int,InputStream,ObjectCodec,ByteQuadsCanonicalizer,byte[],int,int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser","Class","* This is a concrete implementation of {@link JsonParser}, which is
 * based on a {@link java.io.DataInput} as the input source.
 *<p>
 * Due to limitations in look-ahead (basically there's none), as well
 * as overhead of reading content mostly byte-by-byte,
 * there are some
 * minor differences from regular streaming parsing. Specifically:
 *<ul>
 * <li>Input location offsets not being tracked, as offsets would need to
 *   be updated for each read from all over the place. If caller wants
 *   this information, it has to track this with {@link DataInput}.
 *   This also affects column number, so the only location information
 *   available is the row (line) number (but even that is approximate in
 *   case of two-byte linefeeds -- it should work with single CR or LF tho)
 *  </li>
 * <li>No white space validation:
 *    checks are simplified NOT to check for control characters.
 *  </li>
 * </ul>
 *
 * @since 2.8","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.json.JsonParserBase",""
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._symbols","Field","* Symbol table that contains field names encountered so far","protected final ByteQuadsCanonicalizer _symbols;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._quadBuffer","Field","* Temporary buffer used for name parsing.","protected int[] _quadBuffer = new int[16];","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._tokenIncomplete","Field","* Flag that indicates that the current token has not yet
     * been fully processed, and needs to be finished for
     * some access (or skipped to obtain the next token)","protected boolean _tokenIncomplete;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._quad1","Field","* Temporary storage for partially parsed name bytes.","private int _quad1;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._inputData","Field","No Comment","protected DataInput _inputData;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._nextByte","Field","* Sometimes we need buffering for just a single byte we read but
     * have to ""push back""","protected int _nextByte = -1;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.releaseBuffered(OutputStream)","Method","No Comment","@Override
public int releaseBuffered(OutputStream out) throws IOException {
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.releaseBuffered(OutputStream).out","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.releaseBuffered(OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getInputSource()","Method","No Comment","@Override
public Object getInputSource() {
    return _inputData;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._closeInput()","Method","No Comment","@Override
protected void _closeInput() throws IOException {
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._releaseBuffers()","Method","* Method called to release internal buffers owned by the base
     * reader. This may be called along with {@link #_closeInput} (for
     * example, when explicitly closing this reader instance), or
     * separately (if need be).","@Override
protected void _releaseBuffers() throws IOException {
    super._releaseBuffers();
    // Merge found symbols, if any:
    _symbols.release();
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getText()","Method","No Comment","@Override
public String getText() throws IOException {
    if (_currToken == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            return _finishAndReturnString();
        }
        return _textBuffer.contentsAsString();
    }
    return _getText2(_currToken);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getText(Writer)","Method","No Comment","@Override
public int getText(Writer writer) throws IOException {
    JsonToken t = _currToken;
    if (t == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            _finishString();
        }
        return _textBuffer.contentsToWriter(writer);
    }
    if (t == JsonToken.FIELD_NAME) {
        String n = _parsingContext.getCurrentName();
        writer.write(n);
        return n.length();
    }
    if (t != null) {
        if (t.isNumeric()) {
            return _textBuffer.contentsToWriter(writer);
        }
        char[] ch = t.asCharArray();
        writer.write(ch);
        return ch.length;
    }
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getText(Writer).writer","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getText(Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getValueAsString()","Method","// // Let's override default impls for improved performance","@Override
public String getValueAsString() throws IOException {
    if (_currToken == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            return _finishAndReturnString();
        }
        return _textBuffer.contentsAsString();
    }
    if (_currToken == JsonToken.FIELD_NAME) {
        return currentName();
    }
    return super.getValueAsString(null);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getValueAsString(String)","Method","No Comment","@Override
public String getValueAsString(String defValue) throws IOException {
    if (_currToken == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            return _finishAndReturnString();
        }
        return _textBuffer.contentsAsString();
    }
    if (_currToken == JsonToken.FIELD_NAME) {
        return currentName();
    }
    return super.getValueAsString(defValue);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getValueAsString(String).defValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getValueAsString(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getValueAsInt()","Method","No Comment","@Override
public int getValueAsInt() throws IOException {
    JsonToken t = _currToken;
    if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT)) {
        // inlined 'getIntValue()'
        if ((_numTypesValid & NR_INT) == 0) {
            if (_numTypesValid == NR_UNKNOWN) {
                return _parseIntValue();
            }
            if ((_numTypesValid & NR_INT) == 0) {
                convertNumberToInt();
            }
        }
        return _numberInt;
    }
    return super.getValueAsInt(0);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getValueAsInt(int)","Method","No Comment","@Override
public int getValueAsInt(int defValue) throws IOException {
    JsonToken t = _currToken;
    if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT)) {
        // inlined 'getIntValue()'
        if ((_numTypesValid & NR_INT) == 0) {
            if (_numTypesValid == NR_UNKNOWN) {
                return _parseIntValue();
            }
            if ((_numTypesValid & NR_INT) == 0) {
                convertNumberToInt();
            }
        }
        return _numberInt;
    }
    return super.getValueAsInt(defValue);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getValueAsInt(int).defValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getValueAsInt(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._getText2(JsonToken)","Method","No Comment","protected final String _getText2(JsonToken t) throws IOException {
    if (t == null) {
        return null;
    }
    switch(t.id()) {
        case ID_FIELD_NAME:
            return _parsingContext.getCurrentName();
        case ID_STRING:
        // fall through
        case ID_NUMBER_INT:
        case ID_NUMBER_FLOAT:
            return _textBuffer.contentsAsString();
        default:
            return t.asString();
    }
}","String","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._getText2(JsonToken).t","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._getText2(JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getTextCharacters()","Method","No Comment","@Override
public char[] getTextCharacters() throws IOException {
    if (_currToken != null) {
        // null only before/after document
        switch(_currToken.id()) {
            case ID_FIELD_NAME:
                if (!_nameCopied) {
                    String name = _parsingContext.getCurrentName();
                    int nameLen = name.length();
                    if (_nameCopyBuffer == null) {
                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);
                    } else if (_nameCopyBuffer.length < nameLen) {
                        _nameCopyBuffer = new char[nameLen];
                    }
                    name.getChars(0, nameLen, _nameCopyBuffer, 0);
                    _nameCopied = true;
                }
                return _nameCopyBuffer;
            case ID_STRING:
                if (_tokenIncomplete) {
                    _tokenIncomplete = false;
                    // only strings can be incomplete
                    _finishString();
                }
            // fall through
            case ID_NUMBER_INT:
            case ID_NUMBER_FLOAT:
                return _textBuffer.getTextBuffer();
            default:
                return _currToken.asCharArray();
        }
    }
    return null;
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getTextLength()","Method","No Comment","@Override
public int getTextLength() throws IOException {
    if (_currToken == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            _finishString();
        }
        return _textBuffer.size();
    }
    if (_currToken == JsonToken.FIELD_NAME) {
        return _parsingContext.getCurrentName().length();
    }
    if (_currToken != null) {
        // null only before/after document
        if (_currToken.isNumeric()) {
            return _textBuffer.size();
        }
        return _currToken.asCharArray().length;
    }
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getTextOffset()","Method","No Comment","@Override
public int getTextOffset() throws IOException {
    // Most have offset of 0, only some may have other values:
    if (_currToken != null) {
        switch(_currToken.id()) {
            case ID_FIELD_NAME:
                return 0;
            case ID_STRING:
                if (_tokenIncomplete) {
                    _tokenIncomplete = false;
                    // only strings can be incomplete
                    _finishString();
                }
            // fall through
            case ID_NUMBER_INT:
            case ID_NUMBER_FLOAT:
                return _textBuffer.getTextOffset();
            default:
        }
    }
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getBinaryValue(Base64Variant)","Method","No Comment","@Override
public byte[] getBinaryValue(Base64Variant b64variant) throws IOException {
    if (_currToken != JsonToken.VALUE_STRING && (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null)) {
        _reportError(""Current token ("" + _currToken + "") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary"");
    }
    /* To ensure that we won't see inconsistent data, better clear up
         * state...
         */
    if (_tokenIncomplete) {
        try {
            _binaryValue = _decodeBase64(b64variant);
        } catch (IllegalArgumentException iae) {
            throw _constructError(""Failed to decode VALUE_STRING as base64 ("" + b64variant + ""): "" + iae.getMessage());
        }
        /* let's clear incomplete only now; allows for accessing other
             * textual content in error cases
             */
        _tokenIncomplete = false;
    } else {
        // may actually require conversion...
        if (_binaryValue == null) {
            @SuppressWarnings(""resource"")
            ByteArrayBuilder builder = _getByteArrayBuilder();
            _decodeBase64(getText(), builder, b64variant);
            _binaryValue = builder.toByteArray();
        }
    }
    return _binaryValue;
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getBinaryValue(Base64Variant).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.getBinaryValue(Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.readBinaryValue(Base64Variant,OutputStream)","Method","No Comment","@Override
public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException {
    // if we have already read the token, just use whatever we may have
    if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING) {
        byte[] b = getBinaryValue(b64variant);
        out.write(b);
        return b.length;
    }
    // otherwise do ""real"" incremental parsing...
    byte[] buf = _ioContext.allocBase64Buffer();
    try {
        return _readBinary(b64variant, out, buf);
    } finally {
        _ioContext.releaseBase64Buffer(buf);
    }
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.readBinaryValue(Base64Variant,OutputStream).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.readBinaryValue(Base64Variant,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.readBinaryValue(Base64Variant,OutputStream).out","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.readBinaryValue(Base64Variant,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._readBinary(Base64Variant,OutputStream,byte[])","Method","No Comment","protected int _readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer) throws IOException {
    int outputPtr = 0;
    final int outputEnd = buffer.length - 3;
    int outputCount = 0;
    while (true) {
        // first, we'll skip preceding white space, if any
        int ch;
        do {
            ch = _inputData.readUnsignedByte();
        } while (ch <= INT_SPACE);
        int bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            // reached the end, fair and square?
            if (ch == INT_QUOTE) {
                break;
            }
            bits = _decodeBase64Escape(b64variant, ch, 0);
            if (bits < 0) {
                // white space to skip
                continue;
            }
        }
        // enough room? If not, flush
        if (outputPtr > outputEnd) {
            outputCount += outputPtr;
            out.write(buffer, 0, outputPtr);
            outputPtr = 0;
        }
        int decodedData = bits;
        // then second base64 char; can't get padding yet, nor ws
        ch = _inputData.readUnsignedByte();
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            bits = _decodeBase64Escape(b64variant, ch, 1);
        }
        decodedData = (decodedData << 6) | bits;
        // third base64 char; can be padding, but not ws
        ch = _inputData.readUnsignedByte();
        bits = b64variant.decodeBase64Char(ch);
        // First branch: can get padding (-> 1 byte)
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // could also just be 'missing'  padding
                if (ch == INT_QUOTE) {
                    decodedData >>= 4;
                    buffer[outputPtr++] = (byte) decodedData;
                    if (b64variant.requiresPaddingOnRead()) {
                        _handleBase64MissingPadding(b64variant);
                    }
                    break;
                }
                bits = _decodeBase64Escape(b64variant, ch, 2);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                // Ok, must get padding
                ch = _inputData.readUnsignedByte();
                if (!b64variant.usesPaddingChar(ch)) {
                    if ((ch != INT_BACKSLASH) || _decodeBase64Escape(b64variant, ch, 3) != Base64Variant.BASE64_VALUE_PADDING) {
                        throw reportInvalidBase64Char(b64variant, ch, 3, ""expected padding character '"" + b64variant.getPaddingChar() + ""'"");
                    }
                }
                // Got 12 bits, only need 8, need to shift
                decodedData >>= 4;
                buffer[outputPtr++] = (byte) decodedData;
                continue;
            }
        }
        // Nope, 2 or 3 bytes
        decodedData = (decodedData << 6) | bits;
        // fourth and last base64 char; can be padding, but not ws
        ch = _inputData.readUnsignedByte();
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // could also just be 'missing'  padding
                if (ch == INT_QUOTE) {
                    decodedData >>= 2;
                    buffer[outputPtr++] = (byte) (decodedData >> 8);
                    buffer[outputPtr++] = (byte) decodedData;
                    if (b64variant.requiresPaddingOnRead()) {
                        _handleBase64MissingPadding(b64variant);
                    }
                    break;
                }
                bits = _decodeBase64Escape(b64variant, ch, 3);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                /* With padding we only get 2 bytes; but we have
                     * to shift it a bit so it is identical to triplet
                     * case with partial output.
                     * 3 chars gives 3x6 == 18 bits, of which 2 are
                     * dummies, need to discard:
                     */
                decodedData >>= 2;
                buffer[outputPtr++] = (byte) (decodedData >> 8);
                buffer[outputPtr++] = (byte) decodedData;
                continue;
            }
        }
        // otherwise, our triplet is now complete
        decodedData = (decodedData << 6) | bits;
        buffer[outputPtr++] = (byte) (decodedData >> 16);
        buffer[outputPtr++] = (byte) (decodedData >> 8);
        buffer[outputPtr++] = (byte) decodedData;
    }
    _tokenIncomplete = false;
    if (outputPtr > 0) {
        outputCount += outputPtr;
        out.write(buffer, 0, outputPtr);
    }
    return outputCount;
}","int","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._readBinary(Base64Variant,OutputStream,byte[]).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._readBinary(Base64Variant,OutputStream,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._readBinary(Base64Variant,OutputStream,byte[]).out","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._readBinary(Base64Variant,OutputStream,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._readBinary(Base64Variant,OutputStream,byte[]).buffer","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._readBinary(Base64Variant,OutputStream,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextToken()","Method","* @return Next token from the stream, if any found, or null
     *   to indicate end-of-input","@Override
public JsonToken nextToken() throws IOException {
    if (_closed) {
        return null;
    }
    /* First: field names are special -- we will always tokenize
         * (part of) value along with field name to simplify
         * state handling. If so, can and need to use secondary token:
         */
    if (_currToken == JsonToken.FIELD_NAME) {
        return _nextAfterName();
    }
    // But if we didn't already have a name, and (partially?) decode number,
    // need to ensure no numeric information is leaked
    _numTypesValid = NR_UNKNOWN;
    if (_tokenIncomplete) {
        // only strings can be partial
        _skipString();
    }
    int i = _skipWSOrEnd();
    if (i < 0) {
        // end-of-input
        // Close/release things like input source, symbol table and recyclable buffers
        close();
        return _updateTokenToNull();
    }
    // clear any data retained so far
    _binaryValue = null;
    _tokenInputRow = _currInputRow;
    // Closing scope?
    if ((i | 0x20) == INT_RCURLY) {
        // ~ '}]'
        _closeScope(i);
        return _currToken;
    }
    // Nope: do we then expect a comma?
    if (_parsingContext.expectComma()) {
        if (i != INT_COMMA) {
            _reportUnexpectedChar(i, ""was expecting comma to separate "" + _parsingContext.typeDesc() + "" entries"");
        }
        i = _skipWS();
        // Was that a trailing comma?
        if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {
            if ((i | 0x20) == INT_RCURLY) {
                // ~ '}]'
                _closeScope(i);
                return _currToken;
            }
        }
    }
    /* And should we now have a name? Always true for
         * Object contexts, since the intermediate 'expect-value'
         * state is never retained.
         */
    if (!_parsingContext.inObject()) {
        return _nextTokenNotInObject(i);
    }
    // So first parse the field name itself:
    String n = _parseName(i);
    _parsingContext.setCurrentName(n);
    _updateToken(JsonToken.FIELD_NAME);
    i = _skipColon();
    // Ok: we must have a value... what is it? Strings are very common, check first:
    if (i == INT_QUOTE) {
        _tokenIncomplete = true;
        _nextToken = JsonToken.VALUE_STRING;
        return _currToken;
    }
    JsonToken t;
    switch(i) {
        case '-':
            t = _parseNegNumber();
            break;
        case '+':
            if (isEnabled(JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS.mappedFeature())) {
                t = _parsePosNumber();
            } else {
                t = _handleUnexpectedValue(i);
            }
            break;
        case // as per [core#611]
        '.':
            t = _parseFloatThatStartsWithPeriod(false, false);
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            t = _parseUnsignedNumber(i);
            break;
        case 'f':
            _matchToken(""false"", 1);
            t = JsonToken.VALUE_FALSE;
            break;
        case 'n':
            _matchToken(""null"", 1);
            t = JsonToken.VALUE_NULL;
            break;
        case 't':
            _matchToken(""true"", 1);
            t = JsonToken.VALUE_TRUE;
            break;
        case '[':
            t = JsonToken.START_ARRAY;
            break;
        case '{':
            t = JsonToken.START_OBJECT;
            break;
        default:
            t = _handleUnexpectedValue(i);
    }
    _nextToken = t;
    return _currToken;
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._nextTokenNotInObject(int)","Method","No Comment","private final JsonToken _nextTokenNotInObject(int i) throws IOException {
    if (i == INT_QUOTE) {
        _tokenIncomplete = true;
        return _updateToken(JsonToken.VALUE_STRING);
    }
    switch(i) {
        case '[':
            createChildArrayContext(_tokenInputRow, _tokenInputCol);
            return _updateToken(JsonToken.START_ARRAY);
        case '{':
            createChildObjectContext(_tokenInputRow, _tokenInputCol);
            return _updateToken(JsonToken.START_OBJECT);
        case 't':
            _matchToken(""true"", 1);
            return _updateToken(JsonToken.VALUE_TRUE);
        case 'f':
            _matchToken(""false"", 1);
            return _updateToken(JsonToken.VALUE_FALSE);
        case 'n':
            _matchToken(""null"", 1);
            return _updateToken(JsonToken.VALUE_NULL);
        case '-':
            return _updateToken(_parseNegNumber());
        case '+':
            if (isEnabled(JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS.mappedFeature())) {
                return _updateToken(_parsePosNumber());
            }
            return _updateToken(_handleUnexpectedValue(i));
        case // as per [core#611]
        '.':
            return _updateToken(_parseFloatThatStartsWithPeriod(false, false));
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            return _updateToken(_parseUnsignedNumber(i));
    }
    return _updateToken(_handleUnexpectedValue(i));
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._nextTokenNotInObject(int).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._nextTokenNotInObject(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._nextAfterName()","Method","No Comment","private final JsonToken _nextAfterName() throws IOException {
    // need to invalidate if it was copied
    _nameCopied = false;
    JsonToken t = _nextToken;
    _nextToken = null;
    // Also: may need to start new context?
    if (t == JsonToken.START_ARRAY) {
        createChildArrayContext(_tokenInputRow, _tokenInputCol);
    } else if (t == JsonToken.START_OBJECT) {
        createChildObjectContext(_tokenInputRow, _tokenInputCol);
    }
    return _updateToken(t);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.finishToken()","Method","No Comment","@Override
public void finishToken() throws IOException {
    if (_tokenIncomplete) {
        _tokenIncomplete = false;
        // only strings can be incomplete
        _finishString();
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextFieldName()","Method","No Comment","@Override
public String nextFieldName() throws IOException {
    // // // Note: this is almost a verbatim copy of nextToken()
    _numTypesValid = NR_UNKNOWN;
    if (_currToken == JsonToken.FIELD_NAME) {
        _nextAfterName();
        return null;
    }
    if (_tokenIncomplete) {
        _skipString();
    }
    int i = _skipWS();
    _binaryValue = null;
    _tokenInputRow = _currInputRow;
    if ((i | 0x20) == INT_RCURLY) {
        // ~ '}]'
        _closeScope(i);
        return null;
    }
    // Nope: do we then expect a comma?
    if (_parsingContext.expectComma()) {
        if (i != INT_COMMA) {
            _reportUnexpectedChar(i, ""was expecting comma to separate "" + _parsingContext.typeDesc() + "" entries"");
        }
        i = _skipWS();
        // Was that a trailing comma?
        if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {
            if ((i | 0x20) == INT_RCURLY) {
                // ~ '}]'
                _closeScope(i);
                return null;
            }
        }
    }
    if (!_parsingContext.inObject()) {
        _nextTokenNotInObject(i);
        return null;
    }
    final String nameStr = _parseName(i);
    _parsingContext.setCurrentName(nameStr);
    _updateToken(JsonToken.FIELD_NAME);
    i = _skipColon();
    if (i == INT_QUOTE) {
        _tokenIncomplete = true;
        _nextToken = JsonToken.VALUE_STRING;
        return nameStr;
    }
    JsonToken t;
    switch(i) {
        case '-':
            t = _parseNegNumber();
            break;
        case '+':
            if (isEnabled(JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS.mappedFeature())) {
                t = _parsePosNumber();
            } else {
                t = _handleUnexpectedValue(i);
            }
            break;
        case // as per [core#611]
        '.':
            t = _parseFloatThatStartsWithPeriod(false, false);
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            t = _parseUnsignedNumber(i);
            break;
        case 'f':
            _matchToken(""false"", 1);
            t = JsonToken.VALUE_FALSE;
            break;
        case 'n':
            _matchToken(""null"", 1);
            t = JsonToken.VALUE_NULL;
            break;
        case 't':
            _matchToken(""true"", 1);
            t = JsonToken.VALUE_TRUE;
            break;
        case '[':
            t = JsonToken.START_ARRAY;
            break;
        case '{':
            t = JsonToken.START_OBJECT;
            break;
        default:
            t = _handleUnexpectedValue(i);
    }
    _nextToken = t;
    return nameStr;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextTextValue()","Method","No Comment","@Override
public String nextTextValue() throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _updateToken(t);
        if (t == JsonToken.VALUE_STRING) {
            if (_tokenIncomplete) {
                _tokenIncomplete = false;
                return _finishAndReturnString();
            }
            return _textBuffer.contentsAsString();
        }
        if (t == JsonToken.START_ARRAY) {
            createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextIntValue(int)","Method","No Comment","@Override
public int nextIntValue(int defaultValue) throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _updateToken(t);
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getIntValue();
        }
        if (t == JsonToken.START_ARRAY) {
            createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextIntValue(int).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextIntValue(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextLongValue(long)","Method","No Comment","@Override
public long nextLongValue(long defaultValue) throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _updateToken(t);
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getLongValue();
        }
        if (t == JsonToken.START_ARRAY) {
            createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextLongValue(long).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextLongValue(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.nextBooleanValue()","Method","No Comment","@Override
public Boolean nextBooleanValue() throws IOException {
    // two distinct cases; either got name and we know next type, or 'other'
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _updateToken(t);
        if (t == JsonToken.VALUE_TRUE) {
            return Boolean.TRUE;
        }
        if (t == JsonToken.VALUE_FALSE) {
            return Boolean.FALSE;
        }
        if (t == JsonToken.START_ARRAY) {
            createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    JsonToken t = nextToken();
    if (t == JsonToken.VALUE_TRUE) {
        return Boolean.TRUE;
    }
    if (t == JsonToken.VALUE_FALSE) {
        return Boolean.FALSE;
    }
    return null;
}","Boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseFloatThatStartsWithPeriod()","Method","No Comment","// since 2.14
@Deprecated
protected final JsonToken _parseFloatThatStartsWithPeriod() throws IOException {
    return _parseFloatThatStartsWithPeriod(false, false);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseFloatThatStartsWithPeriod(boolean,boolean)","Method","No Comment","protected final JsonToken _parseFloatThatStartsWithPeriod(final boolean neg, final boolean hasSign) throws IOException {
    // [core#611]: allow optionally leading decimal point
    if (!isEnabled(JsonReadFeature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS.mappedFeature())) {
        return _handleUnexpectedValue(INT_PERIOD);
    }
    final char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr = 0;
    // 27-Jun-2022, tatu: [core#784] would add plus here too but not yet
    if (neg) {
        outBuf[outPtr++] = '-';
    }
    return _parseFloat(outBuf, outPtr, INT_PERIOD, neg, 0);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseFloatThatStartsWithPeriod(boolean,boolean).neg","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseFloatThatStartsWithPeriod(boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseFloatThatStartsWithPeriod(boolean,boolean).hasSign","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseFloatThatStartsWithPeriod(boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseUnsignedNumber(int)","Method","* Initial parsing method for number values. It needs to be able
     * to parse enough input to be able to determine whether the
     * value is to be considered a simple integer value, or a more
     * generic decimal value: latter of which needs to be expressed
     * as a floating point number. The basic rule is that if the number
     * has no fractional or exponential part, it is an integer; otherwise
     * a floating point number.
     *<p>
     * Because much of input has to be processed in any case, no partial
     * parsing is done: all input text will be stored for further
     * processing. However, actual numeric value conversion will be
     * deferred, since it is usually the most complicated and costliest
     * part of processing.
     *
     * @param c The first non-null digit character of the number to parse
     *
     * @return Type of token decoded, usually {@link JsonToken#VALUE_NUMBER_INT}
     *    or {@link JsonToken#VALUE_NUMBER_FLOAT}
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","protected JsonToken _parseUnsignedNumber(int c) throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr;
    // One special case: if first char is 0, must not be followed by a digit.
    // Gets a bit tricky as we only want to retain 0 if it's the full value
    if (c == INT_0) {
        c = _handleLeadingZeroes();
        if (c <= INT_9 && c >= INT_0) {
            // skip if followed by digit
            outPtr = 0;
        } else if (c == 'x' || c == 'X') {
            return _handleInvalidNumberStart(c, false);
        } else {
            outBuf[0] = '0';
            outPtr = 1;
        }
    } else {
        outBuf[0] = (char) c;
        c = _inputData.readUnsignedByte();
        outPtr = 1;
    }
    int intLen = outPtr;
    // With this, we have a nice and tight loop:
    while (c <= INT_9 && c >= INT_0) {
        ++intLen;
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        outBuf[outPtr++] = (char) c;
        c = _inputData.readUnsignedByte();
    }
    if (c == '.' || (c | 0x20) == INT_e) {
        // ~ '.eE'
        return _parseFloat(outBuf, outPtr, c, false, intLen);
    }
    _textBuffer.setCurrentLength(outPtr);
    // As per [core#105], need separating space between root values; check here
    _nextByte = c;
    if (_parsingContext.inRoot()) {
        _verifyRootSpace();
    }
    // And there we have it!
    return resetInt(false, intLen);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseUnsignedNumber(int).c","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseUnsignedNumber(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parsePosNumber()","Method","No Comment","protected final JsonToken _parsePosNumber() throws IOException {
    return _parseSignedNumber(false);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseNegNumber()","Method","No Comment","protected final JsonToken _parseNegNumber() throws IOException {
    return _parseSignedNumber(true);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseSignedNumber(boolean)","Method","No Comment","private final JsonToken _parseSignedNumber(boolean negative) throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr = 0;
    if (negative) {
        // Need to prepend sign?
        outBuf[outPtr++] = '-';
    }
    int c = _inputData.readUnsignedByte();
    outBuf[outPtr++] = (char) c;
    // Note: must be followed by a digit
    if (c <= INT_0) {
        // One special case: if first char is 0 need to check no leading zeroes
        if (c == INT_0) {
            c = _handleLeadingZeroes();
        } else if (c == INT_PERIOD) {
            return _parseFloatThatStartsWithPeriod(negative, true);
        } else {
            return _handleInvalidNumberStart(c, negative, true);
        }
    } else {
        if (c > INT_9) {
            return _handleInvalidNumberStart(c, negative, true);
        }
        c = _inputData.readUnsignedByte();
    }
    // Ok: we can first just add digit we saw first:
    int intLen = 1;
    // With this, we have a nice and tight loop:
    while (c <= INT_9 && c >= INT_0) {
        ++intLen;
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        outBuf[outPtr++] = (char) c;
        c = _inputData.readUnsignedByte();
    }
    if (c == '.' || (c | 0x20) == INT_e) {
        // ~ '.eE'
        return _parseFloat(outBuf, outPtr, c, negative, intLen);
    }
    _textBuffer.setCurrentLength(outPtr);
    // As per [core#105], need separating space between root values; check here
    _nextByte = c;
    if (_parsingContext.inRoot()) {
        _verifyRootSpace();
    }
    // And there we have it!
    return resetInt(negative, intLen);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseSignedNumber(boolean).negative","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseSignedNumber(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleLeadingZeroes()","Method","* Method called when we have seen one zero, and want to ensure
     * it is not followed by another, or, if leading zeroes allowed,
     * skipped redundant ones.
     *
     * @return Character immediately following zeroes
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","private final int _handleLeadingZeroes() throws IOException {
    int ch = _inputData.readUnsignedByte();
    // if not followed by a number (probably '.'); return zero as is, to be included
    if (ch < INT_0 || ch > INT_9) {
        return ch;
    }
    // we may want to allow leading zeroes them, after all...
    if ((_features & FEAT_MASK_LEADING_ZEROS) == 0) {
        reportInvalidNumber(""Leading zeroes not allowed"");
    }
    // if so, just need to skip either all zeroes (if followed by number); or all but one (if non-number)
    while (ch == INT_0) {
        ch = _inputData.readUnsignedByte();
    }
    return ch;
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseFloat(char[],int,int,boolean,int)","Method","No Comment","private final JsonToken _parseFloat(char[] outBuf, int outPtr, int c, boolean negative, int integerPartLength) throws IOException {
    int fractLen = 0;
    // And then see if we get other parts
    if (c == INT_PERIOD) {
        // yes, fraction
        // May have rather long integral part so need to check there's space:
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        outBuf[outPtr++] = (char) c;
        fract_loop: while (true) {
            c = _inputData.readUnsignedByte();
            if (c < INT_0 || c > INT_9) {
                break fract_loop;
            }
            ++fractLen;
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            outBuf[outPtr++] = (char) c;
        }
        // must be followed by sequence of ints, one minimum
        if (fractLen == 0) {
            if (!isEnabled(JsonReadFeature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS.mappedFeature())) {
                _reportUnexpectedNumberChar(c, ""Decimal point not followed by a digit"");
            }
        }
    }
    int expLen = 0;
    if ((c | 0x20) == INT_e) {
        // ~ 'eE' exponent?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        outBuf[outPtr++] = (char) c;
        c = _inputData.readUnsignedByte();
        // Sign indicator?
        if (c == '-' || c == '+') {
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            outBuf[outPtr++] = (char) c;
            c = _inputData.readUnsignedByte();
        }
        while (c <= INT_9 && c >= INT_0) {
            ++expLen;
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            outBuf[outPtr++] = (char) c;
            c = _inputData.readUnsignedByte();
        }
        // must be followed by sequence of ints, one minimum
        if (expLen == 0) {
            _reportUnexpectedNumberChar(c, ""Exponent indicator not followed by a digit"");
        }
    }
    // Ok; unless we hit end-of-input, need to push last char read back
    // As per #105, need separating space between root values; check here
    _nextByte = c;
    if (_parsingContext.inRoot()) {
        _verifyRootSpace();
    }
    _textBuffer.setCurrentLength(outPtr);
    // And there we have it!
    return resetFloat(negative, integerPartLength, fractLen, expLen);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseFloat(char[],int,int,boolean,int).outBuf","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseFloat(char[],int,int,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseFloat(char[],int,int,boolean,int).outPtr","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseFloat(char[],int,int,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseFloat(char[],int,int,boolean,int).c","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseFloat(char[],int,int,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseFloat(char[],int,int,boolean,int).negative","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseFloat(char[],int,int,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseFloat(char[],int,int,boolean,int).integerPartLength","Parameter_5","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseFloat(char[],int,int,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._verifyRootSpace()","Method","* Method called to ensure that a root-value is followed by a space token,
     * if possible.
     *<p>
     * NOTE: with {@link DataInput} source, not really feasible, up-front.
     * If we did want, we could rearrange things to require space before
     * next read, but initially let's just do nothing.","private final void _verifyRootSpace() throws IOException {
    int ch = _nextByte;
    if (ch <= INT_SPACE) {
        _nextByte = -1;
        if (ch == INT_CR || ch == INT_LF) {
            ++_currInputRow;
        }
        return;
    }
    _reportMissingRootWS(ch);
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseName(int)","Method","No Comment","protected final String _parseName(int i) throws IOException {
    if (i != INT_QUOTE) {
        return _handleOddName(i);
    }
    // If so, can also unroll loops nicely
    /* 25-Nov-2008, tatu: This may seem weird, but here we do
         *   NOT want to worry about UTF-8 decoding. Rather, we'll
         *   assume that part is ok (if not it will get caught
         *   later on), and just handle quotes and backslashes here.
         */
    final int[] codes = INPUT_CODES_LATIN1;
    int q = _inputData.readUnsignedByte();
    if (codes[q] == 0) {
        i = _inputData.readUnsignedByte();
        if (codes[i] == 0) {
            q = (q << 8) | i;
            i = _inputData.readUnsignedByte();
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = _inputData.readUnsignedByte();
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = _inputData.readUnsignedByte();
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return _parseMediumName(i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        return findName(q, 4);
                    }
                    return parseName(q, i, 4);
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    return findName(q, 3);
                }
                return parseName(q, i, 3);
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                return findName(q, 2);
            }
            return parseName(q, i, 2);
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            return findName(q, 1);
        }
        return parseName(q, i, 1);
    }
    if (q == INT_QUOTE) {
        // special case, """"
        return """";
    }
    // quoting or invalid char
    return parseName(0, q, 0);
}","String","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseName(int).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseName(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseMediumName(int)","Method","No Comment","private final String _parseMediumName(int q2) throws IOException {
    final int[] codes = INPUT_CODES_LATIN1;
    // Ok, got 5 name bytes so far
    int i = _inputData.readUnsignedByte();
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 5 bytes
            return findName(_quad1, q2, 1);
        }
        // quoting or invalid char
        return parseName(_quad1, q2, i, 1);
    }
    q2 = (q2 << 8) | i;
    i = _inputData.readUnsignedByte();
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 6 bytes
            return findName(_quad1, q2, 2);
        }
        return parseName(_quad1, q2, i, 2);
    }
    q2 = (q2 << 8) | i;
    i = _inputData.readUnsignedByte();
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 7 bytes
            return findName(_quad1, q2, 3);
        }
        return parseName(_quad1, q2, i, 3);
    }
    q2 = (q2 << 8) | i;
    i = _inputData.readUnsignedByte();
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 8 bytes
            return findName(_quad1, q2, 4);
        }
        return parseName(_quad1, q2, i, 4);
    }
    return _parseMediumName2(i, q2);
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseMediumName(int).q2","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseMediumName(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseMediumName2(int,int)","Method","No Comment","private final String _parseMediumName2(int q3, final int q2) throws IOException {
    final int[] codes = INPUT_CODES_LATIN1;
    // Got 9 name bytes so far
    int i = _inputData.readUnsignedByte();
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 9 bytes
            return findName(_quad1, q2, q3, 1);
        }
        return parseName(_quad1, q2, q3, i, 1);
    }
    q3 = (q3 << 8) | i;
    i = _inputData.readUnsignedByte();
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 10 bytes
            return findName(_quad1, q2, q3, 2);
        }
        return parseName(_quad1, q2, q3, i, 2);
    }
    q3 = (q3 << 8) | i;
    i = _inputData.readUnsignedByte();
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 11 bytes
            return findName(_quad1, q2, q3, 3);
        }
        return parseName(_quad1, q2, q3, i, 3);
    }
    q3 = (q3 << 8) | i;
    i = _inputData.readUnsignedByte();
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 12 bytes
            return findName(_quad1, q2, q3, 4);
        }
        return parseName(_quad1, q2, q3, i, 4);
    }
    return _parseLongName(i, q2, q3);
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseMediumName2(int,int).q3","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseMediumName2(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseMediumName2(int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseMediumName2(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseLongName(int,int,int)","Method","No Comment","private final String _parseLongName(int q, final int q2, int q3) throws IOException {
    _quadBuffer[0] = _quad1;
    _quadBuffer[1] = q2;
    _quadBuffer[2] = q3;
    // As explained above, will ignore UTF-8 encoding at this point
    final int[] codes = INPUT_CODES_LATIN1;
    int qlen = 3;
    while (true) {
        int i = _inputData.readUnsignedByte();
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 1);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 1);
        }
        q = (q << 8) | i;
        i = _inputData.readUnsignedByte();
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 2);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 2);
        }
        q = (q << 8) | i;
        i = _inputData.readUnsignedByte();
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 3);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 3);
        }
        q = (q << 8) | i;
        i = _inputData.readUnsignedByte();
        if (codes[i] != 0) {
            if (i == INT_QUOTE) {
                return findName(_quadBuffer, qlen, q, 4);
            }
            return parseEscapedName(_quadBuffer, qlen, q, i, 4);
        }
        // Nope, no end in sight. Need to grow quad array etc
        if (qlen >= _quadBuffer.length) {
            _quadBuffer = growArrayBy(_quadBuffer, qlen);
        }
        _quadBuffer[qlen++] = q;
        q = i;
    }
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseLongName(int,int,int).q","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseLongName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseLongName(int,int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseLongName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseLongName(int,int,int).q3","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseLongName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int)","Method","No Comment","private final String parseName(int q1, int ch, int lastQuadBytes) throws IOException {
    return parseEscapedName(_quadBuffer, 0, q1, ch, lastQuadBytes);
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int).ch","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int).lastQuadBytes","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int,int)","Method","No Comment","private final String parseName(int q1, int q2, int ch, int lastQuadBytes) throws IOException {
    _quadBuffer[0] = q1;
    return parseEscapedName(_quadBuffer, 1, q2, ch, lastQuadBytes);
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int,int).ch","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int,int).lastQuadBytes","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int,int,int)","Method","No Comment","private final String parseName(int q1, int q2, int q3, int ch, int lastQuadBytes) throws IOException {
    _quadBuffer[0] = q1;
    _quadBuffer[1] = q2;
    return parseEscapedName(_quadBuffer, 2, q3, ch, lastQuadBytes);
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int,int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int,int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int,int,int).q3","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int,int,int).ch","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int,int,int).lastQuadBytes","Parameter_5","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseName(int,int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseEscapedName(int[],int,int,int,int)","Method","Slower parsing method which is generally branched to when
     * an escape sequence is detected (or alternatively for long
     * names, one crossing input buffer boundary).
     * Needs to be able to handle more exceptional cases, gets slower,
     * and hence is offlined to a separate method.","protected final String parseEscapedName(int[] quads, int qlen, int currQuad, int ch, int currQuadBytes) throws IOException {
    /* 25-Nov-2008, tatu: This may seem weird, but here we do not want to worry about
         *   UTF-8 decoding yet. Rather, we'll assume that part is ok (if not it will get
         *   caught later on), and just handle quotes and backslashes here.
         */
    final int[] codes = INPUT_CODES_LATIN1;
    while (true) {
        if (codes[ch] != 0) {
            if (ch == INT_QUOTE) {
                // we are done
                break;
            }
            // Unquoted white space?
            if (ch != INT_BACKSLASH) {
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's
                 * beyond 7-bit ascii. Gets pretty messy.
                 * If this happens often, may want to use different name
                 * canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        ch = _inputData.readUnsignedByte();
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = pad(currQuad, currQuadBytes);
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","String","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseEscapedName(int[],int,int,int,int).quads","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseEscapedName(int[],int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseEscapedName(int[],int,int,int,int).qlen","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseEscapedName(int[],int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseEscapedName(int[],int,int,int,int).currQuad","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseEscapedName(int[],int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseEscapedName(int[],int,int,int,int).ch","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseEscapedName(int[],int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseEscapedName(int[],int,int,int,int).currQuadBytes","Parameter_5","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.parseEscapedName(int[],int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleOddName(int)","Method","* Method called when we see non-white space character other
     * than double quote, when expecting a field name.
     * In standard mode will just throw an exception; but
     * in non-standard modes may be able to parse name.
     *
     * @param ch First undecoded character of possible ""odd name"" to decode
     *
     * @return Name decoded, if allowed and successful
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems (invalid name)","protected String _handleOddName(int ch) throws IOException {
    if (ch == '\'' && (_features & FEAT_MASK_ALLOW_SINGLE_QUOTES) != 0) {
        return _parseAposName();
    }
    if ((_features & FEAT_MASK_ALLOW_UNQUOTED_NAMES) == 0) {
        char c = (char) _decodeCharForError(ch);
        _reportUnexpectedChar(c, ""was expecting double-quote to start field name"");
    }
    /* Also: note that although we use a different table here,
         * it does NOT handle UTF-8 decoding. It'll just pass those
         * high-bit codes as acceptable for later decoding.
         */
    final int[] codes = CharTypes.getInputCodeUtf8JsNames();
    // Also: must start with a valid character...
    if (codes[ch] != 0) {
        _reportUnexpectedChar(ch, ""was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"");
    }
    /* Ok, now; instead of ultra-optimizing parsing here (as with
         * regular JSON names), let's just use the generic ""slow""
         * variant. Can measure its impact later on if need be
         */
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    while (true) {
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        ch = _inputData.readUnsignedByte();
        if (codes[ch] != 0) {
            break;
        }
    }
    // Note: we must ""push back"" character read here for future consumption
    _nextByte = ch;
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = currQuad;
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleOddName(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleOddName(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._parseAposName()","Method","Parsing to allow optional use of non-standard single quotes.
     * Plenty of duplicated code;
     * main reason being to try to avoid slowing down fast path
     * for valid JSON -- more alternatives, more code, generally
     * bit slower execution.","protected String _parseAposName() throws IOException {
    int ch = _inputData.readUnsignedByte();
    if (ch == '\'') {
        // special case, ''
        return """";
    }
    int[] quads = _quadBuffer;
    int qlen = 0;
    int currQuad = 0;
    int currQuadBytes = 0;
    // Copied from parseEscapedFieldName, with minor mods:
    final int[] codes = INPUT_CODES_LATIN1;
    while (true) {
        if (ch == '\'') {
            break;
        }
        // additional check to skip handling of double-quotes
        if (ch != '""' && codes[ch] != 0) {
            if (ch != '\\') {
                // Unquoted white space?
                // As per [JACKSON-208], call can now return:
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeEscaped();
            }
            /* Oh crap. May need to UTF-8 (re-)encode it, if it's  beyond
                 * 7-bit ASCII. Gets pretty messy. If this happens often, may want
                 * to use different name canonicalization to avoid these hits.
                 */
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = growArrayBy(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = growArrayBy(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = growArrayBy(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
        ch = _inputData.readUnsignedByte();
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = growArrayBy(quads, quads.length);
        }
        quads[qlen++] = pad(currQuad, currQuadBytes);
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = addName(quads, qlen, currQuadBytes);
    }
    return name;
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int)","Method","No Comment","private final String findName(int q1, int lastQuadBytes) throws JsonParseException, StreamConstraintsException {
    q1 = pad(q1, lastQuadBytes);
    // Usually we'll find it from the canonical symbol table already
    String name = _symbols.findName(q1);
    if (name != null) {
        return name;
    }
    // If not, more work. We'll need add stuff to buffer
    _quadBuffer[0] = q1;
    return addName(_quadBuffer, 1, lastQuadBytes);
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int).lastQuadBytes","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int,int)","Method","No Comment","private final String findName(int q1, int q2, int lastQuadBytes) throws JsonParseException, StreamConstraintsException {
    q2 = pad(q2, lastQuadBytes);
    // Usually we'll find it from the canonical symbol table already
    String name = _symbols.findName(q1, q2);
    if (name != null) {
        return name;
    }
    // If not, more work. We'll need add stuff to buffer
    _quadBuffer[0] = q1;
    _quadBuffer[1] = q2;
    return addName(_quadBuffer, 2, lastQuadBytes);
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int,int).lastQuadBytes","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int,int,int)","Method","No Comment","private final String findName(int q1, int q2, int q3, int lastQuadBytes) throws JsonParseException, StreamConstraintsException {
    q3 = pad(q3, lastQuadBytes);
    String name = _symbols.findName(q1, q2, q3);
    if (name != null) {
        return name;
    }
    int[] quads = _quadBuffer;
    quads[0] = q1;
    quads[1] = q2;
    quads[2] = pad(q3, lastQuadBytes);
    return addName(quads, 3, lastQuadBytes);
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int,int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int,int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int,int,int).q3","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int,int,int).lastQuadBytes","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int[],int,int,int)","Method","No Comment","private final String findName(int[] quads, int qlen, int lastQuad, int lastQuadBytes) throws JsonParseException, StreamConstraintsException {
    if (qlen >= quads.length) {
        _quadBuffer = quads = growArrayBy(quads, quads.length);
    }
    quads[qlen++] = pad(lastQuad, lastQuadBytes);
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        return addName(quads, qlen, lastQuadBytes);
    }
    return name;
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int[],int,int,int).quads","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int[],int,int,int).qlen","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int[],int,int,int).lastQuad","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int[],int,int,int).lastQuadBytes","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.findName(int[],int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.addName(int[],int,int)","Method","* This is the main workhorse method used when we take a symbol
     * table miss. It needs to demultiplex individual bytes, decode
     * multi-byte chars (if any), and then construct Name instance
     * and add it to the symbol table.","private final String addName(int[] quads, int qlen, int lastQuadBytes) throws JsonParseException, StreamConstraintsException {
    /* Ok: must decode UTF-8 chars. No other validation is
         * needed, since unescaping has been done earlier as necessary
         * (as well as error reporting for unescaped control chars)
         */
    // 4 bytes per quad, except last one maybe less
    int byteLen = (qlen << 2) - 4 + lastQuadBytes;
    /* And last one is not correctly aligned (leading zero bytes instead
         * need to shift a bit, instead of trailing). Only need to shift it
         * for UTF-8 decoding; need revert for storage (since key will not
         * be aligned, to optimize lookup speed)
         */
    int lastQuad;
    if (lastQuadBytes < 4) {
        lastQuad = quads[qlen - 1];
        // 8/16/24 bit left shift
        quads[qlen - 1] = (lastQuad << ((4 - lastQuadBytes) << 3));
    } else {
        lastQuad = 0;
    }
    // Need some working space, TextBuffer works well:
    char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();
    int cix = 0;
    for (int ix = 0; ix < byteLen; ) {
        // current quad, need to shift+mask
        int ch = quads[ix >> 2];
        int byteIx = (ix & 3);
        ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;
        ++ix;
        if (ch > 127) {
            // multi-byte
            int needed;
            if ((ch & 0xE0) == 0xC0) {
                // 2 bytes (0x0080 - 0x07FF)
                ch &= 0x1F;
                needed = 1;
            } else if ((ch & 0xF0) == 0xE0) {
                // 3 bytes (0x0800 - 0xFFFF)
                ch &= 0x0F;
                needed = 2;
            } else if ((ch & 0xF8) == 0xF0) {
                // 4 bytes; double-char with surrogates and all...
                ch &= 0x07;
                needed = 3;
            } else {
                // 5- and 6-byte chars not valid xml chars
                _reportInvalidInitial(ch);
                // never really gets this far
                needed = ch = 1;
            }
            if ((ix + needed) > byteLen) {
                _reportInvalidEOF("" in field name"", JsonToken.FIELD_NAME);
            }
            // Ok, always need at least one more:
            // current quad, need to shift+mask
            int ch2 = quads[ix >> 2];
            byteIx = (ix & 3);
            ch2 = (ch2 >> ((3 - byteIx) << 3));
            ++ix;
            if ((ch2 & 0xC0) != 0x080) {
                _reportInvalidOther(ch2);
            }
            ch = (ch << 6) | (ch2 & 0x3F);
            if (needed > 1) {
                ch2 = quads[ix >> 2];
                byteIx = (ix & 3);
                ch2 = (ch2 >> ((3 - byteIx) << 3));
                ++ix;
                if ((ch2 & 0xC0) != 0x080) {
                    _reportInvalidOther(ch2);
                }
                ch = (ch << 6) | (ch2 & 0x3F);
                if (needed > 2) {
                    // 4 bytes? (need surrogates on output)
                    ch2 = quads[ix >> 2];
                    byteIx = (ix & 3);
                    ch2 = (ch2 >> ((3 - byteIx) << 3));
                    ++ix;
                    if ((ch2 & 0xC0) != 0x080) {
                        _reportInvalidOther(ch2 & 0xFF);
                    }
                    ch = (ch << 6) | (ch2 & 0x3F);
                }
            }
            if (needed > 2) {
                // surrogate pair? once again, let's output one here, one later on
                // to normalize it starting with 0x0
                ch -= 0x10000;
                if (cix >= cbuf.length) {
                    cbuf = _textBuffer.expandCurrentSegment();
                }
                cbuf[cix++] = (char) (0xD800 + (ch >> 10));
                ch = 0xDC00 | (ch & 0x03FF);
            }
        }
        if (cix >= cbuf.length) {
            cbuf = _textBuffer.expandCurrentSegment();
        }
        cbuf[cix++] = (char) ch;
    }
    // Ok. Now we have the character array, and can construct the String
    String baseName = new String(cbuf, 0, cix);
    // 5-May-2023, ckozak: [core#1015] respect CANONICALIZE_FIELD_NAMES factory config.
    if (!_symbols.isCanonicalizing()) {
        return baseName;
    }
    // And finally, un-align if necessary
    if (lastQuadBytes < 4) {
        quads[qlen - 1] = lastQuad;
    }
    return _symbols.addName(baseName, quads, qlen);
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.addName(int[],int,int).quads","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.addName(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.addName(int[],int,int).qlen","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.addName(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.addName(int[],int,int).lastQuadBytes","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.addName(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._finishString()","Method","No Comment","@Override
protected void _finishString() throws IOException {
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = INPUT_CODES_UTF8;
    final int outEnd = outBuf.length;
    do {
        int c = _inputData.readUnsignedByte();
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _textBuffer.setCurrentLength(outPtr);
                return;
            }
            _finishString2(outBuf, outPtr, c);
            return;
        }
        outBuf[outPtr++] = (char) c;
    } while (outPtr < outEnd);
    _finishString2(outBuf, outPtr, _inputData.readUnsignedByte());
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._finishAndReturnString()","Method","No Comment","private String _finishAndReturnString() throws IOException {
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = INPUT_CODES_UTF8;
    final int outEnd = outBuf.length;
    do {
        int c = _inputData.readUnsignedByte();
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                return _textBuffer.setCurrentAndReturn(outPtr);
            }
            _finishString2(outBuf, outPtr, c);
            return _textBuffer.contentsAsString();
        }
        outBuf[outPtr++] = (char) c;
    } while (outPtr < outEnd);
    _finishString2(outBuf, outPtr, _inputData.readUnsignedByte());
    return _textBuffer.contentsAsString();
}","String","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._finishString2(char[],int,int)","Method","No Comment","private final void _finishString2(char[] outBuf, int outPtr, int c) throws IOException {
    // Here we do want to do full decoding, hence:
    final int[] codes = INPUT_CODES_UTF8;
    int outEnd = outBuf.length;
    main_loop: for (; ; c = _inputData.readUnsignedByte()) {
        // Then the tight ASCII non-funny-char loop:
        while (codes[c] == 0) {
            if (outPtr >= outEnd) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
                outEnd = outBuf.length;
            }
            outBuf[outPtr++] = (char) c;
            c = _inputData.readUnsignedByte();
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                c = _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                c = _decodeUtf8_3(c);
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                    outEnd = outBuf.length;
                }
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
            outEnd = outBuf.length;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._finishString2(char[],int,int).outBuf","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._finishString2(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._finishString2(char[],int,int).outPtr","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._finishString2(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._finishString2(char[],int,int).c","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._finishString2(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipString()","Method","* Method called to skim through rest of unparsed String value,
     * if it is not needed. This can be done bit faster if contents
     * need not be stored for future access.
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","protected void _skipString() throws IOException {
    _tokenIncomplete = false;
    // Need to be fully UTF-8 aware here:
    final int[] codes = INPUT_CODES_UTF8;
    main_loop: while (true) {
        int c;
        ascii_loop: while (true) {
            c = _inputData.readUnsignedByte();
            if (codes[c] != 0) {
                break ascii_loop;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            break main_loop;
        }
        switch(codes[c]) {
            case // backslash
            1:
                _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                _skipUtf8_2();
                break;
            case // 3-byte UTF
            3:
                _skipUtf8_3();
                break;
            case // 4-byte UTF
            4:
                _skipUtf8_4();
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleUnexpectedValue(int)","Method","* Method for handling cases where first non-space character
     * of an expected value token is not legal for standard JSON content.
     *
     * @param c First undecoded character of unexpected (but possibly ultimate accepted) value
     *
     * @return Token that was successfully decoded (if successful)
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","protected JsonToken _handleUnexpectedValue(int c) throws IOException {
    // Most likely an error, unless we are to allow single-quote-strings
    switch(c) {
        case ']':
            if (!_parsingContext.inArray()) {
                break;
            }
        // fall through
        case ',':
            /* !!! TODO: 08-May-2016, tatu: To support `Feature.ALLOW_MISSING_VALUES` would
             *    need handling here...
             */
            // 11-May-2020, tatu: [core#616] No commas in root level
            if (!_parsingContext.inRoot()) {
                if ((_features & FEAT_MASK_ALLOW_MISSING) != 0) {
                    //               _inputPtr--;
                    _nextByte = c;
                    return JsonToken.VALUE_NULL;
                }
            }
        // fall through
        case '}':
            // Error: neither is valid at this point; valid closers have
            // been handled earlier
            _reportUnexpectedChar(c, ""expected a value"");
        case '\'':
            if ((_features & FEAT_MASK_ALLOW_SINGLE_QUOTES) != 0) {
                return _handleApos();
            }
            break;
        case 'N':
            _matchToken(""NaN"", 1);
            if ((_features & FEAT_MASK_NON_NUM_NUMBERS) != 0) {
                return resetAsNaN(""NaN"", Double.NaN);
            }
            _reportError(""Non-standard token 'NaN': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow"");
            break;
        case 'I':
            _matchToken(""Infinity"", 1);
            if ((_features & FEAT_MASK_NON_NUM_NUMBERS) != 0) {
                return resetAsNaN(""Infinity"", Double.POSITIVE_INFINITY);
            }
            _reportError(""Non-standard token 'Infinity': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow"");
            break;
        case // note: '-' is taken as number
        '+':
            return _handleInvalidNumberStart(_inputData.readUnsignedByte(), false, true);
    }
    // [core#77] Try to decode most likely token
    if (Character.isJavaIdentifierStart(c)) {
        _reportInvalidToken(c, """" + ((char) c), _validJsonTokenList());
    }
    // but if it doesn't look like a token:
    _reportUnexpectedChar(c, ""expected a valid value "" + _validJsonValueList());
    return null;
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleUnexpectedValue(int).c","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleUnexpectedValue(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleApos()","Method","No Comment","protected JsonToken _handleApos() throws IOException {
    int c = 0;
    // Otherwise almost verbatim copy of _finishString()
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    // Here we do want to do full decoding, hence:
    final int[] codes = INPUT_CODES_UTF8;
    main_loop: while (true) {
        // Then the tight ascii non-funny-char loop:
        ascii_loop: while (true) {
            int outEnd = outBuf.length;
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
                outEnd = outBuf.length;
            }
            do {
                c = _inputData.readUnsignedByte();
                if (c == '\'') {
                    break main_loop;
                }
                if ((codes[c] != 0) && // 13-Oct-2021, tatu: [core#721] Alas, regular quote is included as
                //    special, need to ignore here
                (c != INT_QUOTE)) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            } while (outPtr < outEnd);
        }
        switch(codes[c]) {
            case // backslash
            1:
                c = _decodeEscaped();
                break;
            case // 2-byte UTF
            2:
                c = _decodeUtf8_2(c);
                break;
            case // 3-byte UTF
            3:
                c = _decodeUtf8_3(c);
                break;
            case // 4-byte UTF
            4:
                c = _decodeUtf8_4(c);
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    _throwUnquotedSpace(c, ""string value"");
                }
                // Is this good enough error message?
                _reportInvalidChar(c);
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleInvalidNumberStart(int,boolean)","Method","* Method called if expected numeric value (due to leading sign) does not
     * look like a number","protected JsonToken _handleInvalidNumberStart(int ch, final boolean neg) throws IOException {
    return _handleInvalidNumberStart(ch, neg, false);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleInvalidNumberStart(int,boolean).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleInvalidNumberStart(int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleInvalidNumberStart(int,boolean).neg","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleInvalidNumberStart(int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleInvalidNumberStart(int,boolean,boolean)","Method","No Comment","protected JsonToken _handleInvalidNumberStart(int ch, final boolean neg, final boolean hasSign) throws IOException {
    while (ch == 'I') {
        ch = _inputData.readUnsignedByte();
        String match;
        if (ch == 'N') {
            match = neg ? ""-INF"" : ""+INF"";
        } else if (ch == 'n') {
            match = neg ? ""-Infinity"" : ""+Infinity"";
        } else {
            break;
        }
        _matchToken(match, 3);
        if ((_features & FEAT_MASK_NON_NUM_NUMBERS) != 0) {
            return resetAsNaN(match, neg ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);
        }
        _reportError(""Non-standard token '"" + match + ""': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow"");
    }
    if (!isEnabled(JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS.mappedFeature()) && hasSign && !neg) {
        _reportUnexpectedNumberChar('+', ""JSON spec does not allow numbers to have plus signs: enable `JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS` to allow"");
    }
    final String message = neg ? ""expected digit (0-9) to follow minus sign, for valid numeric value"" : ""expected digit (0-9) for valid numeric value"";
    _reportUnexpectedNumberChar(ch, message);
    return null;
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleInvalidNumberStart(int,boolean,boolean).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleInvalidNumberStart(int,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleInvalidNumberStart(int,boolean,boolean).neg","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleInvalidNumberStart(int,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleInvalidNumberStart(int,boolean,boolean).hasSign","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._handleInvalidNumberStart(int,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._matchToken(String,int)","Method","No Comment","protected final void _matchToken(String matchStr, int i) throws IOException {
    final int len = matchStr.length();
    do {
        int ch = _inputData.readUnsignedByte();
        if (ch != matchStr.charAt(i)) {
            _reportInvalidToken(ch, matchStr.substring(0, i));
        }
    } while (++i < len);
    int ch = _inputData.readUnsignedByte();
    if (ch >= '0' && ch != ']' && ch != '}') {
        // expected/allowed chars
        _checkMatchEnd(matchStr, i, ch);
    }
    _nextByte = ch;
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._matchToken(String,int).matchStr","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._matchToken(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._matchToken(String,int).i","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._matchToken(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._checkMatchEnd(String,int,int)","Method","No Comment","private final void _checkMatchEnd(String matchStr, int i, int ch) throws IOException {
    // but actually only alphanums are problematic
    char c = (char) _decodeCharForError(ch);
    if (Character.isJavaIdentifierPart(c)) {
        _reportInvalidToken(c, matchStr.substring(0, i));
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._checkMatchEnd(String,int,int).matchStr","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._checkMatchEnd(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._checkMatchEnd(String,int,int).i","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._checkMatchEnd(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._checkMatchEnd(String,int,int).ch","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._checkMatchEnd(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipWS()","Method","No Comment","private final int _skipWS() throws IOException {
    int i = _nextByte;
    if (i < 0) {
        i = _inputData.readUnsignedByte();
    } else {
        _nextByte = -1;
    }
    while (true) {
        if (i > INT_SPACE) {
            if (i == INT_SLASH || i == INT_HASH) {
                return _skipWSComment(i);
            }
            return i;
        } else {
            // 06-May-2016, tatu: Could verify validity of WS, but for now why bother.
            //   ... but line number is useful thingy
            if (i == INT_CR || i == INT_LF) {
                ++_currInputRow;
            }
        }
        i = _inputData.readUnsignedByte();
    }
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipWSOrEnd()","Method","* Alternative to {@link #_skipWS} that handles possible {@link EOFException}
     * caused by trying to read past the end of the {@link DataInput}.
     *
     * @since 2.9","private final int _skipWSOrEnd() throws IOException {
    int i = _nextByte;
    if (i < 0) {
        try {
            i = _inputData.readUnsignedByte();
        } catch (EOFException e) {
            return _eofAsNextChar();
        }
    } else {
        _nextByte = -1;
    }
    while (true) {
        if (i > INT_SPACE) {
            if (i == INT_SLASH || i == INT_HASH) {
                return _skipWSComment(i);
            }
            return i;
        } else {
            // 06-May-2016, tatu: Could verify validity of WS, but for now why bother.
            //   ... but line number is useful thingy
            if (i == INT_CR || i == INT_LF) {
                ++_currInputRow;
            }
        }
        try {
            i = _inputData.readUnsignedByte();
        } catch (EOFException e) {
            return _eofAsNextChar();
        }
    }
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipWSComment(int)","Method","No Comment","private final int _skipWSComment(int i) throws IOException {
    while (true) {
        if (i > INT_SPACE) {
            if (i == INT_SLASH) {
                _skipComment();
            } else if (i == INT_HASH) {
                if (!_skipYAMLComment()) {
                    return i;
                }
            } else {
                return i;
            }
        } else {
            // 06-May-2016, tatu: Could verify validity of WS, but for now why bother.
            //   ... but line number is useful thingy
            if (i == INT_CR || i == INT_LF) {
                ++_currInputRow;
            }
            /*
                if ((i != INT_SPACE) && (i != INT_LF) && (i != INT_CR)) {
                    _throwInvalidSpace(i);
                }
                */
        }
        i = _inputData.readUnsignedByte();
    }
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipWSComment(int).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipWSComment(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipColon()","Method","No Comment","private final int _skipColon() throws IOException {
    int i = _nextByte;
    if (i < 0) {
        i = _inputData.readUnsignedByte();
    } else {
        _nextByte = -1;
    }
    // Fast path: colon with optional single-space/tab before and/or after:
    if (i == INT_COLON) {
        // common case, no leading space
        i = _inputData.readUnsignedByte();
        if (i > INT_SPACE) {
            // nor trailing
            if (i == INT_SLASH || i == INT_HASH) {
                return _skipColon2(i, true);
            }
            return i;
        }
        if (i == INT_SPACE || i == INT_TAB) {
            i = _inputData.readUnsignedByte();
            if (i > INT_SPACE) {
                if (i == INT_SLASH || i == INT_HASH) {
                    return _skipColon2(i, true);
                }
                return i;
            }
        }
        // true -> skipped colon
        return _skipColon2(i, true);
    }
    if (i == INT_SPACE || i == INT_TAB) {
        i = _inputData.readUnsignedByte();
    }
    if (i == INT_COLON) {
        i = _inputData.readUnsignedByte();
        if (i > INT_SPACE) {
            if (i == INT_SLASH || i == INT_HASH) {
                return _skipColon2(i, true);
            }
            return i;
        }
        if (i == INT_SPACE || i == INT_TAB) {
            i = _inputData.readUnsignedByte();
            if (i > INT_SPACE) {
                if (i == INT_SLASH || i == INT_HASH) {
                    return _skipColon2(i, true);
                }
                return i;
            }
        }
        return _skipColon2(i, true);
    }
    return _skipColon2(i, false);
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipColon2(int,boolean)","Method","No Comment","private final int _skipColon2(int i, boolean gotColon) throws IOException {
    for (; ; i = _inputData.readUnsignedByte()) {
        if (i > INT_SPACE) {
            if (i == INT_SLASH) {
                _skipComment();
                continue;
            }
            if (i == INT_HASH) {
                if (_skipYAMLComment()) {
                    continue;
                }
            }
            if (gotColon) {
                return i;
            }
            if (i != INT_COLON) {
                _reportUnexpectedChar(i, ""was expecting a colon to separate field name and value"");
            }
            gotColon = true;
        } else {
            // 06-May-2016, tatu: Could verify validity of WS, but for now why bother.
            //   ... but line number is useful thingy
            if (i == INT_CR || i == INT_LF) {
                ++_currInputRow;
            }
        }
    }
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipColon2(int,boolean).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipColon2(int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipColon2(int,boolean).gotColon","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipColon2(int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipComment()","Method","No Comment","private final void _skipComment() throws IOException {
    if ((_features & FEAT_MASK_ALLOW_JAVA_COMMENTS) == 0) {
        _reportUnexpectedChar('/', ""maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)"");
    }
    int c = _inputData.readUnsignedByte();
    if (c == '/') {
        _skipLine();
    } else if (c == '*') {
        _skipCComment();
    } else {
        _reportUnexpectedChar(c, ""was expecting either '*' or '/' for a comment"");
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipCComment()","Method","No Comment","private final void _skipCComment() throws IOException {
    // Need to be UTF-8 aware here to decode content (for skipping)
    final int[] codes = CharTypes.getInputCodeComment();
    int i = _inputData.readUnsignedByte();
    // Ok: need the matching '*/'
    main_loop: while (true) {
        int code = codes[i];
        if (code != 0) {
            switch(code) {
                case '*':
                    i = _inputData.readUnsignedByte();
                    if (i == INT_SLASH) {
                        return;
                    }
                    continue main_loop;
                case INT_LF:
                case INT_CR:
                    ++_currInputRow;
                    break;
                case // 2-byte UTF
                2:
                    _skipUtf8_2();
                    break;
                case // 3-byte UTF
                3:
                    _skipUtf8_3();
                    break;
                case // 4-byte UTF
                4:
                    _skipUtf8_4();
                    break;
                default:
                    // e.g. -1
                    // Is this good enough error message?
                    _reportInvalidChar(i);
            }
        }
        i = _inputData.readUnsignedByte();
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipYAMLComment()","Method","No Comment","private final boolean _skipYAMLComment() throws IOException {
    if ((_features & FEAT_MASK_ALLOW_YAML_COMMENTS) == 0) {
        return false;
    }
    _skipLine();
    return true;
}","boolean","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipLine()","Method","* Method for skipping contents of an input line; usually for CPP
     * and YAML style comments.","private final void _skipLine() throws IOException {
    // Ok: need to find EOF or linefeed
    final int[] codes = CharTypes.getInputCodeComment();
    while (true) {
        int i = _inputData.readUnsignedByte();
        int code = codes[i];
        if (code != 0) {
            switch(code) {
                case INT_LF:
                case INT_CR:
                    ++_currInputRow;
                    return;
                case // nop for these comments
                '*':
                    break;
                case // 2-byte UTF
                2:
                    _skipUtf8_2();
                    break;
                case // 3-byte UTF
                3:
                    _skipUtf8_3();
                    break;
                case // 4-byte UTF
                4:
                    _skipUtf8_4();
                    break;
                default:
                    // e.g. -1
                    if (code < 0) {
                        // Is this good enough error message?
                        _reportInvalidChar(i);
                    }
            }
        }
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeEscaped()","Method","No Comment","@Override
protected char _decodeEscaped() throws IOException {
    int c = _inputData.readUnsignedByte();
    switch(c) {
        // First, ones that are mapped
        case 'b':
            return '\b';
        case 't':
            return '\t';
        case 'n':
            return '\n';
        case 'f':
            return '\f';
        case 'r':
            return '\r';
        // And these are to be returned as they are
        case '""':
        case '/':
        case '\\':
            return (char) c;
        case // and finally hex-escaped
        'u':
            break;
        default:
            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));
    }
    // Ok, a hex escape. Need 4 characters
    int value = 0;
    for (int i = 0; i < 4; ++i) {
        int ch = _inputData.readUnsignedByte();
        int digit = CharTypes.charToHex(ch);
        if (digit < 0) {
            _reportUnexpectedChar(ch, ""expected a hex-digit for character escape sequence"");
        }
        value = (value << 4) | digit;
    }
    return (char) value;
}","char","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeCharForError(int)","Method","No Comment","protected int _decodeCharForError(int firstByte) throws IOException {
    int c = firstByte & 0xFF;
    if (c > 0x7F) {
        // if >= 0, is ascii and fine as is
        int needed;
        // Ok; if we end here, we got multi-byte combination
        if ((c & 0xE0) == 0xC0) {
            // 2 bytes (0x0080 - 0x07FF)
            c &= 0x1F;
            needed = 1;
        } else if ((c & 0xF0) == 0xE0) {
            // 3 bytes (0x0800 - 0xFFFF)
            c &= 0x0F;
            needed = 2;
        } else if ((c & 0xF8) == 0xF0) {
            // 4 bytes; double-char with surrogates and all...
            c &= 0x07;
            needed = 3;
        } else {
            _reportInvalidInitial(c & 0xFF);
            // never gets here
            needed = 1;
        }
        int d = _inputData.readUnsignedByte();
        if ((d & 0xC0) != 0x080) {
            _reportInvalidOther(d & 0xFF);
        }
        c = (c << 6) | (d & 0x3F);
        if (needed > 1) {
            // needed == 1 means 2 bytes total
            // 3rd byte
            d = _inputData.readUnsignedByte();
            if ((d & 0xC0) != 0x080) {
                _reportInvalidOther(d & 0xFF);
            }
            c = (c << 6) | (d & 0x3F);
            if (needed > 2) {
                // 4 bytes? (need surrogates)
                d = _inputData.readUnsignedByte();
                if ((d & 0xC0) != 0x080) {
                    _reportInvalidOther(d & 0xFF);
                }
                c = (c << 6) | (d & 0x3F);
            }
        }
    }
    return c;
}","int","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeCharForError(int).firstByte","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeCharForError(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeUtf8_2(int)","Method","No Comment","private final int _decodeUtf8_2(int c) throws IOException {
    int d = _inputData.readUnsignedByte();
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF);
    }
    return ((c & 0x1F) << 6) | (d & 0x3F);
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeUtf8_2(int).c","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeUtf8_2(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeUtf8_3(int)","Method","No Comment","private final int _decodeUtf8_3(int c1) throws IOException {
    c1 &= 0x0F;
    int d = _inputData.readUnsignedByte();
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF);
    }
    int c = (c1 << 6) | (d & 0x3F);
    d = _inputData.readUnsignedByte();
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF);
    }
    c = (c << 6) | (d & 0x3F);
    return c;
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeUtf8_3(int).c1","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeUtf8_3(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeUtf8_4(int)","Method","* @return Character value <b>minus 0x10000</c>; this so that caller
     *    can readily expand it to actual surrogates","private final int _decodeUtf8_4(int c) throws IOException {
    int d = _inputData.readUnsignedByte();
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF);
    }
    c = ((c & 0x07) << 6) | (d & 0x3F);
    d = _inputData.readUnsignedByte();
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF);
    }
    c = (c << 6) | (d & 0x3F);
    d = _inputData.readUnsignedByte();
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF);
    }
    /* note: won't change it to negative here, since caller
         * already knows it'll need a surrogate
         */
    return ((c << 6) | (d & 0x3F)) - 0x10000;
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeUtf8_4(int).c","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeUtf8_4(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipUtf8_2()","Method","No Comment","private final void _skipUtf8_2() throws IOException {
    int c = _inputData.readUnsignedByte();
    if ((c & 0xC0) != 0x080) {
        _reportInvalidOther(c & 0xFF);
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipUtf8_3()","Method","Alas, can't heavily optimize skipping, since we still have to
     * do validity checks...","private final void _skipUtf8_3() throws IOException {
    //c &= 0x0F;
    int c = _inputData.readUnsignedByte();
    if ((c & 0xC0) != 0x080) {
        _reportInvalidOther(c & 0xFF);
    }
    c = _inputData.readUnsignedByte();
    if ((c & 0xC0) != 0x080) {
        _reportInvalidOther(c & 0xFF);
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._skipUtf8_4()","Method","No Comment","private final void _skipUtf8_4() throws IOException {
    int d = _inputData.readUnsignedByte();
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF);
    }
    d = _inputData.readUnsignedByte();
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF);
    }
    d = _inputData.readUnsignedByte();
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF);
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidToken(int,String)","Method","No Comment","protected void _reportInvalidToken(int ch, String matchedPart) throws IOException {
    _reportInvalidToken(ch, matchedPart, _validJsonTokenList());
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidToken(int,String).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidToken(int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidToken(int,String).matchedPart","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidToken(int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidToken(int,String,String)","Method","No Comment","protected void _reportInvalidToken(int ch, String matchedPart, String msg) throws IOException {
    StringBuilder sb = new StringBuilder(matchedPart);
    /* Let's just try to find what appears to be the token, using
          * regular Java identifier character rules. It's just a heuristic,
          * nothing fancy here (nor fast).
          */
    while (true) {
        char c = (char) _decodeCharForError(ch);
        if (!Character.isJavaIdentifierPart(c)) {
            break;
        }
        sb.append(c);
        ch = _inputData.readUnsignedByte();
    }
    _reportError(""Unrecognized token '"" + sb.toString() + ""': was expecting "" + msg);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidToken(int,String,String).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidToken(int,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidToken(int,String,String).matchedPart","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidToken(int,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidToken(int,String,String).msg","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidToken(int,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidChar(int)","Method","No Comment","protected void _reportInvalidChar(int c) throws JsonParseException {
    // Either invalid WS or illegal UTF-8 start char
    if (c < INT_SPACE) {
        _throwInvalidSpace(c);
    }
    _reportInvalidInitial(c);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidChar(int).c","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidChar(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidInitial(int)","Method","No Comment","protected void _reportInvalidInitial(int mask) throws JsonParseException {
    _reportError(""Invalid UTF-8 start byte 0x"" + Integer.toHexString(mask));
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidInitial(int).mask","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidInitial(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidOther(int)","Method","No Comment","private void _reportInvalidOther(int mask) throws JsonParseException {
    _reportError(""Invalid UTF-8 middle byte 0x"" + Integer.toHexString(mask));
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidOther(int).mask","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._reportInvalidOther(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeBase64(Base64Variant)","Method","* Efficient handling for incremental parsing of base64-encoded
     * textual content.
     *
     * @param b64variant Type of base64 encoding expected in context
     *
     * @return Fully decoded value of base64 content
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems (invalid content)","@SuppressWarnings(""resource"")
protected final byte[] _decodeBase64(Base64Variant b64variant) throws IOException {
    ByteArrayBuilder builder = _getByteArrayBuilder();
    //main_loop:
    while (true) {
        // first, we'll skip preceding white space, if any
        int ch;
        do {
            ch = _inputData.readUnsignedByte();
        } while (ch <= INT_SPACE);
        int bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            // reached the end, fair and square?
            if (ch == INT_QUOTE) {
                return builder.toByteArray();
            }
            bits = _decodeBase64Escape(b64variant, ch, 0);
            if (bits < 0) {
                // white space to skip
                continue;
            }
        }
        int decodedData = bits;
        // then second base64 char; can't get padding yet, nor ws
        ch = _inputData.readUnsignedByte();
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            bits = _decodeBase64Escape(b64variant, ch, 1);
        }
        decodedData = (decodedData << 6) | bits;
        // third base64 char; can be padding, but not ws
        ch = _inputData.readUnsignedByte();
        bits = b64variant.decodeBase64Char(ch);
        // First branch: can get padding (-> 1 byte)
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // could also just be 'missing'  padding
                if (ch == INT_QUOTE) {
                    decodedData >>= 4;
                    builder.append(decodedData);
                    if (b64variant.requiresPaddingOnRead()) {
                        _handleBase64MissingPadding(b64variant);
                    }
                    return builder.toByteArray();
                }
                bits = _decodeBase64Escape(b64variant, ch, 2);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                ch = _inputData.readUnsignedByte();
                if (!b64variant.usesPaddingChar(ch)) {
                    if ((ch != INT_BACKSLASH) || _decodeBase64Escape(b64variant, ch, 3) != Base64Variant.BASE64_VALUE_PADDING) {
                        throw reportInvalidBase64Char(b64variant, ch, 3, ""expected padding character '"" + b64variant.getPaddingChar() + ""'"");
                    }
                }
                // Got 12 bits, only need 8, need to shift
                decodedData >>= 4;
                builder.append(decodedData);
                continue;
            }
        }
        // Nope, 2 or 3 bytes
        decodedData = (decodedData << 6) | bits;
        // fourth and last base64 char; can be padding, but not ws
        ch = _inputData.readUnsignedByte();
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // could also just be 'missing'  padding
                if (ch == INT_QUOTE) {
                    decodedData >>= 2;
                    builder.appendTwoBytes(decodedData);
                    if (b64variant.requiresPaddingOnRead()) {
                        _handleBase64MissingPadding(b64variant);
                    }
                    return builder.toByteArray();
                }
                bits = _decodeBase64Escape(b64variant, ch, 3);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                /* With padding we only get 2 bytes; but we have
                     * to shift it a bit so it is identical to triplet
                     * case with partial output.
                     * 3 chars gives 3x6 == 18 bits, of which 2 are
                     * dummies, need to discard:
                     */
                decodedData >>= 2;
                builder.appendTwoBytes(decodedData);
                continue;
            }
        }
        // otherwise, our triplet is now complete
        decodedData = (decodedData << 6) | bits;
        builder.appendThreeBytes(decodedData);
    }
}","byte[]","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeBase64(Base64Variant).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._decodeBase64(Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.currentLocation()","Method","No Comment","@Override
public JsonLocation currentLocation() {
    // No column tracking since we do not have pointers, DataInput has no offset
    final int col = -1;
    return new JsonLocation(_contentReference(), -1L, -1L, _currInputRow, col);
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._currentLocationMinusOne()","Method","Since we only know row, may as well return currentLocation()","// @since 2.17
@Override
protected JsonLocation _currentLocationMinusOne() {
    return currentLocation();
}","JsonLocation","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.currentTokenLocation()","Method","No Comment","@Override
public JsonLocation currentTokenLocation() {
    // 03-Jan-2020, tatu: Should probably track this, similar to how
    //   streaming parsers do it, but... not done yet
    //        if (_currToken == JsonToken.FIELD_NAME) {
    //           return new JsonLocation(_getSourceReference(),
    //                    -1L, -1L, _nameStartRow, _nameStartCol);
    //        }
    // No column tracking since we do not have pointers, DataInput has no offset
    return new JsonLocation(_contentReference(), -1L, -1L, _tokenInputRow, -1);
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._closeScope(int)","Method","No Comment","private void _closeScope(int i) throws IOException {
    if (i == INT_RBRACKET) {
        if (!_parsingContext.inArray()) {
            _reportMismatchedEndMarker(i, '}');
        }
        _parsingContext = _parsingContext.clearAndGetParent();
        _updateToken(JsonToken.END_ARRAY);
    }
    if (i == INT_RCURLY) {
        if (!_parsingContext.inObject()) {
            _reportMismatchedEndMarker(i, ']');
        }
        _parsingContext = _parsingContext.clearAndGetParent();
        _updateToken(JsonToken.END_OBJECT);
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._closeScope(int).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._closeScope(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.pad(int,int)","Method","* Helper method needed to fix [core#148], masking of 0x00 character","private final static int pad(int q, int bytes) {
    return (bytes == 4) ? q : (q | (-1 << (bytes << 3)));
}","int","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.pad(int,int).q","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.pad(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.pad(int,int).bytes","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.pad(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.<init>(IOContext,int,DataInput,ObjectCodec,ByteQuadsCanonicalizer,int)","Constructor","No Comment","public UTF8DataInputJsonParser(IOContext ctxt, int features, DataInput inputData, ObjectCodec codec, ByteQuadsCanonicalizer sym, int firstByte) {
    super(ctxt, features, codec);
    _symbols = sym;
    _inputData = inputData;
    _nextByte = firstByte;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.<init>(IOContext,int,DataInput,ObjectCodec,ByteQuadsCanonicalizer,int).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.<init>(IOContext,int,DataInput,ObjectCodec,ByteQuadsCanonicalizer,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.<init>(IOContext,int,DataInput,ObjectCodec,ByteQuadsCanonicalizer,int).features","Parameter_2","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.<init>(IOContext,int,DataInput,ObjectCodec,ByteQuadsCanonicalizer,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.<init>(IOContext,int,DataInput,ObjectCodec,ByteQuadsCanonicalizer,int).inputData","Parameter_3","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.<init>(IOContext,int,DataInput,ObjectCodec,ByteQuadsCanonicalizer,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.<init>(IOContext,int,DataInput,ObjectCodec,ByteQuadsCanonicalizer,int).codec","Parameter_4","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.<init>(IOContext,int,DataInput,ObjectCodec,ByteQuadsCanonicalizer,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.<init>(IOContext,int,DataInput,ObjectCodec,ByteQuadsCanonicalizer,int).sym","Parameter_5","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.<init>(IOContext,int,DataInput,ObjectCodec,ByteQuadsCanonicalizer,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.<init>(IOContext,int,DataInput,ObjectCodec,ByteQuadsCanonicalizer,int).firstByte","Parameter_6","Belong to com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.<init>(IOContext,int,DataInput,ObjectCodec,ByteQuadsCanonicalizer,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature","Enum","* Token reader (parser) features specific to JSON backend.
 * Eventual replacement for JSON-specific {@link com.fasterxml.jackson.core.JsonParser.Feature}s.
 *
 * @since 2.10","Enum do not obtain Source Code","No return type","public ","enum has no extends","com.fasterxml.jackson.core.FormatFeature"
"com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_JAVA_COMMENTS","Enum Constant","* Feature that determines whether parser will allow use
     * of Java/C/C++ style comments (both '/'+'*' and
     * '//' varieties) within parsed content or not.
     *<p>
     * Since JSON specification does not mention comments as legal
     * construct,
     * this is a non-standard feature; however, in the wild
     * this is extensively used. As such, feature is
     * <b>disabled by default</b> for parsers and must be
     * explicitly enabled.","ALLOW_JAVA_COMMENTS(false, JsonParser.Feature.ALLOW_COMMENTS)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_YAML_COMMENTS","Enum Constant","* Feature that determines whether parser will allow use
     * of YAML comments, ones starting with '#' and continuing
     * until the end of the line. This commenting style is common
     * with scripting languages as well.
     *<p>
     * Since JSON specification does not mention comments as legal
     * construct,
     * this is a non-standard feature. As such, feature is
     * <b>disabled by default</b> for parsers and must be
     * explicitly enabled.","ALLOW_YAML_COMMENTS(false, JsonParser.Feature.ALLOW_YAML_COMMENTS)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_SINGLE_QUOTES","Enum Constant","* Feature that determines whether parser will allow use
     * of single quotes (apostrophe, character '\'') for
     * quoting Strings (names and String values). If so,
     * this is in addition to other acceptable markers.
     *<p>
     * Since JSON specification requires use of double quotes for
     * field names,
     * this is a non-standard feature, and as such disabled by default.","ALLOW_SINGLE_QUOTES(false, JsonParser.Feature.ALLOW_SINGLE_QUOTES)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES","Enum Constant","* Feature that determines whether parser will allow use
     * of unquoted field names (which is allowed by Javascript,
     * but not by JSON specification).
     *<p>
     * Since JSON specification requires use of double quotes for
     * field names,
     * this is a non-standard feature, and as such disabled by default.","ALLOW_UNQUOTED_FIELD_NAMES(false, JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS","Enum Constant","* Feature that determines whether parser will allow
     * JSON Strings to contain unescaped control characters
     * (ASCII characters with value less than 32, including
     * tab and line feed characters) or not.
     * If feature is set false, an exception is thrown if such a
     * character is encountered.
     *<p>
     * Since JSON specification requires quoting for all control characters,
     * this is a non-standard feature, and as such disabled by default.","@SuppressWarnings(""deprecation"")
ALLOW_UNESCAPED_CONTROL_CHARS(false, JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER","Enum Constant","* Feature that can be enabled to accept quoting of all character
     * using backslash quoting mechanism: if not enabled, only characters
     * that are explicitly listed by JSON specification can be thus
     * escaped (see JSON spec for small list of these characters)
     *<p>
     * Since JSON specification requires quoting for all control characters,
     * this is a non-standard feature, and as such disabled by default.","@SuppressWarnings(""deprecation"")
ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER(false, JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS","Enum Constant","* Feature that determines whether parser will allow
     * JSON integral numbers to start with additional (ignorable)
     * zeroes (like: 000001). If enabled, no exception is thrown, and extra
     * nulls are silently ignored (and not included in textual representation
     * exposed via {@link JsonParser#getText}).
     *<p>
     * Since JSON specification does not allow leading zeroes,
     * this is a non-standard feature, and as such disabled by default.","@SuppressWarnings(""deprecation"")
ALLOW_LEADING_ZEROS_FOR_NUMBERS(false, JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS","Enum Constant","* Feature that determines whether parser will allow
     * JSON decimal numbers to start with a plus sign
     * (like: +123). If enabled, no exception is thrown, and the number
     * is parsed as though a leading sign had not been present.
     *<p>
     * Since JSON specification does not allow leading plus signs,
     * this is a non-standard feature, and as such disabled by default.
     *
     * @since 2.14","@SuppressWarnings(""deprecation"")
ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS(false, JsonParser.Feature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS","Enum Constant","* Feature that determines whether parser will allow
     * JSON decimal numbers to start with a decimal point
     * (like: .123). If enabled, no exception is thrown, and the number
     * is parsed as though a leading 0 had been present.
     *<p>
     * Since JSON specification does not allow leading decimal points,
     * this is a non-standard feature, and as such disabled by default.
     *
     * @since 2.11","@SuppressWarnings(""deprecation"")
ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS(false, JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS","Enum Constant","* Feature that determines whether parser will allow
     * JSON decimal numbers to end with a decimal point
     * (like: 123.). If enabled, no exception is thrown, and the number
     * is parsed as though the trailing decimal point had not been present.
     *<p>
     * Since JSON specification does not allow trailing decimal points,
     * this is a non-standard feature, and as such disabled by default.
     *
     * @since 2.14","@SuppressWarnings(""deprecation"")
ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS(false, JsonParser.Feature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS","Enum Constant","* Feature that allows parser to recognize set of
     * ""Not-a-Number"" (NaN) tokens as legal floating number
     * values (similar to how many other data formats and
     * programming language source code allows it).
     * Specific subset contains values that
     * <a href=""http://www.w3.org/TR/xmlschema-2/"">XML Schema</a>
     * (see section 3.2.4.1, Lexical Representation)
     * allows (tokens are quoted contents, not including quotes):
     *<ul>
     *  <li>""INF"" (for positive infinity), as well as alias of ""Infinity""
     *  <li>""-INF"" (for negative infinity), alias ""-Infinity""
     *  <li>""NaN"" (for other not-a-numbers, like result of division by zero)
     *</ul>
     *<p>
     * Since JSON specification does not allow use of such values,
     * this is a non-standard feature, and as such disabled by default.","@SuppressWarnings(""deprecation"")
ALLOW_NON_NUMERIC_NUMBERS(false, JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_MISSING_VALUES","Enum Constant","* Feature allows the support for ""missing"" values in a JSON array: missing
     * value meaning sequence of two commas, without value in-between but only
     * optional white space.
     * Enabling this feature will expose ""missing"" values as {@link JsonToken#VALUE_NULL}
     * tokens, which typically become Java nulls in arrays and {@link java.util.Collection}
     * in data-binding.
     * <p>
     * For example, enabling this feature will represent a JSON array <code>[""value1"",,""value3"",]</code>
     * as <code>[""value1"", null, ""value3"", null]</code>
     * <p>
     * Since the JSON specification does not allow missing values this is a non-compliant JSON
     * feature and is disabled by default.","@SuppressWarnings(""deprecation"")
ALLOW_MISSING_VALUES(false, JsonParser.Feature.ALLOW_MISSING_VALUES)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_TRAILING_COMMA","Enum Constant","* Feature that determines whether {@link JsonParser} will allow for a single trailing
     * comma following the final value (in an Array) or member (in an Object). These commas
     * will simply be ignored.
     * <p>
     * For example, when this feature is enabled, <code>[true,true,]</code> is equivalent to
     * <code>[true, true]</code> and <code>{""a"": true,}</code> is equivalent to
     * <code>{""a"": true}</code>.
     * <p>
     * When combined with <code>ALLOW_MISSING_VALUES</code>, this feature takes priority, and
     * the final trailing comma in an array declaration does not imply a missing
     * (<code>null</code>) value. For example, when both <code>ALLOW_MISSING_VALUES</code>
     * and <code>ALLOW_TRAILING_COMMA</code> are enabled, <code>[true,true,]</code> is
     * equivalent to <code>[true, true]</code>, and <code>[true,true,,]</code> is equivalent to
     * <code>[true, true, null]</code>.
     * <p>
     * Since the JSON specification does not permit trailing commas, this is a non-standard
     * feature, and as such disabled by default.","@SuppressWarnings(""deprecation"")
ALLOW_TRAILING_COMMA(false, JsonParser.Feature.ALLOW_TRAILING_COMMA)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.collectDefaults()","Method","* Method that calculates bit set (flags) of all features that
     * are enabled by default.
     *
     * @return Bit mask of all features that are enabled by default","public static int collectDefaults() {
    int flags = 0;
    for (JsonReadFeature f : values()) {
        if (f.enabledByDefault()) {
            flags |= f.getMask();
        }
    }
    return flags;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.enabledByDefault()","Method","No Comment","@Override
public boolean enabledByDefault() {
    return _defaultState;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.getMask()","Method","No Comment","@Override
public int getMask() {
    return _mask;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.enabledIn(int)","Method","No Comment","@Override
public boolean enabledIn(int flags) {
    return (flags & _mask) != 0;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.enabledIn(int).flags","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonReadFeature.enabledIn(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.mappedFeature()","Method","No Comment","public JsonParser.Feature mappedFeature() {
    return _mappedFeature;
}","JsonParser.Feature","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.<init>(boolean,JsonParser.Feature)","Constructor","No Comment","private JsonReadFeature(boolean defaultState, JsonParser.Feature mapTo) {
    _defaultState = defaultState;
    _mask = (1 << ordinal());
    _mappedFeature = mapTo;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.<init>(boolean,JsonParser.Feature).defaultState","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonReadFeature.<init>(boolean,JsonParser.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadFeature.<init>(boolean,JsonParser.Feature).mapTo","Parameter_2","Belong to com.fasterxml.jackson.core.json.JsonReadFeature.<init>(boolean,JsonParser.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParser","Class","* Non-blocking parser implementation for JSON content that takes its input
 * via {@code byte[]} passed.
 *<p>
 * NOTE: only supports parsing of UTF-8 encoded content (and 7-bit US-ASCII since
 * it is strict subset of UTF-8): other encodings are not supported.
 *
 * @since 2.9","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase","com.fasterxml.jackson.core.async.ByteArrayFeeder"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParser._inputBuffer","Field","No Comment","private byte[] _inputBuffer = NO_BYTES;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.getNonBlockingInputFeeder()","Method","No Comment","@Override
public ByteArrayFeeder getNonBlockingInputFeeder() {
    return this;
}","ByteArrayFeeder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.feedInput(byte[],int,int)","Method","No Comment","@Override
public void feedInput(final byte[] buf, final int start, final int end) throws IOException {
    // Must not have remaining input
    if (_inputPtr < _inputEnd) {
        _reportError(""Still have %d undecoded bytes, should not call 'feedInput'"", _inputEnd - _inputPtr);
    }
    if (end < start) {
        _reportError(""Input end (%d) may not be before start (%d)"", end, start);
    }
    // and shouldn't have been marked as end-of-input
    if (_endOfInput) {
        _reportError(""Already closed, can not feed more input"");
    }
    // Time to update pointers first
    _currInputProcessed += _origBufferLen;
    // 06-Sep-2023, tatu: [core#1046] Enforce max doc length limit
    _streamReadConstraints.validateDocumentLength(_currInputProcessed);
    // Also need to adjust row start, to work as if it extended into the past wrt new buffer
    _currInputRowStart = start - (_inputEnd - _currInputRowStart);
    // And then update buffer settings
    _currBufferStart = start;
    _inputBuffer = buf;
    _inputPtr = start;
    _inputEnd = end;
    _origBufferLen = end - start;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.feedInput(byte[],int,int).buf","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.feedInput(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.feedInput(byte[],int,int).start","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.feedInput(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.feedInput(byte[],int,int).end","Parameter_3","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.feedInput(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.releaseBuffered(OutputStream)","Method","No Comment","@Override
public int releaseBuffered(final OutputStream out) throws IOException {
    final int avail = _inputEnd - _inputPtr;
    if (avail > 0) {
        out.write(_inputBuffer, _inputPtr, avail);
    }
    return avail;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.releaseBuffered(OutputStream).out","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.releaseBuffered(OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.getNextSignedByteFromBuffer()","Method","No Comment","@Override
protected byte getNextSignedByteFromBuffer() {
    return _inputBuffer[_inputPtr++];
}","byte","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.getNextUnsignedByteFromBuffer()","Method","No Comment","@Override
protected int getNextUnsignedByteFromBuffer() {
    return _inputBuffer[_inputPtr++] & 0xFF;
}","int","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.getByteFromBuffer(int)","Method","No Comment","@Override
protected byte getByteFromBuffer(final int ptr) {
    return _inputBuffer[ptr];
}","byte","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.getByteFromBuffer(int).ptr","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.getByteFromBuffer(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.<init>(IOContext,int,ByteQuadsCanonicalizer)","Constructor","No Comment","public NonBlockingJsonParser(IOContext ctxt, int parserFeatures, ByteQuadsCanonicalizer sym) {
    super(ctxt, parserFeatures, sym);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.<init>(IOContext,int,ByteQuadsCanonicalizer).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.<init>(IOContext,int,ByteQuadsCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.<init>(IOContext,int,ByteQuadsCanonicalizer).parserFeatures","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.<init>(IOContext,int,ByteQuadsCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.<init>(IOContext,int,ByteQuadsCanonicalizer).sym","Parameter_3","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParser.<init>(IOContext,int,ByteQuadsCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase","Abstract Class","* Non-blocking parser base implementation for JSON content.
 *<p>
 * NOTE: only supports parsing of UTF-8 encoded content (and 7-bit US-ASCII since
 * it is strict subset of UTF-8): other encodings are not supported.
 *
 * @since 2.9","Abstract Class do not obtain Source Code","No return type","public , abstract ","com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase",""
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.FEAT_MASK_TRAILING_COMMA","Field","No Comment","@SuppressWarnings(""deprecation"")
private final static int FEAT_MASK_TRAILING_COMMA = Feature.ALLOW_TRAILING_COMMA.getMask();","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.FEAT_MASK_LEADING_ZEROS","Field","No Comment","@SuppressWarnings(""deprecation"")
private final static int FEAT_MASK_LEADING_ZEROS = Feature.ALLOW_NUMERIC_LEADING_ZEROS.getMask();","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.FEAT_MASK_ALLOW_MISSING","Field","No Comment","@SuppressWarnings(""deprecation"")
private final static int FEAT_MASK_ALLOW_MISSING = Feature.ALLOW_MISSING_VALUES.getMask();","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.FEAT_MASK_ALLOW_SINGLE_QUOTES","Field","No Comment","private final static int FEAT_MASK_ALLOW_SINGLE_QUOTES = Feature.ALLOW_SINGLE_QUOTES.getMask();","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.FEAT_MASK_ALLOW_UNQUOTED_NAMES","Field","No Comment","private final static int FEAT_MASK_ALLOW_UNQUOTED_NAMES = Feature.ALLOW_UNQUOTED_FIELD_NAMES.getMask();","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.FEAT_MASK_ALLOW_JAVA_COMMENTS","Field","No Comment","private final static int FEAT_MASK_ALLOW_JAVA_COMMENTS = Feature.ALLOW_COMMENTS.getMask();","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.FEAT_MASK_ALLOW_YAML_COMMENTS","Field","No Comment","private final static int FEAT_MASK_ALLOW_YAML_COMMENTS = Feature.ALLOW_YAML_COMMENTS.getMask();","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._icUTF8","Field","This is the main input-code lookup table, fetched eagerly","private final static int[] _icUTF8 = CharTypes.getInputCodeUtf8();","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._icLatin1","Field","pre-processing task, to simplify first pass, keep it fast.","protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._origBufferLen","Field","* In addition to current buffer pointer, and end pointer,
     * we will also need to know number of bytes originally
     * contained. This is needed to correctly update location
     * information when the block has been completed.","protected int _origBufferLen;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.needMoreInput()","Method","No Comment","public final boolean needMoreInput() {
    return (_inputPtr >= _inputEnd) && !_endOfInput;
}","boolean","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.endOfInput()","Method","No Comment","public void endOfInput() {
    _endOfInput = true;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeEscaped()","Method","due to non-blocking behavior","@Override
protected char _decodeEscaped() throws IOException {
    VersionUtil.throwInternal();
    return ' ';
}","char","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.nextToken()","Method","No Comment","@Override
public JsonToken nextToken() throws IOException {
    // First: regardless of where we really are, need at least one more byte;
    // can simplify some of the checks by short-circuiting right away
    if (_inputPtr >= _inputEnd) {
        if (_closed) {
            return null;
        }
        // note: if so, do not even bother changing state
        if (_endOfInput) {
            // except for this special case
            // End-of-input within (possibly...) started token is bit complicated,
            // so offline
            if (_currToken == JsonToken.NOT_AVAILABLE) {
                return _finishTokenWithEOF();
            }
            return _eofAsNextToken();
        }
        return JsonToken.NOT_AVAILABLE;
    }
    // in the middle of tokenization?
    if (_currToken == JsonToken.NOT_AVAILABLE) {
        return _finishToken();
    }
    // No: fresh new token; may or may not have existing one
    _numTypesValid = NR_UNKNOWN;
    _tokenInputTotal = _currInputProcessed + _inputPtr;
    // also: clear any data retained so far
    _binaryValue = null;
    int ch = getNextUnsignedByteFromBuffer();
    switch(_majorState) {
        case MAJOR_INITIAL:
            return _startDocument(ch);
        case MAJOR_ROOT:
            return _startValue(ch);
        case // expect field-name or end-object
        MAJOR_OBJECT_FIELD_FIRST:
            return _startFieldName(ch);
        case // expect comma + field-name or end-object
        MAJOR_OBJECT_FIELD_NEXT:
            return _startFieldNameAfterComma(ch);
        case // expect colon, followed by value
        MAJOR_OBJECT_VALUE:
            return _startValueExpectColon(ch);
        case // expect value or end-array
        MAJOR_ARRAY_ELEMENT_FIRST:
            return _startValue(ch);
        case // expect leading comma + value or end-array
        MAJOR_ARRAY_ELEMENT_NEXT:
            return _startValueExpectComma(ch);
        default:
    }
    VersionUtil.throwInternal();
    return null;
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.getNextSignedByteFromBuffer()","Abstract Method","* @return next signed byte from the buffer
     * @since v2.14","protected abstract byte getNextSignedByteFromBuffer();","byte","protected , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.getNextUnsignedByteFromBuffer()","Abstract Method","* @return next unsigned byte from the buffer
     * @since v2.14","protected abstract int getNextUnsignedByteFromBuffer();","int","protected , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.getByteFromBuffer(int)","Abstract Method","* @param ptr pointer to byte that is required
     * @return byte from the buffer at the given pointer
     * @since v2.14","protected abstract byte getByteFromBuffer(final int ptr);","byte","protected , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.getByteFromBuffer(int).ptr","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.getByteFromBuffer(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishToken()","Method","* Method called when decoding of a token has been started, but not yet completed due
     * to missing input; method is to continue decoding due to at least one more byte
     * being made available to decode.
     *
     * @return Token decoded, if complete; {@link JsonToken#NOT_AVAILABLE} if not
     *
     * @throws IOException (generally {@link JsonParseException}) for decoding problems","protected final JsonToken _finishToken() throws IOException {
    // NOTE: caller ensures there's input available...
    switch(_minorState) {
        case MINOR_ROOT_BOM:
            return _finishBOM(_pending32);
        case MINOR_FIELD_LEADING_WS:
            return _startFieldName(getNextUnsignedByteFromBuffer());
        case MINOR_FIELD_LEADING_COMMA:
            return _startFieldNameAfterComma(getNextUnsignedByteFromBuffer());
        // Field name states
        case MINOR_FIELD_NAME:
            return _parseEscapedName(_quadLength, _pending32, _pendingBytes);
        case MINOR_FIELD_NAME_ESCAPE:
            return _finishFieldWithEscape();
        case MINOR_FIELD_APOS_NAME:
            return _finishAposName(_quadLength, _pending32, _pendingBytes);
        case MINOR_FIELD_UNQUOTED_NAME:
            return _finishUnquotedName(_quadLength, _pending32, _pendingBytes);
        // Value states
        case MINOR_VALUE_LEADING_WS:
            return _startValue(getNextUnsignedByteFromBuffer());
        case MINOR_VALUE_WS_AFTER_COMMA:
            return _startValueAfterComma(getNextUnsignedByteFromBuffer());
        case MINOR_VALUE_EXPECTING_COMMA:
            return _startValueExpectComma(getNextUnsignedByteFromBuffer());
        case MINOR_VALUE_EXPECTING_COLON:
            return _startValueExpectColon(getNextUnsignedByteFromBuffer());
        case MINOR_VALUE_TOKEN_NULL:
            return _finishKeywordToken(""null"", _pending32, JsonToken.VALUE_NULL);
        case MINOR_VALUE_TOKEN_TRUE:
            return _finishKeywordToken(""true"", _pending32, JsonToken.VALUE_TRUE);
        case MINOR_VALUE_TOKEN_FALSE:
            return _finishKeywordToken(""false"", _pending32, JsonToken.VALUE_FALSE);
        case MINOR_VALUE_TOKEN_NON_STD:
            return _finishNonStdToken(_nonStdTokenType, _pending32);
        case MINOR_NUMBER_PLUS:
            return _finishNumberPlus(getNextUnsignedByteFromBuffer());
        case MINOR_NUMBER_MINUS:
            return _finishNumberMinus(getNextUnsignedByteFromBuffer());
        case MINOR_NUMBER_ZERO:
            return _finishNumberLeadingZeroes();
        case MINOR_NUMBER_MINUSZERO:
            return _finishNumberLeadingNegZeroes();
        case MINOR_NUMBER_INTEGER_DIGITS:
            return _finishNumberIntegralPart(_textBuffer.getBufferWithoutReset(), _textBuffer.getCurrentSegmentSize());
        case MINOR_NUMBER_FRACTION_DIGITS:
            return _finishFloatFraction();
        case MINOR_NUMBER_EXPONENT_MARKER:
            return _finishFloatExponent(true, getNextUnsignedByteFromBuffer());
        case MINOR_NUMBER_EXPONENT_DIGITS:
            return _finishFloatExponent(false, getNextUnsignedByteFromBuffer());
        case MINOR_VALUE_STRING:
            return _finishRegularString();
        case MINOR_VALUE_STRING_UTF8_2:
            _textBuffer.append((char) _decodeUTF8_2(_pending32, getNextSignedByteFromBuffer()));
            if (_minorStateAfterSplit == MINOR_VALUE_APOS_STRING) {
                return _finishAposString();
            }
            return _finishRegularString();
        case MINOR_VALUE_STRING_UTF8_3:
            if (!_decodeSplitUTF8_3(_pending32, _pendingBytes, getNextSignedByteFromBuffer())) {
                return JsonToken.NOT_AVAILABLE;
            }
            if (_minorStateAfterSplit == MINOR_VALUE_APOS_STRING) {
                return _finishAposString();
            }
            return _finishRegularString();
        case MINOR_VALUE_STRING_UTF8_4:
            if (!_decodeSplitUTF8_4(_pending32, _pendingBytes, getNextSignedByteFromBuffer())) {
                return JsonToken.NOT_AVAILABLE;
            }
            if (_minorStateAfterSplit == MINOR_VALUE_APOS_STRING) {
                return _finishAposString();
            }
            return _finishRegularString();
        case MINOR_VALUE_STRING_ESCAPE:
            {
                int c = _decodeSplitEscaped(_quoted32, _quotedDigits);
                if (c < 0) {
                    return JsonToken.NOT_AVAILABLE;
                }
                _textBuffer.append((char) c);
            }
            if (_minorStateAfterSplit == MINOR_VALUE_APOS_STRING) {
                return _finishAposString();
            }
            return _finishRegularString();
        case MINOR_VALUE_APOS_STRING:
            return _finishAposString();
        case // case of ""almost token"", just need tokenize for error
        MINOR_VALUE_TOKEN_ERROR:
            return _finishErrorToken();
        // Comments
        case MINOR_COMMENT_LEADING_SLASH:
            return _startSlashComment(_pending32);
        case MINOR_COMMENT_CLOSING_ASTERISK:
            return _finishCComment(_pending32, true);
        case MINOR_COMMENT_C:
            return _finishCComment(_pending32, false);
        case MINOR_COMMENT_CPP:
            return _finishCppComment(_pending32);
        case MINOR_COMMENT_YAML:
            return _finishHashComment(_pending32);
    }
    VersionUtil.throwInternal();
    return null;
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishTokenWithEOF()","Method","* Method similar to {@link #_finishToken}, but called when no more input is
     * available, and end-of-input has been detected. This is usually problem
     * case, but not always: root-level values may be properly terminated by
     * this, and similarly trailing white-space may have been skipped.
     *
     * @return Token decoded, if complete; {@link JsonToken#NOT_AVAILABLE} if not
     *
     * @throws IOException (generally {@link JsonParseException}) for decoding problems","protected final JsonToken _finishTokenWithEOF() throws IOException {
    // NOTE: caller ensures there's input available...
    JsonToken t = _currToken;
    switch(_minorState) {
        case // fine, just skip some trailing space
        MINOR_ROOT_GOT_SEPARATOR:
            return _eofAsNextToken();
        case // finished at token boundary; probably fine
        MINOR_VALUE_LEADING_WS:
            return _eofAsNextToken();
        //        case MINOR_VALUE_EXPECTING_COMMA: // not fine
        //        case MINOR_VALUE_EXPECTING_COLON: // not fine
        case MINOR_VALUE_TOKEN_NULL:
            return _finishKeywordTokenWithEOF(""null"", _pending32, JsonToken.VALUE_NULL);
        case MINOR_VALUE_TOKEN_TRUE:
            return _finishKeywordTokenWithEOF(""true"", _pending32, JsonToken.VALUE_TRUE);
        case MINOR_VALUE_TOKEN_FALSE:
            return _finishKeywordTokenWithEOF(""false"", _pending32, JsonToken.VALUE_FALSE);
        case MINOR_VALUE_TOKEN_NON_STD:
            return _finishNonStdTokenWithEOF(_nonStdTokenType, _pending32);
        case // case of ""almost token"", just need tokenize for error
        MINOR_VALUE_TOKEN_ERROR:
            return _finishErrorTokenWithEOF();
        // Number-parsing states; valid stopping points, more explicit errors
        case MINOR_NUMBER_ZERO:
        case MINOR_NUMBER_MINUSZERO:
            // NOTE: does NOT retain possible leading minus-sign (can change if
            // absolutely needs be)
            return _valueCompleteInt(0, ""0"");
        case MINOR_NUMBER_INTEGER_DIGITS:
            // Fine: just need to ensure we have value fully defined
            {
                int len = _textBuffer.getCurrentSegmentSize();
                if (_numberNegative) {
                    --len;
                }
                _intLength = len;
            }
            return _valueComplete(JsonToken.VALUE_NUMBER_INT);
        case MINOR_NUMBER_FRACTION_DIGITS:
            _expLength = 0;
        // fall through
        case MINOR_NUMBER_EXPONENT_DIGITS:
            return _valueComplete(JsonToken.VALUE_NUMBER_FLOAT);
        case MINOR_NUMBER_EXPONENT_MARKER:
            _reportInvalidEOF("": was expecting fraction after exponent marker"", JsonToken.VALUE_NUMBER_FLOAT);
        // How about comments?
        // Inside C-comments; not legal
        //        case MINOR_COMMENT_LEADING_SLASH: // not legal, but use default error
        case MINOR_COMMENT_CLOSING_ASTERISK:
        case MINOR_COMMENT_C:
            _reportInvalidEOF("": was expecting closing '*/' for comment"", JsonToken.NOT_AVAILABLE);
        case MINOR_COMMENT_CPP:
        case MINOR_COMMENT_YAML:
            // within C++/YAML comments, ok, as long as major state agrees...
            return _eofAsNextToken();
        default:
    }
    _reportInvalidEOF("": was expecting rest of token (internal state: "" + _minorState + "")"", _currToken);
    // never gets here
    return t;
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startDocument(int)","Method","No Comment","private final JsonToken _startDocument(int ch) throws IOException {
    ch &= 0xFF;
    // Very first byte: could be BOM
    if ((ch == 0xEF) && (_minorState != MINOR_ROOT_BOM)) {
        return _finishBOM(1);
    }
    // If not BOM (or we got past it), could be whitespace or comment to skip
    while (ch <= 0x020) {
        if (ch != INT_SPACE) {
            if (ch == INT_LF) {
                ++_currInputRow;
                _currInputRowStart = _inputPtr;
            } else if (ch == INT_CR) {
                ++_currInputRowAlt;
                _currInputRowStart = _inputPtr;
            } else if (ch != INT_TAB) {
                _throwInvalidSpace(ch);
            }
        }
        if (_inputPtr >= _inputEnd) {
            _minorState = MINOR_ROOT_GOT_SEPARATOR;
            if (_closed) {
                return null;
            }
            // note: if so, do not even bother changing state
            if (_endOfInput) {
                // except for this special case
                return _eofAsNextToken();
            }
            return JsonToken.NOT_AVAILABLE;
        }
        ch = getNextUnsignedByteFromBuffer();
    }
    return _startValue(ch);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startDocument(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startDocument(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishBOM(int)","Method","No Comment","private final JsonToken _finishBOM(int bytesHandled) throws IOException {
    // public final static byte UTF8_BOM_1 = (byte) 0xEF;
    // public final static byte UTF8_BOM_2 = (byte) 0xBB;
    // public final static byte UTF8_BOM_3 = (byte) 0xBF;
    while (_inputPtr < _inputEnd) {
        int ch = getNextUnsignedByteFromBuffer();
        switch(bytesHandled) {
            case 3:
                // got it all; go back to ""start document"" handling, without changing
                // minor state (to let it know we've done BOM)
                _currInputProcessed -= 3;
                return _startDocument(ch);
            case 2:
                if (ch != 0xBF) {
                    _reportError(""Unexpected byte 0x%02x following 0xEF 0xBB; should get 0xBF as third byte of UTF-8 BOM"", ch);
                }
                break;
            case 1:
                if (ch != 0xBB) {
                    _reportError(""Unexpected byte 0x%02x following 0xEF; should get 0xBB as second byte UTF-8 BOM"", ch);
                }
                break;
        }
        ++bytesHandled;
    }
    _pending32 = bytesHandled;
    _minorState = MINOR_ROOT_BOM;
    return _updateTokenToNA();
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishBOM(int).bytesHandled","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishBOM(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startFieldName(int)","Method","* Method that handles initial token type recognition for token
     * that has to be either FIELD_NAME or END_OBJECT.","private final JsonToken _startFieldName(int ch) throws IOException {
    // First: any leading white space?
    if (ch <= 0x0020) {
        ch = _skipWS(ch);
        if (ch <= 0) {
            _minorState = MINOR_FIELD_LEADING_WS;
            return _currToken;
        }
    }
    _updateTokenLocation();
    if (ch != INT_QUOTE) {
        if (ch == INT_RCURLY) {
            return _closeObjectScope();
        }
        return _handleOddName(ch);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) <= _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        String n = _fastParseName();
        if (n != null) {
            return _fieldComplete(n);
        }
    }
    return _parseEscapedName(0, 0, 0);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startFieldName(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startFieldName(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startFieldNameAfterComma(int)","Method","No Comment","private final JsonToken _startFieldNameAfterComma(int ch) throws IOException {
    // First: any leading white space?
    if (ch <= 0x0020) {
        // will skip through all available ws (and comments)
        ch = _skipWS(ch);
        if (ch <= 0) {
            _minorState = MINOR_FIELD_LEADING_COMMA;
            return _currToken;
        }
    }
    if (ch != INT_COMMA) {
        // either comma, separating entries, or closing right curly
        if (ch == INT_RCURLY) {
            return _closeObjectScope();
        }
        if (ch == INT_HASH) {
            return _finishHashComment(MINOR_FIELD_LEADING_COMMA);
        }
        if (ch == INT_SLASH) {
            return _startSlashComment(MINOR_FIELD_LEADING_COMMA);
        }
        _reportUnexpectedChar(ch, ""was expecting comma to separate "" + _parsingContext.typeDesc() + "" entries"");
    }
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        _minorState = MINOR_FIELD_LEADING_WS;
        return _updateTokenToNA();
    }
    ch = getByteFromBuffer(ptr);
    _inputPtr = ptr + 1;
    if (ch <= 0x0020) {
        ch = _skipWS(ch);
        if (ch <= 0) {
            _minorState = MINOR_FIELD_LEADING_WS;
            return _currToken;
        }
    }
    _updateTokenLocation();
    if (ch != INT_QUOTE) {
        if (ch == INT_RCURLY) {
            if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {
                return _closeObjectScope();
            }
        }
        return _handleOddName(ch);
    }
    // First: can we optimize out bounds checks?
    if ((_inputPtr + 13) <= _inputEnd) {
        // Need up to 12 chars, plus one trailing (quote)
        String n = _fastParseName();
        if (n != null) {
            return _fieldComplete(n);
        }
    }
    return _parseEscapedName(0, 0, 0);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startFieldNameAfterComma(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startFieldNameAfterComma(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startValue(int)","Method","* Helper method called to detect type of a value token (at any level), and possibly
     * decode it if contained in input buffer.
     * Value may be preceded by leading white-space, but no separator (comma).","private final JsonToken _startValue(int ch) throws IOException {
    // First: any leading white space?
    if (ch <= 0x0020) {
        ch = _skipWS(ch);
        if (ch <= 0) {
            _minorState = MINOR_VALUE_LEADING_WS;
            return _currToken;
        }
    }
    _updateTokenLocation();
    // 17-Sep-2019, tatu: [core#563] Need to call this to update index within array
    _parsingContext.expectComma();
    if (ch == INT_QUOTE) {
        return _startString();
    }
    switch(ch) {
        case '#':
            return _finishHashComment(MINOR_VALUE_LEADING_WS);
        case '+':
            return _startPositiveNumber();
        case '-':
            return _startNegativeNumber();
        case // c/c++ comments
        '/':
            return _startSlashComment(MINOR_VALUE_LEADING_WS);
        // Should we have separate handling for plus? Although
        // it is not allowed per se, it may be erroneously used,
        // and could be indicate by a more specific error message.
        case // [core#611]
        '.':
            if (isEnabled(JsonReadFeature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS.mappedFeature())) {
                return _startFloatThatStartsWithPeriod();
            }
            break;
        case '0':
            return _startNumberLeadingZero();
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            return _startPositiveNumber(ch);
        case 'f':
            return _startFalseToken();
        case 'n':
            return _startNullToken();
        case 't':
            return _startTrueToken();
        case '[':
            return _startArrayScope();
        case INT_RBRACKET:
            return _closeArrayScope();
        case '{':
            return _startObjectScope();
        case INT_RCURLY:
            return _closeObjectScope();
        default:
    }
    return _startUnexpectedValue(false, ch);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startValue(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startValue(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startValueExpectComma(int)","Method","or end-array marker","private final JsonToken _startValueExpectComma(int ch) throws IOException {
    // First: any leading white space?
    if (ch <= 0x0020) {
        // will skip through all available ws (and comments)
        ch = _skipWS(ch);
        if (ch <= 0) {
            _minorState = MINOR_VALUE_EXPECTING_COMMA;
            return _currToken;
        }
    }
    if (ch != INT_COMMA) {
        if (ch == INT_RBRACKET) {
            return _closeArrayScope();
        }
        if (ch == INT_RCURLY) {
            return _closeObjectScope();
        }
        if (ch == INT_SLASH) {
            return _startSlashComment(MINOR_VALUE_EXPECTING_COMMA);
        }
        if (ch == INT_HASH) {
            return _finishHashComment(MINOR_VALUE_EXPECTING_COMMA);
        }
        _reportUnexpectedChar(ch, ""was expecting comma to separate "" + _parsingContext.typeDesc() + "" entries"");
    }
    // 17-Sep-2019, tatu: [core#563] Need to call this to update index within array
    _parsingContext.expectComma();
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        _minorState = MINOR_VALUE_WS_AFTER_COMMA;
        return _updateTokenToNA();
    }
    ch = getByteFromBuffer(ptr);
    _inputPtr = ptr + 1;
    if (ch <= 0x0020) {
        ch = _skipWS(ch);
        if (ch <= 0) {
            _minorState = MINOR_VALUE_WS_AFTER_COMMA;
            return _currToken;
        }
    }
    _updateTokenLocation();
    if (ch == INT_QUOTE) {
        return _startString();
    }
    switch(ch) {
        case '#':
            return _finishHashComment(MINOR_VALUE_WS_AFTER_COMMA);
        case '+':
            return _startPositiveNumber();
        case '-':
            return _startNegativeNumber();
        case '/':
            return _startSlashComment(MINOR_VALUE_WS_AFTER_COMMA);
        // Should we have separate handling for plus? Although
        // it is not allowed per se, it may be erroneously used,
        // and could be indicate by a more specific error message.
        case '0':
            return _startNumberLeadingZero();
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            return _startPositiveNumber(ch);
        case 'f':
            return _startFalseToken();
        case 'n':
            return _startNullToken();
        case 't':
            return _startTrueToken();
        case '[':
            return _startArrayScope();
        case INT_RBRACKET:
            // Was that a trailing comma?
            if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {
                return _closeArrayScope();
            }
            break;
        case '{':
            return _startObjectScope();
        case INT_RCURLY:
            // Was that a trailing comma?
            if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {
                return _closeObjectScope();
            }
            break;
        default:
    }
    return _startUnexpectedValue(true, ch);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startValueExpectComma(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startValueExpectComma(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startValueExpectColon(int)","Method","Value MUST be preceded by a semi-colon (which may be surrounded by white-space)","private final JsonToken _startValueExpectColon(int ch) throws IOException {
    // First: any leading white space?
    if (ch <= 0x0020) {
        // will skip through all available ws (and comments)
        ch = _skipWS(ch);
        if (ch <= 0) {
            _minorState = MINOR_VALUE_EXPECTING_COLON;
            return _currToken;
        }
    }
    if (ch != INT_COLON) {
        if (ch == INT_SLASH) {
            return _startSlashComment(MINOR_VALUE_EXPECTING_COLON);
        }
        if (ch == INT_HASH) {
            return _finishHashComment(MINOR_VALUE_EXPECTING_COLON);
        }
        // cannot omit colon here
        _reportUnexpectedChar(ch, ""was expecting a colon to separate field name and value"");
    }
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        _minorState = MINOR_VALUE_LEADING_WS;
        return _updateTokenToNA();
    }
    ch = getByteFromBuffer(ptr);
    _inputPtr = ptr + 1;
    if (ch <= 0x0020) {
        // will skip through all available ws (and comments)
        ch = _skipWS(ch);
        if (ch <= 0) {
            _minorState = MINOR_VALUE_LEADING_WS;
            return _currToken;
        }
    }
    _updateTokenLocation();
    if (ch == INT_QUOTE) {
        return _startString();
    }
    switch(ch) {
        case '#':
            return _finishHashComment(MINOR_VALUE_LEADING_WS);
        case '+':
            return _startPositiveNumber();
        case '-':
            return _startNegativeNumber();
        case '/':
            return _startSlashComment(MINOR_VALUE_LEADING_WS);
        // Should we have separate handling for plus? Although
        // it is not allowed per se, it may be erroneously used,
        // and could be indicate by a more specific error message.
        case '0':
            return _startNumberLeadingZero();
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            return _startPositiveNumber(ch);
        case 'f':
            return _startFalseToken();
        case 'n':
            return _startNullToken();
        case 't':
            return _startTrueToken();
        case '[':
            return _startArrayScope();
        case '{':
            return _startObjectScope();
        default:
    }
    return _startUnexpectedValue(false, ch);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startValueExpectColon(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startValueExpectColon(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startValueAfterComma(int)","Method","Method called when we have already gotten a comma (i.e. not the first value)","private final JsonToken _startValueAfterComma(int ch) throws IOException {
    // First: any leading white space?
    if (ch <= 0x0020) {
        ch = _skipWS(ch);
        if (ch <= 0) {
            _minorState = MINOR_VALUE_WS_AFTER_COMMA;
            return _currToken;
        }
    }
    _updateTokenLocation();
    if (ch == INT_QUOTE) {
        return _startString();
    }
    switch(ch) {
        case '#':
            return _finishHashComment(MINOR_VALUE_WS_AFTER_COMMA);
        case '+':
            return _startPositiveNumber();
        case '-':
            return _startNegativeNumber();
        case '/':
            return _startSlashComment(MINOR_VALUE_WS_AFTER_COMMA);
        // Should we have separate handling for plus? Although
        // it is not allowed per se, it may be erroneously used,
        // and could be indicate by a more specific error message.
        case '0':
            return _startNumberLeadingZero();
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            return _startPositiveNumber(ch);
        case 'f':
            return _startFalseToken();
        case 'n':
            return _startNullToken();
        case 't':
            return _startTrueToken();
        case '[':
            return _startArrayScope();
        case INT_RBRACKET:
            // Was that a trailing comma?
            if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {
                return _closeArrayScope();
            }
            break;
        case '{':
            return _startObjectScope();
        case INT_RCURLY:
            // Was that a trailing comma?
            if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {
                return _closeObjectScope();
            }
            break;
        default:
    }
    return _startUnexpectedValue(true, ch);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startValueAfterComma(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startValueAfterComma(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startUnexpectedValue(boolean,int)","Method","No Comment","protected JsonToken _startUnexpectedValue(boolean leadingComma, int ch) throws IOException {
    switch(ch) {
        case INT_RBRACKET:
            if (!_parsingContext.inArray()) {
                break;
            }
        // fall through
        case ',':
            // 28-Mar-2016: [core#116]: If Feature.ALLOW_MISSING_VALUES is enabled
            //   we may allow ""missing values"", that is, encountering a trailing
            //   comma or closing marker where value would be expected
            // 11-May-2020, tatu: [core#616] No commas in root level
            if (!_parsingContext.inRoot()) {
                if ((_features & FEAT_MASK_ALLOW_MISSING) != 0) {
                    --_inputPtr;
                    return _valueComplete(JsonToken.VALUE_NULL);
                }
            }
        // fall through
        case INT_RCURLY:
            // Error: neither is valid at this point; valid closers have
            // been handled earlier
            break;
        case '\'':
            if ((_features & FEAT_MASK_ALLOW_SINGLE_QUOTES) != 0) {
                return _startAposString();
            }
            break;
        case '+':
            return _finishNonStdToken(NON_STD_TOKEN_PLUS_INFINITY, 1);
        case 'N':
            return _finishNonStdToken(NON_STD_TOKEN_NAN, 1);
        case 'I':
            return _finishNonStdToken(NON_STD_TOKEN_INFINITY, 1);
    }
    // !!! TODO: maybe try to collect more information for better diagnostics
    _reportUnexpectedChar(ch, ""expected a valid value "" + _validJsonValueList());
    return null;
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startUnexpectedValue(boolean,int).leadingComma","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startUnexpectedValue(boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startUnexpectedValue(boolean,int).ch","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startUnexpectedValue(boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._skipWS(int)","Method","No Comment","private final int _skipWS(int ch) throws IOException {
    do {
        if (ch != INT_SPACE) {
            if (ch == INT_LF) {
                ++_currInputRow;
                _currInputRowStart = _inputPtr;
            } else if (ch == INT_CR) {
                ++_currInputRowAlt;
                _currInputRowStart = _inputPtr;
            } else if (ch != INT_TAB) {
                _throwInvalidSpace(ch);
            }
        }
        if (_inputPtr >= _inputEnd) {
            _updateTokenToNA();
            return 0;
        }
        ch = getNextUnsignedByteFromBuffer();
    } while (ch <= 0x0020);
    return ch;
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._skipWS(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._skipWS(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startSlashComment(int)","Method","No Comment","private final JsonToken _startSlashComment(int fromMinorState) throws IOException {
    if ((_features & FEAT_MASK_ALLOW_JAVA_COMMENTS) == 0) {
        _reportUnexpectedChar('/', ""maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)"");
    }
    // After that, need to verify if we have c/c++ comment
    if (_inputPtr >= _inputEnd) {
        _pending32 = fromMinorState;
        _minorState = MINOR_COMMENT_LEADING_SLASH;
        return _updateTokenToNA();
    }
    int ch = getNextSignedByteFromBuffer();
    if (ch == INT_ASTERISK) {
        // c-style
        return _finishCComment(fromMinorState, false);
    }
    if (ch == INT_SLASH) {
        // c++-style
        return _finishCppComment(fromMinorState);
    }
    _reportUnexpectedChar(ch & 0xFF, ""was expecting either '*' or '/' for a comment"");
    return null;
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startSlashComment(int).fromMinorState","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startSlashComment(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishHashComment(int)","Method","No Comment","private final JsonToken _finishHashComment(int fromMinorState) throws IOException {
    // Could by-pass this check by refactoring, but for now simplest way...
    if ((_features & FEAT_MASK_ALLOW_YAML_COMMENTS) == 0) {
        _reportUnexpectedChar('#', ""maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_YAML_COMMENTS' not enabled for parser)"");
    }
    while (true) {
        if (_inputPtr >= _inputEnd) {
            _minorState = MINOR_COMMENT_YAML;
            _pending32 = fromMinorState;
            return _updateTokenToNA();
        }
        int ch = getNextUnsignedByteFromBuffer();
        if (ch < 0x020) {
            if (ch == INT_LF) {
                ++_currInputRow;
                _currInputRowStart = _inputPtr;
                break;
            } else if (ch == INT_CR) {
                ++_currInputRowAlt;
                _currInputRowStart = _inputPtr;
                break;
            } else if (ch != INT_TAB) {
                _throwInvalidSpace(ch);
            }
        }
    }
    return _startAfterComment(fromMinorState);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishHashComment(int).fromMinorState","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishHashComment(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishCppComment(int)","Method","No Comment","private final JsonToken _finishCppComment(int fromMinorState) throws IOException {
    while (true) {
        if (_inputPtr >= _inputEnd) {
            _minorState = MINOR_COMMENT_CPP;
            _pending32 = fromMinorState;
            return _updateTokenToNA();
        }
        int ch = getNextUnsignedByteFromBuffer();
        if (ch < 0x020) {
            if (ch == INT_LF) {
                ++_currInputRow;
                _currInputRowStart = _inputPtr;
                break;
            } else if (ch == INT_CR) {
                ++_currInputRowAlt;
                _currInputRowStart = _inputPtr;
                break;
            } else if (ch != INT_TAB) {
                _throwInvalidSpace(ch);
            }
        }
    }
    return _startAfterComment(fromMinorState);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishCppComment(int).fromMinorState","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishCppComment(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishCComment(int,boolean)","Method","No Comment","private final JsonToken _finishCComment(int fromMinorState, boolean gotStar) throws IOException {
    while (true) {
        if (_inputPtr >= _inputEnd) {
            _minorState = gotStar ? MINOR_COMMENT_CLOSING_ASTERISK : MINOR_COMMENT_C;
            _pending32 = fromMinorState;
            return _updateTokenToNA();
        }
        int ch = getNextUnsignedByteFromBuffer();
        if (ch < 0x020) {
            if (ch == INT_LF) {
                ++_currInputRow;
                _currInputRowStart = _inputPtr;
            } else if (ch == INT_CR) {
                ++_currInputRowAlt;
                _currInputRowStart = _inputPtr;
            } else if (ch != INT_TAB) {
                _throwInvalidSpace(ch);
            }
        } else if (ch == INT_ASTERISK) {
            gotStar = true;
            continue;
        } else if (ch == INT_SLASH) {
            if (gotStar) {
                break;
            }
        }
        gotStar = false;
    }
    return _startAfterComment(fromMinorState);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishCComment(int,boolean).fromMinorState","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishCComment(int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishCComment(int,boolean).gotStar","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishCComment(int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startAfterComment(int)","Method","No Comment","private final JsonToken _startAfterComment(int fromMinorState) throws IOException {
    // Ok, then, need one more character...
    if (_inputPtr >= _inputEnd) {
        _minorState = fromMinorState;
        return _updateTokenToNA();
    }
    int ch = getNextUnsignedByteFromBuffer();
    switch(fromMinorState) {
        case MINOR_FIELD_LEADING_WS:
            return _startFieldName(ch);
        case MINOR_FIELD_LEADING_COMMA:
            return _startFieldNameAfterComma(ch);
        case MINOR_VALUE_LEADING_WS:
            return _startValue(ch);
        case MINOR_VALUE_EXPECTING_COMMA:
            return _startValueExpectComma(ch);
        case MINOR_VALUE_EXPECTING_COLON:
            return _startValueExpectColon(ch);
        case MINOR_VALUE_WS_AFTER_COMMA:
            return _startValueAfterComma(ch);
        default:
    }
    VersionUtil.throwInternal();
    return null;
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startAfterComment(int).fromMinorState","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startAfterComment(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startFalseToken()","Method","No Comment","protected JsonToken _startFalseToken() throws IOException {
    int ptr = _inputPtr;
    if ((ptr + 4) < _inputEnd) {
        // yes, can determine efficiently
        if ((getByteFromBuffer(ptr++) == 'a') && (getByteFromBuffer(ptr++) == 'l') && (getByteFromBuffer(ptr++) == 's') && (getByteFromBuffer(ptr++) == 'e')) {
            int ch = getByteFromBuffer(ptr) & 0xFF;
            if (ch < INT_0 || (ch | 0x20) == INT_RCURLY) {
                //  < '0' || ~ '}]' expected/allowed chars
                _inputPtr = ptr;
                return _valueComplete(JsonToken.VALUE_FALSE);
            }
        }
    }
    _minorState = MINOR_VALUE_TOKEN_FALSE;
    return _finishKeywordToken(""false"", 1, JsonToken.VALUE_FALSE);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startTrueToken()","Method","No Comment","protected JsonToken _startTrueToken() throws IOException {
    int ptr = _inputPtr;
    if ((ptr + 3) < _inputEnd) {
        // yes, can determine efficiently
        if ((getByteFromBuffer(ptr++) == 'r') && (getByteFromBuffer(ptr++) == 'u') && (getByteFromBuffer(ptr++) == 'e')) {
            int ch = getByteFromBuffer(ptr) & 0xFF;
            if (ch < INT_0 || (ch | 0x20) == INT_RCURLY) {
                //  < '0' || ~ '}]' expected/allowed chars
                _inputPtr = ptr;
                return _valueComplete(JsonToken.VALUE_TRUE);
            }
        }
    }
    _minorState = MINOR_VALUE_TOKEN_TRUE;
    return _finishKeywordToken(""true"", 1, JsonToken.VALUE_TRUE);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startNullToken()","Method","No Comment","protected JsonToken _startNullToken() throws IOException {
    int ptr = _inputPtr;
    if ((ptr + 3) < _inputEnd) {
        // yes, can determine efficiently
        if ((getByteFromBuffer(ptr++) == 'u') && (getByteFromBuffer(ptr++) == 'l') && (getByteFromBuffer(ptr++) == 'l')) {
            int ch = getByteFromBuffer(ptr) & 0xFF;
            if (ch < INT_0 || (ch | 0x20) == INT_RCURLY) {
                //  < '0' || ~ '}]' expected/allowed chars
                _inputPtr = ptr;
                return _valueComplete(JsonToken.VALUE_NULL);
            }
        }
    }
    _minorState = MINOR_VALUE_TOKEN_NULL;
    return _finishKeywordToken(""null"", 1, JsonToken.VALUE_NULL);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishKeywordToken(String,int,JsonToken)","Method","No Comment","protected JsonToken _finishKeywordToken(String expToken, int matched, JsonToken result) throws IOException {
    final int end = expToken.length();
    while (true) {
        if (_inputPtr >= _inputEnd) {
            _pending32 = matched;
            return _updateTokenToNA();
        }
        int ch = getByteFromBuffer(_inputPtr);
        if (matched == end) {
            // need to verify trailing separator
            if (ch < INT_0 || (ch | 0x20) == INT_RCURLY) {
                //  < '0' || ~ '}]' expected/allowed chars
                return _valueComplete(result);
            }
            break;
        }
        if (ch != expToken.charAt(matched)) {
            break;
        }
        ++matched;
        ++_inputPtr;
    }
    _minorState = MINOR_VALUE_TOKEN_ERROR;
    _textBuffer.resetWithCopy(expToken, 0, matched);
    return _finishErrorToken();
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishKeywordToken(String,int,JsonToken).expToken","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishKeywordToken(String,int,JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishKeywordToken(String,int,JsonToken).matched","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishKeywordToken(String,int,JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishKeywordToken(String,int,JsonToken).result","Parameter_3","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishKeywordToken(String,int,JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishKeywordTokenWithEOF(String,int,JsonToken)","Method","No Comment","protected JsonToken _finishKeywordTokenWithEOF(String expToken, int matched, JsonToken result) throws IOException {
    if (matched == expToken.length()) {
        return _updateToken(result);
    }
    _textBuffer.resetWithCopy(expToken, 0, matched);
    return _finishErrorTokenWithEOF();
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishKeywordTokenWithEOF(String,int,JsonToken).expToken","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishKeywordTokenWithEOF(String,int,JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishKeywordTokenWithEOF(String,int,JsonToken).matched","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishKeywordTokenWithEOF(String,int,JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishKeywordTokenWithEOF(String,int,JsonToken).result","Parameter_3","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishKeywordTokenWithEOF(String,int,JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNonStdToken(int,int)","Method","No Comment","protected JsonToken _finishNonStdToken(int type, int matched) throws IOException {
    final String expToken = _nonStdToken(type);
    final int end = expToken.length();
    while (true) {
        if (_inputPtr >= _inputEnd) {
            _nonStdTokenType = type;
            _pending32 = matched;
            _minorState = MINOR_VALUE_TOKEN_NON_STD;
            return _updateTokenToNA();
        }
        int ch = getByteFromBuffer(_inputPtr);
        if (matched == end) {
            // need to verify trailing separator
            if (ch < INT_0 || (ch | 0x20) == INT_RCURLY) {
                //  < '0' || ~ '}]' expected/allowed chars
                return _valueNonStdNumberComplete(type);
            }
            break;
        }
        if (ch != expToken.charAt(matched)) {
            break;
        }
        ++matched;
        ++_inputPtr;
    }
    _minorState = MINOR_VALUE_TOKEN_ERROR;
    _textBuffer.resetWithCopy(expToken, 0, matched);
    return _finishErrorToken();
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNonStdToken(int,int).type","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNonStdToken(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNonStdToken(int,int).matched","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNonStdToken(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNonStdTokenWithEOF(int,int)","Method","No Comment","protected JsonToken _finishNonStdTokenWithEOF(int type, int matched) throws IOException {
    final String expToken = _nonStdToken(type);
    if (matched == expToken.length()) {
        return _valueNonStdNumberComplete(type);
    }
    _textBuffer.resetWithCopy(expToken, 0, matched);
    return _finishErrorTokenWithEOF();
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNonStdTokenWithEOF(int,int).type","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNonStdTokenWithEOF(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNonStdTokenWithEOF(int,int).matched","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNonStdTokenWithEOF(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishErrorToken()","Method","No Comment","protected JsonToken _finishErrorToken() throws IOException {
    while (_inputPtr < _inputEnd) {
        int i = getNextSignedByteFromBuffer();
        // !!! TODO: Decode UTF-8 characters properly...
        //            char c = (char) _decodeCharForError(i);
        char ch = (char) i;
        if (Character.isJavaIdentifierPart(ch)) {
            // 11-Jan-2016, tatu: note: we will fully consume the character,
            // included or not, so if recovery was possible, it'd be off-by-one...
            _textBuffer.append(ch);
            if (_textBuffer.size() < _ioContext.errorReportConfiguration().getMaxErrorTokenLength()) {
                continue;
            }
        }
        return _reportErrorToken(_textBuffer.contentsAsString());
    }
    return _updateTokenToNA();
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishErrorTokenWithEOF()","Method","No Comment","protected JsonToken _finishErrorTokenWithEOF() throws IOException {
    return _reportErrorToken(_textBuffer.contentsAsString());
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._reportErrorToken(String)","Method","No Comment","protected JsonToken _reportErrorToken(String actualToken) throws IOException {
    // !!! TODO: Include non-standard ones if enabled
    _reportError(""Unrecognized token '%s': was expecting %s"", _textBuffer.contentsAsString(), _validJsonTokenList());
    // never gets here
    return JsonToken.NOT_AVAILABLE;
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._reportErrorToken(String).actualToken","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._reportErrorToken(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startFloatThatStartsWithPeriod()","Method","[core#611]: allow non-standard floats like "".125""","protected JsonToken _startFloatThatStartsWithPeriod() throws IOException {
    _numberNegative = false;
    _intLength = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    return _startFloat(outBuf, 0, INT_PERIOD);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startPositiveNumber(int)","Method","No Comment","protected JsonToken _startPositiveNumber(int ch) throws IOException {
    _numberNegative = false;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    outBuf[0] = (char) ch;
    // in unlikely event of not having more input, denote location
    if (_inputPtr >= _inputEnd) {
        _minorState = MINOR_NUMBER_INTEGER_DIGITS;
        _textBuffer.setCurrentLength(1);
        return _updateTokenToNA();
    }
    int outPtr = 1;
    ch = getByteFromBuffer(_inputPtr) & 0xFF;
    while (true) {
        if (ch < INT_0) {
            if (ch == INT_PERIOD) {
                _intLength = outPtr;
                ++_inputPtr;
                return _startFloat(outBuf, outPtr, ch);
            }
            break;
        }
        if (ch > INT_9) {
            if ((ch | 0x20) == INT_e) {
                // ~ 'eE'
                _intLength = outPtr;
                ++_inputPtr;
                return _startFloat(outBuf, outPtr, ch);
            }
            break;
        }
        if (outPtr >= outBuf.length) {
            // NOTE: must expand to ensure contents all in a single buffer (to keep
            // other parts of parsing simpler)
            outBuf = _textBuffer.expandCurrentSegment();
        }
        outBuf[outPtr++] = (char) ch;
        if (++_inputPtr >= _inputEnd) {
            _minorState = MINOR_NUMBER_INTEGER_DIGITS;
            _textBuffer.setCurrentLength(outPtr);
            return _updateTokenToNA();
        }
        ch = getByteFromBuffer(_inputPtr) & 0xFF;
    }
    _intLength = outPtr;
    _textBuffer.setCurrentLength(outPtr);
    return _valueComplete(JsonToken.VALUE_NUMBER_INT);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startPositiveNumber(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startPositiveNumber(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startNegativeNumber()","Method","No Comment","protected JsonToken _startNegativeNumber() throws IOException {
    _numberNegative = true;
    if (_inputPtr >= _inputEnd) {
        _minorState = MINOR_NUMBER_MINUS;
        return _updateTokenToNA();
    }
    int ch = getNextUnsignedByteFromBuffer();
    if (ch <= INT_0) {
        if (ch == INT_0) {
            return _finishNumberLeadingNegZeroes();
        }
        // One special case: if first char is 0, must not be followed by a digit
        _reportUnexpectedNumberChar(ch, ""expected digit (0-9) to follow minus sign, for valid numeric value"");
    } else if (ch > INT_9) {
        if (ch == 'I') {
            return _finishNonStdToken(NON_STD_TOKEN_MINUS_INFINITY, 2);
        }
        _reportUnexpectedNumberChar(ch, ""expected digit (0-9) to follow minus sign, for valid numeric value"");
    }
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    outBuf[0] = '-';
    outBuf[1] = (char) ch;
    if (_inputPtr >= _inputEnd) {
        _minorState = MINOR_NUMBER_INTEGER_DIGITS;
        _textBuffer.setCurrentLength(2);
        _intLength = 1;
        return _updateTokenToNA();
    }
    ch = getByteFromBuffer(_inputPtr);
    int outPtr = 2;
    while (true) {
        if (ch < INT_0) {
            if (ch == INT_PERIOD) {
                _intLength = outPtr - 1;
                ++_inputPtr;
                return _startFloat(outBuf, outPtr, ch);
            }
            break;
        }
        if (ch > INT_9) {
            if ((ch | 0x20) == INT_e) {
                // ~ 'eE'
                _intLength = outPtr - 1;
                ++_inputPtr;
                return _startFloat(outBuf, outPtr, ch);
            }
            break;
        }
        if (outPtr >= outBuf.length) {
            // NOTE: must expand, to ensure contiguous buffer, outPtr is the length
            outBuf = _textBuffer.expandCurrentSegment();
        }
        outBuf[outPtr++] = (char) ch;
        if (++_inputPtr >= _inputEnd) {
            _minorState = MINOR_NUMBER_INTEGER_DIGITS;
            _textBuffer.setCurrentLength(outPtr);
            return _updateTokenToNA();
        }
        ch = getByteFromBuffer(_inputPtr) & 0xFF;
    }
    _intLength = outPtr - 1;
    _textBuffer.setCurrentLength(outPtr);
    return _valueComplete(JsonToken.VALUE_NUMBER_INT);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startPositiveNumber()","Method","No Comment","protected JsonToken _startPositiveNumber() throws IOException {
    _numberNegative = false;
    if (_inputPtr >= _inputEnd) {
        _minorState = MINOR_NUMBER_PLUS;
        return _updateTokenToNA();
    }
    int ch = getNextUnsignedByteFromBuffer();
    if (ch <= INT_0) {
        if (ch == INT_0) {
            if (!isEnabled(JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS.mappedFeature())) {
                _reportUnexpectedNumberChar('+', ""JSON spec does not allow numbers to have plus signs: enable `JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS` to allow"");
            }
            return _finishNumberLeadingPosZeroes();
        }
        // One special case: if first char is 0, must not be followed by a digit
        _reportUnexpectedNumberChar(ch, ""expected digit (0-9) to follow plus sign, for valid numeric value"");
    } else if (ch > INT_9) {
        if (ch == 'I') {
            return _finishNonStdToken(NON_STD_TOKEN_PLUS_INFINITY, 2);
        }
        _reportUnexpectedNumberChar(ch, ""expected digit (0-9) to follow plus sign, for valid numeric value"");
    }
    if (!isEnabled(JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS.mappedFeature())) {
        _reportUnexpectedNumberChar('+', ""JSON spec does not allow numbers to have plus signs: enable `JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS` to allow"");
    }
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    outBuf[0] = '+';
    outBuf[1] = (char) ch;
    if (_inputPtr >= _inputEnd) {
        _minorState = MINOR_NUMBER_INTEGER_DIGITS;
        _textBuffer.setCurrentLength(2);
        _intLength = 1;
        return _updateTokenToNA();
    }
    ch = getByteFromBuffer(_inputPtr);
    int outPtr = 2;
    while (true) {
        if (ch < INT_0) {
            if (ch == INT_PERIOD) {
                _intLength = outPtr - 1;
                ++_inputPtr;
                return _startFloat(outBuf, outPtr, ch);
            }
            break;
        }
        if (ch > INT_9) {
            if ((ch | 0x20) == INT_e) {
                // ~ 'eE'
                _intLength = outPtr - 1;
                ++_inputPtr;
                return _startFloat(outBuf, outPtr, ch);
            }
            break;
        }
        if (outPtr >= outBuf.length) {
            // NOTE: must expand, to ensure contiguous buffer, outPtr is the length
            outBuf = _textBuffer.expandCurrentSegment();
        }
        outBuf[outPtr++] = (char) ch;
        if (++_inputPtr >= _inputEnd) {
            _minorState = MINOR_NUMBER_INTEGER_DIGITS;
            _textBuffer.setCurrentLength(outPtr);
            return _updateTokenToNA();
        }
        ch = getByteFromBuffer(_inputPtr) & 0xFF;
    }
    _intLength = outPtr - 1;
    _textBuffer.setCurrentLength(outPtr);
    return _valueComplete(JsonToken.VALUE_NUMBER_INT);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startNumberLeadingZero()","Method","No Comment","protected JsonToken _startNumberLeadingZero() throws IOException {
    int ptr = _inputPtr;
    if (ptr >= _inputEnd) {
        _minorState = MINOR_NUMBER_ZERO;
        return _updateTokenToNA();
    }
    // While we could call `_finishNumberLeadingZeroes()`, let's try checking
    // the very first char after first zero since the most common case is that
    // there is a separator
    int ch = getByteFromBuffer(ptr++) & 0xFF;
    // one early check: leading zeroes may or may not be allowed
    if (ch < INT_0) {
        if (ch == INT_PERIOD) {
            _inputPtr = ptr;
            _intLength = 1;
            char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
            outBuf[0] = '0';
            return _startFloat(outBuf, 1, ch);
        }
    } else if (ch > INT_9) {
        if ((ch | 0x20) == INT_e) {
            // ~ 'eE'
            _inputPtr = ptr;
            _intLength = 1;
            char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
            outBuf[0] = '0';
            return _startFloat(outBuf, 1, ch);
        }
        // Ok; unfortunately we have closing bracket/curly that are valid so need
        // (colon not possible since this is within value, not after key)
        //
        if ((ch | 0x20) != INT_RCURLY) {
            // ~ '}]'
            _reportUnexpectedNumberChar(ch, ""expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow '0'"");
        }
    } else {
        // leading zero case (zero followed by a digit)
        // leave inputPtr as is (i.e. ""push back"" digit)
        return _finishNumberLeadingZeroes();
    }
    // leave _inputPtr as-is, to push back byte we checked
    return _valueCompleteInt(0, ""0"");
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberMinus(int)","Method","No Comment","protected JsonToken _finishNumberMinus(int ch) throws IOException {
    return _finishNumberPlusMinus(ch, true);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberMinus(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberMinus(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberPlus(int)","Method","No Comment","protected JsonToken _finishNumberPlus(int ch) throws IOException {
    return _finishNumberPlusMinus(ch, false);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberPlus(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberPlus(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberPlusMinus(int,boolean)","Method","No Comment","protected JsonToken _finishNumberPlusMinus(final int ch, final boolean negative) throws IOException {
    if (ch <= INT_0) {
        if (ch == INT_0) {
            if (negative) {
                return _finishNumberLeadingNegZeroes();
            } else {
                if (!isEnabled(JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS.mappedFeature())) {
                    _reportUnexpectedNumberChar('+', ""JSON spec does not allow numbers to have plus signs: enable `JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS` to allow"");
                }
                return _finishNumberLeadingPosZeroes();
            }
        } else if (ch == INT_PERIOD && isEnabled(JsonReadFeature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS.mappedFeature())) {
            if (negative) {
                _inputPtr--;
                return _finishNumberLeadingNegZeroes();
            } else {
                if (!isEnabled(JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS.mappedFeature())) {
                    _reportUnexpectedNumberChar('+', ""JSON spec does not allow numbers to have plus signs: enable `JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS` to allow"");
                }
                _inputPtr--;
                return _finishNumberLeadingPosZeroes();
            }
        }
        final String message = negative ? ""expected digit (0-9) to follow minus sign, for valid numeric value"" : ""expected digit (0-9) for valid numeric value"";
        _reportUnexpectedNumberChar(ch, message);
    } else if (ch > INT_9) {
        if (ch == 'I') {
            final int token = negative ? NON_STD_TOKEN_MINUS_INFINITY : NON_STD_TOKEN_PLUS_INFINITY;
            return _finishNonStdToken(token, 2);
        }
        final String message = negative ? ""expected digit (0-9) to follow minus sign, for valid numeric value"" : ""expected digit (0-9) for valid numeric value"";
        _reportUnexpectedNumberChar(ch, message);
    }
    if (!negative && !isEnabled(JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS.mappedFeature())) {
        _reportUnexpectedNumberChar('+', ""JSON spec does not allow numbers to have plus signs: enable `JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS` to allow"");
    }
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    outBuf[0] = negative ? '-' : '+';
    outBuf[1] = (char) ch;
    _intLength = 1;
    return _finishNumberIntegralPart(outBuf, 2);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberPlusMinus(int,boolean).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberPlusMinus(int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberPlusMinus(int,boolean).negative","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberPlusMinus(int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberLeadingZeroes()","Method","No Comment","protected JsonToken _finishNumberLeadingZeroes() throws IOException {
    // In general, skip further zeroes (if allowed), look for legal follow-up
    // numeric characters; likely legal separators, or, known illegal (letters).
    while (true) {
        if (_inputPtr >= _inputEnd) {
            _minorState = MINOR_NUMBER_ZERO;
            return _updateTokenToNA();
        }
        int ch = getNextUnsignedByteFromBuffer();
        if (ch < INT_0) {
            if (ch == INT_PERIOD) {
                char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
                outBuf[0] = '0';
                _intLength = 1;
                return _startFloat(outBuf, 1, ch);
            }
        } else if (ch > INT_9) {
            if ((ch | 0x20) == INT_e) {
                // ~ 'eE'
                char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
                outBuf[0] = '0';
                _intLength = 1;
                return _startFloat(outBuf, 1, ch);
            }
            // Ok; unfortunately we have closing bracket/curly that are valid so need
            // (colon not possible since this is within value, not after key)
            //
            if ((ch | 0x20) != INT_RCURLY) {
                // ~ '}]'
                _reportUnexpectedNumberChar(ch, ""expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow '0'"");
            }
        } else {
            // Number between 0 and 9
            // although not guaranteed, seems likely valid separator (white space,
            // comma, end bracket/curly); next time token needed will verify
            if ((_features & FEAT_MASK_LEADING_ZEROS) == 0) {
                reportInvalidNumber(""Leading zeroes not allowed"");
            }
            if (ch == INT_0) {
                // coalesce multiple leading zeroes into just one
                continue;
            }
            char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
            // trim out leading zero
            outBuf[0] = (char) ch;
            _intLength = 1;
            return _finishNumberIntegralPart(outBuf, 1);
        }
        --_inputPtr;
        return _valueCompleteInt(0, ""0"");
    }
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberLeadingNegZeroes()","Method","No Comment","protected JsonToken _finishNumberLeadingNegZeroes() throws IOException {
    return _finishNumberLeadingPosNegZeroes(true);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberLeadingPosZeroes()","Method","No Comment","protected JsonToken _finishNumberLeadingPosZeroes() throws IOException {
    return _finishNumberLeadingPosNegZeroes(false);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberLeadingPosNegZeroes(boolean)","Method","No Comment","protected JsonToken _finishNumberLeadingPosNegZeroes(final boolean negative) throws IOException {
    // In general, skip further zeroes (if allowed), look for legal follow-up
    // numeric characters; likely legal separators, or, known illegal (letters).
    while (true) {
        if (_inputPtr >= _inputEnd) {
            _minorState = negative ? MINOR_NUMBER_MINUSZERO : MINOR_NUMBER_ZERO;
            return _updateTokenToNA();
        }
        int ch = getNextUnsignedByteFromBuffer();
        if (ch < INT_0) {
            if (ch == INT_PERIOD) {
                char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
                outBuf[0] = negative ? '-' : '+';
                outBuf[1] = '0';
                _intLength = 1;
                return _startFloat(outBuf, 2, ch);
            }
        } else if (ch > INT_9) {
            if ((ch | 0x20) == INT_e) {
                // ~ 'eE'
                char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
                outBuf[0] = negative ? '-' : '+';
                outBuf[1] = '0';
                _intLength = 1;
                return _startFloat(outBuf, 2, ch);
            }
            // Ok; unfortunately we have closing bracket/curly that are valid so need
            // (colon not possible since this is within value, not after key)
            //
            if ((ch | 0x20) != INT_RCURLY) {
                // ~ '}]'
                _reportUnexpectedNumberChar(ch, ""expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow '0'"");
            }
        } else {
            // Number between 1 and 9; go integral
            // although not guaranteed, seems likely valid separator (white space,
            // comma, end bracket/curly); next time token needed will verify
            if ((_features & FEAT_MASK_LEADING_ZEROS) == 0) {
                reportInvalidNumber(""Leading zeroes not allowed"");
            }
            if (ch == INT_0) {
                // coalesce multiple leading zeroes into just one
                continue;
            }
            char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
            // trim out leading zero
            outBuf[0] = negative ? '-' : '+';
            outBuf[1] = (char) ch;
            _intLength = 1;
            return _finishNumberIntegralPart(outBuf, 2);
        }
        --_inputPtr;
        return _valueCompleteInt(0, ""0"");
    }
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberLeadingPosNegZeroes(boolean).negative","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberLeadingPosNegZeroes(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberIntegralPart(char[],int)","Method","No Comment","protected JsonToken _finishNumberIntegralPart(char[] outBuf, int outPtr) throws IOException {
    int negMod = _numberNegative ? -1 : 0;
    while (true) {
        if (_inputPtr >= _inputEnd) {
            _minorState = MINOR_NUMBER_INTEGER_DIGITS;
            _textBuffer.setCurrentLength(outPtr);
            return _updateTokenToNA();
        }
        int ch = getByteFromBuffer(_inputPtr) & 0xFF;
        if (ch < INT_0) {
            if (ch == INT_PERIOD) {
                _intLength = outPtr + negMod;
                ++_inputPtr;
                return _startFloat(outBuf, outPtr, ch);
            }
            break;
        }
        if (ch > INT_9) {
            if ((ch | 0x20) == INT_e) {
                // ~ 'eE'
                _intLength = outPtr + negMod;
                ++_inputPtr;
                return _startFloat(outBuf, outPtr, ch);
            }
            break;
        }
        ++_inputPtr;
        if (outPtr >= outBuf.length) {
            // NOTE: must expand to ensure contents all in a single buffer (to keep
            // other parts of parsing simpler)
            outBuf = _textBuffer.expandCurrentSegment();
        }
        outBuf[outPtr++] = (char) ch;
    }
    _intLength = outPtr + negMod;
    _textBuffer.setCurrentLength(outPtr);
    return _valueComplete(JsonToken.VALUE_NUMBER_INT);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberIntegralPart(char[],int).outBuf","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberIntegralPart(char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberIntegralPart(char[],int).outPtr","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishNumberIntegralPart(char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startFloat(char[],int,int)","Method","No Comment","protected JsonToken _startFloat(char[] outBuf, int outPtr, int ch) throws IOException {
    int fractLen = 0;
    if (ch == INT_PERIOD) {
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.expandCurrentSegment();
        }
        outBuf[outPtr++] = '.';
        while (true) {
            if (_inputPtr >= _inputEnd) {
                _textBuffer.setCurrentLength(outPtr);
                _minorState = MINOR_NUMBER_FRACTION_DIGITS;
                _fractLength = fractLen;
                return _updateTokenToNA();
            }
            // ok to have sign extension for now
            ch = getNextSignedByteFromBuffer();
            if (ch < INT_0 || ch > INT_9) {
                // but here we'll want to mask it to unsigned 8-bit
                ch &= 0xFF;
                // must be followed by sequence of ints, one minimum
                if (fractLen == 0) {
                    if (!isEnabled(JsonReadFeature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS.mappedFeature())) {
                        _reportUnexpectedNumberChar(ch, ""Decimal point not followed by a digit"");
                    }
                }
                break;
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.expandCurrentSegment();
            }
            outBuf[outPtr++] = (char) ch;
            ++fractLen;
        }
    }
    _fractLength = fractLen;
    int expLen = 0;
    if ((ch | 0x20) == INT_e) {
        // ~ 'eE' exponent?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.expandCurrentSegment();
        }
        outBuf[outPtr++] = (char) ch;
        if (_inputPtr >= _inputEnd) {
            _textBuffer.setCurrentLength(outPtr);
            _minorState = MINOR_NUMBER_EXPONENT_MARKER;
            _expLength = 0;
            return _updateTokenToNA();
        }
        // ok to have sign extension for now
        ch = getNextSignedByteFromBuffer();
        if (ch == INT_MINUS || ch == INT_PLUS) {
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.expandCurrentSegment();
            }
            outBuf[outPtr++] = (char) ch;
            if (_inputPtr >= _inputEnd) {
                _textBuffer.setCurrentLength(outPtr);
                _minorState = MINOR_NUMBER_EXPONENT_DIGITS;
                _expLength = 0;
                return _updateTokenToNA();
            }
            ch = getNextSignedByteFromBuffer();
        }
        while (ch >= INT_0 && ch <= INT_9) {
            ++expLen;
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.expandCurrentSegment();
            }
            outBuf[outPtr++] = (char) ch;
            if (_inputPtr >= _inputEnd) {
                _textBuffer.setCurrentLength(outPtr);
                _minorState = MINOR_NUMBER_EXPONENT_DIGITS;
                _expLength = expLen;
                return _updateTokenToNA();
            }
            ch = getNextSignedByteFromBuffer();
        }
        // must be followed by sequence of ints, one minimum
        ch &= 0xFF;
        if (expLen == 0) {
            _reportUnexpectedNumberChar(ch, ""Exponent indicator not followed by a digit"");
        }
    }
    // push back the last char
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // negative, int-length, fract-length already set, so...
    _expLength = expLen;
    return _valueComplete(JsonToken.VALUE_NUMBER_FLOAT);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startFloat(char[],int,int).outBuf","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startFloat(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startFloat(char[],int,int).outPtr","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startFloat(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startFloat(char[],int,int).ch","Parameter_3","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startFloat(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishFloatFraction()","Method","No Comment","protected JsonToken _finishFloatFraction() throws IOException {
    int fractLen = _fractLength;
    char[] outBuf = _textBuffer.getBufferWithoutReset();
    int outPtr = _textBuffer.getCurrentSegmentSize();
    // caller guarantees at least one char; also, sign-extension not needed here
    int ch = getNextSignedByteFromBuffer();
    boolean loop = true;
    while (loop) {
        if (ch >= INT_0 && ch <= INT_9) {
            ++fractLen;
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.expandCurrentSegment();
            }
            outBuf[outPtr++] = (char) ch;
            if (_inputPtr >= _inputEnd) {
                _textBuffer.setCurrentLength(outPtr);
                _fractLength = fractLen;
                return JsonToken.NOT_AVAILABLE;
            }
            ch = getNextSignedByteFromBuffer();
        } else if ((ch | 0x22) == 'f') {
            // ~ fFdD
            _reportUnexpectedNumberChar(ch, ""JSON does not support parsing numbers that have 'f' or 'd' suffixes"");
        } else if (ch == INT_PERIOD) {
            _reportUnexpectedNumberChar(ch, ""Cannot parse number with more than one decimal point"");
        } else {
            loop = false;
        }
    }
    // Ok, fraction done; what have we got next?
    // must be followed by sequence of ints, one minimum
    if (fractLen == 0) {
        if (!isEnabled(JsonReadFeature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS.mappedFeature())) {
            _reportUnexpectedNumberChar(ch, ""Decimal point not followed by a digit"");
        }
    }
    _fractLength = fractLen;
    _textBuffer.setCurrentLength(outPtr);
    // Ok: end of floating point number or exponent?
    if ((ch | 0x20) == INT_e) {
        // ~ 'eE' exponent?
        _textBuffer.append((char) ch);
        _expLength = 0;
        if (_inputPtr >= _inputEnd) {
            _minorState = MINOR_NUMBER_EXPONENT_MARKER;
            return JsonToken.NOT_AVAILABLE;
        }
        _minorState = MINOR_NUMBER_EXPONENT_DIGITS;
        return _finishFloatExponent(true, getNextUnsignedByteFromBuffer());
    }
    // push back the last char
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // negative, int-length, fract-length already set, so...
    _expLength = 0;
    return _valueComplete(JsonToken.VALUE_NUMBER_FLOAT);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishFloatExponent(boolean,int)","Method","No Comment","protected JsonToken _finishFloatExponent(boolean checkSign, int ch) throws IOException {
    if (checkSign) {
        _minorState = MINOR_NUMBER_EXPONENT_DIGITS;
        if (ch == INT_MINUS || ch == INT_PLUS) {
            _textBuffer.append((char) ch);
            if (_inputPtr >= _inputEnd) {
                _minorState = MINOR_NUMBER_EXPONENT_DIGITS;
                _expLength = 0;
                return JsonToken.NOT_AVAILABLE;
            }
            ch = getNextSignedByteFromBuffer();
        }
    }
    char[] outBuf = _textBuffer.getBufferWithoutReset();
    int outPtr = _textBuffer.getCurrentSegmentSize();
    int expLen = _expLength;
    while (ch >= INT_0 && ch <= INT_9) {
        ++expLen;
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.expandCurrentSegment();
        }
        outBuf[outPtr++] = (char) ch;
        if (_inputPtr >= _inputEnd) {
            _textBuffer.setCurrentLength(outPtr);
            _expLength = expLen;
            return JsonToken.NOT_AVAILABLE;
        }
        ch = getNextSignedByteFromBuffer();
    }
    // must be followed by sequence of ints, one minimum
    ch &= 0xFF;
    if (expLen == 0) {
        _reportUnexpectedNumberChar(ch, ""Exponent indicator not followed by a digit"");
    }
    // push back the last char
    --_inputPtr;
    _textBuffer.setCurrentLength(outPtr);
    // negative, int-length, fract-length already set, so...
    _expLength = expLen;
    return _valueComplete(JsonToken.VALUE_NUMBER_FLOAT);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishFloatExponent(boolean,int).checkSign","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishFloatExponent(boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishFloatExponent(boolean,int).ch","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishFloatExponent(boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._fastParseName()","Method","No Comment","private final String _fastParseName() throws IOException {
    // If so, can also unroll loops nicely
    // This may seem weird, but here we do NOT want to worry about UTF-8
    // decoding. Rather, we'll assume that part is ok (if not it will be
    // caught later on), and just handle quotes and backslashes here.
    final int[] codes = _icLatin1;
    int ptr = _inputPtr;
    int q0 = getByteFromBuffer(ptr++) & 0xFF;
    if (codes[q0] == 0) {
        int i = getByteFromBuffer(ptr++) & 0xFF;
        if (codes[i] == 0) {
            int q = (q0 << 8) | i;
            i = getByteFromBuffer(ptr++) & 0xFF;
            if (codes[i] == 0) {
                q = (q << 8) | i;
                i = getByteFromBuffer(ptr++) & 0xFF;
                if (codes[i] == 0) {
                    q = (q << 8) | i;
                    i = getByteFromBuffer(ptr++) & 0xFF;
                    if (codes[i] == 0) {
                        _quad1 = q;
                        return _parseMediumName(ptr, i);
                    }
                    if (i == INT_QUOTE) {
                        // 4 byte/char case or broken
                        _inputPtr = ptr;
                        return _findName(q, 4);
                    }
                    return null;
                }
                if (i == INT_QUOTE) {
                    // 3 byte/char case or broken
                    _inputPtr = ptr;
                    return _findName(q, 3);
                }
                return null;
            }
            if (i == INT_QUOTE) {
                // 2 byte/char case or broken
                _inputPtr = ptr;
                return _findName(q, 2);
            }
            return null;
        }
        if (i == INT_QUOTE) {
            // one byte/char case or broken
            _inputPtr = ptr;
            return _findName(q0, 1);
        }
        return null;
    }
    if (q0 == INT_QUOTE) {
        _inputPtr = ptr;
        return """";
    }
    return null;
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._parseMediumName(int,int)","Method","No Comment","private final String _parseMediumName(int ptr, int q2) throws IOException {
    final int[] codes = _icLatin1;
    // Ok, got 5 name bytes so far
    int i = getByteFromBuffer(ptr++) & 0xFF;
    if (codes[i] == 0) {
        q2 = (q2 << 8) | i;
        i = getByteFromBuffer(ptr++) & 0xFF;
        if (codes[i] == 0) {
            q2 = (q2 << 8) | i;
            i = getByteFromBuffer(ptr++) & 0xFF;
            if (codes[i] == 0) {
                q2 = (q2 << 8) | i;
                i = getByteFromBuffer(ptr++) & 0xFF;
                if (codes[i] == 0) {
                    return _parseMediumName2(ptr, i, q2);
                }
                if (i == INT_QUOTE) {
                    // 8 bytes
                    _inputPtr = ptr;
                    return _findName(_quad1, q2, 4);
                }
                return null;
            }
            if (i == INT_QUOTE) {
                // 7 bytes
                _inputPtr = ptr;
                return _findName(_quad1, q2, 3);
            }
            return null;
        }
        if (i == INT_QUOTE) {
            // 6 bytes
            _inputPtr = ptr;
            return _findName(_quad1, q2, 2);
        }
        return null;
    }
    if (i == INT_QUOTE) {
        // 5 bytes
        _inputPtr = ptr;
        return _findName(_quad1, q2, 1);
    }
    return null;
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._parseMediumName(int,int).ptr","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._parseMediumName(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._parseMediumName(int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._parseMediumName(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._parseMediumName2(int,int,int)","Method","No Comment","private final String _parseMediumName2(int ptr, int q3, final int q2) throws IOException {
    final int[] codes = _icLatin1;
    // Got 9 name bytes so far
    int i = getByteFromBuffer(ptr++) & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 9 bytes
            _inputPtr = ptr;
            return _findName(_quad1, q2, q3, 1);
        }
        return null;
    }
    q3 = (q3 << 8) | i;
    i = getByteFromBuffer(ptr++) & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 10 bytes
            _inputPtr = ptr;
            return _findName(_quad1, q2, q3, 2);
        }
        return null;
    }
    q3 = (q3 << 8) | i;
    i = getByteFromBuffer(ptr++) & 0xFF;
    if (codes[i] != 0) {
        if (i == INT_QUOTE) {
            // 11 bytes
            _inputPtr = ptr;
            return _findName(_quad1, q2, q3, 3);
        }
        return null;
    }
    q3 = (q3 << 8) | i;
    i = getByteFromBuffer(ptr++) & 0xFF;
    if (i == INT_QUOTE) {
        // 12 bytes
        _inputPtr = ptr;
        return _findName(_quad1, q2, q3, 4);
    }
    // Could continue
    return null;
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._parseMediumName2(int,int,int).ptr","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._parseMediumName2(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._parseMediumName2(int,int,int).q3","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._parseMediumName2(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._parseMediumName2(int,int,int).q2","Parameter_3","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._parseMediumName2(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._parseEscapedName(int,int,int)","Method","* Slower parsing method which is generally branched to when
     * an escape sequence is detected (or alternatively for long
     * names, one crossing input buffer boundary).
     * Needs to be able to handle more exceptional cases, gets slower,
     * and hence is offlined to a separate method.","private final JsonToken _parseEscapedName(int qlen, int currQuad, int currQuadBytes) throws IOException {
    // This may seem weird, but here we do not want to worry about
    // UTF-8 decoding yet. Rather, we'll assume that part is ok (if not it will get
    // caught later on), and just handle quotes and backslashes here.
    int[] quads = _quadBuffer;
    final int[] codes = _icLatin1;
    while (true) {
        if (_inputPtr >= _inputEnd) {
            _quadLength = qlen;
            _pending32 = currQuad;
            _pendingBytes = currQuadBytes;
            _minorState = MINOR_FIELD_NAME;
            return _updateTokenToNA();
        }
        int ch = getNextUnsignedByteFromBuffer();
        if (codes[ch] == 0) {
            if (currQuadBytes < 4) {
                ++currQuadBytes;
                currQuad = (currQuad << 8) | ch;
                continue;
            }
            if (qlen >= quads.length) {
                _quadBuffer = quads = _growNameDecodeBuffer(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
            continue;
        }
        // Otherwise bit longer handling
        if (ch == INT_QUOTE) {
            // we are done
            break;
        }
        // Unquoted white space?
        if (ch != INT_BACKSLASH) {
            // Call can actually now return (if unquoted linefeeds allowed)
            _throwUnquotedSpace(ch, ""name"");
        } else {
            // Nope, escape sequence
            ch = _decodeCharEscape();
            if (ch < 0) {
                // method has set up state about escape sequence
                _minorState = MINOR_FIELD_NAME_ESCAPE;
                _minorStateAfterSplit = MINOR_FIELD_NAME;
                _quadLength = qlen;
                _pending32 = currQuad;
                _pendingBytes = currQuadBytes;
                return _updateTokenToNA();
            }
        }
        // May need to UTF-8 (re-)encode it, if it's beyond
        // 7-bit ASCII. Gets pretty messy. If this happens often, may
        // want to use different name canonicalization to avoid these hits.
        if (qlen >= quads.length) {
            _quadBuffer = quads = _growNameDecodeBuffer(quads, quads.length);
        }
        if (ch > 127) {
            // Ok, we'll need room for first byte right away
            if (currQuadBytes >= 4) {
                quads[qlen++] = currQuad;
                currQuad = 0;
                currQuadBytes = 0;
            }
            if (ch < 0x800) {
                // 2-byte
                currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                ++currQuadBytes;
                // Second byte gets output below:
            } else {
                // 3 bytes; no need to worry about surrogates here
                currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                ++currQuadBytes;
                // need room for middle byte?
                if (currQuadBytes >= 4) {
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                ++currQuadBytes;
            }
            // And same last byte in both cases, gets output below:
            ch = 0x80 | (ch & 0x3f);
        }
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
            continue;
        }
        quads[qlen++] = currQuad;
        currQuad = ch;
        currQuadBytes = 1;
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = _growNameDecodeBuffer(quads, quads.length);
        }
        quads[qlen++] = _padLastQuad(currQuad, currQuadBytes);
    } else if (qlen == 0) {
        // rare, but may happen
        return _fieldComplete("""");
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = _addName(quads, qlen, currQuadBytes);
    }
    return _fieldComplete(name);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._parseEscapedName(int,int,int).qlen","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._parseEscapedName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._parseEscapedName(int,int,int).currQuad","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._parseEscapedName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._parseEscapedName(int,int,int).currQuadBytes","Parameter_3","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._parseEscapedName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._handleOddName(int)","Method","* Method called when we see non-white space character other
     * than double quote, when expecting a field name.
     * In standard mode will just throw an exception; but
     * in non-standard modes may be able to parse name.","private JsonToken _handleOddName(int ch) throws IOException {
    // First: may allow single quotes
    switch(ch) {
        case '#':
            // Careful, since this may alternatively be leading char of
            // unquoted name...
            if ((_features & FEAT_MASK_ALLOW_YAML_COMMENTS) != 0) {
                return _finishHashComment(MINOR_FIELD_LEADING_WS);
            }
            break;
        case '/':
            return _startSlashComment(MINOR_FIELD_LEADING_WS);
        case '\'':
            if ((_features & FEAT_MASK_ALLOW_SINGLE_QUOTES) != 0) {
                return _finishAposName(0, 0, 0);
            }
            break;
        case // for better error reporting...
        INT_RBRACKET:
            return _closeArrayScope();
    }
    // allow unquoted names if feature enabled:
    if ((_features & FEAT_MASK_ALLOW_UNQUOTED_NAMES) == 0) {
        // !!! TODO: Decode UTF-8 characters properly...
        //            char c = (char) _decodeCharForError(ch);
        char c = (char) ch;
        _reportUnexpectedChar(c, ""was expecting double-quote to start field name"");
    }
    // Also: note that although we use a different table here, it does NOT handle UTF-8
    // decoding. It'll just pass those high-bit codes as acceptable for later decoding.
    final int[] codes = CharTypes.getInputCodeUtf8JsNames();
    // Also: must start with a valid character...
    if (codes[ch] != 0) {
        _reportUnexpectedChar(ch, ""was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"");
    }
    return _finishUnquotedName(0, ch, 1);
}","JsonToken","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._handleOddName(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._handleOddName(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishUnquotedName(int,int,int)","Method","* Parsing of optionally supported non-standard ""unquoted"" names: names without
     * either double-quotes or apostrophes surrounding them.
     * Unlike other","private JsonToken _finishUnquotedName(int qlen, int currQuad, int currQuadBytes) throws IOException {
    int[] quads = _quadBuffer;
    final int[] codes = CharTypes.getInputCodeUtf8JsNames();
    // Ok, now; instead of ultra-optimizing parsing here (as with regular JSON names),
    // let's just use the generic ""slow"" variant. Can measure its impact later on if need be.
    while (true) {
        if (_inputPtr >= _inputEnd) {
            _quadLength = qlen;
            _pending32 = currQuad;
            _pendingBytes = currQuadBytes;
            _minorState = MINOR_FIELD_UNQUOTED_NAME;
            return _updateTokenToNA();
        }
        int ch = getByteFromBuffer(_inputPtr) & 0xFF;
        if (codes[ch] != 0) {
            break;
        }
        ++_inputPtr;
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = _growNameDecodeBuffer(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = _growNameDecodeBuffer(quads, quads.length);
        }
        quads[qlen++] = currQuad;
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = _addName(quads, qlen, currQuadBytes);
    }
    return _fieldComplete(name);
}","JsonToken","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishUnquotedName(int,int,int).qlen","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishUnquotedName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishUnquotedName(int,int,int).currQuad","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishUnquotedName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishUnquotedName(int,int,int).currQuadBytes","Parameter_3","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishUnquotedName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishAposName(int,int,int)","Method","No Comment","private JsonToken _finishAposName(int qlen, int currQuad, int currQuadBytes) throws IOException {
    int[] quads = _quadBuffer;
    final int[] codes = _icLatin1;
    while (true) {
        if (_inputPtr >= _inputEnd) {
            _quadLength = qlen;
            _pending32 = currQuad;
            _pendingBytes = currQuadBytes;
            _minorState = MINOR_FIELD_APOS_NAME;
            return _updateTokenToNA();
        }
        int ch = getNextUnsignedByteFromBuffer();
        if (ch == INT_APOS) {
            break;
        }
        // additional check to skip handling of double-quotes
        if (ch != '""' && codes[ch] != 0) {
            if (ch != '\\') {
                // Unquoted white space?
                _throwUnquotedSpace(ch, ""name"");
            } else {
                // Nope, escape sequence
                ch = _decodeCharEscape();
                if (ch < 0) {
                    // method has set up state about escape sequence
                    _minorState = MINOR_FIELD_NAME_ESCAPE;
                    _minorStateAfterSplit = MINOR_FIELD_APOS_NAME;
                    _quadLength = qlen;
                    _pending32 = currQuad;
                    _pendingBytes = currQuadBytes;
                    return _updateTokenToNA();
                }
            }
            if (ch > 127) {
                // Ok, we'll need room for first byte right away
                if (currQuadBytes >= 4) {
                    if (qlen >= quads.length) {
                        _quadBuffer = quads = _growNameDecodeBuffer(quads, quads.length);
                    }
                    quads[qlen++] = currQuad;
                    currQuad = 0;
                    currQuadBytes = 0;
                }
                if (ch < 0x800) {
                    // 2-byte
                    currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
                    ++currQuadBytes;
                    // Second byte gets output below:
                } else {
                    // 3 bytes; no need to worry about surrogates here
                    currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
                    ++currQuadBytes;
                    // need room for middle byte?
                    if (currQuadBytes >= 4) {
                        if (qlen >= quads.length) {
                            _quadBuffer = quads = _growNameDecodeBuffer(quads, quads.length);
                        }
                        quads[qlen++] = currQuad;
                        currQuad = 0;
                        currQuadBytes = 0;
                    }
                    currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
                    ++currQuadBytes;
                }
                // And same last byte in both cases, gets output below:
                ch = 0x80 | (ch & 0x3f);
            }
        }
        // Ok, we have one more byte to add at any rate:
        if (currQuadBytes < 4) {
            ++currQuadBytes;
            currQuad = (currQuad << 8) | ch;
        } else {
            if (qlen >= quads.length) {
                _quadBuffer = quads = _growNameDecodeBuffer(quads, quads.length);
            }
            quads[qlen++] = currQuad;
            currQuad = ch;
            currQuadBytes = 1;
        }
    }
    if (currQuadBytes > 0) {
        if (qlen >= quads.length) {
            _quadBuffer = quads = _growNameDecodeBuffer(quads, quads.length);
        }
        quads[qlen++] = _padLastQuad(currQuad, currQuadBytes);
    } else if (qlen == 0) {
        // rare case but possible
        return _fieldComplete("""");
    }
    String name = _symbols.findName(quads, qlen);
    if (name == null) {
        name = _addName(quads, qlen, currQuadBytes);
    }
    return _fieldComplete(name);
}","JsonToken","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishAposName(int,int,int).qlen","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishAposName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishAposName(int,int,int).currQuad","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishAposName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishAposName(int,int,int).currQuadBytes","Parameter_3","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishAposName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishFieldWithEscape()","Method","No Comment","protected final JsonToken _finishFieldWithEscape() throws IOException {
    // First: try finishing what wasn't yet:
    int ch = _decodeSplitEscaped(_quoted32, _quotedDigits);
    if (ch < 0) {
        // ... if possible
        _minorState = MINOR_FIELD_NAME_ESCAPE;
        return JsonToken.NOT_AVAILABLE;
    }
    if (_quadLength >= _quadBuffer.length) {
        _quadBuffer = _growNameDecodeBuffer(_quadBuffer, 32);
    }
    int currQuad = _pending32;
    int currQuadBytes = _pendingBytes;
    if (ch > 127) {
        // Ok, we'll need room for first byte right away
        if (currQuadBytes >= 4) {
            _quadBuffer[_quadLength++] = currQuad;
            currQuad = 0;
            currQuadBytes = 0;
        }
        if (ch < 0x800) {
            // 2-byte
            currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));
            ++currQuadBytes;
            // Second byte gets output below:
        } else {
            // 3 bytes; no need to worry about surrogates here
            currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));
            // need room for middle byte?
            if (++currQuadBytes >= 4) {
                _quadBuffer[_quadLength++] = currQuad;
                currQuad = 0;
                currQuadBytes = 0;
            }
            currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));
            ++currQuadBytes;
        }
        // And same last byte in both cases, gets output below:
        ch = 0x80 | (ch & 0x3f);
    }
    if (currQuadBytes < 4) {
        ++currQuadBytes;
        currQuad = (currQuad << 8) | ch;
    } else {
        _quadBuffer[_quadLength++] = currQuad;
        currQuad = ch;
        currQuadBytes = 1;
    }
    if (_minorStateAfterSplit == MINOR_FIELD_APOS_NAME) {
        return _finishAposName(_quadLength, currQuad, currQuadBytes);
    }
    return _parseEscapedName(_quadLength, currQuad, currQuadBytes);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitEscaped(int,int)","Method","No Comment","private int _decodeSplitEscaped(int value, int bytesRead) throws IOException {
    if (_inputPtr >= _inputEnd) {
        _quoted32 = value;
        _quotedDigits = bytesRead;
        return -1;
    }
    int c = getNextSignedByteFromBuffer();
    if (bytesRead == -1) {
        // expecting first char after backslash
        switch(c) {
            // First, ones that are mapped
            case 'b':
                return '\b';
            case 't':
                return '\t';
            case 'n':
                return '\n';
            case 'f':
                return '\f';
            case 'r':
                return '\r';
            // And these are to be returned as they are
            case '""':
            case '/':
            case '\\':
                return c;
            case // and finally hex-escaped
            'u':
                break;
            default:
                {
                    // !!! TODO: Decode UTF-8 characters properly...
                    //              char ch = (char) _decodeCharForError(c);
                    char ch = (char) c;
                    return _handleUnrecognizedCharacterEscape(ch);
                }
        }
        if (_inputPtr >= _inputEnd) {
            _quotedDigits = 0;
            _quoted32 = 0;
            return -1;
        }
        c = getNextSignedByteFromBuffer();
        bytesRead = 0;
    }
    c &= 0xFF;
    while (true) {
        int digit = CharTypes.charToHex(c);
        if (digit < 0) {
            _reportUnexpectedChar(c & 0xFF, ""expected a hex-digit for character escape sequence"");
        }
        value = (value << 4) | digit;
        if (++bytesRead == 4) {
            return value;
        }
        if (_inputPtr >= _inputEnd) {
            _quotedDigits = bytesRead;
            _quoted32 = value;
            return -1;
        }
        c = getNextUnsignedByteFromBuffer();
    }
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitEscaped(int,int).value","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitEscaped(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitEscaped(int,int).bytesRead","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitEscaped(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startString()","Method","No Comment","protected JsonToken _startString() throws IOException {
    int ptr = _inputPtr;
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    while (ptr < max) {
        int c = getByteFromBuffer(ptr) & 0xFF;
        if (codes[c] != 0) {
            if (c == INT_QUOTE) {
                _inputPtr = ptr + 1;
                _textBuffer.setCurrentLength(outPtr);
                return _valueComplete(JsonToken.VALUE_STRING);
            }
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    _inputPtr = ptr;
    return _finishRegularString();
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishRegularString()","Method","No Comment","private final JsonToken _finishRegularString() throws IOException {
    int c;
    // Here we do want to do full decoding, hence:
    final int[] codes = _icUTF8;
    char[] outBuf = _textBuffer.getBufferWithoutReset();
    int outPtr = _textBuffer.getCurrentSegmentSize();
    int ptr = _inputPtr;
    // longest escape is 6 chars
    final int safeEnd = _inputEnd - 5;
    main_loop: while (true) {
        // Then the tight ASCII non-funny-char loop:
        ascii_loop: while (true) {
            if (ptr >= _inputEnd) {
                _inputPtr = ptr;
                _minorState = MINOR_VALUE_STRING;
                _textBuffer.setCurrentLength(outPtr);
                return _updateTokenToNA();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            final int max = Math.min(_inputEnd, InternalJacksonUtil.addOverflowSafe(ptr, outBuf.length - outPtr));
            while (ptr < max) {
                c = getByteFromBuffer(ptr++) & 0xFF;
                if (codes[c] != 0) {
                    break ascii_loop;
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Ok: end marker, escape or multi-byte?
        if (c == INT_QUOTE) {
            _inputPtr = ptr;
            _textBuffer.setCurrentLength(outPtr);
            return _valueComplete(JsonToken.VALUE_STRING);
        }
        // If possibly split, use off-lined longer version
        if (ptr >= safeEnd) {
            _inputPtr = ptr;
            _textBuffer.setCurrentLength(outPtr);
            if (!_decodeSplitMultiByte(c, codes[c], ptr < _inputEnd)) {
                _minorStateAfterSplit = MINOR_VALUE_STRING;
                return _updateTokenToNA();
            }
            outBuf = _textBuffer.getBufferWithoutReset();
            outPtr = _textBuffer.getCurrentSegmentSize();
            ptr = _inputPtr;
            continue main_loop;
        }
        // otherwise use inlined
        switch(codes[c]) {
            case // backslash
            1:
                _inputPtr = ptr;
                // since we know it's not split
                c = _decodeFastCharEscape();
                ptr = _inputPtr;
                break;
            case // 2-byte UTF
            2:
                c = _decodeUTF8_2(c, getByteFromBuffer(ptr++));
                break;
            case // 3-byte UTF
            3:
                c = _decodeUTF8_3(c, getByteFromBuffer(ptr++), getByteFromBuffer(ptr++));
                break;
            case // 4-byte UTF
            4:
                c = _decodeUTF8_4(c, getByteFromBuffer(ptr++), getByteFromBuffer(ptr++), getByteFromBuffer(ptr++));
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    // Note: call can now actually return (to allow unquoted linefeeds)
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._startAposString()","Method","No Comment","protected JsonToken _startAposString() throws IOException {
    int ptr = _inputPtr;
    int outPtr = 0;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    final int[] codes = _icUTF8;
    final int max = Math.min(_inputEnd, (ptr + outBuf.length));
    while (ptr < max) {
        int c = getByteFromBuffer(ptr) & 0xFF;
        if (c == INT_APOS) {
            _inputPtr = ptr + 1;
            _textBuffer.setCurrentLength(outPtr);
            return _valueComplete(JsonToken.VALUE_STRING);
        }
        if (codes[c] != 0) {
            break;
        }
        ++ptr;
        outBuf[outPtr++] = (char) c;
    }
    _textBuffer.setCurrentLength(outPtr);
    _inputPtr = ptr;
    return _finishAposString();
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._finishAposString()","Method","No Comment","private final JsonToken _finishAposString() throws IOException {
    int c;
    final int[] codes = _icUTF8;
    char[] outBuf = _textBuffer.getBufferWithoutReset();
    int outPtr = _textBuffer.getCurrentSegmentSize();
    int ptr = _inputPtr;
    // longest escape is 6 chars
    final int safeEnd = _inputEnd - 5;
    main_loop: while (true) {
        ascii_loop: while (true) {
            if (ptr >= _inputEnd) {
                _inputPtr = ptr;
                _minorState = MINOR_VALUE_APOS_STRING;
                _textBuffer.setCurrentLength(outPtr);
                return _updateTokenToNA();
            }
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            final int max = Math.min(_inputEnd, InternalJacksonUtil.addOverflowSafe(ptr, outBuf.length - outPtr));
            while (ptr < max) {
                c = getByteFromBuffer(ptr++) & 0xFF;
                if ((codes[c] != 0) && (c != INT_QUOTE)) {
                    break ascii_loop;
                }
                if (c == INT_APOS) {
                    _inputPtr = ptr;
                    _textBuffer.setCurrentLength(outPtr);
                    return _valueComplete(JsonToken.VALUE_STRING);
                }
                outBuf[outPtr++] = (char) c;
            }
        }
        // Escape or multi-byte?
        // If possibly split, use off-lined longer version
        if (ptr >= safeEnd) {
            _inputPtr = ptr;
            _textBuffer.setCurrentLength(outPtr);
            if (!_decodeSplitMultiByte(c, codes[c], ptr < _inputEnd)) {
                _minorStateAfterSplit = MINOR_VALUE_APOS_STRING;
                return _updateTokenToNA();
            }
            outBuf = _textBuffer.getBufferWithoutReset();
            outPtr = _textBuffer.getCurrentSegmentSize();
            ptr = _inputPtr;
            continue main_loop;
        }
        // otherwise use inlined
        switch(codes[c]) {
            case // backslash
            1:
                _inputPtr = ptr;
                // since we know it's not split
                c = _decodeFastCharEscape();
                ptr = _inputPtr;
                break;
            case // 2-byte UTF
            2:
                c = _decodeUTF8_2(c, getByteFromBuffer(ptr++));
                break;
            case // 3-byte UTF
            3:
                c = _decodeUTF8_3(c, getByteFromBuffer(ptr++), getByteFromBuffer(ptr++));
                break;
            case // 4-byte UTF
            4:
                c = _decodeUTF8_4(c, getByteFromBuffer(ptr++), getByteFromBuffer(ptr++), getByteFromBuffer(ptr++));
                // Let's add first part right away:
                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));
                if (outPtr >= outBuf.length) {
                    outBuf = _textBuffer.finishCurrentSegment();
                    outPtr = 0;
                }
                c = 0xDC00 | (c & 0x3FF);
                // And let the other char output down below
                break;
            default:
                if (c < INT_SPACE) {
                    // Note: call can now actually return (to allow unquoted linefeeds)
                    _throwUnquotedSpace(c, ""string value"");
                } else {
                    // Is this good enough error message?
                    _reportInvalidChar(c);
                }
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = (char) c;
    }
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitMultiByte(int,int,boolean)","Method","No Comment","private final boolean _decodeSplitMultiByte(int c, int type, boolean gotNext) throws IOException {
    switch(type) {
        case 1:
            c = _decodeSplitEscaped(0, -1);
            if (c < 0) {
                _minorState = MINOR_VALUE_STRING_ESCAPE;
                return false;
            }
            _textBuffer.append((char) c);
            return true;
        case // 2-byte UTF; easy, either got both, or just miss one
        2:
            if (gotNext) {
                // NOTE: always succeeds, no need to check
                c = _decodeUTF8_2(c, getNextSignedByteFromBuffer());
                _textBuffer.append((char) c);
                return true;
            }
            _minorState = MINOR_VALUE_STRING_UTF8_2;
            _pending32 = c;
            return false;
        case // 3-byte UTF
        3:
            c &= 0x0F;
            if (gotNext) {
                return _decodeSplitUTF8_3(c, 1, getNextSignedByteFromBuffer());
            }
            _minorState = MINOR_VALUE_STRING_UTF8_3;
            _pending32 = c;
            _pendingBytes = 1;
            return false;
        case // 4-byte UTF
        4:
            c &= 0x07;
            if (gotNext) {
                return _decodeSplitUTF8_4(c, 1, getNextSignedByteFromBuffer());
            }
            _pending32 = c;
            _pendingBytes = 1;
            _minorState = MINOR_VALUE_STRING_UTF8_4;
            return false;
        default:
            if (c < INT_SPACE) {
                // Note: call can now actually return (to allow unquoted linefeeds)
                _throwUnquotedSpace(c, ""string value"");
            } else {
                // Is this good enough error message?
                _reportInvalidChar(c);
            }
            _textBuffer.append((char) c);
            return true;
    }
}","boolean","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitMultiByte(int,int,boolean).c","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitMultiByte(int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitMultiByte(int,int,boolean).type","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitMultiByte(int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitMultiByte(int,int,boolean).gotNext","Parameter_3","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitMultiByte(int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitUTF8_3(int,int,int)","Method","No Comment","private final boolean _decodeSplitUTF8_3(int prev, int prevCount, int next) throws IOException {
    if (prevCount == 1) {
        if ((next & 0xC0) != 0x080) {
            _reportInvalidOther(next & 0xFF, _inputPtr);
        }
        prev = (prev << 6) | (next & 0x3F);
        if (_inputPtr >= _inputEnd) {
            _minorState = MINOR_VALUE_STRING_UTF8_3;
            _pending32 = prev;
            _pendingBytes = 2;
            return false;
        }
        next = getNextSignedByteFromBuffer();
    }
    if ((next & 0xC0) != 0x080) {
        _reportInvalidOther(next & 0xFF, _inputPtr);
    }
    _textBuffer.append((char) ((prev << 6) | (next & 0x3F)));
    return true;
}","boolean","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitUTF8_3(int,int,int).prev","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitUTF8_3(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitUTF8_3(int,int,int).prevCount","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitUTF8_3(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitUTF8_3(int,int,int).next","Parameter_3","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitUTF8_3(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitUTF8_4(int,int,int)","Method","can readily expand it to actual surrogates","private final boolean _decodeSplitUTF8_4(int prev, int prevCount, int next) throws IOException {
    if (prevCount == 1) {
        if ((next & 0xC0) != 0x080) {
            _reportInvalidOther(next & 0xFF, _inputPtr);
        }
        prev = (prev << 6) | (next & 0x3F);
        if (_inputPtr >= _inputEnd) {
            _minorState = MINOR_VALUE_STRING_UTF8_4;
            _pending32 = prev;
            _pendingBytes = 2;
            return false;
        }
        prevCount = 2;
        next = getNextSignedByteFromBuffer();
    }
    if (prevCount == 2) {
        if ((next & 0xC0) != 0x080) {
            _reportInvalidOther(next & 0xFF, _inputPtr);
        }
        prev = (prev << 6) | (next & 0x3F);
        if (_inputPtr >= _inputEnd) {
            _minorState = MINOR_VALUE_STRING_UTF8_4;
            _pending32 = prev;
            _pendingBytes = 3;
            return false;
        }
        next = getNextSignedByteFromBuffer();
    }
    if ((next & 0xC0) != 0x080) {
        _reportInvalidOther(next & 0xFF, _inputPtr);
    }
    int c = ((prev << 6) | (next & 0x3F)) - 0x10000;
    // Let's add first part right away:
    _textBuffer.append((char) (0xD800 | (c >> 10)));
    c = 0xDC00 | (c & 0x3FF);
    // And let the other char output down below
    _textBuffer.append((char) c);
    return true;
}","boolean","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitUTF8_4(int,int,int).prev","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitUTF8_4(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitUTF8_4(int,int,int).prevCount","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitUTF8_4(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitUTF8_4(int,int,int).next","Parameter_3","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeSplitUTF8_4(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeCharEscape()","Method","No Comment","private final int _decodeCharEscape() throws IOException {
    int left = _inputEnd - _inputPtr;
    if (left < 5) {
        // offline boundary-checking case:
        return _decodeSplitEscaped(0, -1);
    }
    return _decodeFastCharEscape();
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeFastCharEscape()","Method","No Comment","private final int _decodeFastCharEscape() throws IOException {
    int c = getNextSignedByteFromBuffer();
    switch(c) {
        // First, ones that are mapped
        case 'b':
            return '\b';
        case 't':
            return '\t';
        case 'n':
            return '\n';
        case 'f':
            return '\f';
        case 'r':
            return '\r';
        // And these are to be returned as they are
        case '""':
        case '/':
        case '\\':
            return (char) c;
        case // and finally hex-escaped
        'u':
            break;
        default:
            {
                // !!! TODO: Decode UTF-8 characters properly...
                //              char ch = (char) _decodeCharForError(c);
                char ch = (char) c;
                return _handleUnrecognizedCharacterEscape(ch);
            }
    }
    int ch = getNextSignedByteFromBuffer();
    int digit = CharTypes.charToHex(ch);
    int result = digit;
    if (digit >= 0) {
        ch = getNextSignedByteFromBuffer();
        digit = CharTypes.charToHex(ch);
        if (digit >= 0) {
            result = (result << 4) | digit;
            ch = getNextSignedByteFromBuffer();
            digit = CharTypes.charToHex(ch);
            if (digit >= 0) {
                result = (result << 4) | digit;
                ch = getNextSignedByteFromBuffer();
                digit = CharTypes.charToHex(ch);
                if (digit >= 0) {
                    return (result << 4) | digit;
                }
            }
        }
    }
    _reportUnexpectedChar(ch & 0xFF, ""expected a hex-digit for character escape sequence"");
    return -1;
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_2(int,int)","Method","No Comment","private final int _decodeUTF8_2(int c, int d) throws IOException {
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF, _inputPtr);
    }
    return ((c & 0x1F) << 6) | (d & 0x3F);
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_2(int,int).c","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_2(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_2(int,int).d","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_2(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_3(int,int,int)","Method","No Comment","private final int _decodeUTF8_3(int c, int d, int e) throws IOException {
    c &= 0x0F;
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF, _inputPtr);
    }
    c = (c << 6) | (d & 0x3F);
    if ((e & 0xC0) != 0x080) {
        _reportInvalidOther(e & 0xFF, _inputPtr);
    }
    return (c << 6) | (e & 0x3F);
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_3(int,int,int).c","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_3(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_3(int,int,int).d","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_3(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_3(int,int,int).e","Parameter_3","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_3(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_4(int,int,int,int)","Method","can readily expand it to actual surrogates","private final int _decodeUTF8_4(int c, int d, int e, int f) throws IOException {
    if ((d & 0xC0) != 0x080) {
        _reportInvalidOther(d & 0xFF, _inputPtr);
    }
    c = ((c & 0x07) << 6) | (d & 0x3F);
    if ((e & 0xC0) != 0x080) {
        _reportInvalidOther(e & 0xFF, _inputPtr);
    }
    c = (c << 6) | (e & 0x3F);
    if ((f & 0xC0) != 0x080) {
        _reportInvalidOther(f & 0xFF, _inputPtr);
    }
    return ((c << 6) | (f & 0x3F)) - 0x10000;
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_4(int,int,int,int).c","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_4(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_4(int,int,int,int).d","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_4(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_4(int,int,int,int).e","Parameter_3","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_4(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_4(int,int,int,int).f","Parameter_4","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._decodeUTF8_4(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.<init>(IOContext,int,ByteQuadsCanonicalizer)","Constructor","No Comment","protected NonBlockingUtf8JsonParserBase(IOContext ctxt, int parserFeatures, ByteQuadsCanonicalizer sym) {
    super(ctxt, parserFeatures, sym);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.<init>(IOContext,int,ByteQuadsCanonicalizer).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.<init>(IOContext,int,ByteQuadsCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.<init>(IOContext,int,ByteQuadsCanonicalizer).parserFeatures","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.<init>(IOContext,int,ByteQuadsCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.<init>(IOContext,int,ByteQuadsCanonicalizer).sym","Parameter_3","Belong to com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.<init>(IOContext,int,ByteQuadsCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase","Abstract Class","* Intermediate base class for non-blocking JSON parsers.
 *
 * @since 2.9","Abstract Class do not obtain Source Code","No return type","public , abstract ","com.fasterxml.jackson.core.json.JsonParserBase",""
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MAJOR_INITIAL","Field","* State right after parser has been constructed, before seeing the first byte
     * to handle possible (but optional) BOM.","protected final static int MAJOR_INITIAL = 0;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MAJOR_ROOT","Field","* State right after parser a root value has been
     * finished, but next token has not yet been recognized.","protected final static int MAJOR_ROOT = 1;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MAJOR_OBJECT_FIELD_FIRST","Field","No Comment","protected final static int MAJOR_OBJECT_FIELD_FIRST = 2;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MAJOR_OBJECT_FIELD_NEXT","Field","No Comment","protected final static int MAJOR_OBJECT_FIELD_NEXT = 3;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MAJOR_OBJECT_VALUE","Field","No Comment","protected final static int MAJOR_OBJECT_VALUE = 4;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MAJOR_ARRAY_ELEMENT_FIRST","Field","No Comment","protected final static int MAJOR_ARRAY_ELEMENT_FIRST = 5;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MAJOR_ARRAY_ELEMENT_NEXT","Field","No Comment","protected final static int MAJOR_ARRAY_ELEMENT_NEXT = 6;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MAJOR_CLOSED","Field","* State after non-blocking input source has indicated that no more input
     * is forthcoming AND we have exhausted all the input","protected final static int MAJOR_CLOSED = 7;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_ROOT_BOM","Field","* State in which part of (UTF-8) BOM has been detected, but not yet completely.","protected final static int MINOR_ROOT_BOM = 1;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_ROOT_NEED_SEPARATOR","Field","* State between root-level value, waiting for at least one white-space
     * character as separator","protected final static int MINOR_ROOT_NEED_SEPARATOR = 2;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_ROOT_GOT_SEPARATOR","Field","* State between root-level value, having processed at least one white-space
     * character, and expecting either more, start of a value, or end of input
     * stream.","protected final static int MINOR_ROOT_GOT_SEPARATOR = 3;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_FIELD_LEADING_WS","Field","state before field name itself, waiting for quote (or unquoted name)","protected final static int MINOR_FIELD_LEADING_WS = 4;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_FIELD_LEADING_COMMA","Field","state before field name, expecting comma (or closing curly), then field name","protected final static int MINOR_FIELD_LEADING_COMMA = 5;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_FIELD_NAME","Field","State within regular (double-quoted) field name","protected final static int MINOR_FIELD_NAME = 7;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_FIELD_NAME_ESCAPE","Field","encountered either just backslash, or backslash and 'u' and 0 - 3 hex digits,","protected final static int MINOR_FIELD_NAME_ESCAPE = 8;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_FIELD_APOS_NAME","Field","No Comment","protected final static int MINOR_FIELD_APOS_NAME = 9;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_FIELD_UNQUOTED_NAME","Field","No Comment","protected final static int MINOR_FIELD_UNQUOTED_NAME = 10;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_LEADING_WS","Field","No Comment","protected final static int MINOR_VALUE_LEADING_WS = 12;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_EXPECTING_COMMA","Field","No Comment","protected final static int MINOR_VALUE_EXPECTING_COMMA = 13;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_EXPECTING_COLON","Field","No Comment","protected final static int MINOR_VALUE_EXPECTING_COLON = 14;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_WS_AFTER_COMMA","Field","No Comment","protected final static int MINOR_VALUE_WS_AFTER_COMMA = 15;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_TOKEN_NULL","Field","No Comment","protected final static int MINOR_VALUE_TOKEN_NULL = 16;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_TOKEN_TRUE","Field","No Comment","protected final static int MINOR_VALUE_TOKEN_TRUE = 17;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_TOKEN_FALSE","Field","No Comment","protected final static int MINOR_VALUE_TOKEN_FALSE = 18;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_TOKEN_NON_STD","Field","No Comment","protected final static int MINOR_VALUE_TOKEN_NON_STD = 19;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_NUMBER_PLUS","Field","No Comment","protected final static int MINOR_NUMBER_PLUS = 22;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_NUMBER_MINUS","Field","No Comment","protected final static int MINOR_NUMBER_MINUS = 23;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_NUMBER_ZERO","Field","zero as first, possibly trimming multiple","protected final static int MINOR_NUMBER_ZERO = 24;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_NUMBER_MINUSZERO","Field","""-0"" (and possibly more zeroes) receive","protected final static int MINOR_NUMBER_MINUSZERO = 25;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_NUMBER_INTEGER_DIGITS","Field","No Comment","protected final static int MINOR_NUMBER_INTEGER_DIGITS = 26;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_NUMBER_FRACTION_DIGITS","Field","No Comment","protected final static int MINOR_NUMBER_FRACTION_DIGITS = 30;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_NUMBER_EXPONENT_MARKER","Field","No Comment","protected final static int MINOR_NUMBER_EXPONENT_MARKER = 31;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_NUMBER_EXPONENT_DIGITS","Field","No Comment","protected final static int MINOR_NUMBER_EXPONENT_DIGITS = 32;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_STRING","Field","No Comment","protected final static int MINOR_VALUE_STRING = 40;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_STRING_ESCAPE","Field","No Comment","protected final static int MINOR_VALUE_STRING_ESCAPE = 41;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_STRING_UTF8_2","Field","No Comment","protected final static int MINOR_VALUE_STRING_UTF8_2 = 42;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_STRING_UTF8_3","Field","No Comment","protected final static int MINOR_VALUE_STRING_UTF8_3 = 43;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_STRING_UTF8_4","Field","No Comment","protected final static int MINOR_VALUE_STRING_UTF8_4 = 44;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_APOS_STRING","Field","No Comment","protected final static int MINOR_VALUE_APOS_STRING = 45;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_TOKEN_ERROR","Field","* Special state at which point decoding of a non-quoted token has encountered
     * a problem; that is, either not matching fully (like ""truf"" instead of ""true"",
     * at ""tru""), or not having trailing separator (or end of input), like ""trueful"".
     * Attempt is made, then, to decode likely full input token to report suitable
     * error.","protected final static int MINOR_VALUE_TOKEN_ERROR = 50;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_COMMENT_LEADING_SLASH","Field","No Comment","protected final static int MINOR_COMMENT_LEADING_SLASH = 51;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_COMMENT_CLOSING_ASTERISK","Field","No Comment","protected final static int MINOR_COMMENT_CLOSING_ASTERISK = 52;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_COMMENT_C","Field","No Comment","protected final static int MINOR_COMMENT_C = 53;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_COMMENT_CPP","Field","No Comment","protected final static int MINOR_COMMENT_CPP = 54;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_COMMENT_YAML","Field","No Comment","protected final static int MINOR_COMMENT_YAML = 55;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._symbols","Field","* Symbol table that contains field names encountered so far","final protected ByteQuadsCanonicalizer _symbols;","No return type","final , protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._quadBuffer","Field","* Temporary buffer used for name parsing.","protected int[] _quadBuffer = new int[8];","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._quadLength","Field","No Comment","protected int _quadLength;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._quad1","Field","No Comment","protected int _quad1;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._pending32","Field","No Comment","protected int _pending32;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._pendingBytes","Field","No Comment","protected int _pendingBytes;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._quoted32","Field","No Comment","protected int _quoted32;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._quotedDigits","Field","No Comment","protected int _quotedDigits;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._majorState","Field","* Current main decoding state within logical tree","protected int _majorState;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._majorStateAfterValue","Field","* Value of {@link #_majorState} after completing a scalar value","protected int _majorStateAfterValue;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._minorState","Field","* Additional indicator within state; contextually relevant for just that state","protected int _minorState;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._minorStateAfterSplit","Field","* Secondary minor state indicator used during decoding of escapes and/or
     * multi-byte Unicode characters","protected int _minorStateAfterSplit;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._endOfInput","Field","* Flag that is sent when calling application indicates that there will
     * be no more input to parse.","protected boolean _endOfInput = false;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.NON_STD_TOKEN_NAN","Field","No Comment","protected final static int NON_STD_TOKEN_NAN = 0;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.NON_STD_TOKEN_INFINITY","Field","No Comment","protected final static int NON_STD_TOKEN_INFINITY = 1;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.NON_STD_TOKEN_PLUS_INFINITY","Field","No Comment","protected final static int NON_STD_TOKEN_PLUS_INFINITY = 2;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.NON_STD_TOKEN_MINUS_INFINITY","Field","No Comment","protected final static int NON_STD_TOKEN_MINUS_INFINITY = 3;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.NON_STD_TOKENS","Field","No Comment","protected final static String[] NON_STD_TOKENS = new String[] { ""NaN"", ""Infinity"", ""+Infinity"", ""-Infinity"" };","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.NON_STD_TOKEN_VALUES","Field","No Comment","protected final static double[] NON_STD_TOKEN_VALUES = new double[] { Double.NaN, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY };","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._nonStdTokenType","Field","* When tokenizing non-standard (""odd"") tokens, this is the type to consider;
     * also works as index to actual textual representation.","protected int _nonStdTokenType;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._currBufferStart","Field","* Since we are fed content that may or may not start at zero offset, we need
     * to keep track of the first byte within that buffer, to be able to calculate
     * logical offset within input ""stream""","protected int _currBufferStart = 0;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._currInputRowAlt","Field","* Alternate row tracker, used to keep track of position by `\r` marker
     * (whereas <code>_currInputRow</code> tracks `\n`). Used to simplify
     * tracking of linefeeds, assuming that input typically uses various
     * linefeed combinations (`\r`, `\n` or `\r\n`) consistently, in which
     * case we can simply choose max of two row candidates.","protected int _currInputRowAlt = 1;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.setCodec(ObjectCodec)","Method","No Comment","@Override
public void setCodec(ObjectCodec c) {
    throw new UnsupportedOperationException(""Cannot use ObjectMapper with non-blocking parser"");
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.setCodec(ObjectCodec).c","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.setCodec(ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.canParseAsync()","Method","No Comment","// since 2.9
@Override
public boolean canParseAsync() {
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.symbolTableForTests()","Method","No Comment","protected ByteQuadsCanonicalizer symbolTableForTests() {
    return _symbols;
}","ByteQuadsCanonicalizer","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.releaseBuffered(OutputStream)","Abstract Method","No Comment","@Override
public abstract int releaseBuffered(OutputStream out) throws IOException;","int","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.releaseBuffered(OutputStream).out","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.releaseBuffered(OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._releaseBuffers()","Method","No Comment","@Override
protected void _releaseBuffers() throws IOException {
    super._releaseBuffers();
    // Merge found symbols, if any:
    _symbols.release();
    // any other temp buffers?
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getInputSource()","Method","No Comment","@Override
public Object getInputSource() {
    // since input is ""pushed"", to traditional source...
    return null;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._closeInput()","Method","No Comment","@Override
protected void _closeInput() throws IOException {
    // 30-May-2017, tatu: Seems like this is the most certain way to prevent
    //    further decoding... not the optimal place, but due to inheritance
    //    hierarchy most convenient.
    _currBufferStart = 0;
    _inputEnd = 0;
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.hasTextCharacters()","Method","No Comment","@Override
public boolean hasTextCharacters() {
    if (_currToken == JsonToken.VALUE_STRING) {
        // yes; is or can be made available efficiently as char[]
        return _textBuffer.hasTextAsCharacters();
    }
    if (_currToken == JsonToken.FIELD_NAME) {
        // not necessarily; possible but:
        return _nameCopied;
    }
    // other types, no benefit from accessing as char[]
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.currentLocation()","Method","No Comment","@Override
public JsonLocation currentLocation() {
    // 1-based
    int col = _inputPtr - _currInputRowStart + 1;
    // Since we track CR and LF separately, max should gives us right answer
    int row = Math.max(_currInputRow, _currInputRowAlt);
    return new JsonLocation(_contentReference(), // bytes, chars
    _currInputProcessed + (_inputPtr - _currBufferStart), // bytes, chars
    -1L, row, col);
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._currentLocationMinusOne()","Method","No Comment","// @since 2.17
@Override
protected JsonLocation _currentLocationMinusOne() {
    final int prevInputPtr = _inputPtr - 1;
    int row = Math.max(_currInputRow, _currInputRowAlt);
    // 1-based
    final int col = prevInputPtr - _currInputRowStart + 1;
    return new JsonLocation(_contentReference(), // bytes, chars
    _currInputProcessed + (prevInputPtr - _currBufferStart), // bytes, chars
    -1L, row, col);
}","JsonLocation","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.currentTokenLocation()","Method","No Comment","@Override
public JsonLocation currentTokenLocation() {
    return new JsonLocation(_contentReference(), _tokenInputTotal, -1L, _tokenInputRow, _tokenInputCol);
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getText()","Method","* Method for accessing textual representation of the current event;
     * if no current event (before first call to {@link #nextToken}, or
     * after encountering end-of-input), returns null.
     * Method can be called for any event.
     *
     * @throws IOException if there are general I/O or parse issues, including if the text is too large,
     * see {@link com.fasterxml.jackson.core.StreamReadConstraints.Builder#maxStringLength(int)}","@Override
public String getText() throws IOException {
    if (_currToken == JsonToken.VALUE_STRING) {
        return _textBuffer.contentsAsString();
    }
    return _getText2(_currToken);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._getText2(JsonToken)","Method","No Comment","protected final String _getText2(JsonToken t) throws IOException {
    if (t == null) {
        return null;
    }
    switch(t.id()) {
        case ID_NOT_AVAILABLE:
            return null;
        case ID_FIELD_NAME:
            return _parsingContext.getCurrentName();
        case ID_STRING:
        // fall through
        case ID_NUMBER_INT:
        case ID_NUMBER_FLOAT:
            return _textBuffer.contentsAsString();
        default:
            return t.asString();
    }
}","String","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._getText2(JsonToken).t","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._getText2(JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getText(Writer)","Method","No Comment","// since 2.8
@Override
public int getText(Writer writer) throws IOException {
    JsonToken t = _currToken;
    if (t == JsonToken.VALUE_STRING) {
        return _textBuffer.contentsToWriter(writer);
    }
    if (t == JsonToken.FIELD_NAME) {
        String n = _parsingContext.getCurrentName();
        writer.write(n);
        return n.length();
    }
    if (t != null) {
        if (t.isNumeric()) {
            return _textBuffer.contentsToWriter(writer);
        }
        if (t == JsonToken.NOT_AVAILABLE) {
            _reportError(""Current token not available: can not call this method"");
        }
        char[] ch = t.asCharArray();
        writer.write(ch);
        return ch.length;
    }
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getText(Writer).writer","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getText(Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getValueAsString()","Method","@since 2.1","@Override
public String getValueAsString() throws IOException {
    if (_currToken == JsonToken.VALUE_STRING) {
        return _textBuffer.contentsAsString();
    }
    if (_currToken == JsonToken.FIELD_NAME) {
        return currentName();
    }
    return super.getValueAsString(null);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getValueAsString(String)","Method","@since 2.1","@Override
public String getValueAsString(String defValue) throws IOException {
    if (_currToken == JsonToken.VALUE_STRING) {
        return _textBuffer.contentsAsString();
    }
    if (_currToken == JsonToken.FIELD_NAME) {
        return currentName();
    }
    return super.getValueAsString(defValue);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getValueAsString(String).defValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getValueAsString(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getTextCharacters()","Method","No Comment","@Override
public char[] getTextCharacters() throws IOException {
    if (_currToken != null) {
        // null only before/after document
        switch(_currToken.id()) {
            case ID_FIELD_NAME:
                if (!_nameCopied) {
                    String name = _parsingContext.getCurrentName();
                    int nameLen = name.length();
                    if (_nameCopyBuffer == null) {
                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);
                    } else if (_nameCopyBuffer.length < nameLen) {
                        _nameCopyBuffer = new char[nameLen];
                    }
                    name.getChars(0, nameLen, _nameCopyBuffer, 0);
                    _nameCopied = true;
                }
                return _nameCopyBuffer;
            case ID_STRING:
            // fall through
            case ID_NUMBER_INT:
            case ID_NUMBER_FLOAT:
                return _textBuffer.getTextBuffer();
            default:
                return _currToken.asCharArray();
        }
    }
    return null;
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getTextLength()","Method","No Comment","@Override
public int getTextLength() throws IOException {
    if (_currToken != null) {
        // null only before/after document
        switch(_currToken.id()) {
            case ID_FIELD_NAME:
                return _parsingContext.getCurrentName().length();
            case ID_STRING:
            // fall through
            case ID_NUMBER_INT:
            case ID_NUMBER_FLOAT:
                return _textBuffer.size();
            default:
                return _currToken.asCharArray().length;
        }
    }
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getTextOffset()","Method","No Comment","@Override
public int getTextOffset() throws IOException {
    // Most have offset of 0, only some may have other values:
    if (_currToken != null) {
        switch(_currToken.id()) {
            case ID_FIELD_NAME:
                return 0;
            case ID_STRING:
            // fall through
            case ID_NUMBER_INT:
            case ID_NUMBER_FLOAT:
                return _textBuffer.getTextOffset();
            default:
        }
    }
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getBinaryValue(Base64Variant)","Method","No Comment","@Override
public byte[] getBinaryValue(Base64Variant b64variant) throws IOException {
    if (_currToken != JsonToken.VALUE_STRING) {
        _reportError(""Current token (%s) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary"", _currToken);
    }
    if (_binaryValue == null) {
        @SuppressWarnings(""resource"")
        ByteArrayBuilder builder = _getByteArrayBuilder();
        _decodeBase64(getText(), builder, b64variant);
        _binaryValue = builder.toByteArray();
    }
    return _binaryValue;
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getBinaryValue(Base64Variant).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getBinaryValue(Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.readBinaryValue(Base64Variant,OutputStream)","Method","No Comment","@Override
public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException {
    byte[] b = getBinaryValue(b64variant);
    out.write(b);
    return b.length;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.readBinaryValue(Base64Variant,OutputStream).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.readBinaryValue(Base64Variant,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.readBinaryValue(Base64Variant,OutputStream).out","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.readBinaryValue(Base64Variant,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.getEmbeddedObject()","Method","No Comment","@Override
public Object getEmbeddedObject() throws IOException {
    if (_currToken == JsonToken.VALUE_EMBEDDED_OBJECT) {
        return _binaryValue;
    }
    return null;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._startArrayScope()","Method","No Comment","protected final JsonToken _startArrayScope() throws IOException {
    createChildArrayContext(-1, -1);
    _majorState = MAJOR_ARRAY_ELEMENT_FIRST;
    _majorStateAfterValue = MAJOR_ARRAY_ELEMENT_NEXT;
    return _updateToken(JsonToken.START_ARRAY);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._startObjectScope()","Method","No Comment","protected final JsonToken _startObjectScope() throws IOException {
    createChildObjectContext(-1, -1);
    _majorState = MAJOR_OBJECT_FIELD_FIRST;
    _majorStateAfterValue = MAJOR_OBJECT_FIELD_NEXT;
    return _updateToken(JsonToken.START_OBJECT);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._closeArrayScope()","Method","No Comment","protected final JsonToken _closeArrayScope() throws IOException {
    if (!_parsingContext.inArray()) {
        _reportMismatchedEndMarker(']', '}');
    }
    JsonReadContext ctxt = _parsingContext.getParent();
    _parsingContext = ctxt;
    int st;
    if (ctxt.inObject()) {
        st = MAJOR_OBJECT_FIELD_NEXT;
    } else if (ctxt.inArray()) {
        st = MAJOR_ARRAY_ELEMENT_NEXT;
    } else {
        st = MAJOR_ROOT;
    }
    _majorState = st;
    _majorStateAfterValue = st;
    return _updateToken(JsonToken.END_ARRAY);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._closeObjectScope()","Method","No Comment","protected final JsonToken _closeObjectScope() throws IOException {
    if (!_parsingContext.inObject()) {
        _reportMismatchedEndMarker('}', ']');
    }
    JsonReadContext ctxt = _parsingContext.getParent();
    _parsingContext = ctxt;
    int st;
    if (ctxt.inObject()) {
        st = MAJOR_OBJECT_FIELD_NEXT;
    } else if (ctxt.inArray()) {
        st = MAJOR_ARRAY_ELEMENT_NEXT;
    } else {
        st = MAJOR_ROOT;
    }
    _majorState = st;
    _majorStateAfterValue = st;
    return _updateToken(JsonToken.END_OBJECT);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int)","Method","No Comment","protected final String _findName(int q1, int lastQuadBytes) throws JsonParseException, StreamConstraintsException {
    q1 = _padLastQuad(q1, lastQuadBytes);
    // Usually we'll find it from the canonical symbol table already
    String name = _symbols.findName(q1);
    if (name != null) {
        return name;
    }
    // If not, more work. We'll need add stuff to buffer
    _quadBuffer[0] = q1;
    return _addName(_quadBuffer, 1, lastQuadBytes);
}","String","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int).lastQuadBytes","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int,int)","Method","No Comment","protected final String _findName(int q1, int q2, int lastQuadBytes) throws JsonParseException, StreamConstraintsException {
    q2 = _padLastQuad(q2, lastQuadBytes);
    // Usually we'll find it from the canonical symbol table already
    String name = _symbols.findName(q1, q2);
    if (name != null) {
        return name;
    }
    // If not, more work. We'll need add stuff to buffer
    _quadBuffer[0] = q1;
    _quadBuffer[1] = q2;
    return _addName(_quadBuffer, 2, lastQuadBytes);
}","String","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int,int).lastQuadBytes","Parameter_3","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int,int,int)","Method","No Comment","protected final String _findName(int q1, int q2, int q3, int lastQuadBytes) throws JsonParseException, StreamConstraintsException {
    q3 = _padLastQuad(q3, lastQuadBytes);
    String name = _symbols.findName(q1, q2, q3);
    if (name != null) {
        return name;
    }
    int[] quads = _quadBuffer;
    quads[0] = q1;
    quads[1] = q2;
    quads[2] = _padLastQuad(q3, lastQuadBytes);
    return _addName(quads, 3, lastQuadBytes);
}","String","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int,int,int).q1","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int,int,int).q2","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int,int,int).q3","Parameter_3","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int,int,int).lastQuadBytes","Parameter_4","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._findName(int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._addName(int[],int,int)","Method","and add it to the symbol table.","protected final String _addName(int[] quads, int qlen, int lastQuadBytes) throws JsonParseException, StreamConstraintsException {
    /* Ok: must decode UTF-8 chars. No other validation is
         * needed, since unescaping has been done earlier, as necessary
         * (as well as error reporting for unescaped control chars)
         */
    // 4 bytes per quad, except last one maybe less
    final int byteLen = (qlen << 2) - 4 + lastQuadBytes;
    _streamReadConstraints.validateNameLength(byteLen);
    /* And last one is not correctly aligned (leading zero bytes instead
         * need to shift a bit, instead of trailing). Only need to shift it
         * for UTF-8 decoding; need revert for storage (since key will not
         * be aligned, to optimize lookup speed)
         */
    int lastQuad;
    if (lastQuadBytes < 4) {
        lastQuad = quads[qlen - 1];
        // 8/16/24 bit left shift
        quads[qlen - 1] = (lastQuad << ((4 - lastQuadBytes) << 3));
    } else {
        lastQuad = 0;
    }
    // Need some working space, TextBuffer works well:
    char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();
    int cix = 0;
    for (int ix = 0; ix < byteLen; ) {
        // current quad, need to shift+mask
        int ch = quads[ix >> 2];
        int byteIx = (ix & 3);
        ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;
        ++ix;
        if (ch > 127) {
            // multi-byte
            int needed;
            if ((ch & 0xE0) == 0xC0) {
                // 2 bytes (0x0080 - 0x07FF)
                ch &= 0x1F;
                needed = 1;
            } else if ((ch & 0xF0) == 0xE0) {
                // 3 bytes (0x0800 - 0xFFFF)
                ch &= 0x0F;
                needed = 2;
            } else if ((ch & 0xF8) == 0xF0) {
                // 4 bytes; double-char with surrogates and all...
                ch &= 0x07;
                needed = 3;
            } else {
                // 5- and 6-byte chars not valid xml chars
                _reportInvalidInitial(ch);
                // never really gets this far
                needed = ch = 1;
            }
            if ((ix + needed) > byteLen) {
                _reportInvalidEOF("" in field name"", JsonToken.FIELD_NAME);
            }
            // Ok, always need at least one more:
            // current quad, need to shift+mask
            int ch2 = quads[ix >> 2];
            byteIx = (ix & 3);
            ch2 = (ch2 >> ((3 - byteIx) << 3));
            ++ix;
            if ((ch2 & 0xC0) != 0x080) {
                _reportInvalidOther(ch2);
            }
            ch = (ch << 6) | (ch2 & 0x3F);
            if (needed > 1) {
                ch2 = quads[ix >> 2];
                byteIx = (ix & 3);
                ch2 = (ch2 >> ((3 - byteIx) << 3));
                ++ix;
                if ((ch2 & 0xC0) != 0x080) {
                    _reportInvalidOther(ch2);
                }
                ch = (ch << 6) | (ch2 & 0x3F);
                if (needed > 2) {
                    // 4 bytes? (need surrogates on output)
                    ch2 = quads[ix >> 2];
                    byteIx = (ix & 3);
                    ch2 = (ch2 >> ((3 - byteIx) << 3));
                    ++ix;
                    if ((ch2 & 0xC0) != 0x080) {
                        _reportInvalidOther(ch2 & 0xFF);
                    }
                    ch = (ch << 6) | (ch2 & 0x3F);
                }
            }
            if (needed > 2) {
                // surrogate pair? once again, let's output one here, one later on
                // to normalize it starting with 0x0
                ch -= 0x10000;
                if (cix >= cbuf.length) {
                    cbuf = _textBuffer.expandCurrentSegment();
                }
                cbuf[cix++] = (char) (0xD800 + (ch >> 10));
                ch = 0xDC00 | (ch & 0x03FF);
            }
        }
        if (cix >= cbuf.length) {
            cbuf = _textBuffer.expandCurrentSegment();
        }
        cbuf[cix++] = (char) ch;
    }
    // Ok. Now we have the character array, and can construct the String
    String baseName = new String(cbuf, 0, cix);
    // 5-May-2023, ckozak: [core#1015] respect CANONICALIZE_FIELD_NAMES factory config.
    if (!_symbols.isCanonicalizing()) {
        return baseName;
    }
    // And finally, un-align if necessary
    if (lastQuadBytes < 4) {
        quads[qlen - 1] = lastQuad;
    }
    return _symbols.addName(baseName, quads, qlen);
}","String","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._addName(int[],int,int).quads","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._addName(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._addName(int[],int,int).qlen","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._addName(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._addName(int[],int,int).lastQuadBytes","Parameter_3","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._addName(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._padLastQuad(int,int)","Method","Helper method needed to fix [jackson-core#148], masking of 0x00 character","protected final static int _padLastQuad(int q, int bytes) {
    return (bytes == 4) ? q : (q | (-1 << (bytes << 3)));
}","int","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._padLastQuad(int,int).q","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._padLastQuad(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._padLastQuad(int,int).bytes","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._padLastQuad(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._eofAsNextToken()","Method","input feeder has indicated no more input will be forthcoming.","protected final JsonToken _eofAsNextToken() throws IOException {
    _majorState = MAJOR_CLOSED;
    if (!_parsingContext.inRoot()) {
        _handleEOF();
    }
    close();
    return _updateTokenToNull();
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._fieldComplete(String)","Method","No Comment","protected final JsonToken _fieldComplete(String name) throws IOException {
    _majorState = MAJOR_OBJECT_VALUE;
    _parsingContext.setCurrentName(name);
    return _updateToken(JsonToken.FIELD_NAME);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._fieldComplete(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._fieldComplete(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._valueComplete(JsonToken)","Method","No Comment","protected final JsonToken _valueComplete(JsonToken t) throws IOException {
    _majorState = _majorStateAfterValue;
    return _updateToken(t);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._valueComplete(JsonToken).t","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._valueComplete(JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._valueCompleteInt(int,String)","Method","No Comment","protected final JsonToken _valueCompleteInt(int value, String asText) throws IOException {
    _textBuffer.resetWithString(asText);
    _intLength = asText.length();
    // to force parsing
    _numTypesValid = NR_INT;
    _numberInt = value;
    _majorState = _majorStateAfterValue;
    return _updateToken(JsonToken.VALUE_NUMBER_INT);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._valueCompleteInt(int,String).value","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._valueCompleteInt(int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._valueCompleteInt(int,String).asText","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._valueCompleteInt(int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._valueNonStdNumberComplete(int)","Method","No Comment","@SuppressWarnings(""deprecation"")
protected final JsonToken _valueNonStdNumberComplete(int type) throws IOException {
    String tokenStr = NON_STD_TOKENS[type];
    _textBuffer.resetWithString(tokenStr);
    if (!isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
        _reportError(""Non-standard token '%s': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow"", tokenStr);
    }
    _intLength = 0;
    _numTypesValid = NR_DOUBLE;
    _numberDouble = NON_STD_TOKEN_VALUES[type];
    _majorState = _majorStateAfterValue;
    return _updateToken(JsonToken.VALUE_NUMBER_FLOAT);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._valueNonStdNumberComplete(int).type","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._valueNonStdNumberComplete(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._nonStdToken(int)","Method","No Comment","protected final String _nonStdToken(int type) {
    return NON_STD_TOKENS[type];
}","String","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._nonStdToken(int).type","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._nonStdToken(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._updateTokenLocation()","Method","No Comment","protected final void _updateTokenLocation() {
    _tokenInputRow = Math.max(_currInputRow, _currInputRowAlt);
    final int ptr = _inputPtr;
    _tokenInputCol = ptr - _currInputRowStart;
    _tokenInputTotal = _currInputProcessed + (ptr - _currBufferStart);
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._reportInvalidChar(int)","Method","No Comment","protected void _reportInvalidChar(int c) throws JsonParseException {
    // Either invalid WS or illegal UTF-8 start char
    if (c < INT_SPACE) {
        _throwInvalidSpace(c);
    }
    _reportInvalidInitial(c);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._reportInvalidChar(int).c","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._reportInvalidChar(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._reportInvalidInitial(int)","Method","No Comment","protected void _reportInvalidInitial(int mask) throws JsonParseException {
    _reportError(""Invalid UTF-8 start byte 0x"" + Integer.toHexString(mask));
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._reportInvalidInitial(int).mask","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._reportInvalidInitial(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._reportInvalidOther(int,int)","Method","No Comment","protected void _reportInvalidOther(int mask, int ptr) throws JsonParseException {
    _inputPtr = ptr;
    _reportInvalidOther(mask);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._reportInvalidOther(int,int).mask","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._reportInvalidOther(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._reportInvalidOther(int,int).ptr","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._reportInvalidOther(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._reportInvalidOther(int)","Method","No Comment","protected void _reportInvalidOther(int mask) throws JsonParseException {
    _reportError(""Invalid UTF-8 middle byte 0x"" + Integer.toHexString(mask));
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._reportInvalidOther(int).mask","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._reportInvalidOther(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.<init>(IOContext,int,ByteQuadsCanonicalizer)","Constructor","No Comment","public NonBlockingJsonParserBase(IOContext ctxt, int parserFeatures, ByteQuadsCanonicalizer sym) {
    super(ctxt, parserFeatures, null);
    _symbols = sym;
    _currToken = null;
    _majorState = MAJOR_INITIAL;
    _majorStateAfterValue = MAJOR_ROOT;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.<init>(IOContext,int,ByteQuadsCanonicalizer).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.<init>(IOContext,int,ByteQuadsCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.<init>(IOContext,int,ByteQuadsCanonicalizer).parserFeatures","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.<init>(IOContext,int,ByteQuadsCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.<init>(IOContext,int,ByteQuadsCanonicalizer).sym","Parameter_3","Belong to com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.<init>(IOContext,int,ByteQuadsCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser","Class","* Non-blocking parser implementation for JSON content that takes its input
 * via {@link java.nio.ByteBuffer} instance(s) passed.
 *<p>
 * NOTE: only supports parsing of UTF-8 encoded content (and 7-bit US-ASCII since
 * it is strict subset of UTF-8): other encodings are not supported.
 *
 * @since 2.14","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase","com.fasterxml.jackson.core.async.ByteBufferFeeder"
"com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser._inputBuffer","Field","No Comment","private ByteBuffer _inputBuffer = ByteBuffer.wrap(NO_BYTES);","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser.getNonBlockingInputFeeder()","Method","No Comment","@Override
public NonBlockingInputFeeder getNonBlockingInputFeeder() {
    return this;
}","NonBlockingInputFeeder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser.feedInput(ByteBuffer)","Method","No Comment","@Override
public void feedInput(final ByteBuffer byteBuffer) throws IOException {
    // Must not have remaining input
    if (_inputPtr < _inputEnd) {
        _reportError(""Still have %d undecoded bytes, should not call 'feedInput'"", _inputEnd - _inputPtr);
    }
    final int start = byteBuffer.position();
    final int end = byteBuffer.limit();
    if (end < start) {
        _reportError(""Input end (%d) may not be before start (%d)"", end, start);
    }
    // and shouldn't have been marked as end-of-input
    if (_endOfInput) {
        _reportError(""Already closed, can not feed more input"");
    }
    // Time to update pointers first
    _currInputProcessed += _origBufferLen;
    // 06-Sep-2023, tatu: [core#1046] Enforce max doc length limit
    _streamReadConstraints.validateDocumentLength(_currInputProcessed);
    // Also need to adjust row start, to work as if it extended into the past wrt new buffer
    _currInputRowStart = start - (_inputEnd - _currInputRowStart);
    // And then update buffer settings
    _currBufferStart = start;
    _inputBuffer = byteBuffer;
    _inputPtr = start;
    _inputEnd = end;
    _origBufferLen = end - start;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser.feedInput(ByteBuffer).byteBuffer","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser.feedInput(ByteBuffer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser.releaseBuffered(OutputStream)","Method","No Comment","@Override
public int releaseBuffered(final OutputStream out) throws IOException {
    final int avail = _inputEnd - _inputPtr;
    if (avail > 0) {
        final WritableByteChannel channel = Channels.newChannel(out);
        channel.write(_inputBuffer);
    }
    return avail;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser.releaseBuffered(OutputStream).out","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser.releaseBuffered(OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser.getNextSignedByteFromBuffer()","Method","No Comment","@Override
protected byte getNextSignedByteFromBuffer() {
    return _inputBuffer.get(_inputPtr++);
}","byte","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser.getNextUnsignedByteFromBuffer()","Method","No Comment","@Override
protected int getNextUnsignedByteFromBuffer() {
    return _inputBuffer.get(_inputPtr++) & 0xFF;
}","int","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser.getByteFromBuffer(int)","Method","No Comment","@Override
protected byte getByteFromBuffer(final int ptr) {
    return _inputBuffer.get(ptr);
}","byte","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser.getByteFromBuffer(int).ptr","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser.getByteFromBuffer(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser.<init>(IOContext,int,ByteQuadsCanonicalizer)","Constructor","No Comment","public NonBlockingByteBufferJsonParser(IOContext ctxt, int parserFeatures, ByteQuadsCanonicalizer sym) {
    super(ctxt, parserFeatures, sym);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser.<init>(IOContext,int,ByteQuadsCanonicalizer).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser.<init>(IOContext,int,ByteQuadsCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser.<init>(IOContext,int,ByteQuadsCanonicalizer).parserFeatures","Parameter_2","Belong to com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser.<init>(IOContext,int,ByteQuadsCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser.<init>(IOContext,int,ByteQuadsCanonicalizer).sym","Parameter_3","Belong to com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser.<init>(IOContext,int,ByteQuadsCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.PackageVersion","Class","* Automatically generated from PackageVersion.java.in during
 * packageVersion-generate execution of maven-replacer-plugin in
 * pom.xml.","Class do not obtain Source Code","No return type","public , final ","","com.fasterxml.jackson.core.Versioned"
"com.fasterxml.jackson.core.json.PackageVersion.VERSION","Field","No Comment","public final static Version VERSION = VersionUtil.parseVersion(""2.19.0-SNAPSHOT"", ""com.fasterxml.jackson.core"", ""jackson-core"");","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.PackageVersion.version()","Method","No Comment","@Override
public Version version() {
    return VERSION;
}","Version","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper","Class","* This class is used to determine the encoding of byte stream
 * that is to contain JSON content. Rules are fairly simple, and
 * defined in JSON specification (RFC-4627 or newer), except
 * for BOM handling, which is a property of underlying
 * streams.","Class do not obtain Source Code","No return type","public , final ","",""
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.UTF8_BOM_1","Field","No Comment","public final static byte UTF8_BOM_1 = (byte) 0xEF;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.UTF8_BOM_2","Field","No Comment","public final static byte UTF8_BOM_2 = (byte) 0xBB;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.UTF8_BOM_3","Field","No Comment","public final static byte UTF8_BOM_3 = (byte) 0xBF;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.STRING_READER_BYTE_ARRAY_LENGTH_LIMIT","Field","[jackson-core#1081] Limit in bytes for input byte array length to use StringReader instead of InputStreamReader","private static final int STRING_READER_BYTE_ARRAY_LENGTH_LIMIT = 8192;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper._context","Field","No Comment","private final IOContext _context;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper._in","Field","No Comment","private final InputStream _in;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper._inputBuffer","Field","No Comment","private final byte[] _inputBuffer;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper._inputPtr","Field","No Comment","private int _inputPtr;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper._inputEnd","Field","No Comment","private int _inputEnd;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper._bufferRecyclable","Field","* Flag that indicates whether buffer above is to be recycled
     * after being used or not.","private final boolean _bufferRecyclable;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper._bigEndian","Field","* Whether input has been detected to be in Big-Endian encoding or not.","private boolean _bigEndian = true;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper._bytesPerChar","Field","0 means ""dunno yet""","private int _bytesPerChar;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.detectEncoding()","Method","* Method that should be called after constructing an instace.
     * It will figure out encoding that content uses, to allow
     * for instantiating a proper scanner object.
     *
     * @return {@link JsonEncoding} detected, if any; {@code JsonEncoding.UTF8} otherwise
     *
     * @throws IOException If read from underlying input source fails","public JsonEncoding detectEncoding() throws IOException {
    boolean foundEncoding = false;
    // First things first: BOM handling
    /* Note: we can require 4 bytes to be read, since no
         * combination of BOM + valid JSON content can have
         * shorter length (shortest valid JSON content is single
         * digit char, but BOMs are chosen such that combination
         * is always at least 4 chars long)
         */
    if (ensureLoaded(4)) {
        int quad = (_inputBuffer[_inputPtr] << 24) | ((_inputBuffer[_inputPtr + 1] & 0xFF) << 16) | ((_inputBuffer[_inputPtr + 2] & 0xFF) << 8) | (_inputBuffer[_inputPtr + 3] & 0xFF);
        if (handleBOM(quad)) {
            foundEncoding = true;
        } else {
            /* If no BOM, need to auto-detect based on first char;
                 * this works since it must be 7-bit ascii (wrt. unicode
                 * compatible encodings, only ones JSON can be transferred
                 * over)
                 */
            // UTF-32?
            if (checkUTF32(quad)) {
                foundEncoding = true;
            } else if (checkUTF16(quad >>> 16)) {
                foundEncoding = true;
            }
        }
    } else if (ensureLoaded(2)) {
        int i16 = ((_inputBuffer[_inputPtr] & 0xFF) << 8) | (_inputBuffer[_inputPtr + 1] & 0xFF);
        if (checkUTF16(i16)) {
            foundEncoding = true;
        }
    }
    JsonEncoding enc;
    /* Not found yet? As per specs, this means it must be UTF-8. */
    if (!foundEncoding) {
        enc = JsonEncoding.UTF8;
    } else {
        switch(_bytesPerChar) {
            case 1:
                enc = JsonEncoding.UTF8;
                break;
            case 2:
                enc = _bigEndian ? JsonEncoding.UTF16_BE : JsonEncoding.UTF16_LE;
                break;
            case 4:
                enc = _bigEndian ? JsonEncoding.UTF32_BE : JsonEncoding.UTF32_LE;
                break;
            default:
                return VersionUtil.throwInternalReturnAny();
        }
    }
    _context.setEncoding(enc);
    return enc;
}","JsonEncoding","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.skipUTF8BOM(DataInput)","Method","* Helper method that may be called to see if given {@link DataInput}
     * has BOM marker, and if so, to skip it.
     *
     * @param input DataInput to read content from
     *
     * @return Byte (as unsigned {@code int}) read after possible UTF-8 BOM
     *
     * @throws IOException If read from underlying input source fails
     *
     * @since 2.8","public static int skipUTF8BOM(DataInput input) throws IOException {
    int b = input.readUnsignedByte();
    if (b != 0xEF) {
        return b;
    }
    // since this is not legal byte in JSON otherwise, except
    // that we do get BOM; if not, report error
    b = input.readUnsignedByte();
    if (b != 0xBB) {
        throw new IOException(""Unexpected byte 0x"" + Integer.toHexString(b) + "" following 0xEF; should get 0xBB as part of UTF-8 BOM"");
    }
    b = input.readUnsignedByte();
    if (b != 0xBF) {
        throw new IOException(""Unexpected byte 0x"" + Integer.toHexString(b) + "" following 0xEF 0xBB; should get 0xBF as part of UTF-8 BOM"");
    }
    return input.readUnsignedByte();
}","int","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.skipUTF8BOM(DataInput).input","Parameter_1","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.skipUTF8BOM(DataInput)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.constructReader()","Method","No Comment","@SuppressWarnings(""resource"")
public Reader constructReader() throws IOException {
    JsonEncoding enc = _context.getEncoding();
    switch(enc.bits()) {
        // only in non-common case where we don't want to do direct mapping
        case 8:
        case 16:
            {
                // First: do we have a Stream? If not, need to create one:
                InputStream in = _in;
                if (in == null) {
                    int length = _inputEnd - _inputPtr;
                    if (length <= STRING_READER_BYTE_ARRAY_LENGTH_LIMIT) {
                        // [jackson-core#1081] Avoid overhead of heap ByteBuffer allocated by InputStreamReader
                        // when processing small inputs up to 8KiB.
                        return new StringReader(new String(_inputBuffer, _inputPtr, length, enc.getJavaName()));
                    }
                    in = new ByteArrayInputStream(_inputBuffer, _inputPtr, _inputEnd);
                } else {
                    // Also, if we have any read but unused input (usually true),
                    // need to merge that input in:
                    if (_inputPtr < _inputEnd) {
                        in = new MergedStream(_context, in, _inputBuffer, _inputPtr, _inputEnd);
                    }
                }
                return new InputStreamReader(in, enc.getJavaName());
            }
        case 32:
            return new UTF32Reader(_context, _in, _inputBuffer, _inputPtr, _inputEnd, _context.getEncoding().isBigEndian());
    }
    return VersionUtil.throwInternalReturnAny();
}","Reader","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.constructParser(int,ObjectCodec,ByteQuadsCanonicalizer,CharsToNameCanonicalizer,int)","Method","No Comment","public JsonParser constructParser(int parserFeatures, ObjectCodec codec, ByteQuadsCanonicalizer rootByteSymbols, CharsToNameCanonicalizer rootCharSymbols, int factoryFeatures) throws IOException {
    int prevInputPtr = _inputPtr;
    JsonEncoding enc = JsonFactory.Feature.CHARSET_DETECTION.enabledIn(factoryFeatures) ? detectEncoding() : JsonEncoding.UTF8;
    int bytesProcessed = _inputPtr - prevInputPtr;
    if (enc == JsonEncoding.UTF8) {
        // and without canonicalization, byte-based approach is not performant; just use std UTF-8 reader
        // (which is ok for larger input; not so hot for smaller; but this is not a common case)
        if (JsonFactory.Feature.CANONICALIZE_FIELD_NAMES.enabledIn(factoryFeatures)) {
            ByteQuadsCanonicalizer can = rootByteSymbols.makeChild(factoryFeatures);
            return new UTF8StreamJsonParser(_context, parserFeatures, _in, codec, can, _inputBuffer, _inputPtr, _inputEnd, bytesProcessed, _bufferRecyclable);
        }
    }
    return new ReaderBasedJsonParser(_context, parserFeatures, constructReader(), codec, rootCharSymbols.makeChild());
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.constructParser(int,ObjectCodec,ByteQuadsCanonicalizer,CharsToNameCanonicalizer,int).parserFeatures","Parameter_1","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.constructParser(int,ObjectCodec,ByteQuadsCanonicalizer,CharsToNameCanonicalizer,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.constructParser(int,ObjectCodec,ByteQuadsCanonicalizer,CharsToNameCanonicalizer,int).codec","Parameter_2","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.constructParser(int,ObjectCodec,ByteQuadsCanonicalizer,CharsToNameCanonicalizer,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.constructParser(int,ObjectCodec,ByteQuadsCanonicalizer,CharsToNameCanonicalizer,int).rootByteSymbols","Parameter_3","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.constructParser(int,ObjectCodec,ByteQuadsCanonicalizer,CharsToNameCanonicalizer,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.constructParser(int,ObjectCodec,ByteQuadsCanonicalizer,CharsToNameCanonicalizer,int).rootCharSymbols","Parameter_4","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.constructParser(int,ObjectCodec,ByteQuadsCanonicalizer,CharsToNameCanonicalizer,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.constructParser(int,ObjectCodec,ByteQuadsCanonicalizer,CharsToNameCanonicalizer,int).factoryFeatures","Parameter_5","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.constructParser(int,ObjectCodec,ByteQuadsCanonicalizer,CharsToNameCanonicalizer,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.hasJSONFormat(InputAccessor)","Method","* Current implementation is not as thorough as other functionality
     * ({@link com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper});
     * supports UTF-8, for example. But it should work, for now, and can
     * be improved as necessary.
     *
     * @param acc InputAccessor to use for accessing content to check
     *
     * @return Strength of match (never {@code null})
     *
     * @throws IOException if input access fails due to read problem","public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException {
    // Ideally we should see ""["" or ""{""; but if not, we'll accept double-quote (String)
    // in future could also consider accepting non-standard matches?
    if (!acc.hasMoreBytes()) {
        return MatchStrength.INCONCLUSIVE;
    }
    byte b = acc.nextByte();
    // Very first thing, a UTF-8 BOM?
    if (b == UTF8_BOM_1) {
        // yes, looks like UTF-8 BOM
        if (!acc.hasMoreBytes()) {
            return MatchStrength.INCONCLUSIVE;
        }
        if (acc.nextByte() != UTF8_BOM_2) {
            return MatchStrength.NO_MATCH;
        }
        if (!acc.hasMoreBytes()) {
            return MatchStrength.INCONCLUSIVE;
        }
        if (acc.nextByte() != UTF8_BOM_3) {
            return MatchStrength.NO_MATCH;
        }
        if (!acc.hasMoreBytes()) {
            return MatchStrength.INCONCLUSIVE;
        }
        b = acc.nextByte();
    }
    // Then possible leading space
    int ch = skipSpace(acc, b);
    if (ch < 0) {
        return MatchStrength.INCONCLUSIVE;
    }
    // First, let's see if it looks like a structured type:
    if (ch == '{') {
        // JSON object?
        // Ideally we need to find either double-quote or closing bracket
        ch = skipSpace(acc);
        if (ch < 0) {
            return MatchStrength.INCONCLUSIVE;
        }
        if (ch == '""' || ch == '}') {
            return MatchStrength.SOLID_MATCH;
        }
        // ... should we allow non-standard? Let's not yet... can add if need be
        return MatchStrength.NO_MATCH;
    }
    MatchStrength strength;
    if (ch == '[') {
        ch = skipSpace(acc);
        if (ch < 0) {
            return MatchStrength.INCONCLUSIVE;
        }
        // closing brackets is easy; but for now, let's also accept opening...
        if (ch == ']' || ch == '[') {
            return MatchStrength.SOLID_MATCH;
        }
        return MatchStrength.SOLID_MATCH;
    } else {
        // plain old value is not very convincing...
        strength = MatchStrength.WEAK_MATCH;
    }
    if (ch == '""') {
        // string value
        return strength;
    }
    if (ch <= '9' && ch >= '0') {
        // number
        return strength;
    }
    if (ch == '-') {
        // negative number
        ch = skipSpace(acc);
        if (ch < 0) {
            return MatchStrength.INCONCLUSIVE;
        }
        return (ch <= '9' && ch >= '0') ? strength : MatchStrength.NO_MATCH;
    }
    // or one of literals
    if (ch == 'n') {
        // null
        return tryMatch(acc, ""ull"", strength);
    }
    if (ch == 't') {
        // true
        return tryMatch(acc, ""rue"", strength);
    }
    if (ch == 'f') {
        // false
        return tryMatch(acc, ""alse"", strength);
    }
    return MatchStrength.NO_MATCH;
}","MatchStrength","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.hasJSONFormat(InputAccessor).acc","Parameter_1","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.hasJSONFormat(InputAccessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.tryMatch(InputAccessor,String,MatchStrength)","Method","No Comment","private static MatchStrength tryMatch(InputAccessor acc, String matchStr, MatchStrength fullMatchStrength) throws IOException {
    for (int i = 0, len = matchStr.length(); i < len; ++i) {
        if (!acc.hasMoreBytes()) {
            return MatchStrength.INCONCLUSIVE;
        }
        if (acc.nextByte() != matchStr.charAt(i)) {
            return MatchStrength.NO_MATCH;
        }
    }
    return fullMatchStrength;
}","MatchStrength","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.tryMatch(InputAccessor,String,MatchStrength).acc","Parameter_1","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.tryMatch(InputAccessor,String,MatchStrength)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.tryMatch(InputAccessor,String,MatchStrength).matchStr","Parameter_2","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.tryMatch(InputAccessor,String,MatchStrength)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.tryMatch(InputAccessor,String,MatchStrength).fullMatchStrength","Parameter_3","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.tryMatch(InputAccessor,String,MatchStrength)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.skipSpace(InputAccessor)","Method","No Comment","private static int skipSpace(InputAccessor acc) throws IOException {
    if (!acc.hasMoreBytes()) {
        return -1;
    }
    return skipSpace(acc, acc.nextByte());
}","int","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.skipSpace(InputAccessor).acc","Parameter_1","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.skipSpace(InputAccessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.skipSpace(InputAccessor,byte)","Method","No Comment","private static int skipSpace(InputAccessor acc, byte b) throws IOException {
    while (true) {
        int ch = b & 0xFF;
        if (!(ch == ' ' || ch == '\r' || ch == '\n' || ch == '\t')) {
            return ch;
        }
        if (!acc.hasMoreBytes()) {
            return -1;
        }
        b = acc.nextByte();
    }
}","int","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.skipSpace(InputAccessor,byte).acc","Parameter_1","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.skipSpace(InputAccessor,byte)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.skipSpace(InputAccessor,byte).b","Parameter_2","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.skipSpace(InputAccessor,byte)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.handleBOM(int)","Method","* @return True if a BOM was succesfully found, and encoding
     *   thereby recognized.","private boolean handleBOM(int quad) throws IOException {
    /* Handling of (usually) optional BOM (required for
         * multi-byte formats); first 32-bit charsets:
         */
    switch(quad) {
        case 0x0000FEFF:
            _bigEndian = true;
            _inputPtr += 4;
            _bytesPerChar = 4;
            return true;
        case // UCS-4, LE?
        0xFFFE0000:
            _inputPtr += 4;
            _bytesPerChar = 4;
            _bigEndian = false;
            return true;
        case // UCS-4, in-order...
        0x0000FFFE:
            // throws exception
            reportWeirdUCS4(""2143"");
            // never gets here
            break;
        case // UCS-4, in-order...
        0xFEFF0000:
            // throws exception
            reportWeirdUCS4(""3412"");
            // never gets here
            break;
        default:
    }
    // Ok, if not, how about 16-bit encoding BOMs?
    int msw = quad >>> 16;
    if (msw == 0xFEFF) {
        // UTF-16, BE
        _inputPtr += 2;
        _bytesPerChar = 2;
        _bigEndian = true;
        return true;
    }
    if (msw == 0xFFFE) {
        // UTF-16, LE
        _inputPtr += 2;
        _bytesPerChar = 2;
        _bigEndian = false;
        return true;
    }
    // And if not, then UTF-8 BOM?
    if ((quad >>> 8) == 0xEFBBBF) {
        // UTF-8
        _inputPtr += 3;
        _bytesPerChar = 1;
        // doesn't really matter
        _bigEndian = true;
        return true;
    }
    return false;
}","boolean","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.handleBOM(int).quad","Parameter_1","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.handleBOM(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.checkUTF32(int)","Method","No Comment","private boolean checkUTF32(int quad) throws IOException {
    /* Handling of (usually) optional BOM (required for
         * multi-byte formats); first 32-bit charsets:
         */
    if ((quad >> 8) == 0) {
        // 0x000000?? -> UTF32-BE
        _bigEndian = true;
    } else if ((quad & 0x00FFFFFF) == 0) {
        // 0x??000000 -> UTF32-LE
        _bigEndian = false;
    } else if ((quad & ~0x00FF0000) == 0) {
        // 0x00??0000 -> UTF32-in-order
        reportWeirdUCS4(""3412"");
    } else if ((quad & ~0x0000FF00) == 0) {
        // 0x0000??00 -> UTF32-in-order
        reportWeirdUCS4(""2143"");
    } else {
        // Cannot be valid UTF-32 encoded JSON...
        return false;
    }
    // Not BOM (just regular content), nothing to skip past:
    //_inputPtr += 4;
    _bytesPerChar = 4;
    return true;
}","boolean","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.checkUTF32(int).quad","Parameter_1","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.checkUTF32(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.checkUTF16(int)","Method","No Comment","private boolean checkUTF16(int i16) {
    if ((i16 & 0xFF00) == 0) {
        // UTF-16BE
        _bigEndian = true;
    } else if ((i16 & 0x00FF) == 0) {
        // UTF-16LE
        _bigEndian = false;
    } else {
        // nope, not  UTF-16
        return false;
    }
    // Not BOM (just regular content), nothing to skip past:
    //_inputPtr += 2;
    _bytesPerChar = 2;
    return true;
}","boolean","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.checkUTF16(int).i16","Parameter_1","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.checkUTF16(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.reportWeirdUCS4(String)","Method","No Comment","private void reportWeirdUCS4(String type) throws IOException {
    throw new CharConversionException(""Unsupported UCS-4 endianness ("" + type + "") detected"");
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.reportWeirdUCS4(String).type","Parameter_1","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.reportWeirdUCS4(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.ensureLoaded(int)","Method","No Comment","protected boolean ensureLoaded(int minimum) throws IOException {
    // Let's assume here buffer has enough room -- this will always
    // be true for the limited used this method gets
    int gotten = (_inputEnd - _inputPtr);
    while (gotten < minimum) {
        int count;
        if (_in == null) {
            // block source
            count = -1;
        } else {
            count = _in.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);
        }
        if (count < 1) {
            return false;
        }
        _inputEnd += count;
        gotten += count;
    }
    return true;
}","boolean","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.ensureLoaded(int).minimum","Parameter_1","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.ensureLoaded(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.<init>(IOContext,InputStream)","Constructor","No Comment","public ByteSourceJsonBootstrapper(IOContext ctxt, InputStream in) {
    _context = ctxt;
    _in = in;
    _inputBuffer = ctxt.allocReadIOBuffer();
    _inputEnd = _inputPtr = 0;
    //        _inputProcessed = 0;
    _bufferRecyclable = true;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.<init>(IOContext,InputStream).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.<init>(IOContext,InputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.<init>(IOContext,InputStream).in","Parameter_2","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.<init>(IOContext,InputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.<init>(IOContext,byte[],int,int)","Constructor","No Comment","public ByteSourceJsonBootstrapper(IOContext ctxt, byte[] inputBuffer, int inputStart, int inputLen) {
    _context = ctxt;
    _in = null;
    _inputBuffer = inputBuffer;
    _inputPtr = inputStart;
    _inputEnd = (inputStart + inputLen);
    // Need to offset this for correct location info
    //        _inputProcessed = -inputStart;
    _bufferRecyclable = false;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.<init>(IOContext,byte[],int,int).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.<init>(IOContext,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.<init>(IOContext,byte[],int,int).inputBuffer","Parameter_2","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.<init>(IOContext,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.<init>(IOContext,byte[],int,int).inputStart","Parameter_3","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.<init>(IOContext,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.<init>(IOContext,byte[],int,int).inputLen","Parameter_4","Belong to com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.<init>(IOContext,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext","Class","* Extension of {@link JsonStreamContext}, which implements
 * core methods needed, and also exposes
 * more complete API to generator implementation classes.","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.JsonStreamContext",""
"com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_OK_AS_IS","Field","No Comment","public final static int STATUS_OK_AS_IS = 0;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_OK_AFTER_COMMA","Field","No Comment","public final static int STATUS_OK_AFTER_COMMA = 1;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_OK_AFTER_COLON","Field","No Comment","public final static int STATUS_OK_AFTER_COLON = 2;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_OK_AFTER_SPACE","Field","in root context","public final static int STATUS_OK_AFTER_SPACE = 3;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_EXPECT_VALUE","Field","No Comment","public final static int STATUS_EXPECT_VALUE = 4;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_EXPECT_NAME","Field","No Comment","public final static int STATUS_EXPECT_NAME = 5;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext._parent","Field","* Parent context for this context; null for root context.","protected final JsonWriteContext _parent;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext._dups","Field","No Comment","protected DupDetector _dups;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext._child","Field","No Comment","protected JsonWriteContext _child;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext._currentName","Field","* Name of the field of which value is to be written; only
     * used for OBJECT contexts","protected String _currentName;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext._currentValue","Field","* @since 2.5","protected Object _currentValue;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext._gotName","Field","* Marker used to indicate that we just wrote a name, and
     * now expect a value to write","protected boolean _gotName;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.reset(int)","Method","* Internal method to allow instance reuse: DO NOT USE unless you absolutely
     * know what you are doing.
     * Clears up state (including ""current value""), changes type to one specified;
     * resets current duplicate-detection state (if any).
     * Parent link left as-is since it is {@code final}.
     *<p>
     * NOTE: Public since 2.12.
     *
     * @param type Type to assign to this context node
     *
     * @return This context instance to allow call-chaining","public JsonWriteContext reset(int type) {
    _type = type;
    _index = -1;
    _currentName = null;
    _gotName = false;
    _currentValue = null;
    if (_dups != null) {
        _dups.reset();
    }
    return this;
}","JsonWriteContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.reset(int).type","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonWriteContext.reset(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.reset(int,Object)","Method","* Internal method to allow instance reuse: DO NOT USE unless you absolutely
     * know what you are doing.
     * Clears up state, changes type to one specified, assigns ""current value"";
     * resets current duplicate-detection state (if any).
     * Parent link left as-is since it is {@code final}.
     *<p>
     * NOTE: Public since 2.12.
     *
     * @param type Type to assign to this context node
     * @param currValue Current value to assign to this context node
     *
     * @return This context instance to allow call-chaining
     *
     * @since 2.10","public JsonWriteContext reset(int type, Object currValue) {
    _type = type;
    _index = -1;
    _currentName = null;
    _gotName = false;
    _currentValue = currValue;
    if (_dups != null) {
        _dups.reset();
    }
    return this;
}","JsonWriteContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.reset(int,Object).type","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonWriteContext.reset(int,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.reset(int,Object).currValue","Parameter_2","Belong to com.fasterxml.jackson.core.json.JsonWriteContext.reset(int,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.withDupDetector(DupDetector)","Method","No Comment","public JsonWriteContext withDupDetector(DupDetector dups) {
    _dups = dups;
    return this;
}","JsonWriteContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.withDupDetector(DupDetector).dups","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonWriteContext.withDupDetector(DupDetector)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.getCurrentValue()","Method","No Comment","@Override
public Object getCurrentValue() {
    return _currentValue;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.setCurrentValue(Object)","Method","No Comment","@Override
public void setCurrentValue(Object v) {
    _currentValue = v;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.setCurrentValue(Object).v","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonWriteContext.setCurrentValue(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext()","Method","* @deprecated Since 2.3; use method that takes argument
     *
     * @return Context instance created","@Deprecated
public static JsonWriteContext createRootContext() {
    return createRootContext(null);
}","JsonWriteContext","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext(DupDetector)","Method","No Comment","public static JsonWriteContext createRootContext(DupDetector dd) {
    return new JsonWriteContext(TYPE_ROOT, null, dd);
}","JsonWriteContext","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext(DupDetector).dd","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext(DupDetector)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.createChildArrayContext()","Method","No Comment","public JsonWriteContext createChildArrayContext() {
    JsonWriteContext ctxt = _child;
    if (ctxt == null) {
        _child = ctxt = new JsonWriteContext(TYPE_ARRAY, this, (_dups == null) ? null : _dups.child());
        return ctxt;
    }
    return ctxt.reset(TYPE_ARRAY);
}","JsonWriteContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.createChildArrayContext(Object)","Method","@since 2.10","public JsonWriteContext createChildArrayContext(Object currValue) {
    JsonWriteContext ctxt = _child;
    if (ctxt == null) {
        _child = ctxt = new JsonWriteContext(TYPE_ARRAY, this, (_dups == null) ? null : _dups.child(), currValue);
        return ctxt;
    }
    return ctxt.reset(TYPE_ARRAY, currValue);
}","JsonWriteContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.createChildArrayContext(Object).currValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonWriteContext.createChildArrayContext(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.createChildObjectContext()","Method","No Comment","public JsonWriteContext createChildObjectContext() {
    JsonWriteContext ctxt = _child;
    if (ctxt == null) {
        _child = ctxt = new JsonWriteContext(TYPE_OBJECT, this, (_dups == null) ? null : _dups.child());
        return ctxt;
    }
    return ctxt.reset(TYPE_OBJECT);
}","JsonWriteContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.createChildObjectContext(Object)","Method","@since 2.10","public JsonWriteContext createChildObjectContext(Object currValue) {
    JsonWriteContext ctxt = _child;
    if (ctxt == null) {
        _child = ctxt = new JsonWriteContext(TYPE_OBJECT, this, (_dups == null) ? null : _dups.child(), currValue);
        return ctxt;
    }
    return ctxt.reset(TYPE_OBJECT, currValue);
}","JsonWriteContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.createChildObjectContext(Object).currValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonWriteContext.createChildObjectContext(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.getParent()","Method","No Comment","@Override
public final JsonWriteContext getParent() {
    return _parent;
}","JsonWriteContext","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.getCurrentName()","Method","No Comment","@Override
public final String getCurrentName() {
    return _currentName;
}","String","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.hasCurrentName()","Method","@since 2.9","@Override
public boolean hasCurrentName() {
    return _currentName != null;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.clearAndGetParent()","Method","* Method that can be used to both clear the accumulated references
     * (specifically value set with {@link #setCurrentValue(Object)})
     * that should not be retained, and returns parent (as would
     * {@link #getParent()} do). Typically called when closing the active
     * context when encountering {@link JsonToken#END_ARRAY} or
     * {@link JsonToken#END_OBJECT}.
     *
     * @return Parent context of this context node, if any; {@code null} for root context
     *
     * @since 2.7","public JsonWriteContext clearAndGetParent() {
    _currentValue = null;
    // could also clear the current name, but seems cheap enough to leave?
    return _parent;
}","JsonWriteContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.getDupDetector()","Method","No Comment","public DupDetector getDupDetector() {
    return _dups;
}","DupDetector","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.writeFieldName(String)","Method","* Method that writer is to call before it writes a name of Object property.
     *
     * @param name Property name being written
     *
     * @return Index of the field entry (0-based)
     *
     * @throws JsonProcessingException if duplicate check restriction is violated","public int writeFieldName(String name) throws JsonProcessingException {
    if ((_type != TYPE_OBJECT) || _gotName) {
        return STATUS_EXPECT_VALUE;
    }
    _gotName = true;
    _currentName = name;
    if (_dups != null) {
        _checkDup(_dups, name);
    }
    return (_index < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.writeFieldName(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonWriteContext.writeFieldName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext._checkDup(DupDetector,String)","Method","No Comment","private final void _checkDup(DupDetector dd, String name) throws JsonProcessingException {
    if (dd.isDup(name)) {
        Object src = dd.getSource();
        throw new JsonGenerationException(""Duplicate field '"" + name + ""'"", ((src instanceof JsonGenerator) ? ((JsonGenerator) src) : null));
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext._checkDup(DupDetector,String).dd","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonWriteContext._checkDup(DupDetector,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext._checkDup(DupDetector,String).name","Parameter_2","Belong to com.fasterxml.jackson.core.json.JsonWriteContext._checkDup(DupDetector,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.writeValue()","Method","No Comment","public int writeValue() {
    // Most likely, object:
    if (_type == TYPE_OBJECT) {
        if (!_gotName) {
            return STATUS_EXPECT_NAME;
        }
        _gotName = false;
        ++_index;
        return STATUS_OK_AFTER_COLON;
    }
    // Ok, array?
    if (_type == TYPE_ARRAY) {
        int ix = _index;
        ++_index;
        return (ix < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;
    }
    // Nope, root context
    // No commas within root context, but need space
    ++_index;
    return (_index == 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_SPACE;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.<init>(int,JsonWriteContext,DupDetector)","Constructor","No Comment","protected JsonWriteContext(int type, JsonWriteContext parent, DupDetector dups) {
    super();
    _type = type;
    _parent = parent;
    _nestingDepth = parent == null ? 0 : parent._nestingDepth + 1;
    _dups = dups;
    _index = -1;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.<init>(int,JsonWriteContext,DupDetector).type","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonWriteContext.<init>(int,JsonWriteContext,DupDetector)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.<init>(int,JsonWriteContext,DupDetector).parent","Parameter_2","Belong to com.fasterxml.jackson.core.json.JsonWriteContext.<init>(int,JsonWriteContext,DupDetector)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.<init>(int,JsonWriteContext,DupDetector).dups","Parameter_3","Belong to com.fasterxml.jackson.core.json.JsonWriteContext.<init>(int,JsonWriteContext,DupDetector)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.<init>(int,JsonWriteContext,DupDetector,Object)","Constructor","@since 2.10","protected JsonWriteContext(int type, JsonWriteContext parent, DupDetector dups, Object currValue) {
    super();
    _type = type;
    _parent = parent;
    _nestingDepth = parent == null ? 0 : parent._nestingDepth + 1;
    _dups = dups;
    _index = -1;
    _currentValue = currValue;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.<init>(int,JsonWriteContext,DupDetector,Object).type","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonWriteContext.<init>(int,JsonWriteContext,DupDetector,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.<init>(int,JsonWriteContext,DupDetector,Object).parent","Parameter_2","Belong to com.fasterxml.jackson.core.json.JsonWriteContext.<init>(int,JsonWriteContext,DupDetector,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.<init>(int,JsonWriteContext,DupDetector,Object).dups","Parameter_3","Belong to com.fasterxml.jackson.core.json.JsonWriteContext.<init>(int,JsonWriteContext,DupDetector,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonWriteContext.<init>(int,JsonWriteContext,DupDetector,Object).currValue","Parameter_4","Belong to com.fasterxml.jackson.core.json.JsonWriteContext.<init>(int,JsonWriteContext,DupDetector,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.DupDetector","Class","* Helper class used if
 * {@link com.fasterxml.jackson.core.JsonParser.Feature#STRICT_DUPLICATE_DETECTION}
 * is enabled.
 * Optimized to try to limit memory usage and processing overhead for smallest
 * entries, but without adding trashing (immutable objects would achieve optimal
 * memory usage but lead to significant number of discarded temp objects for
 * scopes with large number of entries). Another consideration is trying to limit
 * actual number of compiled classes as it contributes significantly to overall
 * jar size (due to linkage etc).
 *
 * @since 2.3","Class do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.json.DupDetector._source","Field","* We need to store a back-reference here to parser/generator.","protected final Object _source;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.DupDetector._firstName","Field","No Comment","protected String _firstName;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.DupDetector._secondName","Field","No Comment","protected String _secondName;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.DupDetector._seen","Field","* Lazily constructed set of names already seen within this context.","protected HashSet<String> _seen;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.DupDetector.rootDetector(JsonParser)","Method","No Comment","public static DupDetector rootDetector(JsonParser p) {
    return new DupDetector(p);
}","DupDetector","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.DupDetector.rootDetector(JsonParser).p","Parameter_1","Belong to com.fasterxml.jackson.core.json.DupDetector.rootDetector(JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.DupDetector.rootDetector(JsonGenerator)","Method","No Comment","public static DupDetector rootDetector(JsonGenerator g) {
    return new DupDetector(g);
}","DupDetector","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.DupDetector.rootDetector(JsonGenerator).g","Parameter_1","Belong to com.fasterxml.jackson.core.json.DupDetector.rootDetector(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.DupDetector.child()","Method","No Comment","public DupDetector child() {
    return new DupDetector(_source);
}","DupDetector","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.DupDetector.reset()","Method","No Comment","public void reset() {
    _firstName = null;
    _secondName = null;
    _seen = null;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.DupDetector.findLocation()","Method","No Comment","public JsonLocation findLocation() {
    // ugly but:
    if (_source instanceof JsonParser) {
        return ((JsonParser) _source).currentLocation();
    }
    // do generators have a way to provide Location? Apparently not...
    return null;
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.DupDetector.getSource()","Method","* @return Source object (parser / generator) used to construct this detector
     *
     * @since 2.7","public Object getSource() {
    return _source;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.DupDetector.isDup(String)","Method","* Method called to check whether a newly encountered property name would
     * be a duplicate within this context, and if not, update the state to remember
     * having seen the property name for checking more property names
     *
     * @param name Property seen
     *
     * @return {@code True} if the property had already been seen before in this context
     *
     * @throws JsonParseException to report possible operation problem (default implementation
     *    never throws it)","public boolean isDup(String name) throws JsonParseException {
    if (_firstName == null) {
        _firstName = name;
        return false;
    }
    if (name.equals(_firstName)) {
        return true;
    }
    if (_secondName == null) {
        _secondName = name;
        return false;
    }
    if (name.equals(_secondName)) {
        return true;
    }
    if (_seen == null) {
        // 16 is default, seems reasonable
        _seen = new HashSet<>(16);
        _seen.add(_firstName);
        _seen.add(_secondName);
    }
    return !_seen.add(name);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.DupDetector.isDup(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.json.DupDetector.isDup(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.DupDetector.<init>(Object)","Constructor","No Comment","private DupDetector(Object src) {
    _source = src;
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.DupDetector.<init>(Object).src","Parameter_1","Belong to com.fasterxml.jackson.core.json.DupDetector.<init>(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase","Abstract Class","* Another intermediate base class, only used by actual JSON-backed parser
 * implementations.
 *
 * @since 2.17","Abstract Class do not obtain Source Code","No return type","public , abstract ","com.fasterxml.jackson.core.base.ParserBase",""
"com.fasterxml.jackson.core.json.JsonParserBase.FEAT_MASK_TRAILING_COMMA","Field","No Comment","@SuppressWarnings(""deprecation"")
protected final static int FEAT_MASK_TRAILING_COMMA = Feature.ALLOW_TRAILING_COMMA.getMask();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.FEAT_MASK_LEADING_ZEROS","Field","No Comment","@SuppressWarnings(""deprecation"")
protected final static int FEAT_MASK_LEADING_ZEROS = Feature.ALLOW_NUMERIC_LEADING_ZEROS.getMask();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.FEAT_MASK_NON_NUM_NUMBERS","Field","No Comment","@SuppressWarnings(""deprecation"")
protected final static int FEAT_MASK_NON_NUM_NUMBERS = Feature.ALLOW_NON_NUMERIC_NUMBERS.getMask();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.FEAT_MASK_ALLOW_MISSING","Field","No Comment","@SuppressWarnings(""deprecation"")
protected final static int FEAT_MASK_ALLOW_MISSING = Feature.ALLOW_MISSING_VALUES.getMask();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.FEAT_MASK_ALLOW_SINGLE_QUOTES","Field","No Comment","protected final static int FEAT_MASK_ALLOW_SINGLE_QUOTES = Feature.ALLOW_SINGLE_QUOTES.getMask();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.FEAT_MASK_ALLOW_UNQUOTED_NAMES","Field","No Comment","protected final static int FEAT_MASK_ALLOW_UNQUOTED_NAMES = Feature.ALLOW_UNQUOTED_FIELD_NAMES.getMask();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.FEAT_MASK_ALLOW_JAVA_COMMENTS","Field","No Comment","protected final static int FEAT_MASK_ALLOW_JAVA_COMMENTS = Feature.ALLOW_COMMENTS.getMask();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.FEAT_MASK_ALLOW_YAML_COMMENTS","Field","No Comment","protected final static int FEAT_MASK_ALLOW_YAML_COMMENTS = Feature.ALLOW_YAML_COMMENTS.getMask();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.INPUT_CODES_LATIN1","Field","pre-processing task, to simplify first pass, keep it fast.","protected final static int[] INPUT_CODES_LATIN1 = CharTypes.getInputCodeLatin1();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.INPUT_CODES_UTF8","Field","This is the main input-code lookup table, fetched eagerly","protected final static int[] INPUT_CODES_UTF8 = CharTypes.getInputCodeUtf8();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase._objectCodec","Field","* Codec used for data binding when (if) requested; typically full
     * <code>ObjectMapper</code>, but that abstract is not part of core
     * package.","protected ObjectCodec _objectCodec;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.getCodec()","Method","No Comment","@Override
public ObjectCodec getCodec() {
    return _objectCodec;
}","ObjectCodec","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.setCodec(ObjectCodec)","Method","No Comment","@Override
public void setCodec(ObjectCodec c) {
    _objectCodec = c;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.setCodec(ObjectCodec).c","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonParserBase.setCodec(ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.getReadCapabilities()","Method","No Comment","@Override
public final JacksonFeatureSet<StreamReadCapability> getReadCapabilities() {
    return JSON_READ_CAPABILITIES;
}","JacksonFeatureSet","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.getNumberTypeFP()","Method","* JSON format does not have native information on ""correct"" floating-point
     * type to use, unlike some formats (most binary formats), so it needs to
     * indicate this as {@link NumberTypeFP#UNKNOWN}.
     *
     * @return Natural floating-point type if known; {@link NumberTypeFP#UNKNOWN} for
     *    all JSON-backed parsers.","// added in 2.17
@Override
public NumberTypeFP getNumberTypeFP() throws IOException {
    return NumberTypeFP.UNKNOWN;
}","NumberTypeFP","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.currentLocation()","Abstract Method","No Comment","@Override
public abstract JsonLocation currentLocation();","JsonLocation","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.currentTokenLocation()","Abstract Method","No Comment","@Override
public abstract JsonLocation currentTokenLocation();","JsonLocation","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase._currentLocationMinusOne()","Abstract Method","No Comment","@Override
protected abstract JsonLocation _currentLocationMinusOne();","JsonLocation","protected , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.getCurrentLocation()","Method","No Comment","// since 2.17
@Deprecated
@Override
public final JsonLocation getCurrentLocation() {
    return currentLocation();
}","JsonLocation","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.getTokenLocation()","Method","No Comment","// since 2.17
@Deprecated
@Override
public final JsonLocation getTokenLocation() {
    return currentTokenLocation();
}","JsonLocation","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.<init>(IOContext,int,ObjectCodec)","Constructor","No Comment","protected JsonParserBase(IOContext ioCtxt, int features, ObjectCodec codec) {
    super(ioCtxt, features);
    _objectCodec = codec;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.<init>(IOContext,int,ObjectCodec).ioCtxt","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonParserBase.<init>(IOContext,int,ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.<init>(IOContext,int,ObjectCodec).features","Parameter_2","Belong to com.fasterxml.jackson.core.json.JsonParserBase.<init>(IOContext,int,ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonParserBase.<init>(IOContext,int,ObjectCodec).codec","Parameter_3","Belong to com.fasterxml.jackson.core.json.JsonParserBase.<init>(IOContext,int,ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser","Class","* This is a concrete implementation of {@link JsonParser}, which is
 * based on a {@link java.io.Reader} to handle low-level character
 * conversion tasks.","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.json.JsonParserBase",""
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._reader","Field","* Reader that can be used for reading more content, if one
     * buffer from input source, but in some cases pre-loaded buffer
     * is handed to the parser.","protected Reader _reader;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._inputBuffer","Field","* Current buffer from which data is read; generally data is read into
     * buffer from input source.","protected char[] _inputBuffer;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._bufferRecyclable","Field","* Flag that indicates whether the input buffer is recycable (and
     * needs to be returned to recycler once we are done) or not.
     *<p>
     * If it is not, it also means that parser can NOT modify underlying
     * buffer.","protected boolean _bufferRecyclable;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._objectCodec","Field","No Comment","protected ObjectCodec _objectCodec;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._symbols","Field","No Comment","protected final CharsToNameCanonicalizer _symbols;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._hashSeed","Field","No Comment","protected final int _hashSeed;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._tokenIncomplete","Field","* Flag that indicates that the current token has not yet
     * been fully processed, and needs to be finished for
     * some access (or skipped to obtain the next token)","protected boolean _tokenIncomplete;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._nameStartOffset","Field","* Value of {@link #_inputPtr} at the time when the first character of
     * name token was read. Used for calculating token location when requested;
     * combined with {@link #_currInputProcessed}, may be updated appropriately
     * as needed.
     *
     * @since 2.7","protected long _nameStartOffset;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._nameStartRow","Field","* @since 2.7","protected int _nameStartRow;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._nameStartCol","Field","* @since 2.7","protected int _nameStartCol;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.releaseBuffered(Writer)","Method","No Comment","@Override
public int releaseBuffered(Writer w) throws IOException {
    int count = _inputEnd - _inputPtr;
    if (count < 1) {
        return 0;
    }
    // let's just advance ptr to end
    int origPtr = _inputPtr;
    _inputPtr += count;
    w.write(_inputBuffer, origPtr, count);
    return count;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.releaseBuffered(Writer).w","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.releaseBuffered(Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getInputSource()","Method","No Comment","@Override
public Object getInputSource() {
    return _reader;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getNextChar(String)","Method","No Comment","// since 2.8
@Deprecated
protected char getNextChar(String eofMsg) throws IOException {
    return getNextChar(eofMsg, null);
}","char","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getNextChar(String).eofMsg","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getNextChar(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getNextChar(String,JsonToken)","Method","No Comment","protected char getNextChar(String eofMsg, JsonToken forToken) throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!_loadMore()) {
            _reportInvalidEOF(eofMsg, forToken);
        }
    }
    return _inputBuffer[_inputPtr++];
}","char","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getNextChar(String,JsonToken).eofMsg","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getNextChar(String,JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getNextChar(String,JsonToken).forToken","Parameter_2","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getNextChar(String,JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._closeInput()","Method","No Comment","@Override
protected void _closeInput() throws IOException {
    /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()
         *   on the underlying Reader, unless we ""own"" it, or auto-closing
         *   feature is enabled.
         *   One downside is that when using our optimized
         *   Reader (granted, we only do that for UTF-32...) this
         *   means that buffer recycling won't work correctly.
         */
    if (_reader != null) {
        if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE)) {
            _reader.close();
        }
        _reader = null;
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._releaseBuffers()","Method","* Method called to release internal buffers owned by the base
     * reader. This may be called along with {@link #_closeInput} (for
     * example, when explicitly closing this reader instance), or
     * separately (if need be).","@Override
protected void _releaseBuffers() throws IOException {
    super._releaseBuffers();
    // merge new symbols, if any
    _symbols.release();
    // and release buffers, if they are recyclable ones
    if (_bufferRecyclable) {
        char[] buf = _inputBuffer;
        if (buf != null) {
            _inputBuffer = null;
            _ioContext.releaseTokenBuffer(buf);
        }
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._loadMoreGuaranteed()","Method","No Comment","protected void _loadMoreGuaranteed() throws IOException {
    if (!_loadMore()) {
        _reportInvalidEOF();
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._loadMore()","Method","No Comment","protected boolean _loadMore() throws IOException {
    if (_reader != null) {
        final int bufSize = _inputEnd;
        _currInputProcessed += bufSize;
        _currInputRowStart -= bufSize;
        // 06-Sep-2023, tatu: [core#1046] Enforce max doc length limit
        _streamReadConstraints.validateDocumentLength(_currInputProcessed);
        int count = _reader.read(_inputBuffer, 0, _inputBuffer.length);
        if (count > 0) {
            // 26-Nov-2015, tatu: Since name-offset requires it too, must offset
            //   this increase to avoid ""moving"" name-offset, resulting most likely
            //   in negative value, which is fine as combine value remains unchanged.
            _nameStartOffset -= bufSize;
            _inputPtr = 0;
            _inputEnd = count;
            return true;
        }
        _inputPtr = _inputEnd = 0;
        // End of input
        _closeInput();
        // Should never return 0, so let's fail
        if (count == 0) {
            throw new IOException(""Reader returned 0 characters when trying to read "" + _inputEnd);
        }
    }
    return false;
}","boolean","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getText()","Method","* Method for accessing textual representation of the current event;
     * if no current event (before first call to {@link #nextToken}, or
     * after encountering end-of-input), returns null.
     * Method can be called for any event.
     *
     * @throws IOException if there are general I/O or parse issues, including if the text is too large,
     * see {@link com.fasterxml.jackson.core.StreamReadConstraints.Builder#maxStringLength(int)}","@Override
public final String getText() throws IOException {
    if (_currToken == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            _finishString();
        }
        return _textBuffer.contentsAsString();
    }
    return _getText2(_currToken);
}","String","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getText(Writer)","Method","No Comment","// since 2.8
@Override
public int getText(Writer writer) throws IOException {
    JsonToken t = _currToken;
    if (t == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            _finishString();
        }
        return _textBuffer.contentsToWriter(writer);
    }
    if (t == JsonToken.FIELD_NAME) {
        String n = _parsingContext.getCurrentName();
        writer.write(n);
        return n.length();
    }
    if (t != null) {
        if (t.isNumeric()) {
            return _textBuffer.contentsToWriter(writer);
        }
        char[] ch = t.asCharArray();
        writer.write(ch);
        return ch.length;
    }
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getText(Writer).writer","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getText(Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getValueAsString()","Method","@since 2.1","@Override
public final String getValueAsString() throws IOException {
    if (_currToken == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            _finishString();
        }
        return _textBuffer.contentsAsString();
    }
    if (_currToken == JsonToken.FIELD_NAME) {
        return currentName();
    }
    return super.getValueAsString(null);
}","String","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getValueAsString(String)","Method","@since 2.1","@Override
public final String getValueAsString(String defValue) throws IOException {
    if (_currToken == JsonToken.VALUE_STRING) {
        if (_tokenIncomplete) {
            _tokenIncomplete = false;
            // only strings can be incomplete
            _finishString();
        }
        return _textBuffer.contentsAsString();
    }
    if (_currToken == JsonToken.FIELD_NAME) {
        return currentName();
    }
    return super.getValueAsString(defValue);
}","String","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getValueAsString(String).defValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getValueAsString(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._getText2(JsonToken)","Method","No Comment","protected final String _getText2(JsonToken t) throws IOException {
    if (t == null) {
        return null;
    }
    switch(t.id()) {
        case ID_FIELD_NAME:
            return _parsingContext.getCurrentName();
        case ID_STRING:
        // fall through
        case ID_NUMBER_INT:
        case ID_NUMBER_FLOAT:
            return _textBuffer.contentsAsString();
        default:
            return t.asString();
    }
}","String","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._getText2(JsonToken).t","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._getText2(JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getTextCharacters()","Method","No Comment","@Override
public final char[] getTextCharacters() throws IOException {
    if (_currToken != null) {
        // null only before/after document
        switch(_currToken.id()) {
            case ID_FIELD_NAME:
                if (!_nameCopied) {
                    String name = _parsingContext.getCurrentName();
                    int nameLen = name.length();
                    if (_nameCopyBuffer == null) {
                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);
                    } else if (_nameCopyBuffer.length < nameLen) {
                        _nameCopyBuffer = new char[nameLen];
                    }
                    name.getChars(0, nameLen, _nameCopyBuffer, 0);
                    _nameCopied = true;
                }
                return _nameCopyBuffer;
            case ID_STRING:
                if (_tokenIncomplete) {
                    _tokenIncomplete = false;
                    // only strings can be incomplete
                    _finishString();
                }
            // fall through
            case ID_NUMBER_INT:
            case ID_NUMBER_FLOAT:
                return _textBuffer.getTextBuffer();
            default:
                return _currToken.asCharArray();
        }
    }
    return null;
}","char[]","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getTextLength()","Method","No Comment","@Override
public final int getTextLength() throws IOException {
    if (_currToken != null) {
        // null only before/after document
        switch(_currToken.id()) {
            case ID_FIELD_NAME:
                return _parsingContext.getCurrentName().length();
            case ID_STRING:
                if (_tokenIncomplete) {
                    _tokenIncomplete = false;
                    // only strings can be incomplete
                    _finishString();
                }
            // fall through
            case ID_NUMBER_INT:
            case ID_NUMBER_FLOAT:
                return _textBuffer.size();
            default:
                return _currToken.asCharArray().length;
        }
    }
    return 0;
}","int","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getTextOffset()","Method","No Comment","@Override
public final int getTextOffset() throws IOException {
    // Most have offset of 0, only some may have other values:
    if (_currToken != null) {
        switch(_currToken.id()) {
            case ID_FIELD_NAME:
                return 0;
            case ID_STRING:
                if (_tokenIncomplete) {
                    _tokenIncomplete = false;
                    // only strings can be incomplete
                    _finishString();
                }
            // fall through
            case ID_NUMBER_INT:
            case ID_NUMBER_FLOAT:
                return _textBuffer.getTextOffset();
            default:
        }
    }
    return 0;
}","int","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getBinaryValue(Base64Variant)","Method","No Comment","@Override
public byte[] getBinaryValue(Base64Variant b64variant) throws IOException {
    if ((_currToken == JsonToken.VALUE_EMBEDDED_OBJECT) && (_binaryValue != null)) {
        return _binaryValue;
    }
    if (_currToken != JsonToken.VALUE_STRING) {
        _reportError(""Current token ("" + _currToken + "") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary"");
    }
    // To ensure that we won't see inconsistent data, better clear up state
    if (_tokenIncomplete) {
        try {
            _binaryValue = _decodeBase64(b64variant);
        } catch (IllegalArgumentException iae) {
            throw _constructError(""Failed to decode VALUE_STRING as base64 ("" + b64variant + ""): "" + iae.getMessage());
        }
        /* let's clear incomplete only now; allows for accessing other
             * textual content in error cases
             */
        _tokenIncomplete = false;
    } else {
        // may actually require conversion...
        if (_binaryValue == null) {
            @SuppressWarnings(""resource"")
            ByteArrayBuilder builder = _getByteArrayBuilder();
            _decodeBase64(getText(), builder, b64variant);
            _binaryValue = builder.toByteArray();
        }
    }
    return _binaryValue;
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getBinaryValue(Base64Variant).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.getBinaryValue(Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.readBinaryValue(Base64Variant,OutputStream)","Method","No Comment","@Override
public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException {
    // if we have already read the token, just use whatever we may have
    if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING) {
        byte[] b = getBinaryValue(b64variant);
        out.write(b);
        return b.length;
    }
    // otherwise do ""real"" incremental parsing...
    byte[] buf = _ioContext.allocBase64Buffer();
    try {
        return _readBinary(b64variant, out, buf);
    } finally {
        _ioContext.releaseBase64Buffer(buf);
    }
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.readBinaryValue(Base64Variant,OutputStream).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.readBinaryValue(Base64Variant,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.readBinaryValue(Base64Variant,OutputStream).out","Parameter_2","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.readBinaryValue(Base64Variant,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._readBinary(Base64Variant,OutputStream,byte[])","Method","No Comment","protected int _readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer) throws IOException {
    int outputPtr = 0;
    final int outputEnd = buffer.length - 3;
    int outputCount = 0;
    while (true) {
        // first, we'll skip preceding white space, if any
        char ch;
        do {
            if (_inputPtr >= _inputEnd) {
                _loadMoreGuaranteed();
            }
            ch = _inputBuffer[_inputPtr++];
        } while (ch <= INT_SPACE);
        int bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            // reached the end, fair and square?
            if (ch == '""') {
                break;
            }
            bits = _decodeBase64Escape(b64variant, ch, 0);
            if (bits < 0) {
                // white space to skip
                continue;
            }
        }
        // enough room? If not, flush
        if (outputPtr > outputEnd) {
            outputCount += outputPtr;
            out.write(buffer, 0, outputPtr);
            outputPtr = 0;
        }
        int decodedData = bits;
        // then second base64 char; can't get padding yet, nor ws
        if (_inputPtr >= _inputEnd) {
            _loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++];
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            bits = _decodeBase64Escape(b64variant, ch, 1);
        }
        decodedData = (decodedData << 6) | bits;
        // third base64 char; can be padding, but not ws
        if (_inputPtr >= _inputEnd) {
            _loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++];
        bits = b64variant.decodeBase64Char(ch);
        // First branch: can get padding (-> 1 byte)
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // as per [JACKSON-631], could also just be 'missing'  padding
                if (ch == '""') {
                    decodedData >>= 4;
                    buffer[outputPtr++] = (byte) decodedData;
                    if (b64variant.requiresPaddingOnRead()) {
                        // to keep parser state bit more consistent
                        --_inputPtr;
                        _handleBase64MissingPadding(b64variant);
                    }
                    break;
                }
                bits = _decodeBase64Escape(b64variant, ch, 2);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                // Ok, must get padding
                if (_inputPtr >= _inputEnd) {
                    _loadMoreGuaranteed();
                }
                ch = _inputBuffer[_inputPtr++];
                if (!b64variant.usesPaddingChar(ch)) {
                    if (_decodeBase64Escape(b64variant, ch, 3) != Base64Variant.BASE64_VALUE_PADDING) {
                        throw reportInvalidBase64Char(b64variant, ch, 3, ""expected padding character '"" + b64variant.getPaddingChar() + ""'"");
                    }
                }
                // Got 12 bits, only need 8, need to shift
                decodedData >>= 4;
                buffer[outputPtr++] = (byte) decodedData;
                continue;
            }
        }
        // Nope, 2 or 3 bytes
        decodedData = (decodedData << 6) | bits;
        // fourth and last base64 char; can be padding, but not ws
        if (_inputPtr >= _inputEnd) {
            _loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++];
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // as per [JACKSON-631], could also just be 'missing'  padding
                if (ch == '""') {
                    decodedData >>= 2;
                    buffer[outputPtr++] = (byte) (decodedData >> 8);
                    buffer[outputPtr++] = (byte) decodedData;
                    if (b64variant.requiresPaddingOnRead()) {
                        // to keep parser state bit more consistent
                        --_inputPtr;
                        _handleBase64MissingPadding(b64variant);
                    }
                    break;
                }
                bits = _decodeBase64Escape(b64variant, ch, 3);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                /* With padding we only get 2 bytes; but we have
                     * to shift it a bit so it is identical to triplet
                     * case with partial output.
                     * 3 chars gives 3x6 == 18 bits, of which 2 are
                     * dummies, need to discard:
                     */
                decodedData >>= 2;
                buffer[outputPtr++] = (byte) (decodedData >> 8);
                buffer[outputPtr++] = (byte) decodedData;
                continue;
            }
        }
        // otherwise, our triplet is now complete
        decodedData = (decodedData << 6) | bits;
        buffer[outputPtr++] = (byte) (decodedData >> 16);
        buffer[outputPtr++] = (byte) (decodedData >> 8);
        buffer[outputPtr++] = (byte) decodedData;
    }
    _tokenIncomplete = false;
    if (outputPtr > 0) {
        outputCount += outputPtr;
        out.write(buffer, 0, outputPtr);
    }
    return outputCount;
}","int","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._readBinary(Base64Variant,OutputStream,byte[]).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._readBinary(Base64Variant,OutputStream,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._readBinary(Base64Variant,OutputStream,byte[]).out","Parameter_2","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._readBinary(Base64Variant,OutputStream,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._readBinary(Base64Variant,OutputStream,byte[]).buffer","Parameter_3","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._readBinary(Base64Variant,OutputStream,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken()","Method","* @return Next token from the stream, if any found, or null
     *   to indicate end-of-input","@Override
public final JsonToken nextToken() throws IOException {
    /* First: field names are special -- we will always tokenize
         * (part of) value along with field name to simplify
         * state handling. If so, can and need to use secondary token:
         */
    if (_currToken == JsonToken.FIELD_NAME) {
        return _nextAfterName();
    }
    // But if we didn't already have a name, and (partially?) decode number,
    // need to ensure no numeric information is leaked
    _numTypesValid = NR_UNKNOWN;
    if (_tokenIncomplete) {
        // only strings can be partial
        _skipString();
    }
    int i = _skipWSOrEnd();
    if (i < 0) {
        // end-of-input
        // Should actually close/release things
        // like input source, symbol table and recyclable buffers now.
        close();
        return _updateTokenToNull();
    }
    // clear any data retained so far
    _binaryValue = null;
    // Closing scope?
    if ((i | 0x20) == INT_RCURLY) {
        // ~ '}]'
        _closeScope(i);
        return _currToken;
    }
    // Nope: do we then expect a comma?
    if (_parsingContext.expectComma()) {
        i = _skipComma(i);
        // Was that a trailing comma?
        if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {
            if ((i | 0x20) == INT_RCURLY) {
                // ~ '}]'
                _closeScope(i);
                return _currToken;
            }
        }
    }
    /* And should we now have a name? Always true for Object contexts, since
         * the intermediate 'expect-value' state is never retained.
         */
    boolean inObject = _parsingContext.inObject();
    if (inObject) {
        // First, field name itself:
        _updateNameLocation();
        String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);
        _parsingContext.setCurrentName(name);
        _updateToken(JsonToken.FIELD_NAME);
        i = _skipColon();
    }
    _updateLocation();
    // Ok: we must have a value... what is it?
    JsonToken t;
    switch(i) {
        case '""':
            _tokenIncomplete = true;
            t = JsonToken.VALUE_STRING;
            break;
        case '[':
            if (!inObject) {
                createChildArrayContext(_tokenInputRow, _tokenInputCol);
            }
            t = JsonToken.START_ARRAY;
            break;
        case '{':
            if (!inObject) {
                createChildObjectContext(_tokenInputRow, _tokenInputCol);
            }
            t = JsonToken.START_OBJECT;
            break;
        case '}':
            // Error: } is not valid at this point; valid closers have
            // been handled earlier
            _reportUnexpectedChar(i, ""expected a value"");
        case 't':
            _matchTrue();
            t = JsonToken.VALUE_TRUE;
            break;
        case 'f':
            _matchFalse();
            t = JsonToken.VALUE_FALSE;
            break;
        case 'n':
            _matchNull();
            t = JsonToken.VALUE_NULL;
            break;
        case '-':
            t = _parseSignedNumber(true);
            break;
        case '+':
            if (isEnabled(JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS.mappedFeature())) {
                t = _parseSignedNumber(false);
            } else {
                t = _handleOddValue(i);
            }
            break;
        case // [core#61]]
        '.':
            t = _parseFloatThatStartsWithPeriod(false);
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            t = _parseUnsignedNumber(i);
            break;
        default:
            t = _handleOddValue(i);
            break;
    }
    if (inObject) {
        _nextToken = t;
        return _currToken;
    }
    return _updateToken(t);
}","JsonToken","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._nextAfterName()","Method","No Comment","private final JsonToken _nextAfterName() throws IOException {
    // need to invalidate if it was copied
    _nameCopied = false;
    JsonToken t = _nextToken;
    _nextToken = null;
    // !!! 16-Nov-2015, tatu: TODO: fix [databind#37], copy next location to current here
    // Also: may need to start new context?
    if (t == JsonToken.START_ARRAY) {
        createChildArrayContext(_tokenInputRow, _tokenInputCol);
    } else if (t == JsonToken.START_OBJECT) {
        createChildObjectContext(_tokenInputRow, _tokenInputCol);
    }
    return _updateToken(t);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.finishToken()","Method","No Comment","@Override
public void finishToken() throws IOException {
    if (_tokenIncomplete) {
        _tokenIncomplete = false;
        // only strings can be incomplete
        _finishString();
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextFieldName(SerializableString)","Method","Implemented since 2.7","@Override
public boolean nextFieldName(SerializableString sstr) throws IOException {
    // // // Note: most of code below is copied from nextToken()
    _numTypesValid = NR_UNKNOWN;
    if (_currToken == JsonToken.FIELD_NAME) {
        _nextAfterName();
        return false;
    }
    if (_tokenIncomplete) {
        _skipString();
    }
    int i = _skipWSOrEnd();
    if (i < 0) {
        close();
        _updateTokenToNull();
        return false;
    }
    _binaryValue = null;
    // Closing scope?
    if ((i | 0x20) == INT_RCURLY) {
        // ~ '}]'
        _closeScope(i);
        return false;
    }
    if (_parsingContext.expectComma()) {
        i = _skipComma(i);
        // Was that a trailing comma?
        if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {
            if ((i | 0x20) == INT_RCURLY) {
                // ~ '}]'
                _closeScope(i);
                return false;
            }
        }
    }
    if (!_parsingContext.inObject()) {
        _updateLocation();
        _nextTokenNotInObject(i);
        return false;
    }
    _updateNameLocation();
    if (i == INT_QUOTE) {
        // when doing literal match, must consider escaping:
        char[] nameChars = sstr.asQuotedChars();
        final int len = nameChars.length;
        // Require 4 more bytes for faster skipping of colon that follows name
        if ((_inputPtr + len + 4) < _inputEnd) {
            // maybe...
            // first check length match by
            final int end = _inputPtr + len;
            if (_inputBuffer[end] == '""') {
                int offset = 0;
                int ptr = _inputPtr;
                while (true) {
                    if (ptr == end) {
                        // yes, match!
                        _parsingContext.setCurrentName(sstr.getValue());
                        _isNextTokenNameYes(_skipColonFast(ptr + 1));
                        return true;
                    }
                    if (nameChars[offset] != _inputBuffer[ptr]) {
                        break;
                    }
                    ++offset;
                    ++ptr;
                }
            }
        }
    }
    return _isNextTokenNameMaybe(i, sstr.getValue());
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextFieldName(SerializableString).sstr","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextFieldName(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextFieldName()","Method","No Comment","@Override
public String nextFieldName() throws IOException {
    // // // Note: this is almost a verbatim copy of nextToken() (minus comments)
    _numTypesValid = NR_UNKNOWN;
    if (_currToken == JsonToken.FIELD_NAME) {
        _nextAfterName();
        return null;
    }
    if (_tokenIncomplete) {
        _skipString();
    }
    int i = _skipWSOrEnd();
    if (i < 0) {
        close();
        _updateTokenToNull();
        return null;
    }
    _binaryValue = null;
    if ((i | 0x20) == INT_RCURLY) {
        // ~ '}]'
        _closeScope(i);
        return null;
    }
    if (_parsingContext.expectComma()) {
        i = _skipComma(i);
        if ((_features & FEAT_MASK_TRAILING_COMMA) != 0) {
            if ((i | 0x20) == INT_RCURLY) {
                // ~ '}]'
                _closeScope(i);
                return null;
            }
        }
    }
    if (!_parsingContext.inObject()) {
        _updateLocation();
        _nextTokenNotInObject(i);
        return null;
    }
    _updateNameLocation();
    String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);
    _parsingContext.setCurrentName(name);
    _updateToken(JsonToken.FIELD_NAME);
    i = _skipColon();
    _updateLocation();
    if (i == INT_QUOTE) {
        _tokenIncomplete = true;
        _nextToken = JsonToken.VALUE_STRING;
        return name;
    }
    // Ok: we must have a value... what is it?
    JsonToken t;
    switch(i) {
        case '-':
            t = _parseSignedNumber(true);
            break;
        case '+':
            if (isEnabled(JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS.mappedFeature())) {
                t = _parseSignedNumber(false);
            } else {
                t = _handleOddValue(i);
            }
            break;
        case // [core#61]]
        '.':
            t = _parseFloatThatStartsWithPeriod(false);
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            t = _parseUnsignedNumber(i);
            break;
        case 'f':
            _matchFalse();
            t = JsonToken.VALUE_FALSE;
            break;
        case 'n':
            _matchNull();
            t = JsonToken.VALUE_NULL;
            break;
        case 't':
            _matchTrue();
            t = JsonToken.VALUE_TRUE;
            break;
        case '[':
            t = JsonToken.START_ARRAY;
            break;
        case '{':
            t = JsonToken.START_OBJECT;
            break;
        default:
            t = _handleOddValue(i);
            break;
    }
    _nextToken = t;
    return name;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._isNextTokenNameYes(int)","Method","No Comment","private final void _isNextTokenNameYes(int i) throws IOException {
    _updateToken(JsonToken.FIELD_NAME);
    _updateLocation();
    switch(i) {
        case '""':
            _tokenIncomplete = true;
            _nextToken = JsonToken.VALUE_STRING;
            return;
        case '[':
            _nextToken = JsonToken.START_ARRAY;
            return;
        case '{':
            _nextToken = JsonToken.START_OBJECT;
            return;
        case 't':
            _matchToken(""true"", 1);
            _nextToken = JsonToken.VALUE_TRUE;
            return;
        case 'f':
            _matchToken(""false"", 1);
            _nextToken = JsonToken.VALUE_FALSE;
            return;
        case 'n':
            _matchToken(""null"", 1);
            _nextToken = JsonToken.VALUE_NULL;
            return;
        case '-':
            _nextToken = _parseSignedNumber(true);
            return;
        case '+':
            if (isEnabled(JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS.mappedFeature())) {
                _nextToken = _parseSignedNumber(false);
            } else {
                _nextToken = _handleOddValue(i);
            }
            return;
        case // [core#61]]
        '.':
            _nextToken = _parseFloatThatStartsWithPeriod(false);
            return;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            _nextToken = _parseUnsignedNumber(i);
            return;
    }
    _nextToken = _handleOddValue(i);
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._isNextTokenNameYes(int).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._isNextTokenNameYes(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._isNextTokenNameMaybe(int,String)","Method","No Comment","protected boolean _isNextTokenNameMaybe(int i, String nameToMatch) throws IOException {
    // // // and this is back to standard nextToken()
    String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);
    _parsingContext.setCurrentName(name);
    _updateToken(JsonToken.FIELD_NAME);
    i = _skipColon();
    _updateLocation();
    if (i == INT_QUOTE) {
        _tokenIncomplete = true;
        _nextToken = JsonToken.VALUE_STRING;
        return nameToMatch.equals(name);
    }
    // Ok: we must have a value... what is it?
    JsonToken t;
    switch(i) {
        case '-':
            t = _parseSignedNumber(true);
            break;
        case '+':
            if (isEnabled(JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS.mappedFeature())) {
                t = _parseSignedNumber(false);
            } else {
                t = _handleOddValue(i);
            }
            break;
        case // [core#61]
        '.':
            t = _parseFloatThatStartsWithPeriod(false);
            break;
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            t = _parseUnsignedNumber(i);
            break;
        case 'f':
            _matchFalse();
            t = JsonToken.VALUE_FALSE;
            break;
        case 'n':
            _matchNull();
            t = JsonToken.VALUE_NULL;
            break;
        case 't':
            _matchTrue();
            t = JsonToken.VALUE_TRUE;
            break;
        case '[':
            t = JsonToken.START_ARRAY;
            break;
        case '{':
            t = JsonToken.START_OBJECT;
            break;
        default:
            t = _handleOddValue(i);
            break;
    }
    _nextToken = t;
    return nameToMatch.equals(name);
}","boolean","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._isNextTokenNameMaybe(int,String).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._isNextTokenNameMaybe(int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._isNextTokenNameMaybe(int,String).nameToMatch","Parameter_2","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._isNextTokenNameMaybe(int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._nextTokenNotInObject(int)","Method","No Comment","private final JsonToken _nextTokenNotInObject(int i) throws IOException {
    if (i == INT_QUOTE) {
        _tokenIncomplete = true;
        return _updateToken(JsonToken.VALUE_STRING);
    }
    switch(i) {
        case '[':
            createChildArrayContext(_tokenInputRow, _tokenInputCol);
            return _updateToken(JsonToken.START_ARRAY);
        case '{':
            createChildObjectContext(_tokenInputRow, _tokenInputCol);
            return _updateToken(JsonToken.START_OBJECT);
        case 't':
            _matchToken(""true"", 1);
            return _updateToken(JsonToken.VALUE_TRUE);
        case 'f':
            _matchToken(""false"", 1);
            return _updateToken(JsonToken.VALUE_FALSE);
        case 'n':
            _matchToken(""null"", 1);
            return _updateToken(JsonToken.VALUE_NULL);
        case '-':
            return _updateToken(_parseSignedNumber(true));
        /* Should we have separate handling for plus? Although
             * it is not allowed per se, it may be erroneously used,
             * and could be indicated by a more specific error message.
             */
        case // [core#61]]
        '.':
            return _updateToken(_parseFloatThatStartsWithPeriod(false));
        case '0':
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
            return _updateToken(_parseUnsignedNumber(i));
        /*
         * This check proceeds only if the Feature.ALLOW_MISSING_VALUES is enabled
         * The Check is for missing values. In case of missing values in an array, the next token will be either ',' or ']'.
         * This case, decrements the already incremented _inputPtr in the buffer in case of comma(,)
         * so that the existing flow goes back to checking the next token which will be comma again and
         * it continues the parsing.
         * Also the case returns NULL as current token in case of ',' or ']'.
         */
        // case ']':  // 11-May-2020, tatu: related to [core#616], this should never be reached
        case ',':
            // 11-May-2020, tatu: [core#616] No commas in root level
            if (!_parsingContext.inRoot()) {
                if ((_features & FEAT_MASK_ALLOW_MISSING) != 0) {
                    --_inputPtr;
                    return _updateToken(JsonToken.VALUE_NULL);
                }
            }
    }
    return _updateToken(_handleOddValue(i));
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._nextTokenNotInObject(int).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._nextTokenNotInObject(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextTextValue()","Method","note: identical to one in UTF8StreamJsonParser","@Override
public final String nextTextValue() throws IOException {
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _updateToken(t);
        if (t == JsonToken.VALUE_STRING) {
            if (_tokenIncomplete) {
                _tokenIncomplete = false;
                _finishString();
            }
            return _textBuffer.contentsAsString();
        }
        if (t == JsonToken.START_ARRAY) {
            createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;
}","String","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextIntValue(int)","Method","note: identical to one in Utf8StreamParser","@Override
public final int nextIntValue(int defaultValue) throws IOException {
    if (_currToken == JsonToken.FIELD_NAME) {
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _updateToken(t);
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getIntValue();
        }
        if (t == JsonToken.START_ARRAY) {
            createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
}","int","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextIntValue(int).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextIntValue(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextLongValue(long)","Method","note: identical to one in Utf8StreamParser","@Override
public final long nextLongValue(long defaultValue) throws IOException {
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _updateToken(t);
        if (t == JsonToken.VALUE_NUMBER_INT) {
            return getLongValue();
        }
        if (t == JsonToken.START_ARRAY) {
            createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return defaultValue;
    }
    // !!! TODO: optimize this case as well
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;
}","long","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextLongValue(long).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextLongValue(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextBooleanValue()","Method","note: identical to one in UTF8StreamJsonParser","@Override
public final Boolean nextBooleanValue() throws IOException {
    if (_currToken == JsonToken.FIELD_NAME) {
        // mostly copied from '_nextAfterName'
        _nameCopied = false;
        JsonToken t = _nextToken;
        _nextToken = null;
        _updateToken(t);
        if (t == JsonToken.VALUE_TRUE) {
            return Boolean.TRUE;
        }
        if (t == JsonToken.VALUE_FALSE) {
            return Boolean.FALSE;
        }
        if (t == JsonToken.START_ARRAY) {
            createChildArrayContext(_tokenInputRow, _tokenInputCol);
        } else if (t == JsonToken.START_OBJECT) {
            createChildObjectContext(_tokenInputRow, _tokenInputCol);
        }
        return null;
    }
    JsonToken t = nextToken();
    if (t != null) {
        int id = t.id();
        if (id == ID_TRUE)
            return Boolean.TRUE;
        if (id == ID_FALSE)
            return Boolean.FALSE;
    }
    return null;
}","Boolean","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseFloatThatStartsWithPeriod()","Method","No Comment","// since 2.14
@Deprecated
protected final JsonToken _parseFloatThatStartsWithPeriod() throws IOException {
    return _parseFloatThatStartsWithPeriod(false);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseFloatThatStartsWithPeriod(boolean)","Method","No Comment","protected final JsonToken _parseFloatThatStartsWithPeriod(final boolean neg) throws IOException {
    // [core#611]: allow optionally leading decimal point
    if (!isEnabled(JsonReadFeature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS.mappedFeature())) {
        return _handleOddValue('.');
    }
    // 26-Jun-2022, tatu: At this point it is assumed that the whole input is
    //    within input buffer so we can ""rewind"" not just one but two characters
    //    (leading sign, period) within same buffer. Caller must ensure this is
    //    the case.
    //    Little bit suspicious of code paths that would go to ""_parseNumber2(...)""
    // 27-Jun-2022, tatu: [core#784] would add plus here too but not yet
    int startPtr = _inputPtr - 1;
    if (neg) {
        --startPtr;
    }
    return _parseFloat(INT_PERIOD, startPtr, _inputPtr, neg, 0);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseFloatThatStartsWithPeriod(boolean).neg","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseFloatThatStartsWithPeriod(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseUnsignedNumber(int)","Method","* Initial parsing method for number values. It needs to be able
     * to parse enough input to be able to determine whether the
     * value is to be considered a simple integer value, or a more
     * generic decimal value: latter of which needs to be expressed
     * as a floating point number. The basic rule is that if the number
     * has no fractional or exponential part, it is an integer; otherwise
     * a floating point number.
     *<p>
     * Because much of input has to be processed in any case, no partial
     * parsing is done: all input text will be stored for further
     * processing. However, actual numeric value conversion will be
     * deferred, since it is usually the most complicated and costliest
     * part of processing.
     *
     * @param ch The first non-null digit character of the number to parse
     *
     * @return Type of token decoded, usually {@link JsonToken#VALUE_NUMBER_INT}
     *    or {@link JsonToken#VALUE_NUMBER_FLOAT}
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","protected final JsonToken _parseUnsignedNumber(int ch) throws IOException {
    /* Although we will always be complete with respect to textual
         * representation (that is, all characters will be parsed),
         * actual conversion to a number is deferred. Thus, need to
         * note that no representations are valid yet
         */
    int ptr = _inputPtr;
    // to include digit already read
    int startPtr = ptr - 1;
    final int inputLen = _inputEnd;
    // One special case, leading zero(es):
    if (ch == INT_0) {
        return _parseNumber2(false, startPtr);
    }
    /* First, let's see if the whole number is contained within
         * the input buffer unsplit. This should be the common case;
         * and to simplify processing, we will just reparse contents
         * in the alternative case (number split on buffer boundary)
         */
    // already got one
    int intLen = 1;
    // First let's get the obligatory integer part:
    int_loop: while (true) {
        if (ptr >= inputLen) {
            _inputPtr = startPtr;
            return _parseNumber2(false, startPtr);
        }
        ch = _inputBuffer[ptr++];
        if (ch < INT_0 || ch > INT_9) {
            break int_loop;
        }
        ++intLen;
    }
    if (ch == INT_PERIOD || (ch | 0x20) == INT_e) {
        // ~ '.eE'
        _inputPtr = ptr;
        return _parseFloat(ch, startPtr, ptr, false, intLen);
    }
    // Got it all: let's add to text buffer for parsing, access
    // need to push back following separator
    --ptr;
    _inputPtr = ptr;
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(ch);
    }
    int len = ptr - startPtr;
    _textBuffer.resetWithShared(_inputBuffer, startPtr, len);
    return resetInt(false, intLen);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseUnsignedNumber(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseUnsignedNumber(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseFloat(int,int,int,boolean,int)","Method","No Comment","private final JsonToken _parseFloat(int ch, int startPtr, int ptr, boolean neg, int intLen) throws IOException {
    final int inputLen = _inputEnd;
    int fractLen = 0;
    // And then see if we get other parts
    if (ch == '.') {
        // yes, fraction
        fract_loop: while (true) {
            if (ptr >= inputLen) {
                return _parseNumber2(neg, startPtr);
            }
            ch = _inputBuffer[ptr++];
            if (ch < INT_0 || ch > INT_9) {
                break fract_loop;
            }
            ++fractLen;
        }
        // must be followed by sequence of ints, one minimum
        if (fractLen == 0) {
            if (!isEnabled(JsonReadFeature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS.mappedFeature())) {
                _reportUnexpectedNumberChar(ch, ""Decimal point not followed by a digit"");
            }
        }
    }
    int expLen = 0;
    if ((ch | 0x20) == INT_e) {
        // ~ 'eE' and/or exponent
        if (ptr >= inputLen) {
            _inputPtr = startPtr;
            return _parseNumber2(neg, startPtr);
        }
        // Sign indicator?
        ch = _inputBuffer[ptr++];
        if (ch == INT_MINUS || ch == INT_PLUS) {
            // yup, skip for now
            if (ptr >= inputLen) {
                _inputPtr = startPtr;
                return _parseNumber2(neg, startPtr);
            }
            ch = _inputBuffer[ptr++];
        }
        while (ch <= INT_9 && ch >= INT_0) {
            ++expLen;
            if (ptr >= inputLen) {
                _inputPtr = startPtr;
                return _parseNumber2(neg, startPtr);
            }
            ch = _inputBuffer[ptr++];
        }
        // must be followed by sequence of ints, one minimum
        if (expLen == 0) {
            _reportUnexpectedNumberChar(ch, ""Exponent indicator not followed by a digit"");
        }
    }
    // need to push back following separator
    --ptr;
    _inputPtr = ptr;
    // As per #105, need separating space between root values; check here
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(ch);
    }
    int len = ptr - startPtr;
    _textBuffer.resetWithShared(_inputBuffer, startPtr, len);
    // And there we have it!
    return resetFloat(neg, intLen, fractLen, expLen);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseFloat(int,int,int,boolean,int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseFloat(int,int,int,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseFloat(int,int,int,boolean,int).startPtr","Parameter_2","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseFloat(int,int,int,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseFloat(int,int,int,boolean,int).ptr","Parameter_3","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseFloat(int,int,int,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseFloat(int,int,int,boolean,int).neg","Parameter_4","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseFloat(int,int,int,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseFloat(int,int,int,boolean,int).intLen","Parameter_5","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseFloat(int,int,int,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseSignedNumber(boolean)","Method","No Comment","private final JsonToken _parseSignedNumber(final boolean negative) throws IOException {
    int ptr = _inputPtr;
    // 26-Jun-2022, tatu: We always have a sign; positive should be allowed as deviation
    //      But unfortunately that won't yet work
    // to include sign/digit already read
    int startPtr = negative ? ptr - 1 : ptr;
    final int inputEnd = _inputEnd;
    if (ptr >= inputEnd) {
        return _parseNumber2(negative, startPtr);
    }
    int ch = _inputBuffer[ptr++];
    // First check: must have a digit to follow minus sign
    if (ch > INT_9 || ch < INT_0) {
        _inputPtr = ptr;
        if (ch == INT_PERIOD) {
            return _parseFloatThatStartsWithPeriod(negative);
        }
        return _handleInvalidNumberStart(ch, negative, true);
    }
    // One special case, leading zero(es):
    if (ch == INT_0) {
        return _parseNumber2(negative, startPtr);
    }
    // already got one
    int intLen = 1;
    // First let's get the obligatory integer part:
    int_loop: while (true) {
        if (ptr >= inputEnd) {
            return _parseNumber2(negative, startPtr);
        }
        ch = _inputBuffer[ptr++];
        if (ch < INT_0 || ch > INT_9) {
            break int_loop;
        }
        ++intLen;
    }
    if (ch == INT_PERIOD || (ch | 0x20) == INT_e) {
        // ~ '.eE'
        _inputPtr = ptr;
        return _parseFloat(ch, startPtr, ptr, negative, intLen);
    }
    --ptr;
    _inputPtr = ptr;
    if (_parsingContext.inRoot()) {
        _verifyRootSpace(ch);
    }
    int len = ptr - startPtr;
    _textBuffer.resetWithShared(_inputBuffer, startPtr, len);
    return resetInt(negative, intLen);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseSignedNumber(boolean).negative","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseSignedNumber(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseNumber2(boolean,int)","Method","* Method called to parse a number, when the primary parse
     * method has failed to parse it, due to it being split on
     * buffer boundary. As a result code is very similar, except
     * that it has to explicitly copy contents to the text buffer
     * instead of just sharing the main input buffer.
     *
     * @param neg Whether number being decoded is negative or not
     * @param startPtr Offset in input buffer for the next character of content
     *
     * @return Type of token decoded, usually {@link JsonToken#VALUE_NUMBER_INT}
     *    or {@link JsonToken#VALUE_NUMBER_FLOAT}
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","private final JsonToken _parseNumber2(boolean neg, int startPtr) throws IOException {
    _inputPtr = neg ? (startPtr + 1) : startPtr;
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr = 0;
    // Need to prepend sign?
    if (neg) {
        outBuf[outPtr++] = '-';
    }
    // This is the place to do leading-zero check(s) too:
    int intLen = 0;
    char c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(""No digit following sign"", JsonToken.VALUE_NUMBER_INT);
    if (c == '0') {
        c = _verifyNoLeadingZeroes();
    }
    boolean eof = false;
    // Ok, first the obligatory integer part:
    int_loop: while (c >= '0' && c <= '9') {
        ++intLen;
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        outBuf[outPtr++] = c;
        if (_inputPtr >= _inputEnd && !_loadMore()) {
            // EOF is legal for main level int values
            c = CHAR_NULL;
            eof = true;
            break int_loop;
        }
        c = _inputBuffer[_inputPtr++];
    }
    // Also, integer part is not optional
    if (intLen == 0) {
        // [core#611]: allow optionally leading decimal point
        if ((c != '.') || !isEnabled(JsonReadFeature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS.mappedFeature())) {
            return _handleInvalidNumberStart(c, neg);
        }
    }
    int fractLen = -1;
    // And then see if we get other parts
    if (c == '.') {
        // yes, fraction
        fractLen = 0;
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        outBuf[outPtr++] = c;
        fract_loop: while (true) {
            if (_inputPtr >= _inputEnd && !_loadMore()) {
                eof = true;
                break fract_loop;
            }
            c = _inputBuffer[_inputPtr++];
            if (c < INT_0 || c > INT_9) {
                break fract_loop;
            }
            ++fractLen;
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            outBuf[outPtr++] = c;
        }
        // must be followed by sequence of ints, one minimum
        if (fractLen == 0) {
            if (!isEnabled(JsonReadFeature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS.mappedFeature())) {
                _reportUnexpectedNumberChar(c, ""Decimal point not followed by a digit"");
            }
        }
    }
    int expLen = -1;
    if ((c | 0x20) == INT_e) {
        // ~ 'eE' exponent?
        expLen = 0;
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        outBuf[outPtr++] = c;
        // Not optional, can require that we get one more char
        c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(""expected a digit for number exponent"", JsonToken.VALUE_NUMBER_FLOAT);
        // Sign indicator?
        if (c == '-' || c == '+') {
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            outBuf[outPtr++] = c;
            // Likewise, non optional:
            c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(""expected a digit for number exponent"", JsonToken.VALUE_NUMBER_FLOAT);
        }
        exp_loop: while (c <= INT_9 && c >= INT_0) {
            ++expLen;
            if (outPtr >= outBuf.length) {
                outBuf = _textBuffer.finishCurrentSegment();
                outPtr = 0;
            }
            outBuf[outPtr++] = c;
            if (_inputPtr >= _inputEnd && !_loadMore()) {
                eof = true;
                break exp_loop;
            }
            c = _inputBuffer[_inputPtr++];
        }
        // must be followed by sequence of ints, one minimum
        if (expLen == 0) {
            _reportUnexpectedNumberChar(c, ""Exponent indicator not followed by a digit"");
        }
    }
    // Ok; unless we hit end-of-input, need to push last char read back
    if (!eof) {
        --_inputPtr;
        if (_parsingContext.inRoot()) {
            _verifyRootSpace(c);
        }
    }
    _textBuffer.setCurrentLength(outPtr);
    // And there we have it!
    // 26-Jun-2022, tatu: Careful here, as non-standard numbers can
    //    cause surprises - cannot use plain ""reset()"" but apply diff logic
    if (fractLen < 0 && expLen < 0) {
        // integer
        return resetInt(neg, intLen);
    }
    return resetFloat(neg, intLen, fractLen, expLen);
}","JsonToken","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseNumber2(boolean,int).neg","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseNumber2(boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseNumber2(boolean,int).startPtr","Parameter_2","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseNumber2(boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._verifyNoLeadingZeroes()","Method","it is not followed by another","private final char _verifyNoLeadingZeroes() throws IOException {
    // Fast case first:
    if (_inputPtr < _inputEnd) {
        char ch = _inputBuffer[_inputPtr];
        // if not followed by a number (probably '.'); return zero as is, to be included
        if (ch < '0' || ch > '9') {
            return '0';
        }
    }
    // and offline the less common case
    return _verifyNLZ2();
}","char","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._verifyNLZ2()","Method","No Comment","private char _verifyNLZ2() throws IOException {
    if (_inputPtr >= _inputEnd && !_loadMore()) {
        return '0';
    }
    char ch = _inputBuffer[_inputPtr];
    if (ch < '0' || ch > '9') {
        return '0';
    }
    if ((_features & FEAT_MASK_LEADING_ZEROS) == 0) {
        reportInvalidNumber(""Leading zeroes not allowed"");
    }
    // if so, just need to skip either all zeroes (if followed by number); or all but one (if non-number)
    // Leading zero to be skipped
    ++_inputPtr;
    if (ch == INT_0) {
        while (_inputPtr < _inputEnd || _loadMore()) {
            ch = _inputBuffer[_inputPtr];
            if (ch < '0' || ch > '9') {
                // followed by non-number; retain one zero
                return '0';
            }
            // skip previous zero
            ++_inputPtr;
            if (ch != '0') {
                // followed by other number; return
                break;
            }
        }
    }
    return ch;
}","char","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleInvalidNumberStart(int,boolean)","Method","look like a number","protected JsonToken _handleInvalidNumberStart(int ch, boolean negative) throws IOException {
    return _handleInvalidNumberStart(ch, negative, false);
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleInvalidNumberStart(int,boolean).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleInvalidNumberStart(int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleInvalidNumberStart(int,boolean).negative","Parameter_2","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleInvalidNumberStart(int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleInvalidNumberStart(int,boolean,boolean)","Method","No Comment","protected JsonToken _handleInvalidNumberStart(int ch, final boolean negative, final boolean hasSign) throws IOException {
    if (ch == 'I') {
        if (_inputPtr >= _inputEnd) {
            if (!_loadMore()) {
                _reportInvalidEOFInValue(JsonToken.VALUE_NUMBER_INT);
            }
        }
        ch = _inputBuffer[_inputPtr++];
        if (ch == 'N') {
            String match = negative ? ""-INF"" : ""+INF"";
            _matchToken(match, 3);
            if ((_features & FEAT_MASK_NON_NUM_NUMBERS) != 0) {
                return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);
            }
            _reportError(""Non-standard token '"" + match + ""': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow"");
        } else if (ch == 'n') {
            String match = negative ? ""-Infinity"" : ""+Infinity"";
            _matchToken(match, 3);
            if ((_features & FEAT_MASK_NON_NUM_NUMBERS) != 0) {
                return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);
            }
            _reportError(""Non-standard token '"" + match + ""': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow"");
        }
    }
    if (!isEnabled(JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS.mappedFeature()) && hasSign && !negative) {
        _reportUnexpectedNumberChar('+', ""JSON spec does not allow numbers to have plus signs: enable `JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS` to allow"");
    }
    final String message = negative ? ""expected digit (0-9) to follow minus sign, for valid numeric value"" : ""expected digit (0-9) for valid numeric value"";
    _reportUnexpectedNumberChar(ch, message);
    return null;
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleInvalidNumberStart(int,boolean,boolean).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleInvalidNumberStart(int,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleInvalidNumberStart(int,boolean,boolean).negative","Parameter_2","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleInvalidNumberStart(int,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleInvalidNumberStart(int,boolean,boolean).hasSign","Parameter_3","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleInvalidNumberStart(int,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._verifyRootSpace(int)","Method","* Method called to ensure that a root-value is followed by a space
     * token.
     *<p>
     * NOTE: caller MUST ensure there is at least one character available;
     * and that input pointer is AT given char (not past)
     *
     * @param ch First character of likely white space to skip
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems (invalid white space)","private final void _verifyRootSpace(int ch) throws IOException {
    // caller had pushed it back, before calling; reset
    ++_inputPtr;
    switch(ch) {
        case ' ':
        case '\t':
            return;
        case '\r':
            // 29-Oct-2022, tatu: [core#834] requires change here, we MUST NOT
            //    force a read. As such let's simply push back the \r without
            //    further ado; it is enough to know there is valid WS separating
            //  NOTE: may need to revisit handling of plain \n to keep Location
            //    info more uniform. But has to do for now.
            // _skipCR();
            --_inputPtr;
            return;
        case '\n':
            ++_currInputRow;
            _currInputRowStart = _inputPtr;
            return;
    }
    _reportMissingRootWS(ch);
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._verifyRootSpace(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._verifyRootSpace(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseName()","Method","No Comment","protected final String _parseName() throws IOException {
    // First: let's try to see if we have a simple name: one that does
    // not cross input buffer boundary, and does not contain escape sequences.
    int ptr = _inputPtr;
    int hash = _hashSeed;
    final int[] codes = INPUT_CODES_LATIN1;
    while (ptr < _inputEnd) {
        int ch = _inputBuffer[ptr];
        if (ch < codes.length && codes[ch] != 0) {
            if (ch == '""') {
                final int start = _inputPtr;
                // to skip the quote
                _inputPtr = ptr + 1;
                return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);
            }
            break;
        }
        hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;
        ++ptr;
    }
    int start = _inputPtr;
    _inputPtr = ptr;
    return _parseName2(start, hash, INT_QUOTE);
}","String","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseName2(int,int,int)","Method","No Comment","private String _parseName2(int startPtr, int hash, int endChar) throws IOException {
    _textBuffer.resetWithShared(_inputBuffer, startPtr, _inputPtr - startPtr);
    /* Output pointers; calls will also ensure that the buffer is
         * not shared and has room for at least one more char.
         */
    char[] outBuf = _textBuffer.getCurrentSegment();
    int outPtr = _textBuffer.getCurrentSegmentSize();
    while (true) {
        if (_inputPtr >= _inputEnd) {
            if (!_loadMore()) {
                _reportInvalidEOF("" in field name"", JsonToken.FIELD_NAME);
            }
        }
        char c = _inputBuffer[_inputPtr++];
        int i = c;
        if (i <= INT_BACKSLASH) {
            if (i == INT_BACKSLASH) {
                /* Although chars outside of BMP are to be escaped as
                     * an UTF-16 surrogate pair, does that affect decoding?
                     * For now let's assume it does not.
                     */
                c = _decodeEscaped();
            } else if (i <= endChar) {
                if (i == endChar) {
                    break;
                }
                if (i < INT_SPACE) {
                    _throwUnquotedSpace(i, ""name"");
                }
            }
        }
        hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + c;
        // Ok, let's add char to output:
        outBuf[outPtr++] = c;
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
    }
    _textBuffer.setCurrentLength(outPtr);
    {
        final TextBuffer tb = _textBuffer;
        final char[] buf = tb.getTextBuffer();
        final int start = tb.getTextOffset();
        return _symbols.findSymbol(buf, start, tb.size(), hash);
    }
}","String","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseName2(int,int,int).startPtr","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseName2(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseName2(int,int,int).hash","Parameter_2","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseName2(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseName2(int,int,int).endChar","Parameter_3","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseName2(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddName(int)","Method","* Method called when we see non-white space character other
     * than double quote, when expecting a field name.
     * In standard mode will just throw an expection; but
     * in non-standard modes may be able to parse name.
     *
     * @param i First undecoded character of possible ""odd name"" to decode
     *
     * @return Name decoded, if allowed and successful
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems (invalid name)","protected String _handleOddName(int i) throws IOException {
    // [JACKSON-173]: allow single quotes
    if (i == '\'' && (_features & FEAT_MASK_ALLOW_SINGLE_QUOTES) != 0) {
        return _parseAposName();
    }
    // [JACKSON-69]: allow unquoted names if feature enabled:
    if ((_features & FEAT_MASK_ALLOW_UNQUOTED_NAMES) == 0) {
        _reportUnexpectedChar(i, ""was expecting double-quote to start field name"");
    }
    final int[] codes = CharTypes.getInputCodeLatin1JsNames();
    final int maxCode = codes.length;
    // Also: first char must be a valid name char, but NOT be number
    boolean firstOk;
    if (i < maxCode) {
        // identifier, or a number ([Issue#102])
        firstOk = (codes[i] == 0);
    } else {
        firstOk = Character.isJavaIdentifierPart((char) i);
    }
    if (!firstOk) {
        _reportUnexpectedChar(i, ""was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"");
    }
    int ptr = _inputPtr;
    int hash = _hashSeed;
    final int inputLen = _inputEnd;
    if (ptr < inputLen) {
        do {
            int ch = _inputBuffer[ptr];
            if (ch < maxCode) {
                if (codes[ch] != 0) {
                    // -1 to bring back first char
                    final int start = _inputPtr - 1;
                    _inputPtr = ptr;
                    return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);
                }
            } else if (!Character.isJavaIdentifierPart((char) ch)) {
                // -1 to bring back first char
                final int start = _inputPtr - 1;
                _inputPtr = ptr;
                return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);
            }
            hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;
            ++ptr;
        } while (ptr < inputLen);
    }
    int start = _inputPtr - 1;
    _inputPtr = ptr;
    return _handleOddName2(start, hash, codes);
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddName(int).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddName(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._parseAposName()","Method","No Comment","protected String _parseAposName() throws IOException {
    // Note: mostly copy of_parseFieldName
    int ptr = _inputPtr;
    int hash = _hashSeed;
    final int inputLen = _inputEnd;
    if (ptr < inputLen) {
        final int[] codes = INPUT_CODES_LATIN1;
        final int maxCode = codes.length;
        do {
            int ch = _inputBuffer[ptr];
            if (ch == '\'') {
                int start = _inputPtr;
                // to skip the quote
                _inputPtr = ptr + 1;
                return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);
            }
            if (ch < maxCode && codes[ch] != 0) {
                break;
            }
            hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;
            ++ptr;
        } while (ptr < inputLen);
    }
    int start = _inputPtr;
    _inputPtr = ptr;
    return _parseName2(start, hash, '\'');
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddValue(int)","Method","* Method for handling cases where first non-space character
     * of an expected value token is not legal for standard JSON content.
     *
     * @param i First undecoded character of possible ""odd value"" to decode
     *
     * @return Type of value decoded, if allowed and successful
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems (invalid white space)","protected JsonToken _handleOddValue(int i) throws IOException {
    // Most likely an error, unless we are to allow single-quote-strings
    switch(i) {
        case '\'':
            /* Allow single quotes? Unlike with regular Strings, we'll eagerly parse
             * contents; this so that there's no need to store information on quote char used.
             * Also, no separation to fast/slow parsing; we'll just do
             * one regular (~= slowish) parsing, to keep code simple
             */
            if ((_features & FEAT_MASK_ALLOW_SINGLE_QUOTES) != 0) {
                return _handleApos();
            }
            break;
        case ']':
            /* 28-Mar-2016: [core#116]: If Feature.ALLOW_MISSING_VALUES is enabled
             *   we may allow ""missing values"", that is, encountering a trailing
             *   comma or closing marker where value would be expected
             */
            if (!_parsingContext.inArray()) {
                break;
            }
        // fall through
        case ',':
            // 11-May-2020, tatu: [core#616] No commas in root level
            if (!_parsingContext.inRoot()) {
                if ((_features & FEAT_MASK_ALLOW_MISSING) != 0) {
                    --_inputPtr;
                    return JsonToken.VALUE_NULL;
                }
            }
            break;
        case 'N':
            _matchToken(""NaN"", 1);
            if ((_features & FEAT_MASK_NON_NUM_NUMBERS) != 0) {
                return resetAsNaN(""NaN"", Double.NaN);
            }
            _reportError(""Non-standard token 'NaN': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow"");
            break;
        case 'I':
            _matchToken(""Infinity"", 1);
            if ((_features & FEAT_MASK_NON_NUM_NUMBERS) != 0) {
                return resetAsNaN(""Infinity"", Double.POSITIVE_INFINITY);
            }
            _reportError(""Non-standard token 'Infinity': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow"");
            break;
        case // note: '-' is taken as number
        '+':
            if (_inputPtr >= _inputEnd) {
                if (!_loadMore()) {
                    _reportInvalidEOFInValue(JsonToken.VALUE_NUMBER_INT);
                }
            }
            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false, true);
    }
    // [core#77] Try to decode most likely token
    if (Character.isJavaIdentifierStart(i)) {
        _reportInvalidToken("""" + ((char) i), _validJsonTokenList());
    }
    // but if it doesn't look like a token:
    _reportUnexpectedChar(i, ""expected a valid value "" + _validJsonValueList());
    return null;
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddValue(int).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddValue(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleApos()","Method","No Comment","protected JsonToken _handleApos() throws IOException {
    char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
    int outPtr = _textBuffer.getCurrentSegmentSize();
    while (true) {
        if (_inputPtr >= _inputEnd) {
            if (!_loadMore()) {
                _reportInvalidEOF("": was expecting closing quote for a string value"", JsonToken.VALUE_STRING);
            }
        }
        char c = _inputBuffer[_inputPtr++];
        int i = c;
        if (i <= '\\') {
            if (i == '\\') {
                // Although chars outside of BMP are to be escaped as
                // an UTF-16 surrogate pair, does that affect decoding?
                // For now let's assume it does not.
                c = _decodeEscaped();
            } else if (i <= '\'') {
                if (i == '\'') {
                    break;
                }
                if (i < INT_SPACE) {
                    _throwUnquotedSpace(i, ""string value"");
                }
            }
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = c;
    }
    _textBuffer.setCurrentLength(outPtr);
    return JsonToken.VALUE_STRING;
}","JsonToken","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddName2(int,int,int[])","Method","No Comment","private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException {
    _textBuffer.resetWithShared(_inputBuffer, startPtr, _inputPtr - startPtr);
    char[] outBuf = _textBuffer.getCurrentSegment();
    int outPtr = _textBuffer.getCurrentSegmentSize();
    final int maxCode = codes.length;
    while (true) {
        if (_inputPtr >= _inputEnd) {
            if (!_loadMore()) {
                // acceptable for now (will error out later)
                break;
            }
        }
        char c = _inputBuffer[_inputPtr];
        int i = c;
        if (i < maxCode) {
            if (codes[i] != 0) {
                break;
            }
        } else if (!Character.isJavaIdentifierPart(c)) {
            break;
        }
        ++_inputPtr;
        hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;
        // Ok, let's add char to output:
        outBuf[outPtr++] = c;
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
    }
    _textBuffer.setCurrentLength(outPtr);
    {
        final TextBuffer tb = _textBuffer;
        final char[] buf = tb.getTextBuffer();
        final int start = tb.getTextOffset();
        return _symbols.findSymbol(buf, start, tb.size(), hash);
    }
}","String","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddName2(int,int,int[]).startPtr","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddName2(int,int,int[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddName2(int,int,int[]).hash","Parameter_2","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddName2(int,int,int[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddName2(int,int,int[]).codes","Parameter_3","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._handleOddName2(int,int,int[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._finishString()","Method","No Comment","@Override
protected final void _finishString() throws IOException {
    /* First: let's try to see if we have simple String value: one
         * that does not cross input buffer boundary, and does not
         * contain escape sequences.
         */
    int ptr = _inputPtr;
    final int inputLen = _inputEnd;
    if (ptr < inputLen) {
        final int[] codes = INPUT_CODES_LATIN1;
        final int maxCode = codes.length;
        do {
            int ch = _inputBuffer[ptr];
            if (ch < maxCode && codes[ch] != 0) {
                if (ch == '""') {
                    _textBuffer.resetWithShared(_inputBuffer, _inputPtr, (ptr - _inputPtr));
                    _inputPtr = ptr + 1;
                    // Yes, we got it all
                    return;
                }
                break;
            }
            ++ptr;
        } while (ptr < inputLen);
    }
    // Either ran out of input, or bumped into an escape sequence...
    _textBuffer.resetWithCopy(_inputBuffer, _inputPtr, (ptr - _inputPtr));
    _inputPtr = ptr;
    _finishString2();
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._finishString2()","Method","No Comment","protected void _finishString2() throws IOException {
    char[] outBuf = _textBuffer.getCurrentSegment();
    int outPtr = _textBuffer.getCurrentSegmentSize();
    final int[] codes = INPUT_CODES_LATIN1;
    final int maxCode = codes.length;
    while (true) {
        if (_inputPtr >= _inputEnd) {
            if (!_loadMore()) {
                _reportInvalidEOF("": was expecting closing quote for a string value"", JsonToken.VALUE_STRING);
            }
        }
        char c = _inputBuffer[_inputPtr++];
        int i = c;
        if (i < maxCode && codes[i] != 0) {
            if (i == INT_QUOTE) {
                break;
            } else if (i == INT_BACKSLASH) {
                /* Although chars outside of BMP are to be escaped as
                     * an UTF-16 surrogate pair, does that affect decoding?
                     * For now let's assume it does not.
                     */
                c = _decodeEscaped();
            } else if (i < INT_SPACE) {
                _throwUnquotedSpace(i, ""string value"");
            }
            // anything else?
        }
        // Need more room?
        if (outPtr >= outBuf.length) {
            outBuf = _textBuffer.finishCurrentSegment();
            outPtr = 0;
        }
        // Ok, let's add char to output:
        outBuf[outPtr++] = c;
    }
    _textBuffer.setCurrentLength(outPtr);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipString()","Method","* Method called to skim through rest of unparsed String value,
     * if it is not needed. This can be done bit faster if contents
     * need not be stored for future access.
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems (invalid white space)","protected final void _skipString() throws IOException {
    _tokenIncomplete = false;
    int inPtr = _inputPtr;
    int inLen = _inputEnd;
    char[] inBuf = _inputBuffer;
    while (true) {
        if (inPtr >= inLen) {
            _inputPtr = inPtr;
            if (!_loadMore()) {
                _reportInvalidEOF("": was expecting closing quote for a string value"", JsonToken.VALUE_STRING);
            }
            inPtr = _inputPtr;
            inLen = _inputEnd;
        }
        char c = inBuf[inPtr++];
        int i = c;
        if (i <= INT_BACKSLASH) {
            if (i == INT_BACKSLASH) {
                // Although chars outside of BMP are to be escaped as an UTF-16 surrogate pair,
                // does that affect decoding? For now let's assume it does not.
                _inputPtr = inPtr;
                /*c = */
                _decodeEscaped();
                inPtr = _inputPtr;
                inLen = _inputEnd;
            } else if (i <= INT_QUOTE) {
                if (i == INT_QUOTE) {
                    _inputPtr = inPtr;
                    break;
                }
                if (i < INT_SPACE) {
                    _inputPtr = inPtr;
                    _throwUnquotedSpace(i, ""string value"");
                }
            }
        }
    }
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipCR()","Method","(to see if we have \n following \r).","protected final void _skipCR() throws IOException {
    if (_inputPtr < _inputEnd || _loadMore()) {
        if (_inputBuffer[_inputPtr] == '\n') {
            ++_inputPtr;
        }
    }
    ++_currInputRow;
    _currInputRowStart = _inputPtr;
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipColon()","Method","No Comment","private final int _skipColon() throws IOException {
    if ((_inputPtr + 4) >= _inputEnd) {
        return _skipColon2(false);
    }
    char c = _inputBuffer[_inputPtr];
    if (c == ':') {
        // common case, no leading space
        int i = _inputBuffer[++_inputPtr];
        if (i > INT_SPACE) {
            // nor trailing
            if (i == INT_SLASH || i == INT_HASH) {
                return _skipColon2(true);
            }
            ++_inputPtr;
            return i;
        }
        if (i == INT_SPACE || i == INT_TAB) {
            i = _inputBuffer[++_inputPtr];
            if (i > INT_SPACE) {
                if (i == INT_SLASH || i == INT_HASH) {
                    return _skipColon2(true);
                }
                ++_inputPtr;
                return i;
            }
        }
        // true -> skipped colon
        return _skipColon2(true);
    }
    if (c == ' ' || c == '\t') {
        c = _inputBuffer[++_inputPtr];
    }
    if (c == ':') {
        int i = _inputBuffer[++_inputPtr];
        if (i > INT_SPACE) {
            if (i == INT_SLASH || i == INT_HASH) {
                return _skipColon2(true);
            }
            ++_inputPtr;
            return i;
        }
        if (i == INT_SPACE || i == INT_TAB) {
            i = _inputBuffer[++_inputPtr];
            if (i > INT_SPACE) {
                if (i == INT_SLASH || i == INT_HASH) {
                    return _skipColon2(true);
                }
                ++_inputPtr;
                return i;
            }
        }
        return _skipColon2(true);
    }
    return _skipColon2(false);
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipColon2(boolean)","Method","No Comment","private final int _skipColon2(boolean gotColon) throws IOException {
    while (_inputPtr < _inputEnd || _loadMore()) {
        int i = _inputBuffer[_inputPtr++];
        if (i > INT_SPACE) {
            if (i == INT_SLASH) {
                _skipComment();
                continue;
            }
            if (i == INT_HASH) {
                if (_skipYAMLComment()) {
                    continue;
                }
            }
            if (gotColon) {
                return i;
            }
            if (i != INT_COLON) {
                _reportUnexpectedChar(i, ""was expecting a colon to separate field name and value"");
            }
            gotColon = true;
            continue;
        }
        if (i < INT_SPACE) {
            if (i == INT_LF) {
                ++_currInputRow;
                _currInputRowStart = _inputPtr;
            } else if (i == INT_CR) {
                _skipCR();
            } else if (i != INT_TAB) {
                _throwInvalidSpace(i);
            }
        }
    }
    _reportInvalidEOF("" within/between "" + _parsingContext.typeDesc() + "" entries"", null);
    return -1;
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipColon2(boolean).gotColon","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipColon2(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipColonFast(int)","Method","Variant called when we know there's at least 4 more bytes available","private final int _skipColonFast(int ptr) throws IOException {
    int i = _inputBuffer[ptr++];
    if (i == INT_COLON) {
        // common case, no leading space
        i = _inputBuffer[ptr++];
        if (i > INT_SPACE) {
            // nor trailing
            if (i != INT_SLASH && i != INT_HASH) {
                _inputPtr = ptr;
                return i;
            }
        } else if (i == INT_SPACE || i == INT_TAB) {
            i = _inputBuffer[ptr++];
            if (i > INT_SPACE) {
                if (i != INT_SLASH && i != INT_HASH) {
                    _inputPtr = ptr;
                    return i;
                }
            }
        }
        _inputPtr = ptr - 1;
        // true -> skipped colon
        return _skipColon2(true);
    }
    if (i == INT_SPACE || i == INT_TAB) {
        i = _inputBuffer[ptr++];
    }
    boolean gotColon = (i == INT_COLON);
    if (gotColon) {
        i = _inputBuffer[ptr++];
        if (i > INT_SPACE) {
            if (i != INT_SLASH && i != INT_HASH) {
                _inputPtr = ptr;
                return i;
            }
        } else if (i == INT_SPACE || i == INT_TAB) {
            i = _inputBuffer[ptr++];
            if (i > INT_SPACE) {
                if (i != INT_SLASH && i != INT_HASH) {
                    _inputPtr = ptr;
                    return i;
                }
            }
        }
    }
    _inputPtr = ptr - 1;
    return _skipColon2(gotColon);
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipColonFast(int).ptr","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipColonFast(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipComma(int)","Method","Primary loop: no reloading, comment handling","private final int _skipComma(int i) throws IOException {
    if (i != INT_COMMA) {
        _reportUnexpectedChar(i, ""was expecting comma to separate "" + _parsingContext.typeDesc() + "" entries"");
    }
    while (_inputPtr < _inputEnd) {
        i = _inputBuffer[_inputPtr++];
        if (i > INT_SPACE) {
            if (i == INT_SLASH || i == INT_HASH) {
                --_inputPtr;
                return _skipAfterComma2();
            }
            return i;
        }
        if (i < INT_SPACE) {
            if (i == INT_LF) {
                ++_currInputRow;
                _currInputRowStart = _inputPtr;
            } else if (i == INT_CR) {
                _skipCR();
            } else if (i != INT_TAB) {
                _throwInvalidSpace(i);
            }
        }
    }
    return _skipAfterComma2();
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipComma(int).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipComma(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipAfterComma2()","Method","No Comment","private final int _skipAfterComma2() throws IOException {
    while (_inputPtr < _inputEnd || _loadMore()) {
        int i = _inputBuffer[_inputPtr++];
        if (i > INT_SPACE) {
            if (i == INT_SLASH) {
                _skipComment();
                continue;
            }
            if (i == INT_HASH) {
                if (_skipYAMLComment()) {
                    continue;
                }
            }
            return i;
        }
        if (i < INT_SPACE) {
            if (i == INT_LF) {
                ++_currInputRow;
                _currInputRowStart = _inputPtr;
            } else if (i == INT_CR) {
                _skipCR();
            } else if (i != INT_TAB) {
                _throwInvalidSpace(i);
            }
        }
    }
    throw _constructError(""Unexpected end-of-input within/between "" + _parsingContext.typeDesc() + "" entries"");
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipWSOrEnd()","Method","No Comment","private final int _skipWSOrEnd() throws IOException {
    // Let's handle first character separately since it is likely that
    // it is either non-whitespace; or we have longer run of white space
    if (_inputPtr >= _inputEnd) {
        if (!_loadMore()) {
            return _eofAsNextChar();
        }
    }
    int i = _inputBuffer[_inputPtr++];
    if (i > INT_SPACE) {
        if (i == INT_SLASH || i == INT_HASH) {
            --_inputPtr;
            return _skipWSOrEnd2();
        }
        return i;
    }
    if (i != INT_SPACE) {
        if (i == INT_LF) {
            ++_currInputRow;
            _currInputRowStart = _inputPtr;
        } else if (i == INT_CR) {
            _skipCR();
        } else if (i != INT_TAB) {
            _throwInvalidSpace(i);
        }
    }
    while (_inputPtr < _inputEnd) {
        i = _inputBuffer[_inputPtr++];
        if (i > INT_SPACE) {
            if (i == INT_SLASH || i == INT_HASH) {
                --_inputPtr;
                return _skipWSOrEnd2();
            }
            return i;
        }
        if (i != INT_SPACE) {
            if (i == INT_LF) {
                ++_currInputRow;
                _currInputRowStart = _inputPtr;
            } else if (i == INT_CR) {
                _skipCR();
            } else if (i != INT_TAB) {
                _throwInvalidSpace(i);
            }
        }
    }
    return _skipWSOrEnd2();
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipWSOrEnd2()","Method","No Comment","private int _skipWSOrEnd2() throws IOException {
    while (true) {
        if (_inputPtr >= _inputEnd) {
            if (!_loadMore()) {
                // We ran out of input...
                return _eofAsNextChar();
            }
        }
        int i = _inputBuffer[_inputPtr++];
        if (i > INT_SPACE) {
            if (i == INT_SLASH) {
                _skipComment();
                continue;
            }
            if (i == INT_HASH) {
                if (_skipYAMLComment()) {
                    continue;
                }
            }
            return i;
        } else if (i != INT_SPACE) {
            if (i == INT_LF) {
                ++_currInputRow;
                _currInputRowStart = _inputPtr;
            } else if (i == INT_CR) {
                _skipCR();
            } else if (i != INT_TAB) {
                _throwInvalidSpace(i);
            }
        }
    }
}","int","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipComment()","Method","No Comment","private void _skipComment() throws IOException {
    if ((_features & FEAT_MASK_ALLOW_JAVA_COMMENTS) == 0) {
        _reportUnexpectedChar('/', ""maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)"");
    }
    // First: check which comment (if either) it is:
    if (_inputPtr >= _inputEnd && !_loadMore()) {
        _reportInvalidEOF("" in a comment"", null);
    }
    char c = _inputBuffer[_inputPtr++];
    if (c == '/') {
        _skipLine();
    } else if (c == '*') {
        _skipCComment();
    } else {
        _reportUnexpectedChar(c, ""was expecting either '*' or '/' for a comment"");
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipCComment()","Method","No Comment","private void _skipCComment() throws IOException {
    // Ok: need the matching '*/'
    while ((_inputPtr < _inputEnd) || _loadMore()) {
        int i = _inputBuffer[_inputPtr++];
        if (i <= '*') {
            if (i == '*') {
                // end?
                if ((_inputPtr >= _inputEnd) && !_loadMore()) {
                    break;
                }
                if (_inputBuffer[_inputPtr] == INT_SLASH) {
                    ++_inputPtr;
                    return;
                }
                continue;
            }
            if (i < INT_SPACE) {
                if (i == INT_LF) {
                    ++_currInputRow;
                    _currInputRowStart = _inputPtr;
                } else if (i == INT_CR) {
                    _skipCR();
                } else if (i != INT_TAB) {
                    _throwInvalidSpace(i);
                }
            }
        }
    }
    _reportInvalidEOF("" in a comment"", null);
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipYAMLComment()","Method","No Comment","private boolean _skipYAMLComment() throws IOException {
    if ((_features & FEAT_MASK_ALLOW_YAML_COMMENTS) == 0) {
        return false;
    }
    _skipLine();
    return true;
}","boolean","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipLine()","Method","No Comment","private void _skipLine() throws IOException {
    // Ok: need to find EOF or linefeed
    while ((_inputPtr < _inputEnd) || _loadMore()) {
        int i = _inputBuffer[_inputPtr++];
        if (i < INT_SPACE) {
            if (i == INT_LF) {
                ++_currInputRow;
                _currInputRowStart = _inputPtr;
                break;
            } else if (i == INT_CR) {
                _skipCR();
                break;
            } else if (i != INT_TAB) {
                _throwInvalidSpace(i);
            }
        }
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._decodeEscaped()","Method","No Comment","@Override
protected char _decodeEscaped() throws IOException {
    if (_inputPtr >= _inputEnd) {
        if (!_loadMore()) {
            _reportInvalidEOF("" in character escape sequence"", JsonToken.VALUE_STRING);
        }
    }
    char c = _inputBuffer[_inputPtr++];
    switch(c) {
        // First, ones that are mapped
        case 'b':
            return '\b';
        case 't':
            return '\t';
        case 'n':
            return '\n';
        case 'f':
            return '\f';
        case 'r':
            return '\r';
        // And these are to be returned as they are
        case '""':
        case '/':
        case '\\':
            return c;
        case // and finally hex-escaped
        'u':
            break;
        default:
            return _handleUnrecognizedCharacterEscape(c);
    }
    // Ok, a hex escape. Need 4 characters
    int value = 0;
    for (int i = 0; i < 4; ++i) {
        if (_inputPtr >= _inputEnd) {
            if (!_loadMore()) {
                _reportInvalidEOF("" in character escape sequence"", JsonToken.VALUE_STRING);
            }
        }
        int ch = _inputBuffer[_inputPtr++];
        int digit = CharTypes.charToHex(ch);
        if (digit < 0) {
            _reportUnexpectedChar(ch, ""expected a hex-digit for character escape sequence"");
        }
        value = (value << 4) | digit;
    }
    return (char) value;
}","char","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchTrue()","Method","No Comment","private final void _matchTrue() throws IOException {
    int ptr = _inputPtr;
    if ((ptr + 3) < _inputEnd) {
        final char[] b = _inputBuffer;
        if (b[ptr] == 'r' && b[++ptr] == 'u' && b[++ptr] == 'e') {
            char c = b[++ptr];
            if (c < '0' || c == ']' || c == '}') {
                // expected/allowed chars
                _inputPtr = ptr;
                return;
            }
        }
    }
    // buffer boundary, or problem, offline
    _matchToken(""true"", 1);
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchFalse()","Method","No Comment","private final void _matchFalse() throws IOException {
    int ptr = _inputPtr;
    if ((ptr + 4) < _inputEnd) {
        final char[] b = _inputBuffer;
        if (b[ptr] == 'a' && b[++ptr] == 'l' && b[++ptr] == 's' && b[++ptr] == 'e') {
            char c = b[++ptr];
            if (c < '0' || c == ']' || c == '}') {
                // expected/allowed chars
                _inputPtr = ptr;
                return;
            }
        }
    }
    // buffer boundary, or problem, offline
    _matchToken(""false"", 1);
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchNull()","Method","No Comment","private final void _matchNull() throws IOException {
    int ptr = _inputPtr;
    if ((ptr + 3) < _inputEnd) {
        final char[] b = _inputBuffer;
        if (b[ptr] == 'u' && b[++ptr] == 'l' && b[++ptr] == 'l') {
            char c = b[++ptr];
            if (c < '0' || c == ']' || c == '}') {
                // expected/allowed chars
                _inputPtr = ptr;
                return;
            }
        }
    }
    // buffer boundary, or problem, offline
    _matchToken(""null"", 1);
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchToken(String,int)","Method","Helper method for checking whether input matches expected token","protected final void _matchToken(String matchStr, int i) throws IOException {
    final int len = matchStr.length();
    if ((_inputPtr + len) >= _inputEnd) {
        _matchToken2(matchStr, i);
        return;
    }
    do {
        if (_inputBuffer[_inputPtr] != matchStr.charAt(i)) {
            _reportInvalidToken(matchStr.substring(0, i));
        }
        ++_inputPtr;
    } while (++i < len);
    int ch = _inputBuffer[_inputPtr];
    if (ch >= '0' && ch != ']' && ch != '}') {
        // expected/allowed chars
        _checkMatchEnd(matchStr, i, ch);
    }
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchToken(String,int).matchStr","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchToken(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchToken(String,int).i","Parameter_2","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchToken(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchToken2(String,int)","Method","No Comment","private final void _matchToken2(String matchStr, int i) throws IOException {
    final int len = matchStr.length();
    do {
        if (((_inputPtr >= _inputEnd) && !_loadMore()) || (_inputBuffer[_inputPtr] != matchStr.charAt(i))) {
            _reportInvalidToken(matchStr.substring(0, i));
        }
        ++_inputPtr;
    } while (++i < len);
    // but let's also ensure we either get EOF, or non-alphanum char...
    if (_inputPtr >= _inputEnd && !_loadMore()) {
        return;
    }
    int ch = _inputBuffer[_inputPtr];
    if (ch >= '0' && ch != ']' && ch != '}') {
        // expected/allowed chars
        _checkMatchEnd(matchStr, i, ch);
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchToken2(String,int).matchStr","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchToken2(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchToken2(String,int).i","Parameter_2","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._matchToken2(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._checkMatchEnd(String,int,int)","Method","No Comment","private final void _checkMatchEnd(String matchStr, int i, int c) throws IOException {
    // but actually only alphanums are problematic
    char ch = (char) c;
    if (Character.isJavaIdentifierPart(ch)) {
        _reportInvalidToken(matchStr.substring(0, i));
    }
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._checkMatchEnd(String,int,int).matchStr","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._checkMatchEnd(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._checkMatchEnd(String,int,int).i","Parameter_2","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._checkMatchEnd(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._checkMatchEnd(String,int,int).c","Parameter_3","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._checkMatchEnd(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._decodeBase64(Base64Variant)","Method","* Efficient handling for incremental parsing of base64-encoded
     * textual content.
     *
     * @param b64variant Type of base64 encoding expected in context
     *
     * @return Fully decoded value of base64 content
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems (invalid content)","@SuppressWarnings(""resource"")
protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException {
    ByteArrayBuilder builder = _getByteArrayBuilder();
    //main_loop:
    while (true) {
        // first, we'll skip preceding white space, if any
        char ch;
        do {
            if (_inputPtr >= _inputEnd) {
                _loadMoreGuaranteed();
            }
            ch = _inputBuffer[_inputPtr++];
        } while (ch <= INT_SPACE);
        int bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            if (ch == '""') {
                // reached the end, fair and square?
                return builder.toByteArray();
            }
            bits = _decodeBase64Escape(b64variant, ch, 0);
            if (bits < 0) {
                // white space to skip
                continue;
            }
        }
        int decodedData = bits;
        // then second base64 char; can't get padding yet, nor ws
        if (_inputPtr >= _inputEnd) {
            _loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++];
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            bits = _decodeBase64Escape(b64variant, ch, 1);
        }
        decodedData = (decodedData << 6) | bits;
        // third base64 char; can be padding, but not ws
        if (_inputPtr >= _inputEnd) {
            _loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++];
        bits = b64variant.decodeBase64Char(ch);
        // First branch: can get padding (-> 1 byte)
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // as per [JACKSON-631], could also just be 'missing'  padding
                if (ch == '""') {
                    decodedData >>= 4;
                    builder.append(decodedData);
                    if (b64variant.requiresPaddingOnRead()) {
                        // to keep parser state bit more consistent
                        --_inputPtr;
                        _handleBase64MissingPadding(b64variant);
                    }
                    return builder.toByteArray();
                }
                bits = _decodeBase64Escape(b64variant, ch, 2);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                // Ok, must get more padding chars, then
                if (_inputPtr >= _inputEnd) {
                    _loadMoreGuaranteed();
                }
                ch = _inputBuffer[_inputPtr++];
                if (!b64variant.usesPaddingChar(ch)) {
                    if (_decodeBase64Escape(b64variant, ch, 3) != Base64Variant.BASE64_VALUE_PADDING) {
                        throw reportInvalidBase64Char(b64variant, ch, 3, ""expected padding character '"" + b64variant.getPaddingChar() + ""'"");
                    }
                }
                // Got 12 bits, only need 8, need to shift
                decodedData >>= 4;
                builder.append(decodedData);
                continue;
            }
            // otherwise we got escaped other char, to be processed below
        }
        // Nope, 2 or 3 bytes
        decodedData = (decodedData << 6) | bits;
        // fourth and last base64 char; can be padding, but not ws
        if (_inputPtr >= _inputEnd) {
            _loadMoreGuaranteed();
        }
        ch = _inputBuffer[_inputPtr++];
        bits = b64variant.decodeBase64Char(ch);
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                // as per [JACKSON-631], could also just be 'missing'  padding
                if (ch == '""') {
                    decodedData >>= 2;
                    builder.appendTwoBytes(decodedData);
                    if (b64variant.requiresPaddingOnRead()) {
                        // to keep parser state bit more consistent
                        --_inputPtr;
                        _handleBase64MissingPadding(b64variant);
                    }
                    return builder.toByteArray();
                }
                bits = _decodeBase64Escape(b64variant, ch, 3);
            }
            if (bits == Base64Variant.BASE64_VALUE_PADDING) {
                // With padding we only get 2 bytes; but we have
                // to shift it a bit so it is identical to triplet
                // case with partial output.
                // 3 chars gives 3x6 == 18 bits, of which 2 are
                // dummies, need to discard:
                decodedData >>= 2;
                builder.appendTwoBytes(decodedData);
                continue;
            }
            // otherwise we got escaped other char, to be processed below
        }
        // otherwise, our triplet is now complete
        decodedData = (decodedData << 6) | bits;
        builder.appendThreeBytes(decodedData);
    }
}","byte[]","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._decodeBase64(Base64Variant).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._decodeBase64(Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.currentLocation()","Method","No Comment","@Override
public JsonLocation currentLocation() {
    // 1-based
    final int col = _inputPtr - _currInputRowStart + 1;
    return new JsonLocation(_contentReference(), -1L, _currInputProcessed + _inputPtr, _currInputRow, col);
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._currentLocationMinusOne()","Method","No Comment","// @since 2.17
@Override
protected JsonLocation _currentLocationMinusOne() {
    final int prevInputPtr = _inputPtr - 1;
    // 1-based
    final int col = prevInputPtr - _currInputRowStart + 1;
    return new JsonLocation(_contentReference(), -1L, _currInputProcessed + prevInputPtr, _currInputRow, col);
}","JsonLocation","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.currentTokenLocation()","Method","No Comment","@Override
public JsonLocation currentTokenLocation() {
    if (_currToken == JsonToken.FIELD_NAME) {
        long total = _currInputProcessed + (_nameStartOffset - 1);
        return new JsonLocation(_contentReference(), -1L, total, _nameStartRow, _nameStartCol);
    }
    return new JsonLocation(_contentReference(), -1L, _tokenInputTotal - 1, _tokenInputRow, _tokenInputCol);
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._updateLocation()","Method","@since 2.7","private final void _updateLocation() {
    int ptr = _inputPtr;
    _tokenInputTotal = _currInputProcessed + ptr;
    _tokenInputRow = _currInputRow;
    _tokenInputCol = ptr - _currInputRowStart;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._updateNameLocation()","Method","@since 2.7","private final void _updateNameLocation() {
    int ptr = _inputPtr;
    _nameStartOffset = ptr;
    _nameStartRow = _currInputRow;
    _nameStartCol = ptr - _currInputRowStart;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._reportInvalidToken(String)","Method","No Comment","protected void _reportInvalidToken(String matchedPart) throws IOException {
    _reportInvalidToken(matchedPart, _validJsonTokenList());
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._reportInvalidToken(String).matchedPart","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._reportInvalidToken(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._reportInvalidToken(String,String)","Method","No Comment","protected void _reportInvalidToken(String matchedPart, String msg) throws IOException {
    /* Let's just try to find what appears to be the token, using
         * regular Java identifier character rules. It's just a heuristic,
         * nothing fancy here.
         */
    StringBuilder sb = new StringBuilder(matchedPart);
    while ((_inputPtr < _inputEnd) || _loadMore()) {
        char c = _inputBuffer[_inputPtr];
        if (!Character.isJavaIdentifierPart(c)) {
            break;
        }
        ++_inputPtr;
        sb.append(c);
        if (sb.length() >= _ioContext.errorReportConfiguration().getMaxErrorTokenLength()) {
            sb.append(""..."");
            break;
        }
    }
    _reportError(""Unrecognized token '%s': was expecting %s"", sb, msg);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._reportInvalidToken(String,String).matchedPart","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._reportInvalidToken(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._reportInvalidToken(String,String).msg","Parameter_2","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._reportInvalidToken(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._closeScope(int)","Method","No Comment","private void _closeScope(int i) throws IOException {
    if (i == INT_RBRACKET) {
        _updateLocation();
        if (!_parsingContext.inArray()) {
            _reportMismatchedEndMarker(i, '}');
        }
        _parsingContext = _parsingContext.clearAndGetParent();
        _updateToken(JsonToken.END_ARRAY);
    }
    if (i == INT_RCURLY) {
        _updateLocation();
        if (!_parsingContext.inObject()) {
            _reportMismatchedEndMarker(i, ']');
        }
        _parsingContext = _parsingContext.clearAndGetParent();
        _updateToken(JsonToken.END_OBJECT);
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser._closeScope(int).i","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser._closeScope(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer,char[],int,int,boolean)","Constructor","* Constructor called when caller wants to provide input buffer directly
     * (or needs to, in case of bootstrapping having read some of contents)
     * and it may or may not be recyclable use standard recycle context.
     *
     * @param ctxt I/O context to use
     * @param features Standard stream read features enabled
     * @param r Reader used for reading actual content, if any; {@code null} if none
     * @param codec {@code ObjectCodec} to delegate object deserialization to
     * @param st Name canonicalizer to use
     * @param inputBuffer Input buffer to read initial content from (before Reader)
     * @param start Pointer in {@code inputBuffer} that has the first content character to decode
     * @param end Pointer past the last content character in {@code inputBuffer}
     * @param bufferRecyclable Whether {@code inputBuffer} passed is managed by Jackson core
     *    (and thereby needs recycling)
     *
     * @since 2.4","public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r, ObjectCodec codec, CharsToNameCanonicalizer st, char[] inputBuffer, int start, int end, boolean bufferRecyclable) {
    super(ctxt, features, codec);
    _reader = r;
    _inputBuffer = inputBuffer;
    _inputPtr = start;
    _inputEnd = end;
    _currInputRowStart = start;
    // If we have offset, need to omit that from byte offset, so:
    _currInputProcessed = -start;
    _symbols = st;
    _hashSeed = st.hashSeed();
    _bufferRecyclable = bufferRecyclable;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer,char[],int,int,boolean).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer,char[],int,int,boolean).features","Parameter_2","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer,char[],int,int,boolean).r","Parameter_3","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer,char[],int,int,boolean).codec","Parameter_4","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer,char[],int,int,boolean).st","Parameter_5","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer,char[],int,int,boolean).inputBuffer","Parameter_6","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer,char[],int,int,boolean).start","Parameter_7","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer,char[],int,int,boolean).end","Parameter_8","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer,char[],int,int,boolean).bufferRecyclable","Parameter_9","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer)","Constructor","* Constructor called when input comes as a {@link java.io.Reader}, and buffer allocation
     * can be done using default mechanism.
     *
     * @param ctxt I/O context to use
     * @param features Standard stream read features enabled
     * @param r Reader used for reading actual content, if any; {@code null} if none
     * @param codec {@code ObjectCodec} to delegate object deserialization to
     * @param st Name canonicalizer to use","public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r, ObjectCodec codec, CharsToNameCanonicalizer st) {
    super(ctxt, features, codec);
    _reader = r;
    _inputBuffer = ctxt.allocTokenBuffer();
    _inputPtr = 0;
    _inputEnd = 0;
    _symbols = st;
    _hashSeed = st.hashSeed();
    _bufferRecyclable = true;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer).features","Parameter_2","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer).r","Parameter_3","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer).codec","Parameter_4","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer).st","Parameter_5","Belong to com.fasterxml.jackson.core.json.ReaderBasedJsonParser.<init>(IOContext,int,Reader,ObjectCodec,CharsToNameCanonicalizer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext","Class","* Extension of {@link JsonStreamContext}, which implements
 * core methods needed, and also exposes
 * more complete API to parser implementation classes.","Class do not obtain Source Code","No return type","public , final ","com.fasterxml.jackson.core.JsonStreamContext",""
"com.fasterxml.jackson.core.json.JsonReadContext._parent","Field","* Parent context for this context; null for root context.","protected final JsonReadContext _parent;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext._dups","Field","No Comment","protected DupDetector _dups;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext._child","Field","No Comment","protected JsonReadContext _child;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext._currentName","Field","No Comment","protected String _currentName;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext._currentValue","Field","* @since 2.5","protected Object _currentValue;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext._lineNr","Field","No Comment","protected int _lineNr;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext._columnNr","Field","No Comment","protected int _columnNr;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.reset(int,int,int)","Method","* Internal method to allow instance reuse: DO NOT USE unless you absolutely
     * know what you are doing.
     * Clears up state (including ""current value""), changes type to one specified;
     * resets current duplicate-detection state (if any).
     * Parent link left as-is since it is {@code final}.
     *<p>
     * NOTE: Public since 2.12.
     *
     * @param type Type to assign to this context node
     * @param lineNr Line of the starting position of this context
     * @param colNr Column of the starting position of this context","public void reset(int type, int lineNr, int colNr) {
    _type = type;
    _index = -1;
    _lineNr = lineNr;
    _columnNr = colNr;
    _currentName = null;
    _currentValue = null;
    if (_dups != null) {
        _dups.reset();
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.reset(int,int,int).type","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonReadContext.reset(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.reset(int,int,int).lineNr","Parameter_2","Belong to com.fasterxml.jackson.core.json.JsonReadContext.reset(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.reset(int,int,int).colNr","Parameter_3","Belong to com.fasterxml.jackson.core.json.JsonReadContext.reset(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.withDupDetector(DupDetector)","Method","No Comment","public JsonReadContext withDupDetector(DupDetector dups) {
    _dups = dups;
    return this;
}","JsonReadContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.withDupDetector(DupDetector).dups","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonReadContext.withDupDetector(DupDetector)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.getCurrentValue()","Method","No Comment","@Override
public Object getCurrentValue() {
    return _currentValue;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.setCurrentValue(Object)","Method","No Comment","@Override
public void setCurrentValue(Object v) {
    _currentValue = v;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.setCurrentValue(Object).v","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonReadContext.setCurrentValue(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.createRootContext(int,int,DupDetector)","Method","No Comment","public static JsonReadContext createRootContext(int lineNr, int colNr, DupDetector dups) {
    return new JsonReadContext(null, 0, dups, TYPE_ROOT, lineNr, colNr);
}","JsonReadContext","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.createRootContext(int,int,DupDetector).lineNr","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonReadContext.createRootContext(int,int,DupDetector)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.createRootContext(int,int,DupDetector).colNr","Parameter_2","Belong to com.fasterxml.jackson.core.json.JsonReadContext.createRootContext(int,int,DupDetector)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.createRootContext(int,int,DupDetector).dups","Parameter_3","Belong to com.fasterxml.jackson.core.json.JsonReadContext.createRootContext(int,int,DupDetector)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.createRootContext(DupDetector)","Method","No Comment","public static JsonReadContext createRootContext(DupDetector dups) {
    return new JsonReadContext(null, 0, dups, TYPE_ROOT, 1, 0);
}","JsonReadContext","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.createRootContext(DupDetector).dups","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonReadContext.createRootContext(DupDetector)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.createChildArrayContext(int,int)","Method","No Comment","public JsonReadContext createChildArrayContext(int lineNr, int colNr) {
    JsonReadContext ctxt = _child;
    if (ctxt == null) {
        _child = ctxt = new JsonReadContext(this, _nestingDepth + 1, (_dups == null) ? null : _dups.child(), TYPE_ARRAY, lineNr, colNr);
    } else {
        ctxt.reset(TYPE_ARRAY, lineNr, colNr);
    }
    return ctxt;
}","JsonReadContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.createChildArrayContext(int,int).lineNr","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonReadContext.createChildArrayContext(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.createChildArrayContext(int,int).colNr","Parameter_2","Belong to com.fasterxml.jackson.core.json.JsonReadContext.createChildArrayContext(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.createChildObjectContext(int,int)","Method","No Comment","public JsonReadContext createChildObjectContext(int lineNr, int colNr) {
    JsonReadContext ctxt = _child;
    if (ctxt == null) {
        _child = ctxt = new JsonReadContext(this, _nestingDepth + 1, (_dups == null) ? null : _dups.child(), TYPE_OBJECT, lineNr, colNr);
        return ctxt;
    }
    ctxt.reset(TYPE_OBJECT, lineNr, colNr);
    return ctxt;
}","JsonReadContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.createChildObjectContext(int,int).lineNr","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonReadContext.createChildObjectContext(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.createChildObjectContext(int,int).colNr","Parameter_2","Belong to com.fasterxml.jackson.core.json.JsonReadContext.createChildObjectContext(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.getCurrentName()","Method","No Comment","@Override
public String getCurrentName() {
    return _currentName;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.hasCurrentName()","Method","@since 2.9","@Override
public boolean hasCurrentName() {
    return _currentName != null;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.getParent()","Method","No Comment","@Override
public JsonReadContext getParent() {
    return _parent;
}","JsonReadContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.startLocation(ContentReference)","Method","No Comment","@Override
public JsonLocation startLocation(ContentReference srcRef) {
    // We don't keep track of offsets at this level (only reader does)
    long totalChars = -1L;
    return new JsonLocation(srcRef, totalChars, _lineNr, _columnNr);
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.startLocation(ContentReference).srcRef","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonReadContext.startLocation(ContentReference)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.getStartLocation(Object)","Method","No Comment","@Override
// since 2.13
@Deprecated
public JsonLocation getStartLocation(Object rawSrc) {
    return startLocation(ContentReference.rawReference(rawSrc));
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.getStartLocation(Object).rawSrc","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonReadContext.getStartLocation(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.clearAndGetParent()","Method","* Method that can be used to both clear the accumulated references
     * (specifically value set with {@link #setCurrentValue(Object)})
     * that should not be retained, and returns parent (as would
     * {@link #getParent()} do). Typically called when closing the active
     * context when encountering {@link JsonToken#END_ARRAY} or
     * {@link JsonToken#END_OBJECT}.
     *
     * @return Parent context of this context node, if any; {@code null} for root context
     *
     * @since 2.7","public JsonReadContext clearAndGetParent() {
    _currentValue = null;
    // could also clear the current name, but seems cheap enough to leave?
    return _parent;
}","JsonReadContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.getDupDetector()","Method","No Comment","public DupDetector getDupDetector() {
    return _dups;
}","DupDetector","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.expectComma()","Method","No Comment","public boolean expectComma() {
    /* Assumption here is that we will be getting a value (at least
         * before calling this method again), and
         * so will auto-increment index to avoid having to do another call
         */
    // starts from -1
    int ix = ++_index;
    return (_type != TYPE_ROOT && ix > 0);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.setCurrentName(String)","Method","No Comment","public void setCurrentName(String name) throws JsonProcessingException {
    _currentName = name;
    if (_dups != null) {
        _checkDup(_dups, name);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.setCurrentName(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonReadContext.setCurrentName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext._checkDup(DupDetector,String)","Method","No Comment","private void _checkDup(DupDetector dd, String name) throws JsonProcessingException {
    if (dd.isDup(name)) {
        Object src = dd.getSource();
        throw new JsonParseException(((src instanceof JsonParser) ? ((JsonParser) src) : null), ""Duplicate field '"" + name + ""'"");
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext._checkDup(DupDetector,String).dd","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonReadContext._checkDup(DupDetector,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext._checkDup(DupDetector,String).name","Parameter_2","Belong to com.fasterxml.jackson.core.json.JsonReadContext._checkDup(DupDetector,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,int,DupDetector,int,int,int)","Constructor","* @param parent Parent context, if any ({@code null} for Root context)
     * @param nestingDepth Number of parents this context has (0 for Root context)
     * @param dups Detector used for checking duplicate names, if any ({@code null} if none)
     * @param type Type to assign to this context node
     * @param lineNr Line of the starting position of this context
     * @param colNr Column of the starting position of this context
     * 
     * @since 2.15","public JsonReadContext(JsonReadContext parent, int nestingDepth, DupDetector dups, int type, int lineNr, int colNr) {
    super();
    _parent = parent;
    _dups = dups;
    _type = type;
    _lineNr = lineNr;
    _columnNr = colNr;
    _index = -1;
    _nestingDepth = nestingDepth;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,int,DupDetector,int,int,int).parent","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,int,DupDetector,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,int,DupDetector,int,int,int).nestingDepth","Parameter_2","Belong to com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,int,DupDetector,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,int,DupDetector,int,int,int).dups","Parameter_3","Belong to com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,int,DupDetector,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,int,DupDetector,int,int,int).type","Parameter_4","Belong to com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,int,DupDetector,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,int,DupDetector,int,int,int).lineNr","Parameter_5","Belong to com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,int,DupDetector,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,int,DupDetector,int,int,int).colNr","Parameter_6","Belong to com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,int,DupDetector,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,DupDetector,int,int,int)","Constructor","No Comment","// since 2.15
@Deprecated
public JsonReadContext(JsonReadContext parent, DupDetector dups, int type, int lineNr, int colNr) {
    super();
    _parent = parent;
    _dups = dups;
    _type = type;
    _lineNr = lineNr;
    _columnNr = colNr;
    _index = -1;
    _nestingDepth = parent == null ? 0 : parent._nestingDepth + 1;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,DupDetector,int,int,int).parent","Parameter_1","Belong to com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,DupDetector,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,DupDetector,int,int,int).dups","Parameter_2","Belong to com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,DupDetector,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,DupDetector,int,int,int).type","Parameter_3","Belong to com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,DupDetector,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,DupDetector,int,int,int).lineNr","Parameter_4","Belong to com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,DupDetector,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,DupDetector,int,int,int).colNr","Parameter_5","Belong to com.fasterxml.jackson.core.json.JsonReadContext.<init>(JsonReadContext,DupDetector,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId","Class","* This is a simple value class used between core streaming and higher level
 * databinding to pass information about type ids to write.
 * Properties are exposed and mutable on purpose: they are only used for communication
 * over serialization of a single value, and neither retained across calls nor shared
 * between threads.
 *<p>
 * Usual usage pattern is such that instance of this class is passed on two calls that are
 * needed for outputting type id (and possible additional wrapping, depending on format;
 * JSON, for example, requires wrapping as type id is part of regular data): first, a ""prefix""
 * write (which usually includes actual id), performed before value write; and then
 * matching ""suffix"" write after value serialization.
 *
 * @since 2.9","Class do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.type.WritableTypeId.forValue","Field","* Java object for which type id is being written. Not needed by default handling,
     * but may be useful for customized format handling.","public Object forValue;","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.forValueType","Field","* (optional) Super-type of {@link #forValue} to use for type id generation (if no
     * explicit id passed): used instead of actual class of {@link #forValue} in cases
     * where we do not want to use the ""real"" type but something more generic, usually
     * to work around specific problem with implementation type, or its deserializer.","public Class<?> forValueType;","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.id","Field","* Actual type id to use: usually {link java.lang.String}.","public Object id;","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.asProperty","Field","* If type id is to be embedded as a regular property, name of the property;
     * otherwise `null`.
     *<p>
     * NOTE: if ""wrap-as-Object"" is used, this does NOT contain property name to
     * use but `null`.","public String asProperty;","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.include","Field","* Property used to indicate style of inclusion for this type id, in cases where
     * no native type id may be used (either because format has none, like JSON; or
     * because use of native type ids is disabled [with YAML]).","public Inclusion include;","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.valueShape","Field","* Information about intended shape of the value being written (that is, {@link #forValue});
     * in case of structured values, start token of the structure; for scalars, value token.
     * Main difference is between structured values
     * ({@link JsonToken#START_ARRAY}, {@link JsonToken#START_OBJECT})
     * and scalars ({@link JsonToken#VALUE_STRING}): specific scalar type may not be
     * important for processing.","public JsonToken valueShape;","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.wrapperWritten","Field","* Flag that can be set to indicate that wrapper structure was written (during
     * prefix-writing); used to determine if suffix requires matching close markers.","public boolean wrapperWritten;","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.extra","Field","* Optional additional information that generator may add during ""prefix write"",
     * to be available on matching ""suffix write"".","public Object extra;","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.<init>()","Constructor","No Comment","public WritableTypeId() {
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.<init>(Object,JsonToken)","Constructor","* Constructor used when calling a method for generating and writing Type Id;
     * caller only knows value object and its intended shape.
     *
     * @param value Actual value for which type information is written
     * @param valueShape Serialize shape writer will use for value","public WritableTypeId(Object value, JsonToken valueShape) {
    this(value, valueShape, null);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.<init>(Object,JsonToken).value","Parameter_1","Belong to com.fasterxml.jackson.core.type.WritableTypeId.<init>(Object,JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.<init>(Object,JsonToken).valueShape","Parameter_2","Belong to com.fasterxml.jackson.core.type.WritableTypeId.<init>(Object,JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.<init>(Object,Class,JsonToken)","Constructor","* Constructor used when calling a method for generating and writing Type Id,
     * but where actual type to use for generating id is NOT the type of value
     * (but its supertype).
     *
     * @param value Actual value for which type information is written
     * @param valueType Effective type of {@code value} to use for Type Id generation
     * @param valueShape Serialize shape writer will use for value","public WritableTypeId(Object value, Class<?> valueType, JsonToken valueShape) {
    this(value, valueShape, null);
    forValueType = valueType;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.<init>(Object,Class,JsonToken).value","Parameter_1","Belong to com.fasterxml.jackson.core.type.WritableTypeId.<init>(Object,Class,JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.<init>(Object,Class,JsonToken).valueType","Parameter_2","Belong to com.fasterxml.jackson.core.type.WritableTypeId.<init>(Object,Class,JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.<init>(Object,Class,JsonToken).valueShape","Parameter_3","Belong to com.fasterxml.jackson.core.type.WritableTypeId.<init>(Object,Class,JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.<init>(Object,JsonToken,Object)","Constructor","* Constructor used when calling a method for writing Type Id;
     * caller knows value object, its intended shape as well as id to
     * use; but not details of wrapping (if any).
     *
     * @param value Actual value for which type information is written
     * @param valueShape Serialize shape writer will use for value
     * @param id Actual type id to use if known; {@code null} if not","public WritableTypeId(Object value, JsonToken valueShape, Object id) {
    forValue = value;
    this.id = id;
    this.valueShape = valueShape;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.<init>(Object,JsonToken,Object).value","Parameter_1","Belong to com.fasterxml.jackson.core.type.WritableTypeId.<init>(Object,JsonToken,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.<init>(Object,JsonToken,Object).valueShape","Parameter_2","Belong to com.fasterxml.jackson.core.type.WritableTypeId.<init>(Object,JsonToken,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.<init>(Object,JsonToken,Object).id","Parameter_3","Belong to com.fasterxml.jackson.core.type.WritableTypeId.<init>(Object,JsonToken,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId$Inclusion","Enum","* Enumeration of values that matches enum `As` from annotation
     * `JsonTypeInfo`: separate definition to avoid dependency between
     * streaming core and annotations packages; also allows more flexibility
     * in case new values needed at this level of internal API.
     *<p>
     * NOTE: in most cases this only matters with formats that do NOT have native
     * type id capabilities, and require type id to be included within regular
     * data (whether exposed as Java properties or not). Formats with native
     * types usually use native type id functionality regardless, unless
     * overridden by a feature to use ""non-native"" type inclusion.","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.type.WritableTypeId$Inclusion","Enum","* Enumeration of values that matches enum `As` from annotation
     * `JsonTypeInfo`: separate definition to avoid dependency between
     * streaming core and annotations packages; also allows more flexibility
     * in case new values needed at this level of internal API.
     *<p>
     * NOTE: in most cases this only matters with formats that do NOT have native
     * type id capabilities, and require type id to be included within regular
     * data (whether exposed as Java properties or not). Formats with native
     * types usually use native type id functionality regardless, unless
     * overridden by a feature to use ""non-native"" type inclusion.","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.type.WritableTypeId$Inclusion.WRAPPER_ARRAY","Enum Constant","* Inclusion as wrapper Array (1st element type id, 2nd element value).
         *<p>
         * Corresponds to <code>JsonTypeInfo.As.WRAPPER_ARRAY</code>.","WRAPPER_ARRAY","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId$Inclusion.WRAPPER_OBJECT","Enum Constant","* Inclusion as wrapper Object that has one key/value pair where type id
         * is the key for typed value.
         *<p>
         * Corresponds to <code>JsonTypeInfo.As.WRAPPER_OBJECT</code>.","WRAPPER_OBJECT","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId$Inclusion.METADATA_PROPERTY","Enum Constant","* Inclusion as a property within Object to write, but logically as separate
         * metadata that is not exposed as payload to caller: that is, does not match
         * any of visible properties value object has.
         *<p>
         * NOTE: if shape of typed value to write is NOT Object, will instead use
         * {@link #WRAPPER_ARRAY} inclusion.
         *<p>
         * Corresponds to <code>JsonTypeInfo.As.PROPERTY</code>.","METADATA_PROPERTY","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId$Inclusion.PAYLOAD_PROPERTY","Enum Constant","* Inclusion as a ""regular"" property within Object to write; this implies that
         * its value should come from regular POJO property on serialization, and
         * be deserialized into such property. This handling, however, is up to databinding.
         *<p>
         * Regarding handling, type id is ONLY written as native type id; if no native
         * type ids available, caller is assumed to handle output some other way.
         * This is different from {@link #METADATA_PROPERTY}.
         *<p>
         * NOTE: if shape of typed value to write is NOT Object, will instead use
         * {@link #WRAPPER_ARRAY} inclusion.
         *<p>
         * Corresponds to <code>JsonTypeInfo.As.EXISTING_PROPERTY</code>.","PAYLOAD_PROPERTY","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId$Inclusion.PARENT_PROPERTY","Enum Constant","* Inclusion as a property within ""parent"" Object of value Object to write.
         * This typically requires slightly convoluted processing in which property
         * that contains type id is actually written <b>after</b> typed value object
         * itself is written.
         *<br>
         * Note that it is illegal to call write method if the current (parent) write context
         * is not Object: no coercion is done for other inclusion types (unlike with
         * other <code>xxx_PROPERTY</code> choices.
         * This also means that root values MAY NOT use this type id inclusion mechanism
         * (as they have no parent context).
         *<p>
         * Corresponds to <code>JsonTypeInfo.As.EXTERNAL_PROPERTY</code>.","PARENT_PROPERTY","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId$Inclusion.requiresObjectContext()","Method","No Comment","public boolean requiresObjectContext() {
    return (this == METADATA_PROPERTY) || (this == PAYLOAD_PROPERTY);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.Inclusion","Enum","* Enumeration of values that matches enum `As` from annotation
     * `JsonTypeInfo`: separate definition to avoid dependency between
     * streaming core and annotations packages; also allows more flexibility
     * in case new values needed at this level of internal API.
     *<p>
     * NOTE: in most cases this only matters with formats that do NOT have native
     * type id capabilities, and require type id to be included within regular
     * data (whether exposed as Java properties or not). Formats with native
     * types usually use native type id functionality regardless, unless
     * overridden by a feature to use ""non-native"" type inclusion.","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.type.WritableTypeId.Inclusion.WRAPPER_ARRAY","Enum Constant","* Inclusion as wrapper Array (1st element type id, 2nd element value).
         *<p>
         * Corresponds to <code>JsonTypeInfo.As.WRAPPER_ARRAY</code>.","WRAPPER_ARRAY","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.Inclusion.WRAPPER_OBJECT","Enum Constant","* Inclusion as wrapper Object that has one key/value pair where type id
         * is the key for typed value.
         *<p>
         * Corresponds to <code>JsonTypeInfo.As.WRAPPER_OBJECT</code>.","WRAPPER_OBJECT","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.Inclusion.METADATA_PROPERTY","Enum Constant","* Inclusion as a property within Object to write, but logically as separate
         * metadata that is not exposed as payload to caller: that is, does not match
         * any of visible properties value object has.
         *<p>
         * NOTE: if shape of typed value to write is NOT Object, will instead use
         * {@link #WRAPPER_ARRAY} inclusion.
         *<p>
         * Corresponds to <code>JsonTypeInfo.As.PROPERTY</code>.","METADATA_PROPERTY","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.Inclusion.PAYLOAD_PROPERTY","Enum Constant","* Inclusion as a ""regular"" property within Object to write; this implies that
         * its value should come from regular POJO property on serialization, and
         * be deserialized into such property. This handling, however, is up to databinding.
         *<p>
         * Regarding handling, type id is ONLY written as native type id; if no native
         * type ids available, caller is assumed to handle output some other way.
         * This is different from {@link #METADATA_PROPERTY}.
         *<p>
         * NOTE: if shape of typed value to write is NOT Object, will instead use
         * {@link #WRAPPER_ARRAY} inclusion.
         *<p>
         * Corresponds to <code>JsonTypeInfo.As.EXISTING_PROPERTY</code>.","PAYLOAD_PROPERTY","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.Inclusion.PARENT_PROPERTY","Enum Constant","* Inclusion as a property within ""parent"" Object of value Object to write.
         * This typically requires slightly convoluted processing in which property
         * that contains type id is actually written <b>after</b> typed value object
         * itself is written.
         *<br>
         * Note that it is illegal to call write method if the current (parent) write context
         * is not Object: no coercion is done for other inclusion types (unlike with
         * other <code>xxx_PROPERTY</code> choices.
         * This also means that root values MAY NOT use this type id inclusion mechanism
         * (as they have no parent context).
         *<p>
         * Corresponds to <code>JsonTypeInfo.As.EXTERNAL_PROPERTY</code>.","PARENT_PROPERTY","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.WritableTypeId.Inclusion.requiresObjectContext()","Method","No Comment","public boolean requiresObjectContext() {
    return (this == METADATA_PROPERTY) || (this == PAYLOAD_PROPERTY);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType","Abstract Class","* Type abstraction that represents Java type that has been resolved
 * (i.e. has all generic information, if any, resolved to concrete
 * types).
 * Note that this is an intermediate type, and all concrete instances
 * MUST be of type <code>JavaType</code> from ""databind"" bundle -- this
 * abstraction is only needed so that types can be passed through
 * {@link com.fasterxml.jackson.core.JsonParser#readValueAs} methods.
 *
 * @since 2.0","Abstract Class do not obtain Source Code","No return type","public , abstract ","",""
"com.fasterxml.jackson.core.type.ResolvedType.getRawClass()","Abstract Method","* @return Type-erased {@link Class} of resolved type","public abstract Class<?> getRawClass();","Class","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.hasRawClass(Class)","Abstract Method","No Comment","public abstract boolean hasRawClass(Class<?> clz);","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.hasRawClass(Class).clz","Parameter_1","Belong to com.fasterxml.jackson.core.type.ResolvedType.hasRawClass(Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.isAbstract()","Abstract Method","No Comment","public abstract boolean isAbstract();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.isConcrete()","Abstract Method","No Comment","public abstract boolean isConcrete();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.isThrowable()","Abstract Method","No Comment","public abstract boolean isThrowable();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.isArrayType()","Abstract Method","No Comment","public abstract boolean isArrayType();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.isEnumType()","Abstract Method","No Comment","public abstract boolean isEnumType();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.isInterface()","Abstract Method","No Comment","public abstract boolean isInterface();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.isPrimitive()","Abstract Method","No Comment","public abstract boolean isPrimitive();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.isFinal()","Abstract Method","No Comment","public abstract boolean isFinal();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.isContainerType()","Abstract Method","No Comment","public abstract boolean isContainerType();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.isCollectionLikeType()","Abstract Method","No Comment","public abstract boolean isCollectionLikeType();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.isReferenceType()","Method","* Whether this type is a referential type, meaning that values are
     * basically pointers to ""real"" values (or null) and not regular
     * values themselves. Typical examples include things like
     * {@link java.util.concurrent.atomic.AtomicReference}, and various
     * <code>Optional</code> types (in JDK8, Guava).
     *
     * @return {@code True} if this is a ""referential"" type, {@code false} if not
     *
     * @since 2.6","public boolean isReferenceType() {
    return getReferencedType() != null;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.isMapLikeType()","Abstract Method","No Comment","public abstract boolean isMapLikeType();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.hasGenericTypes()","Abstract Method","* Method that can be used to find out if the type directly declares generic
     * parameters (for its direct super-class and/or super-interfaces).
     *
     * @return {@code True} if this type has generic type parameters, {@code false} if not","public abstract boolean hasGenericTypes();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.getParameterSource()","Method","* @deprecated Since 2.7: does not have meaning as parameters depend on type
     *    resolved.
     *
     * @return Type-erased class of something not usable at this point","// since 2.7
@Deprecated
public Class<?> getParameterSource() {
    return null;
}","Class","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.getKeyType()","Abstract Method","* Method for accessing key type for this type, assuming type
     * has such a concept (only Map types do)
     *
     * @return Key type of this type, if any; {@code null} if none","public abstract ResolvedType getKeyType();","ResolvedType","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.getContentType()","Abstract Method","* Method for accessing content type of this type, if type has
     * such a thing: simple types do not, structured types do
     * (like arrays, Collections and Maps)
     *
     * @return Content type of this type, if any; {@code null} if none","public abstract ResolvedType getContentType();","ResolvedType","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.getReferencedType()","Abstract Method","* Method for accessing type of value that instances of this
     * type references, if any.
     *
     * @return Referenced type, if any; {@code null} if not.
     *
     * @since 2.6","public abstract ResolvedType getReferencedType();","ResolvedType","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.containedTypeCount()","Abstract Method","* Method for checking how many contained types this type
     * has. Contained types are usually generic types, so that
     * generic Maps have 2 contained types.
     *
     * @return Number of contained types that may be accessed","public abstract int containedTypeCount();","int","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.containedType(int)","Abstract Method","* Method for accessing definitions of contained (""child"")
     * types.
     *
     * @param index Index of contained type to return
     *
     * @return Contained type at index, or null if no such type
     *    exists (no exception thrown)","public abstract ResolvedType containedType(int index);","ResolvedType","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.containedType(int).index","Parameter_1","Belong to com.fasterxml.jackson.core.type.ResolvedType.containedType(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.containedTypeName(int)","Abstract Method","* Method for accessing name of type variable in indicated
     * position. If no name is bound, will use placeholders (derived
     * from 0-based index); if no type variable or argument exists
     * with given index, null is returned.
     *
     * @param index Index of contained type to return
     *
     * @return Contained type at index, or null if no such type
     *    exists (no exception thrown)","public abstract String containedTypeName(int index);","String","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.containedTypeName(int).index","Parameter_1","Belong to com.fasterxml.jackson.core.type.ResolvedType.containedTypeName(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.ResolvedType.toCanonical()","Abstract Method","* Method that can be used to serialize type into form from which
     * it can be fully deserialized from at a later point (using
     * {@code TypeFactory} from mapper package).
     * For simple types this is same as calling
     * {@link Class#getName}, but for structured types it may additionally
     * contain type information about contents.
     *
     * @return String representation of the fully resolved type","public abstract String toCanonical();","String","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.TypeReference","Abstract Class","* This generic abstract class is used for obtaining full generics type information
 * by sub-classing; it must be converted to {@link ResolvedType} implementation
 * (implemented by <code>JavaType</code> from ""databind"" bundle) to be used.
 * Class is based on ideas from
 * <a href=""http://gafter.blogspot.com/2006/12/super-type-tokens.html""
 * >http://gafter.blogspot.com/2006/12/super-type-tokens.html</a>,
 * Additional idea (from a suggestion made in comments of the article)
 * is to require bogus implementation of <code>Comparable</code>
 * (any such generic interface would do, as long as it forces a method
 * with generic type to be implemented).
 * to ensure that a Type argument is indeed given.
 *<p>
 * Usage is by sub-classing: here is one way to instantiate reference
 * to generic type <code>List&lt;Integer&gt;</code>:
 *<pre>
 *  TypeReference ref = new TypeReference&lt;List&lt;Integer&gt;&gt;() { };
 *</pre>
 * which can be passed to methods that accept TypeReference, or resolved
 * using <code>TypeFactory</code> to obtain {@link ResolvedType}.","Abstract Class do not obtain Source Code","No return type","public , abstract ","","java.lang.Comparable"
"com.fasterxml.jackson.core.type.TypeReference._type","Field","No Comment","protected final Type _type;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.TypeReference.getType()","Method","No Comment","public Type getType() {
    return _type;
}","Type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.TypeReference.compareTo(TypeReference)","Method","* The only reason we define this method (and require implementation
     * of <code>Comparable</code>) is to prevent constructing a
     * reference without type information.","@Override
public int compareTo(TypeReference<T> o) {
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.TypeReference.compareTo(TypeReference).o","Parameter_1","Belong to com.fasterxml.jackson.core.type.TypeReference.compareTo(TypeReference)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.type.TypeReference.<init>()","Constructor","No Comment","protected TypeReference() {
    Type superClass = getClass().getGenericSuperclass();
    if (superClass instanceof Class<?>) {
        // sanity check, should never happen
        throw new IllegalArgumentException(""Internal error: TypeReference constructed without actual type information"");
    }
    /* 22-Dec-2008, tatu: Not sure if this case is safe -- I suspect
         *   it is possible to make it fail?
         *   But let's deal with specific
         *   case when we know an actual use case, and thereby suitable
         *   workarounds for valid case(s) and/or error to throw
         *   on invalid one(s).
         */
    _type = ((ParameterizedType) superClass).getActualTypeArguments()[0];
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonEncoding","Enum","* Enumeration that defines legal encodings that can be used
 * for JSON content, based on list of allowed encodings from
 * <a href=""http://www.ietf.org/rfc/rfc4627.txt"">JSON specification</a>.
 *<p>
 * Note: if application want to explicitly disregard Encoding
 * limitations (to read in JSON encoded using an encoding not
 * listed as allowed), they can use {@link java.io.Reader} /
 * {@link java.io.Writer} instances as input","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.JsonEncoding.UTF8","Enum Constant","N/A for big-endian, really","UTF8(""UTF-8"", false, 8)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonEncoding.UTF16_BE","Enum Constant","No Comment","UTF16_BE(""UTF-16BE"", true, 16)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonEncoding.UTF16_LE","Enum Constant","No Comment","UTF16_LE(""UTF-16LE"", false, 16)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonEncoding.UTF32_BE","Enum Constant","No Comment","UTF32_BE(""UTF-32BE"", true, 32)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonEncoding.UTF32_LE","Enum Constant","No Comment","UTF32_LE(""UTF-32LE"", false, 32)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonEncoding.getJavaName()","Method","* Method for accessing encoding name that JDK will support.
     *
     * @return Matching encoding name that JDK will support.","public String getJavaName() {
    return _javaName;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonEncoding.isBigEndian()","Method","* Whether encoding is big-endian (if encoding supports such
     * notion). If no such distinction is made (as is the case for
     * {@link #UTF8}), return value is undefined.
     *
     * @return True for big-endian encodings; false for little-endian
     *   (or if not applicable)","public boolean isBigEndian() {
    return _bigEndian;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonEncoding.bits()","Method","No Comment","public int bits() {
    return _bits;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonEncoding.<init>(String,boolean,int)","Constructor","No Comment","JsonEncoding(String javaName, boolean bigEndian, int bits) {
    _javaName = javaName;
    _bigEndian = bigEndian;
    _bits = bits;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonEncoding.<init>(String,boolean,int).javaName","Parameter_1","Belong to com.fasterxml.jackson.core.JsonEncoding.<init>(String,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonEncoding.<init>(String,boolean,int).bigEndian","Parameter_2","Belong to com.fasterxml.jackson.core.JsonEncoding.<init>(String,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonEncoding.<init>(String,boolean,int).bits","Parameter_3","Belong to com.fasterxml.jackson.core.JsonEncoding.<init>(String,boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variants","Class","* Container for commonly used Base64 variants:
 *<ul>
 * <li> {@link #MIME}
 * <li> {@link #MIME_NO_LINEFEEDS}
 * <li> {@link #PEM}
 * <li> {@link #MODIFIED_FOR_URL}
 * </ul>
 * See entries for full description of differences.
 *<p>
 * Note that for default {@link Base64Variant} instances listed above, configuration
 * is such that if padding is written on output, it will also be required on
 * reading. This behavior may be changed by using methods:
 *<ul>
 * <li>{@link Base64Variant#withPaddingAllowed()}
 *  </li>
 * <li>{@link Base64Variant#withPaddingForbidden()}
 *  </li>
 * <li>{@link Base64Variant#withPaddingRequired()}
 *  </li>
 * <li>{@link Base64Variant#withWritePadding(boolean)}
 *  </li>
 *</ul>
 *
 * @author Tatu Saloranta","Class do not obtain Source Code","No return type","public , final ","",""
"com.fasterxml.jackson.core.Base64Variants.STD_BASE64_ALPHABET","Field","No Comment","final static String STD_BASE64_ALPHABET = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"";","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variants.MIME","Field","* This variant is what most people would think of ""the standard""
     * Base64 encoding.
     *<p>
     * See <a href=""http://en.wikipedia.org/wiki/Base64"">wikipedia Base64 entry</a> for details.
     *<p>
     * Note that although this can be thought of as the standard variant,
     * it is <b>not</b> the default for Jackson: no-linefeeds alternative
     * is instead used because of JSON requirement of escaping all linefeeds.
     *<p>
     * Writes padding on output; requires padding when reading (may change later with a call to {@link Base64Variant#withWritePadding})","public final static Base64Variant MIME;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variants.MIME_NO_LINEFEEDS","Field","* Slightly non-standard modification of {@link #MIME} which does not
     * use linefeeds (max line length set to infinite). Useful when linefeeds
     * wouldn't work well (possibly in attributes), or for minor space savings
     * (save 1 linefeed per 76 data chars, ie. ~1.4% savings).
     *<p>
     * Writes padding on output; requires padding when reading (may change later with a call to {@link Base64Variant#withWritePadding})","public final static Base64Variant MIME_NO_LINEFEEDS;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variants.PEM","Field","* This variant is the one that predates {@link #MIME}: it is otherwise
     * identical, except that it mandates shorter line length.
     *<p>
     * Writes padding on output; requires padding when reading (may change later with a call to {@link Base64Variant#withWritePadding})","public final static Base64Variant PEM = new Base64Variant(MIME, ""PEM"", true, '=', 64);","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variants.MODIFIED_FOR_URL","Field","* This non-standard variant is usually used when encoded data needs to be
     * passed via URLs (such as part of GET request). It differs from the
     * base {@link #MIME} variant in multiple ways.
     * First, no padding is used: this also means that it generally cannot
     * be written in multiple separate but adjacent chunks (which would not
     * be the usual use case in any case). Also, no linefeeds are used (max
     * line length set to infinite). And finally, two characters (plus and
     * slash) that would need quoting in URLs are replaced with more
     * optimal alternatives (hyphen and underscore, respectively).
     *<p>
     * Does not write padding on output; does not accept padding when reading (may change later with a call to {@link Base64Variant#withWritePadding})","public final static Base64Variant MODIFIED_FOR_URL;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variants.getDefaultVariant()","Method","* Method used to get the default variant -- {@link #MIME_NO_LINEFEEDS} -- for cases
     * where caller does not explicitly specify the variant.
     * We will prefer no-linefeed version because linefeeds in JSON values
     * must be escaped, making linefeed-containing variants sub-optimal.
     *
     * @return Default variant ({@code MIME_NO_LINEFEEDS})","public static Base64Variant getDefaultVariant() {
    return MIME_NO_LINEFEEDS;
}","Base64Variant","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variants.valueOf(String)","Method","* Lookup method for finding one of standard variants by name.
     * If name does not match any of standard variant names,
     * a {@link IllegalArgumentException} is thrown.
     *
     * @param name Name of base64 variant to return
     *
     * @return Standard base64 variant that matches given {@code name}
     *
     * @throws IllegalArgumentException if no standard variant with given name exists","public static Base64Variant valueOf(String name) throws IllegalArgumentException {
    if (MIME._name.equals(name)) {
        return MIME;
    }
    if (MIME_NO_LINEFEEDS._name.equals(name)) {
        return MIME_NO_LINEFEEDS;
    }
    if (PEM._name.equals(name)) {
        return PEM;
    }
    if (MODIFIED_FOR_URL._name.equals(name)) {
        return MODIFIED_FOR_URL;
    }
    if (name == null) {
        name = ""<null>"";
    } else {
        name = ""'"" + name + ""'"";
    }
    throw new IllegalArgumentException(""No Base64Variant with name "" + name);
}","Base64Variant","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variants.valueOf(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variants.valueOf(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Versioned","Interface","* Interface that those Jackson components that are explicitly versioned will implement.
 * Intention is to allow both plug-in components (custom extensions) and applications and
 * frameworks that use Jackson to detect exact version of Jackson in use.
 * This may be useful for example for ensuring that proper Jackson version is deployed
 * (beyond mechanisms that deployment system may have), as well as for possible
 * workarounds.","Interface do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.Versioned.version()","Abstract Method","* Method called to detect version of the component that implements this interface;
     * returned version should never be null, but may return specific ""not available""
     * instance (see {@link Version} for details).
     *
     * @return Version of the component","Version version();","Version","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadFeature","Enum","* Token reader (parser) features not-specific to any particular format backend.
 * Eventual replacement for non-JSON-specific {@link com.fasterxml.jackson.core.JsonParser.Feature}s.
 *
 * @since 2.10","Enum do not obtain Source Code","No return type","public ","enum has no extends","com.fasterxml.jackson.core.util.JacksonFeature"
"com.fasterxml.jackson.core.StreamReadFeature.AUTO_CLOSE_SOURCE","Enum Constant","* Feature that determines whether parser will automatically
     * close underlying input source that is NOT owned by the
     * parser. If disabled, calling application has to separately
     * close the underlying {@link InputStream} and {@link Reader}
     * instances used to create the parser. If enabled, parser
     * will handle closing, as long as parser itself gets closed:
     * this happens when end-of-input is encountered, or parser
     * is closed by a call to {@link JsonParser#close}.
     *<p>
     * Feature is enabled by default.","AUTO_CLOSE_SOURCE(JsonParser.Feature.AUTO_CLOSE_SOURCE)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadFeature.STRICT_DUPLICATE_DETECTION","Enum Constant","* Feature that determines whether {@link JsonParser} will explicitly
     * check that no duplicate JSON Object field names are encountered.
     * If enabled, parser will check all names within context and report
     * duplicates by throwing a {@link JsonParseException}; if disabled,
     * parser will not do such checking. Assumption in latter case is
     * that caller takes care of handling duplicates at a higher level:
     * data-binding, for example, has features to specify detection to
     * be done there.
     *<p>
     * Note that enabling this feature will incur performance overhead
     * due to having to store and check additional information: this typically
     * adds 20-30% to execution time for basic parsing.","STRICT_DUPLICATE_DETECTION(JsonParser.Feature.STRICT_DUPLICATE_DETECTION)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadFeature.IGNORE_UNDEFINED","Enum Constant","* Feature that determines what to do if the underlying data format requires knowledge
     * of all properties to decode (usually via a Schema), and if no definition is
     * found for a property that input content contains.
     * Typically most textual data formats do NOT require schema information (although
     * some do, such as CSV), whereas many binary data formats do require definitions
     * (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not).
     * Further note that some formats that do require schema information will not be able
     * to ignore undefined properties: for example, Avro is fully positional and there is
     * no possibility of undefined data. This leaves formats like Protobuf that have identifiers
     * that may or may not map; and as such Protobuf format does make use of this feature.
     *<p>
     * Note that support for this feature is implemented by individual data format
     * module, if (and only if) it makes sense for the format in question. For JSON,
     * for example, this feature has no effect as properties need not be pre-defined.
     *<p>
     * Feature is disabled by default, meaning that if the underlying data format
     * requires knowledge of all properties to output, attempts to read an unknown
     * property will result in a {@link JsonProcessingException}","IGNORE_UNDEFINED(JsonParser.Feature.IGNORE_UNDEFINED)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION","Enum Constant","* Feature that determines whether {@link JsonLocation} instances should be constructed
     * with reference to source or not. If source reference is included, its type and contents
     * are included when `toString()` method is called (most notably when printing out parse
     * exception with that location information). If feature is disabled, no source reference
     * is passed and source is only indicated as ""UNKNOWN"".
     *<p>
     * Most common reason for disabling this feature is to avoid leaking
     * internal information; this may be done for security reasons.
     * Note that even if source reference is included, only parts of contents are usually
     * printed, and not the whole contents. Further, many source reference types cannot
     * necessarily access contents (like streams), so only type is indicated, not contents.
     *<p>
     * Feature is enabled by default, meaning that ""source reference"" information is passed
     * and some or all of the source content may be included in {@link JsonLocation} information
     * constructed either when requested explicitly, or when needed for an exception.","INCLUDE_SOURCE_IN_LOCATION(JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadFeature.USE_FAST_DOUBLE_PARSER","Enum Constant","* Feature that determines whether we use the built-in {@link Double#parseDouble(String)} code to parse
     * doubles or if we use {@code FastDoubleParser}
     * instead.
     *<p>
     * This setting is disabled by default.
     *
     * @since 2.14","USE_FAST_DOUBLE_PARSER(JsonParser.Feature.USE_FAST_DOUBLE_PARSER)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadFeature.USE_FAST_BIG_NUMBER_PARSER","Enum Constant","* Feature that determines whether to use the built-in Java code for parsing
     * <code>BigDecimal</code>s and <code>BigInteger</code>s or to use
     * {@code FastDoubleParser} instead.
     *<p>
     * This setting is disabled by default.
     *
     * @since 2.15","USE_FAST_BIG_NUMBER_PARSER(JsonParser.Feature.USE_FAST_BIG_NUMBER_PARSER)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadFeature.collectDefaults()","Method","* Method that calculates bit set (flags) of all features that
     * are enabled by default.
     *
     * @return Bit mask of all features that are enabled by default","public static int collectDefaults() {
    int flags = 0;
    for (StreamReadFeature f : values()) {
        if (f.enabledByDefault()) {
            flags |= f.getMask();
        }
    }
    return flags;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadFeature.enabledByDefault()","Method","No Comment","@Override
public boolean enabledByDefault() {
    return _defaultState;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadFeature.enabledIn(int)","Method","No Comment","@Override
public boolean enabledIn(int flags) {
    return (flags & _mask) != 0;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadFeature.enabledIn(int).flags","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadFeature.enabledIn(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadFeature.getMask()","Method","No Comment","@Override
public int getMask() {
    return _mask;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadFeature.mappedFeature()","Method","No Comment","public JsonParser.Feature mappedFeature() {
    return _mappedFeature;
}","JsonParser.Feature","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadFeature.<init>(JsonParser.Feature)","Constructor","No Comment","private StreamReadFeature(JsonParser.Feature mapTo) {
    // only for 2.x, let's map everything to legacy feature:
    _mappedFeature = mapTo;
    _mask = mapTo.getMask();
    _defaultState = mapTo.enabledByDefault();
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadFeature.<init>(JsonParser.Feature).mapTo","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadFeature.<init>(JsonParser.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatMatcher","Class","* Result object constructed by {@link DataFormatDetector} when requested
 * to detect format of given input data.","Class do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.format.DataFormatMatcher._originalStream","Field","No Comment","protected final InputStream _originalStream;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatMatcher._bufferedData","Field","* Content read during format matching process","protected final byte[] _bufferedData;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatMatcher._bufferedStart","Field","* Pointer to the first byte in buffer available for reading","protected final int _bufferedStart;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatMatcher._bufferedLength","Field","* Number of bytes available in buffer.","protected final int _bufferedLength;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatMatcher._match","Field","* Factory that produced sufficient match (if any)","protected final JsonFactory _match;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatMatcher._matchStrength","Field","* Strength of match with {@link #_match}","protected final MatchStrength _matchStrength;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatMatcher.hasMatch()","Method","* Accessor to use to see if any formats matched well enough with
     * the input data.
     *
     * @return Whether format has a match","public boolean hasMatch() {
    return _match != null;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatMatcher.getMatchStrength()","Method","* Method for accessing strength of the match, if any; if no match,
     * will return {@link MatchStrength#INCONCLUSIVE}.
     *
     * @return Strength of match","public MatchStrength getMatchStrength() {
    return (_matchStrength == null) ? MatchStrength.INCONCLUSIVE : _matchStrength;
}","MatchStrength","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatMatcher.getMatch()","Method","* Accessor for {@link JsonFactory} that represents format that data matched.
     *
     * @return Relevant {@link JsonFactory} to indicate matched format","public JsonFactory getMatch() {
    return _match;
}","JsonFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatMatcher.getMatchedFormatName()","Method","* Accessor for getting brief textual name of matched format if any (null
     * if none). Equivalent to:
     *<pre>
     *   return hasMatch() ? getMatch().getFormatName() : null;
     *</pre>
     *
     * @return Name of the format that is acceptable match, if any; {@code null} if none","public String getMatchedFormatName() {
    return hasMatch() ? getMatch().getFormatName() : null;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatMatcher.createParserWithMatch()","Method","If no match was found, returns null.","public JsonParser createParserWithMatch() throws IOException {
    if (_match == null) {
        return null;
    }
    if (_originalStream == null) {
        return _match.createParser(_bufferedData, _bufferedStart, _bufferedLength);
    }
    return _match.createParser(getDataStream());
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatMatcher.getDataStream()","Method","* Method to use for accessing input for which format detection has been done.
     * This <b>must</b> be used instead of using stream passed to detector
     * unless given stream itself can do buffering.
     * Stream will return all content that was read during matching process, as well
     * as remaining contents of the underlying stream.
     *
     * @return InputStream to use for reading actual content using format detected","public InputStream getDataStream() {
    if (_originalStream == null) {
        return new ByteArrayInputStream(_bufferedData, _bufferedStart, _bufferedLength);
    }
    return new MergedStream(null, _originalStream, _bufferedData, _bufferedStart, _bufferedLength);
}","InputStream","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatMatcher.<init>(InputStream,byte[],int,int,JsonFactory,MatchStrength)","Constructor","No Comment","protected DataFormatMatcher(InputStream in, byte[] buffered, int bufferedStart, int bufferedLength, JsonFactory match, MatchStrength strength) {
    _originalStream = in;
    _bufferedData = buffered;
    _bufferedStart = bufferedStart;
    _bufferedLength = bufferedLength;
    _match = match;
    _matchStrength = strength;
    // can't have negative offset or length
    if ((bufferedStart | bufferedLength) < 0 || (bufferedStart + bufferedLength) > buffered.length) {
        throw new IllegalArgumentException(String.format(""Illegal start/length (%d/%d) wrt input array of %d bytes"", bufferedStart, bufferedLength, buffered.length));
    }
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatMatcher.<init>(InputStream,byte[],int,int,JsonFactory,MatchStrength).in","Parameter_1","Belong to com.fasterxml.jackson.core.format.DataFormatMatcher.<init>(InputStream,byte[],int,int,JsonFactory,MatchStrength)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatMatcher.<init>(InputStream,byte[],int,int,JsonFactory,MatchStrength).buffered","Parameter_2","Belong to com.fasterxml.jackson.core.format.DataFormatMatcher.<init>(InputStream,byte[],int,int,JsonFactory,MatchStrength)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatMatcher.<init>(InputStream,byte[],int,int,JsonFactory,MatchStrength).bufferedStart","Parameter_3","Belong to com.fasterxml.jackson.core.format.DataFormatMatcher.<init>(InputStream,byte[],int,int,JsonFactory,MatchStrength)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatMatcher.<init>(InputStream,byte[],int,int,JsonFactory,MatchStrength).bufferedLength","Parameter_4","Belong to com.fasterxml.jackson.core.format.DataFormatMatcher.<init>(InputStream,byte[],int,int,JsonFactory,MatchStrength)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatMatcher.<init>(InputStream,byte[],int,int,JsonFactory,MatchStrength).match","Parameter_5","Belong to com.fasterxml.jackson.core.format.DataFormatMatcher.<init>(InputStream,byte[],int,int,JsonFactory,MatchStrength)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatMatcher.<init>(InputStream,byte[],int,int,JsonFactory,MatchStrength).strength","Parameter_6","Belong to com.fasterxml.jackson.core.format.DataFormatMatcher.<init>(InputStream,byte[],int,int,JsonFactory,MatchStrength)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.MatchStrength","Enum","* Enumeration used to indicate strength of match between data format
 * and piece of data (typically beginning of a data file).
 * Values are in increasing match strength; and detectors should return
 * ""strongest"" value: that is, it should start with strongest match
 * criteria, and downgrading if criteria is not fulfilled.","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.format.MatchStrength.NO_MATCH","Enum Constant","* Value that indicates that given data cannot be in given format.","NO_MATCH","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.MatchStrength.INCONCLUSIVE","Enum Constant","* Value that indicates that detector cannot find out whether could
     * be a match or not.
     * This can occur for example for textual data formats t
     * when there are so many leading spaces that detector cannot
     * find the first data byte (because detectors typically limit lookahead
     * to some smallish value).","INCONCLUSIVE","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.MatchStrength.WEAK_MATCH","Enum Constant","* Value that indicates that given data could be of specified format (i.e.
     * it cannot be ruled out). This can occur for example when seen data
     * is both not in canonical formats (for example: JSON data should be a JSON Array or Object
     * not a scalar value, as per JSON specification) and there are known use case
     * where a format detected is actually used (plain JSON Strings are actually used, even
     * though specification does not indicate that as valid usage: as such, seeing a leading
     * double-quote could indicate a JSON String, which plausibly <b>could</b> indicate
     * non-standard JSON usage).","WEAK_MATCH","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.MatchStrength.SOLID_MATCH","Enum Constant","* Value that indicates that given data conforms to (one of) canonical form(s) of
     * the data format.
     *<p>
     * For example, when testing for XML data format,
     * seeing a less-than character (""&lt;"") alone (with possible leading spaces)
     * would be a strong indication that data could
     * be in xml format (but see below for {@link #FULL_MATCH} description for more)","SOLID_MATCH","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.MatchStrength.FULL_MATCH","Enum Constant","* Value that indicates that given data contains a signature that is deemed
     * specific enough to uniquely indicate data format used.
     *<p>
     * For example, when testing for XML data format,
     * seing ""&lt;xml"" as the first data bytes (""XML declaration"", as per XML specification)
     * could give full confidence that data is indeed in XML format.
     * Not all data formats have unique leading identifiers to allow full matches; for example,
     * JSON only has heuristic matches and can have at most {@link #SOLID_MATCH}) match.","FULL_MATCH","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector","Class","* Simple helper class that allows data format (content type) auto-detection,
 * given an ordered set of {@link JsonFactory} instances to use for actual low-level
 * detection.","Class do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.format.DataFormatDetector.DEFAULT_MAX_INPUT_LOOKAHEAD","Field","* By default we will look ahead at most 64 bytes; in most cases,
     * much less (4 bytes or so) is needed, but we will allow bit more
     * leniency to support data formats that need more complex heuristics.","public final static int DEFAULT_MAX_INPUT_LOOKAHEAD = 64;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector._detectors","Field","* Ordered list of factories which both represent data formats to
     * detect (in precedence order, starting with highest) and are used
     * for actual detection.","protected final JsonFactory[] _detectors;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector._optimalMatch","Field","* Strength of match we consider to be good enough to be used
     * without checking any other formats.
     * Default value is {@link MatchStrength#SOLID_MATCH},","protected final MatchStrength _optimalMatch;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector._minimalMatch","Field","* Strength of minimal match we accept as the answer, unless
     * better matches are found.
     * Default value is {@link MatchStrength#WEAK_MATCH},","protected final MatchStrength _minimalMatch;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector._maxInputLookahead","Field","* Maximum number of leading bytes of the input that we can read
     * to determine data format.
     *<p>
     * Default value is {@link #DEFAULT_MAX_INPUT_LOOKAHEAD}.","protected final int _maxInputLookahead;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.withOptimalMatch(MatchStrength)","Method","* Method that will return a detector instance that uses given
     * optimal match level (match that is considered sufficient to return, without
     * trying to find stronger matches with other formats).
     *
     * @param optMatch Optimal match level to use
     *
     * @return Format detector instance with specified optimal match level","public DataFormatDetector withOptimalMatch(MatchStrength optMatch) {
    if (optMatch == _optimalMatch) {
        return this;
    }
    return new DataFormatDetector(_detectors, optMatch, _minimalMatch, _maxInputLookahead);
}","DataFormatDetector","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.withOptimalMatch(MatchStrength).optMatch","Parameter_1","Belong to com.fasterxml.jackson.core.format.DataFormatDetector.withOptimalMatch(MatchStrength)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.withMinimalMatch(MatchStrength)","Method","* Method that will return a detector instance that uses given
     * minimal match level; match that may be returned unless a stronger match
     * is found with other format detectors.
     *
     * @param minMatch Minimum match level to use
     *
     * @return Format detector instance with specified minimum match level","public DataFormatDetector withMinimalMatch(MatchStrength minMatch) {
    if (minMatch == _minimalMatch) {
        return this;
    }
    return new DataFormatDetector(_detectors, _optimalMatch, minMatch, _maxInputLookahead);
}","DataFormatDetector","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.withMinimalMatch(MatchStrength).minMatch","Parameter_1","Belong to com.fasterxml.jackson.core.format.DataFormatDetector.withMinimalMatch(MatchStrength)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.withMaxInputLookahead(int)","Method","* Method that will return a detector instance that allows detectors to
     * read up to specified number of bytes when determining format match strength.
     *
     * @param lookaheadBytes Amount of look-ahead allowed
     *
     * @return Format detector instance with specified lookahead settings","public DataFormatDetector withMaxInputLookahead(int lookaheadBytes) {
    if (lookaheadBytes == _maxInputLookahead) {
        return this;
    }
    return new DataFormatDetector(_detectors, _optimalMatch, _minimalMatch, lookaheadBytes);
}","DataFormatDetector","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.withMaxInputLookahead(int).lookaheadBytes","Parameter_1","Belong to com.fasterxml.jackson.core.format.DataFormatDetector.withMaxInputLookahead(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(InputStream)","Method","* Method to call to find format that content (accessible via given
     * {@link InputStream}) given has, as per configuration of this detector
     * instance.
     *
     * @param in InputStream from which to read initial content
     *
     * @return Matcher object which contains result; never null, even in cases
     *    where no match (with specified minimal match strength) is found.
     *
     * @throws IOException for read I/O problems","public DataFormatMatcher findFormat(InputStream in) throws IOException {
    return _findFormat(new InputAccessor.Std(in, new byte[_maxInputLookahead]));
}","DataFormatMatcher","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(InputStream).in","Parameter_1","Belong to com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(InputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(byte[])","Method","* Method to call to find format that given content (full document)
     * has, as per configuration of this detector instance.
     *
     * @param fullInputData Full contents to use for format detection
     *
     * @return Matcher object which contains result; never null, even in cases
     *    where no match (with specified minimal match strength) is found.
     *
     * @throws IOException for read I/O problems","public DataFormatMatcher findFormat(byte[] fullInputData) throws IOException {
    return _findFormat(new InputAccessor.Std(fullInputData));
}","DataFormatMatcher","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(byte[]).fullInputData","Parameter_1","Belong to com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(byte[],int,int)","Method","* Method to call to find format that given content (full document)
     * has, as per configuration of this detector instance.
     *
     * @param fullInputData Full contents to use for format detection
     * @param offset Offset of the first content byte
     * @param len Length of content
     *
     * @return Matcher object which contains result; never null, even in cases
     *    where no match (with specified minimal match strength) is found.
     *
     * @throws IOException for read I/O problems
     *
     * @since 2.1","public DataFormatMatcher findFormat(byte[] fullInputData, int offset, int len) throws IOException {
    return _findFormat(new InputAccessor.Std(fullInputData, offset, len));
}","DataFormatMatcher","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(byte[],int,int).fullInputData","Parameter_1","Belong to com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(byte[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.toString()","Method","No Comment","@Override
public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append('[');
    final int len = _detectors.length;
    if (len > 0) {
        sb.append(_detectors[0].getFormatName());
        for (int i = 1; i < len; ++i) {
            sb.append("", "");
            sb.append(_detectors[i].getFormatName());
        }
    }
    sb.append(']');
    return sb.toString();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector._findFormat(InputAccessor.Std)","Method","No Comment","private DataFormatMatcher _findFormat(InputAccessor.Std acc) throws IOException {
    JsonFactory bestMatch = null;
    MatchStrength bestMatchStrength = null;
    for (JsonFactory f : _detectors) {
        acc.reset();
        MatchStrength strength = f.hasFormat(acc);
        // if not better than what we have so far (including minimal level limit), skip
        if (strength == null || strength.ordinal() < _minimalMatch.ordinal()) {
            continue;
        }
        // also, needs to better match than before
        if (bestMatch != null) {
            if (bestMatchStrength.ordinal() >= strength.ordinal()) {
                continue;
            }
        }
        // finally: if it's good enough match, we are done
        bestMatch = f;
        bestMatchStrength = strength;
        if (strength.ordinal() >= _optimalMatch.ordinal()) {
            break;
        }
    }
    return acc.createMatcher(bestMatch, bestMatchStrength);
}","DataFormatMatcher","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector._findFormat(InputAccessor.Std).acc","Parameter_1","Belong to com.fasterxml.jackson.core.format.DataFormatDetector._findFormat(InputAccessor.Std)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.<init>(JsonFactory[])","Constructor","No Comment","public DataFormatDetector(JsonFactory... detectors) {
    this(detectors, MatchStrength.SOLID_MATCH, MatchStrength.WEAK_MATCH, DEFAULT_MAX_INPUT_LOOKAHEAD);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.<init>(JsonFactory[]).detectors","Parameter_1","Belong to com.fasterxml.jackson.core.format.DataFormatDetector.<init>(JsonFactory[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.<init>(Collection)","Constructor","No Comment","public DataFormatDetector(Collection<JsonFactory> detectors) {
    this(detectors.toArray(new JsonFactory[0]));
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.<init>(Collection).detectors","Parameter_1","Belong to com.fasterxml.jackson.core.format.DataFormatDetector.<init>(Collection)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.<init>(JsonFactory[],MatchStrength,MatchStrength,int)","Constructor","No Comment","private DataFormatDetector(JsonFactory[] detectors, MatchStrength optMatch, MatchStrength minMatch, int maxInputLookahead) {
    _detectors = detectors;
    _optimalMatch = optMatch;
    _minimalMatch = minMatch;
    _maxInputLookahead = maxInputLookahead;
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.<init>(JsonFactory[],MatchStrength,MatchStrength,int).detectors","Parameter_1","Belong to com.fasterxml.jackson.core.format.DataFormatDetector.<init>(JsonFactory[],MatchStrength,MatchStrength,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.<init>(JsonFactory[],MatchStrength,MatchStrength,int).optMatch","Parameter_2","Belong to com.fasterxml.jackson.core.format.DataFormatDetector.<init>(JsonFactory[],MatchStrength,MatchStrength,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.<init>(JsonFactory[],MatchStrength,MatchStrength,int).minMatch","Parameter_3","Belong to com.fasterxml.jackson.core.format.DataFormatDetector.<init>(JsonFactory[],MatchStrength,MatchStrength,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.DataFormatDetector.<init>(JsonFactory[],MatchStrength,MatchStrength,int).maxInputLookahead","Parameter_4","Belong to com.fasterxml.jackson.core.format.DataFormatDetector.<init>(JsonFactory[],MatchStrength,MatchStrength,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor","Interface","* Interface used to expose beginning of a data file to data format
 * detection code.","Interface do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.format.InputAccessor.hasMoreBytes()","Abstract Method","* Method to call to check if more input is available.
     * Since this may result in more content to be read (at least
     * one more byte), a {@link IOException} may get thrown.
     *
     * @return Whether there is at least one more input byte accessible
     *
     * @throws IOException If check for more content failed due to issue with
     *   underlying input abstraction","boolean hasMoreBytes() throws IOException;","boolean","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.nextByte()","Abstract Method","* Returns next byte available, if any; if no more bytes are
     * available, will throw {@link java.io.EOFException}.
     *
     * @return Next content byte, if available
     *
     * @throws IOException If called and there is no more content available","byte nextByte() throws IOException;","byte","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.reset()","Abstract Method","* Method that can be called to reset accessor to read from beginning of input.","void reset();","void","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor$Std","Class","* Basic implementation that reads data from given
     * {@link InputStream} and buffers it as necessary.","Class do not obtain Source Code","No return type","","","com.fasterxml.jackson.core.format.InputAccessor"
"com.fasterxml.jackson.core.format.InputAccessor$Std._in","Field","No Comment","protected final InputStream _in;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor$Std._buffer","Field","No Comment","protected final byte[] _buffer;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor$Std._bufferedStart","Field","No Comment","protected final int _bufferedStart;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor$Std._bufferedEnd","Field","* End of valid bytes in the buffer (points to one past last valid)","protected int _bufferedEnd;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor$Std._ptr","Field","* Pointer to next available buffered byte in {@link #_buffer}.","protected int _ptr;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor$Std.hasMoreBytes()","Method","No Comment","@Override
public boolean hasMoreBytes() throws IOException {
    if (_ptr < _bufferedEnd) {
        // already got more
        return true;
    }
    if (_in == null) {
        // nowhere to read from
        return false;
    }
    int amount = _buffer.length - _ptr;
    if (amount < 1) {
        // cannot load any more
        return false;
    }
    int count = _in.read(_buffer, _ptr, amount);
    if (count <= 0) {
        // EOF
        return false;
    }
    _bufferedEnd += count;
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor$Std.nextByte()","Method","No Comment","@Override
public byte nextByte() throws IOException {
    // should we just try loading more automatically?
    if (_ptr >= _bufferedEnd) {
        if (!hasMoreBytes()) {
            throw new EOFException(""Failed auto-detect: could not read more than "" + _ptr + "" bytes (max buffer size: "" + _buffer.length + "")"");
        }
    }
    return _buffer[_ptr++];
}","byte","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor$Std.reset()","Method","No Comment","@Override
public void reset() {
    _ptr = _bufferedStart;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor$Std.createMatcher(JsonFactory,MatchStrength)","Method","No Comment","public DataFormatMatcher createMatcher(JsonFactory match, MatchStrength matchStrength) {
    return new DataFormatMatcher(_in, _buffer, _bufferedStart, (_bufferedEnd - _bufferedStart), match, matchStrength);
}","DataFormatMatcher","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor$Std.createMatcher(JsonFactory,MatchStrength).match","Parameter_1","Belong to com.fasterxml.jackson.core.format.InputAccessor$Std.createMatcher(JsonFactory,MatchStrength)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor$Std.createMatcher(JsonFactory,MatchStrength).matchStrength","Parameter_2","Belong to com.fasterxml.jackson.core.format.InputAccessor$Std.createMatcher(JsonFactory,MatchStrength)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor$Std.<init>(InputStream,byte[])","Constructor","input stream and must be read.","public Std(InputStream in, byte[] buffer) {
    _in = in;
    _buffer = buffer;
    _bufferedStart = 0;
    _ptr = 0;
    _bufferedEnd = 0;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor$Std.<init>(InputStream,byte[]).in","Parameter_1","Belong to com.fasterxml.jackson.core.format.InputAccessor$Std.<init>(InputStream,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor$Std.<init>(InputStream,byte[]).buffer","Parameter_2","Belong to com.fasterxml.jackson.core.format.InputAccessor$Std.<init>(InputStream,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor$Std.<init>(byte[])","Constructor","of full input) is available.","public Std(byte[] inputDocument) {
    this(inputDocument, 0, inputDocument.length);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor$Std.<init>(byte[]).inputDocument","Parameter_1","Belong to com.fasterxml.jackson.core.format.InputAccessor$Std.<init>(byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor$Std.<init>(byte[],int,int)","Constructor","of full input) is available.","public Std(byte[] inputDocument, int start, int len) {
    _in = null;
    _buffer = inputDocument;
    _ptr = start;
    _bufferedStart = start;
    _bufferedEnd = start + len;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor$Std.<init>(byte[],int,int).inputDocument","Parameter_1","Belong to com.fasterxml.jackson.core.format.InputAccessor$Std.<init>(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor$Std.<init>(byte[],int,int).start","Parameter_2","Belong to com.fasterxml.jackson.core.format.InputAccessor$Std.<init>(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor$Std.<init>(byte[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.format.InputAccessor$Std.<init>(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.Std","Class","* Basic implementation that reads data from given
     * {@link InputStream} and buffers it as necessary.","Class do not obtain Source Code","No return type","default","","com.fasterxml.jackson.core.format.InputAccessor"
"com.fasterxml.jackson.core.format.InputAccessor.Std._in","Field","No Comment","protected final InputStream _in;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.Std._buffer","Field","No Comment","protected final byte[] _buffer;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.Std._bufferedStart","Field","No Comment","protected final int _bufferedStart;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.Std._bufferedEnd","Field","* End of valid bytes in the buffer (points to one past last valid)","protected int _bufferedEnd;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.Std._ptr","Field","* Pointer to next available buffered byte in {@link #_buffer}.","protected int _ptr;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.Std.hasMoreBytes()","Method","No Comment","@Override
public boolean hasMoreBytes() throws IOException {
    if (_ptr < _bufferedEnd) {
        // already got more
        return true;
    }
    if (_in == null) {
        // nowhere to read from
        return false;
    }
    int amount = _buffer.length - _ptr;
    if (amount < 1) {
        // cannot load any more
        return false;
    }
    int count = _in.read(_buffer, _ptr, amount);
    if (count <= 0) {
        // EOF
        return false;
    }
    _bufferedEnd += count;
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.Std.nextByte()","Method","No Comment","@Override
public byte nextByte() throws IOException {
    // should we just try loading more automatically?
    if (_ptr >= _bufferedEnd) {
        if (!hasMoreBytes()) {
            throw new EOFException(""Failed auto-detect: could not read more than "" + _ptr + "" bytes (max buffer size: "" + _buffer.length + "")"");
        }
    }
    return _buffer[_ptr++];
}","byte","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.Std.reset()","Method","No Comment","@Override
public void reset() {
    _ptr = _bufferedStart;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.Std.createMatcher(JsonFactory,MatchStrength)","Method","No Comment","public DataFormatMatcher createMatcher(JsonFactory match, MatchStrength matchStrength) {
    return new DataFormatMatcher(_in, _buffer, _bufferedStart, (_bufferedEnd - _bufferedStart), match, matchStrength);
}","DataFormatMatcher","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.Std.createMatcher(JsonFactory,MatchStrength).match","Parameter_1","Belong to com.fasterxml.jackson.core.format.InputAccessor.Std.createMatcher(JsonFactory,MatchStrength)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.Std.createMatcher(JsonFactory,MatchStrength).matchStrength","Parameter_2","Belong to com.fasterxml.jackson.core.format.InputAccessor.Std.createMatcher(JsonFactory,MatchStrength)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.Std.<init>(InputStream,byte[])","Constructor","input stream and must be read.","public Std(InputStream in, byte[] buffer) {
    _in = in;
    _buffer = buffer;
    _bufferedStart = 0;
    _ptr = 0;
    _bufferedEnd = 0;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.Std.<init>(InputStream,byte[]).in","Parameter_1","Belong to com.fasterxml.jackson.core.format.InputAccessor.Std.<init>(InputStream,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.Std.<init>(InputStream,byte[]).buffer","Parameter_2","Belong to com.fasterxml.jackson.core.format.InputAccessor.Std.<init>(InputStream,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.Std.<init>(byte[])","Constructor","of full input) is available.","public Std(byte[] inputDocument) {
    this(inputDocument, 0, inputDocument.length);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.Std.<init>(byte[]).inputDocument","Parameter_1","Belong to com.fasterxml.jackson.core.format.InputAccessor.Std.<init>(byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.Std.<init>(byte[],int,int)","Constructor","of full input) is available.","public Std(byte[] inputDocument, int start, int len) {
    _in = null;
    _buffer = inputDocument;
    _ptr = start;
    _bufferedStart = start;
    _bufferedEnd = start + len;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.Std.<init>(byte[],int,int).inputDocument","Parameter_1","Belong to com.fasterxml.jackson.core.format.InputAccessor.Std.<init>(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.Std.<init>(byte[],int,int).start","Parameter_2","Belong to com.fasterxml.jackson.core.format.InputAccessor.Std.<init>(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.format.InputAccessor.Std.<init>(byte[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.format.InputAccessor.Std.<init>(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator","Abstract Class","* Base class that defines public API for writing JSON content.
 * Instances are created using factory methods of a
 * {@link JsonFactory} instance.
 *
 *
 * @author Tatu Saloranta","Abstract Class do not obtain Source Code","No return type","public , abstract ","","java.io.Closeable;java.io.Flushable;com.fasterxml.jackson.core.Versioned"
"com.fasterxml.jackson.core.JsonGenerator.DEFAULT_WRITE_CAPABILITIES","Field","* Default set of {@link StreamWriteCapability}ies that may be used as
     * basis for format-specific readers (or as bogus instance if non-null
     * set needs to be passed).
     *
     * @since 2.12","protected final static JacksonFeatureSet<StreamWriteCapability> DEFAULT_WRITE_CAPABILITIES = JacksonFeatureSet.fromDefaults(StreamWriteCapability.values());","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.DEFAULT_TEXTUAL_WRITE_CAPABILITIES","Field","* Default set of {@link StreamWriteCapability}ies for typical textual formats,
     * to use either as-is, or as a base with possible differences.
     *
     * @since 2.12","protected final static JacksonFeatureSet<StreamWriteCapability> DEFAULT_TEXTUAL_WRITE_CAPABILITIES = DEFAULT_WRITE_CAPABILITIES.with(StreamWriteCapability.CAN_WRITE_FORMATTED_NUMBERS);","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.DEFAULT_BINARY_WRITE_CAPABILITIES","Field","* Default set of {@link StreamWriteCapability}ies for typical binary formats,
     * to use either as-is, or as a base with possible differences.
     *
     * @since 2.12","protected final static JacksonFeatureSet<StreamWriteCapability> DEFAULT_BINARY_WRITE_CAPABILITIES = DEFAULT_WRITE_CAPABILITIES.with(StreamWriteCapability.CAN_WRITE_BINARY_NATIVELY);","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._cfgPrettyPrinter","Field","* Object that handles pretty-printing (usually additional
     * white space to make results more human-readable) during
     * output. If null, no pretty-printing is done.","protected PrettyPrinter _cfgPrettyPrinter;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.setCodec(ObjectCodec)","Abstract Method","* Method that can be called to set or reset the object to
     * use for writing Java objects as JsonContent
     * (using method {@link #writeObject}).
     *
     * @param oc Codec to assign, if any; {@code null} if none
     *
     * @return This generator, to allow call chaining","public abstract JsonGenerator setCodec(ObjectCodec oc);","JsonGenerator","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.setCodec(ObjectCodec).oc","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.setCodec(ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.getCodec()","Abstract Method","* Method for accessing the object used for writing Java
     * object as JSON content
     * (using method {@link #writeObject}).
     *
     * @return Codec assigned to this generator, if any; {@code null} if none","public abstract ObjectCodec getCodec();","ObjectCodec","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.streamWriteConstraints()","Method","* Get the constraints to apply when performing streaming writes.
     *
     * @return StreamWriteConstraints used by this generator
     *
     * @since 2.16","public StreamWriteConstraints streamWriteConstraints() {
    return StreamWriteConstraints.defaults();
}","StreamWriteConstraints","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.version()","Abstract Method","* Accessor for finding out version of the bundle that provided this generator instance.
     *
     * @return Version of this generator (derived from version declared for
     *   {@code jackson-core} jar that contains the class","@Override
public abstract Version version();","Version","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.getOutputContext()","Abstract Method","* Accessor for context object that provides information about low-level
     * logical position withing output token stream.
     *
     * @return Stream output context ({@link JsonStreamContext}) associated with this generator","public abstract JsonStreamContext getOutputContext();","JsonStreamContext","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.getOutputTarget()","Method","* Method that can be used to get access to object that is used
     * as target for generated output; this is usually either
     * {@link OutputStream} or {@link Writer}, depending on what
     * generator was constructed with.
     * Note that returned value may be null in some cases; including
     * case where implementation does not want to exposed raw
     * source to caller.
     * In cases where output has been decorated, object returned here
     * is the decorated version; this allows some level of interaction
     * between users of generator and decorator object.
     *<p>
     * In general use of this accessor should be considered as
     * ""last effort"", i.e. only used if no other mechanism is applicable.
     *
     * @return Output target this generator was configured with","public Object getOutputTarget() {
    return null;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.currentValue()","Method","* Helper method, usually equivalent to:
     *<code>
     *   getOutputContext().getCurrentValue();
     *</code>
     *<p>
     * Note that ""current value"" is NOT populated (or used) by Streaming parser or generators;
     * it is only used by higher-level data-binding functionality.
     * The reason it is included here is that it can be stored and accessed hierarchically,
     * and gets passed through data-binding.
     *
     * @return ""Current value"" associated with the current context (state) of this generator
     *
     * @since 2.13 (added as replacement for older {@link #getCurrentValue()}","public Object currentValue() {
    JsonStreamContext ctxt = getOutputContext();
    return (ctxt == null) ? null : ctxt.getCurrentValue();
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.assignCurrentValue(Object)","Method","* Helper method, usually equivalent to:
     *<code>
     *   getOutputContext().setCurrentValue(v);
     *</code>
     *
     * @param v Current value to assign for the current context of this generator
     *
     * @since 2.13 (added as replacement for older {@link #setCurrentValue}","public void assignCurrentValue(Object v) {
    JsonStreamContext ctxt = getOutputContext();
    if (ctxt != null) {
        ctxt.setCurrentValue(v);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.assignCurrentValue(Object).v","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.assignCurrentValue(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.getCurrentValue()","Method","* Alias for {@link #currentValue()}, to be deprecated in later
     * Jackson 2.x versions (and removed from Jackson 3.0).
     *
     * @return Location of the last processed input unit (byte or character)
     *
     * @deprecated Since 2.17 use {@link #currentValue()} instead","@Deprecated
public Object getCurrentValue() {
    return currentValue();
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.setCurrentValue(Object)","Method","* Alias for {@link #assignCurrentValue}, to be deprecated in later
     * Jackson 2.x versions (and removed from Jackson 3.0).
     *
     * @param v Current value to assign for the current context of this generator
     *
     * @deprecated Since 2.17 use {@link #currentValue()} instead","@Deprecated
public void setCurrentValue(Object v) {
    assignCurrentValue(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.setCurrentValue(Object).v","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.setCurrentValue(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.enable(Feature)","Abstract Method","* Method for enabling specified generator feature:
     * check {@link Feature} for list of available features.
     *
     * @param f Feature to enable
     *
     * @return This generator, to allow call chaining","public abstract JsonGenerator enable(Feature f);","JsonGenerator","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.enable(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.enable(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.disable(Feature)","Abstract Method","* Method for disabling specified feature
     * (check {@link Feature} for list of features)
     *
     * @param f Feature to disable
     *
     * @return This generator, to allow call chaining","public abstract JsonGenerator disable(Feature f);","JsonGenerator","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.disable(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.disable(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.configure(Feature,boolean)","Method","* Method for enabling or disabling specified feature:
     * check {@link Feature} for list of available features.
     *
     * @param f Feature to enable or disable
     * @param state Whether to enable ({@code true}) or disable ({@code false}) feature
     *
     * @return This generator, to allow call chaining","public final JsonGenerator configure(Feature f, boolean state) {
    if (state)
        enable(f);
    else
        disable(f);
    return this;
}","JsonGenerator","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.configure(Feature,boolean).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.configure(Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.configure(Feature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.configure(Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.isEnabled(Feature)","Abstract Method","* Method for checking whether given feature is enabled.
     * Check {@link Feature} for list of available features.
     *
     * @param f Feature to check
     *
     * @return True if specified feature is enabled; false if not","public abstract boolean isEnabled(Feature f);","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.isEnabled(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.isEnabled(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.isEnabled(StreamWriteFeature)","Method","* Method for checking whether given feature is enabled.
     * Check {@link Feature} for list of available features.
     *
     * @param f Feature to check
     *
     * @return True if specified feature is enabled; false if not
     *
     * @since 2.10","public boolean isEnabled(StreamWriteFeature f) {
    return isEnabled(f.mappedFeature());
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.isEnabled(StreamWriteFeature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.isEnabled(StreamWriteFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.getFeatureMask()","Abstract Method","* Bulk access method for getting state of all standard (non-dataformat-specific)
     * {@link JsonGenerator.Feature}s.
     *
     * @return Bit mask that defines current states of all standard {@link JsonGenerator.Feature}s.
     *
     * @since 2.3","public abstract int getFeatureMask();","int","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.setFeatureMask(int)","Abstract Method","* Bulk set method for (re)setting states of all standard {@link Feature}s
     *
     * @since 2.3
     *
     * @param values Bitmask that defines which {@link Feature}s are enabled
     *    and which disabled
     *
     * @return This generator, to allow call chaining
     *
     * @deprecated Since 2.7, use {@link #overrideStdFeatures(int, int)} instead -- remove from 2.9","@Deprecated
public abstract JsonGenerator setFeatureMask(int values);","JsonGenerator","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.setFeatureMask(int).values","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.setFeatureMask(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.overrideStdFeatures(int,int)","Method","* Bulk set method for (re)setting states of features specified by <code>mask</code>.
     * Functionally equivalent to
     *<code>
     *    int oldState = getFeatureMask();
     *    int newState = (oldState &amp; ~mask) | (values &amp; mask);
     *    setFeatureMask(newState);
     *</code>
     * but preferred as this lets caller more efficiently specify actual changes made.
     *
     * @param values Bit mask of set/clear state for features to change
     * @param mask Bit mask of features to change
     *
     * @return This generator, to allow call chaining
     *
     * @since 2.6","public JsonGenerator overrideStdFeatures(int values, int mask) {
    int oldState = getFeatureMask();
    int newState = (oldState & ~mask) | (values & mask);
    return setFeatureMask(newState);
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.overrideStdFeatures(int,int).values","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.overrideStdFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.overrideStdFeatures(int,int).mask","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.overrideStdFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.getFormatFeatures()","Method","* Bulk access method for getting state of all {@link FormatFeature}s, format-specific
     * on/off configuration settings.
     *
     * @return Bit mask that defines current states of all standard {@link FormatFeature}s.
     *
     * @since 2.6","public int getFormatFeatures() {
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.overrideFormatFeatures(int,int)","Method","* Bulk set method for (re)setting states of {@link FormatFeature}s,
     * by specifying values (set / clear) along with a mask, to determine
     * which features to change, if any.
     *<p>
     * Default implementation will simply throw an exception to indicate that
     * the generator implementation does not support any {@link FormatFeature}s.
     *
     * @param values Bit mask of set/clear state for features to change
     * @param mask Bit mask of features to change
     *
     * @return This generator, to allow call chaining
     *
     * @since 2.6","public JsonGenerator overrideFormatFeatures(int values, int mask) {
    // 08-Oct-2018, tatu: For 2.10 we actually do get `JsonWriteFeature`s, although they
    //    are (for 2.x only, not for 3.x) mapper to legacy settings. So do not freak out:
    //        throw new IllegalArgumentException(""No FormatFeatures defined for generator of type ""+getClass().getName());
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.overrideFormatFeatures(int,int).values","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.overrideFormatFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.overrideFormatFeatures(int,int).mask","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.overrideFormatFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.setSchema(FormatSchema)","Method","* Method to call to make this generator use specified schema.
     * Method must be called before generating any content, right after instance
     * has been created.
     * Note that not all generators support schemas; and those that do usually only
     * accept specific types of schemas: ones defined for data format this generator
     * produces.
     *<p>
     * If generator does not support specified schema, {@link UnsupportedOperationException}
     * is thrown.
     *
     * @param schema Schema to use
     *
     * @throws UnsupportedOperationException if generator does not support schema","public void setSchema(FormatSchema schema) {
    throw new UnsupportedOperationException(String.format(""Generator of type %s does not support schema of type '%s'"", getClass().getName(), schema.getSchemaType()));
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.setSchema(FormatSchema).schema","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.setSchema(FormatSchema)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.getSchema()","Method","* Method for accessing Schema that this generator uses, if any; {@code null} if none.
     * Default implementation returns null.
     *
     * @return Schema in use by this generator, if any; {@code null} if none","public FormatSchema getSchema() {
    return null;
}","FormatSchema","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.setPrettyPrinter(PrettyPrinter)","Method","* Method for setting a custom pretty printer, which is usually
     * used to add indentation for improved human readability.
     * By default, generator does not do pretty printing.
     *<p>
     * To use the default pretty printer that comes with core
     * Jackson distribution, call {@link #useDefaultPrettyPrinter}
     * instead.
     *
     * @param pp {@code PrettyPrinter} to assign, if any; {@code null} if none
     *
     * @return This generator, to allow call chaining","public JsonGenerator setPrettyPrinter(PrettyPrinter pp) {
    _cfgPrettyPrinter = pp;
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.setPrettyPrinter(PrettyPrinter).pp","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.setPrettyPrinter(PrettyPrinter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.getPrettyPrinter()","Method","* Accessor for checking whether this generator has a configured
     * {@link PrettyPrinter}; returns it if so, null if none configured.
     *
     * @return {@link PrettyPrinter} configured for this generator, if any; {@code null} if none","public PrettyPrinter getPrettyPrinter() {
    return _cfgPrettyPrinter;
}","PrettyPrinter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.useDefaultPrettyPrinter()","Abstract Method","* Convenience method for enabling pretty-printing using
     * the default pretty printer
     * ({@link com.fasterxml.jackson.core.util.DefaultPrettyPrinter}).
     *
     * @return This generator, to allow call chaining","public abstract JsonGenerator useDefaultPrettyPrinter();","JsonGenerator","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.setHighestNonEscapedChar(int)","Method","* Method that can be called to request that generator escapes
     * all character codes above specified code point (if positive value);
     * or, to not escape any characters except for ones that must be
     * escaped for the data format (if -1).
     * To force escaping of all non-ASCII characters, for example,
     * this method would be called with value of 127.
     *<p>
     * Note that generators are NOT required to support setting of value
     * higher than 127, because there are other ways to affect quoting
     * (or lack thereof) of character codes between 0 and 127.
     * Not all generators support concept of escaping, either; if so,
     * calling this method will have no effect.
     *<p>
     * Default implementation does nothing; sub-classes need to redefine
     * it according to rules of supported data format.
     *
     * @param charCode Either -1 to indicate that no additional escaping
     *   is to be done; or highest code point not to escape (meaning higher
     *   ones will be), if positive value.
     *
     * @return This generator, to allow call chaining","public JsonGenerator setHighestNonEscapedChar(int charCode) {
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.setHighestNonEscapedChar(int).charCode","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.setHighestNonEscapedChar(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.getHighestEscapedChar()","Method","* Accessor method for testing what is the highest unescaped character
     * configured for this generator. This may be either positive value
     * (when escaping configuration has been set and is in effect), or
     * 0 to indicate that no additional escaping is in effect.
     * Some generators may not support additional escaping: for example,
     * generators for binary formats that do not use escaping should
     * simply return 0.
     *
     * @return Currently active limitation for highest non-escaped character,
     *   if defined; or 0 to indicate no additional escaping is performed.","public int getHighestEscapedChar() {
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.getCharacterEscapes()","Method","* Method for accessing custom escapes factory uses for {@link JsonGenerator}s
     * it creates.
     *
     * @return {@link CharacterEscapes} configured for this generator, if any; {@code null} if none","public CharacterEscapes getCharacterEscapes() {
    return null;
}","CharacterEscapes","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.setCharacterEscapes(CharacterEscapes)","Method","* Method for defining custom escapes factory uses for {@link JsonGenerator}s
     * it creates.
     *<p>
     * Default implementation does nothing and simply returns this instance.
     *
     * @param esc {@link CharacterEscapes} to configure this generator to use, if any; {@code null} if none
     *
     * @return This generator, to allow call chaining","public JsonGenerator setCharacterEscapes(CharacterEscapes esc) {
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.setCharacterEscapes(CharacterEscapes).esc","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.setCharacterEscapes(CharacterEscapes)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.setRootValueSeparator(SerializableString)","Method","* Method that allows overriding String used for separating root-level
     * JSON values (default is single space character)
     *<p>
     * Default implementation throws {@link UnsupportedOperationException}.
     *
     * @param sep Separator to use, if any; null means that no separator is
     *   automatically added
     *
     * @return This generator, to allow call chaining","public JsonGenerator setRootValueSeparator(SerializableString sep) {
    throw new UnsupportedOperationException();
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.setRootValueSeparator(SerializableString).sep","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.setRootValueSeparator(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.getOutputBuffered()","Method","* Method for verifying amount of content that is buffered by generator
     * but not yet flushed to the underlying target (stream, writer),
     * in units (byte, char) that the generator implementation uses for buffering;
     * or -1 if this information is not available.
     * Unit used is often the same as the unit of underlying target (that is,
     * `byte` for {@link java.io.OutputStream}, `char` for {@link java.io.Writer}),
     * but may differ if buffering is done before encoding.
     * Default JSON-backed implementations do use matching units.
     *<p>
     * Note: non-JSON implementations will be retrofitted for 2.6 and beyond;
     * please report if you see -1 (missing override)
     *
     * @return Amount of content buffered in internal units, if amount known and
     *    accessible; -1 if not accessible.
     *
     * @since 2.6","public int getOutputBuffered() {
    return -1;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.canUseSchema(FormatSchema)","Method","* Method that can be used to verify that given schema can be used with
     * this generator (using {@link #setSchema}).
     *
     * @param schema Schema to check
     *
     * @return True if this generator can use given schema; false if not","public boolean canUseSchema(FormatSchema schema) {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.canUseSchema(FormatSchema).schema","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.canUseSchema(FormatSchema)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.canWriteObjectId()","Method","* Introspection method that may be called to see if the underlying
     * data format supports some kind of Object Ids natively (many do not;
     * for example, JSON doesn't).
     * This method <b>must</b> be called prior to calling
     * {@link #writeObjectId} or {@link #writeObjectRef}.
     *<p>
     * Default implementation returns false; overridden by data formats
     * that do support native Object Ids. Caller is expected to either
     * use a non-native notation (explicit property or such), or fail,
     * in case it cannot use native object ids.
     *
     * @return {@code True} if this generator is capable of writing ""native"" Object Ids
     *   (which is typically determined by capabilities of the underlying format),
     *   {@code false} if not
     *
     * @since 2.3","public boolean canWriteObjectId() {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.canWriteTypeId()","Method","* Introspection method that may be called to see if the underlying
     * data format supports some kind of Type Ids natively (many do not;
     * for example, JSON doesn't).
     * This method <b>must</b> be called prior to calling
     * {@link #writeTypeId}.
     *<p>
     * Default implementation returns false; overridden by data formats
     * that do support native Type Ids. Caller is expected to either
     * use a non-native notation (explicit property or such), or fail,
     * in case it cannot use native type ids.
     *
     * @return {@code True} if this generator is capable of writing ""native"" Type Ids
     *   (which is typically determined by capabilities of the underlying format),
     *   {@code false} if not
     *
     * @since 2.3","public boolean canWriteTypeId() {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.canWriteBinaryNatively()","Method","* Introspection method that may be called to see if the underlying
     * data format supports ""native"" binary data; that is, an efficient
     * output of binary content without encoding.
     *<p>
     * Default implementation returns false; overridden by data formats
     * that do support native binary content.
     *
     * @return {@code True} if this generator is capable of writing ""raw"" Binary
     *   Content
     *   (this is typically determined by capabilities of the underlying format);
     *   {@code false} if not
     *
     * @since 2.3","public boolean canWriteBinaryNatively() {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.canOmitFields()","Method","* Introspection method to call to check whether it is ok to omit
     * writing of Object fields or not. Most formats do allow omission,
     * but certain positional formats (such as CSV) require output of
     * placeholders, even if no real values are to be emitted.
     *
     * @return {@code True} if this generator is allowed to only write values
     *   of some Object fields and omit the rest; {@code false} if not
     *
     * @since 2.3","public boolean canOmitFields() {
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.canWriteFormattedNumbers()","Method","* Introspection method to call to check whether it is possible
     * to write numbers using {@link #writeNumber(java.lang.String)}
     * using possible custom format, or not. Typically textual formats
     * allow this (and JSON specifically does), whereas binary formats
     * do not allow this (except by writing them as Strings).
     * Usual reason for calling this method is to check whether custom
     * formatting of numbers may be applied by higher-level code (databinding)
     * or not.
     *
     * @return {@code True} if this generator is capable of writing ""formatted""
     *   numbers (and if so, need to be passed using
     *   {@link #writeNumber(String)}, that is, passed as {@code String});
     *   {@code false} if not
     *
     * @since 2.8","public boolean canWriteFormattedNumbers() {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.getWriteCapabilities()","Method","* Accessor for getting metadata on capabilities of this generator, based on
     * underlying data format being read (directly or indirectly).
     *
     * @return Set of write capabilities for content written using this generator
     *
     * @since 2.12","public JacksonFeatureSet<StreamWriteCapability> getWriteCapabilities() {
    return DEFAULT_WRITE_CAPABILITIES;
}","JacksonFeatureSet","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeStartArray()","Abstract Method","* Method for writing starting marker of a Array value
     * (for JSON this is character '['; plus possible white space decoration
     * if pretty-printing is enabled).
     *<p>
     * Array values can be written in any context where values
     * are allowed: meaning everywhere except for when
     * a field name is expected.
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeStartArray() throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeStartArray(int)","Method","* Method for writing start marker of an Array value, similar
     * to {@link #writeStartArray()},
     * but also specifying how many
     * elements will be written for the array before calling
     * {@link #writeEndArray()}.
     *<p>
     * Default implementation simply calls {@link #writeStartArray()}.
     *
     * @param size Number of elements this array will have: actual
     *   number of values written (before matching call to
     *   {@link #writeEndArray()} MUST match; generator MAY verify
     *   this is the case (and SHOULD if format itself encodes length)
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     *
     * @since 2.4
     *
     * @deprecated Since 2.12 Use {@link #writeStartArray(Object, int)} instead","@Deprecated
public void writeStartArray(int size) throws IOException {
    writeStartArray();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeStartArray(int).size","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeStartArray(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeStartArray(Object)","Method","* Method for writing start marker of an Array value, similar
     * to {@link #writeStartArray()},
     * but also specifying the ""current value""
     * to assign to the new Array context being created.
     *
     * @param forValue ""Current value"" to assign for the Array context being created
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     *
     * @since 2.10","public void writeStartArray(Object forValue) throws IOException {
    writeStartArray();
    setCurrentValue(forValue);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeStartArray(Object).forValue","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeStartArray(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeStartArray(Object,int)","Method","* Method for writing start marker of an Array value, similar
     * to {@link #writeStartArray()}, but also specifying the ""current value""
     * to assign to the new Array context being created
     * as well as how many elements will be written for the array before calling
     * {@link #writeEndArray()}.
     *
     * @param forValue ""Current value"" to assign for the Array context being created
     * @param size Number of elements this Array will have: actual
     *   number of values written (before matching call to
     *   {@link #writeEndArray()} MUST match; generator MAY verify
     *   this is the case (and SHOULD if format itself encodes length)
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     *
     * @since 2.10","public void writeStartArray(Object forValue, int size) throws IOException {
    writeStartArray(size);
    setCurrentValue(forValue);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeStartArray(Object,int).forValue","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeStartArray(Object,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeStartArray(Object,int).size","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeStartArray(Object,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeEndArray()","Abstract Method","* Method for writing closing marker of a JSON Array value
     * (character ']'; plus possible white space decoration
     * if pretty-printing is enabled).
     *<p>
     * Marker can be written if the innermost structured type
     * is Array.
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeEndArray() throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeStartObject()","Abstract Method","* Method for writing starting marker of an Object value
     * (character '{'; plus possible white space decoration
     * if pretty-printing is enabled).
     *<p>
     * Object values can be written in any context where values
     * are allowed: meaning everywhere except for when
     * a field name is expected.
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeStartObject() throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeStartObject(Object)","Method","* Method for writing starting marker of an Object value
     * to represent the given Java Object value.
     * Argument is offered as metadata, but more
     * importantly it should be assigned as the ""current value""
     * for the Object content that gets constructed and initialized.
     *<p>
     * Object values can be written in any context where values
     * are allowed: meaning everywhere except for when
     * a field name is expected.
     *
     * @param forValue ""Current value"" to assign for the Object context being created
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     *
     * @since 2.8","public void writeStartObject(Object forValue) throws IOException {
    writeStartObject();
    setCurrentValue(forValue);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeStartObject(Object).forValue","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeStartObject(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeStartObject(Object,int)","Method","* Method for writing starting marker of an Object value
     * to represent the given Java Object value.
     * Argument is offered as metadata, but more
     * importantly it should be assigned as the ""current value""
     * for the Object content that gets constructed and initialized.
     * In addition, caller knows number of key/value pairs (""properties"")
     * that will get written for the Object value: this is relevant for
     * some format backends (but not, as an example, for JSON).
     *<p>
     * Object values can be written in any context where values
     * are allowed: meaning everywhere except for when
     * a field name is expected.
     *
     * @param forValue ""Current value"" to assign for the Object context being created
     * @param size Number of key/value pairs this Object will have: actual
     *   number of entries written (before matching call to
     *   {@link #writeEndObject()} MUST match; generator MAY verify
     *   this is the case (and SHOULD if format itself encodes length)
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     *
     * @since 2.10","public void writeStartObject(Object forValue, int size) throws IOException {
    writeStartObject(forValue);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeStartObject(Object,int).forValue","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeStartObject(Object,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeStartObject(Object,int).size","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeStartObject(Object,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeEndObject()","Abstract Method","* Method for writing closing marker of an Object value
     * (character '}'; plus possible white space decoration
     * if pretty-printing is enabled).
     *<p>
     * Marker can be written if the innermost structured type
     * is Object, and the last written event was either a
     * complete value, or START-OBJECT marker (see JSON specification
     * for more details).
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeEndObject() throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeFieldName(String)","Abstract Method","* Method for writing a field name (JSON String surrounded by
     * double quotes: syntactically identical to a JSON String value),
     * possibly decorated by white space if pretty-printing is enabled.
     *<p>
     * Field names can only be written in Object context (check out
     * JSON specification for details), when field name is expected
     * (field names alternate with values).
     *
     * @param name Field name to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeFieldName(String name) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeFieldName(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeFieldName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeFieldName(SerializableString)","Abstract Method","* Method similar to {@link #writeFieldName(String)}, main difference
     * being that it may perform better as some of processing (such as
     * quoting of certain characters, or encoding into external encoding
     * if supported by generator) can be done just once and reused for
     * later calls.
     *<p>
     * Default implementation simple uses unprocessed name container in
     * serialized String; implementations are strongly encouraged to make
     * use of more efficient methods argument object has.
     *
     * @param name Field name to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeFieldName(SerializableString name) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeFieldName(SerializableString).name","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeFieldName(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeFieldId(long)","Method","* Alternative to {@link #writeFieldName(String)} that may be used
     * in cases where property key is of numeric type; either where
     * underlying format supports such notion (some binary formats do,
     * unlike JSON), or for convenient conversion into String presentation.
     * Default implementation will simply convert id into <code>String</code>
     * and call {@link #writeFieldName(String)}.
     *
     * @param id Field id to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     *
     * @since 2.8","public void writeFieldId(long id) throws IOException {
    writeFieldName(Long.toString(id));
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeFieldId(long).id","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeFieldId(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeArray(int[],int,int)","Method","* Value write method that can be called to write a single
     * array (sequence of {@link JsonToken#START_ARRAY}, zero or
     * more {@link JsonToken#VALUE_NUMBER_INT}, {@link JsonToken#END_ARRAY})
     *
     * @param array Array that contains values to write
     * @param offset Offset of the first element to write, within array
     * @param length Number of elements in array to write, from `offset` to `offset + len - 1`
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     *
     * @since 2.8","public void writeArray(int[] array, int offset, int length) throws IOException {
    if (array == null) {
        throw new IllegalArgumentException(""null array"");
    }
    _verifyOffsets(array.length, offset, length);
    writeStartArray(array, length);
    for (int i = offset, end = offset + length; i < end; ++i) {
        writeNumber(array[i]);
    }
    writeEndArray();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeArray(int[],int,int).array","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeArray(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeArray(int[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeArray(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeArray(int[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.JsonGenerator.writeArray(int[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeArray(long[],int,int)","Method","* Value write method that can be called to write a single
     * array (sequence of {@link JsonToken#START_ARRAY}, zero or
     * more {@link JsonToken#VALUE_NUMBER_INT}, {@link JsonToken#END_ARRAY})
     *
     * @param array Array that contains values to write
     * @param offset Offset of the first element to write, within array
     * @param length Number of elements in array to write, from `offset` to `offset + len - 1`
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     *
     * @since 2.8","public void writeArray(long[] array, int offset, int length) throws IOException {
    if (array == null) {
        throw new IllegalArgumentException(""null array"");
    }
    _verifyOffsets(array.length, offset, length);
    writeStartArray(array, length);
    for (int i = offset, end = offset + length; i < end; ++i) {
        writeNumber(array[i]);
    }
    writeEndArray();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeArray(long[],int,int).array","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeArray(long[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeArray(long[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeArray(long[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeArray(long[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.JsonGenerator.writeArray(long[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeArray(double[],int,int)","Method","* Value write method that can be called to write a single
     * array (sequence of {@link JsonToken#START_ARRAY}, zero or
     * more {@link JsonToken#VALUE_NUMBER_FLOAT}, {@link JsonToken#END_ARRAY})
     *
     * @param array Array that contains values to write
     * @param offset Offset of the first element to write, within array
     * @param length Number of elements in array to write, from `offset` to `offset + len - 1`
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     *
     * @since 2.8","public void writeArray(double[] array, int offset, int length) throws IOException {
    if (array == null) {
        throw new IllegalArgumentException(""null array"");
    }
    _verifyOffsets(array.length, offset, length);
    writeStartArray(array, length);
    for (int i = offset, end = offset + length; i < end; ++i) {
        writeNumber(array[i]);
    }
    writeEndArray();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeArray(double[],int,int).array","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeArray(double[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeArray(double[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeArray(double[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeArray(double[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.JsonGenerator.writeArray(double[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeArray(String[],int,int)","Method","* Value write method that can be called to write a single
     * array (sequence of {@link JsonToken#START_ARRAY}, zero or
     * more {@link JsonToken#VALUE_STRING}, {@link JsonToken#END_ARRAY})
     *
     * @param array Array that contains values to write
     * @param offset Offset of the first element to write, within array
     * @param length Number of elements in array to write, from `offset` to `offset + len - 1`
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     *
     * @since 2.11","public void writeArray(String[] array, int offset, int length) throws IOException {
    if (array == null) {
        throw new IllegalArgumentException(""null array"");
    }
    _verifyOffsets(array.length, offset, length);
    writeStartArray(array, length);
    for (int i = offset, end = offset + length; i < end; ++i) {
        writeString(array[i]);
    }
    writeEndArray();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeArray(String[],int,int).array","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeArray(String[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeArray(String[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeArray(String[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeArray(String[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.JsonGenerator.writeArray(String[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeString(String)","Abstract Method","* Method for outputting a String value. Depending on context
     * this means either array element, (object) field value or
     * a stand alone String; but in all cases, String will be
     * surrounded in double quotes, and contents will be properly
     * escaped as required by JSON specification.
     *
     * @param text Text value to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeString(String text) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeString(String).text","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeString(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeString(Reader,int)","Method","* Method for outputting a String value. Depending on context
     * this means either array element, (object) field value or
     * a stand alone String; but in all cases, String will be
     * surrounded in double quotes, and contents will be properly
     * escaped as required by JSON specification.
     * If {@code len} is &lt; 0, then write all contents of the reader.
     * Otherwise, write only len characters.
     *<p>
     * Note: actual length of content available may exceed {@code len} but
     * cannot be less than it: if not enough content available, a
     * {@link JsonGenerationException} will be thrown.
     *
     * @param reader Reader to use for reading Text value to write
     * @param len Maximum Length of Text value to read (in {@code char}s, non-negative)
     *    if known; {@code -1} to indicate ""read and write it all""
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer; or if length ({@code len}) is specified but
     *    {@code reader} does not provide enough content
     *
     * @since 2.9","public void writeString(Reader reader, int len) throws IOException {
    // Implemented as ""unsupported"" for backwards compatibility
    _reportUnsupportedOperation();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeString(Reader,int).reader","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeString(Reader,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeString(Reader,int).len","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeString(Reader,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeString(char[],int,int)","Abstract Method","* Method for outputting a String value. Depending on context
     * this means either array element, (object) field value or
     * a stand alone String; but in all cases, String will be
     * surrounded in double quotes, and contents will be properly
     * escaped as required by JSON specification.
     *
     * @param buffer Buffer that contains String value to write
     * @param offset Offset in {@code buffer} of the first character of String value to write
     * @param len Length of the String value (in characters) to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeString(char[] buffer, int offset, int len) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeString(char[],int,int).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeString(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeString(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.JsonGenerator.writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeString(SerializableString)","Abstract Method","* Method similar to {@link #writeString(String)}, but that takes
     * {@link SerializableString} which can make this potentially
     * more efficient to call as generator may be able to reuse
     * quoted and/or encoded representation.
     *<p>
     * Default implementation just calls {@link #writeString(String)};
     * sub-classes should override it with more efficient implementation
     * if possible.
     *
     * @param text Pre-encoded String value to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeString(SerializableString text) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeString(SerializableString).text","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeString(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRawUTF8String(byte[],int,int)","Abstract Method","* Method similar to {@link #writeString(String)} but that takes as
     * its input a UTF-8 encoded String that is to be output as-is, without additional
     * escaping (type of which depends on data format; backslashes for JSON).
     * However, quoting that data format requires (like double-quotes for JSON) will be added
     * around the value if and as necessary.
     *<p>
     * Note that some backends may choose not to support this method: for
     * example, if underlying destination is a {@link java.io.Writer}
     * using this method would require UTF-8 decoding.
     * If so, implementation may instead choose to throw a
     * {@link UnsupportedOperationException} due to ineffectiveness
     * of having to decode input.
     *
     * @param buffer Buffer that contains String value to write
     * @param offset Offset in {@code buffer} of the first byte of String value to write
     * @param len Length of the String value (in characters) to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeRawUTF8String(byte[] buffer, int offset, int len) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRawUTF8String(byte[],int,int).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeRawUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRawUTF8String(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeRawUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRawUTF8String(byte[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.JsonGenerator.writeRawUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeUTF8String(byte[],int,int)","Abstract Method","* Method similar to {@link #writeString(String)} but that takes as its input
     * a UTF-8 encoded String which has <b>not</b> been escaped using whatever
     * escaping scheme data format requires (for JSON that is backslash-escaping
     * for control characters and double-quotes; for other formats something else).
     * This means that textual JSON backends need to check if value needs
     * JSON escaping, but otherwise can just be copied as is to output.
     * Also, quoting that data format requires (like double-quotes for JSON) will be added
     * around the value if and as necessary.
     *<p>
     * Note that some backends may choose not to support this method: for
     * example, if underlying destination is a {@link java.io.Writer}
     * using this method would require UTF-8 decoding.
     * In this case
     * generator implementation may instead choose to throw a
     * {@link UnsupportedOperationException} due to ineffectiveness
     * of having to decode input.
     *
     * @param buffer Buffer that contains String value to write
     * @param offset Offset in {@code buffer} of the first byte of String value to write
     * @param len Length of the String value (in characters) to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeUTF8String(byte[] buffer, int offset, int len) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeUTF8String(byte[],int,int).buffer","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeUTF8String(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeUTF8String(byte[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.JsonGenerator.writeUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRaw(String)","Abstract Method","* Method that will force generator to copy
     * input text verbatim with <b>no</b> modifications (including
     * that no escaping is done and no separators are added even
     * if context [array, object] would otherwise require such).
     * If such separators are desired, use
     * {@link #writeRawValue(String)} instead.
     *<p>
     * Note that not all generator implementations necessarily support
     * such by-pass methods: those that do not will throw
     * {@link UnsupportedOperationException}.
     *
     * @param text Textual contents to include as-is in output.
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeRaw(String text) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRaw(String).text","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeRaw(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRaw(String,int,int)","Abstract Method","* Method that will force generator to copy
     * input text verbatim with <b>no</b> modifications (including
     * that no escaping is done and no separators are added even
     * if context [array, object] would otherwise require such).
     * If such separators are desired, use
     * {@link #writeRawValue(String)} instead.
     *<p>
     * Note that not all generator implementations necessarily support
     * such by-pass methods: those that do not will throw
     * {@link UnsupportedOperationException}.
     *
     * @param text String that has contents to include as-is in output
     * @param offset Offset within {@code text} of the first character to output
     * @param len Length of content (from {@code text}, starting at offset {@code offset}) to output
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeRaw(String text, int offset, int len) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRaw(String,int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeRaw(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRaw(String,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeRaw(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRaw(String,int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.JsonGenerator.writeRaw(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRaw(char[],int,int)","Abstract Method","* Method that will force generator to copy
     * input text verbatim with <b>no</b> modifications (including
     * that no escaping is done and no separators are added even
     * if context [array, object] would otherwise require such).
     * If such separators are desired, use
     * {@link #writeRawValue(String)} instead.
     *<p>
     * Note that not all generator implementations necessarily support
     * such by-pass methods: those that do not will throw
     * {@link UnsupportedOperationException}.
     *
     * @param text Buffer that has contents to include as-is in output
     * @param offset Offset within {@code text} of the first character to output
     * @param len Length of content (from {@code text}, starting at offset {@code offset}) to output
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeRaw(char[] text, int offset, int len) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRaw(char[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRaw(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRaw(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.JsonGenerator.writeRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRaw(char)","Abstract Method","* Method that will force generator to copy
     * input text verbatim with <b>no</b> modifications (including
     * that no escaping is done and no separators are added even
     * if context [array, object] would otherwise require such).
     * If such separators are desired, use
     * {@link #writeRawValue(String)} instead.
     *<p>
     * Note that not all generator implementations necessarily support
     * such by-pass methods: those that do not will throw
     * {@link UnsupportedOperationException}.
     *
     * @param c Character to included in output
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeRaw(char c) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRaw(char).c","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeRaw(char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRaw(SerializableString)","Method","public abstract void writeRaw(SerializableString raw) throws IOException;","public void writeRaw(SerializableString raw) throws IOException {
    writeRaw(raw.getValue());
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRaw(SerializableString).raw","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeRaw(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRawValue(String)","Abstract Method","* Method that will force generator to copy
     * input text verbatim without any modifications, but assuming
     * it must constitute a single legal JSON value (number, string,
     * boolean, null, Array or List). Assuming this, proper separators
     * are added if and as needed (comma or colon), and generator
     * state updated to reflect this.
     *
     * @param text Textual contents to included in output
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeRawValue(String text) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRawValue(String).text","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeRawValue(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRawValue(String,int,int)","Abstract Method","No Comment","public abstract void writeRawValue(String text, int offset, int len) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRawValue(String,int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeRawValue(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRawValue(String,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeRawValue(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRawValue(String,int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.JsonGenerator.writeRawValue(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRawValue(char[],int,int)","Abstract Method","No Comment","public abstract void writeRawValue(char[] text, int offset, int len) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRawValue(char[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeRawValue(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRawValue(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeRawValue(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRawValue(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.JsonGenerator.writeRawValue(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRawValue(SerializableString)","Method","* Method similar to {@link #writeRawValue(String)}, but potentially more
     * efficient as it may be able to use pre-encoded content (similar to
     * {@link #writeRaw(SerializableString)}.
     *
     * @param raw Pre-encoded textual contents to included in output
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     *
     * @since 2.5","public void writeRawValue(SerializableString raw) throws IOException {
    writeRawValue(raw.getValue());
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeRawValue(SerializableString).raw","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeRawValue(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinary(Base64Variant,byte[],int,int)","Abstract Method","* Method that will output given chunk of binary data as base64
     * encoded, as a complete String value (surrounded by double quotes).
     * This method defaults
     *<p>
     * Note: because JSON Strings cannot contain unescaped linefeeds,
     * if linefeeds are included (as per last argument), they must be
     * escaped. This adds overhead for decoding without improving
     * readability.
     * Alternatively if linefeeds are not included,
     * resulting String value may violate the requirement of base64
     * RFC which mandates line-length of 76 characters and use of
     * linefeeds. However, all {@link JsonParser} implementations
     * are required to accept such ""long line base64""; as do
     * typical production-level base64 decoders.
     *
     * @param bv Base64 variant to use: defines details such as
     *   whether padding is used (and if so, using which character);
     *   what is the maximum line length before adding linefeed,
     *   and also the underlying alphabet to use.
     * @param data Buffer that contains binary data to write
     * @param offset Offset in {@code data} of the first byte of data to write
     * @param len Length of data to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeBinary(Base64Variant bv, byte[] data, int offset, int len) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinary(Base64Variant,byte[],int,int).bv","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinary(Base64Variant,byte[],int,int).data","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinary(Base64Variant,byte[],int,int).offset","Parameter_3","Belong to com.fasterxml.jackson.core.JsonGenerator.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinary(Base64Variant,byte[],int,int).len","Parameter_4","Belong to com.fasterxml.jackson.core.JsonGenerator.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[],int,int)","Method","* Similar to {@link #writeBinary(Base64Variant,byte[],int,int)},
     * but default to using the Jackson default Base64 variant
     * (which is {@link Base64Variants#MIME_NO_LINEFEEDS}).
     *
     * @param data Buffer that contains binary data to write
     * @param offset Offset in {@code data} of the first byte of data to write
     * @param len Length of data to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public void writeBinary(byte[] data, int offset, int len) throws IOException {
    writeBinary(Base64Variants.getDefaultVariant(), data, offset, len);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[],int,int).data","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[])","Method","* Similar to {@link #writeBinary(Base64Variant,byte[],int,int)},
     * but assumes default to using the Jackson default Base64 variant
     * (which is {@link Base64Variants#MIME_NO_LINEFEEDS}). Also
     * assumes that whole byte array is to be output.
     *
     * @param data Buffer that contains binary data to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public void writeBinary(byte[] data) throws IOException {
    writeBinary(Base64Variants.getDefaultVariant(), data, 0, data.length);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[]).data","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinary(InputStream,int)","Method","* Similar to {@link #writeBinary(Base64Variant,InputStream,int)},
     * but assumes default to using the Jackson default Base64 variant
     * (which is {@link Base64Variants#MIME_NO_LINEFEEDS}).
     *
     * @param data InputStream to use for reading binary data to write.
     *    Will not be closed after successful write operation
     * @param dataLength (optional) number of bytes that will be available;
     *    or -1 to be indicate it is not known. Note that implementations
     *    need not support cases where length is not known in advance; this
     *    depends on underlying data format: JSON output does NOT require length,
     *    other formats may
     *
     * @return Number of bytes actually written
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public int writeBinary(InputStream data, int dataLength) throws IOException {
    return writeBinary(Base64Variants.getDefaultVariant(), data, dataLength);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinary(InputStream,int).data","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeBinary(InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinary(InputStream,int).dataLength","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeBinary(InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinary(Base64Variant,InputStream,int)","Abstract Method","* Method similar to {@link #writeBinary(Base64Variant,byte[],int,int)},
     * but where input is provided through a stream, allowing for incremental
     * writes without holding the whole input in memory.
     *
     * @param bv Base64 variant to use
     * @param data InputStream to use for reading binary data to write.
     *    Will not be closed after successful write operation
     * @param dataLength (optional) number of bytes that will be available;
     *    or -1 to be indicate it is not known.
     *    If a positive length is given, <code>data</code> MUST provide at least
     *    that many bytes: if not, an exception will be thrown.
     *    Note that implementations
     *    need not support cases where length is not known in advance; this
     *    depends on underlying data format: JSON output does NOT require length,
     *    other formats may.
     *
     * @return Number of bytes read from <code>data</code> and written as binary payload
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract int writeBinary(Base64Variant bv, InputStream data, int dataLength) throws IOException;","int","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinary(Base64Variant,InputStream,int).bv","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinary(Base64Variant,InputStream,int).data","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinary(Base64Variant,InputStream,int).dataLength","Parameter_3","Belong to com.fasterxml.jackson.core.JsonGenerator.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumber(short)","Method","* Method for outputting given value as JSON number.
     * Can be called in any context where a value is expected
     * (Array value, Object field value, root-level value).
     * Additional white space may be added around the value
     * if pretty-printing is enabled.
     *
     * @param v Number value to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     *
     * @since 2.2","public void writeNumber(short v) throws IOException {
    writeNumber((int) v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumber(short).v","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumber(short)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumber(int)","Abstract Method","* Method for outputting given value as JSON number.
     * Can be called in any context where a value is expected
     * (Array value, Object field value, root-level value).
     * Additional white space may be added around the value
     * if pretty-printing is enabled.
     *
     * @param v Number value to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeNumber(int v) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumber(int).v","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumber(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumber(long)","Abstract Method","* Method for outputting given value as JSON number.
     * Can be called in any context where a value is expected
     * (Array value, Object field value, root-level value).
     * Additional white space may be added around the value
     * if pretty-printing is enabled.
     *
     * @param v Number value to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeNumber(long v) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumber(long).v","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumber(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumber(BigInteger)","Abstract Method","* Method for outputting given value as JSON number.
     * Can be called in any context where a value is expected
     * (Array value, Object field value, root-level value).
     * Additional white space may be added around the value
     * if pretty-printing is enabled.
     *
     * @param v Number value to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeNumber(BigInteger v) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumber(BigInteger).v","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumber(BigInteger)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumber(double)","Abstract Method","* Method for outputting indicate JSON numeric value.
     * Can be called in any context where a value is expected
     * (Array value, Object field value, root-level value).
     * Additional white space may be added around the value
     * if pretty-printing is enabled.
     *
     * @param v Number value to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeNumber(double v) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumber(double).v","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumber(double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumber(float)","Abstract Method","* Method for outputting indicate JSON numeric value.
     * Can be called in any context where a value is expected
     * (Array value, Object field value, root-level value).
     * Additional white space may be added around the value
     * if pretty-printing is enabled.
     *
     * @param v Number value to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeNumber(float v) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumber(float).v","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumber(float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumber(BigDecimal)","Abstract Method","* Method for outputting indicate JSON numeric value.
     * Can be called in any context where a value is expected
     * (Array value, Object field value, root-level value).
     * Additional white space may be added around the value
     * if pretty-printing is enabled.
     *
     * @param v Number value to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeNumber(BigDecimal v) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumber(BigDecimal).v","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumber(BigDecimal)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumber(String)","Abstract Method","* Write method that can be used for custom numeric types that can
     * not be (easily?) converted to ""standard"" Java number types.
     * Because numbers are not surrounded by double quotes, regular
     * {@link #writeString} method cannot be used; nor
     * {@link #writeRaw} because that does not properly handle
     * value separators needed in Array or Object contexts.
     *<p>
     * Note: because of lack of type safety, some generator
     * implementations may not be able to implement this
     * method. For example, if a binary JSON format is used,
     * it may require type information for encoding; similarly
     * for generator-wrappers around Java objects or JSON nodes.
     * If implementation does not implement this method,
     * it needs to throw {@link UnsupportedOperationException}.
     *
     * @param encodedValue Textual (possibly formatted) number representation to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     * @throws UnsupportedOperationException If underlying data format does not
     *   support numbers serialized textually AND if generator is not allowed
     *   to just output a String instead (Schema-based formats may require actual
     *   number, for example)","public abstract void writeNumber(String encodedValue) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumber(String).encodedValue","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumber(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumber(char[],int,int)","Method","* Overloaded version of {@link #writeNumber(String)} with same semantics
     * but possibly more efficient operation.
     *
     * @param encodedValueBuffer Buffer that contains the textual number representation to write
     * @param offset Offset of the first character of value to write
     * @param len Length of the value (in characters) to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     *
     * @since 2.11","public void writeNumber(char[] encodedValueBuffer, int offset, int len) throws IOException {
    writeNumber(new String(encodedValueBuffer, offset, len));
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumber(char[],int,int).encodedValueBuffer","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumber(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumber(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumber(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumber(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumber(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBoolean(boolean)","Abstract Method","* Method for outputting literal JSON boolean value (one of
     * Strings 'true' and 'false').
     * Can be called in any context where a value is expected
     * (Array value, Object field value, root-level value).
     * Additional white space may be added around the value
     * if pretty-printing is enabled.
     *
     * @param state Boolean value to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeBoolean(boolean state) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBoolean(boolean).state","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeBoolean(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNull()","Abstract Method","* Method for outputting literal JSON null value.
     * Can be called in any context where a value is expected
     * (Array value, Object field value, root-level value).
     * Additional white space may be added around the value
     * if pretty-printing is enabled.
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeNull() throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeEmbeddedObject(Object)","Method","* Method that can be called on backends that support passing opaque native
     * values that some data formats support; not used with JSON backend,
     * more common with binary formats.
     *<p>
     * NOTE: this is NOT the method to call for serializing regular POJOs,
     * see {@link #writeObject} instead.
     *
     * @param object Native format-specific value to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     *
     * @since 2.8","public void writeEmbeddedObject(Object object) throws IOException {
    // 01-Sep-2016, tatu: As per [core#318], handle small number of cases
    if (object == null) {
        writeNull();
        return;
    }
    if (object instanceof byte[]) {
        writeBinary((byte[]) object);
        return;
    }
    throw new JsonGenerationException(""No native support for writing embedded objects of type "" + object.getClass().getName(), this);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeEmbeddedObject(Object).object","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeEmbeddedObject(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeObjectId(Object)","Method","* Method that can be called to output so-called native Object Id.
     * Note that it may only be called after ensuring this is legal
     * (with {@link #canWriteObjectId()}), as not all data formats
     * have native type id support; and some may only allow them in
     * certain positions or locations.
     * If output is not allowed by the data format in this position,
     * a {@link JsonGenerationException} will be thrown.
     *
     * @param id Native Object Id to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     * @throws JsonGenerationException if Object ID output is not allowed
     *   (either at all, or specifically in this position in output)
     *
     * @since 2.3","public void writeObjectId(Object id) throws IOException {
    throw new JsonGenerationException(""No native support for writing Object Ids"", this);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeObjectId(Object).id","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeObjectId(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeObjectRef(Object)","Method","* Method that can be called to output references to native Object Ids.
     * Note that it may only be called after ensuring this is legal
     * (with {@link #canWriteObjectId()}), as not all data formats
     * have native type id support; and some may only allow them in
     * certain positions or locations.
     * If output is not allowed by the data format in this position,
     * a {@link JsonGenerationException} will be thrown.
     *
     * @param referenced Referenced value, for which Object Id is expected to be written
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     * @throws JsonGenerationException if Object ID output is not allowed
     *   (either at all, or specifically in this position in output)","public void writeObjectRef(Object referenced) throws IOException {
    throw new JsonGenerationException(""No native support for writing Object Ids"", this);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeObjectRef(Object).referenced","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeObjectRef(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeTypeId(Object)","Method","* Method that can be called to output so-called native Type Id.
     * Note that it may only be called after ensuring this is legal
     * (with {@link #canWriteTypeId()}), as not all data formats
     * have native type id support; and some may only allow them in
     * certain positions or locations.
     * If output is not allowed by the data format in this position,
     * a {@link JsonGenerationException} will be thrown.
     *
     * @param id Native Type Id to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     * @throws JsonGenerationException if Type ID output is not allowed
     *   (either at all, or specifically in this position in output)
     *
     * @since 2.3","public void writeTypeId(Object id) throws IOException {
    throw new JsonGenerationException(""No native support for writing Type Ids"", this);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeTypeId(Object).id","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeTypeId(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeTypePrefix(WritableTypeId)","Method","* Replacement method for {@link #writeTypeId(Object)} which is called
     * regardless of whether format has native type ids. If it does have native
     * type ids, those are to be used (if configuration allows this), if not,
     * structural type id inclusion is to be used. For JSON, for example, no
     * native type ids exist and structural inclusion is always used.
     *<p>
     * NOTE: databind may choose to skip calling this method for some special cases
     * (and instead included type id via regular write methods and/or {@link #writeTypeId}
     * -- this is discouraged, but not illegal, and may be necessary as a work-around
     * in some cases.
     *
     * @param typeIdDef Full Type Id definition
     *
     * @return {@link WritableTypeId} for caller to retain and pass to matching
     *   {@link #writeTypeSuffix} call
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     * @throws JsonGenerationException if Type ID output is not allowed
     *   (either at all, or specifically in this position in output)
     *
     * @since 2.9","public WritableTypeId writeTypePrefix(WritableTypeId typeIdDef) throws IOException {
    // Are native type ids allowed? If so, use them; otherwise, use wrappers
    final boolean wasStartObjectWritten = canWriteTypeId() ? _writeTypePrefixUsingNative(typeIdDef) : _writeTypePrefixUsingWrapper(typeIdDef);
    // And then possible start marker for value itself:
    switch(typeIdDef.valueShape) {
        case START_OBJECT:
            if (!wasStartObjectWritten) {
                writeStartObject(typeIdDef.forValue);
            }
            break;
        case START_ARRAY:
            writeStartArray(typeIdDef.forValue);
            break;
        // otherwise: no start marker
        default:
    }
    return typeIdDef;
}","WritableTypeId","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeTypePrefix(WritableTypeId).typeIdDef","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeTypePrefix(WritableTypeId)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._writeTypePrefixUsingNative(WritableTypeId)","Method","* Writes a native type id (when supported by format).
     *
     * @return True if start of an object has been written, False otherwise.
     *
     * @since 2.19","protected boolean _writeTypePrefixUsingNative(WritableTypeId typeIdDef) throws IOException {
    typeIdDef.wrapperWritten = false;
    writeTypeId(typeIdDef.id);
    return false;
}","boolean","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._writeTypePrefixUsingNative(WritableTypeId).typeIdDef","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator._writeTypePrefixUsingNative(WritableTypeId)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._writeTypePrefixUsingWrapper(WritableTypeId)","Method","* Writes a wrapper for the type id if necessary.
     *
     * @return True if start of an object has been written, false otherwise.
     *
     * @since 2.19","protected boolean _writeTypePrefixUsingWrapper(WritableTypeId typeIdDef) throws IOException {
    // Normally we only support String type ids (non-String reserved for native type ids)
    final String id = Objects.toString(typeIdDef.id, null);
    // If we don't have Type ID we don't write a wrapper.
    if (id == null) {
        return false;
    }
    Inclusion incl = typeIdDef.include;
    // first: can not output ""as property"" if value not Object; if so, must do ""as array""
    if ((typeIdDef.valueShape != JsonToken.START_OBJECT) && incl.requiresObjectContext()) {
        typeIdDef.include = incl = WritableTypeId.Inclusion.WRAPPER_ARRAY;
    }
    typeIdDef.wrapperWritten = true;
    switch(incl) {
        case PARENT_PROPERTY:
            // nothing to do here, as it has to be written in suffix...
            break;
        case PAYLOAD_PROPERTY:
            // only output as native type id; otherwise caller must handle using some
            // other mechanism, so...
            break;
        case METADATA_PROPERTY:
            // must have Object context by now, so simply write as field name
            // Note, too, that it's bit tricky, since we must print START_OBJECT that is part
            // of value first -- and then NOT output it later on: hence return ""early""
            writeStartObject(typeIdDef.forValue);
            writeStringField(typeIdDef.asProperty, id);
            return true;
        case WRAPPER_OBJECT:
            // NOTE: this is wrapper, not directly related to value to output, so
            // do NOT pass ""typeIdDef.forValue""
            writeStartObject();
            writeFieldName(id);
            break;
        case WRAPPER_ARRAY:
        default:
            // should never occur but translate as ""as-array""
            // wrapper, not actual array object to write
            writeStartArray();
            writeString(id);
    }
    return false;
}","boolean","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._writeTypePrefixUsingWrapper(WritableTypeId).typeIdDef","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator._writeTypePrefixUsingWrapper(WritableTypeId)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeTypeSuffix(WritableTypeId)","Method","* Method to call along with {@link #writeTypePrefix}, but after actual value
     * that has type id has been completely written. This allows post-processing
     * for some cases (for example if the actual Type Id is written at the END of
     * the value, not before or at the beginning).
     *
     * @param typeIdDef Value returned by the earlier matching call to {@link #writeTypePrefix(WritableTypeId)}
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     * @throws JsonGenerationException if Type ID output is not allowed
     *   (either at all, or specifically in this position in output)
     *
     * @return Argument {@code typeIdDef}, possibly modified
     *
     * @since 2.9","public WritableTypeId writeTypeSuffix(WritableTypeId typeIdDef) throws IOException {
    final JsonToken valueShape = typeIdDef.valueShape;
    // First: does value need closing?
    if (valueShape == JsonToken.START_OBJECT) {
        writeEndObject();
    } else if (valueShape == JsonToken.START_ARRAY) {
        writeEndArray();
    }
    if (typeIdDef.wrapperWritten) {
        switch(typeIdDef.include) {
            case WRAPPER_ARRAY:
                writeEndArray();
                break;
            case PARENT_PROPERTY:
                // unusually, need to output AFTER value. And no real wrapper...
                {
                    Object id = typeIdDef.id;
                    String idStr = (id instanceof String) ? (String) id : String.valueOf(id);
                    writeStringField(typeIdDef.asProperty, idStr);
                }
                break;
            case METADATA_PROPERTY:
            case PAYLOAD_PROPERTY:
                // no actual wrapper; included within Object itself
                break;
            case WRAPPER_OBJECT:
            default:
                // should never occur but...
                writeEndObject();
                break;
        }
    }
    return typeIdDef;
}","WritableTypeId","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeTypeSuffix(WritableTypeId).typeIdDef","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeTypeSuffix(WritableTypeId)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writePOJO(Object)","Method","* Method for writing given Java object (POJO) as JSON.
     * Exactly how the object gets written depends on object
     * in question (and on codec, its configuration); for
     * typical POJOs it will result in JSON Object, but for others JSON
     * Array, or String or numeric value (and for nulls, JSON
     * null literal).
     * <b>NOTE</b>: generator must have its {@code ObjectCodec}
     * set to non-null value; for generators created by a mapping
     * factory this is the case, for others not.
     *
     * @param pojo Java value (usually POJO) to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     *
     * @since 2.13 (to eventually replace {@link #writeObject(Object)}","public void writePOJO(Object pojo) throws IOException {
    writeObject(pojo);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writePOJO(Object).pojo","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writePOJO(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeObject(Object)","Abstract Method","* Older alias for {@link #writePOJO(Object)}
     *
     * @param pojo Java value (usually POJO) to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeObject(Object pojo) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeObject(Object).pojo","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeObject(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeTree(TreeNode)","Abstract Method","* Method for writing given JSON tree (expressed as a tree
     * where given JsonNode is the root) using this generator.
     * This will generally just call
     * {@link #writeObject} with given node, but is added
     * for convenience and to make code more explicit in cases
     * where it deals specifically with trees.
     *
     * @param rootNode {@link TreeNode} to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public abstract void writeTree(TreeNode rootNode) throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeTree(TreeNode).rootNode","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeTree(TreeNode)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinaryField(String,byte[])","Method","* Convenience method for outputting a field entry (""member"")
     * that contains specified data in base64-encoded form.
     * Equivalent to:
     *<pre>
     *  writeFieldName(fieldName);
     *  writeBinary(value);
     *</pre>
     *
     * @param fieldName Name of the field to write
     * @param data Binary data for the field to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public void writeBinaryField(String fieldName, byte[] data) throws IOException {
    writeFieldName(fieldName);
    writeBinary(data);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinaryField(String,byte[]).fieldName","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeBinaryField(String,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBinaryField(String,byte[]).data","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeBinaryField(String,byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBooleanField(String,boolean)","Method","* Convenience method for outputting a field entry (""member"")
     * that has a boolean value. Equivalent to:
     *<pre>
     *  writeFieldName(fieldName);
     *  writeBoolean(value);
     *</pre>
     *
     * @param fieldName Name of the field to write
     * @param value Boolean value of the field to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public void writeBooleanField(String fieldName, boolean value) throws IOException {
    writeFieldName(fieldName);
    writeBoolean(value);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBooleanField(String,boolean).fieldName","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeBooleanField(String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeBooleanField(String,boolean).value","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeBooleanField(String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNullField(String)","Method","* Convenience method for outputting a field entry (""member"")
     * that has JSON literal value null. Equivalent to:
     *<pre>
     *  writeFieldName(fieldName);
     *  writeNull();
     *</pre>
     *
     * @param fieldName Name of the field to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public void writeNullField(String fieldName) throws IOException {
    writeFieldName(fieldName);
    writeNull();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNullField(String).fieldName","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNullField(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeStringField(String,String)","Method","* Convenience method for outputting a field entry (""member"")
     * that has a String value. Equivalent to:
     *<pre>
     *  writeFieldName(fieldName);
     *  writeString(value);
     *</pre>
     *
     * @param fieldName Name of the field to write
     * @param value String value of the field to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public void writeStringField(String fieldName, String value) throws IOException {
    writeFieldName(fieldName);
    writeString(value);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeStringField(String,String).fieldName","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeStringField(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeStringField(String,String).value","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeStringField(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,short)","Method","* Convenience method for outputting a field entry (""member"")
     * that has the specified numeric value. Equivalent to:
     *<pre>
     *  writeFieldName(fieldName);
     *  writeNumber(value);
     *</pre>
     *
     * @param fieldName Name of the field to write
     * @param value Numeric value of the field to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     *
     * @since 2.11","public void writeNumberField(String fieldName, short value) throws IOException {
    writeFieldName(fieldName);
    writeNumber(value);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,short).fieldName","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,short)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,short).value","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,short)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,int)","Method","* Convenience method for outputting a field entry (""member"")
     * that has the specified numeric value. Equivalent to:
     *<pre>
     *  writeFieldName(fieldName);
     *  writeNumber(value);
     *</pre>
     *
     * @param fieldName Name of the field to write
     * @param value Numeric value of the field to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public void writeNumberField(String fieldName, int value) throws IOException {
    writeFieldName(fieldName);
    writeNumber(value);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,int).fieldName","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,int).value","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,long)","Method","* Convenience method for outputting a field entry (""member"")
     * that has the specified numeric value. Equivalent to:
     *<pre>
     *  writeFieldName(fieldName);
     *  writeNumber(value);
     *</pre>
     *
     * @param fieldName Name of the field to write
     * @param value Numeric value of the field to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public void writeNumberField(String fieldName, long value) throws IOException {
    writeFieldName(fieldName);
    writeNumber(value);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,long).fieldName","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,long).value","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,BigInteger)","Method","* Convenience method for outputting a field entry (""member"")
     * that has the specified numeric value. Equivalent to:
     *<pre>
     *  writeFieldName(fieldName);
     *  writeNumber(value);
     *</pre>
     *
     * @param fieldName Name of the field to write
     * @param value Numeric value of the field to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     *
     * @since 2.11","public void writeNumberField(String fieldName, BigInteger value) throws IOException {
    writeFieldName(fieldName);
    writeNumber(value);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,BigInteger).fieldName","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,BigInteger)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,BigInteger).value","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,BigInteger)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,float)","Method","* Convenience method for outputting a field entry (""member"")
     * that has the specified numeric value. Equivalent to:
     *<pre>
     *  writeFieldName(fieldName);
     *  writeNumber(value);
     *</pre>
     *
     * @param fieldName Name of the field to write
     * @param value Numeric value of the field to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public void writeNumberField(String fieldName, float value) throws IOException {
    writeFieldName(fieldName);
    writeNumber(value);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,float).fieldName","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,float).value","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,double)","Method","* Convenience method for outputting a field entry (""member"")
     * that has the specified numeric value. Equivalent to:
     *<pre>
     *  writeFieldName(fieldName);
     *  writeNumber(value);
     *</pre>
     *
     * @param fieldName Name of the field to write
     * @param value Numeric value of the field to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public void writeNumberField(String fieldName, double value) throws IOException {
    writeFieldName(fieldName);
    writeNumber(value);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,double).fieldName","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,double).value","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,BigDecimal)","Method","* Convenience method for outputting a field entry (""member"")
     * that has the specified numeric value.
     * Equivalent to:
     *<pre>
     *  writeFieldName(fieldName);
     *  writeNumber(value);
     *</pre>
     *
     * @param fieldName Name of the field to write
     * @param value Numeric value of the field to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public void writeNumberField(String fieldName, BigDecimal value) throws IOException {
    writeFieldName(fieldName);
    writeNumber(value);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,BigDecimal).fieldName","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,BigDecimal)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,BigDecimal).value","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeNumberField(String,BigDecimal)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeArrayFieldStart(String)","Method","* Convenience method for outputting a field entry (""member"")
     * (that will contain a JSON Array value), and the START_ARRAY marker.
     * Equivalent to:
     *<pre>
     *  writeFieldName(fieldName);
     *  writeStartArray();
     *</pre>
     *<p>
     * Note: caller still has to take care to close the array
     * (by calling {#link #writeEndArray}) after writing all values
     * of the value Array.
     *
     * @param fieldName Name of the field to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public void writeArrayFieldStart(String fieldName) throws IOException {
    writeFieldName(fieldName);
    writeStartArray();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeArrayFieldStart(String).fieldName","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeArrayFieldStart(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeObjectFieldStart(String)","Method","* Convenience method for outputting a field entry (""member"")
     * (that will contain an Object value), and the START_OBJECT marker.
     * Equivalent to:
     *<pre>
     *  writeFieldName(fieldName);
     *  writeStartObject();
     *</pre>
     *<p>
     * Note: caller still has to take care to close the Object
     * (by calling {#link #writeEndObject}) after writing all
     * entries of the value Object.
     *
     * @param fieldName Name of the field to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public void writeObjectFieldStart(String fieldName) throws IOException {
    writeFieldName(fieldName);
    writeStartObject();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeObjectFieldStart(String).fieldName","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeObjectFieldStart(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writePOJOField(String,Object)","Method","* Convenience method for outputting a field entry (""member"")
     * that has contents of specific Java object as its value.
     * Equivalent to:
     *<pre>
     *  writeFieldName(fieldName);
     *  writeObject(pojo);
     *</pre>
     *<p>
     * NOTE: actual serialization of POJO value requires assigned {@code ObjectCodec}
     * and will delegate to that (usually {@code ObjectMapper} of databind layer)
     *
     * @param fieldName Name of the field to write
     * @param pojo POJO value of the field to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public void writePOJOField(String fieldName, Object pojo) throws IOException {
    writeObjectField(fieldName, pojo);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writePOJOField(String,Object).fieldName","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writePOJOField(String,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writePOJOField(String,Object).pojo","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writePOJOField(String,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeObjectField(String,Object)","Method","* Older alias for {@link #writePOJOField}
     *
     * @param fieldName Name of the field to write
     * @param pojo POJO value of the field to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public void writeObjectField(String fieldName, Object pojo) throws IOException {
    writeFieldName(fieldName);
    writeObject(pojo);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeObjectField(String,Object).fieldName","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeObjectField(String,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeObjectField(String,Object).pojo","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator.writeObjectField(String,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeOmittedField(String)","Method","* Method called to indicate that a property in this position was
     * skipped. It is usually only called for generators that return
     * <code>false</code> from {@link #canOmitFields()}.
     *<p>
     * Default implementation does nothing.
     *
     * @param fieldName Name of the field omitted
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     *
     * @since 2.3","public void writeOmittedField(String fieldName) throws IOException {
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.writeOmittedField(String).fieldName","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.writeOmittedField(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.copyCurrentEvent(JsonParser)","Method","* Method for copying contents of the current event that
     * the given parser instance points to.
     * Note that the method <b>will not</b> copy any other events,
     * such as events contained within JSON Array or Object structures.
     *<p>
     * Calling this method will not advance the given
     * parser, although it may cause parser to internally process
     * more data (if it lazy loads contents of value events, for example)
     *
     * @param p Parser that points to event (token) to copy
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public void copyCurrentEvent(JsonParser p) throws IOException {
    JsonToken t = p.currentToken();
    final int token = (t == null) ? ID_NOT_AVAILABLE : t.id();
    switch(token) {
        case ID_NOT_AVAILABLE:
            throw _constructWriteException(""No current event to copy"");
        case ID_START_OBJECT:
            writeStartObject();
            break;
        case ID_END_OBJECT:
            writeEndObject();
            break;
        case ID_START_ARRAY:
            writeStartArray();
            break;
        case ID_END_ARRAY:
            writeEndArray();
            break;
        case ID_FIELD_NAME:
            writeFieldName(p.currentName());
            break;
        case ID_STRING:
            _copyCurrentStringValue(p);
            break;
        case ID_NUMBER_INT:
            _copyCurrentIntValue(p);
            break;
        case ID_NUMBER_FLOAT:
            // Different from ""copyCurrentEventExact""!
            _copyCurrentFloatValue(p);
            break;
        case ID_TRUE:
            writeBoolean(true);
            break;
        case ID_FALSE:
            writeBoolean(false);
            break;
        case ID_NULL:
            writeNull();
            break;
        case ID_EMBEDDED_OBJECT:
            writeObject(p.getEmbeddedObject());
            break;
        default:
            throw new IllegalStateException(""Internal error: unknown current token, "" + t);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.copyCurrentEvent(JsonParser).p","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.copyCurrentEvent(JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.copyCurrentEventExact(JsonParser)","Method","* Same as {@link #copyCurrentEvent} with the exception that copying of numeric
     * values tries to avoid any conversion losses; in particular for floating-point
     * numbers. This usually matters when transcoding from textual format like JSON
     * to a binary format.
     * See {@link #_copyCurrentFloatValueExact} for details.
     *
     * @param p Parser that points to event (token) to copy
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer
     *
     * @since 2.15","public void copyCurrentEventExact(JsonParser p) throws IOException {
    JsonToken t = p.currentToken();
    final int token = (t == null) ? ID_NOT_AVAILABLE : t.id();
    switch(token) {
        case ID_NOT_AVAILABLE:
            throw _constructWriteException(""No current event to copy"");
        case ID_START_OBJECT:
            writeStartObject();
            break;
        case ID_END_OBJECT:
            writeEndObject();
            break;
        case ID_START_ARRAY:
            writeStartArray();
            break;
        case ID_END_ARRAY:
            writeEndArray();
            break;
        case ID_FIELD_NAME:
            writeFieldName(p.currentName());
            break;
        case ID_STRING:
            _copyCurrentStringValue(p);
            break;
        case ID_NUMBER_INT:
            _copyCurrentIntValue(p);
            break;
        case ID_NUMBER_FLOAT:
            // Different from ""copyCurrentEvent""!
            _copyCurrentFloatValueExact(p);
            break;
        case ID_TRUE:
            writeBoolean(true);
            break;
        case ID_FALSE:
            writeBoolean(false);
            break;
        case ID_NULL:
            writeNull();
            break;
        case ID_EMBEDDED_OBJECT:
            writeObject(p.getEmbeddedObject());
            break;
        default:
            throw new IllegalStateException(""Internal error: unknown current token, "" + t);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.copyCurrentEventExact(JsonParser).p","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.copyCurrentEventExact(JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.copyCurrentStructure(JsonParser)","Method","* Method for copying contents of the current event
     * <b>and following events that it encloses</b>
     * the given parser instance points to.
     *<p>
     * So what constitutes enclosing? Here is the list of
     * events that have associated enclosed events that will
     * get copied:
     *<ul>
     * <li>{@link JsonToken#START_OBJECT}:
     *   all events up to and including matching (closing)
     *   {@link JsonToken#END_OBJECT} will be copied
     *  </li>
     * <li>{@link JsonToken#START_ARRAY}
     *   all events up to and including matching (closing)
     *   {@link JsonToken#END_ARRAY} will be copied
     *  </li>
     * <li>{@link JsonToken#FIELD_NAME} the logical value (which
     *   can consist of a single scalar value; or a sequence of related
     *   events for structured types (JSON Arrays, Objects)) will
     *   be copied along with the name itself. So essentially the
     *   whole <b>field entry</b> (name and value) will be copied.
     *  </li>
     *</ul>
     *<p>
     * After calling this method, parser will point to the
     * <b>last event</b> that was copied. This will either be
     * the event parser already pointed to (if there were no
     * enclosed events), or the last enclosed event copied.
     *<p>
     * NOTE: copying of individual tokens/events is handled by delegating
     * to {@link #copyCurrentEvent} method (make sure to read about difference
     * between that method and {@link #copyCurrentEventExact} for numeric
     * value accuracy).
     *
     * @param p Parser that points to the value to copy
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","public void copyCurrentStructure(JsonParser p) throws IOException {
    JsonToken t = p.currentToken();
    // Let's handle field-name separately first
    int id = (t == null) ? ID_NOT_AVAILABLE : t.id();
    if (id == ID_FIELD_NAME) {
        writeFieldName(p.currentName());
        t = p.nextToken();
        id = (t == null) ? ID_NOT_AVAILABLE : t.id();
        // fall-through to copy the associated value
    }
    switch(id) {
        case ID_START_OBJECT:
            writeStartObject();
            _copyCurrentContents(p);
            return;
        case ID_START_ARRAY:
            writeStartArray();
            _copyCurrentContents(p);
            return;
        default:
            copyCurrentEvent(p);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.copyCurrentStructure(JsonParser).p","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.copyCurrentStructure(JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._copyCurrentContents(JsonParser)","Method","@since 2.10","protected void _copyCurrentContents(JsonParser p) throws IOException {
    int depth = 1;
    JsonToken t;
    // Mostly copied from `copyCurrentEvent()`, but with added nesting counts
    while ((t = p.nextToken()) != null) {
        switch(t.id()) {
            case ID_FIELD_NAME:
                writeFieldName(p.currentName());
                break;
            case ID_START_ARRAY:
                writeStartArray();
                ++depth;
                break;
            case ID_START_OBJECT:
                writeStartObject();
                ++depth;
                break;
            case ID_END_ARRAY:
                writeEndArray();
                if (--depth == 0) {
                    return;
                }
                break;
            case ID_END_OBJECT:
                writeEndObject();
                if (--depth == 0) {
                    return;
                }
                break;
            case ID_STRING:
                _copyCurrentStringValue(p);
                break;
            case ID_NUMBER_INT:
                _copyCurrentIntValue(p);
                break;
            case ID_NUMBER_FLOAT:
                _copyCurrentFloatValue(p);
                break;
            case ID_TRUE:
                writeBoolean(true);
                break;
            case ID_FALSE:
                writeBoolean(false);
                break;
            case ID_NULL:
                writeNull();
                break;
            case ID_EMBEDDED_OBJECT:
                writeObject(p.getEmbeddedObject());
                break;
            default:
                throw new IllegalStateException(""Internal error: unknown current token, "" + t);
        }
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._copyCurrentContents(JsonParser).p","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator._copyCurrentContents(JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._copyCurrentFloatValue(JsonParser)","Method","* Method for copying current {@link JsonToken#VALUE_NUMBER_FLOAT} value;
     * overridable by format backend implementations.
     * Implementation checks
     * {@link JsonParser#getNumberType()} for declared type and uses matching
     * accessors: this may cause inexact conversion for some textual formats
     * (depending on settings). If this is problematic, use
     * {@link #_copyCurrentFloatValueExact} instead (note that doing so may add
     * overhead).
     *
     * @param p Parser that points to the value to copy
     *
     * @throws IOException exception thrown by write method called to copy value, if any
     *
     * @since 2.15","protected void _copyCurrentFloatValue(JsonParser p) throws IOException {
    NumberType t = p.getNumberType();
    if (t == NumberType.BIG_DECIMAL) {
        writeNumber(p.getDecimalValue());
    } else if (t == NumberType.FLOAT) {
        writeNumber(p.getFloatValue());
    } else {
        writeNumber(p.getDoubleValue());
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._copyCurrentFloatValue(JsonParser).p","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator._copyCurrentFloatValue(JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._copyCurrentFloatValueExact(JsonParser)","Method","* Method for copying current {@link JsonToken#VALUE_NUMBER_FLOAT} value;
     * overridable by format backend implementations.
     * Implementation ensures it uses most accurate accessors necessary to retain
     * exact value in case of possible numeric conversion: in practice this means
     * that {@link BigDecimal} is usually used as the representation accessed from
     * {@link JsonParser}, regardless of whether {@link Double} might be accurate
     * (since detecting lossy conversion is not possible to do efficiently).
     * If minimal overhead is desired, use {@link #_copyCurrentFloatValue} instead.
     *
     * @param p Parser that points to the value to copy
     *
     * @throws IOException exception thrown by write method called to copy value, if any
     *
     * @since 2.15","protected void _copyCurrentFloatValueExact(JsonParser p) throws IOException {
    Number n = p.getNumberValueExact();
    if (n instanceof BigDecimal) {
        writeNumber((BigDecimal) n);
    } else if (n instanceof Double) {
        writeNumber(n.doubleValue());
    } else {
        writeNumber(n.floatValue());
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._copyCurrentFloatValueExact(JsonParser).p","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator._copyCurrentFloatValueExact(JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._copyCurrentIntValue(JsonParser)","Method","* Method for copying current {@link JsonToken#VALUE_NUMBER_FLOAT} value;
     * overridable by format backend implementations.
     *
     * @param p Parser that points to the value to copy
     *
     * @throws IOException exception thrown by write method called to copy value, if any
     *
     * @since 2.15","protected void _copyCurrentIntValue(JsonParser p) throws IOException {
    NumberType n = p.getNumberType();
    if (n == NumberType.INT) {
        writeNumber(p.getIntValue());
    } else if (n == NumberType.LONG) {
        writeNumber(p.getLongValue());
    } else {
        writeNumber(p.getBigIntegerValue());
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._copyCurrentIntValue(JsonParser).p","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator._copyCurrentIntValue(JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._copyCurrentStringValue(JsonParser)","Method","* Method for copying current {@link JsonToken#VALUE_STRING} value;
     * overridable by format backend implementations.
     *
     * @param p Parser that points to the value to copy
     *
     * @throws IOException exception thrown by write method called to copy value, if any
     *
     * @since 2.15","protected void _copyCurrentStringValue(JsonParser p) throws IOException {
    if (p.hasTextCharacters()) {
        writeString(p.getTextCharacters(), p.getTextOffset(), p.getTextLength());
    } else {
        writeString(p.getText());
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._copyCurrentStringValue(JsonParser).p","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator._copyCurrentStringValue(JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.flush()","Abstract Method","* Method called to flush any buffered content to the underlying
     * target (output stream, writer), and to flush the target itself
     * as well.
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","@Override
public abstract void flush() throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.isClosed()","Abstract Method","* Method that can be called to determine whether this generator
     * is closed or not. If it is closed, no more output can be done.
     *
     * @return {@code True} if this generator instance has been closed","public abstract boolean isClosed();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.close()","Abstract Method","* Method called to close this generator, so that no more content
     * can be written.
     *<p>
     * Whether the underlying target (stream, writer) gets closed depends
     * on whether this generator either manages the target (i.e. is the
     * only one with access to the target -- case if caller passes a
     * reference to the resource such as File, but not stream); or
     * has feature {@link Feature#AUTO_CLOSE_TARGET} enabled.
     * If either of above is true, the target is also closed. Otherwise
     * (not managing, feature not enabled), target is not closed.
     *
     * @throws IOException if there is either an underlying I/O problem","@Override
public abstract void close() throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._reportError(String)","Method","* Helper method used for constructing and throwing
     * {@link JsonGenerationException} with given base message.
     *<p>
     * Note that sub-classes may override this method to add more detail
     * or use a {@link JsonGenerationException} sub-class.
     *
     * @param msg Exception message to use
     *
     * @throws JsonGenerationException constructed","protected void _reportError(String msg) throws JsonGenerationException {
    throw (JsonGenerationException) _constructWriteException(msg);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._reportError(String).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator._reportError(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._throwInternal()","Method","No Comment","protected final void _throwInternal() {
    VersionUtil.throwInternal();
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._reportUnsupportedOperation()","Method","No Comment","protected void _reportUnsupportedOperation() {
    _reportUnsupportedOperation(""Operation not supported by `JsonGenerator` of type "" + getClass().getName());
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._reportUnsupportedOperation(String)","Method","@since 2.17","protected void _reportUnsupportedOperation(String msg) {
    throw new UnsupportedOperationException(msg);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._reportUnsupportedOperation(String).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator._reportUnsupportedOperation(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._constructWriteException(String)","Method","@since 2.17","protected StreamWriteException _constructWriteException(String msg) {
    return new JsonGenerationException(msg, this);
}","StreamWriteException","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._constructWriteException(String).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator._constructWriteException(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._constructWriteException(String,Object)","Method","@since 2.17","protected StreamWriteException _constructWriteException(String msg, Object arg) {
    return _constructWriteException(String.format(msg, arg));
}","StreamWriteException","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._constructWriteException(String,Object).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator._constructWriteException(String,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._constructWriteException(String,Object).arg","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator._constructWriteException(String,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._constructWriteException(String,Object,Object)","Method","@since 2.17","protected StreamWriteException _constructWriteException(String msg, Object arg1, Object arg2) {
    return _constructWriteException(String.format(msg, arg1, arg2));
}","StreamWriteException","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._constructWriteException(String,Object,Object).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator._constructWriteException(String,Object,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._constructWriteException(String,Object,Object).arg1","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator._constructWriteException(String,Object,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._constructWriteException(String,Object,Object).arg2","Parameter_3","Belong to com.fasterxml.jackson.core.JsonGenerator._constructWriteException(String,Object,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._constructWriteException(String,Throwable)","Method","@since 2.17","protected StreamWriteException _constructWriteException(String msg, Throwable t) {
    return new JsonGenerationException(msg, t, this);
}","StreamWriteException","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._constructWriteException(String,Throwable).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator._constructWriteException(String,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._constructWriteException(String,Throwable).t","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator._constructWriteException(String,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._verifyOffsets(int,int,int)","Method","@since 2.8","protected final void _verifyOffsets(int arrayLength, int offset, int length) {
    if ((offset < 0) || (offset + length) > arrayLength) {
        throw new IllegalArgumentException(String.format(""invalid argument(s) (offset=%d, length=%d) for input array of %d element"", offset, length, arrayLength));
    }
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._verifyOffsets(int,int,int).arrayLength","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator._verifyOffsets(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._verifyOffsets(int,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerator._verifyOffsets(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._verifyOffsets(int,int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.JsonGenerator._verifyOffsets(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._writeSimpleObject(Object)","Method","* Helper method to try to call appropriate write method for given
     * untyped Object. At this point, no structural conversions should be done,
     * only simple basic types are to be coerced as necessary.
     *
     * @param value Value to write
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","protected void _writeSimpleObject(Object value) throws IOException {
    // 31-Dec-2009, tatu: Actually, we could just handle some basic
    //    types even without codec. This can improve interoperability,
    //    and specifically help with TokenBuffer.
    if (value == null) {
        writeNull();
        return;
    }
    if (value instanceof String) {
        writeString((String) value);
        return;
    }
    if (value instanceof Number) {
        Number n = (Number) value;
        if (n instanceof Integer) {
            writeNumber(n.intValue());
            return;
        } else if (n instanceof Long) {
            writeNumber(n.longValue());
            return;
        } else if (n instanceof Double) {
            writeNumber(n.doubleValue());
            return;
        } else if (n instanceof Float) {
            writeNumber(n.floatValue());
            return;
        } else if (n instanceof Short) {
            writeNumber(n.shortValue());
            return;
        } else if (n instanceof Byte) {
            writeNumber(n.byteValue());
            return;
        } else if (n instanceof BigInteger) {
            writeNumber((BigInteger) n);
            return;
        } else if (n instanceof BigDecimal) {
            writeNumber((BigDecimal) n);
            return;
            // then Atomic types
        } else if (n instanceof AtomicInteger) {
            writeNumber(((AtomicInteger) n).get());
            return;
        } else if (n instanceof AtomicLong) {
            writeNumber(((AtomicLong) n).get());
            return;
        }
    } else if (value instanceof byte[]) {
        writeBinary((byte[]) value);
        return;
    } else if (value instanceof Boolean) {
        writeBoolean((Boolean) value);
        return;
    } else if (value instanceof AtomicBoolean) {
        writeBoolean(((AtomicBoolean) value).get());
        return;
    }
    throw new IllegalStateException(""No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed "" + value.getClass().getName() + "")"");
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator._writeSimpleObject(Object).value","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator._writeSimpleObject(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.<init>()","Constructor","No Comment","protected JsonGenerator() {
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature","Enum","* Enumeration that defines all togglable features for generators.","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.JsonGenerator$Feature","Enum","* Enumeration that defines all togglable features for generators.","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.JsonGenerator$Feature.AUTO_CLOSE_TARGET","Enum Constant","* Feature that determines whether generator will automatically
         * close underlying output target that is NOT owned by the
         * generator.
         * If disabled, calling application has to separately
         * close the underlying {@link OutputStream} and {@link Writer}
         * instances used to create the generator. If enabled, generator
         * will handle closing, as long as generator itself gets closed:
         * this happens when end-of-input is encountered, or generator
         * is closed by a call to {@link JsonGenerator#close}.
         *<p>
         * Feature is enabled by default.","AUTO_CLOSE_TARGET(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature.AUTO_CLOSE_JSON_CONTENT","Enum Constant","* Feature that determines what happens when the generator is
         * closed while there are still unmatched
         * {@link JsonToken#START_ARRAY} or {@link JsonToken#START_OBJECT}
         * entries in output content. If enabled, such Array(s) and/or
         * Object(s) are automatically closed; if disabled, nothing
         * specific is done.
         *<p>
         * Feature is enabled by default.","AUTO_CLOSE_JSON_CONTENT(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature.FLUSH_PASSED_TO_STREAM","Enum Constant","* Feature that specifies that calls to {@link #flush} will cause
         * matching <code>flush()</code> to underlying {@link OutputStream}
         * or {@link Writer}; if disabled this will not be done.
         * Main reason to disable this feature is to prevent flushing at
         * generator level, if it is not possible to prevent method being
         * called by other code (like <code>ObjectMapper</code> or third
         * party libraries).
         *<p>
         * Feature is enabled by default.","FLUSH_PASSED_TO_STREAM(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature.QUOTE_FIELD_NAMES","Enum Constant","* Feature that determines whether JSON Object field names are
         * quoted using double-quotes, as specified by JSON specification
         * or not. Ability to disable quoting was added to support use
         * cases where they are not usually expected, which most commonly
         * occurs when used straight from Javascript.
         *<p>
         * Feature is enabled by default (since it is required by JSON specification).
         *
         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonWriteFeature#QUOTE_FIELD_NAMES} instead","@Deprecated
QUOTE_FIELD_NAMES(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature.QUOTE_NON_NUMERIC_NUMBERS","Enum Constant","* Feature that determines whether ""exceptional"" (not real number)
         * float/double values are output as quoted strings.
         * The values checked are Double.Nan,
         * Double.POSITIVE_INFINITY and Double.NEGATIVE_INIFINTY (and
         * associated Float values).
         * If feature is disabled, these numbers are still output using
         * associated literal values, resulting in non-conformant
         * output.
         *<p>
         * Feature is enabled by default.
         *
         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonWriteFeature#WRITE_NAN_AS_STRINGS} instead","@Deprecated
QUOTE_NON_NUMERIC_NUMBERS(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature.ESCAPE_NON_ASCII","Enum Constant","* Feature that specifies that all characters beyond 7-bit ASCII
         * range (i.e. code points of 128 and above) need to be output
         * using format-specific escapes (for JSON, backslash escapes),
         * if format uses escaping mechanisms (which is generally true
         * for textual formats but not for binary formats).
         *<p>
         * Note that this setting may not necessarily make sense for all
         * data formats (for example, binary formats typically do not use
         * any escaping mechanisms; and some textual formats do not have
         * general-purpose escaping); if so, settings is simply ignored.
         * Put another way, effects of this feature are data-format specific.
         *<p>
         * Feature is disabled by default.
         *
         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonWriteFeature#ESCAPE_NON_ASCII} instead","@Deprecated
ESCAPE_NON_ASCII(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature.WRITE_NUMBERS_AS_STRINGS","Enum Constant","* Feature that forces all Java numbers to be written as Strings,
         * even if the underlying data format has non-textual representation
         * (which is the case for JSON as well as all binary formats).
         * Default state is 'false', meaning that Java numbers are to
         * be serialized using basic numeric serialization (as JSON
         * numbers, integral or floating point, for example).
         * If enabled, all such numeric values are instead written out as
         * textual values (which for JSON means quoted in double-quotes).
         *<p>
         * One use case is to avoid problems with Javascript limitations:
         * since Javascript standard specifies that all number handling
         * should be done using 64-bit IEEE 754 floating point values,
         * result being that some 64-bit integer values cannot be
         * accurately represented (as mantissa is only 51 bit wide).
         *<p>
         * Feature is disabled by default.
         *
         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonWriteFeature#WRITE_NUMBERS_AS_STRINGS} instead","@Deprecated
WRITE_NUMBERS_AS_STRINGS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature.WRITE_BIGDECIMAL_AS_PLAIN","Enum Constant","* Feature that determines whether {@link java.math.BigDecimal} entries are
         * serialized using {@link java.math.BigDecimal#toPlainString()} to prevent
         * values to be written using scientific notation.
         *<p>
         * NOTE: only affects generators that serialize {@link java.math.BigDecimal}s
         * using textual representation (textual formats but potentially some binary
         * formats).
         *<p>
         * Feature is disabled by default, so default output mode is used; this generally
         * depends on how {@link BigDecimal} has been created.
         *
         * @since 2.3","WRITE_BIGDECIMAL_AS_PLAIN(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature.STRICT_DUPLICATE_DETECTION","Enum Constant","* Feature that determines whether {@link JsonGenerator} will explicitly
         * check that no duplicate JSON Object field names are written.
         * If enabled, generator will check all names within context and report
         * duplicates by throwing a {@link JsonGenerationException}; if disabled,
         * no such checking will be done. Assumption in latter case is
         * that caller takes care of not trying to write duplicate names.
         *<p>
         * Note that enabling this feature will incur performance overhead
         * due to having to store and check additional information.
         *<p>
         * Feature is disabled by default.
         *
         * @since 2.3","STRICT_DUPLICATE_DETECTION(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature.IGNORE_UNKNOWN","Enum Constant","* Feature that determines what to do if the underlying data format requires knowledge
         * of all properties to output, and if no definition is found for a property that
         * caller tries to write. If enabled, such properties will be quietly ignored;
         * if disabled, a {@link JsonProcessingException} will be thrown to indicate the
         * problem.
         * Typically most textual data formats do NOT require schema information (although
         * some do, such as CSV), whereas many binary data formats do require definitions
         * (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not).
         *<p>
         * Note that support for this feature is implemented by individual data format
         * module, if (and only if) it makes sense for the format in question. For JSON,
         * for example, this feature has no effect as properties need not be pre-defined.
         *<p>
         * Feature is disabled by default, meaning that if the underlying data format
         * requires knowledge of all properties to output, attempts to write an unknown
         * property will result in a {@link JsonProcessingException}
         *
         * @since 2.5","IGNORE_UNKNOWN(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature.USE_FAST_DOUBLE_WRITER","Enum Constant","* Alias for {@link com.fasterxml.jackson.core.StreamWriteFeature#USE_FAST_DOUBLE_WRITER} instead
         *
         * @since 2.14
         * @deprecated Use {@link com.fasterxml.jackson.core.StreamWriteFeature#USE_FAST_DOUBLE_WRITER} instead","@Deprecated
USE_FAST_DOUBLE_WRITER(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature.WRITE_HEX_UPPER_CASE","Enum Constant","* Feature that specifies that hex values are encoded with capital letters.
         *<p>
         * Can be disabled to have a better possibility to compare between other Json
         * writer libraries, such as JSON.stringify from Javascript.
         *<p>
         * Feature is enabled by default.
         *
         * @since 2.14
         * @deprecated Use {@link com.fasterxml.jackson.core.json.JsonWriteFeature#WRITE_HEX_UPPER_CASE} instead","@Deprecated
WRITE_HEX_UPPER_CASE(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature.ESCAPE_FORWARD_SLASHES","Enum Constant","* See {@link com.fasterxml.jackson.core.json.JsonWriteFeature#ESCAPE_FORWARD_SLASHES}.
         *
         * @since 2.17","ESCAPE_FORWARD_SLASHES(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature.COMBINE_UNICODE_SURROGATES_IN_UTF8","Enum Constant","* See {@link com.fasterxml.jackson.core.json.JsonWriteFeature#COMBINE_UNICODE_SURROGATES_IN_UTF8}.
         *
         * @since 2.18","COMBINE_UNICODE_SURROGATES_IN_UTF8(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature.collectDefaults()","Method","* Method that calculates bit set (flags) of all features that
         * are enabled by default.
         *
         * @return Bit field of the features that are enabled by default","public static int collectDefaults() {
    int flags = 0;
    for (Feature f : values()) {
        if (f.enabledByDefault()) {
            flags |= f.getMask();
        }
    }
    return flags;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature.enabledByDefault()","Method","No Comment","public boolean enabledByDefault() {
    return _defaultState;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature.enabledIn(int)","Method","@since 2.3","public boolean enabledIn(int flags) {
    return (flags & _mask) != 0;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature.enabledIn(int).flags","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator$Feature.enabledIn(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature.getMask()","Method","No Comment","public int getMask() {
    return _mask;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature.<init>(boolean)","Constructor","No Comment","private Feature(boolean defaultState) {
    _defaultState = defaultState;
    _mask = (1 << ordinal());
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator$Feature.<init>(boolean).defaultState","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator$Feature.<init>(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature","Enum","* Enumeration that defines all togglable features for generators.","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET","Enum Constant","* Feature that determines whether generator will automatically
         * close underlying output target that is NOT owned by the
         * generator.
         * If disabled, calling application has to separately
         * close the underlying {@link OutputStream} and {@link Writer}
         * instances used to create the generator. If enabled, generator
         * will handle closing, as long as generator itself gets closed:
         * this happens when end-of-input is encountered, or generator
         * is closed by a call to {@link JsonGenerator#close}.
         *<p>
         * Feature is enabled by default.","AUTO_CLOSE_TARGET(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT","Enum Constant","* Feature that determines what happens when the generator is
         * closed while there are still unmatched
         * {@link JsonToken#START_ARRAY} or {@link JsonToken#START_OBJECT}
         * entries in output content. If enabled, such Array(s) and/or
         * Object(s) are automatically closed; if disabled, nothing
         * specific is done.
         *<p>
         * Feature is enabled by default.","AUTO_CLOSE_JSON_CONTENT(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM","Enum Constant","* Feature that specifies that calls to {@link #flush} will cause
         * matching <code>flush()</code> to underlying {@link OutputStream}
         * or {@link Writer}; if disabled this will not be done.
         * Main reason to disable this feature is to prevent flushing at
         * generator level, if it is not possible to prevent method being
         * called by other code (like <code>ObjectMapper</code> or third
         * party libraries).
         *<p>
         * Feature is enabled by default.","FLUSH_PASSED_TO_STREAM(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES","Enum Constant","* Feature that determines whether JSON Object field names are
         * quoted using double-quotes, as specified by JSON specification
         * or not. Ability to disable quoting was added to support use
         * cases where they are not usually expected, which most commonly
         * occurs when used straight from Javascript.
         *<p>
         * Feature is enabled by default (since it is required by JSON specification).
         *
         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonWriteFeature#QUOTE_FIELD_NAMES} instead","@Deprecated
QUOTE_FIELD_NAMES(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS","Enum Constant","* Feature that determines whether ""exceptional"" (not real number)
         * float/double values are output as quoted strings.
         * The values checked are Double.Nan,
         * Double.POSITIVE_INFINITY and Double.NEGATIVE_INIFINTY (and
         * associated Float values).
         * If feature is disabled, these numbers are still output using
         * associated literal values, resulting in non-conformant
         * output.
         *<p>
         * Feature is enabled by default.
         *
         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonWriteFeature#WRITE_NAN_AS_STRINGS} instead","@Deprecated
QUOTE_NON_NUMERIC_NUMBERS(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII","Enum Constant","* Feature that specifies that all characters beyond 7-bit ASCII
         * range (i.e. code points of 128 and above) need to be output
         * using format-specific escapes (for JSON, backslash escapes),
         * if format uses escaping mechanisms (which is generally true
         * for textual formats but not for binary formats).
         *<p>
         * Note that this setting may not necessarily make sense for all
         * data formats (for example, binary formats typically do not use
         * any escaping mechanisms; and some textual formats do not have
         * general-purpose escaping); if so, settings is simply ignored.
         * Put another way, effects of this feature are data-format specific.
         *<p>
         * Feature is disabled by default.
         *
         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonWriteFeature#ESCAPE_NON_ASCII} instead","@Deprecated
ESCAPE_NON_ASCII(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS","Enum Constant","* Feature that forces all Java numbers to be written as Strings,
         * even if the underlying data format has non-textual representation
         * (which is the case for JSON as well as all binary formats).
         * Default state is 'false', meaning that Java numbers are to
         * be serialized using basic numeric serialization (as JSON
         * numbers, integral or floating point, for example).
         * If enabled, all such numeric values are instead written out as
         * textual values (which for JSON means quoted in double-quotes).
         *<p>
         * One use case is to avoid problems with Javascript limitations:
         * since Javascript standard specifies that all number handling
         * should be done using 64-bit IEEE 754 floating point values,
         * result being that some 64-bit integer values cannot be
         * accurately represented (as mantissa is only 51 bit wide).
         *<p>
         * Feature is disabled by default.
         *
         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonWriteFeature#WRITE_NUMBERS_AS_STRINGS} instead","@Deprecated
WRITE_NUMBERS_AS_STRINGS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN","Enum Constant","* Feature that determines whether {@link java.math.BigDecimal} entries are
         * serialized using {@link java.math.BigDecimal#toPlainString()} to prevent
         * values to be written using scientific notation.
         *<p>
         * NOTE: only affects generators that serialize {@link java.math.BigDecimal}s
         * using textual representation (textual formats but potentially some binary
         * formats).
         *<p>
         * Feature is disabled by default, so default output mode is used; this generally
         * depends on how {@link BigDecimal} has been created.
         *
         * @since 2.3","WRITE_BIGDECIMAL_AS_PLAIN(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION","Enum Constant","* Feature that determines whether {@link JsonGenerator} will explicitly
         * check that no duplicate JSON Object field names are written.
         * If enabled, generator will check all names within context and report
         * duplicates by throwing a {@link JsonGenerationException}; if disabled,
         * no such checking will be done. Assumption in latter case is
         * that caller takes care of not trying to write duplicate names.
         *<p>
         * Note that enabling this feature will incur performance overhead
         * due to having to store and check additional information.
         *<p>
         * Feature is disabled by default.
         *
         * @since 2.3","STRICT_DUPLICATE_DETECTION(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature.IGNORE_UNKNOWN","Enum Constant","* Feature that determines what to do if the underlying data format requires knowledge
         * of all properties to output, and if no definition is found for a property that
         * caller tries to write. If enabled, such properties will be quietly ignored;
         * if disabled, a {@link JsonProcessingException} will be thrown to indicate the
         * problem.
         * Typically most textual data formats do NOT require schema information (although
         * some do, such as CSV), whereas many binary data formats do require definitions
         * (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not).
         *<p>
         * Note that support for this feature is implemented by individual data format
         * module, if (and only if) it makes sense for the format in question. For JSON,
         * for example, this feature has no effect as properties need not be pre-defined.
         *<p>
         * Feature is disabled by default, meaning that if the underlying data format
         * requires knowledge of all properties to output, attempts to write an unknown
         * property will result in a {@link JsonProcessingException}
         *
         * @since 2.5","IGNORE_UNKNOWN(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature.USE_FAST_DOUBLE_WRITER","Enum Constant","* Alias for {@link com.fasterxml.jackson.core.StreamWriteFeature#USE_FAST_DOUBLE_WRITER} instead
         *
         * @since 2.14
         * @deprecated Use {@link com.fasterxml.jackson.core.StreamWriteFeature#USE_FAST_DOUBLE_WRITER} instead","@Deprecated
USE_FAST_DOUBLE_WRITER(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_HEX_UPPER_CASE","Enum Constant","* Feature that specifies that hex values are encoded with capital letters.
         *<p>
         * Can be disabled to have a better possibility to compare between other Json
         * writer libraries, such as JSON.stringify from Javascript.
         *<p>
         * Feature is enabled by default.
         *
         * @since 2.14
         * @deprecated Use {@link com.fasterxml.jackson.core.json.JsonWriteFeature#WRITE_HEX_UPPER_CASE} instead","@Deprecated
WRITE_HEX_UPPER_CASE(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_FORWARD_SLASHES","Enum Constant","* See {@link com.fasterxml.jackson.core.json.JsonWriteFeature#ESCAPE_FORWARD_SLASHES}.
         *
         * @since 2.17","ESCAPE_FORWARD_SLASHES(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature.COMBINE_UNICODE_SURROGATES_IN_UTF8","Enum Constant","* See {@link com.fasterxml.jackson.core.json.JsonWriteFeature#COMBINE_UNICODE_SURROGATES_IN_UTF8}.
         *
         * @since 2.18","COMBINE_UNICODE_SURROGATES_IN_UTF8(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature.collectDefaults()","Method","* Method that calculates bit set (flags) of all features that
         * are enabled by default.
         *
         * @return Bit field of the features that are enabled by default","public static int collectDefaults() {
    int flags = 0;
    for (Feature f : values()) {
        if (f.enabledByDefault()) {
            flags |= f.getMask();
        }
    }
    return flags;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature.enabledByDefault()","Method","No Comment","public boolean enabledByDefault() {
    return _defaultState;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature.enabledIn(int)","Method","@since 2.3","public boolean enabledIn(int flags) {
    return (flags & _mask) != 0;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature.enabledIn(int).flags","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.Feature.enabledIn(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature.getMask()","Method","No Comment","public int getMask() {
    return _mask;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature.<init>(boolean)","Constructor","No Comment","private Feature(boolean defaultState) {
    _defaultState = defaultState;
    _mask = (1 << ordinal());
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerator.Feature.<init>(boolean).defaultState","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerator.Feature.<init>(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamConstraintsException","Class","* Exception type used to indicate violations of stream constraints
 * (for example {@link com.fasterxml.jackson.core.StreamReadConstraints})
 * when reading or writing content.
 *
 * @since 2.15","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.JsonProcessingException",""
"com.fasterxml.jackson.core.exc.StreamConstraintsException.serialVersionUID","Field","No Comment","private final static long serialVersionUID = 2L;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamConstraintsException.<init>(String)","Constructor","No Comment","public StreamConstraintsException(String msg) {
    super(msg);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamConstraintsException.<init>(String).msg","Parameter_1","Belong to com.fasterxml.jackson.core.exc.StreamConstraintsException.<init>(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamConstraintsException.<init>(String,JsonLocation)","Constructor","No Comment","public StreamConstraintsException(String msg, JsonLocation loc) {
    super(msg, loc);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamConstraintsException.<init>(String,JsonLocation).msg","Parameter_1","Belong to com.fasterxml.jackson.core.exc.StreamConstraintsException.<init>(String,JsonLocation)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamConstraintsException.<init>(String,JsonLocation).loc","Parameter_2","Belong to com.fasterxml.jackson.core.exc.StreamConstraintsException.<init>(String,JsonLocation)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamWriteException","Abstract Class","* Intermediate base class for all read-side streaming processing problems, including
 * parsing and input value coercion problems.
 *<p>
 * Added in 2.13 to eventually replace {@link com.fasterxml.jackson.core.JsonGenerationException}.
 *
 * @since 2.13","Abstract Class do not obtain Source Code","No return type","public , abstract ","com.fasterxml.jackson.core.JsonProcessingException",""
"com.fasterxml.jackson.core.exc.StreamWriteException.serialVersionUID","Field","No Comment","private final static long serialVersionUID = 2L;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamWriteException._processor","Field","No Comment","protected transient JsonGenerator _processor;","No return type","protected , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamWriteException.withGenerator(JsonGenerator)","Abstract Method","* Fluent method that may be used to assign originating {@link JsonGenerator},
     * to be accessed using {@link #getProcessor()}.
     *
     * @param g Generator to assign
     *
     * @return This exception instance (to allow call chaining)","public abstract StreamWriteException withGenerator(JsonGenerator g);","StreamWriteException","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamWriteException.withGenerator(JsonGenerator).g","Parameter_1","Belong to com.fasterxml.jackson.core.exc.StreamWriteException.withGenerator(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamWriteException.getProcessor()","Method","No Comment","@Override
public JsonGenerator getProcessor() {
    return _processor;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamWriteException.<init>(Throwable,JsonGenerator)","Constructor","No Comment","protected StreamWriteException(Throwable rootCause, JsonGenerator g) {
    super(rootCause);
    _processor = g;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamWriteException.<init>(Throwable,JsonGenerator).rootCause","Parameter_1","Belong to com.fasterxml.jackson.core.exc.StreamWriteException.<init>(Throwable,JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamWriteException.<init>(Throwable,JsonGenerator).g","Parameter_2","Belong to com.fasterxml.jackson.core.exc.StreamWriteException.<init>(Throwable,JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamWriteException.<init>(String,JsonGenerator)","Constructor","No Comment","protected StreamWriteException(String msg, JsonGenerator g) {
    super(msg, (JsonLocation) null);
    _processor = g;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamWriteException.<init>(String,JsonGenerator).msg","Parameter_1","Belong to com.fasterxml.jackson.core.exc.StreamWriteException.<init>(String,JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamWriteException.<init>(String,JsonGenerator).g","Parameter_2","Belong to com.fasterxml.jackson.core.exc.StreamWriteException.<init>(String,JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamWriteException.<init>(String,Throwable,JsonGenerator)","Constructor","No Comment","protected StreamWriteException(String msg, Throwable rootCause, JsonGenerator g) {
    super(msg, null, rootCause);
    _processor = g;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamWriteException.<init>(String,Throwable,JsonGenerator).msg","Parameter_1","Belong to com.fasterxml.jackson.core.exc.StreamWriteException.<init>(String,Throwable,JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamWriteException.<init>(String,Throwable,JsonGenerator).rootCause","Parameter_2","Belong to com.fasterxml.jackson.core.exc.StreamWriteException.<init>(String,Throwable,JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamWriteException.<init>(String,Throwable,JsonGenerator).g","Parameter_3","Belong to com.fasterxml.jackson.core.exc.StreamWriteException.<init>(String,Throwable,JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException","Abstract Class","* Intermediate base class for all read-side streaming processing problems, including
 * parsing and input value coercion problems.
 *<p>
 * Added in 2.10 to eventually replace {@link com.fasterxml.jackson.core.JsonParseException}.
 *
 * @since 2.10","Abstract Class do not obtain Source Code","No return type","public , abstract ","com.fasterxml.jackson.core.JsonProcessingException",""
"com.fasterxml.jackson.core.exc.StreamReadException.serialVersionUID","Field","No Comment","final static long serialVersionUID = 2L;","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException._processor","Field","No Comment","protected transient JsonParser _processor;","No return type","protected , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException._requestPayload","Field","* Optional payload that can be assigned to pass along for error reporting
     * or handling purposes. Core streaming parser implementations DO NOT
     * initialize this; it is up to using applications and frameworks to
     * populate it.","protected RequestPayload _requestPayload;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.withParser(JsonParser)","Abstract Method","* Fluent method that may be used to assign originating {@link JsonParser},
     * to be accessed using {@link #getProcessor()}.
     *<p>
     * NOTE: `this` instance is modified and no new instance is constructed.
     *
     * @param p Parser instance to assign to this exception
     *
     * @return This exception instance to allow call chaining","public abstract StreamReadException withParser(JsonParser p);","StreamReadException","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.withParser(JsonParser).p","Parameter_1","Belong to com.fasterxml.jackson.core.exc.StreamReadException.withParser(JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.withRequestPayload(RequestPayload)","Abstract Method","* Fluent method that may be used to assign payload to this exception,
     * to let recipient access it for diagnostics purposes.
     *<p>
     * NOTE: `this` instance is modified and no new instance is constructed.
     *
     * @param payload Payload to assign to this exception
     *
     * @return This exception instance to allow call chaining","public abstract StreamReadException withRequestPayload(RequestPayload payload);","StreamReadException","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.withRequestPayload(RequestPayload).payload","Parameter_1","Belong to com.fasterxml.jackson.core.exc.StreamReadException.withRequestPayload(RequestPayload)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.getProcessor()","Method","No Comment","@Override
public JsonParser getProcessor() {
    return _processor;
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.getRequestPayload()","Method","* Method that may be called to find payload that was being parsed, if
     * one was specified for parser that threw this Exception.
     *
     * @return request body, if payload was specified; `null` otherwise","public RequestPayload getRequestPayload() {
    return _requestPayload;
}","RequestPayload","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.getRequestPayloadAsString()","Method","* The method returns the String representation of the request payload if
     * one was specified for parser that threw this Exception.
     *
     * @return request body as String, if payload was specified; `null` otherwise","public String getRequestPayloadAsString() {
    return (_requestPayload != null) ? _requestPayload.toString() : null;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.getMessage()","Method","* Overriding the getMessage() to include the request body","@Override
public String getMessage() {
    String msg = super.getMessage();
    if (_requestPayload != null) {
        msg += ""\nRequest payload : "" + _requestPayload.toString();
    }
    return msg;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException._currentLocation(JsonParser)","Method","@since 2.17","protected static JsonLocation _currentLocation(JsonParser p) {
    return (p == null) ? null : p.currentLocation();
}","JsonLocation","protected , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException._currentLocation(JsonParser).p","Parameter_1","Belong to com.fasterxml.jackson.core.exc.StreamReadException._currentLocation(JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(String)","Constructor","@since 2.15","protected StreamReadException(String msg) {
    this(null, msg, null, null);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(String).msg","Parameter_1","Belong to com.fasterxml.jackson.core.exc.StreamReadException.<init>(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String)","Constructor","No Comment","protected StreamReadException(JsonParser p, String msg) {
    this(p, msg, _currentLocation(p), null);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String).p","Parameter_1","Belong to com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String).msg","Parameter_2","Belong to com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,Throwable)","Constructor","No Comment","protected StreamReadException(JsonParser p, String msg, Throwable rootCause) {
    this(p, msg, _currentLocation(p), rootCause);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,Throwable).p","Parameter_1","Belong to com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,Throwable).msg","Parameter_2","Belong to com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,Throwable).rootCause","Parameter_3","Belong to com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,JsonLocation)","Constructor","No Comment","protected StreamReadException(JsonParser p, String msg, JsonLocation loc) {
    this(p, msg, loc, null);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,JsonLocation).p","Parameter_1","Belong to com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,JsonLocation)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,JsonLocation).msg","Parameter_2","Belong to com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,JsonLocation)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,JsonLocation).loc","Parameter_3","Belong to com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,JsonLocation)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(String,JsonLocation,Throwable)","Constructor","No Comment","protected StreamReadException(String msg, JsonLocation loc, Throwable rootCause) {
    this(null, msg, loc, rootCause);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(String,JsonLocation,Throwable).msg","Parameter_1","Belong to com.fasterxml.jackson.core.exc.StreamReadException.<init>(String,JsonLocation,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(String,JsonLocation,Throwable).loc","Parameter_2","Belong to com.fasterxml.jackson.core.exc.StreamReadException.<init>(String,JsonLocation,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(String,JsonLocation,Throwable).rootCause","Parameter_3","Belong to com.fasterxml.jackson.core.exc.StreamReadException.<init>(String,JsonLocation,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,JsonLocation,Throwable)","Constructor","@since 2.13","protected StreamReadException(JsonParser p, String msg, JsonLocation loc, Throwable rootCause) {
    super(msg, loc, rootCause);
    _processor = p;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,JsonLocation,Throwable).p","Parameter_1","Belong to com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,JsonLocation,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,JsonLocation,Throwable).msg","Parameter_2","Belong to com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,JsonLocation,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,JsonLocation,Throwable).loc","Parameter_3","Belong to com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,JsonLocation,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,JsonLocation,Throwable).rootCause","Parameter_4","Belong to com.fasterxml.jackson.core.exc.StreamReadException.<init>(JsonParser,String,JsonLocation,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.InputCoercionException","Class","* Exception type for read-side problems that are not direct decoding (""parsing"")
 * problems (those would be reported as {@link com.fasterxml.jackson.core.JsonParseException}s),
 * but rather result from failed attempts to convert specific Java value out of valid
 * but incompatible input value. One example is numeric coercions where target number type's
 * range does not allow mapping of too large/too small input value.
 *
 * @since 2.10","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.exc.StreamReadException",""
"com.fasterxml.jackson.core.exc.InputCoercionException.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.InputCoercionException._inputType","Field","* Input token that represents input value that failed to coerce.","protected final JsonToken _inputType;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.InputCoercionException._targetType","Field","* Target type that input value failed to coerce to.","protected final Class<?> _targetType;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.InputCoercionException.withParser(JsonParser)","Method","* Fluent method that may be used to assign originating {@link JsonParser},
     * to be accessed using {@link #getProcessor()}.
     *<p>
     * NOTE: `this` instance is modified and no new instance is constructed.","@Override
public InputCoercionException withParser(JsonParser p) {
    _processor = p;
    return this;
}","InputCoercionException","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.InputCoercionException.withParser(JsonParser).p","Parameter_1","Belong to com.fasterxml.jackson.core.exc.InputCoercionException.withParser(JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.InputCoercionException.withRequestPayload(RequestPayload)","Method","No Comment","@Override
public InputCoercionException withRequestPayload(RequestPayload p) {
    _requestPayload = p;
    return this;
}","InputCoercionException","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.InputCoercionException.withRequestPayload(RequestPayload).p","Parameter_1","Belong to com.fasterxml.jackson.core.exc.InputCoercionException.withRequestPayload(RequestPayload)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.InputCoercionException.getInputType()","Method","* Accessor for getting information about input type (in form of token, giving ""shape""
     * of input) for which coercion failed.
     *
     * @return ""Shape"" of input for which coercion failed, as {@link JsonToken}","public JsonToken getInputType() {
    return _inputType;
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.InputCoercionException.getTargetType()","Method","* Accessor for getting information about target type (in form of Java {@link java.lang.Class})
     * for which coercion failed.
     *
     * @return Target type of failed conversion","public Class<?> getTargetType() {
    return _targetType;
}","Class","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.InputCoercionException.<init>(JsonParser,String,JsonToken,Class)","Constructor","* Constructor that uses current parsing location as location, and
     * sets processor (accessible via {@link #getProcessor()}) to
     * specified parser.
     *
     * @param p Parser in use at the point where failure occurred
     * @param msg Exception mesage to use
     * @param inputType Shape of input that failed to coerce
     * @param targetType Target type of failed coercion","public InputCoercionException(JsonParser p, String msg, JsonToken inputType, Class<?> targetType) {
    super(p, msg);
    _inputType = inputType;
    _targetType = targetType;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.InputCoercionException.<init>(JsonParser,String,JsonToken,Class).p","Parameter_1","Belong to com.fasterxml.jackson.core.exc.InputCoercionException.<init>(JsonParser,String,JsonToken,Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.InputCoercionException.<init>(JsonParser,String,JsonToken,Class).msg","Parameter_2","Belong to com.fasterxml.jackson.core.exc.InputCoercionException.<init>(JsonParser,String,JsonToken,Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.InputCoercionException.<init>(JsonParser,String,JsonToken,Class).inputType","Parameter_3","Belong to com.fasterxml.jackson.core.exc.InputCoercionException.<init>(JsonParser,String,JsonToken,Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.exc.InputCoercionException.<init>(JsonParser,String,JsonToken,Class).targetType","Parameter_4","Belong to com.fasterxml.jackson.core.exc.InputCoercionException.<init>(JsonParser,String,JsonToken,Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException","Class","* Exception type for exceptions during JSON writing, such as trying
 * to output  content in wrong context (non-matching end-array or end-object,
 * for example).","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.exc.StreamWriteException",""
"com.fasterxml.jackson.core.JsonGenerationException.serialVersionUID","Field","eclipse complains otherwise","private final static long serialVersionUID = 123;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException.withGenerator(JsonGenerator)","Method","* Fluent method that may be used to assign originating {@link JsonGenerator},
     * to be accessed using {@link #getProcessor()}.
     *
     * @param g Generator to assign
     *
     * @return This exception instance (to allow call chaining)
     *
     * @since 2.7","@Override
public JsonGenerationException withGenerator(JsonGenerator g) {
    _processor = g;
    return this;
}","JsonGenerationException","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException.withGenerator(JsonGenerator).g","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerationException.withGenerator(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException.getProcessor()","Method","NOTE: overloaded in 2.13 just to retain binary compatibility with 2.12 (remove from 3.0)","@Override
public JsonGenerator getProcessor() {
    return _processor;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException.<init>(Throwable)","Constructor","No Comment","// since 2.7
@Deprecated
public JsonGenerationException(Throwable rootCause) {
    super(rootCause, null);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException.<init>(Throwable).rootCause","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerationException.<init>(Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException.<init>(String)","Constructor","No Comment","// since 2.7
@Deprecated
public JsonGenerationException(String msg) {
    super(msg, null);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException.<init>(String).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerationException.<init>(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException.<init>(String,Throwable)","Constructor","No Comment","// since 2.7
@Deprecated
public JsonGenerationException(String msg, Throwable rootCause) {
    super(msg, rootCause, null);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException.<init>(String,Throwable).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerationException.<init>(String,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException.<init>(String,Throwable).rootCause","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerationException.<init>(String,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException.<init>(Throwable,JsonGenerator)","Constructor","@since 2.7","public JsonGenerationException(Throwable rootCause, JsonGenerator g) {
    super(rootCause, g);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException.<init>(Throwable,JsonGenerator).rootCause","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerationException.<init>(Throwable,JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException.<init>(Throwable,JsonGenerator).g","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerationException.<init>(Throwable,JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException.<init>(String,JsonGenerator)","Constructor","@since 2.7","public JsonGenerationException(String msg, JsonGenerator g) {
    super(msg, g);
    _processor = g;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException.<init>(String,JsonGenerator).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerationException.<init>(String,JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException.<init>(String,JsonGenerator).g","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerationException.<init>(String,JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException.<init>(String,Throwable,JsonGenerator)","Constructor","@since 2.7","public JsonGenerationException(String msg, Throwable rootCause, JsonGenerator g) {
    super(msg, rootCause, g);
    _processor = g;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException.<init>(String,Throwable,JsonGenerator).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonGenerationException.<init>(String,Throwable,JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException.<init>(String,Throwable,JsonGenerator).rootCause","Parameter_2","Belong to com.fasterxml.jackson.core.JsonGenerationException.<init>(String,Throwable,JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonGenerationException.<init>(String,Throwable,JsonGenerator).g","Parameter_3","Belong to com.fasterxml.jackson.core.JsonGenerationException.<init>(String,Throwable,JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser","Abstract Class","* Base class that defines public API for reading JSON content.
 * Instances are created using factory methods of
 * a {@link JsonFactory} instance.
 *
 * @author Tatu Saloranta","Abstract Class do not obtain Source Code","No return type","public , abstract ","","java.io.Closeable;com.fasterxml.jackson.core.Versioned"
"com.fasterxml.jackson.core.JsonParser.MIN_BYTE_I","Field","No Comment","private final static int MIN_BYTE_I = Byte.MIN_VALUE;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.MAX_BYTE_I","Field","as per [JACKSON-804], allow range up to and including 255","private final static int MAX_BYTE_I = 255;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.MIN_SHORT_I","Field","No Comment","private final static int MIN_SHORT_I = Short.MIN_VALUE;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.MAX_SHORT_I","Field","No Comment","private final static int MAX_SHORT_I = Short.MAX_VALUE;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.DEFAULT_READ_CAPABILITIES","Field","* Default set of {@link StreamReadCapability}ies that may be used as
     * basis for format-specific readers (or as bogus instance if non-null
     * set needs to be passed).
     *
     * @since 2.12","protected final static JacksonFeatureSet<StreamReadCapability> DEFAULT_READ_CAPABILITIES = JacksonFeatureSet.fromDefaults(StreamReadCapability.values());","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._features","Field","* Bit flag composed of bits that indicate which
     * {@link com.fasterxml.jackson.core.JsonParser.Feature}s
     * are enabled.","protected int _features;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._requestPayload","Field","* Optional container that holds the request payload which will be displayed on JSON parsing error.
     *
     * @since 2.8","protected transient RequestPayload _requestPayload;","No return type","protected , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getCodec()","Abstract Method","* Accessor for {@link ObjectCodec} associated with this
     * parser, if any. Codec is used by {@link #readValueAs(Class)}
     * method (and its variants).
     *
     * @return Codec assigned to this parser, if any; {@code null} if none","public abstract ObjectCodec getCodec();","ObjectCodec","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.setCodec(ObjectCodec)","Abstract Method","* Setter that allows defining {@link ObjectCodec} associated with this
     * parser, if any. Codec is used by {@link #readValueAs(Class)}
     * method (and its variants).
     *
     * @param oc Codec to assign, if any; {@code null} if none","public abstract void setCodec(ObjectCodec oc);","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.setCodec(ObjectCodec).oc","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.setCodec(ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getInputSource()","Method","* Method that can be used to get access to object that is used
     * to access input being parsed; this is usually either
     * {@link InputStream} or {@link Reader}, depending on what
     * parser was constructed with.
     * Note that returned value may be null in some cases; including
     * case where parser implementation does not want to exposed raw
     * source to caller.
     * In cases where input has been decorated, object returned here
     * is the decorated version; this allows some level of interaction
     * between users of parser and decorator object.
     *<p>
     * In general use of this accessor should be considered as
     * ""last effort"", i.e. only used if no other mechanism is applicable.
     *
     * @return Input source this parser was configured with","public Object getInputSource() {
    return null;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(RequestPayload)","Method","* Sets the payload to be passed if {@link JsonParseException} is thrown.
     *
     * @param payload Payload to pass
     *
     * @since 2.8","public void setRequestPayloadOnError(RequestPayload payload) {
    _requestPayload = payload;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(RequestPayload).payload","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(RequestPayload)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],String)","Method","* Sets the byte[] request payload and the charset
     *
     * @param payload Payload to pass
     * @param charset Character encoding for (lazily) decoding payload
     *
     * @since 2.8","public void setRequestPayloadOnError(byte[] payload, String charset) {
    _requestPayload = (payload == null) ? null : new RequestPayload(payload, charset);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],String).payload","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],String).charset","Parameter_2","Belong to com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(String)","Method","* Sets the String request payload
      *
      * @param payload Payload to pass
      *
      * @since 2.8","public void setRequestPayloadOnError(String payload) {
    _requestPayload = (payload == null) ? null : new RequestPayload(payload);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(String).payload","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.streamReadConstraints()","Method","* Get the constraints to apply when performing streaming reads.
     *
     * @return Read constraints used by this parser
     *
     * @since 2.15","public StreamReadConstraints streamReadConstraints() {
    return StreamReadConstraints.defaults();
}","StreamReadConstraints","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.setSchema(FormatSchema)","Method","* Method to call to make this parser use specified schema. Method must
     * be called before trying to parse any content, right after parser instance
     * has been created.
     * Note that not all parsers support schemas; and those that do usually only
     * accept specific types of schemas: ones defined for data format parser can read.
     *<p>
     * If parser does not support specified schema, {@link UnsupportedOperationException}
     * is thrown.
     *
     * @param schema Schema to use
     *
     * @throws UnsupportedOperationException if parser does not support schema","public void setSchema(FormatSchema schema) {
    throw new UnsupportedOperationException(""Parser of type "" + getClass().getName() + "" does not support schema of type '"" + schema.getSchemaType() + ""'"");
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.setSchema(FormatSchema).schema","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.setSchema(FormatSchema)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getSchema()","Method","* Method for accessing Schema that this parser uses, if any.
     * Default implementation returns null.
     *
     * @return Schema in use by this parser, if any; {@code null} if none
     *
     * @since 2.1","public FormatSchema getSchema() {
    return null;
}","FormatSchema","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.canUseSchema(FormatSchema)","Method","* Method that can be used to verify that given schema can be used with
     * this parser (using {@link #setSchema}).
     *
     * @param schema Schema to check
     *
     * @return True if this parser can use given schema; false if not","public boolean canUseSchema(FormatSchema schema) {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.canUseSchema(FormatSchema).schema","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.canUseSchema(FormatSchema)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()","Method","* Method that can be called to determine if a custom
     * {@link ObjectCodec} is needed for binding data parsed
     * using {@link JsonParser} constructed by this factory
     * (which typically also implies the same for serialization
     * with {@link JsonGenerator}).
     *
     * @return True if format-specific codec is needed with this parser; false if a general
     *   {@link ObjectCodec} is enough
     *
     * @since 2.1","public boolean requiresCustomCodec() {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.canParseAsync()","Method","* Method that can be called to determine if this parser instance
     * uses non-blocking (""asynchronous"") input access for decoding or not.
     * Access mode is determined by earlier calls via {@link JsonFactory};
     * it may not be changed after construction.
     *<p>
     * If non-blocking decoding is (@code true}, it is possible to call
     * {@link #getNonBlockingInputFeeder()} to obtain object to use
     * for feeding input; otherwise (<code>false</code> returned)
     * input is read by blocking
     *
     * @return True if this is a non-blocking (""asynchronous"") parser
     *
     * @since 2.9","public boolean canParseAsync() {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()","Method","* Method that will either return a feeder instance (if parser uses
     * non-blocking, aka asynchronous access); or <code>null</code> for
     * parsers that use blocking I/O.
     *
     * @return Input feeder to use with non-blocking (async) parsing
     *
     * @since 2.9","public NonBlockingInputFeeder getNonBlockingInputFeeder() {
    return null;
}","NonBlockingInputFeeder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getReadCapabilities()","Method","* Accessor for getting metadata on capabilities of this parser, based on
     * underlying data format being read (directly or indirectly).
     *
     * @return Set of read capabilities for content to read via this parser
     *
     * @since 2.12","public JacksonFeatureSet<StreamReadCapability> getReadCapabilities() {
    return DEFAULT_READ_CAPABILITIES;
}","JacksonFeatureSet","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.version()","Abstract Method","* Accessor for getting version of the core package, given a parser instance.
     * Left for sub-classes to implement.
     *
     * @return Version of this generator (derived from version declared for
     *   {@code jackson-core} jar that contains the class","@Override
public abstract Version version();","Version","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.close()","Abstract Method","* Closes the parser so that no further iteration or data access
     * can be made; will also close the underlying input source
     * if parser either <b>owns</b> the input source, or feature
     * {@link Feature#AUTO_CLOSE_SOURCE} is enabled.
     * Whether parser owns the input source depends on factory
     * method that was used to construct instance (so check
     * {@link com.fasterxml.jackson.core.JsonFactory} for details,
     * but the general
     * idea is that if caller passes in closable resource (such
     * as {@link InputStream} or {@link Reader}) parser does NOT
     * own the source; but if it passes a reference (such as
     * {@link java.io.File} or {@link java.net.URL} and creates
     * stream or reader it does own them.
     *
     * @throws IOException if there is either an underlying I/O problem","@Override
public abstract void close() throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.isClosed()","Abstract Method","* Method that can be called to determine whether this parser
     * is closed or not. If it is closed, no new tokens can be
     * retrieved by calling {@link #nextToken} (and the underlying
     * stream may be closed). Closing may be due to an explicit
     * call to {@link #close} or because parser has encountered
     * end of input.
     *
     * @return {@code True} if this parser instance has been closed","public abstract boolean isClosed();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getParsingContext()","Abstract Method","* Method that can be used to access current parsing context reader
     * is in. There are 3 different types: root, array and object contexts,
     * with slightly different available information. Contexts are
     * hierarchically nested, and can be used for example for figuring
     * out part of the input document that correspond to specific
     * array or object (for highlighting purposes, or error reporting).
     * Contexts can also be used for simple xpath-like matching of
     * input, if so desired.
     *
     * @return Stream input context ({@link JsonStreamContext}) associated with this parser","public abstract JsonStreamContext getParsingContext();","JsonStreamContext","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.currentLocation()","Method","* Method that returns location of the last processed input unit (character
     * or byte) from the input;
     * usually for error reporting purposes.
     *<p>
     * Note that the location is not guaranteed to be accurate (although most
     * implementation will try their best): some implementations may only
     * report specific boundary locations (start or end locations of tokens)
     * and others only return {@link JsonLocation#NA} due to not having access
     * to input location information (when delegating actual decoding work
     * to other library)
     *
     * @return Location of the last processed input unit (byte or character)
     *
     * @since 2.13","public JsonLocation currentLocation() {
    return getCurrentLocation();
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.currentTokenLocation()","Method","* Method that return the <b>starting</b> location of the current
     * (most recently returned)
     * token; that is, the position of the first input unit (character or byte) from input
     * that starts the current token.
     *<p>
     * Note that the location is not guaranteed to be accurate (although most
     * implementation will try their best): some implementations may only
     * return {@link JsonLocation#NA} due to not having access
     * to input location information (when delegating actual decoding work
     * to other library)
     *
     * @return Starting location of the token parser currently points to
     *
     * @since 2.13 (will eventually replace {@link #getTokenLocation})","public JsonLocation currentTokenLocation() {
    return getTokenLocation();
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.currentTokenCount()","Method","* Get an approximate count of the number of tokens that have been read.
     * This count is likely to be only updated if {@link StreamReadConstraints.Builder#maxTokenCount(long)}
     * has been used to set a limit on the number of tokens that can be read.
     *
     * @return the number of tokens that have been read (-1 if the count is not available)
     * @since 2.18","public long currentTokenCount() {
    return -1L;
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getCurrentLocation()","Abstract Method","* Deprecated alias for {@link #currentLocation()} (removed from Jackson 3.0).
     *
     * @return Location of the last processed input unit (byte or character)
     *
     * @deprecated Since 2.17 use {@link #currentLocation()} instead","// since 2.17
@Deprecated
public abstract JsonLocation getCurrentLocation();","JsonLocation","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getTokenLocation()","Abstract Method","* Deprecated alias for {@link #currentTokenLocation()} (removed from Jackson 3.0).
     *
     * @return Starting location of the token parser currently points to
     *
     * @deprecated Since 2.17 use {@link #currentTokenLocation()} instead","// since 2.17
@Deprecated
public abstract JsonLocation getTokenLocation();","JsonLocation","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.currentValue()","Method","* Helper method, usually equivalent to:
     *<code>
     *   getParsingContext().getCurrentValue();
     *</code>
     *<p>
     * Note that ""current value"" is NOT populated (or used) by Streaming parser;
     * it is only used by higher-level data-binding functionality.
     * The reason it is included here is that it can be stored and accessed hierarchically,
     * and gets passed through data-binding.
     *
     * @return ""Current value"" associated with the current input context (state) of this parser
     *
     * @since 2.13 (added as replacement for older {@link #getCurrentValue()}","public Object currentValue() {
    // Note: implemented directly in 2.17, no longer delegating to getCurrentValue()
    JsonStreamContext ctxt = getParsingContext();
    return (ctxt == null) ? null : ctxt.getCurrentValue();
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getCurrentValue()","Method","* Deprecated alias for {@link #currentValue()} (removed from Jackson 3.0).
     *
     * @return Location of the last processed input unit (byte or character)
     *
     * @deprecated Since 2.17 use {@link #currentValue()} instead","// since 2.17
@Deprecated
public Object getCurrentValue() {
    return currentValue();
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.assignCurrentValue(Object)","Method","* Helper method, usually equivalent to:
     *<code>
     *   getParsingContext().setCurrentValue(v);
     *</code>
     *
     * @param v Current value to assign for the current input context of this parser
     *
     * @since 2.13 (added as replacement for older {@link #setCurrentValue}","public void assignCurrentValue(Object v) {
    // Note: implemented directly in 2.17, no longer delegating to setCurrentValue()
    JsonStreamContext ctxt = getParsingContext();
    if (ctxt != null) {
        ctxt.setCurrentValue(v);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.assignCurrentValue(Object).v","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.assignCurrentValue(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.setCurrentValue(Object)","Method","* Deprecated alias for {@link #assignCurrentValue(Object)} (removed from Jackson 3.0).
     *
     * @param v Current value to assign for the current input context of this parser
     *
     * @deprecated Since 2.17 use {@link #assignCurrentValue} instead","// since 2.17
@Deprecated
public void setCurrentValue(Object v) {
    assignCurrentValue(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.setCurrentValue(Object).v","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.setCurrentValue(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.releaseBuffered(OutputStream)","Method","* Method that can be called to push back any content that
     * has been read but not consumed by the parser. This is usually
     * done after reading all content of interest using parser.
     * Content is released by writing it to given stream if possible;
     * if underlying input is byte-based it can released, if not (char-based)
     * it cannot.
     *
     * @param out OutputStream to which buffered, undecoded content is written to
     *
     * @return -1 if the underlying content source is not byte based
     *    (that is, input cannot be sent to {@link OutputStream};
     *    otherwise number of bytes released (0 if there was nothing to release)
     *
     * @throws IOException if write to stream threw exception","public int releaseBuffered(OutputStream out) throws IOException {
    return -1;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.releaseBuffered(OutputStream).out","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.releaseBuffered(OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.releaseBuffered(Writer)","Method","* Method that can be called to push back any content that
     * has been read but not consumed by the parser.
     * This is usually
     * done after reading all content of interest using parser.
     * Content is released by writing it to given writer if possible;
     * if underlying input is char-based it can released, if not (byte-based)
     * it cannot.
     *
     * @param w Writer to which buffered but unprocessed content is written to
     *
     * @return -1 if the underlying content source is not char-based
     *    (that is, input cannot be sent to {@link Writer};
     *    otherwise number of chars released (0 if there was nothing to release)
     *
     * @throws IOException if write using Writer threw exception","public int releaseBuffered(Writer w) throws IOException {
    return -1;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.releaseBuffered(Writer).w","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.releaseBuffered(Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.enable(Feature)","Method","* Method for enabling specified parser feature
     * (check {@link Feature} for list of features)
     *
     * @param f Feature to enable
     *
     * @return This parser, to allow call chaining","public JsonParser enable(Feature f) {
    _features |= f.getMask();
    return this;
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.enable(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.enable(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.disable(Feature)","Method","* Method for disabling specified  feature
     * (check {@link Feature} for list of features)
     *
     * @param f Feature to disable
     *
     * @return This parser, to allow call chaining","public JsonParser disable(Feature f) {
    _features &= ~f.getMask();
    return this;
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.disable(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.disable(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.configure(Feature,boolean)","Method","* Method for enabling or disabling specified feature
     * (check {@link Feature} for list of features)
     *
     * @param f Feature to enable or disable
     * @param state Whether to enable feature ({@code true}) or disable ({@code false})
     *
     * @return This parser, to allow call chaining","public JsonParser configure(Feature f, boolean state) {
    if (state)
        enable(f);
    else
        disable(f);
    return this;
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.configure(Feature,boolean).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.configure(Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.configure(Feature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.core.JsonParser.configure(Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.isEnabled(Feature)","Method","* Method for checking whether specified {@link Feature} is enabled.
     *
     * @param f Feature to check
     *
     * @return {@code True} if feature is enabled; {@code false} otherwise","public boolean isEnabled(Feature f) {
    return f.enabledIn(_features);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.isEnabled(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.isEnabled(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.isEnabled(StreamReadFeature)","Method","* Method for checking whether specified {@link Feature} is enabled.
     *
     * @param f Feature to check
     *
     * @return {@code True} if feature is enabled; {@code false} otherwise
     *
     * @since 2.10","public boolean isEnabled(StreamReadFeature f) {
    return f.mappedFeature().enabledIn(_features);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.isEnabled(StreamReadFeature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.isEnabled(StreamReadFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getFeatureMask()","Method","* Bulk access method for getting state of all standard {@link Feature}s.
     *
     * @return Bit mask that defines current states of all standard {@link Feature}s.
     *
     * @since 2.3","public int getFeatureMask() {
    return _features;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.setFeatureMask(int)","Method","* Bulk set method for (re)setting states of all standard {@link Feature}s
     *
     * @param mask Bit mask that defines set of features to enable
     *
     * @return This parser, to allow call chaining
     *
     * @since 2.3
     * @deprecated Since 2.7, use {@link #overrideStdFeatures(int, int)} instead","@Deprecated
public JsonParser setFeatureMask(int mask) {
    _features = mask;
    return this;
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.setFeatureMask(int).mask","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.setFeatureMask(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int,int)","Method","* Bulk set method for (re)setting states of features specified by <code>mask</code>.
     * Functionally equivalent to
     *<code>
     *    int oldState = getFeatureMask();
     *    int newState = (oldState &amp; ~mask) | (values &amp; mask);
     *    setFeatureMask(newState);
     *</code>
     * but preferred as this lets caller more efficiently specify actual changes made.
     *
     * @param values Bit mask of set/clear state for features to change
     * @param mask Bit mask of features to change
     *
     * @return This parser, to allow call chaining
     *
     * @since 2.6","public JsonParser overrideStdFeatures(int values, int mask) {
    int newState = (_features & ~mask) | (values & mask);
    return setFeatureMask(newState);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int,int).values","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int,int).mask","Parameter_2","Belong to com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getFormatFeatures()","Method","* Bulk access method for getting state of all {@link FormatFeature}s, format-specific
     * on/off configuration settings.
     *
     * @return Bit mask that defines current states of all standard {@link FormatFeature}s.
     *
     * @since 2.6","public int getFormatFeatures() {
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)","Method","* Bulk set method for (re)setting states of {@link FormatFeature}s,
     * by specifying values (set / clear) along with a mask, to determine
     * which features to change, if any.
     *<p>
     * Default implementation will simply throw an exception to indicate that
     * the parser implementation does not support any {@link FormatFeature}s.
     *
     * @param values Bit mask of set/clear state for features to change
     * @param mask Bit mask of features to change
     *
     * @return This parser, to allow call chaining
     *
     * @since 2.6","public JsonParser overrideFormatFeatures(int values, int mask) {
    // 08-Oct-2018, tatu: For 2.10 we actually do get `JsonReadFeature`s, although they
    //    are (for 2.x only, not for 3.x) mapper to legacy settings. So do not freak out:
    //        throw new IllegalArgumentException(""No FormatFeatures defined for parser of type ""+getClass().getName());
    return this;
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int).values","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int).mask","Parameter_2","Belong to com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.nextToken()","Abstract Method","* Main iteration method, which will advance stream enough
     * to determine type of the next token, if any. If none
     * remaining (stream has no content other than possible
     * white space before ending), null will be returned.
     *
     * @return Next token from the stream, if any found, or null
     *   to indicate end-of-input
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public abstract JsonToken nextToken() throws IOException;","JsonToken","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.nextValue()","Abstract Method","* Iteration method that will advance stream enough
     * to determine type of the next token that is a value type
     * (including JSON Array and Object start/end markers).
     * Or put another way, nextToken() will be called once,
     * and if {@link JsonToken#FIELD_NAME} is returned, another
     * time to get the value for the field.
     * Method is most useful for iterating over value entries
     * of JSON objects; field name will still be available
     * by calling {@link #currentName} when parser points to
     * the value.
     *
     * @return Next non-field-name token from the stream, if any found,
     *   or null to indicate end-of-input (or, for non-blocking
     *   parsers, {@link JsonToken#NOT_AVAILABLE} if no tokens were
     *   available yet)
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public abstract JsonToken nextValue() throws IOException;","JsonToken","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.nextFieldName(SerializableString)","Method","* Method that fetches next token (as if calling {@link #nextToken}) and
     * verifies whether it is {@link JsonToken#FIELD_NAME} with specified name
     * and returns result of that comparison.
     * It is functionally equivalent to:
     *<pre>
     *  return (nextToken() == JsonToken.FIELD_NAME) &amp;&amp; str.getValue().equals(currentName());
     *</pre>
     * but may be faster for parser to verify, and can therefore be used if caller
     * expects to get such a property name from input next.
     *
     * @param str Property name to compare next token to (if next token is
     *   <code>JsonToken.FIELD_NAME</code>)
     *
     * @return {@code True} if parser advanced to {@code JsonToken.FIELD_NAME} with
     *    specified name; {@code false} otherwise (different token or non-matching name)
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public boolean nextFieldName(SerializableString str) throws IOException {
    return (nextToken() == JsonToken.FIELD_NAME) && str.getValue().equals(currentName());
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.nextFieldName(SerializableString).str","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.nextFieldName(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.nextFieldName()","Method","* Method that fetches next token (as if calling {@link #nextToken}) and
     * verifies whether it is {@link JsonToken#FIELD_NAME}; if it is,
     * returns same as {@link #currentName()}, otherwise null.
     *
     * @return Name of the the {@code JsonToken.FIELD_NAME} parser advanced to, if any;
     *   {@code null} if next token is of some other type
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems
     *
     * @since 2.5","public String nextFieldName() throws IOException {
    return (nextToken() == JsonToken.FIELD_NAME) ? currentName() : null;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.nextTextValue()","Method","* Method that fetches next token (as if calling {@link #nextToken}) and
     * if it is {@link JsonToken#VALUE_STRING} returns contained String value;
     * otherwise returns null.
     * It is functionally equivalent to:
     *<pre>
     *  return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;
     *</pre>
     * but may be faster for parser to process, and can therefore be used if caller
     * expects to get a String value next from input.
     *
     * @return Text value of the {@code JsonToken.VALUE_STRING} token parser advanced
     *   to; or {@code null} if next token is of some other type
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public String nextTextValue() throws IOException {
    return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.nextIntValue(int)","Method","* Method that fetches next token (as if calling {@link #nextToken}) and
     * if it is {@link JsonToken#VALUE_NUMBER_INT} returns 32-bit int value;
     * otherwise returns specified default value
     * It is functionally equivalent to:
     *<pre>
     *  return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
     *</pre>
     * but may be faster for parser to process, and can therefore be used if caller
     * expects to get an int value next from input.
     *<p>
     * NOTE: value checks are performed similar to {@link #getIntValue()}
     *
     * @param defaultValue Value to return if next token is NOT of type {@code JsonToken.VALUE_NUMBER_INT}
     *
     * @return Integer ({@code int}) value of the {@code JsonToken.VALUE_NUMBER_INT} token parser advanced
     *   to; or {@code defaultValue} if next token is of some other type
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems
     * @throws InputCoercionException if integer number does not fit in Java {@code int}","public int nextIntValue(int defaultValue) throws IOException {
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.nextIntValue(int).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.nextIntValue(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.nextLongValue(long)","Method","* Method that fetches next token (as if calling {@link #nextToken}) and
     * if it is {@link JsonToken#VALUE_NUMBER_INT} returns 64-bit long value;
     * otherwise returns specified default value
     * It is functionally equivalent to:
     *<pre>
     *  return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;
     *</pre>
     * but may be faster for parser to process, and can therefore be used if caller
     * expects to get a long value next from input.
     *<p>
     * NOTE: value checks are performed similar to {@link #getLongValue()}
     *
     * @param defaultValue Value to return if next token is NOT of type {@code JsonToken.VALUE_NUMBER_INT}
     *
     * @return {@code long} value of the {@code JsonToken.VALUE_NUMBER_INT} token parser advanced
     *   to; or {@code defaultValue} if next token is of some other type
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems
     * @throws InputCoercionException if integer number does not fit in Java {@code long}","public long nextLongValue(long defaultValue) throws IOException {
    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.nextLongValue(long).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.nextLongValue(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.nextBooleanValue()","Method","* Method that fetches next token (as if calling {@link #nextToken}) and
     * if it is {@link JsonToken#VALUE_TRUE} or {@link JsonToken#VALUE_FALSE}
     * returns matching Boolean value; otherwise return null.
     * It is functionally equivalent to:
     *<pre>
     *  JsonToken t = nextToken();
     *  if (t == JsonToken.VALUE_TRUE) return Boolean.TRUE;
     *  if (t == JsonToken.VALUE_FALSE) return Boolean.FALSE;
     *  return null;
     *</pre>
     * but may be faster for parser to process, and can therefore be used if caller
     * expects to get a Boolean value next from input.
     *
     * @return {@code Boolean} value of the {@code JsonToken.VALUE_TRUE} or {@code JsonToken.VALUE_FALSE}
     *   token parser advanced to; or {@code null} if next token is of some other type
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public Boolean nextBooleanValue() throws IOException {
    JsonToken t = nextToken();
    if (t == JsonToken.VALUE_TRUE) {
        return Boolean.TRUE;
    }
    if (t == JsonToken.VALUE_FALSE) {
        return Boolean.FALSE;
    }
    return null;
}","Boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.skipChildren()","Abstract Method","* Method that will skip all child tokens of an array or
     * object token that the parser currently points to,
     * if (and only if) stream points to
     * {@link JsonToken#START_OBJECT} or {@link JsonToken#START_ARRAY}.
     * If not, it will do nothing.
     * After skipping, stream will point to <b>matching</b>
     * {@link JsonToken#END_OBJECT} or {@link JsonToken#END_ARRAY}
     * (possibly skipping nested pairs of START/END OBJECT/ARRAY tokens
     * as well as value tokens).
     * The idea is that after calling this method, application
     * will call {@link #nextToken} to point to the next
     * available token, if any.
     *
     * @return This parser, to allow call chaining
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public abstract JsonParser skipChildren() throws IOException;","JsonParser","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.finishToken()","Method","* Method that may be used to force full handling of the current token
     * so that even if lazy processing is enabled, the whole contents are
     * read for possible retrieval. This is usually used to ensure that
     * the token end location is available, as well as token contents
     * (similar to what calling, say {@link #getTextCharacters()}, would
     * achieve).
     *<p>
     * Note that for many dataformat implementations this method
     * will not do anything; this is the default implementation unless
     * overridden by sub-classes.
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems
     *
     * @since 2.8","public void finishToken() throws IOException {
    // nothing to do
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.currentToken()","Method","* Accessor to find which token parser currently points to, if any;
     * null will be returned if none.
     * If return value is non-null, data associated with the token
     * is available via other accessor methods.
     *
     * @return Type of the token this parser currently points to,
     *   if any: null before any tokens have been read, and
     *   after end-of-input has been encountered, as well as
     *   if the current token has been explicitly cleared.
     *
     * @since 2.8","public JsonToken currentToken() {
    // !!! TODO: switch direction in 2.18 or later
    return getCurrentToken();
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.currentTokenId()","Method","* Method similar to {@link #getCurrentToken()} but that returns an
     * <code>int</code> instead of {@link JsonToken} (enum value).
     *<p>
     * Use of int directly is typically more efficient on switch statements,
     * so this method may be useful when building low-overhead codecs.
     * Note, however, that effect may not be big enough to matter: make sure
     * to profile performance before deciding to use this method.
     *
     * @since 2.8
     *
     * @return {@code int} matching one of constants from {@link JsonTokenId}.","public int currentTokenId() {
    return getCurrentTokenId();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getCurrentToken()","Abstract Method","* Alias for {@link #currentToken()}, may be deprecated sometime after
     * Jackson 2.13 (will be removed from 3.0).
     *
     * @return Type of the token this parser currently points to,
     *   if any: null before any tokens have been read, and","public abstract JsonToken getCurrentToken();","JsonToken","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getCurrentTokenId()","Abstract Method","* Deprecated alias for {@link #currentTokenId()}.
     *
     * @return {@code int} matching one of constants from {@link JsonTokenId}.
     *
     * @deprecated Since 2.12 use {@link #currentTokenId} instead","@Deprecated
public abstract int getCurrentTokenId();","int","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.hasCurrentToken()","Abstract Method","* Method for checking whether parser currently points to
     * a token (and data for that token is available).
     * Equivalent to check for <code>parser.getCurrentToken() != null</code>.
     *
     * @return True if the parser just returned a valid
     *   token via {@link #nextToken}; false otherwise (parser
     *   was just constructed, encountered end-of-input
     *   and returned null from {@link #nextToken}, or the token
     *   has been consumed)","public abstract boolean hasCurrentToken();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.hasTokenId(int)","Abstract Method","* Method that is functionally equivalent to:
     *<code>
     *  return currentTokenId() == id
     *</code>
     * but may be more efficiently implemented.
     *<p>
     * Note that no traversal or conversion is performed; so in some
     * cases calling method like {@link #isExpectedStartArrayToken()}
     * is necessary instead.
     *
     * @param id Token id to match (from (@link JsonTokenId})
     *
     * @return {@code True} if the parser current points to specified token
     *
     * @since 2.5","public abstract boolean hasTokenId(int id);","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.hasTokenId(int).id","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.hasTokenId(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.hasToken(JsonToken)","Abstract Method","* Method that is functionally equivalent to:
     *<code>
     *  return currentToken() == t
     *</code>
     * but may be more efficiently implemented.
     *<p>
     * Note that no traversal or conversion is performed; so in some
     * cases calling method like {@link #isExpectedStartArrayToken()}
     * is necessary instead.
     *
     * @param t Token to match
     *
     * @return {@code True} if the parser current points to specified token
     *
     * @since 2.6","public abstract boolean hasToken(JsonToken t);","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.hasToken(JsonToken).t","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.hasToken(JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.isExpectedStartArrayToken()","Method","* Specialized accessor that can be used to verify that the current
     * token indicates start array (usually meaning that current token
     * is {@link JsonToken#START_ARRAY}) when start array is expected.
     * For some specialized parsers this can return true for other cases
     * as well; this is usually done to emulate arrays in cases underlying
     * format is ambiguous (XML, for example, has no format-level difference
     * between Objects and Arrays; it just has elements).
     *<p>
     * Default implementation is equivalent to:
     *<pre>
     *   currentToken() == JsonToken.START_ARRAY
     *</pre>
     * but may be overridden by custom parser implementations.
     *
     * @return True if the current token can be considered as a
     *   start-array marker (such {@link JsonToken#START_ARRAY});
     *   {@code false} if not","public boolean isExpectedStartArrayToken() {
    return currentToken() == JsonToken.START_ARRAY;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.isExpectedStartObjectToken()","Method","* Similar to {@link #isExpectedStartArrayToken()}, but checks whether stream
     * currently points to {@link JsonToken#START_OBJECT}.
     *
     * @return True if the current token can be considered as a
     *   start-array marker (such {@link JsonToken#START_OBJECT});
     *   {@code false} if not
     *
     * @since 2.5","public boolean isExpectedStartObjectToken() {
    return currentToken() == JsonToken.START_OBJECT;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.isExpectedNumberIntToken()","Method","* Similar to {@link #isExpectedStartArrayToken()}, but checks whether stream
     * currently points to {@link JsonToken#VALUE_NUMBER_INT}.
     *<p>
     * The initial use case is for XML backend to efficiently (attempt to) coerce
     * textual content into numbers.
     *
     * @return True if the current token can be considered as a
     *   start-array marker (such {@link JsonToken#VALUE_NUMBER_INT});
     *   {@code false} if not
     *
     * @since 2.12","public boolean isExpectedNumberIntToken() {
    return currentToken() == JsonToken.VALUE_NUMBER_INT;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.isNaN()","Method","* Accessor for checking whether current token is a special
     * ""not-a-number"" (NaN) token (including both ""NaN"" AND
     * positive/negative infinity!). These values are not supported by all formats:
     * JSON, for example, only supports them if
     * {@link JsonReadFeature#ALLOW_NON_NUMERIC_NUMBERS} is enabled.
     *<p>
     * NOTE: in case where numeric value is outside range of requested type --
     * most notably {@link java.lang.Float} or {@link java.lang.Double} -- and
     * decoding results effectively in a NaN value, this method DOES NOT return
     * {@code true}: only explicit incoming markers do.
     * This is because value could still be accessed as a valid {@link BigDecimal}.
     *
     * @return {@code True} if the current token is reported as {@link JsonToken#VALUE_NUMBER_FLOAT}
     *   and represents a ""Not a Number"" value; {@code false} for other tokens and regular
     *   floating-point numbers.
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems
     *
     * @since 2.9 (slight change in semantics in 2.17)","public boolean isNaN() throws IOException {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.clearCurrentToken()","Abstract Method","* Method called to ""consume"" the current token by effectively
     * removing it so that {@link #hasCurrentToken} returns false, and
     * {@link #getCurrentToken} null).
     * Cleared token value can still be accessed by calling
     * {@link #getLastClearedToken} (if absolutely needed), but
     * usually isn't.
     *<p>
     * Method was added to be used by the optional data binder, since
     * it has to be able to consume last token used for binding (so that
     * it will not be used again).","public abstract void clearCurrentToken();","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getLastClearedToken()","Abstract Method","* Method that can be called to get the last token that was
     * cleared using {@link #clearCurrentToken}. This is not necessarily
     * the latest token read.
     * Will return null if no tokens have been cleared,
     * or if parser has been closed.
     *
     * @return Last cleared token, if any; {@code null} otherwise","public abstract JsonToken getLastClearedToken();","JsonToken","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.overrideCurrentName(String)","Abstract Method","* Method that can be used to change what is considered to be
     * the current (field) name.
     * May be needed to support non-JSON data formats or unusual binding
     * conventions; not needed for typical processing.
     *<p>
     * Note that use of this method should only be done as sort of last
     * resort, as it is a work-around for regular operation.
     *
     * @param name Name to use as the current name; may be null.","public abstract void overrideCurrentName(String name);","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.overrideCurrentName(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.overrideCurrentName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getCurrentName()","Abstract Method","* Deprecated alias of {@link #currentName()}.
     *
     * @return Name of the current field in the parsing context
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems
     *
     * @deprecated Since 2.17 use {@link #currentName} instead.","@Deprecated
public abstract String getCurrentName() throws IOException;","String","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.currentName()","Method","* Method that can be called to get the name associated with
     * the current token: for {@link JsonToken#FIELD_NAME}s it will
     * be the same as what {@link #getText} returns;
     * for field values it will be preceding field name;
     * and for others (array values, root-level values) null.
     *
     * @return Name of the current field in the parsing context
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems
     *
     * @since 2.10","public String currentName() throws IOException {
    // !!! TODO: switch direction in 2.18 or later
    return getCurrentName();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getText()","Abstract Method","* Method for accessing textual representation of the current token;
     * if no current token (before first call to {@link #nextToken}, or
     * after encountering end-of-input), returns null.
     * Method can be called for any token type.
     *
     * @return Textual value associated with the current token (one returned
     *   by {@link #nextToken()} or other iteration methods)
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems, including if the text is too large,
     *   see {@link com.fasterxml.jackson.core.StreamReadConstraints.Builder#maxStringLength(int)}","public abstract String getText() throws IOException;","String","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getText(Writer)","Method","* Method to read the textual representation of the current token in chunks and
     * pass it to the given Writer.
     * Conceptually same as calling:
     *<pre>
     *  writer.write(parser.getText());
     *</pre>
     * but should typically be more efficient as longer content does need to
     * be combined into a single <code>String</code> to return, and write
     * can occur directly from intermediate buffers Jackson uses.
     *<p>
     * NOTE: textual content <b>will</b> still be buffered (usually
     * using {@link TextBuffer}) and <b>will</b> be accessible with
     * other {@code getText()} calls (that is, it will not be consumed).
     * So this accessor only avoids construction of {@link java.lang.String}
     * compared to plain {@link #getText()} method.
     *
     * @param writer Writer to write textual content to
     *
     * @return The number of characters written to the Writer
     *
     * @throws IOException for low-level read issues or writes using passed
     *   {@code writer}, or
     *   {@link JsonParseException} for decoding problems
     *
     * @since 2.8","public int getText(Writer writer) throws IOException, UnsupportedOperationException {
    String str = getText();
    if (str == null) {
        return 0;
    }
    writer.write(str);
    return str.length();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getText(Writer).writer","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.getText(Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getTextCharacters()","Abstract Method","* Method similar to {@link #getText}, but that will return
     * underlying (unmodifiable) character array that contains
     * textual value, instead of constructing a String object
     * to contain this information.
     * Note, however, that:
     *<ul>
     * <li>Textual contents are not guaranteed to start at
     *   index 0 (rather, call {@link #getTextOffset}) to
     *   know the actual offset
     *  </li>
     * <li>Length of textual contents may be less than the
     *  length of returned buffer: call {@link #getTextLength}
     *  for actual length of returned content.
     *  </li>
     * </ul>
     *<p>
     * Note that caller <b>MUST NOT</b> modify the returned
     * character array in any way -- doing so may corrupt
     * current parser state and render parser instance useless.
     *<p>
     * The only reason to call this method (over {@link #getText})
     * is to avoid construction of a String object (which
     * will make a copy of contents).
     *
     * @return Buffer that contains the current textual value (but not necessarily
     *    at offset 0, and not necessarily until the end of buffer)
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems, including if the text is too large,
     *   see {@link com.fasterxml.jackson.core.StreamReadConstraints.Builder#maxStringLength(int)}","public abstract char[] getTextCharacters() throws IOException;","char[]","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getTextLength()","Abstract Method","* Accessor used with {@link #getTextCharacters}, to know length
     * of String stored in returned buffer.
     *
     * @return Number of characters within buffer returned
     *   by {@link #getTextCharacters} that are part of
     *   textual content of the current token.
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public abstract int getTextLength() throws IOException;","int","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getTextOffset()","Abstract Method","* Accessor used with {@link #getTextCharacters}, to know offset
     * of the first text content character within buffer.
     *
     * @return Offset of the first character within buffer returned
     *   by {@link #getTextCharacters} that is part of
     *   textual content of the current token.
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public abstract int getTextOffset() throws IOException;","int","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.hasTextCharacters()","Abstract Method","* Method that can be used to determine whether calling of
     * {@link #getTextCharacters} would be the most efficient
     * way to access textual content for the event parser currently
     * points to.
     *<p>
     * Default implementation simply returns false since only actual
     * implementation class has knowledge of its internal buffering
     * state.
     * Implementations are strongly encouraged to properly override
     * this method, to allow efficient copying of content by other
     * code.
     *
     * @return True if parser currently has character array that can
     *   be efficiently returned via {@link #getTextCharacters}; false
     *   means that it may or may not exist","public abstract boolean hasTextCharacters();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getNumberValue()","Abstract Method","* Generic number value accessor method that will work for
     * all kinds of numeric values. It will return the optimal
     * (simplest/smallest possible) wrapper object that can
     * express the numeric value just parsed.
     *
     * @return Numeric value of the current token in its most optimal
     *   representation
     *
     * @throws IOException Problem with access: {@link JsonParseException} if
     *    the current token is not numeric, or if decoding of the value fails
     *    (invalid format for numbers); plain {@link IOException} if underlying
     *    content read fails (possible if values are extracted lazily)","public abstract Number getNumberValue() throws IOException;","Number","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getNumberValueExact()","Method","* Method similar to {@link #getNumberValue} with the difference that
     * for floating-point numbers value returned may be {@link BigDecimal}
     * if the underlying format does not store floating-point numbers using
     * native representation: for example, textual formats represent numbers
     * as Strings (which are 10-based), and conversion to {@link java.lang.Double}
     * is potentially lossy operation.
     *<p>
     * Default implementation simply returns {@link #getNumberValue()}
     *
     * @return Numeric value of the current token using most accurate representation
     *
     * @throws IOException Problem with access: {@link JsonParseException} if
     *    the current token is not numeric, or if decoding of the value fails
     *    (invalid format for numbers); plain {@link IOException} if underlying
     *    content read fails (possible if values are extracted lazily)
     *
     * @since 2.12","public Number getNumberValueExact() throws IOException {
    return getNumberValue();
}","Number","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getNumberValueDeferred()","Method","* Method similar to {@link #getNumberValue} but that returns
     * <b>either</b> same {@link Number} value as {@link #getNumberValue()}
     * (if already decoded), <b>or</b> {@code String} representation of
     * as-of-yet undecoded number.
     * Typically textual formats allow deferred decoding from String, whereas
     * binary formats either decode numbers eagerly or have binary representation
     * from which to decode value to return.
     *<p>
     * Same constraints apply to calling this method as to {@link #getNumberValue()}:
     * current token must be either
     * {@link JsonToken#VALUE_NUMBER_INT} or
     * {@link JsonToken#VALUE_NUMBER_FLOAT};
     * otherwise an exception is thrown
     *<p>
     * Default implementation simply returns {@link #getNumberValue()}
     *
     * @return Either {@link Number} (for already decoded numbers) or
     *   {@link String} (for deferred decoding).
     *
     * @throws IOException Problem with access: {@link JsonParseException} if
     *    the current token is not numeric, or if decoding of the value fails
     *    (invalid format for numbers); plain {@link IOException} if underlying
     *    content read fails (possible if values are extracted lazily)
     *
     * @since 2.15","public Object getNumberValueDeferred() throws IOException {
    return getNumberValue();
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getNumberType()","Abstract Method","* If current token is of type
     * {@link JsonToken#VALUE_NUMBER_INT} or
     * {@link JsonToken#VALUE_NUMBER_FLOAT}, returns
     * one of {@link NumberType} constants; otherwise returns {@code null}.
     *
     * @return Type of current number, if parser points to numeric token; {@code null} otherwise
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public abstract NumberType getNumberType() throws IOException;","NumberType","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getNumberTypeFP()","Method","* If current token is of type
     * {@link JsonToken#VALUE_NUMBER_FLOAT}, returns
     * one of {@link NumberTypeFP} constants; otherwise returns
     * {@link NumberTypeFP#UNKNOWN}.
     *<p>
     * Default implementation as of Jackson 2.x will call {@link #getNumberType()}
     * and translate types -- this needs to be overriden actual implementations
     * if this is not sufficient (which it usually is not for textual formats).
     *
     * @return Type of current floating-point number, if parser points to numeric token;
     *   {@link NumberTypeFP#UNKNOWN} otherwise.
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems
     *
     * @since 2.17","public NumberTypeFP getNumberTypeFP() throws IOException {
    NumberType nt = getNumberType();
    if (nt == NumberType.BIG_DECIMAL) {
        return NumberTypeFP.BIG_DECIMAL;
    }
    if (nt == NumberType.DOUBLE) {
        return NumberTypeFP.DOUBLE64;
    }
    if (nt == NumberType.FLOAT) {
        return NumberTypeFP.FLOAT32;
    }
    return NumberTypeFP.UNKNOWN;
}","NumberTypeFP","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getByteValue()","Method","* Numeric accessor that can be called when the current
     * token is of type {@link JsonToken#VALUE_NUMBER_INT} and
     * it can be expressed as a value of Java byte primitive type.
     * Note that in addition to ""natural"" input range of {@code [-128, 127]},
     * this also allows ""unsigned 8-bit byte"" values {@code [128, 255]}:
     * but for this range value will be translated by truncation, leading
     * to sign change.
     *<p>
     * It can also be called for {@link JsonToken#VALUE_NUMBER_FLOAT};
     * if so, it is equivalent to calling {@link #getDoubleValue}
     * and then casting; except for possible overflow/underflow
     * exception.
     *<p>
     * Note: if the resulting integer value falls outside range of
     * {@code [-128, 255]},
     * a {@link InputCoercionException}
     * will be thrown to indicate numeric overflow/underflow.
     *
     * @return Current number value as {@code byte} (if numeric token within
     *   range of {@code [-128, 255]}); otherwise exception thrown
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public byte getByteValue() throws IOException {
    int value = getIntValue();
    // So far so good: but does it fit?
    // [JACKSON-804]: Let's actually allow range of [-128, 255], as those are uniquely mapped
    //  (instead of just signed range of [-128, 127])
    if (value < MIN_BYTE_I || value > MAX_BYTE_I) {
        throw new InputCoercionException(this, String.format(""Numeric value (%s) out of range of Java byte"", getText()), JsonToken.VALUE_NUMBER_INT, Byte.TYPE);
    }
    return (byte) value;
}","byte","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getShortValue()","Method","* Numeric accessor that can be called when the current
     * token is of type {@link JsonToken#VALUE_NUMBER_INT} and
     * it can be expressed as a value of Java short primitive type.
     * It can also be called for {@link JsonToken#VALUE_NUMBER_FLOAT};
     * if so, it is equivalent to calling {@link #getDoubleValue}
     * and then casting; except for possible overflow/underflow
     * exception.
     *<p>
     * Note: if the resulting integer value falls outside range of
     * Java short, a {@link InputCoercionException}
     * will be thrown to indicate numeric overflow/underflow.
     *
     * @return Current number value as {@code short} (if numeric token within
     *   Java 16-bit signed {@code short} range); otherwise exception thrown
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public short getShortValue() throws IOException {
    int value = getIntValue();
    if (value < MIN_SHORT_I || value > MAX_SHORT_I) {
        throw new InputCoercionException(this, String.format(""Numeric value (%s) out of range of Java short"", getText()), JsonToken.VALUE_NUMBER_INT, Short.TYPE);
    }
    return (short) value;
}","short","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getIntValue()","Abstract Method","* Numeric accessor that can be called when the current
     * token is of type {@link JsonToken#VALUE_NUMBER_INT} and
     * it can be expressed as a value of Java int primitive type.
     * It can also be called for {@link JsonToken#VALUE_NUMBER_FLOAT};
     * if so, it is equivalent to calling {@link #getDoubleValue}
     * and then casting; except for possible overflow/underflow
     * exception.
     *<p>
     * Note: if the resulting integer value falls outside range of
     * Java {@code int}, a {@link InputCoercionException}
     * may be thrown to indicate numeric overflow/underflow.
     *
     * @return Current number value as {@code int} (if numeric token within
     *   Java 32-bit signed {@code int} range); otherwise exception thrown
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public abstract int getIntValue() throws IOException;","int","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getLongValue()","Abstract Method","* Numeric accessor that can be called when the current
     * token is of type {@link JsonToken#VALUE_NUMBER_INT} and
     * it can be expressed as a Java long primitive type.
     * It can also be called for {@link JsonToken#VALUE_NUMBER_FLOAT};
     * if so, it is equivalent to calling {@link #getDoubleValue}
     * and then casting to int; except for possible overflow/underflow
     * exception.
     *<p>
     * Note: if the token is an integer, but its value falls
     * outside of range of Java long, a {@link InputCoercionException}
     * may be thrown to indicate numeric overflow/underflow.
     *
     * @return Current number value as {@code long} (if numeric token within
     *   Java 32-bit signed {@code long} range); otherwise exception thrown
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public abstract long getLongValue() throws IOException;","long","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getBigIntegerValue()","Abstract Method","* Numeric accessor that can be called when the current
     * token is of type {@link JsonToken#VALUE_NUMBER_INT} and
     * it cannot be used as a Java long primitive type due to its
     * magnitude.
     * It can also be called for {@link JsonToken#VALUE_NUMBER_FLOAT};
     * if so, it is equivalent to calling {@link #getDecimalValue}
     * and then constructing a {@link BigInteger} from that value.
     *
     * @return Current number value as {@link BigInteger} (if numeric token);
     *     otherwise exception thrown
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public abstract BigInteger getBigIntegerValue() throws IOException;","BigInteger","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getFloatValue()","Abstract Method","* Numeric accessor that can be called when the current
     * token is of type {@link JsonToken#VALUE_NUMBER_FLOAT} and
     * it can be expressed as a Java float primitive type.
     * It can also be called for {@link JsonToken#VALUE_NUMBER_INT};
     * if so, it is equivalent to calling {@link #getLongValue}
     * and then casting; except for possible overflow/underflow
     * exception.
     *<p>
     * Note: if the value falls
     * outside of range of Java float, a {@link InputCoercionException}
     * will be thrown to indicate numeric overflow/underflow.
     *
     * @return Current number value as {@code float} (if numeric token within
     *   Java {@code float} range); otherwise exception thrown
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public abstract float getFloatValue() throws IOException;","float","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getDoubleValue()","Abstract Method","* Numeric accessor that can be called when the current
     * token is of type {@link JsonToken#VALUE_NUMBER_FLOAT} and
     * it can be expressed as a Java double primitive type.
     * It can also be called for {@link JsonToken#VALUE_NUMBER_INT};
     * if so, it is equivalent to calling {@link #getLongValue}
     * and then casting; except for possible overflow/underflow
     * exception.
     *<p>
     * Note: if the value falls
     * outside of range of Java double, a {@link InputCoercionException}
     * will be thrown to indicate numeric overflow/underflow.
     *
     * @return Current number value as {@code double} (if numeric token within
     *   Java {@code double} range); otherwise exception thrown
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public abstract double getDoubleValue() throws IOException;","double","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getDecimalValue()","Abstract Method","* Numeric accessor that can be called when the current
     * token is of type {@link JsonToken#VALUE_NUMBER_FLOAT} or
     * {@link JsonToken#VALUE_NUMBER_INT}. No under/overflow exceptions
     * are ever thrown.
     *
     * @return Current number value as {@link BigDecimal} (if numeric token);
     *   otherwise exception thrown
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public abstract BigDecimal getDecimalValue() throws IOException;","BigDecimal","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getBooleanValue()","Method","* Convenience accessor that can be called when the current
     * token is {@link JsonToken#VALUE_TRUE} or
     * {@link JsonToken#VALUE_FALSE}, to return matching {@code boolean}
     * value.
     * If the current token is of some other type, {@link JsonParseException}
     * will be thrown
     *
     * @return {@code True} if current token is {@code JsonToken.VALUE_TRUE},
     *   {@code false} if current token is {@code JsonToken.VALUE_FALSE};
     *   otherwise throws {@link JsonParseException}
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public boolean getBooleanValue() throws IOException {
    JsonToken t = currentToken();
    if (t == JsonToken.VALUE_TRUE)
        return true;
    if (t == JsonToken.VALUE_FALSE)
        return false;
    throw new JsonParseException(this, String.format(""Current token (%s) not of boolean type"", t)).withRequestPayload(_requestPayload);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()","Method","* Accessor that can be called if (and only if) the current token
     * is {@link JsonToken#VALUE_EMBEDDED_OBJECT}. For other token types,
     * null is returned.
     *<p>
     * Note: only some specialized parser implementations support
     * embedding of objects (usually ones that are facades on top
     * of non-streaming sources, such as object trees). One exception
     * is access to binary content (whether via base64 encoding or not)
     * which typically is accessible using this method, as well as
     * {@link #getBinaryValue()}.
     *
     * @return Embedded value (usually of ""native"" type supported by format)
     *   for the current token, if any; {@code null otherwise}
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public Object getEmbeddedObject() throws IOException {
    return null;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getBinaryValue(Base64Variant)","Abstract Method","* Method that can be used to read (and consume -- results
     * may not be accessible using other methods after the call)
     * base64-encoded binary data
     * included in the current textual JSON value.
     * It works similar to getting String value via {@link #getText}
     * and decoding result (except for decoding part),
     * but should be significantly more performant.
     *<p>
     * Note that non-decoded textual contents of the current token
     * are not guaranteed to be accessible after this method
     * is called. Current implementation, for example, clears up
     * textual content during decoding.
     * Decoded binary content, however, will be retained until
     * parser is advanced to the next event.
     *
     * @param bv Expected variant of base64 encoded
     *   content (see {@link Base64Variants} for definitions
     *   of ""standard"" variants).
     *
     * @return Decoded binary data
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public abstract byte[] getBinaryValue(Base64Variant bv) throws IOException;","byte[]","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getBinaryValue(Base64Variant).bv","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.getBinaryValue(Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getBinaryValue()","Method","* Convenience alternative to {@link #getBinaryValue(Base64Variant)}
     * that defaults to using
     * {@link Base64Variants#getDefaultVariant} as the default encoding.
     *
     * @return Decoded binary data
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public byte[] getBinaryValue() throws IOException {
    return getBinaryValue(Base64Variants.getDefaultVariant());
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.readBinaryValue(OutputStream)","Method","* Method that can be used as an alternative to {@link #getBigIntegerValue()},
     * especially when value can be large. The main difference (beyond method
     * of returning content using {@link OutputStream} instead of as byte array)
     * is that content will NOT remain accessible after method returns: any content
     * processed will be consumed and is not buffered in any way. If caller needs
     * buffering, it has to implement it.
     *
     * @param out Output stream to use for passing decoded binary data
     *
     * @return Number of bytes that were decoded and written via {@link OutputStream}
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems
     *
     * @since 2.1","public int readBinaryValue(OutputStream out) throws IOException {
    return readBinaryValue(Base64Variants.getDefaultVariant(), out);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.readBinaryValue(OutputStream).out","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.readBinaryValue(OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.readBinaryValue(Base64Variant,OutputStream)","Method","* Similar to {@link #readBinaryValue(OutputStream)} but allows explicitly
     * specifying base64 variant to use.
     *
     * @param bv base64 variant to use
     * @param out Output stream to use for passing decoded binary data
     *
     * @return Number of bytes that were decoded and written via {@link OutputStream}
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems
     *
     * @since 2.1","public int readBinaryValue(Base64Variant bv, OutputStream out) throws IOException {
    _reportUnsupportedOperation();
    // never gets here
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.readBinaryValue(Base64Variant,OutputStream).bv","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.readBinaryValue(Base64Variant,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.readBinaryValue(Base64Variant,OutputStream).out","Parameter_2","Belong to com.fasterxml.jackson.core.JsonParser.readBinaryValue(Base64Variant,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getValueAsInt()","Method","* Method that will try to convert value of current token to a
     * Java {@code int} value.
     * Numbers are coerced using default Java rules; booleans convert to 0 (false)
     * and 1 (true), and Strings are parsed using default Java language integer
     * parsing rules.
     *<p>
     * If representation cannot be converted to an int (including structured type
     * markers like start/end Object/Array)
     * default value of <b>0</b> will be returned; no exceptions are thrown.
     *
     * @return {@code int} value current token is converted to, if possible; exception thrown
     *    otherwise
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public int getValueAsInt() throws IOException {
    return getValueAsInt(0);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getValueAsInt(int)","Method","* Method that will try to convert value of current token to a
     * <b>int</b>.
     * Numbers are coerced using default Java rules; booleans convert to 0 (false)
     * and 1 (true), and Strings are parsed using default Java language integer
     * parsing rules.
     *<p>
     * If representation cannot be converted to an int (including structured type
     * markers like start/end Object/Array)
     * specified <b>def</b> will be returned; no exceptions are thrown.
     *
     * @param def Default value to return if conversion to {@code int} is not possible
     *
     * @return {@code int} value current token is converted to, if possible; {@code def} otherwise
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public int getValueAsInt(int def) throws IOException {
    return def;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getValueAsInt(int).def","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.getValueAsInt(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getValueAsLong()","Method","* Method that will try to convert value of current token to a
     * <b>long</b>.
     * Numbers are coerced using default Java rules; booleans convert to 0 (false)
     * and 1 (true), and Strings are parsed using default Java language integer
     * parsing rules.
     *<p>
     * If representation cannot be converted to a long (including structured type
     * markers like start/end Object/Array)
     * default value of <b>0L</b> will be returned; no exceptions are thrown.
     *
     * @return {@code long} value current token is converted to, if possible; exception thrown
     *    otherwise
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public long getValueAsLong() throws IOException {
    return getValueAsLong(0);
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getValueAsLong(long)","Method","* Method that will try to convert value of current token to a
     * <b>long</b>.
     * Numbers are coerced using default Java rules; booleans convert to 0 (false)
     * and 1 (true), and Strings are parsed using default Java language integer
     * parsing rules.
     *<p>
     * If representation cannot be converted to a long (including structured type
     * markers like start/end Object/Array)
     * specified <b>def</b> will be returned; no exceptions are thrown.
     *
     * @param def Default value to return if conversion to {@code long} is not possible
     *
     * @return {@code long} value current token is converted to, if possible; {@code def} otherwise
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public long getValueAsLong(long def) throws IOException {
    return def;
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getValueAsLong(long).def","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.getValueAsLong(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getValueAsDouble()","Method","* Method that will try to convert value of current token to a Java
     * <b>double</b>.
     * Numbers are coerced using default Java rules; booleans convert to 0.0 (false)
     * and 1.0 (true), and Strings are parsed using default Java language floating
     * point parsing rules.
     *<p>
     * If representation cannot be converted to a double (including structured types
     * like Objects and Arrays),
     * default value of <b>0.0</b> will be returned; no exceptions are thrown.
     *
     * @return {@code double} value current token is converted to, if possible; exception thrown
     *    otherwise
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public double getValueAsDouble() throws IOException {
    return getValueAsDouble(0.0);
}","double","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getValueAsDouble(double)","Method","* Method that will try to convert value of current token to a
     * Java <b>double</b>.
     * Numbers are coerced using default Java rules; booleans convert to 0.0 (false)
     * and 1.0 (true), and Strings are parsed using default Java language floating
     * point parsing rules.
     *<p>
     * If representation cannot be converted to a double (including structured types
     * like Objects and Arrays),
     * specified <b>def</b> will be returned; no exceptions are thrown.
     *
     * @param def Default value to return if conversion to {@code double} is not possible
     *
     * @return {@code double} value current token is converted to, if possible; {@code def} otherwise
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public double getValueAsDouble(double def) throws IOException {
    return def;
}","double","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getValueAsDouble(double).def","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.getValueAsDouble(double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()","Method","* Method that will try to convert value of current token to a
     * <b>boolean</b>.
     * JSON booleans map naturally; integer numbers other than 0 map to true, and
     * 0 maps to false
     * and Strings 'true' and 'false' map to corresponding values.
     *<p>
     * If representation cannot be converted to a boolean value (including structured types
     * like Objects and Arrays),
     * default value of <b>false</b> will be returned; no exceptions are thrown.
     *
     * @return {@code boolean} value current token is converted to, if possible; exception thrown
     *    otherwise
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public boolean getValueAsBoolean() throws IOException {
    return getValueAsBoolean(false);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getValueAsBoolean(boolean)","Method","* Method that will try to convert value of current token to a
     * <b>boolean</b>.
     * JSON booleans map naturally; integer numbers other than 0 map to true, and
     * 0 maps to false
     * and Strings 'true' and 'false' map to corresponding values.
     *<p>
     * If representation cannot be converted to a boolean value (including structured types
     * like Objects and Arrays),
     * specified <b>def</b> will be returned; no exceptions are thrown.
     *
     * @param def Default value to return if conversion to {@code boolean} is not possible
     *
     * @return {@code boolean} value current token is converted to, if possible; {@code def} otherwise
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","public boolean getValueAsBoolean(boolean def) throws IOException {
    return def;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getValueAsBoolean(boolean).def","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.getValueAsBoolean(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getValueAsString()","Method","* Method that will try to convert value of current token to a
     * {@link java.lang.String}.
     * JSON Strings map naturally; scalar values get converted to
     * their textual representation.
     * If representation cannot be converted to a String value (including structured types
     * like Objects and Arrays and {@code null} token), default value of
     * <b>null</b> will be returned; no exceptions are thrown.
     *
     * @return {@link String} value current token is converted to, if possible; {@code null} otherwise
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems
     *
     * @since 2.1","public String getValueAsString() throws IOException {
    return getValueAsString(null);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getValueAsString(String)","Abstract Method","* Method that will try to convert value of current token to a
     * {@link java.lang.String}.
     * JSON Strings map naturally; scalar values get converted to
     * their textual representation.
     * If representation cannot be converted to a String value (including structured types
     * like Objects and Arrays and {@code null} token), specified default value
     * will be returned; no exceptions are thrown.
     *
     * @param def Default value to return if conversion to {@code String} is not possible
     *
     * @return {@link String} value current token is converted to, if possible; {@code def} otherwise
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems
     *
     * @since 2.1","public abstract String getValueAsString(String def) throws IOException;","String","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getValueAsString(String).def","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.getValueAsString(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.canReadObjectId()","Method","* Introspection method that may be called to see if the underlying
     * data format supports some kind of Object Ids natively (many do not;
     * for example, JSON doesn't).
     *<p>
     * Default implementation returns true; overridden by data formats
     * that do support native Object Ids. Caller is expected to either
     * use a non-native notation (explicit property or such), or fail,
     * in case it cannot use native object ids.
     *
     * @return {@code True} if the format being read supports native Object Ids;
     *    {@code false} if not
     *
     * @since 2.3","public boolean canReadObjectId() {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.canReadTypeId()","Method","* Introspection method that may be called to see if the underlying
     * data format supports some kind of Type Ids natively (many do not;
     * for example, JSON doesn't).
     *<p>
     * Default implementation returns true; overridden by data formats
     * that do support native Type Ids. Caller is expected to either
     * use a non-native notation (explicit property or such), or fail,
     * in case it cannot use native type ids.
     *
     * @return {@code True} if the format being read supports native Type Ids;
     *    {@code false} if not
     *
     * @since 2.3","public boolean canReadTypeId() {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getObjectId()","Method","* Method that can be called to check whether current token
     * (one that was just read) has an associated Object id, and if
     * so, return it.
     * Note that while typically caller should check with {@link #canReadObjectId}
     * first, it is not illegal to call this method even if that method returns
     * true; but if so, it will return null. This may be used to simplify calling
     * code.
     *<p>
     * Default implementation will simply return null.
     *
     * @return Native Object id associated with the current token, if any; {@code null} if none
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems
     *
     * @since 2.3","public Object getObjectId() throws IOException {
    return null;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.getTypeId()","Method","* Method that can be called to check whether current token
     * (one that was just read) has an associated type id, and if
     * so, return it.
     * Note that while typically caller should check with {@link #canReadTypeId}
     * first, it is not illegal to call this method even if that method returns
     * true; but if so, it will return null. This may be used to simplify calling
     * code.
     *<p>
     * Default implementation will simply return null.
     *
     * @return Native Type Id associated with the current token, if any; {@code null} if none
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems
     *
     * @since 2.3","public Object getTypeId() throws IOException {
    return null;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.readValueAs(Class)","Method","* Method to deserialize JSON content into a non-container
     * type (it can be an array type, however): typically a bean, array
     * or a wrapper type (like {@link java.lang.Boolean}).
     * <b>Note</b>: method can only be called if the parser has
     * an object codec assigned; this is true for parsers constructed
     * by <code>MappingJsonFactory</code> (from ""jackson-databind"" jar)
     * but not for {@link JsonFactory} (unless its <code>setCodec</code>
     * method has been explicitly called).
     *<p>
     * This method may advance the event stream, for structured types
     * the current token will be the closing end marker (END_ARRAY,
     * END_OBJECT) of the bound structure. For non-structured Json types
     * (and for {@link JsonToken#VALUE_EMBEDDED_OBJECT})
     * stream is not advanced.
     *<p>
     * Note: this method should NOT be used if the result type is a
     * container ({@link java.util.Collection} or {@link java.util.Map}.
     * The reason is that due to type erasure, key and value types
     * cannot be introspected when using this method.
     *
     * @param <T> Nominal type parameter for value type
     *
     * @param valueType Java type to read content as (passed to ObjectCodec that
     *    deserializes content)
     *
     * @return Java value read from content
     *
     * @throws IOException if there is either an underlying I/O problem or decoding
     *    issue at format layer","public <T> T readValueAs(Class<T> valueType) throws IOException {
    return _codec().readValue(this, valueType);
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.readValueAs(Class).valueType","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.readValueAs(Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.readValueAs(TypeReference)","Method","* Method to deserialize JSON content into a Java type, reference
     * to which is passed as argument. Type is passed using so-called
     * ""super type token""
     * and specifically needs to be used if the root type is a
     * parameterized (generic) container type.
     * <b>Note</b>: method can only be called if the parser has
     * an object codec assigned; this is true for parsers constructed
     * by <code>MappingJsonFactory</code> (defined in 'jackson-databind' bundle)
     * but not for {@link JsonFactory} (unless its <code>setCodec</code>
     * method has been explicitly called).
     *<p>
     * This method may advance the event stream, for structured types
     * the current token will be the closing end marker (END_ARRAY,
     * END_OBJECT) of the bound structure. For non-structured Json types
     * (and for {@link JsonToken#VALUE_EMBEDDED_OBJECT})
     * stream is not advanced.
     *
     * @param <T> Nominal type parameter for value type
     *
     * @param valueTypeRef Java type to read content as (passed to ObjectCodec that
     *    deserializes content)
     *
     * @return Java value read from content
     *
     * @throws IOException if there is either an underlying I/O problem or decoding
     *    issue at format layer","@SuppressWarnings(""unchecked"")
public <T> T readValueAs(TypeReference<?> valueTypeRef) throws IOException {
    return (T) _codec().readValue(this, valueTypeRef);
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.readValueAs(TypeReference).valueTypeRef","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.readValueAs(TypeReference)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.readValuesAs(Class)","Method","* Method for reading sequence of Objects from parser stream,
     * all with same specified value type.
     *
     * @param <T> Nominal type parameter for value type
     *
     * @param valueType Java type to read content as (passed to ObjectCodec that
     *    deserializes content)
     *
     * @return Iterator for reading multiple Java values from content
     *
     * @throws IOException if there is either an underlying I/O problem or decoding
     *    issue at format layer","public <T> Iterator<T> readValuesAs(Class<T> valueType) throws IOException {
    return _codec().readValues(this, valueType);
}","Iterator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.readValuesAs(Class).valueType","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.readValuesAs(Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.readValuesAs(TypeReference)","Method","* Method for reading sequence of Objects from parser stream,
     * all with same specified value type.
     *
     * @param <T> Nominal type parameter for value type
     *
     * @param valueTypeRef Java type to read content as (passed to ObjectCodec that
     *    deserializes content)
     *
     * @return Iterator for reading multiple Java values from content
     *
     * @throws IOException if there is either an underlying I/O problem or decoding
     *    issue at format layer","public <T> Iterator<T> readValuesAs(TypeReference<T> valueTypeRef) throws IOException {
    return _codec().readValues(this, valueTypeRef);
}","Iterator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.readValuesAs(TypeReference).valueTypeRef","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.readValuesAs(TypeReference)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.readValueAsTree()","Method","* Method to deserialize JSON content into equivalent ""tree model"",
     * represented by root {@link TreeNode} of resulting model.
     * For JSON Arrays it will an array node (with child nodes),
     * for objects object node (with child nodes), and for other types
     * matching leaf node type. Empty or whitespace documents are null.
     *
     * @param <T> Nominal type parameter for result node type (to reduce need for casting)
     *
     * @return root of the document, or null if empty or whitespace.
     *
     * @throws IOException if there is either an underlying I/O problem or decoding
     *    issue at format layer","@SuppressWarnings(""unchecked"")
public <T extends TreeNode> T readValueAsTree() throws IOException {
    return (T) _codec().readTree(this);
}","TreeNode","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._codec()","Method","No Comment","protected ObjectCodec _codec() {
    ObjectCodec c = getCodec();
    if (c == null) {
        throw new IllegalStateException(""No ObjectCodec defined for parser, needed for deserialization"");
    }
    return c;
}","ObjectCodec","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructError(String)","Method","* Helper method for constructing {@link JsonParseException}s
     * based on current state of the parser
     *
     * @param msg Base exception message to construct exception with
     *
     * @return {@link JsonParseException} constructed","protected JsonParseException _constructError(String msg) {
    return new JsonParseException(this, msg).withRequestPayload(_requestPayload);
}","JsonParseException","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructError(String).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser._constructError(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()","Method","* Helper method to call for operations that are not supported by
     * parser implementation.
     *
     * @since 2.1","protected void _reportUnsupportedOperation() {
    throw new UnsupportedOperationException(""Operation not supported by parser of type "" + getClass().getName());
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructReadException(String)","Method","* Helper method for constructing {@link JsonParseException}
     * based on current state of the parser.
     *
     * @param msg Base exception message to construct exception with
     *
     * @return Read exception (of type {@link JsonParseException}) constructed
     *
     * @since 2.13","protected JsonParseException _constructReadException(String msg) {
    // In 3.0 will be actual `StreamReadException`...
    return _constructError(msg);
}","JsonParseException","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructReadException(String).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser._constructReadException(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object)","Method","No Comment","protected JsonParseException _constructReadException(String msg, Object arg) {
    return _constructReadException(String.format(msg, arg));
}","JsonParseException","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object).arg","Parameter_2","Belong to com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object,Object)","Method","No Comment","protected JsonParseException _constructReadException(String msg, Object arg1, Object arg2) {
    return _constructReadException(String.format(msg, arg1, arg2));
}","JsonParseException","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object,Object).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object,Object).arg1","Parameter_2","Belong to com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object,Object).arg2","Parameter_3","Belong to com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object,Object,Object)","Method","No Comment","protected JsonParseException _constructReadException(String msg, Object arg1, Object arg2, Object arg3) {
    return _constructReadException(String.format(msg, arg1, arg2, arg3));
}","JsonParseException","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object,Object,Object).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object,Object,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object,Object,Object).arg1","Parameter_2","Belong to com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object,Object,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object,Object,Object).arg2","Parameter_3","Belong to com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object,Object,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object,Object,Object).arg3","Parameter_4","Belong to com.fasterxml.jackson.core.JsonParser._constructReadException(String,Object,Object,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructReadException(String,Throwable)","Method","* Helper method for constructing {@link JsonParseException}
     * based on current state of the parser and indicating that the given
     * {@link Throwable} is the root cause.
     *
     * @param msg Base exception message to construct exception with
     * @param t Root cause to assign
     *
     * @return Read exception (of type {@link JsonParseException}) constructed
     *
     * @since 2.13","protected JsonParseException _constructReadException(String msg, Throwable t) {
    JsonParseException e = new JsonParseException(this, msg, t);
    if (_requestPayload != null) {
        e = e.withRequestPayload(_requestPayload);
    }
    return e;
}","JsonParseException","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructReadException(String,Throwable).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser._constructReadException(String,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructReadException(String,Throwable).t","Parameter_2","Belong to com.fasterxml.jackson.core.JsonParser._constructReadException(String,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructReadException(String,JsonLocation)","Method","* Helper method for constructing {@link JsonParseException}
     * based on current state of the parser, except for specified
     * {@link JsonLocation} for problem location (which may not be
     * the exact current location)
     *
     * @param msg Base exception message to construct exception with
     * @param loc Error location to report
     *
     * @return Read exception (of type {@link JsonParseException}) constructed
     *
     * @since 2.13","protected JsonParseException _constructReadException(String msg, JsonLocation loc) {
    JsonParseException e = new JsonParseException(this, msg, loc);
    if (_requestPayload != null) {
        e = e.withRequestPayload(_requestPayload);
    }
    return e;
}","JsonParseException","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructReadException(String,JsonLocation).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser._constructReadException(String,JsonLocation)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser._constructReadException(String,JsonLocation).loc","Parameter_2","Belong to com.fasterxml.jackson.core.JsonParser._constructReadException(String,JsonLocation)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.<init>()","Constructor","No Comment","protected JsonParser() {
    // @since 2.14 do use sane defaults
    _features = JsonFactory.DEFAULT_PARSER_FEATURE_FLAGS;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.<init>(int)","Constructor","No Comment","protected JsonParser(int features) {
    _features = features;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.<init>(int).features","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$NumberType","Enum","* Enumeration of possible ""native"" (optimal) types that can be
     * used for numbers.","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.JsonParser$NumberType","Enum","* Enumeration of possible ""native"" (optimal) types that can be
     * used for numbers.","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.JsonParser$NumberType.INT","Enum Constant","No Comment","INT","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$NumberType.LONG","Enum Constant","No Comment","LONG","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$NumberType.BIG_INTEGER","Enum Constant","No Comment","BIG_INTEGER","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$NumberType.FLOAT","Enum Constant","No Comment","FLOAT","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$NumberType.DOUBLE","Enum Constant","No Comment","DOUBLE","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$NumberType.BIG_DECIMAL","Enum Constant","No Comment","BIG_DECIMAL","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$NumberTypeFP","Enum","* Enumeration of possible physical Floating-Point types that
     * underlying format uses. Used to indicate most accurate (and
     * efficient) representation if known (if not known,
     * {@link NumberTypeFP#UNKNOWN} is used).
     *
     * @since 2.17","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.JsonParser$NumberTypeFP","Enum","* Enumeration of possible physical Floating-Point types that
     * underlying format uses. Used to indicate most accurate (and
     * efficient) representation if known (if not known,
     * {@link NumberTypeFP#UNKNOWN} is used).
     *
     * @since 2.17","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.JsonParser$NumberTypeFP.FLOAT16","Enum Constant","* Special ""mini-float"" that some binary formats support.","FLOAT16","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$NumberTypeFP.FLOAT32","Enum Constant","* Standard IEEE-754 single-precision 32-bit binary value","FLOAT32","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$NumberTypeFP.DOUBLE64","Enum Constant","* Standard IEEE-754 double-precision 64-bit binary value","DOUBLE64","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$NumberTypeFP.BIG_DECIMAL","Enum Constant","* Unlimited precision, decimal (10-based) values","BIG_DECIMAL","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$NumberTypeFP.UNKNOWN","Enum Constant","* Constant used when type is not known, or there is no specific
         * type to match: most commonly used for textual formats like JSON
         * where representation does not necessarily have single easily detectable
         * optimal representation (for example, value {@code 0.1} has no
         * exact binary representation whereas {@code 0.25} has exact representation
         * in every binary type supported)","UNKNOWN","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature","Enum","* Enumeration that defines all on/off features for parsers.","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.JsonParser$Feature","Enum","* Enumeration that defines all on/off features for parsers.","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.JsonParser$Feature.AUTO_CLOSE_SOURCE","Enum Constant","* Feature that determines whether parser will automatically
         * close underlying input source that is NOT owned by the
         * parser. If disabled, calling application has to separately
         * close the underlying {@link InputStream} and {@link Reader}
         * instances used to create the parser. If enabled, parser
         * will handle closing, as long as parser itself gets closed:
         * this happens when end-of-input is encountered, or parser
         * is closed by a call to {@link JsonParser#close}.
         *<p>
         * Feature is enabled by default.","AUTO_CLOSE_SOURCE(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_COMMENTS","Enum Constant","* Feature that determines whether parser will allow use
         * of Java/C++ style comments (both '/'+'*' and
         * '//' varieties) within parsed content or not.
         *<p>
         * Since JSON specification does not mention comments as legal
         * construct,
         * this is a non-standard feature; however, in the wild
         * this is extensively used. As such, feature is
         * <b>disabled by default</b> for parsers and must be
         * explicitly enabled.
         *<p>
         * NOTE: while not technically deprecated, since 2.10 recommended to use
         * {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_JAVA_COMMENTS} instead.","ALLOW_COMMENTS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_YAML_COMMENTS","Enum Constant","* Feature that determines whether parser will allow use
         * of YAML comments, ones starting with '#' and continuing
         * until the end of the line. This commenting style is common
         * with scripting languages as well.
         *<p>
         * Since JSON specification does not mention comments as legal
         * construct,
         * this is a non-standard feature. As such, feature is
         * <b>disabled by default</b> for parsers and must be
         * explicitly enabled.
         *<p>
         * NOTE: while not technically deprecated, since 2.10 recommended to use
         * {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_YAML_COMMENTS} instead.","ALLOW_YAML_COMMENTS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_UNQUOTED_FIELD_NAMES","Enum Constant","* Feature that determines whether parser will allow use
         * of unquoted field names (which is allowed by Javascript,
         * but not by JSON specification).
         *<p>
         * Since JSON specification requires use of double quotes for
         * field names,
         * this is a non-standard feature, and as such disabled by default.
         *<p>
         * NOTE: while not technically deprecated, since 2.10 recommended to use
         * {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_UNQUOTED_FIELD_NAMES} instead.","ALLOW_UNQUOTED_FIELD_NAMES(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_SINGLE_QUOTES","Enum Constant","* Feature that determines whether parser will allow use
         * of single quotes (apostrophe, character '\'') for
         * quoting Strings (names and String values). If so,
         * this is in addition to other acceptable markers.
         * but not by JSON specification).
         *<p>
         * Since JSON specification requires use of double quotes for
         * field names,
         * this is a non-standard feature, and as such disabled by default.
         *<p>
         * NOTE: while not technically deprecated, since 2.10 recommended to use
         * {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_SINGLE_QUOTES} instead.","ALLOW_SINGLE_QUOTES(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_UNQUOTED_CONTROL_CHARS","Enum Constant","* Feature that determines whether parser will allow
         * JSON Strings to contain unquoted control characters
         * (ASCII characters with value less than 32, including
         * tab and line feed characters) or not.
         * If feature is set false, an exception is thrown if such a
         * character is encountered.
         *<p>
         * Since JSON specification requires quoting for all control characters,
         * this is a non-standard feature, and as such disabled by default.
         *
         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_UNESCAPED_CONTROL_CHARS} instead","@Deprecated
ALLOW_UNQUOTED_CONTROL_CHARS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER","Enum Constant","* Feature that can be enabled to accept quoting of all character
         * using backslash quoting mechanism: if not enabled, only characters
         * that are explicitly listed by JSON specification can be thus
         * escaped (see JSON spec for small list of these characters)
         *<p>
         * Since JSON specification requires quoting for all control characters,
         * this is a non-standard feature, and as such disabled by default.
         *
         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER} instead","@Deprecated
ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_NUMERIC_LEADING_ZEROS","Enum Constant","* Feature that determines whether parser will allow
         * JSON integral numbers to start with additional (ignorable)
         * zeroes (like: 000001). If enabled, no exception is thrown, and extra
         * nulls are silently ignored (and not included in textual representation
         * exposed via {@link JsonParser#getText}).
         *<p>
         * Since JSON specification does not allow leading zeroes,
         * this is a non-standard feature, and as such disabled by default.
         *
         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_LEADING_ZEROS_FOR_NUMBERS} instead","@Deprecated
ALLOW_NUMERIC_LEADING_ZEROS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS","Enum Constant","* @deprecated Use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS} instead","@Deprecated
ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS","Enum Constant","* @deprecated Use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS} instead","@Deprecated
ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS","Enum Constant","* @deprecated Use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS} instead","@Deprecated
ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_NON_NUMERIC_NUMBERS","Enum Constant","* Feature that allows parser to recognize set of
         * ""Not-a-Number"" (NaN) tokens as legal floating number
         * values (similar to how many other data formats and
         * programming language source code allows it).
         * Specific subset contains values that
         * <a href=""http://www.w3.org/TR/xmlschema-2/"">XML Schema</a>
         * (see section 3.2.4.1, Lexical Representation)
         * allows (tokens are quoted contents, not including quotes):
         *<ul>
         *  <li>""INF"" (for positive infinity), as well as alias of ""Infinity""
         *  <li>""-INF"" (for negative infinity), alias ""-Infinity""
         *  <li>""NaN"" (for other not-a-numbers, like result of division by zero)
         *</ul>
         *<p>
         * Since JSON specification does not allow use of such values,
         * this is a non-standard feature, and as such disabled by default.
          *
          * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_NON_NUMERIC_NUMBERS} instead","@Deprecated
ALLOW_NON_NUMERIC_NUMBERS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_MISSING_VALUES","Enum Constant","* Feature allows the support for ""missing"" values in a JSON array: missing
          * value meaning sequence of two commas, without value in-between but only
          * optional white space.
          * Enabling this feature will expose ""missing"" values as {@link JsonToken#VALUE_NULL}
          * tokens, which typically become Java nulls in arrays and {@link java.util.Collection}
          * in data-binding.
          * <p>
          * For example, enabling this feature will represent a JSON array <code>[""value1"",,""value3"",]</code>
          * as <code>[""value1"", null, ""value3"", null]</code>
          * <p>
          * Since the JSON specification does not allow missing values this is a non-compliant JSON
          * feature and is disabled by default.
          *
          * @since 2.8
          *
          * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_MISSING_VALUES} instead","@Deprecated
ALLOW_MISSING_VALUES(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_TRAILING_COMMA","Enum Constant","* Feature that determines whether {@link JsonParser} will allow for a single trailing
          * comma following the final value (in an Array) or member (in an Object). These commas
          * will simply be ignored.
          * <p>
          * For example, when this feature is enabled, <code>[true,true,]</code> is equivalent to
          * <code>[true, true]</code> and <code>{""a"": true,}</code> is equivalent to
          * <code>{""a"": true}</code>.
          * <p>
          * When combined with <code>ALLOW_MISSING_VALUES</code>, this feature takes priority, and
          * the final trailing comma in an array declaration does not imply a missing
          * (<code>null</code>) value. For example, when both <code>ALLOW_MISSING_VALUES</code>
          * and <code>ALLOW_TRAILING_COMMA</code> are enabled, <code>[true,true,]</code> is
          * equivalent to <code>[true, true]</code>, and <code>[true,true,,]</code> is equivalent to
          * <code>[true, true, null]</code>.
          * <p>
          * Since the JSON specification does not permit trailing commas, this is a non-standard
          * feature, and as such disabled by default.
          *
          * @since 2.9
          *
          * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_TRAILING_COMMA} instead","@Deprecated
ALLOW_TRAILING_COMMA(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.STRICT_DUPLICATE_DETECTION","Enum Constant","* Feature that determines whether {@link JsonParser} will explicitly
          * check that no duplicate JSON Object field names are encountered.
          * If enabled, parser will check all names within context and report
          * duplicates by throwing a {@link JsonParseException}; if disabled,
          * parser will not do such checking. Assumption in latter case is
          * that caller takes care of handling duplicates at a higher level:
          * data-binding, for example, has features to specify detection to
          * be done there.
          *<p>
          * Note that enabling this feature will incur performance overhead
          * due to having to store and check additional information: this typically
          * adds 20-30% to execution time for basic parsing.
          *
          * @since 2.3","STRICT_DUPLICATE_DETECTION(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.IGNORE_UNDEFINED","Enum Constant","* Feature that determines what to do if the underlying data format requires knowledge
          * of all properties to decode (usually via a Schema), and if no definition is
          * found for a property that input content contains.
          * Typically most textual data formats do NOT require schema information (although
          * some do, such as CSV), whereas many binary data formats do require definitions
          * (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not).
          * Further note that some formats that do require schema information will not be able
          * to ignore undefined properties: for example, Avro is fully positional and there is
          * no possibility of undefined data. This leaves formats like Protobuf that have identifiers
          * that may or may not map; and as such Protobuf format does make use of this feature.
          *<p>
          * Note that support for this feature is implemented by individual data format
          * module, if (and only if) it makes sense for the format in question. For JSON,
          * for example, this feature has no effect as properties need not be pre-defined.
          *<p>
          * Feature is disabled by default, meaning that if the underlying data format
          * requires knowledge of all properties to output, attempts to read an unknown
          * property will result in a {@link JsonProcessingException}
          *
          * @since 2.6","IGNORE_UNDEFINED(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.INCLUDE_SOURCE_IN_LOCATION","Enum Constant","* Feature that determines whether {@link JsonLocation} instances should be constructed
          * with reference to source or not. If source reference is included, its type and contents
          * are included when `toString()` method is called (most notably when printing out parse
          * exception with that location information). If feature is disabled, no source reference
          * is passed and source is only indicated as ""REDACTED"".
          *<p>
          * Most common reason for disabling this feature is to avoid leaking information about
          * internal information; this may be done for security reasons.
          * Note that even if source reference is included, only parts of contents are usually
          * printed, and not the whole contents. Further, many source reference types cannot
          * necessarily access contents (like streams), so only type is indicated, not contents.
          *<p>
          * Since 2.16 feature is <b>disabled</b> by default (before 2.16 it was enabled),
          * meaning that ""source reference"" information is NOT passed; this for security
          * reasons (so by default no information is leaked; see
          * <a href=""https://github.com/FasterXML/jackson-core/issues/991"">core#991</a>
          * for more)
          *
          * @since 2.9 (but different default since 2.16)","INCLUDE_SOURCE_IN_LOCATION(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.USE_FAST_DOUBLE_PARSER","Enum Constant","* Feature that determines whether we use the built-in {@link Double#parseDouble(String)} code to parse
          * doubles or if we use {@code FastDoubleParser} implementation.
          * instead.
          *<p>
          * This setting is disabled by default for backwards compatibility.
          *
          * @since 2.14","USE_FAST_DOUBLE_PARSER(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.USE_FAST_BIG_NUMBER_PARSER","Enum Constant","* Feature that determines whether to use the built-in Java code for parsing
          * <code>BigDecimal</code>s and <code>BigInteger</code>s or to use
          * specifically optimized custom implementation instead.
          *<p>
          * This setting is disabled by default for backwards compatibility.
          *
          * @since 2.15","USE_FAST_BIG_NUMBER_PARSER(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.collectDefaults()","Method","* Method that calculates bit set (flags) of all features that
         * are enabled by default.
         *
         * @return Bit mask of all features that are enabled by default","public static int collectDefaults() {
    int flags = 0;
    for (Feature f : values()) {
        if (f.enabledByDefault()) {
            flags |= f.getMask();
        }
    }
    return flags;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.enabledByDefault()","Method","No Comment","public boolean enabledByDefault() {
    return _defaultState;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.enabledIn(int)","Method","No Comment","public boolean enabledIn(int flags) {
    return (flags & _mask) != 0;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.enabledIn(int).flags","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser$Feature.enabledIn(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.getMask()","Method","No Comment","public int getMask() {
    return _mask;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.<init>(boolean)","Constructor","No Comment","private Feature(boolean defaultState) {
    _mask = (1 << ordinal());
    _defaultState = defaultState;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser$Feature.<init>(boolean).defaultState","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser$Feature.<init>(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.NumberType","Enum","* Enumeration of possible ""native"" (optimal) types that can be
     * used for numbers.","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.JsonParser.NumberType.INT","Enum Constant","No Comment","INT","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.NumberType.LONG","Enum Constant","No Comment","LONG","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.NumberType.BIG_INTEGER","Enum Constant","No Comment","BIG_INTEGER","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.NumberType.FLOAT","Enum Constant","No Comment","FLOAT","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.NumberType.DOUBLE","Enum Constant","No Comment","DOUBLE","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.NumberType.BIG_DECIMAL","Enum Constant","No Comment","BIG_DECIMAL","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.NumberTypeFP","Enum","* Enumeration of possible physical Floating-Point types that
     * underlying format uses. Used to indicate most accurate (and
     * efficient) representation if known (if not known,
     * {@link NumberTypeFP#UNKNOWN} is used).
     *
     * @since 2.17","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.JsonParser.NumberTypeFP.FLOAT16","Enum Constant","* Special ""mini-float"" that some binary formats support.","FLOAT16","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.NumberTypeFP.FLOAT32","Enum Constant","* Standard IEEE-754 single-precision 32-bit binary value","FLOAT32","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.NumberTypeFP.DOUBLE64","Enum Constant","* Standard IEEE-754 double-precision 64-bit binary value","DOUBLE64","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.NumberTypeFP.BIG_DECIMAL","Enum Constant","* Unlimited precision, decimal (10-based) values","BIG_DECIMAL","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.NumberTypeFP.UNKNOWN","Enum Constant","* Constant used when type is not known, or there is no specific
         * type to match: most commonly used for textual formats like JSON
         * where representation does not necessarily have single easily detectable
         * optimal representation (for example, value {@code 0.1} has no
         * exact binary representation whereas {@code 0.25} has exact representation
         * in every binary type supported)","UNKNOWN","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature","Enum","* Enumeration that defines all on/off features for parsers.","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE","Enum Constant","* Feature that determines whether parser will automatically
         * close underlying input source that is NOT owned by the
         * parser. If disabled, calling application has to separately
         * close the underlying {@link InputStream} and {@link Reader}
         * instances used to create the parser. If enabled, parser
         * will handle closing, as long as parser itself gets closed:
         * this happens when end-of-input is encountered, or parser
         * is closed by a call to {@link JsonParser#close}.
         *<p>
         * Feature is enabled by default.","AUTO_CLOSE_SOURCE(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_COMMENTS","Enum Constant","* Feature that determines whether parser will allow use
         * of Java/C++ style comments (both '/'+'*' and
         * '//' varieties) within parsed content or not.
         *<p>
         * Since JSON specification does not mention comments as legal
         * construct,
         * this is a non-standard feature; however, in the wild
         * this is extensively used. As such, feature is
         * <b>disabled by default</b> for parsers and must be
         * explicitly enabled.
         *<p>
         * NOTE: while not technically deprecated, since 2.10 recommended to use
         * {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_JAVA_COMMENTS} instead.","ALLOW_COMMENTS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_YAML_COMMENTS","Enum Constant","* Feature that determines whether parser will allow use
         * of YAML comments, ones starting with '#' and continuing
         * until the end of the line. This commenting style is common
         * with scripting languages as well.
         *<p>
         * Since JSON specification does not mention comments as legal
         * construct,
         * this is a non-standard feature. As such, feature is
         * <b>disabled by default</b> for parsers and must be
         * explicitly enabled.
         *<p>
         * NOTE: while not technically deprecated, since 2.10 recommended to use
         * {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_YAML_COMMENTS} instead.","ALLOW_YAML_COMMENTS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES","Enum Constant","* Feature that determines whether parser will allow use
         * of unquoted field names (which is allowed by Javascript,
         * but not by JSON specification).
         *<p>
         * Since JSON specification requires use of double quotes for
         * field names,
         * this is a non-standard feature, and as such disabled by default.
         *<p>
         * NOTE: while not technically deprecated, since 2.10 recommended to use
         * {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_UNQUOTED_FIELD_NAMES} instead.","ALLOW_UNQUOTED_FIELD_NAMES(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_SINGLE_QUOTES","Enum Constant","* Feature that determines whether parser will allow use
         * of single quotes (apostrophe, character '\'') for
         * quoting Strings (names and String values). If so,
         * this is in addition to other acceptable markers.
         * but not by JSON specification).
         *<p>
         * Since JSON specification requires use of double quotes for
         * field names,
         * this is a non-standard feature, and as such disabled by default.
         *<p>
         * NOTE: while not technically deprecated, since 2.10 recommended to use
         * {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_SINGLE_QUOTES} instead.","ALLOW_SINGLE_QUOTES(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS","Enum Constant","* Feature that determines whether parser will allow
         * JSON Strings to contain unquoted control characters
         * (ASCII characters with value less than 32, including
         * tab and line feed characters) or not.
         * If feature is set false, an exception is thrown if such a
         * character is encountered.
         *<p>
         * Since JSON specification requires quoting for all control characters,
         * this is a non-standard feature, and as such disabled by default.
         *
         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_UNESCAPED_CONTROL_CHARS} instead","@Deprecated
ALLOW_UNQUOTED_CONTROL_CHARS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER","Enum Constant","* Feature that can be enabled to accept quoting of all character
         * using backslash quoting mechanism: if not enabled, only characters
         * that are explicitly listed by JSON specification can be thus
         * escaped (see JSON spec for small list of these characters)
         *<p>
         * Since JSON specification requires quoting for all control characters,
         * this is a non-standard feature, and as such disabled by default.
         *
         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER} instead","@Deprecated
ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS","Enum Constant","* Feature that determines whether parser will allow
         * JSON integral numbers to start with additional (ignorable)
         * zeroes (like: 000001). If enabled, no exception is thrown, and extra
         * nulls are silently ignored (and not included in textual representation
         * exposed via {@link JsonParser#getText}).
         *<p>
         * Since JSON specification does not allow leading zeroes,
         * this is a non-standard feature, and as such disabled by default.
         *
         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_LEADING_ZEROS_FOR_NUMBERS} instead","@Deprecated
ALLOW_NUMERIC_LEADING_ZEROS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS","Enum Constant","* @deprecated Use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS} instead","@Deprecated
ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS","Enum Constant","* @deprecated Use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS} instead","@Deprecated
ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS","Enum Constant","* @deprecated Use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS} instead","@Deprecated
ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS","Enum Constant","* Feature that allows parser to recognize set of
         * ""Not-a-Number"" (NaN) tokens as legal floating number
         * values (similar to how many other data formats and
         * programming language source code allows it).
         * Specific subset contains values that
         * <a href=""http://www.w3.org/TR/xmlschema-2/"">XML Schema</a>
         * (see section 3.2.4.1, Lexical Representation)
         * allows (tokens are quoted contents, not including quotes):
         *<ul>
         *  <li>""INF"" (for positive infinity), as well as alias of ""Infinity""
         *  <li>""-INF"" (for negative infinity), alias ""-Infinity""
         *  <li>""NaN"" (for other not-a-numbers, like result of division by zero)
         *</ul>
         *<p>
         * Since JSON specification does not allow use of such values,
         * this is a non-standard feature, and as such disabled by default.
          *
          * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_NON_NUMERIC_NUMBERS} instead","@Deprecated
ALLOW_NON_NUMERIC_NUMBERS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_MISSING_VALUES","Enum Constant","* Feature allows the support for ""missing"" values in a JSON array: missing
          * value meaning sequence of two commas, without value in-between but only
          * optional white space.
          * Enabling this feature will expose ""missing"" values as {@link JsonToken#VALUE_NULL}
          * tokens, which typically become Java nulls in arrays and {@link java.util.Collection}
          * in data-binding.
          * <p>
          * For example, enabling this feature will represent a JSON array <code>[""value1"",,""value3"",]</code>
          * as <code>[""value1"", null, ""value3"", null]</code>
          * <p>
          * Since the JSON specification does not allow missing values this is a non-compliant JSON
          * feature and is disabled by default.
          *
          * @since 2.8
          *
          * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_MISSING_VALUES} instead","@Deprecated
ALLOW_MISSING_VALUES(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.ALLOW_TRAILING_COMMA","Enum Constant","* Feature that determines whether {@link JsonParser} will allow for a single trailing
          * comma following the final value (in an Array) or member (in an Object). These commas
          * will simply be ignored.
          * <p>
          * For example, when this feature is enabled, <code>[true,true,]</code> is equivalent to
          * <code>[true, true]</code> and <code>{""a"": true,}</code> is equivalent to
          * <code>{""a"": true}</code>.
          * <p>
          * When combined with <code>ALLOW_MISSING_VALUES</code>, this feature takes priority, and
          * the final trailing comma in an array declaration does not imply a missing
          * (<code>null</code>) value. For example, when both <code>ALLOW_MISSING_VALUES</code>
          * and <code>ALLOW_TRAILING_COMMA</code> are enabled, <code>[true,true,]</code> is
          * equivalent to <code>[true, true]</code>, and <code>[true,true,,]</code> is equivalent to
          * <code>[true, true, null]</code>.
          * <p>
          * Since the JSON specification does not permit trailing commas, this is a non-standard
          * feature, and as such disabled by default.
          *
          * @since 2.9
          *
          * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_TRAILING_COMMA} instead","@Deprecated
ALLOW_TRAILING_COMMA(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.STRICT_DUPLICATE_DETECTION","Enum Constant","* Feature that determines whether {@link JsonParser} will explicitly
          * check that no duplicate JSON Object field names are encountered.
          * If enabled, parser will check all names within context and report
          * duplicates by throwing a {@link JsonParseException}; if disabled,
          * parser will not do such checking. Assumption in latter case is
          * that caller takes care of handling duplicates at a higher level:
          * data-binding, for example, has features to specify detection to
          * be done there.
          *<p>
          * Note that enabling this feature will incur performance overhead
          * due to having to store and check additional information: this typically
          * adds 20-30% to execution time for basic parsing.
          *
          * @since 2.3","STRICT_DUPLICATE_DETECTION(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.IGNORE_UNDEFINED","Enum Constant","* Feature that determines what to do if the underlying data format requires knowledge
          * of all properties to decode (usually via a Schema), and if no definition is
          * found for a property that input content contains.
          * Typically most textual data formats do NOT require schema information (although
          * some do, such as CSV), whereas many binary data formats do require definitions
          * (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not).
          * Further note that some formats that do require schema information will not be able
          * to ignore undefined properties: for example, Avro is fully positional and there is
          * no possibility of undefined data. This leaves formats like Protobuf that have identifiers
          * that may or may not map; and as such Protobuf format does make use of this feature.
          *<p>
          * Note that support for this feature is implemented by individual data format
          * module, if (and only if) it makes sense for the format in question. For JSON,
          * for example, this feature has no effect as properties need not be pre-defined.
          *<p>
          * Feature is disabled by default, meaning that if the underlying data format
          * requires knowledge of all properties to output, attempts to read an unknown
          * property will result in a {@link JsonProcessingException}
          *
          * @since 2.6","IGNORE_UNDEFINED(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION","Enum Constant","* Feature that determines whether {@link JsonLocation} instances should be constructed
          * with reference to source or not. If source reference is included, its type and contents
          * are included when `toString()` method is called (most notably when printing out parse
          * exception with that location information). If feature is disabled, no source reference
          * is passed and source is only indicated as ""REDACTED"".
          *<p>
          * Most common reason for disabling this feature is to avoid leaking information about
          * internal information; this may be done for security reasons.
          * Note that even if source reference is included, only parts of contents are usually
          * printed, and not the whole contents. Further, many source reference types cannot
          * necessarily access contents (like streams), so only type is indicated, not contents.
          *<p>
          * Since 2.16 feature is <b>disabled</b> by default (before 2.16 it was enabled),
          * meaning that ""source reference"" information is NOT passed; this for security
          * reasons (so by default no information is leaked; see
          * <a href=""https://github.com/FasterXML/jackson-core/issues/991"">core#991</a>
          * for more)
          *
          * @since 2.9 (but different default since 2.16)","INCLUDE_SOURCE_IN_LOCATION(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.USE_FAST_DOUBLE_PARSER","Enum Constant","* Feature that determines whether we use the built-in {@link Double#parseDouble(String)} code to parse
          * doubles or if we use {@code FastDoubleParser} implementation.
          * instead.
          *<p>
          * This setting is disabled by default for backwards compatibility.
          *
          * @since 2.14","USE_FAST_DOUBLE_PARSER(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.USE_FAST_BIG_NUMBER_PARSER","Enum Constant","* Feature that determines whether to use the built-in Java code for parsing
          * <code>BigDecimal</code>s and <code>BigInteger</code>s or to use
          * specifically optimized custom implementation instead.
          *<p>
          * This setting is disabled by default for backwards compatibility.
          *
          * @since 2.15","USE_FAST_BIG_NUMBER_PARSER(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.collectDefaults()","Method","* Method that calculates bit set (flags) of all features that
         * are enabled by default.
         *
         * @return Bit mask of all features that are enabled by default","public static int collectDefaults() {
    int flags = 0;
    for (Feature f : values()) {
        if (f.enabledByDefault()) {
            flags |= f.getMask();
        }
    }
    return flags;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.enabledByDefault()","Method","No Comment","public boolean enabledByDefault() {
    return _defaultState;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.enabledIn(int)","Method","No Comment","public boolean enabledIn(int flags) {
    return (flags & _mask) != 0;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.enabledIn(int).flags","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.Feature.enabledIn(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.getMask()","Method","No Comment","public int getMask() {
    return _mask;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.<init>(boolean)","Constructor","No Comment","private Feature(boolean defaultState) {
    _mask = (1 << ordinal());
    _defaultState = defaultState;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParser.Feature.<init>(boolean).defaultState","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParser.Feature.<init>(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant","Class","* Class used to define specific details of which
 * variant of Base64 encoding/decoding is to be used. Although there is
 * somewhat standard basic version (so-called ""MIME Base64""), other variants
 * exists, see <a href=""http://en.wikipedia.org/wiki/Base64"">Base64 Wikipedia entry</a> for details.
 *
 * @author Tatu Saloranta","Class do not obtain Source Code","No return type","public , final ","","java.io.Serializable"
"com.fasterxml.jackson.core.Base64Variant.INT_SPACE","Field","No Comment","private final static int INT_SPACE = 0x20;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.serialVersionUID","Field","We'll only serialize name","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.PADDING_CHAR_NONE","Field","* Placeholder used by ""no padding"" variant, to be used when a character
     * value is needed.","protected final static char PADDING_CHAR_NONE = '\0';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.BASE64_VALUE_INVALID","Field","* Marker used to denote ascii characters that do not correspond
     * to a 6-bit value (in this variant), and is not used as a padding
     * character.","public final static int BASE64_VALUE_INVALID = -1;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.BASE64_VALUE_PADDING","Field","* Marker used to denote ascii character (in decoding table) that
     * is the padding character using this variant (if any).","public final static int BASE64_VALUE_PADDING = -2;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant._asciiToBase64","Field","* Decoding table used for base 64 decoding.","private final transient int[] _asciiToBase64 = new int[128];","No return type","private , final , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant._base64ToAsciiC","Field","* Encoding table used for base 64 decoding when output is done
     * as characters.","private final transient char[] _base64ToAsciiC = new char[64];","No return type","private , final , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant._base64ToAsciiB","Field","* Alternative encoding table used for base 64 decoding when output is done
     * as ascii bytes.","private final transient byte[] _base64ToAsciiB = new byte[64];","No return type","private , final , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant._name","Field","* Symbolic name of variant; used for diagnostics/debugging.
     *<p>
     * Note that this is the only non-transient field; used when reading
     * back from serialized state.
     *<p>
     * Also: must not be private, accessed from `BaseVariants`","final String _name;","No return type","final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant._paddingChar","Field","* Character used for padding, if any ({@link #PADDING_CHAR_NONE} if not).","private final char _paddingChar;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant._maxLineLength","Field","* Maximum number of encoded base64 characters to output during encoding
     * before adding a linefeed, if line length is to be limited
     * ({@link java.lang.Integer#MAX_VALUE} if not limited).
     *<p>
     * Note: for some output modes (when writing attributes) linefeeds may
     * need to be avoided, and this value ignored.","private final int _maxLineLength;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant._writePadding","Field","* Whether this variant uses padding when writing out content or not.
     *
     * @since 2.12","private final boolean _writePadding;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant._paddingReadBehaviour","Field","* Whether padding characters should be required or not while decoding
     *
     * @since 2.12","private final PaddingReadBehaviour _paddingReadBehaviour;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.withPaddingAllowed()","Method","* @return Base64Variant which does not require padding on read
     *
     * @since 2.12","public Base64Variant withPaddingAllowed() {
    return withReadPadding(PaddingReadBehaviour.PADDING_ALLOWED);
}","Base64Variant","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.withPaddingRequired()","Method","* @return Base64Variant which requires padding on read
     * @since 2.12","public Base64Variant withPaddingRequired() {
    return withReadPadding(PaddingReadBehaviour.PADDING_REQUIRED);
}","Base64Variant","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.withPaddingForbidden()","Method","* @return Base64Variant which does not accept padding on read
     * @since 2.12","public Base64Variant withPaddingForbidden() {
    return withReadPadding(PaddingReadBehaviour.PADDING_FORBIDDEN);
}","Base64Variant","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.withReadPadding(PaddingReadBehaviour)","Method","* @param readPadding Padding read behavior desired
     *
     * @return Instance with desired padding read behavior setting (this
     *   if already has setting; new instance otherwise)
     *
     * @since 2.12","public Base64Variant withReadPadding(PaddingReadBehaviour readPadding) {
    return (readPadding == _paddingReadBehaviour) ? this : new Base64Variant(this, readPadding);
}","Base64Variant","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.withReadPadding(PaddingReadBehaviour).readPadding","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.withReadPadding(PaddingReadBehaviour)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.withWritePadding(boolean)","Method","* @param writePadding Determines if padding is output on write or not
     *
     * @return Base64Variant which writes padding or not depending on writePadding
     *
     * @since 2.12","public Base64Variant withWritePadding(boolean writePadding) {
    return (writePadding == _writePadding) ? this : new Base64Variant(this, _name, writePadding, _paddingChar, _maxLineLength);
}","Base64Variant","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.withWritePadding(boolean).writePadding","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.withWritePadding(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.readResolve()","Method","handle overrides","protected Object readResolve() {
    Base64Variant base = Base64Variants.valueOf(_name);
    if ((_writePadding != base._writePadding) || (_paddingChar != base._paddingChar) || (_paddingReadBehaviour != base._paddingReadBehaviour) || (_maxLineLength != base._maxLineLength)) {
        return new Base64Variant(base, _name, _writePadding, _paddingChar, _paddingReadBehaviour, _maxLineLength);
    }
    return base;
}","Object","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.getName()","Method","No Comment","public String getName() {
    return _name;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.usesPadding()","Method","* @return True if this Base64 encoding will <b>write</b> padding on output
     *   (note: before Jackson 2.12 also dictated whether padding was accepted on read)","public boolean usesPadding() {
    return _writePadding;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.requiresPaddingOnRead()","Method","* @return {@code True} if this variant requires padding on content decoded; {@code false} if not.
     *
     * @since 2.12","public boolean requiresPaddingOnRead() {
    return _paddingReadBehaviour == PaddingReadBehaviour.PADDING_REQUIRED;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.acceptsPaddingOnRead()","Method","* @return {@code True} if this variant accepts padding on content decoded; {@code false} if not.
     *
     * @since 2.12","public boolean acceptsPaddingOnRead() {
    return _paddingReadBehaviour != PaddingReadBehaviour.PADDING_FORBIDDEN;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.usesPaddingChar(char)","Method","No Comment","public boolean usesPaddingChar(char c) {
    return c == _paddingChar;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.usesPaddingChar(char).c","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.usesPaddingChar(char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.usesPaddingChar(int)","Method","No Comment","public boolean usesPaddingChar(int ch) {
    return ch == _paddingChar;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.usesPaddingChar(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.usesPaddingChar(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.paddingReadBehaviour()","Method","* @return Indicator on how this Base64 encoding will handle possible padding
     *   in content when reading.
     *
     * @since 2.12","public PaddingReadBehaviour paddingReadBehaviour() {
    return _paddingReadBehaviour;
}","PaddingReadBehaviour","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.getPaddingChar()","Method","No Comment","public char getPaddingChar() {
    return _paddingChar;
}","char","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.getPaddingByte()","Method","No Comment","public byte getPaddingByte() {
    return (byte) _paddingChar;
}","byte","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.getMaxLineLength()","Method","No Comment","public int getMaxLineLength() {
    return _maxLineLength;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.decodeBase64Char(char)","Method","* @param c Character to decode
     *
     * @return 6-bit decoded value, if valid character;","public int decodeBase64Char(char c) {
    int ch = c;
    return (ch <= 127) ? _asciiToBase64[ch] : BASE64_VALUE_INVALID;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.decodeBase64Char(char).c","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.decodeBase64Char(char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.decodeBase64Char(int)","Method","No Comment","public int decodeBase64Char(int ch) {
    return (ch <= 127) ? _asciiToBase64[ch] : BASE64_VALUE_INVALID;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.decodeBase64Char(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.decodeBase64Char(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.decodeBase64Byte(byte)","Method","No Comment","public int decodeBase64Byte(byte b) {
    int ch = b;
    // note: cast retains sign, so it's from -128 to +127
    if (ch < 0) {
        return BASE64_VALUE_INVALID;
    }
    return _asciiToBase64[ch];
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.decodeBase64Byte(byte).b","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.decodeBase64Byte(byte)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64BitsAsChar(int)","Method","No Comment","public char encodeBase64BitsAsChar(int value) {
    // Let's assume caller has done necessary checks; this
    // method must be fast and inlinable
    return _base64ToAsciiC[value];
}","char","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64BitsAsChar(int).value","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64BitsAsChar(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(int,char[],int)","Method","* Method that encodes given right-aligned (LSB) 24-bit value
     * into 4 base64 characters, stored in given result buffer.
     * Caller must ensure there is sufficient space for 4 encoded characters
     * at specified position.
     *
     * @param b24 3-byte value to encode
     * @param buffer Output buffer to append characters to
     * @param outPtr Starting position within {@code buffer} to append encoded characters
     *
     * @return Pointer in output buffer after appending 4 encoded characters","public int encodeBase64Chunk(int b24, char[] buffer, int outPtr) {
    buffer[outPtr++] = _base64ToAsciiC[(b24 >> 18) & 0x3F];
    buffer[outPtr++] = _base64ToAsciiC[(b24 >> 12) & 0x3F];
    buffer[outPtr++] = _base64ToAsciiC[(b24 >> 6) & 0x3F];
    buffer[outPtr++] = _base64ToAsciiC[b24 & 0x3F];
    return outPtr;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(int,char[],int).b24","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(int,char[],int).buffer","Parameter_2","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(int,char[],int).outPtr","Parameter_3","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(StringBuilder,int)","Method","No Comment","public void encodeBase64Chunk(StringBuilder sb, int b24) {
    sb.append(_base64ToAsciiC[(b24 >> 18) & 0x3F]);
    sb.append(_base64ToAsciiC[(b24 >> 12) & 0x3F]);
    sb.append(_base64ToAsciiC[(b24 >> 6) & 0x3F]);
    sb.append(_base64ToAsciiC[b24 & 0x3F]);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(StringBuilder,int).sb","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(StringBuilder,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(StringBuilder,int).b24","Parameter_2","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(StringBuilder,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(int,int,char[],int)","Method","* Method that outputs partial chunk (which only encodes one
     * or two bytes of data). Data given is still aligned same as if
     * it as full data; that is, missing data is at the ""right end""
     * (LSB) of int.
     *
     * @param bits 24-bit chunk containing 1 or 2 bytes to encode
     * @param outputBytes Number of input bytes to encode (either 1 or 2)
     * @param buffer Output buffer to append characters to
     * @param outPtr Starting position within {@code buffer} to append encoded characters
     *
     * @return Pointer in output buffer after appending encoded characters (2, 3 or 4)","public int encodeBase64Partial(int bits, int outputBytes, char[] buffer, int outPtr) {
    buffer[outPtr++] = _base64ToAsciiC[(bits >> 18) & 0x3F];
    buffer[outPtr++] = _base64ToAsciiC[(bits >> 12) & 0x3F];
    if (usesPadding()) {
        buffer[outPtr++] = (outputBytes == 2) ? _base64ToAsciiC[(bits >> 6) & 0x3F] : _paddingChar;
        buffer[outPtr++] = _paddingChar;
    } else {
        if (outputBytes == 2) {
            buffer[outPtr++] = _base64ToAsciiC[(bits >> 6) & 0x3F];
        }
    }
    return outPtr;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(int,int,char[],int).bits","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(int,int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(int,int,char[],int).outputBytes","Parameter_2","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(int,int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(int,int,char[],int).buffer","Parameter_3","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(int,int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(int,int,char[],int).outPtr","Parameter_4","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(int,int,char[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(StringBuilder,int,int)","Method","No Comment","public void encodeBase64Partial(StringBuilder sb, int bits, int outputBytes) {
    sb.append(_base64ToAsciiC[(bits >> 18) & 0x3F]);
    sb.append(_base64ToAsciiC[(bits >> 12) & 0x3F]);
    if (usesPadding()) {
        sb.append((outputBytes == 2) ? _base64ToAsciiC[(bits >> 6) & 0x3F] : _paddingChar);
        sb.append(_paddingChar);
    } else {
        if (outputBytes == 2) {
            sb.append(_base64ToAsciiC[(bits >> 6) & 0x3F]);
        }
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(StringBuilder,int,int).sb","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(StringBuilder,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(StringBuilder,int,int).bits","Parameter_2","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(StringBuilder,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(StringBuilder,int,int).outputBytes","Parameter_3","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(StringBuilder,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64BitsAsByte(int)","Method","No Comment","public byte encodeBase64BitsAsByte(int value) {
    // As with above, assuming it is 6-bit value
    return _base64ToAsciiB[value];
}","byte","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64BitsAsByte(int).value","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64BitsAsByte(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(int,byte[],int)","Method","* Method that encodes given right-aligned (LSB) 24-bit value
     * into 4 base64 bytes (ascii), stored in given result buffer.
     *
     * @param b24 3-byte value to encode
     * @param buffer Output buffer to append characters (as bytes) to
     * @param outPtr Starting position within {@code buffer} to append encoded characters
     *
     * @return Pointer in output buffer after appending 4 encoded characters","public int encodeBase64Chunk(int b24, byte[] buffer, int outPtr) {
    buffer[outPtr++] = _base64ToAsciiB[(b24 >> 18) & 0x3F];
    buffer[outPtr++] = _base64ToAsciiB[(b24 >> 12) & 0x3F];
    buffer[outPtr++] = _base64ToAsciiB[(b24 >> 6) & 0x3F];
    buffer[outPtr++] = _base64ToAsciiB[b24 & 0x3F];
    return outPtr;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(int,byte[],int).b24","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(int,byte[],int).buffer","Parameter_2","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(int,byte[],int).outPtr","Parameter_3","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64Chunk(int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(int,int,byte[],int)","Method","* Method that outputs partial chunk (which only encodes one
     * or two bytes of data). Data given is still aligned same as if
     * it as full data; that is, missing data is at the ""right end""
     * (LSB) of int.
     *
     * @param bits 24-bit chunk containing 1 or 2 bytes to encode
     * @param outputBytes Number of input bytes to encode (either 1 or 2)
     * @param buffer Output buffer to append characters to
     * @param outPtr Starting position within {@code buffer} to append encoded characters
     *
     * @return Pointer in output buffer after appending encoded characters (2, 3 or 4)","public int encodeBase64Partial(int bits, int outputBytes, byte[] buffer, int outPtr) {
    buffer[outPtr++] = _base64ToAsciiB[(bits >> 18) & 0x3F];
    buffer[outPtr++] = _base64ToAsciiB[(bits >> 12) & 0x3F];
    if (usesPadding()) {
        byte pb = (byte) _paddingChar;
        buffer[outPtr++] = (outputBytes == 2) ? _base64ToAsciiB[(bits >> 6) & 0x3F] : pb;
        buffer[outPtr++] = pb;
    } else {
        if (outputBytes == 2) {
            buffer[outPtr++] = _base64ToAsciiB[(bits >> 6) & 0x3F];
        }
    }
    return outPtr;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(int,int,byte[],int).bits","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(int,int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(int,int,byte[],int).outputBytes","Parameter_2","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(int,int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(int,int,byte[],int).buffer","Parameter_3","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(int,int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(int,int,byte[],int).outPtr","Parameter_4","Belong to com.fasterxml.jackson.core.Base64Variant.encodeBase64Partial(int,int,byte[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encode(byte[])","Method","* Convenience method for converting given byte array as base64 encoded
     * String using this variant's settings.
     * Resulting value is ""raw"", that is, not enclosed in double-quotes.
     *
     * @param input Byte array to encode
     *
     * @return Base64 encoded String of encoded {@code input} bytes, not surrounded by quotes","public String encode(byte[] input) {
    return encode(input, false);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encode(byte[]).input","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.encode(byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encode(byte[],boolean)","Method","* Convenience method for converting given byte array as base64 encoded String
     * using this variant's settings, optionally enclosed in double-quotes.
     * Linefeeds added, if needed, are expressed as 2-character JSON (and Java source)
     * escape sequence of backslash + `n`.
     *
     * @param input Byte array to encode
     * @param addQuotes Whether to surround resulting value in double quotes or not
     *
     * @return Base64 encoded String of encoded {@code input} bytes, possibly
     *     surrounded by quotes (if {@code addQuotes} enabled)","public String encode(byte[] input, boolean addQuotes) {
    final int inputEnd = input.length;
    final StringBuilder sb = new StringBuilder(inputEnd + (inputEnd >> 2) + (inputEnd >> 3));
    if (addQuotes) {
        sb.append('""');
    }
    int chunksBeforeLF = getMaxLineLength() >> 2;
    // Ok, first we loop through all full triplets of data:
    int inputPtr = 0;
    // to get only full triplets
    int safeInputEnd = inputEnd - 3;
    while (inputPtr <= safeInputEnd) {
        // First, mash 3 bytes into lsb of 32-bit int
        int b24 = (input[inputPtr++]) << 8;
        b24 |= (input[inputPtr++]) & 0xFF;
        b24 = (b24 << 8) | ((input[inputPtr++]) & 0xFF);
        encodeBase64Chunk(sb, b24);
        if (--chunksBeforeLF <= 0) {
            // note: must quote in JSON value, so not really useful...
            sb.append('\\');
            sb.append('n');
            chunksBeforeLF = getMaxLineLength() >> 2;
        }
    }
    // And then we may have 1 or 2 leftover bytes to encode
    // 0, 1 or 2
    int inputLeft = inputEnd - inputPtr;
    if (inputLeft > 0) {
        // yes, but do we have room for output?
        int b24 = (input[inputPtr++]) << 16;
        if (inputLeft == 2) {
            b24 |= ((input[inputPtr++]) & 0xFF) << 8;
        }
        encodeBase64Partial(sb, b24, inputLeft);
    }
    if (addQuotes) {
        sb.append('""');
    }
    return sb.toString();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encode(byte[],boolean).input","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.encode(byte[],boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encode(byte[],boolean).addQuotes","Parameter_2","Belong to com.fasterxml.jackson.core.Base64Variant.encode(byte[],boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encode(byte[],boolean,String)","Method","* Convenience method for converting given byte array as base64 encoded String
     * using this variant's settings, optionally enclosed in double-quotes.
     * Linefeed character to use is passed explicitly.
     *
     * @param input Byte array to encode
     * @param addQuotes Whether to surround resulting value in double quotes or not
     * @param linefeed Linefeed to use for encoded content
     *
     * @return Base64 encoded String of encoded {@code input} bytes
     *
     * @since 2.10","public String encode(byte[] input, boolean addQuotes, String linefeed) {
    final int inputEnd = input.length;
    final StringBuilder sb = new StringBuilder(inputEnd + (inputEnd >> 2) + (inputEnd >> 3));
    if (addQuotes) {
        sb.append('""');
    }
    int chunksBeforeLF = getMaxLineLength() >> 2;
    int inputPtr = 0;
    int safeInputEnd = inputEnd - 3;
    while (inputPtr <= safeInputEnd) {
        int b24 = (input[inputPtr++]) << 8;
        b24 |= (input[inputPtr++]) & 0xFF;
        b24 = (b24 << 8) | ((input[inputPtr++]) & 0xFF);
        encodeBase64Chunk(sb, b24);
        if (--chunksBeforeLF <= 0) {
            sb.append(linefeed);
            chunksBeforeLF = getMaxLineLength() >> 2;
        }
    }
    int inputLeft = inputEnd - inputPtr;
    if (inputLeft > 0) {
        int b24 = (input[inputPtr++]) << 16;
        if (inputLeft == 2) {
            b24 |= ((input[inputPtr++]) & 0xFF) << 8;
        }
        encodeBase64Partial(sb, b24, inputLeft);
    }
    if (addQuotes) {
        sb.append('""');
    }
    return sb.toString();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encode(byte[],boolean,String).input","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.encode(byte[],boolean,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encode(byte[],boolean,String).addQuotes","Parameter_2","Belong to com.fasterxml.jackson.core.Base64Variant.encode(byte[],boolean,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.encode(byte[],boolean,String).linefeed","Parameter_3","Belong to com.fasterxml.jackson.core.Base64Variant.encode(byte[],boolean,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.decode(String)","Method","* Convenience method for decoding contents of a Base64-encoded String,
     * using this variant's settings.
     *
     * @param input Base64-encoded input String to decode
     *
     * @return Byte array of decoded contents
     *
     * @since 2.3
     *
     * @throws IllegalArgumentException if input is not valid base64 encoded data","@SuppressWarnings(""resource"")
public byte[] decode(String input) throws IllegalArgumentException {
    ByteArrayBuilder b = new ByteArrayBuilder();
    decode(input, b);
    return b.toByteArray();
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.decode(String).input","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.decode(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.decode(String,ByteArrayBuilder)","Method","* Convenience method for decoding contents of a Base64-encoded String,
     * using this variant's settings
     * and appending decoded binary data using provided {@link ByteArrayBuilder}.
     *<p>
     * NOTE: builder will NOT be reset before decoding (nor cleared afterwards);
     * assumption is that caller will ensure it is given in proper state, and
     * used as appropriate afterwards.
     *
     * @param str Input to decode
     * @param builder Builder used for assembling decoded content
     *
     * @since 2.3
     *
     * @throws IllegalArgumentException if input is not valid base64 encoded data","public void decode(String str, ByteArrayBuilder builder) throws IllegalArgumentException {
    int ptr = 0;
    int len = str.length();
    main_loop: while (true) {
        // first, we'll skip preceding white space, if any
        char ch;
        do {
            if (ptr >= len) {
                break main_loop;
            }
            ch = str.charAt(ptr++);
        } while (ch <= INT_SPACE);
        int bits = decodeBase64Char(ch);
        if (bits < 0) {
            _reportInvalidBase64(ch, 0, null);
        }
        int decodedData = bits;
        // then second base64 char; can't get padding yet, nor ws
        if (ptr >= len) {
            _reportBase64EOF();
        }
        ch = str.charAt(ptr++);
        bits = decodeBase64Char(ch);
        if (bits < 0) {
            _reportInvalidBase64(ch, 1, null);
        }
        decodedData = (decodedData << 6) | bits;
        // third base64 char; can be padding, but not ws
        if (ptr >= len) {
            // but as per [JACKSON-631] can be end-of-input, iff padding is not required
            if (!requiresPaddingOnRead()) {
                decodedData >>= 4;
                builder.append(decodedData);
                break;
            }
            _reportBase64EOF();
        }
        ch = str.charAt(ptr++);
        bits = decodeBase64Char(ch);
        // First branch: can get padding (-> 1 byte)
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                _reportInvalidBase64(ch, 2, null);
            }
            if (!acceptsPaddingOnRead()) {
                _reportBase64UnexpectedPadding();
            }
            // Ok, must get padding
            if (ptr >= len) {
                _reportBase64EOF();
            }
            ch = str.charAt(ptr++);
            if (!usesPaddingChar(ch)) {
                _reportInvalidBase64(ch, 3, ""expected padding character '"" + getPaddingChar() + ""'"");
            }
            // Got 12 bits, only need 8, need to shift
            decodedData >>= 4;
            builder.append(decodedData);
            continue;
        }
        // Nope, 2 or 3 bytes
        decodedData = (decodedData << 6) | bits;
        // fourth and last base64 char; can be padding, but not ws
        if (ptr >= len) {
            // but as per [JACKSON-631] can be end-of-input, iff padding on read is not required
            if (!requiresPaddingOnRead()) {
                decodedData >>= 2;
                builder.appendTwoBytes(decodedData);
                break;
            }
            _reportBase64EOF();
        }
        ch = str.charAt(ptr++);
        bits = decodeBase64Char(ch);
        if (bits < 0) {
            if (bits != Base64Variant.BASE64_VALUE_PADDING) {
                _reportInvalidBase64(ch, 3, null);
            }
            if (!acceptsPaddingOnRead()) {
                _reportBase64UnexpectedPadding();
            }
            decodedData >>= 2;
            builder.appendTwoBytes(decodedData);
        } else {
            // otherwise, our triple is now complete
            decodedData = (decodedData << 6) | bits;
            builder.appendThreeBytes(decodedData);
        }
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.decode(String,ByteArrayBuilder).str","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.decode(String,ByteArrayBuilder)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.decode(String,ByteArrayBuilder).builder","Parameter_2","Belong to com.fasterxml.jackson.core.Base64Variant.decode(String,ByteArrayBuilder)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.toString()","Method","No Comment","@Override
public String toString() {
    return _name;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.equals(Object)","Method","No Comment","@Override
public boolean equals(Object o) {
    // identity comparison should be fine
    // 26-Oct-2020, tatu: ... not any more with 2.12
    if (o == this)
        return true;
    if (o == null || o.getClass() != getClass())
        return false;
    Base64Variant other = (Base64Variant) o;
    return (other._paddingChar == _paddingChar) && (other._maxLineLength == _maxLineLength) && (other._writePadding == _writePadding) && (other._paddingReadBehaviour == _paddingReadBehaviour) && (_name.equals(other._name));
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.equals(Object).o","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.equals(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.hashCode()","Method","No Comment","@Override
public int hashCode() {
    return _name.hashCode();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant._reportInvalidBase64(char,int,String)","Method","* @param ch Character to report on
     * @param bindex Relative index within base64 character unit; between 0
     *   and 3 (as unit has exactly 4 characters)
     * @param msg Base message to use for exception","protected void _reportInvalidBase64(char ch, int bindex, String msg) throws IllegalArgumentException {
    String base;
    if (ch <= INT_SPACE) {
        base = ""Illegal white space character (code 0x"" + Integer.toHexString(ch) + "") as character #"" + (bindex + 1) + "" of 4-char base64 unit: can only used between units"";
    } else if (usesPaddingChar(ch)) {
        base = ""Unexpected padding character ('"" + getPaddingChar() + ""') as character #"" + (bindex + 1) + "" of 4-char base64 unit: padding only legal as 3rd or 4th character"";
    } else if (!Character.isDefined(ch) || Character.isISOControl(ch)) {
        // Not sure if we can really get here... ? (most illegal xml chars are caught at lower level)
        base = ""Illegal character (code 0x"" + Integer.toHexString(ch) + "") in base64 content"";
    } else {
        base = ""Illegal character '"" + ch + ""' (code 0x"" + Integer.toHexString(ch) + "") in base64 content"";
    }
    if (msg != null) {
        base = base + "": "" + msg;
    }
    throw new IllegalArgumentException(base);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant._reportInvalidBase64(char,int,String).ch","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant._reportInvalidBase64(char,int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant._reportInvalidBase64(char,int,String).bindex","Parameter_2","Belong to com.fasterxml.jackson.core.Base64Variant._reportInvalidBase64(char,int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant._reportInvalidBase64(char,int,String).msg","Parameter_3","Belong to com.fasterxml.jackson.core.Base64Variant._reportInvalidBase64(char,int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant._reportBase64EOF()","Method","No Comment","protected void _reportBase64EOF() throws IllegalArgumentException {
    throw new IllegalArgumentException(missingPaddingMessage());
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant._reportBase64UnexpectedPadding()","Method","No Comment","protected void _reportBase64UnexpectedPadding() throws IllegalArgumentException {
    throw new IllegalArgumentException(unexpectedPaddingMessage());
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.unexpectedPaddingMessage()","Method","* Helper method that will construct a message to use in exceptions for cases where input ends
     * prematurely in place where padding is not expected.
     *
     * @return Exception message for indicating ""unexpected padding"" case
     *
     * @since 2.12","protected String unexpectedPaddingMessage() {
    return String.format(""Unexpected end of base64-encoded String: base64 variant '%s' expects no padding at the end while decoding. This Base64Variant might have been incorrectly configured"", getName());
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.missingPaddingMessage()","Method","* Helper method that will construct a message to use in exceptions for cases where input ends
     * prematurely in place where padding would be expected.
     *
     * @return Exception message for indicating ""missing padding"" case
     *
     * @since 2.10","public String missingPaddingMessage() {
    // !!! TODO: why is this 'public'?
    return String.format(""Unexpected end of base64-encoded String: base64 variant '%s' expects padding (one or more '%c' characters) at the end. This Base64Variant might have been incorrectly configured"", getName(), getPaddingChar());
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(String,String,boolean,char,int)","Constructor","No Comment","public Base64Variant(String name, String base64Alphabet, boolean writePadding, char paddingChar, int maxLineLength) {
    _name = name;
    _writePadding = writePadding;
    _paddingChar = paddingChar;
    _maxLineLength = maxLineLength;
    // Ok and then we need to create codec tables.
    // First the main encoding table:
    int alphaLen = base64Alphabet.length();
    if (alphaLen != 64) {
        throw new IllegalArgumentException(""Base64Alphabet length must be exactly 64 (was "" + alphaLen + "")"");
    }
    // And then secondary encoding table and decoding table:
    base64Alphabet.getChars(0, alphaLen, _base64ToAsciiC, 0);
    Arrays.fill(_asciiToBase64, BASE64_VALUE_INVALID);
    for (int i = 0; i < alphaLen; ++i) {
        char alpha = _base64ToAsciiC[i];
        _base64ToAsciiB[i] = (byte) alpha;
        _asciiToBase64[alpha] = i;
    }
    // Plus if we use padding, add that in too
    if (writePadding) {
        _asciiToBase64[paddingChar] = BASE64_VALUE_PADDING;
    }
    // By default, require padding on input if written on output; do not
    // accept if padding not written
    _paddingReadBehaviour = writePadding ? PaddingReadBehaviour.PADDING_REQUIRED : PaddingReadBehaviour.PADDING_FORBIDDEN;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(String,String,boolean,char,int).name","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(String,String,boolean,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(String,String,boolean,char,int).base64Alphabet","Parameter_2","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(String,String,boolean,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(String,String,boolean,char,int).writePadding","Parameter_3","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(String,String,boolean,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(String,String,boolean,char,int).paddingChar","Parameter_4","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(String,String,boolean,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(String,String,boolean,char,int).maxLineLength","Parameter_5","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(String,String,boolean,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,int)","Constructor","* ""Copy constructor"" that can be used when the base alphabet is identical
     * to one used by another variant except for the maximum line length
     * (and obviously, name).
     *
     * @param base Variant to use for settings not specific by other parameters
     * @param name Name of this variant
     * @param maxLineLength Maximum length (in characters) of lines to output before
     *    using linefeed","public Base64Variant(Base64Variant base, String name, int maxLineLength) {
    this(base, name, base._writePadding, base._paddingChar, maxLineLength);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,int).base","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,int).name","Parameter_2","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,int).maxLineLength","Parameter_3","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,int)","Constructor","* ""Copy constructor"" that can be used when the base alphabet is identical
     * to one used by another variant, but other details (padding, maximum
     * line length) differ
     *
     * @param base Variant to use for settings not specific by other parameters
     * @param name Name of this variant
     * @param writePadding Whether variant will use padding when encoding
     * @param paddingChar Padding character used for encoding, excepted on reading, if any
     * @param maxLineLength Maximum length (in characters) of lines to output before
     *    using linefeed","public Base64Variant(Base64Variant base, String name, boolean writePadding, char paddingChar, int maxLineLength) {
    this(base, name, writePadding, paddingChar, base._paddingReadBehaviour, maxLineLength);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,int).base","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,int).name","Parameter_2","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,int).writePadding","Parameter_3","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,int).paddingChar","Parameter_4","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,int).maxLineLength","Parameter_5","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,PaddingReadBehaviour,int)","Constructor","No Comment","private Base64Variant(Base64Variant base, String name, boolean writePadding, char paddingChar, PaddingReadBehaviour paddingReadBehaviour, int maxLineLength) {
    _name = name;
    byte[] srcB = base._base64ToAsciiB;
    System.arraycopy(srcB, 0, this._base64ToAsciiB, 0, srcB.length);
    char[] srcC = base._base64ToAsciiC;
    System.arraycopy(srcC, 0, this._base64ToAsciiC, 0, srcC.length);
    int[] srcV = base._asciiToBase64;
    System.arraycopy(srcV, 0, this._asciiToBase64, 0, srcV.length);
    _writePadding = writePadding;
    _paddingChar = paddingChar;
    _maxLineLength = maxLineLength;
    _paddingReadBehaviour = paddingReadBehaviour;
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,PaddingReadBehaviour,int).base","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,PaddingReadBehaviour,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,PaddingReadBehaviour,int).name","Parameter_2","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,PaddingReadBehaviour,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,PaddingReadBehaviour,int).writePadding","Parameter_3","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,PaddingReadBehaviour,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,PaddingReadBehaviour,int).paddingChar","Parameter_4","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,PaddingReadBehaviour,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,PaddingReadBehaviour,int).paddingReadBehaviour","Parameter_5","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,PaddingReadBehaviour,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,PaddingReadBehaviour,int).maxLineLength","Parameter_6","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,String,boolean,char,PaddingReadBehaviour,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,PaddingReadBehaviour)","Constructor","No Comment","private Base64Variant(Base64Variant base, PaddingReadBehaviour paddingReadBehaviour) {
    this(base, base._name, base._writePadding, base._paddingChar, paddingReadBehaviour, base._maxLineLength);
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,PaddingReadBehaviour).base","Parameter_1","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,PaddingReadBehaviour)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,PaddingReadBehaviour).paddingReadBehaviour","Parameter_2","Belong to com.fasterxml.jackson.core.Base64Variant.<init>(Base64Variant,PaddingReadBehaviour)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour","Enum","* Defines how the Base64Variant deals with Padding while reading
     *
     * @since 2.12","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour","Enum","* Defines how the Base64Variant deals with Padding while reading
     *
     * @since 2.12","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour.PADDING_FORBIDDEN","Enum Constant","* Padding is not allowed in Base64 content being read (finding something
         * that looks like padding at the end of content results in an exception)","PADDING_FORBIDDEN","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour.PADDING_REQUIRED","Enum Constant","* Padding is required in Base64 content being read
         * (missing padding for incomplete ending quartet results in an exception)","PADDING_REQUIRED","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour.PADDING_ALLOWED","Enum Constant","* Padding is allowed but not required in Base64 content being read: no
         * exception thrown based on existence or absence, as long as proper
         * padding characters are used.","PADDING_ALLOWED","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.PaddingReadBehaviour","Enum","* Defines how the Base64Variant deals with Padding while reading
     *
     * @since 2.12","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.Base64Variant.PaddingReadBehaviour.PADDING_FORBIDDEN","Enum Constant","* Padding is not allowed in Base64 content being read (finding something
         * that looks like padding at the end of content results in an exception)","PADDING_FORBIDDEN","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.PaddingReadBehaviour.PADDING_REQUIRED","Enum Constant","* Padding is required in Base64 content being read
         * (missing padding for incomplete ending quartet results in an exception)","PADDING_REQUIRED","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Base64Variant.PaddingReadBehaviour.PADDING_ALLOWED","Enum Constant","* Padding is allowed but not required in Base64 content being read: no
         * exception thrown based on existence or absence, as long as proper
         * padding characters are used.","PADDING_ALLOWED","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter","Class","* Simple {@link TokenFilter} implementation that takes a single
 * {@link JsonPointer} and matches a single value accordingly.
 * Instances are immutable and fully thread-safe, shareable,
 * and efficient to use.
 *
 * @since 2.6","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.filter.TokenFilter",""
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter._pathToMatch","Field","No Comment","protected final JsonPointer _pathToMatch;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter._includeAllElements","Field","* If true include all array elements by ignoring the array index match and advancing
     * the JsonPointer to the next level
     *
     * @since 2.16","protected final boolean _includeAllElements;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.construct(JsonPointer,boolean)","Method","* Overridable factory method use for creating new instances by
     * default {@link #includeElement} and {@link #includeProperty} methods:
     * needs to be overridden if sub-classing this class.
     *
     * @param pathToMatch Remaining path for filter to match
     * @param includeAllElements Whether to just include all array elements
     *   of matching Array-valued path automatically
     *
     * @return Constructed filter
     *
     * @since 2.16","protected JsonPointerBasedFilter construct(JsonPointer pathToMatch, boolean includeAllElements) {
    return new JsonPointerBasedFilter(pathToMatch, includeAllElements);
}","JsonPointerBasedFilter","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.construct(JsonPointer,boolean).pathToMatch","Parameter_1","Belong to com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.construct(JsonPointer,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.construct(JsonPointer,boolean).includeAllElements","Parameter_2","Belong to com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.construct(JsonPointer,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.includeElement(int)","Method","No Comment","@Override
public TokenFilter includeElement(int index) {
    JsonPointer next;
    if (_includeAllElements && !_pathToMatch.mayMatchElement()) {
        next = _pathToMatch.tail();
    } else {
        next = _pathToMatch.matchElement(index);
    }
    if (next == null) {
        return null;
    }
    if (next.matches()) {
        return TokenFilter.INCLUDE_ALL;
    }
    return construct(next, _includeAllElements);
}","TokenFilter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.includeElement(int).index","Parameter_1","Belong to com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.includeElement(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.includeProperty(String)","Method","No Comment","@Override
public TokenFilter includeProperty(String name) {
    JsonPointer next = _pathToMatch.matchProperty(name);
    if (next == null) {
        return null;
    }
    if (next.matches()) {
        return TokenFilter.INCLUDE_ALL;
    }
    return construct(next, _includeAllElements);
}","TokenFilter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.includeProperty(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.includeProperty(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.filterStartArray()","Method","No Comment","@Override
public TokenFilter filterStartArray() {
    return this;
}","TokenFilter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.filterStartObject()","Method","No Comment","@Override
public TokenFilter filterStartObject() {
    return this;
}","TokenFilter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter._includeScalar()","Method","No Comment","@Override
protected boolean _includeScalar() {
    // should only occur for root-level scalars, path ""/""
    return _pathToMatch.matches();
}","boolean","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.toString()","Method","No Comment","@Override
public String toString() {
    return ""[JsonPointerFilter at: "" + _pathToMatch + ""]"";
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.<init>(String)","Constructor","No Comment","public JsonPointerBasedFilter(String ptrExpr) {
    this(JsonPointer.compile(ptrExpr), false);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.<init>(String).ptrExpr","Parameter_1","Belong to com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.<init>(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.<init>(JsonPointer)","Constructor","* @param pathToMatch Content to extract","public JsonPointerBasedFilter(JsonPointer pathToMatch) {
    this(pathToMatch, false);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.<init>(JsonPointer).pathToMatch","Parameter_1","Belong to com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.<init>(JsonPointer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.<init>(JsonPointer,boolean)","Constructor","* @param pathToMatch Content to extract
     * @param includeAllElements if true array indexes in <code>ptrExpr</code> are ignored
     *    and all elements will be matched. default: false
     *
     * @since 2.16","public JsonPointerBasedFilter(JsonPointer pathToMatch, boolean includeAllElements) {
    _pathToMatch = pathToMatch;
    _includeAllElements = includeAllElements;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.<init>(JsonPointer,boolean).pathToMatch","Parameter_1","Belong to com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.<init>(JsonPointer,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.<init>(JsonPointer,boolean).includeAllElements","Parameter_2","Belong to com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.<init>(JsonPointer,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter","Class","* Strategy class that can be implemented to specify actual inclusion/exclusion
 * criteria for filtering, used by {@link FilteringGeneratorDelegate}.
 *
 * @since 2.6","Class do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL","Field","* Marker value that should be used to indicate inclusion of a structured
     * value (sub-tree representing Object or Array), or value of a named
     * property (regardless of type).
     * Note that if this instance is returned, it will used as a marker, and
     * no actual callbacks need to be made. For this reason, it is more efficient
     * to return this instance if the whole sub-tree is to be included, instead
     * of implementing similar filter functionality explicitly.","public final static TokenFilter INCLUDE_ALL = new TokenFilter();","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.filterStartObject()","Method","* Method called to check whether Object value at current output
     * location should be included in output.
     * Three kinds of return values may be used as follows:
     *<ul>
     * <li><code>null</code> to indicate that the Object should be skipped
     *   </li>
     * <li>{@link #INCLUDE_ALL} to indicate that the Object should be included
     * completely in output
     *   </li>
     * <li>Any other {@link TokenFilter} implementation (possibly this one) to mean
     *  that further inclusion calls on return filter object need to be made
     *  on contained properties, as necessary. {@link #filterFinishObject()} will
     *  also be called on returned filter object
     *   </li>
     * </ul>
     *<p>
     * Default implementation returns <code>this</code>, which means that checks
     * are made recursively for properties of the Object to determine possible inclusion.
     *
     * @return TokenFilter to use for further calls within Array, unless return value
     *   is <code>null</code> or {@link #INCLUDE_ALL} (which have simpler semantics)","public TokenFilter filterStartObject() {
    return this;
}","TokenFilter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.filterStartArray()","Method","* Method called to check whether Array value at current output
     * location should be included in output.
     * Three kinds of return values may be used as follows:
     *<ul>
     * <li><code>null</code> to indicate that the Array should be skipped
     *   </li>
     * <li>{@link #INCLUDE_ALL} to indicate that the Array should be included
     * completely in output
     *   </li>
     * <li>Any other {@link TokenFilter} implementation (possibly this one) to mean
     *  that further inclusion calls on return filter object need to be made
     *  on contained element values, as necessary. {@link #filterFinishArray()} will
     *  also be called on returned filter object
     *   </li>
     * </ul>
     *<p>
     * Default implementation returns <code>this</code>, which means that checks
     * are made recursively for elements of the array to determine possible inclusion.
     *
     * @return TokenFilter to use for further calls within Array, unless return value
     *   is <code>null</code> or {@link #INCLUDE_ALL} (which have simpler semantics)","public TokenFilter filterStartArray() {
    return this;
}","TokenFilter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.filterFinishObject()","Method","* Method called to indicate that output of non-filtered Object (one that may
     * have been included either completely, or in part) is completed,
     * in cases where filter other that {@link #INCLUDE_ALL} was returned.
     * This occurs when {@link JsonGenerator#writeEndObject()} is called.","public void filterFinishObject() {
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.filterFinishArray()","Method","* Method called to indicate that output of non-filtered Array (one that may
     * have been included either completely, or in part) is completed,
     * in cases where filter other that {@link #INCLUDE_ALL} was returned.
     * This occurs when {@link JsonGenerator#writeEndArray()} is called.","public void filterFinishArray() {
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeProperty(String)","Method","* Method called to check whether property value with specified name,
     * at current output location, should be included in output.
     * Three kinds of return values may be used as follows:
     *<ul>
     * <li><code>null</code> to indicate that the property and its value should be skipped
     *   </li>
     * <li>{@link #INCLUDE_ALL} to indicate that the property and its value should be included
     * completely in output
     *   </li>
     * <li>Any other {@link TokenFilter} implementation (possibly this one) to mean
     *  that further inclusion calls on returned filter object need to be made
     *  as necessary, to determine inclusion.
     *   </li>
     * </ul>
     *<p>
     * The default implementation simply returns <code>this</code> to continue calling
     * methods on this filter object, without full inclusion or exclusion.
     *
     * @param name Name of Object property to check
     *
     * @return TokenFilter to use for further calls within property value, unless return value
     *   is <code>null</code> or {@link #INCLUDE_ALL} (which have simpler semantics)","public TokenFilter includeProperty(String name) {
    return this;
}","TokenFilter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeProperty(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilter.includeProperty(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeElement(int)","Method","* Method called to check whether array element with specified index (zero-based),
     * at current output location, should be included in output.
     * Three kinds of return values may be used as follows:
     *<ul>
     * <li><code>null</code> to indicate that the Array element should be skipped
     *   </li>
     * <li>{@link #INCLUDE_ALL} to indicate that the Array element should be included
     * completely in output
     *   </li>
     * <li>Any other {@link TokenFilter} implementation (possibly this one) to mean
     *  that further inclusion calls on returned filter object need to be made
     *  as necessary, to determine inclusion.
     *   </li>
     * </ul>
     *<p>
     * The default implementation simply returns <code>this</code> to continue calling
     * methods on this filter object, without full inclusion or exclusion.
     *
     * @param index Array element index (0-based) to check
     *
     * @return TokenFilter to use for further calls within element value, unless return value
     *   is <code>null</code> or {@link #INCLUDE_ALL} (which have simpler semantics)","public TokenFilter includeElement(int index) {
    return this;
}","TokenFilter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeElement(int).index","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilter.includeElement(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeRootValue(int)","Method","* Method called to check whether root-level value,
     * at current output location, should be included in output.
     * Three kinds of return values may be used as follows:
     *<ul>
     * <li><code>null</code> to indicate that the root value should be skipped
     *   </li>
     * <li>{@link #INCLUDE_ALL} to indicate that the root value should be included
     * completely in output
     *   </li>
     * <li>Any other {@link TokenFilter} implementation (possibly this one) to mean
     *  that further inclusion calls on returned filter object need to be made
     *  as necessary, to determine inclusion.
     *   </li>
     * </ul>
     *<p>
     * The default implementation simply returns <code>this</code> to continue calling
     * methods on this filter object, without full inclusion or exclusion.
     *
     * @param index Index (0-based) of the root value to check
     *
     * @return TokenFilter to use for further calls within root value, unless return value
     *   is <code>null</code> or {@link #INCLUDE_ALL} (which have simpler semantics)","public TokenFilter includeRootValue(int index) {
    return this;
}","TokenFilter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeRootValue(int).index","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilter.includeRootValue(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeValue(JsonParser)","Method","* Call made when verifying whether a scalar value is being
     * read from a parser.
     *<p>
     * Default action is to call <code>_includeScalar()</code> and return
     * whatever it indicates.
     *
     * @param p Parser that points to the value (typically {@code delegate}
     *    parser, not filtering parser that wraps it)
     *
     * @return True if scalar value is to be included; false if not
     *
     * @throws IOException if there are any problems reading content (typically
     *   via calling passed-in {@code JsonParser})","public boolean includeValue(JsonParser p) throws IOException {
    return _includeScalar();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeValue(JsonParser).p","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilter.includeValue(JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeBoolean(boolean)","Method","* Call made to verify whether leaf-level
     * boolean value
     * should be included in output or not.
     *
     * @param value Value to check
     *
     * @return True if value is to be included; false if not","public boolean includeBoolean(boolean value) {
    return _includeScalar();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeBoolean(boolean).value","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilter.includeBoolean(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeNull()","Method","* Call made to verify whether leaf-level
     * null value
     * should be included in output or not.
     *
     * @return True if ({@code null}) value is to be included; false if not","public boolean includeNull() {
    return _includeScalar();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeString(String)","Method","* Call made to verify whether leaf-level
     * String value
     * should be included in output or not.
     *
     * @param value Value to check
     *
     * @return True if value is to be included; false if not","public boolean includeString(String value) {
    return _includeScalar();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeString(String).value","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilter.includeString(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeString(java.io.Reader,int)","Method","* Call made to verify whether leaf-level
     * ""streaming"" String value
     * should be included in output or not.
     *<p>
     * NOTE: note that any reads from passed in {@code Reader} may lead
     * to actual loss of content to write; typically method should NOT
     * access content passed via this method.
     *
     * @param r Reader used to pass String value to parser
     * @param maxLen indicated maximum length of String value
     *
     * @return True if value is to be included; false if not
     *
     * @since 2.11","public boolean includeString(java.io.Reader r, int maxLen) {
    return _includeScalar();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeString(java.io.Reader,int).r","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilter.includeString(java.io.Reader,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeString(java.io.Reader,int).maxLen","Parameter_2","Belong to com.fasterxml.jackson.core.filter.TokenFilter.includeString(java.io.Reader,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(int)","Method","* Call made to verify whether leaf-level
     * <code>int</code> value
     * should be included in output or not.
     *
     * NOTE: also called for `short`, `byte`
     *
     * @param value Value to check
     *
     * @return True if value is to be included; false if not","public boolean includeNumber(int value) {
    return _includeScalar();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(int).value","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(long)","Method","* Call made to verify whether leaf-level
     * <code>long</code> value
     * should be included in output or not.
     *
     * @param value Value to check
     *
     * @return True if value is to be included; false if not","public boolean includeNumber(long value) {
    return _includeScalar();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(long).value","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(float)","Method","* Call made to verify whether leaf-level
     * <code>float</code> value
     * should be included in output or not.
     *
     * @param value Value to check
     *
     * @return True if value is to be included; false if not","public boolean includeNumber(float value) {
    return _includeScalar();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(float).value","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(double)","Method","* Call made to verify whether leaf-level
     * <code>double</code> value
     * should be included in output or not.
     *
     * @param value Value to check
     *
     * @return True if value is to be included; false if not","public boolean includeNumber(double value) {
    return _includeScalar();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(double).value","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(BigDecimal)","Method","* Call made to verify whether leaf-level
     * {@link BigDecimal} value
     * should be included in output or not.
     *
     * @param value Value to check
     *
     * @return True if value is to be included; false if not","public boolean includeNumber(BigDecimal value) {
    return _includeScalar();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(BigDecimal).value","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(BigDecimal)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(BigInteger)","Method","* Call made to verify whether leaf-level
     * {@link BigInteger} value
     * should be included in output or not.
     *
     * @param value Value to check
     *
     * @return True if value is to be included; false if not","public boolean includeNumber(BigInteger value) {
    return _includeScalar();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(BigInteger).value","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(BigInteger)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeBinary()","Method","* Call made to verify whether leaf-level
     * Binary value
     * should be included in output or not.
     *<p>
     * NOTE: no binary payload passed; assumption is this won't be of much use.
     *
     * @return True if the binary value is to be included; false if not","public boolean includeBinary() {
    return _includeScalar();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeRawValue()","Method","* Call made to verify whether leaf-level
     * raw (pre-encoded, not quoted by generator) value
     * should be included in output or not.
     *<p>
     * NOTE: value itself not passed since it may come on multiple forms
     * and is unlikely to be of much use in determining inclusion
     * criteria.
     *
     * @return True if the raw value is to be included; false if not","public boolean includeRawValue() {
    return _includeScalar();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeEmbeddedValue(Object)","Method","* Call made to verify whether leaf-level
     * embedded (Opaque) value
     * should be included in output or not.
     *
     * @param value Value to check
     *
     * @return True if value is to be included; false if not","public boolean includeEmbeddedValue(Object value) {
    return _includeScalar();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeEmbeddedValue(Object).value","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilter.includeEmbeddedValue(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeEmptyArray(boolean)","Method","* Call made to verify whether leaf-level empty Array value
     * should be included in output or not.
     *
     * @param contentsFiltered True if Array had contents but they were
     *   filtered out (NOT included); false if we had actual empty Array.
     *
     * @return True if value is to be included; false if not
     *
     * @since 2.14","public boolean includeEmptyArray(boolean contentsFiltered) {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeEmptyArray(boolean).contentsFiltered","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilter.includeEmptyArray(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeEmptyObject(boolean)","Method","* Call made to verify whether leaf-level empty Object value
     * should be included in output or not.
     *
     * @param contentsFiltered True if Object had contents but they were
     *   filtered out (NOT included); false if we had actual empty Object.
     *
     * @return True if value is to be included; false if not
     *
     * @since 2.14","public boolean includeEmptyObject(boolean contentsFiltered) {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.includeEmptyObject(boolean).contentsFiltered","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilter.includeEmptyObject(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.toString()","Method","No Comment","@Override
public String toString() {
    if (this == INCLUDE_ALL) {
        return ""TokenFilter.INCLUDE_ALL"";
    }
    return super.toString();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter._includeScalar()","Method","* Overridable default implementation delegated to all scalar value
     * inclusion check methods.
     * The default implementation simply includes all leaf values.
     *
     * @return Whether all leaf scalar values should be included ({@code true})
     *    or not ({@code false})","protected boolean _includeScalar() {
    return true;
}","boolean","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.<init>()","Constructor","No Comment","protected TokenFilter() {
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter$Inclusion","Enum","* Enumeration that controls how TokenFilter return values are interpreted.
     *
     * @since 2.12","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.filter.TokenFilter$Inclusion","Enum","* Enumeration that controls how TokenFilter return values are interpreted.
     *
     * @since 2.12","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.filter.TokenFilter$Inclusion.ONLY_INCLUDE_ALL","Enum Constant","* Tokens will only be included if the filter returns TokenFilter.INCLUDE_ALL","ONLY_INCLUDE_ALL","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter$Inclusion.INCLUDE_ALL_AND_PATH","Enum Constant","* When TokenFilter.INCLUDE_ALL is returned, the corresponding token will
         * be included as well as enclosing tokens up to the root","INCLUDE_ALL_AND_PATH","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter$Inclusion.INCLUDE_NON_NULL","Enum Constant","* Tokens will be included if any non-null filter is returned.
         * The exception is if a field name returns a non-null filter,
         * but the field value returns a null filter. In this case the
         * field name and value will both be omitted.","INCLUDE_NON_NULL","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.Inclusion","Enum","* Enumeration that controls how TokenFilter return values are interpreted.
     *
     * @since 2.12","Enum do not obtain Source Code","No return type","public ","enum has no extends",""
"com.fasterxml.jackson.core.filter.TokenFilter.Inclusion.ONLY_INCLUDE_ALL","Enum Constant","* Tokens will only be included if the filter returns TokenFilter.INCLUDE_ALL","ONLY_INCLUDE_ALL","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.Inclusion.INCLUDE_ALL_AND_PATH","Enum Constant","* When TokenFilter.INCLUDE_ALL is returned, the corresponding token will
         * be included as well as enclosing tokens up to the root","INCLUDE_ALL_AND_PATH","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilter.Inclusion.INCLUDE_NON_NULL","Enum Constant","* Tokens will be included if any non-null filter is returned.
         * The exception is if a field name returns a non-null filter,
         * but the field value returns a null filter. In this case the
         * field name and value will both be omitted.","INCLUDE_NON_NULL","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate","Class","* Specialized {@link JsonParserDelegate} that allows use of
 * {@link TokenFilter} for outputting a subset of content that
 * is visible to caller
 *
 * @since 2.6","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.util.JsonParserDelegate",""
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.rootFilter","Field","* Object consulted to determine whether to write parts of content generator
     * is asked to write or not.","protected TokenFilter rootFilter;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate._allowMultipleMatches","Field","* Flag that determines whether filtering will continue after the first
     * match is indicated or not: if `false`, output is based on just the first
     * full match (returning {@link TokenFilter#INCLUDE_ALL}) and no more
     * checks are made; if `true` then filtering will be applied as necessary
     * until end of content.","protected boolean _allowMultipleMatches;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate._inclusion","Field","* Flag that determines whether path leading up to included content should
     * also be automatically included or not. If `false`, no path inclusion is
     * done and only explicitly included entries are output; if `true` then
     * path from main level down to match is also included as necessary.","protected TokenFilter.Inclusion _inclusion;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate._currToken","Field","* Last token retrieved via {@link #nextToken}, if any.
     * Null before the first call to <code>nextToken()</code>,
     * as well as if token has been explicitly cleared","protected JsonToken _currToken;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate._lastClearedToken","Field","* Last cleared token, if any: that is, value that was in
     * effect when {@link #clearCurrentToken} was called.","protected JsonToken _lastClearedToken;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate._headContext","Field","* During traversal this is the actual ""open"" parse tree, which sometimes
     * is the same as {@link #_exposedContext}, and at other times is ahead
     * of it. Note that this context is never null.","protected TokenFilterContext _headContext;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate._exposedContext","Field","* In cases where {@link #_headContext} is ""ahead"" of context exposed to
     * caller, this context points to what is currently exposed to caller.
     * When the two are in sync, this context reference will be <code>null</code>.","protected TokenFilterContext _exposedContext;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate._itemFilter","Field","* State that applies to the item within container, used where applicable.
     * Specifically used to pass inclusion state between property name and
     * property, and also used for array elements.","protected TokenFilter _itemFilter;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate._matchCount","Field","* Number of tokens for which {@link TokenFilter#INCLUDE_ALL}
     * has been returned.","protected int _matchCount;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getFilter()","Method","No Comment","public TokenFilter getFilter() {
    return rootFilter;
}","TokenFilter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getMatchCount()","Method","* Accessor for finding number of matches, where specific token and sub-tree
     * starting (if structured type) are passed.
     *
     * @return Number of matches","public int getMatchCount() {
    return _matchCount;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentToken()","Method","No Comment","@Override
public JsonToken currentToken() {
    return _currToken;
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentToken()","Method","No Comment","@Override
// since 2.17
@Deprecated
public JsonToken getCurrentToken() {
    return _currToken;
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentTokenId()","Method","No Comment","@Override
public final int currentTokenId() {
    final JsonToken t = _currToken;
    return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();
}","int","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentTokenId()","Method","No Comment","// since 2.12
@Deprecated
@Override
public final int getCurrentTokenId() {
    return currentTokenId();
}","int","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasCurrentToken()","Method","No Comment","@Override
public boolean hasCurrentToken() {
    return _currToken != null;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasTokenId(int)","Method","No Comment","@Override
public boolean hasTokenId(int id) {
    final JsonToken t = _currToken;
    if (t == null) {
        return (JsonTokenId.ID_NO_TOKEN == id);
    }
    return t.id() == id;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasTokenId(int).id","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasTokenId(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasToken(JsonToken)","Method","No Comment","@Override
public final boolean hasToken(JsonToken t) {
    return (_currToken == t);
}","boolean","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasToken(JsonToken).t","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasToken(JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartArrayToken()","Method","No Comment","@Override
public boolean isExpectedStartArrayToken() {
    return _currToken == JsonToken.START_ARRAY;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartObjectToken()","Method","No Comment","@Override
public boolean isExpectedStartObjectToken() {
    return _currToken == JsonToken.START_OBJECT;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentLocation()","Method","No Comment","@Override
public JsonLocation currentLocation() {
    return delegate.currentLocation();
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentLocation()","Method","No Comment","@Override
// since 2.17
@Deprecated
public JsonLocation getCurrentLocation() {
    return delegate.getCurrentLocation();
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentTokenLocation()","Method","No Comment","@Override
public JsonLocation currentTokenLocation() {
    return delegate.currentTokenLocation();
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTokenLocation()","Method","No Comment","@Override
// since 2.17
@Deprecated
public JsonLocation getTokenLocation() {
    return delegate.getTokenLocation();
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getParsingContext()","Method","No Comment","@Override
public JsonStreamContext getParsingContext() {
    return _filterContext();
}","JsonStreamContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentName()","Method","No Comment","@Override
// since 2.17
@Deprecated
public String getCurrentName() throws IOException {
    JsonStreamContext ctxt = _filterContext();
    if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {
        JsonStreamContext parent = ctxt.getParent();
        return (parent == null) ? null : parent.getCurrentName();
    }
    return ctxt.getCurrentName();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentName()","Method","2.13: IMPORTANT! Must override along with older getCurrentName()","@Override
public String currentName() throws IOException {
    JsonStreamContext ctxt = _filterContext();
    if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {
        JsonStreamContext parent = ctxt.getParent();
        return (parent == null) ? null : parent.getCurrentName();
    }
    return ctxt.getCurrentName();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.clearCurrentToken()","Method","No Comment","@Override
public void clearCurrentToken() {
    if (_currToken != null) {
        _lastClearedToken = _currToken;
        _currToken = null;
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLastClearedToken()","Method","No Comment","@Override
public JsonToken getLastClearedToken() {
    return _lastClearedToken;
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.overrideCurrentName(String)","Method","No Comment","@Override
public void overrideCurrentName(String name) {
    // 14-Apr-2015, tatu: Not sure whether this can be supported, and if so,
    //    what to do with it... Delegation won't work for sure, so let's for
    //    now throw an exception
    throw new UnsupportedOperationException(""Can not currently override name during filtering read"");
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.overrideCurrentName(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate.overrideCurrentName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextToken()","Method","No Comment","@Override
public JsonToken nextToken() throws IOException {
    // 23-May-2017, tatu: To be honest, code here is rather hairy and I don't like all
    //    conditionals; and it seems odd to return `null` but NOT considering input
    //    as closed... would love a rewrite to simplify/clear up logic here.
    // Check for _allowMultipleMatches - false and at least there is one token - which is _currToken
    // check for no buffered context _exposedContext - null
    // If all the conditions matches then check for scalar / non-scalar property
    if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {
        // if scalar, and scalar not present in obj/array and _inclusion == ONLY_INCLUDE_ALL
        // and INCLUDE_ALL matched once, return null
        if (_currToken.isScalarValue() && !_headContext.isStartHandled() && _inclusion == Inclusion.ONLY_INCLUDE_ALL && (_itemFilter == TokenFilter.INCLUDE_ALL)) {
            return (_currToken = null);
        }
    }
    // Anything buffered?
    TokenFilterContext ctxt = _exposedContext;
    if (ctxt != null) {
        while (true) {
            JsonToken t = ctxt.nextTokenToRead();
            if (t != null) {
                _currToken = t;
                return t;
            }
            // all done with buffered stuff?
            if (ctxt == _headContext) {
                _exposedContext = null;
                if (ctxt.inArray()) {
                    t = delegate.getCurrentToken();
                    _currToken = t;
                    if (_currToken == JsonToken.END_ARRAY) {
                        _headContext = _headContext.getParent();
                        _itemFilter = _headContext.getFilter();
                    }
                    return t;
                }
                // 19-Jul-2021, tatu: [core#700]: following was commented out?!
                // Almost! Most likely still have the current token;
                // with the sole exception of FIELD_NAME
                t = delegate.currentToken();
                if (t == JsonToken.END_OBJECT) {
                    _headContext = _headContext.getParent();
                    _itemFilter = _headContext.getFilter();
                }
                if (t != JsonToken.FIELD_NAME) {
                    _currToken = t;
                    return t;
                }
                break;
            }
            // If not, traverse down the context chain
            ctxt = _headContext.findChildOf(ctxt);
            _exposedContext = ctxt;
            if (ctxt == null) {
                // should never occur
                throw _constructError(""Unexpected problem: chain of filtered context broken"");
            }
        }
    }
    // If not, need to read more. If we got any:
    JsonToken t = delegate.nextToken();
    if (t == null) {
        // no strict need to close, since we have no state here
        _currToken = t;
        return t;
    }
    // otherwise... to include or not?
    TokenFilter f;
    switch(t.id()) {
        case ID_START_ARRAY:
            f = _itemFilter;
            if (f == TokenFilter.INCLUDE_ALL) {
                _headContext = _headContext.createChildArrayContext(f, true);
                return (_currToken = t);
            }
            if (f == null) {
                // does this occur?
                delegate.skipChildren();
                break;
            }
            // Otherwise still iffy, need to check
            f = _headContext.checkValue(f);
            if (f == null) {
                delegate.skipChildren();
                break;
            }
            if (f != TokenFilter.INCLUDE_ALL) {
                f = f.filterStartArray();
            }
            _itemFilter = f;
            if (f == TokenFilter.INCLUDE_ALL) {
                _headContext = _headContext.createChildArrayContext(f, true);
                return (_currToken = t);
            } else if (f != null && _inclusion == Inclusion.INCLUDE_NON_NULL) {
                // TODO don't count as match?
                _headContext = _headContext.createChildArrayContext(f, true);
                return (_currToken = t);
            }
            _headContext = _headContext.createChildArrayContext(f, false);
            // Also: only need buffering if parent path to be included
            if (_inclusion == Inclusion.INCLUDE_ALL_AND_PATH) {
                t = _nextTokenWithBuffering(_headContext);
                if (t != null) {
                    _currToken = t;
                    return t;
                }
            }
            break;
        case ID_START_OBJECT:
            f = _itemFilter;
            if (f == TokenFilter.INCLUDE_ALL) {
                _headContext = _headContext.createChildObjectContext(f, true);
                return (_currToken = t);
            }
            if (f == null) {
                // does this occur?
                delegate.skipChildren();
                break;
            }
            // Otherwise still iffy, need to check
            f = _headContext.checkValue(f);
            if (f == null) {
                delegate.skipChildren();
                break;
            }
            if (f != TokenFilter.INCLUDE_ALL) {
                f = f.filterStartObject();
            }
            _itemFilter = f;
            if (f == TokenFilter.INCLUDE_ALL) {
                _headContext = _headContext.createChildObjectContext(f, true);
                return (_currToken = t);
            } else if (f != null && _inclusion == Inclusion.INCLUDE_NON_NULL) {
                // TODO don't count as match?
                _headContext = _headContext.createChildObjectContext(f, true);
                return (_currToken = t);
            }
            _headContext = _headContext.createChildObjectContext(f, false);
            // Also: only need buffering if parent path to be included
            if (_inclusion == Inclusion.INCLUDE_ALL_AND_PATH) {
                t = _nextTokenWithBuffering(_headContext);
                if (t != null) {
                    _currToken = t;
                    return t;
                }
            }
            // note: inclusion of surrounding Object handled separately via
            // FIELD_NAME
            break;
        case ID_END_ARRAY:
        case ID_END_OBJECT:
            {
                boolean returnEnd = _headContext.isStartHandled();
                f = _headContext.getFilter();
                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
                    if (t.id() == JsonTokenId.ID_END_ARRAY) {
                        f.filterFinishArray();
                    } else {
                        f.filterFinishObject();
                    }
                }
                _headContext = _headContext.getParent();
                _itemFilter = _headContext.getFilter();
                if (returnEnd) {
                    return (_currToken = t);
                }
            }
            break;
        case ID_FIELD_NAME:
            {
                final String name = delegate.currentName();
                // note: this will also set 'needToHandleName'
                f = _headContext.setFieldName(name);
                if (f == TokenFilter.INCLUDE_ALL) {
                    _itemFilter = f;
                    return (_currToken = t);
                }
                if (f == null) {
                    delegate.nextToken();
                    delegate.skipChildren();
                    break;
                }
                f = f.includeProperty(name);
                if (f == null) {
                    delegate.nextToken();
                    delegate.skipChildren();
                    break;
                }
                _itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    if (_verifyAllowedMatches()) {
                        if (_inclusion == Inclusion.INCLUDE_ALL_AND_PATH) {
                            return (_currToken = t);
                        }
                    } else {
                        delegate.nextToken();
                        delegate.skipChildren();
                    }
                }
                if (_inclusion != Inclusion.ONLY_INCLUDE_ALL) {
                    t = _nextTokenWithBuffering(_headContext);
                    if (t != null) {
                        _currToken = t;
                        return t;
                    }
                }
                break;
            }
        default:
            // scalar value
            f = _itemFilter;
            if (f == TokenFilter.INCLUDE_ALL) {
                return (_currToken = t);
            }
            if (f != null) {
                f = _headContext.checkValue(f);
                if ((f == TokenFilter.INCLUDE_ALL) || ((f != null) && f.includeValue(delegate))) {
                    if (_verifyAllowedMatches()) {
                        return (_currToken = t);
                    }
                }
            }
            // Otherwise not included (leaves must be explicitly included)
            break;
    }
    // We get here if token was not yet found; offlined handling
    return _nextToken2();
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextToken2()","Method","buffering is needed.","protected final JsonToken _nextToken2() throws IOException {
    main_loop: while (true) {
        JsonToken t = delegate.nextToken();
        if (t == null) {
            // is this even legal?
            _currToken = t;
            return t;
        }
        TokenFilter f;
        switch(t.id()) {
            case ID_START_ARRAY:
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildArrayContext(f, true);
                    return (_currToken = t);
                }
                if (f == null) {
                    // does this occur?
                    delegate.skipChildren();
                    continue main_loop;
                }
                // Otherwise still iffy, need to check
                f = _headContext.checkValue(f);
                if (f == null) {
                    delegate.skipChildren();
                    continue main_loop;
                }
                if (f != TokenFilter.INCLUDE_ALL) {
                    f = f.filterStartArray();
                }
                _itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildArrayContext(f, true);
                    return (_currToken = t);
                } else if (f != null && _inclusion == Inclusion.INCLUDE_NON_NULL) {
                    _headContext = _headContext.createChildArrayContext(f, true);
                    return (_currToken = t);
                }
                _headContext = _headContext.createChildArrayContext(f, false);
                // but if we didn't figure it out yet, need to buffer possible events
                if (_inclusion == Inclusion.INCLUDE_ALL_AND_PATH) {
                    t = _nextTokenWithBuffering(_headContext);
                    if (t != null) {
                        _currToken = t;
                        return t;
                    }
                }
                continue main_loop;
            case ID_START_OBJECT:
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildObjectContext(f, true);
                    return (_currToken = t);
                }
                if (f == null) {
                    // does this occur?
                    delegate.skipChildren();
                    continue main_loop;
                }
                // Otherwise still iffy, need to check
                f = _headContext.checkValue(f);
                if (f == null) {
                    delegate.skipChildren();
                    continue main_loop;
                }
                if (f != TokenFilter.INCLUDE_ALL) {
                    f = f.filterStartObject();
                }
                _itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildObjectContext(f, true);
                    return (_currToken = t);
                } else if (f != null && _inclusion == Inclusion.INCLUDE_NON_NULL) {
                    _headContext = _headContext.createChildObjectContext(f, true);
                    return (_currToken = t);
                }
                _headContext = _headContext.createChildObjectContext(f, false);
                if (_inclusion == Inclusion.INCLUDE_ALL_AND_PATH) {
                    t = _nextTokenWithBuffering(_headContext);
                    if (t != null) {
                        _currToken = t;
                        return t;
                    }
                }
                continue main_loop;
            case ID_END_ARRAY:
                {
                    boolean returnEnd = _headContext.isStartHandled();
                    f = _headContext.getFilter();
                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
                        boolean includeEmpty = f.includeEmptyArray(_headContext.hasCurrentIndex());
                        f.filterFinishArray();
                        if (includeEmpty) {
                            return _nextBuffered(_headContext);
                        }
                    }
                    _headContext = _headContext.getParent();
                    _itemFilter = _headContext.getFilter();
                    if (returnEnd) {
                        return (_currToken = t);
                    }
                }
                continue main_loop;
            case ID_END_OBJECT:
                {
                    boolean returnEnd = _headContext.isStartHandled();
                    f = _headContext.getFilter();
                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
                        boolean includeEmpty = f.includeEmptyArray(_headContext.hasCurrentName());
                        f.filterFinishObject();
                        if (includeEmpty) {
                            return _nextBuffered(_headContext);
                        }
                    }
                    _headContext = _headContext.getParent();
                    _itemFilter = _headContext.getFilter();
                    if (returnEnd) {
                        return (_currToken = t);
                    }
                }
                continue main_loop;
            case ID_FIELD_NAME:
                {
                    final String name = delegate.currentName();
                    f = _headContext.setFieldName(name);
                    if (f == TokenFilter.INCLUDE_ALL) {
                        _itemFilter = f;
                        return (_currToken = t);
                    }
                    if (f == null) {
                        // filter out the value
                        delegate.nextToken();
                        delegate.skipChildren();
                        continue main_loop;
                    }
                    f = f.includeProperty(name);
                    if (f == null) {
                        // filter out the value
                        delegate.nextToken();
                        delegate.skipChildren();
                        continue main_loop;
                    }
                    _itemFilter = f;
                    if (f == TokenFilter.INCLUDE_ALL) {
                        if (_verifyAllowedMatches()) {
                            if (_inclusion == Inclusion.INCLUDE_ALL_AND_PATH) {
                                return (_currToken = t);
                            }
                        } else {
                            delegate.nextToken();
                            delegate.skipChildren();
                        }
                        continue main_loop;
                    }
                    if (_inclusion != Inclusion.ONLY_INCLUDE_ALL) {
                        t = _nextTokenWithBuffering(_headContext);
                        if (t != null) {
                            _currToken = t;
                            return t;
                        }
                    }
                }
                continue main_loop;
            default:
                // scalar value
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    return (_currToken = t);
                }
                if (f != null) {
                    f = _headContext.checkValue(f);
                    if ((f == TokenFilter.INCLUDE_ALL) || ((f != null) && f.includeValue(delegate))) {
                        if (_verifyAllowedMatches()) {
                            return (_currToken = t);
                        }
                    }
                }
                // Otherwise not included (leaves must be explicitly included)
                break;
        }
    }
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextTokenWithBuffering(TokenFilterContext)","Method","Method called when a new potentially included context is found.","protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot) throws IOException {
    main_loop: while (true) {
        JsonToken t = delegate.nextToken();
        if (t == null) {
            // is this even legal?
            return t;
        }
        TokenFilter f;
        // One simplification here: we know for a fact that the item filter is
        // neither null nor 'include all', for most cases; the only exception
        // being FIELD_NAME handling
        switch(t.id()) {
            case ID_START_ARRAY:
                f = _headContext.checkValue(_itemFilter);
                if (f == null) {
                    delegate.skipChildren();
                    continue main_loop;
                }
                if (f != TokenFilter.INCLUDE_ALL) {
                    f = f.filterStartArray();
                }
                _itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildArrayContext(f, true);
                    return _nextBuffered(buffRoot);
                } else if (f != null && _inclusion == Inclusion.INCLUDE_NON_NULL) {
                    // TODO don't count as match?
                    _headContext = _headContext.createChildArrayContext(f, true);
                    return _nextBuffered(buffRoot);
                }
                _headContext = _headContext.createChildArrayContext(f, false);
                continue main_loop;
            case ID_START_OBJECT:
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildObjectContext(f, true);
                    return t;
                }
                if (f == null) {
                    // does this occur?
                    delegate.skipChildren();
                    continue main_loop;
                }
                // Otherwise still iffy, need to check
                f = _headContext.checkValue(f);
                if (f == null) {
                    delegate.skipChildren();
                    continue main_loop;
                }
                if (f != TokenFilter.INCLUDE_ALL) {
                    f = f.filterStartObject();
                }
                _itemFilter = f;
                if (f == TokenFilter.INCLUDE_ALL) {
                    _headContext = _headContext.createChildObjectContext(f, true);
                    return _nextBuffered(buffRoot);
                } else if (f != null && _inclusion == Inclusion.INCLUDE_NON_NULL) {
                    // TODO don't count as match?
                    _headContext = _headContext.createChildArrayContext(f, true);
                    return _nextBuffered(buffRoot);
                }
                _headContext = _headContext.createChildObjectContext(f, false);
                continue main_loop;
            case ID_END_ARRAY:
                {
                    // Unlike with other loops, here we know that content was NOT
                    // included (won't get this far otherwise)
                    f = _headContext.getFilter();
                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
                        boolean includeEmpty = f.includeEmptyArray(_headContext.hasCurrentIndex());
                        f.filterFinishArray();
                        if (includeEmpty) {
                            return _nextBuffered(buffRoot);
                        }
                    }
                    boolean gotEnd = (_headContext == buffRoot);
                    boolean returnEnd = gotEnd && _headContext.isStartHandled();
                    _headContext = _headContext.getParent();
                    _itemFilter = _headContext.getFilter();
                    if (returnEnd) {
                        return t;
                    }
                    if (gotEnd) {
                        return null;
                    }
                }
                continue main_loop;
            case ID_END_OBJECT:
                {
                    // Unlike with other loops, here we know that content was NOT
                    // included (won't get this far otherwise)
                    f = _headContext.getFilter();
                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {
                        boolean includeEmpty = f.includeEmptyObject(_headContext.hasCurrentName());
                        f.filterFinishObject();
                        if (includeEmpty) {
                            _headContext._currentName = _headContext._parent == null ? null : _headContext._parent._currentName;
                            _headContext._needToHandleName = false;
                            return _nextBuffered(buffRoot);
                        }
                    }
                    boolean gotEnd = (_headContext == buffRoot);
                    boolean returnEnd = gotEnd && _headContext.isStartHandled();
                    _headContext = _headContext.getParent();
                    _itemFilter = _headContext.getFilter();
                    if (returnEnd) {
                        return t;
                    }
                    if (gotEnd) {
                        return null;
                    }
                }
                continue main_loop;
            case ID_FIELD_NAME:
                {
                    final String name = delegate.currentName();
                    f = _headContext.setFieldName(name);
                    if (f == TokenFilter.INCLUDE_ALL) {
                        _itemFilter = f;
                        return _nextBuffered(buffRoot);
                    }
                    if (f == null) {
                        // filter out the value
                        delegate.nextToken();
                        delegate.skipChildren();
                        continue main_loop;
                    }
                    f = f.includeProperty(name);
                    if (f == null) {
                        // filter out the value
                        delegate.nextToken();
                        delegate.skipChildren();
                        continue main_loop;
                    }
                    _itemFilter = f;
                    if (f == TokenFilter.INCLUDE_ALL) {
                        if (_verifyAllowedMatches()) {
                            return _nextBuffered(buffRoot);
                        } else {
                            // edge case: if no more matches allowed, reset filter
                            // to initial state to prevent missing a token in next iteration
                            _itemFilter = _headContext.setFieldName(name);
                        }
                    }
                }
                continue main_loop;
            default:
                // scalar value
                f = _itemFilter;
                if (f == TokenFilter.INCLUDE_ALL) {
                    return _nextBuffered(buffRoot);
                }
                if (f != null) {
                    f = _headContext.checkValue(f);
                    if ((f == TokenFilter.INCLUDE_ALL) || ((f != null) && f.includeValue(delegate))) {
                        if (_verifyAllowedMatches()) {
                            return _nextBuffered(buffRoot);
                        }
                    }
                }
                // Otherwise not included (leaves must be explicitly included)
                continue main_loop;
        }
    }
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextTokenWithBuffering(TokenFilterContext).buffRoot","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextTokenWithBuffering(TokenFilterContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextBuffered(TokenFilterContext)","Method","No Comment","private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException {
    _exposedContext = buffRoot;
    TokenFilterContext ctxt = buffRoot;
    JsonToken t = ctxt.nextTokenToRead();
    if (t != null) {
        return t;
    }
    while (true) {
        // all done with buffered stuff?
        if (ctxt == _headContext) {
            throw _constructError(""Internal error: failed to locate expected buffered tokens"");
            /*
                _exposedContext = null;
                break;
                */
        }
        // If not, traverse down the context chain
        ctxt = _exposedContext.findChildOf(ctxt);
        _exposedContext = ctxt;
        if (ctxt == null) {
            // should never occur
            throw _constructError(""Unexpected problem: chain of filtered context broken"");
        }
        t = _exposedContext.nextTokenToRead();
        if (t != null) {
            return t;
        }
    }
}","JsonToken","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextBuffered(TokenFilterContext).buffRoot","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextBuffered(TokenFilterContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate._verifyAllowedMatches()","Method","No Comment","private final boolean _verifyAllowedMatches() throws IOException {
    if (_matchCount == 0 || _allowMultipleMatches) {
        ++_matchCount;
        return true;
    }
    return false;
}","boolean","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextValue()","Method","No Comment","@Override
public JsonToken nextValue() throws IOException {
    // Re-implemented same as ParserMinimalBase:
    JsonToken t = nextToken();
    if (t == JsonToken.FIELD_NAME) {
        t = nextToken();
    }
    return t;
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.skipChildren()","Method","* Need to override, re-implement similar to how method defined in
     * {@link com.fasterxml.jackson.core.base.ParserMinimalBase}, to keep
     * state correct here.","@Override
public JsonParser skipChildren() throws IOException {
    if ((_currToken != JsonToken.START_OBJECT) && (_currToken != JsonToken.START_ARRAY)) {
        return this;
    }
    int open = 1;
    // Since proper matching of start/end markers is handled
    // by nextToken(), we'll just count nesting levels here
    while (true) {
        JsonToken t = nextToken();
        if (t == null) {
            // not ideal but for now, just return
            return this;
        }
        if (t.isStructStart()) {
            ++open;
        } else if (t.isStructEnd()) {
            if (--open == 0) {
                return this;
            }
        }
    }
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getText()","Method","No Comment","@Override
public String getText() throws IOException {
    if (_currToken == JsonToken.FIELD_NAME) {
        return currentName();
    }
    return delegate.getText();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasTextCharacters()","Method","No Comment","@Override
public boolean hasTextCharacters() {
    if (_currToken == JsonToken.FIELD_NAME) {
        return false;
    }
    return delegate.hasTextCharacters();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextCharacters()","Method","No Comment","@Override
public char[] getTextCharacters() throws IOException {
    // Not optimal but is correct, unlike delegating (as underlying stream
    // may point to something else due to buffering)
    if (_currToken == JsonToken.FIELD_NAME) {
        return currentName().toCharArray();
    }
    return delegate.getTextCharacters();
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextLength()","Method","No Comment","@Override
public int getTextLength() throws IOException {
    if (_currToken == JsonToken.FIELD_NAME) {
        return currentName().length();
    }
    return delegate.getTextLength();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextOffset()","Method","No Comment","@Override
public int getTextOffset() throws IOException {
    if (_currToken == JsonToken.FIELD_NAME) {
        return 0;
    }
    return delegate.getTextOffset();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBigIntegerValue()","Method","No Comment","@Override
public BigInteger getBigIntegerValue() throws IOException {
    return delegate.getBigIntegerValue();
}","BigInteger","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBooleanValue()","Method","No Comment","@Override
public boolean getBooleanValue() throws IOException {
    return delegate.getBooleanValue();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getByteValue()","Method","No Comment","@Override
public byte getByteValue() throws IOException {
    return delegate.getByteValue();
}","byte","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getShortValue()","Method","No Comment","@Override
public short getShortValue() throws IOException {
    return delegate.getShortValue();
}","short","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDecimalValue()","Method","No Comment","@Override
public BigDecimal getDecimalValue() throws IOException {
    return delegate.getDecimalValue();
}","BigDecimal","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDoubleValue()","Method","No Comment","@Override
public double getDoubleValue() throws IOException {
    return delegate.getDoubleValue();
}","double","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getFloatValue()","Method","No Comment","@Override
public float getFloatValue() throws IOException {
    return delegate.getFloatValue();
}","float","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getIntValue()","Method","No Comment","@Override
public int getIntValue() throws IOException {
    return delegate.getIntValue();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLongValue()","Method","No Comment","@Override
public long getLongValue() throws IOException {
    return delegate.getLongValue();
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getNumberType()","Method","No Comment","@Override
public NumberType getNumberType() throws IOException {
    return delegate.getNumberType();
}","NumberType","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getNumberValue()","Method","No Comment","@Override
public Number getNumberValue() throws IOException {
    return delegate.getNumberValue();
}","Number","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsInt()","Method","No Comment","@Override
public int getValueAsInt() throws IOException {
    return delegate.getValueAsInt();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsInt(int)","Method","No Comment","@Override
public int getValueAsInt(int defaultValue) throws IOException {
    return delegate.getValueAsInt(defaultValue);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsInt(int).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsInt(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsLong()","Method","No Comment","@Override
public long getValueAsLong() throws IOException {
    return delegate.getValueAsLong();
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsLong(long)","Method","No Comment","@Override
public long getValueAsLong(long defaultValue) throws IOException {
    return delegate.getValueAsLong(defaultValue);
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsLong(long).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsLong(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsDouble()","Method","No Comment","@Override
public double getValueAsDouble() throws IOException {
    return delegate.getValueAsDouble();
}","double","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsDouble(double)","Method","No Comment","@Override
public double getValueAsDouble(double defaultValue) throws IOException {
    return delegate.getValueAsDouble(defaultValue);
}","double","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsDouble(double).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsDouble(double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsBoolean()","Method","No Comment","@Override
public boolean getValueAsBoolean() throws IOException {
    return delegate.getValueAsBoolean();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsBoolean(boolean)","Method","No Comment","@Override
public boolean getValueAsBoolean(boolean defaultValue) throws IOException {
    return delegate.getValueAsBoolean(defaultValue);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsBoolean(boolean).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsBoolean(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsString()","Method","No Comment","@Override
public String getValueAsString() throws IOException {
    if (_currToken == JsonToken.FIELD_NAME) {
        return currentName();
    }
    return delegate.getValueAsString();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsString(String)","Method","No Comment","@Override
public String getValueAsString(String defaultValue) throws IOException {
    if (_currToken == JsonToken.FIELD_NAME) {
        return currentName();
    }
    return delegate.getValueAsString(defaultValue);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsString(String).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsString(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getEmbeddedObject()","Method","No Comment","@Override
public Object getEmbeddedObject() throws IOException {
    return delegate.getEmbeddedObject();
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBinaryValue(Base64Variant)","Method","No Comment","@Override
public byte[] getBinaryValue(Base64Variant b64variant) throws IOException {
    return delegate.getBinaryValue(b64variant);
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBinaryValue(Base64Variant).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBinaryValue(Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.readBinaryValue(Base64Variant,OutputStream)","Method","No Comment","@Override
public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException {
    return delegate.readBinaryValue(b64variant, out);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.readBinaryValue(Base64Variant,OutputStream).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate.readBinaryValue(Base64Variant,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.readBinaryValue(Base64Variant,OutputStream).out","Parameter_2","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate.readBinaryValue(Base64Variant,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate._filterContext()","Method","No Comment","protected JsonStreamContext _filterContext() {
    if (_exposedContext != null) {
        return _exposedContext;
    }
    return _headContext;
}","JsonStreamContext","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.<init>(JsonParser,TokenFilter,boolean,boolean)","Constructor","No Comment","@Deprecated
public FilteringParserDelegate(JsonParser p, TokenFilter f, boolean includePath, boolean allowMultipleMatches) {
    this(p, f, includePath ? Inclusion.INCLUDE_ALL_AND_PATH : Inclusion.ONLY_INCLUDE_ALL, allowMultipleMatches);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.<init>(JsonParser,TokenFilter,boolean,boolean).p","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate.<init>(JsonParser,TokenFilter,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.<init>(JsonParser,TokenFilter,boolean,boolean).f","Parameter_2","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate.<init>(JsonParser,TokenFilter,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.<init>(JsonParser,TokenFilter,boolean,boolean).includePath","Parameter_3","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate.<init>(JsonParser,TokenFilter,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.<init>(JsonParser,TokenFilter,boolean,boolean).allowMultipleMatches","Parameter_4","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate.<init>(JsonParser,TokenFilter,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.<init>(JsonParser,TokenFilter,TokenFilter.Inclusion,boolean)","Constructor","* @param p Parser to delegate calls to
     * @param f Filter to use
     * @param inclusion Definition of inclusion criteria
     * @param allowMultipleMatches Whether to allow multiple matches","public FilteringParserDelegate(JsonParser p, TokenFilter f, TokenFilter.Inclusion inclusion, boolean allowMultipleMatches) {
    super(p);
    rootFilter = f;
    // and this is the currently active filter for root values
    _itemFilter = f;
    _headContext = TokenFilterContext.createRootContext(f);
    _inclusion = inclusion;
    _allowMultipleMatches = allowMultipleMatches;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.<init>(JsonParser,TokenFilter,TokenFilter.Inclusion,boolean).p","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate.<init>(JsonParser,TokenFilter,TokenFilter.Inclusion,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.<init>(JsonParser,TokenFilter,TokenFilter.Inclusion,boolean).f","Parameter_2","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate.<init>(JsonParser,TokenFilter,TokenFilter.Inclusion,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.<init>(JsonParser,TokenFilter,TokenFilter.Inclusion,boolean).inclusion","Parameter_3","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate.<init>(JsonParser,TokenFilter,TokenFilter.Inclusion,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringParserDelegate.<init>(JsonParser,TokenFilter,TokenFilter.Inclusion,boolean).allowMultipleMatches","Parameter_4","Belong to com.fasterxml.jackson.core.filter.FilteringParserDelegate.<init>(JsonParser,TokenFilter,TokenFilter.Inclusion,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate","Class","* Specialized {@link JsonGeneratorDelegate} that allows use of
 * {@link TokenFilter} for outputting a subset of content that
 * caller tries to generate.
 *
 * @since 2.6","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.util.JsonGeneratorDelegate",""
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.rootFilter","Field","* Object consulted to determine whether to write parts of content generator
     * is asked to write or not.","protected TokenFilter rootFilter;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._allowMultipleMatches","Field","* Flag that determines whether filtering will continue after the first
     * match is indicated or not: if `false`, output is based on just the first
     * full match (returning {@link TokenFilter#INCLUDE_ALL}) and no more
     * checks are made; if `true` then filtering will be applied as necessary
     * until end of content.","protected boolean _allowMultipleMatches;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._inclusion","Field","* Flag that determines whether path leading up to included content should
     * also be automatically included or not. If `false`, no path inclusion is
     * done and only explicitly included entries are output; if `true` then
     * path from main level down to match is also included as necessary.","protected TokenFilter.Inclusion _inclusion;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._filterContext","Field","* Although delegate has its own output context it is not sufficient since we actually
     * have to keep track of excluded (filtered out) structures as well as ones delegate
     * actually outputs.","protected TokenFilterContext _filterContext;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._itemFilter","Field","* State that applies to the item within container, used where applicable.
     * Specifically used to pass inclusion state between property name and
     * property, and also used for array elements.","protected TokenFilter _itemFilter;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._matchCount","Field","* Number of tokens for which {@link TokenFilter#INCLUDE_ALL}
     * has been returned","protected int _matchCount;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getFilter()","Method","No Comment","public TokenFilter getFilter() {
    return rootFilter;
}","TokenFilter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getFilterContext()","Method","No Comment","public JsonStreamContext getFilterContext() {
    return _filterContext;
}","JsonStreamContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getMatchCount()","Method","* Accessor for finding number of matches, where specific token and sub-tree
     * starting (if structured type) are passed.
     *
     * @return Number of matches","public int getMatchCount() {
    return _matchCount;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.getOutputContext()","Method","No Comment","@Override
public JsonStreamContext getOutputContext() {
    /* 11-Apr-2015, tatu: Choice is between pre- and post-filter context;
         *   let's expose post-filter context that correlates with the view
         *   of caller.
         */
    return _filterContext;
}","JsonStreamContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray()","Method","No Comment","@Override
public void writeStartArray() throws IOException {
    // First things first: whole-sale skipping easy
    if (_itemFilter == null) {
        _filterContext = _filterContext.createChildArrayContext(null, false);
        return;
    }
    if (_itemFilter == TokenFilter.INCLUDE_ALL) {
        // include the whole sub-tree?
        _filterContext = _filterContext.createChildArrayContext(_itemFilter, true);
        delegate.writeStartArray();
        return;
    }
    // Ok; regular checking state then
    _itemFilter = _filterContext.checkValue(_itemFilter);
    if (_itemFilter == null) {
        _filterContext = _filterContext.createChildArrayContext(null, false);
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        _itemFilter = _itemFilter.filterStartArray();
    }
    if (_itemFilter == TokenFilter.INCLUDE_ALL) {
        _checkParentPath();
        _filterContext = _filterContext.createChildArrayContext(_itemFilter, true);
        delegate.writeStartArray();
    } else if (_itemFilter != null && _inclusion == Inclusion.INCLUDE_NON_NULL) {
        _checkParentPath(false);
        _filterContext = _filterContext.createChildArrayContext(_itemFilter, true);
        delegate.writeStartArray();
    } else {
        _filterContext = _filterContext.createChildArrayContext(_itemFilter, false);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(int)","Method","No Comment","@SuppressWarnings(""deprecation"")
@Override
public void writeStartArray(int size) throws IOException {
    if (_itemFilter == null) {
        _filterContext = _filterContext.createChildArrayContext(null, false);
        return;
    }
    if (_itemFilter == TokenFilter.INCLUDE_ALL) {
        _filterContext = _filterContext.createChildArrayContext(_itemFilter, true);
        delegate.writeStartArray(size);
        return;
    }
    _itemFilter = _filterContext.checkValue(_itemFilter);
    if (_itemFilter == null) {
        _filterContext = _filterContext.createChildArrayContext(null, false);
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        _itemFilter = _itemFilter.filterStartArray();
    }
    if (_itemFilter == TokenFilter.INCLUDE_ALL) {
        _checkParentPath();
        _filterContext = _filterContext.createChildArrayContext(_itemFilter, true);
        delegate.writeStartArray(size);
    } else if (_itemFilter != null && _inclusion == Inclusion.INCLUDE_NON_NULL) {
        _checkParentPath(false);
        _filterContext = _filterContext.createChildArrayContext(_itemFilter, true);
        delegate.writeStartArray(size);
    } else {
        _filterContext = _filterContext.createChildArrayContext(_itemFilter, false);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(int).size","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(Object)","Method","No Comment","@Override
public void writeStartArray(Object forValue) throws IOException {
    if (_itemFilter == null) {
        _filterContext = _filterContext.createChildArrayContext(null, false);
        return;
    }
    if (_itemFilter == TokenFilter.INCLUDE_ALL) {
        _filterContext = _filterContext.createChildArrayContext(_itemFilter, true);
        delegate.writeStartArray(forValue);
        return;
    }
    _itemFilter = _filterContext.checkValue(_itemFilter);
    if (_itemFilter == null) {
        _filterContext = _filterContext.createChildArrayContext(null, false);
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        _itemFilter = _itemFilter.filterStartArray();
    }
    if (_itemFilter == TokenFilter.INCLUDE_ALL) {
        _checkParentPath();
        _filterContext = _filterContext.createChildArrayContext(_itemFilter, true);
        delegate.writeStartArray(forValue);
    } else if (_itemFilter != null && _inclusion == Inclusion.INCLUDE_NON_NULL) {
        _checkParentPath(false);
        _filterContext = _filterContext.createChildArrayContext(_itemFilter, true);
        delegate.writeStartArray(forValue);
    } else {
        _filterContext = _filterContext.createChildArrayContext(_itemFilter, false);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(Object).forValue","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(Object,int)","Method","No Comment","@Override
public void writeStartArray(Object forValue, int size) throws IOException {
    if (_itemFilter == null) {
        _filterContext = _filterContext.createChildArrayContext(null, false);
        return;
    }
    if (_itemFilter == TokenFilter.INCLUDE_ALL) {
        _filterContext = _filterContext.createChildArrayContext(_itemFilter, true);
        delegate.writeStartArray(forValue, size);
        return;
    }
    _itemFilter = _filterContext.checkValue(_itemFilter);
    if (_itemFilter == null) {
        _filterContext = _filterContext.createChildArrayContext(null, false);
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        _itemFilter = _itemFilter.filterStartArray();
    }
    if (_itemFilter == TokenFilter.INCLUDE_ALL) {
        _checkParentPath();
        _filterContext = _filterContext.createChildArrayContext(_itemFilter, true);
        delegate.writeStartArray(forValue, size);
    } else if (_itemFilter != null && _inclusion == Inclusion.INCLUDE_NON_NULL) {
        _checkParentPath(false);
        _filterContext = _filterContext.createChildArrayContext(_itemFilter, true);
        delegate.writeStartArray(forValue, size);
    } else {
        _filterContext = _filterContext.createChildArrayContext(_itemFilter, false);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(Object,int).forValue","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(Object,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(Object,int).size","Parameter_2","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartArray(Object,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeEndArray()","Method","No Comment","@Override
public void writeEndArray() throws IOException {
    _filterContext = _filterContext.closeArray(delegate);
    if (_filterContext != null) {
        _itemFilter = _filterContext.getFilter();
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject()","Method","No Comment","@Override
public void writeStartObject() throws IOException {
    if (_itemFilter == null) {
        _filterContext = _filterContext.createChildObjectContext(_itemFilter, false);
        return;
    }
    if (_itemFilter == TokenFilter.INCLUDE_ALL) {
        _filterContext = _filterContext.createChildObjectContext(_itemFilter, true);
        delegate.writeStartObject();
        return;
    }
    TokenFilter f = _filterContext.checkValue(_itemFilter);
    if (f == null) {
        _filterContext = _filterContext.createChildObjectContext(null, false);
        return;
    }
    if (f != TokenFilter.INCLUDE_ALL) {
        f = f.filterStartObject();
    }
    if (f == TokenFilter.INCLUDE_ALL) {
        _checkParentPath();
        _filterContext = _filterContext.createChildObjectContext(f, true);
        delegate.writeStartObject();
    } else if (f != null && _inclusion == Inclusion.INCLUDE_NON_NULL) {
        _checkParentPath(false);
        _filterContext = _filterContext.createChildObjectContext(f, true);
        delegate.writeStartObject();
    } else {
        // filter out
        _filterContext = _filterContext.createChildObjectContext(f, false);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject(Object)","Method","No Comment","@Override
public void writeStartObject(Object forValue) throws IOException {
    if (_itemFilter == null) {
        _filterContext = _filterContext.createChildObjectContext(_itemFilter, false);
        return;
    }
    if (_itemFilter == TokenFilter.INCLUDE_ALL) {
        _filterContext = _filterContext.createChildObjectContext(_itemFilter, true);
        delegate.writeStartObject(forValue);
        return;
    }
    TokenFilter f = _filterContext.checkValue(_itemFilter);
    if (f == null) {
        _filterContext = _filterContext.createChildObjectContext(null, false);
        return;
    }
    if (f != TokenFilter.INCLUDE_ALL) {
        f = f.filterStartObject();
    }
    if (f == TokenFilter.INCLUDE_ALL) {
        _checkParentPath();
        _filterContext = _filterContext.createChildObjectContext(f, true);
        delegate.writeStartObject(forValue);
    } else if (f != null && _inclusion == Inclusion.INCLUDE_NON_NULL) {
        _checkParentPath(false);
        _filterContext = _filterContext.createChildObjectContext(f, true);
        delegate.writeStartObject(forValue);
    } else {
        // filter out
        _filterContext = _filterContext.createChildObjectContext(f, false);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject(Object).forValue","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject(Object,int)","Method","No Comment","@Override
public void writeStartObject(Object forValue, int size) throws IOException {
    if (_itemFilter == null) {
        _filterContext = _filterContext.createChildObjectContext(_itemFilter, false);
        return;
    }
    if (_itemFilter == TokenFilter.INCLUDE_ALL) {
        _filterContext = _filterContext.createChildObjectContext(_itemFilter, true);
        delegate.writeStartObject(forValue, size);
        return;
    }
    TokenFilter f = _filterContext.checkValue(_itemFilter);
    if (f == null) {
        _filterContext = _filterContext.createChildObjectContext(null, false);
        return;
    }
    if (f != TokenFilter.INCLUDE_ALL) {
        f = f.filterStartObject();
    }
    if (f == TokenFilter.INCLUDE_ALL) {
        _checkParentPath();
        _filterContext = _filterContext.createChildObjectContext(f, true);
        delegate.writeStartObject(forValue, size);
    } else {
        _filterContext = _filterContext.createChildObjectContext(f, false);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject(Object,int).forValue","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject(Object,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject(Object,int).size","Parameter_2","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeStartObject(Object,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeEndObject()","Method","No Comment","@Override
public void writeEndObject() throws IOException {
    _filterContext = _filterContext.closeObject(delegate);
    if (_filterContext != null) {
        _itemFilter = _filterContext.getFilter();
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName(String)","Method","No Comment","@Override
public void writeFieldName(String name) throws IOException {
    TokenFilter state = _filterContext.setFieldName(name);
    if (state == null) {
        _itemFilter = null;
        return;
    }
    if (state == TokenFilter.INCLUDE_ALL) {
        _itemFilter = state;
        delegate.writeFieldName(name);
        return;
    }
    state = state.includeProperty(name);
    _itemFilter = state;
    if (state == TokenFilter.INCLUDE_ALL) {
        _checkPropertyParentPath();
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName(SerializableString)","Method","No Comment","@Override
public void writeFieldName(SerializableString name) throws IOException {
    TokenFilter state = _filterContext.setFieldName(name.getValue());
    if (state == null) {
        _itemFilter = null;
        return;
    }
    if (state == TokenFilter.INCLUDE_ALL) {
        _itemFilter = state;
        delegate.writeFieldName(name);
        return;
    }
    state = state.includeProperty(name.getValue());
    _itemFilter = state;
    if (state == TokenFilter.INCLUDE_ALL) {
        _checkPropertyParentPath();
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName(SerializableString).name","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldName(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldId(long)","Method","02-Dec-2019, tatu: Not sure what else to do... so use default impl from base class","@Override
public void writeFieldId(long id) throws IOException {
    writeFieldName(Long.toString(id));
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldId(long).id","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeFieldId(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(String)","Method","No Comment","@Override
public void writeString(String value) throws IOException {
    if (_itemFilter == null) {
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        TokenFilter state = _filterContext.checkValue(_itemFilter);
        if (state == null) {
            return;
        }
        if (state != TokenFilter.INCLUDE_ALL) {
            if (!state.includeString(value)) {
                return;
            }
        }
        _checkParentPath();
    }
    delegate.writeString(value);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(String).value","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(char[],int,int)","Method","No Comment","@Override
public void writeString(char[] text, int offset, int len) throws IOException {
    if (_itemFilter == null) {
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        String value = new String(text, offset, len);
        TokenFilter state = _filterContext.checkValue(_itemFilter);
        if (state == null) {
            return;
        }
        if (state != TokenFilter.INCLUDE_ALL) {
            if (!state.includeString(value)) {
                return;
            }
        }
        _checkParentPath();
    }
    delegate.writeString(text, offset, len);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(char[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(SerializableString)","Method","No Comment","@Override
public void writeString(SerializableString value) throws IOException {
    if (_itemFilter == null) {
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        TokenFilter state = _filterContext.checkValue(_itemFilter);
        if (state == null) {
            return;
        }
        if (state != TokenFilter.INCLUDE_ALL) {
            if (!state.includeString(value.getValue())) {
                return;
            }
        }
        _checkParentPath();
    }
    delegate.writeString(value);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(SerializableString).value","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(Reader,int)","Method","No Comment","@Override
public void writeString(Reader reader, int len) throws IOException {
    if (_itemFilter == null) {
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        TokenFilter state = _filterContext.checkValue(_itemFilter);
        if (state == null) {
            return;
        }
        if (state != TokenFilter.INCLUDE_ALL) {
            // [core#609]: do need to implement, but with 2.10.x TokenFilter no
            // useful method to call so will be mostly unfiltered
            if (!state.includeString(reader, len)) {
                return;
            }
        }
        _checkParentPath();
    }
    delegate.writeString(reader, len);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(Reader,int).reader","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(Reader,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(Reader,int).len","Parameter_2","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeString(Reader,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawUTF8String(byte[],int,int)","Method","No Comment","@Override
public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException {
    if (_checkRawValueWrite()) {
        delegate.writeRawUTF8String(text, offset, length);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawUTF8String(byte[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawUTF8String(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawUTF8String(byte[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeUTF8String(byte[],int,int)","Method","No Comment","@Override
public void writeUTF8String(byte[] text, int offset, int length) throws IOException {
    // not exact match, but best we can do
    if (_checkRawValueWrite()) {
        delegate.writeUTF8String(text, offset, length);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeUTF8String(byte[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeUTF8String(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeUTF8String(byte[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(String)","Method","No Comment","@Override
public void writeRaw(String text) throws IOException {
    if (_checkRawValueWrite()) {
        delegate.writeRaw(text);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(String).text","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(String,int,int)","Method","No Comment","@Override
public void writeRaw(String text, int offset, int len) throws IOException {
    if (_checkRawValueWrite()) {
        delegate.writeRaw(text, offset, len);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(String,int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(String,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(String,int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(SerializableString)","Method","No Comment","@Override
public void writeRaw(SerializableString text) throws IOException {
    if (_checkRawValueWrite()) {
        delegate.writeRaw(text);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(SerializableString).text","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(char[],int,int)","Method","No Comment","@Override
public void writeRaw(char[] text, int offset, int len) throws IOException {
    if (_checkRawValueWrite()) {
        delegate.writeRaw(text, offset, len);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(char[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(char)","Method","No Comment","@Override
public void writeRaw(char c) throws IOException {
    if (_checkRawValueWrite()) {
        delegate.writeRaw(c);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(char).c","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRaw(char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(String)","Method","No Comment","@Override
public void writeRawValue(String text) throws IOException {
    if (_checkRawValueWrite()) {
        delegate.writeRawValue(text);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(String).text","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(String,int,int)","Method","No Comment","@Override
public void writeRawValue(String text, int offset, int len) throws IOException {
    if (_checkRawValueWrite()) {
        delegate.writeRawValue(text, offset, len);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(String,int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(String,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(String,int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(char[],int,int)","Method","No Comment","@Override
public void writeRawValue(char[] text, int offset, int len) throws IOException {
    if (_checkRawValueWrite()) {
        delegate.writeRawValue(text, offset, len);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(char[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeRawValue(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(Base64Variant,byte[],int,int)","Method","No Comment","@Override
public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException {
    if (_checkBinaryWrite()) {
        delegate.writeBinary(b64variant, data, offset, len);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(Base64Variant,byte[],int,int).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(Base64Variant,byte[],int,int).data","Parameter_2","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(Base64Variant,byte[],int,int).offset","Parameter_3","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(Base64Variant,byte[],int,int).len","Parameter_4","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(Base64Variant,InputStream,int)","Method","No Comment","@Override
public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException {
    if (_checkBinaryWrite()) {
        return delegate.writeBinary(b64variant, data, dataLength);
    }
    return -1;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(Base64Variant,InputStream,int).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(Base64Variant,InputStream,int).data","Parameter_2","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(Base64Variant,InputStream,int).dataLength","Parameter_3","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(short)","Method","No Comment","@Override
public void writeNumber(short v) throws IOException {
    if (_itemFilter == null) {
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        TokenFilter state = _filterContext.checkValue(_itemFilter);
        if (state == null) {
            return;
        }
        if (state != TokenFilter.INCLUDE_ALL) {
            if (!state.includeNumber(v)) {
                return;
            }
        }
        _checkParentPath();
    }
    delegate.writeNumber(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(short).v","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(short)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(int)","Method","No Comment","@Override
public void writeNumber(int v) throws IOException {
    if (_itemFilter == null) {
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        TokenFilter state = _filterContext.checkValue(_itemFilter);
        if (state == null) {
            return;
        }
        if (state != TokenFilter.INCLUDE_ALL) {
            if (!state.includeNumber(v)) {
                return;
            }
        }
        _checkParentPath();
    }
    delegate.writeNumber(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(int).v","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(long)","Method","No Comment","@Override
public void writeNumber(long v) throws IOException {
    if (_itemFilter == null) {
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        TokenFilter state = _filterContext.checkValue(_itemFilter);
        if (state == null) {
            return;
        }
        if (state != TokenFilter.INCLUDE_ALL) {
            if (!state.includeNumber(v)) {
                return;
            }
        }
        _checkParentPath();
    }
    delegate.writeNumber(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(long).v","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(BigInteger)","Method","No Comment","@Override
public void writeNumber(BigInteger v) throws IOException {
    if (_itemFilter == null) {
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        TokenFilter state = _filterContext.checkValue(_itemFilter);
        if (state == null) {
            return;
        }
        if (state != TokenFilter.INCLUDE_ALL) {
            if (!state.includeNumber(v)) {
                return;
            }
        }
        _checkParentPath();
    }
    delegate.writeNumber(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(BigInteger).v","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(BigInteger)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(double)","Method","No Comment","@Override
public void writeNumber(double v) throws IOException {
    if (_itemFilter == null) {
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        TokenFilter state = _filterContext.checkValue(_itemFilter);
        if (state == null) {
            return;
        }
        if (state != TokenFilter.INCLUDE_ALL) {
            if (!state.includeNumber(v)) {
                return;
            }
        }
        _checkParentPath();
    }
    delegate.writeNumber(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(double).v","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(float)","Method","No Comment","@Override
public void writeNumber(float v) throws IOException {
    if (_itemFilter == null) {
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        TokenFilter state = _filterContext.checkValue(_itemFilter);
        if (state == null) {
            return;
        }
        if (state != TokenFilter.INCLUDE_ALL) {
            if (!state.includeNumber(v)) {
                return;
            }
        }
        _checkParentPath();
    }
    delegate.writeNumber(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(float).v","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(BigDecimal)","Method","No Comment","@Override
public void writeNumber(BigDecimal v) throws IOException {
    if (_itemFilter == null) {
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        TokenFilter state = _filterContext.checkValue(_itemFilter);
        if (state == null) {
            return;
        }
        if (state != TokenFilter.INCLUDE_ALL) {
            if (!state.includeNumber(v)) {
                return;
            }
        }
        _checkParentPath();
    }
    delegate.writeNumber(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(BigDecimal).v","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(BigDecimal)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(String)","Method","No Comment","@Override
public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException {
    if (_itemFilter == null) {
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        TokenFilter state = _filterContext.checkValue(_itemFilter);
        if (state == null) {
            return;
        }
        if (state != TokenFilter.INCLUDE_ALL) {
            if (!state.includeRawValue()) {
                // close enough?
                return;
            }
        }
        _checkParentPath();
    }
    delegate.writeNumber(encodedValue);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(String).encodedValue","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(char[],int,int)","Method","No Comment","@Override
public void writeNumber(char[] encodedValueBuffer, int offset, int length) throws IOException, UnsupportedOperationException {
    if (_itemFilter == null) {
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        TokenFilter state = _filterContext.checkValue(_itemFilter);
        if (state == null) {
            return;
        }
        if (state != TokenFilter.INCLUDE_ALL) {
            if (!state.includeRawValue()) {
                // close enough?
                return;
            }
        }
        _checkParentPath();
    }
    delegate.writeNumber(encodedValueBuffer, offset, length);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(char[],int,int).encodedValueBuffer","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(char[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNumber(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBoolean(boolean)","Method","No Comment","@Override
public void writeBoolean(boolean v) throws IOException {
    if (_itemFilter == null) {
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        TokenFilter state = _filterContext.checkValue(_itemFilter);
        if (state == null) {
            return;
        }
        if (state != TokenFilter.INCLUDE_ALL) {
            if (!state.includeBoolean(v)) {
                return;
            }
        }
        _checkParentPath();
    }
    delegate.writeBoolean(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBoolean(boolean).v","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeBoolean(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeNull()","Method","No Comment","@Override
public void writeNull() throws IOException {
    if (_itemFilter == null) {
        return;
    }
    if (_itemFilter != TokenFilter.INCLUDE_ALL) {
        TokenFilter state = _filterContext.checkValue(_itemFilter);
        if (state == null) {
            return;
        }
        if (state != TokenFilter.INCLUDE_ALL) {
            if (!state.includeNull()) {
                return;
            }
        }
        _checkParentPath();
    }
    delegate.writeNull();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeOmittedField(String)","Method","No Comment","@Override
public void writeOmittedField(String fieldName) throws IOException {
    // Hmmh. Not sure how this would work but...
    if (_itemFilter != null) {
        delegate.writeOmittedField(fieldName);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeOmittedField(String).fieldName","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeOmittedField(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectId(Object)","Method","No Comment","@Override
public void writeObjectId(Object id) throws IOException {
    if (_itemFilter != null) {
        delegate.writeObjectId(id);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectId(Object).id","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectId(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectRef(Object)","Method","No Comment","@Override
public void writeObjectRef(Object id) throws IOException {
    if (_itemFilter != null) {
        delegate.writeObjectRef(id);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectRef(Object).id","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeObjectRef(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeTypeId(Object)","Method","No Comment","@Override
public void writeTypeId(Object id) throws IOException {
    if (_itemFilter != null) {
        delegate.writeTypeId(id);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeTypeId(Object).id","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.writeTypeId(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkParentPath()","Method","No Comment","protected void _checkParentPath() throws IOException {
    _checkParentPath(true);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkParentPath(boolean)","Method","No Comment","protected void _checkParentPath(boolean isMatch) throws IOException {
    if (isMatch) {
        ++_matchCount;
    }
    // only need to construct path if parent wasn't written
    if (_inclusion == Inclusion.INCLUDE_ALL_AND_PATH) {
        _filterContext.writePath(delegate);
    } else if (_inclusion == Inclusion.INCLUDE_NON_NULL) {
        // path has already been written, except for maybe field name
        _filterContext.ensureFieldNameWritten(delegate);
    }
    // also: if no multiple matches desired, short-cut checks
    if (isMatch && !_allowMultipleMatches) {
        // Mark parents as ""skip"" so that further check calls are not made
        _filterContext.skipParentChecks();
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkParentPath(boolean).isMatch","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkParentPath(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkPropertyParentPath()","Method","* Specialized variant of {@link #_checkParentPath} used when checking
     * parent for a property name to be included with value: rules are slightly
     * different.
     *
     * @throws IOException If there is an issue with possible resulting read","protected void _checkPropertyParentPath() throws IOException {
    ++_matchCount;
    if (_inclusion == Inclusion.INCLUDE_ALL_AND_PATH) {
        _filterContext.writePath(delegate);
    } else if (_inclusion == Inclusion.INCLUDE_NON_NULL) {
        // path has already been written, except for maybe field name
        _filterContext.ensureFieldNameWritten(delegate);
    }
    // also: if no multiple matches desired, short-cut checks
    if (!_allowMultipleMatches) {
        // Mark parents as ""skip"" so that further check calls are not made
        _filterContext.skipParentChecks();
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkBinaryWrite()","Method","No Comment","protected boolean _checkBinaryWrite() throws IOException {
    if (_itemFilter == null) {
        return false;
    }
    if (_itemFilter == TokenFilter.INCLUDE_ALL) {
        return true;
    }
    if (_itemFilter.includeBinary()) {
        // close enough?
        _checkParentPath();
        return true;
    }
    return false;
}","boolean","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._checkRawValueWrite()","Method","No Comment","protected boolean _checkRawValueWrite() throws IOException {
    if (_itemFilter == null) {
        return false;
    }
    if (_itemFilter == TokenFilter.INCLUDE_ALL) {
        return true;
    }
    if (_itemFilter.includeRawValue()) {
        // close enough?
        _checkParentPath();
        return true;
    }
    return false;
}","boolean","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.<init>(JsonGenerator,TokenFilter,boolean,boolean)","Constructor","* @param d Generator to delegate calls to
     * @param f Filter to use
     * @param includePath Whether to include path or not
     * @param allowMultipleMatches Whether to allow multiple matches
     *
     * @deprecated since 2.12 Use the constructor that takes {@link TokenFilter.Inclusion}
     *    argument instead.","@Deprecated
public FilteringGeneratorDelegate(JsonGenerator d, TokenFilter f, boolean includePath, boolean allowMultipleMatches) {
    this(d, f, includePath ? Inclusion.INCLUDE_ALL_AND_PATH : Inclusion.ONLY_INCLUDE_ALL, allowMultipleMatches);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.<init>(JsonGenerator,TokenFilter,boolean,boolean).d","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.<init>(JsonGenerator,TokenFilter,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.<init>(JsonGenerator,TokenFilter,boolean,boolean).f","Parameter_2","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.<init>(JsonGenerator,TokenFilter,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.<init>(JsonGenerator,TokenFilter,boolean,boolean).includePath","Parameter_3","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.<init>(JsonGenerator,TokenFilter,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.<init>(JsonGenerator,TokenFilter,boolean,boolean).allowMultipleMatches","Parameter_4","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.<init>(JsonGenerator,TokenFilter,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.<init>(JsonGenerator,TokenFilter,TokenFilter.Inclusion,boolean)","Constructor","* @param d Generator to delegate calls to
     * @param f Filter to use
     * @param inclusion Definition of inclusion criteria
     * @param allowMultipleMatches Whether to allow multiple matches
     *
     * @since 2.12","public FilteringGeneratorDelegate(JsonGenerator d, TokenFilter f, TokenFilter.Inclusion inclusion, boolean allowMultipleMatches) {
    // By default, do NOT delegate copy methods
    super(d, false);
    rootFilter = f;
    // and this is the currently active filter for root values
    _itemFilter = f;
    _filterContext = TokenFilterContext.createRootContext(f);
    _inclusion = inclusion;
    _allowMultipleMatches = allowMultipleMatches;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.<init>(JsonGenerator,TokenFilter,TokenFilter.Inclusion,boolean).d","Parameter_1","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.<init>(JsonGenerator,TokenFilter,TokenFilter.Inclusion,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.<init>(JsonGenerator,TokenFilter,TokenFilter.Inclusion,boolean).f","Parameter_2","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.<init>(JsonGenerator,TokenFilter,TokenFilter.Inclusion,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.<init>(JsonGenerator,TokenFilter,TokenFilter.Inclusion,boolean).inclusion","Parameter_3","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.<init>(JsonGenerator,TokenFilter,TokenFilter.Inclusion,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.<init>(JsonGenerator,TokenFilter,TokenFilter.Inclusion,boolean).allowMultipleMatches","Parameter_4","Belong to com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.<init>(JsonGenerator,TokenFilter,TokenFilter.Inclusion,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext","Class","* Alternative variant of {@link JsonStreamContext}, used when filtering
 * content being read or written (based on {@link TokenFilter}).
 *
 * @since 2.6","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.JsonStreamContext",""
"com.fasterxml.jackson.core.filter.TokenFilterContext._parent","Field","* Parent context for this context; null for root context.","protected final TokenFilterContext _parent;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext._child","Field","No Comment","protected TokenFilterContext _child;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext._currentName","Field","* Name of the field of which value is to be parsed; only
     * used for OBJECT contexts","protected String _currentName;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext._filter","Field","* Filter to use for items in this state (for properties of Objects,
     * elements of Arrays, and root-level values of root context)","protected TokenFilter _filter;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext._startHandled","Field","* Flag that indicates that start token has been read/written,
     * so that matching close token needs to be read/written as well
     * when context is getting closed.","protected boolean _startHandled;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext._needToHandleName","Field","* Flag that indicates that the current name of this context
     * still needs to be read/written, if path from root down to
     * included leaf is to be exposed.","protected boolean _needToHandleName;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.reset(int,TokenFilter,boolean)","Method","No Comment","protected TokenFilterContext reset(int type, TokenFilter filter, boolean startWritten) {
    _type = type;
    _filter = filter;
    _index = -1;
    _currentName = null;
    _startHandled = startWritten;
    _needToHandleName = false;
    return this;
}","TokenFilterContext","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.reset(int,TokenFilter,boolean).type","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.reset(int,TokenFilter,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.reset(int,TokenFilter,boolean).filter","Parameter_2","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.reset(int,TokenFilter,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.reset(int,TokenFilter,boolean).startWritten","Parameter_3","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.reset(int,TokenFilter,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.createRootContext(TokenFilter)","Method","No Comment","public static TokenFilterContext createRootContext(TokenFilter filter) {
    // true -> since we have no start/end marker, consider start handled
    return new TokenFilterContext(TYPE_ROOT, null, filter, true);
}","TokenFilterContext","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.createRootContext(TokenFilter).filter","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.createRootContext(TokenFilter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.createChildArrayContext(TokenFilter,boolean)","Method","No Comment","public TokenFilterContext createChildArrayContext(TokenFilter filter, boolean writeStart) {
    TokenFilterContext ctxt = _child;
    if (ctxt == null) {
        _child = ctxt = new TokenFilterContext(TYPE_ARRAY, this, filter, writeStart);
        return ctxt;
    }
    return ctxt.reset(TYPE_ARRAY, filter, writeStart);
}","TokenFilterContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.createChildArrayContext(TokenFilter,boolean).filter","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.createChildArrayContext(TokenFilter,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.createChildArrayContext(TokenFilter,boolean).writeStart","Parameter_2","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.createChildArrayContext(TokenFilter,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.createChildObjectContext(TokenFilter,boolean)","Method","No Comment","public TokenFilterContext createChildObjectContext(TokenFilter filter, boolean writeStart) {
    TokenFilterContext ctxt = _child;
    if (ctxt == null) {
        _child = ctxt = new TokenFilterContext(TYPE_OBJECT, this, filter, writeStart);
        return ctxt;
    }
    return ctxt.reset(TYPE_OBJECT, filter, writeStart);
}","TokenFilterContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.createChildObjectContext(TokenFilter,boolean).filter","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.createChildObjectContext(TokenFilter,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.createChildObjectContext(TokenFilter,boolean).writeStart","Parameter_2","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.createChildObjectContext(TokenFilter,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.setFieldName(String)","Method","No Comment","public TokenFilter setFieldName(String name) throws JsonProcessingException {
    _currentName = name;
    _needToHandleName = true;
    return _filter;
}","TokenFilter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.setFieldName(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.setFieldName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.checkValue(TokenFilter)","Method","* Method called to check whether value is to be included at current output
     * position, either as Object property, Array element, or root value.
     *
     * @param filter Currently active filter
     *
     * @return Filter to use for value","public TokenFilter checkValue(TokenFilter filter) {
    // First, checks for Object properties have been made earlier:
    if (_type == TYPE_OBJECT) {
        return filter;
    }
    // We increase it first because at the beginning of array, value is -1
    int ix = ++_index;
    if (_type == TYPE_ARRAY) {
        return filter.includeElement(ix);
    }
    return filter.includeRootValue(ix);
}","TokenFilter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.checkValue(TokenFilter).filter","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.checkValue(TokenFilter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.ensureFieldNameWritten(JsonGenerator)","Method","* Method called to ensure that field name, if present, has been written;
     * may result (but does not always) in a call using given generator
     *
     * @param gen Generator to use to write the property name, if necessary
     *
     * @throws IOException If there is a problem writing property name (typically
     *   thrown by {@code JsonGenerator})","public void ensureFieldNameWritten(JsonGenerator gen) throws IOException {
    if (_needToHandleName) {
        _needToHandleName = false;
        gen.writeFieldName(_currentName);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.ensureFieldNameWritten(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.ensureFieldNameWritten(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.writePath(JsonGenerator)","Method","* Method called to ensure that parent path from root is written up to
     * and including this node.
     *
     * @param gen Generator to use to write the path, if necessary
     *
     * @throws IOException If there is a problem writing property name (typically
     *   thrown by {@code JsonGenerator})","public void writePath(JsonGenerator gen) throws IOException {
    if ((_filter == null) || (_filter == TokenFilter.INCLUDE_ALL)) {
        return;
    }
    if (_parent != null) {
        _parent._writePath(gen);
    }
    if (_startHandled) {
        // even if Object started, need to start leaf-level name
        if (_needToHandleName) {
            gen.writeFieldName(_currentName);
        }
    } else {
        _startHandled = true;
        if (_type == TYPE_OBJECT) {
            gen.writeStartObject();
            // we know name must be written
            gen.writeFieldName(_currentName);
        } else if (_type == TYPE_ARRAY) {
            gen.writeStartArray();
        }
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.writePath(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.writePath(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext._writePath(JsonGenerator)","Method","No Comment","private void _writePath(JsonGenerator gen) throws IOException {
    if ((_filter == null) || (_filter == TokenFilter.INCLUDE_ALL)) {
        return;
    }
    if (_parent != null) {
        _parent._writePath(gen);
    }
    if (_startHandled) {
        // even if Object started, need to start leaf-level name
        if (_needToHandleName) {
            // at parent must explicitly clear
            _needToHandleName = false;
            gen.writeFieldName(_currentName);
        }
    } else {
        _startHandled = true;
        if (_type == TYPE_OBJECT) {
            gen.writeStartObject();
            if (_needToHandleName) {
                // at parent must explicitly clear
                _needToHandleName = false;
                gen.writeFieldName(_currentName);
            }
        } else if (_type == TYPE_ARRAY) {
            gen.writeStartArray();
        }
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext._writePath(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext._writePath(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.closeArray(JsonGenerator)","Method","No Comment","public TokenFilterContext closeArray(JsonGenerator gen) throws IOException {
    if (_startHandled) {
        gen.writeEndArray();
    } else {
        if ((_filter != null) && (_filter != TokenFilter.INCLUDE_ALL)) {
            if (_filter.includeEmptyArray(hasCurrentIndex())) {
                if (_parent != null) {
                    _parent._writePath(gen);
                }
                gen.writeStartArray();
                gen.writeEndArray();
            }
        }
    }
    if ((_filter != null) && (_filter != TokenFilter.INCLUDE_ALL)) {
        _filter.filterFinishArray();
    }
    return _parent;
}","TokenFilterContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.closeArray(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.closeArray(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.closeObject(JsonGenerator)","Method","No Comment","public TokenFilterContext closeObject(JsonGenerator gen) throws IOException {
    if (_startHandled) {
        gen.writeEndObject();
    } else {
        if ((_filter != null) && (_filter != TokenFilter.INCLUDE_ALL)) {
            if (_filter.includeEmptyObject(hasCurrentName())) {
                if (_parent != null) {
                    _parent._writePath(gen);
                }
                gen.writeStartObject();
                gen.writeEndObject();
            }
        }
    }
    if ((_filter != null) && (_filter != TokenFilter.INCLUDE_ALL)) {
        _filter.filterFinishObject();
    }
    return _parent;
}","TokenFilterContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.closeObject(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.closeObject(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.skipParentChecks()","Method","No Comment","public void skipParentChecks() {
    _filter = null;
    for (TokenFilterContext ctxt = _parent; ctxt != null; ctxt = ctxt._parent) {
        ctxt._filter = null;
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.getCurrentValue()","Method","No Comment","@Override
public Object getCurrentValue() {
    return null;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.setCurrentValue(Object)","Method","No Comment","@Override
public void setCurrentValue(Object v) {
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.setCurrentValue(Object).v","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.setCurrentValue(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.getParent()","Method","No Comment","@Override
public final TokenFilterContext getParent() {
    return _parent;
}","TokenFilterContext","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.getCurrentName()","Method","No Comment","@Override
public final String getCurrentName() {
    return _currentName;
}","String","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.hasCurrentName()","Method","@since 2.9","@Override
public boolean hasCurrentName() {
    return _currentName != null;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.getFilter()","Method","No Comment","public TokenFilter getFilter() {
    return _filter;
}","TokenFilter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.isStartHandled()","Method","No Comment","public boolean isStartHandled() {
    return _startHandled;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.nextTokenToRead()","Method","No Comment","public JsonToken nextTokenToRead() {
    if (!_startHandled) {
        _startHandled = true;
        if (_type == TYPE_OBJECT) {
            return JsonToken.START_OBJECT;
        }
        // Note: root should never be unhandled
        return JsonToken.START_ARRAY;
    }
    // But otherwise at most might have FIELD_NAME
    if (_needToHandleName && (_type == TYPE_OBJECT)) {
        _needToHandleName = false;
        return JsonToken.FIELD_NAME;
    }
    return null;
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.findChildOf(TokenFilterContext)","Method","No Comment","public TokenFilterContext findChildOf(TokenFilterContext parent) {
    if (_parent == parent) {
        return this;
    }
    TokenFilterContext curr = _parent;
    while (curr != null) {
        TokenFilterContext p = curr._parent;
        if (p == parent) {
            return curr;
        }
        curr = p;
    }
    // should never occur but...
    return null;
}","TokenFilterContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.findChildOf(TokenFilterContext).parent","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.findChildOf(TokenFilterContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.appendDesc(StringBuilder)","Method","No Comment","protected void appendDesc(StringBuilder sb) {
    if (_parent != null) {
        _parent.appendDesc(sb);
    }
    if (_type == TYPE_OBJECT) {
        sb.append('{');
        if (_currentName != null) {
            sb.append('""');
            // !!! TODO: Name chars should be escaped?
            sb.append(_currentName);
            sb.append('""');
        } else {
            sb.append('?');
        }
        sb.append('}');
    } else if (_type == TYPE_ARRAY) {
        sb.append('[');
        sb.append(getCurrentIndex());
        sb.append(']');
    } else {
        // nah, ROOT:
        sb.append(""/"");
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.appendDesc(StringBuilder).sb","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.appendDesc(StringBuilder)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.toString()","Method","of the context.","@Override
public String toString() {
    StringBuilder sb = new StringBuilder(64);
    appendDesc(sb);
    return sb.toString();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.<init>(int,TokenFilterContext,TokenFilter,boolean)","Constructor","No Comment","protected TokenFilterContext(int type, TokenFilterContext parent, TokenFilter filter, boolean startHandled) {
    super();
    _type = type;
    _parent = parent;
    _nestingDepth = parent == null ? 0 : parent._nestingDepth + 1;
    _filter = filter;
    _index = -1;
    _startHandled = startHandled;
    _needToHandleName = false;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.<init>(int,TokenFilterContext,TokenFilter,boolean).type","Parameter_1","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.<init>(int,TokenFilterContext,TokenFilter,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.<init>(int,TokenFilterContext,TokenFilter,boolean).parent","Parameter_2","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.<init>(int,TokenFilterContext,TokenFilter,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.<init>(int,TokenFilterContext,TokenFilter,boolean).filter","Parameter_3","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.<init>(int,TokenFilterContext,TokenFilter,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.filter.TokenFilterContext.<init>(int,TokenFilterContext,TokenFilter,boolean).startHandled","Parameter_4","Belong to com.fasterxml.jackson.core.filter.TokenFilterContext.<init>(int,TokenFilterContext,TokenFilter,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException","Class","* Exception type for parsing problems, used when non-well-formed content
 * (content that does not conform to JSON syntax as per specification)
 * is encountered.","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.exc.StreamReadException",""
"com.fasterxml.jackson.core.JsonParseException.serialVersionUID","Field","2.7","private static final long serialVersionUID = 2L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.withParser(JsonParser)","Method","* Fluent method that may be used to assign originating {@link JsonParser},
     * to be accessed using {@link #getProcessor()}.
     *<p>
     * NOTE: `this` instance is modified and no new instance is constructed.
     *
     * @param p Parser instance to assign to this exception
     *
     * @return This exception instance to allow call chaining
     *
     * @since 2.7","@Override
public JsonParseException withParser(JsonParser p) {
    _processor = p;
    return this;
}","JsonParseException","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.withParser(JsonParser).p","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParseException.withParser(JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.withRequestPayload(RequestPayload)","Method","* Fluent method that may be used to assign payload to this exception,
     * to let recipient access it for diagnostics purposes.
     *<p>
     * NOTE: `this` instance is modified and no new instance is constructed.
     *
     * @param payload Payload to assign to this exception
     *
     * @return This exception instance to allow call chaining
     *
     * @since 2.8","@Override
public JsonParseException withRequestPayload(RequestPayload payload) {
    _requestPayload = payload;
    return this;
}","JsonParseException","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.withRequestPayload(RequestPayload).payload","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParseException.withRequestPayload(RequestPayload)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.getProcessor()","Method","NOTE: overloaded in 2.10 just to retain binary compatibility with 2.9 (remove from 3.0)","@Override
public JsonParser getProcessor() {
    return super.getProcessor();
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.getRequestPayload()","Method","NOTE: overloaded in 2.10 just to retain binary compatibility with 2.9 (remove from 3.0)","@Override
public RequestPayload getRequestPayload() {
    return super.getRequestPayload();
}","RequestPayload","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.getRequestPayloadAsString()","Method","NOTE: overloaded in 2.10 just to retain binary compatibility with 2.9 (remove from 3.0)","@Override
public String getRequestPayloadAsString() {
    return super.getRequestPayloadAsString();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.getMessage()","Method","NOTE: overloaded in 2.10 just to retain binary compatibility with 2.9 (remove from 3.0)","@Override
public String getMessage() {
    return super.getMessage();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(String)","Constructor","@since 2.15","public JsonParseException(String msg) {
    this(null, msg, null, null);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(String).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParseException.<init>(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String)","Constructor","* Constructor that uses current parsing location as location, and
     * sets processor (accessible via {@link #getProcessor()}) to
     * specified parser.
     *
     * @param p Parser in use when encountering issue reported
     * @param msg Base exception message to use
     *
     * @since 2.7","public JsonParseException(JsonParser p, String msg) {
    this(p, msg, _currentLocation(p), null);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String).p","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String).msg","Parameter_2","Belong to com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,Throwable)","Constructor","@since 2.7","public JsonParseException(JsonParser p, String msg, Throwable rootCause) {
    this(p, msg, _currentLocation(p), rootCause);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,Throwable).p","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,Throwable).msg","Parameter_2","Belong to com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,Throwable).rootCause","Parameter_3","Belong to com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,JsonLocation)","Constructor","@since 2.7","public JsonParseException(JsonParser p, String msg, JsonLocation loc) {
    this(p, msg, loc, null);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,JsonLocation).p","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,JsonLocation)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,JsonLocation).msg","Parameter_2","Belong to com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,JsonLocation)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,JsonLocation).loc","Parameter_3","Belong to com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,JsonLocation)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,JsonLocation,Throwable)","Constructor","@since 2.7","public JsonParseException(JsonParser p, String msg, JsonLocation loc, Throwable rootCause) {
    super(p, msg, loc, rootCause);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,JsonLocation,Throwable).p","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,JsonLocation,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,JsonLocation,Throwable).msg","Parameter_2","Belong to com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,JsonLocation,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,JsonLocation,Throwable).loc","Parameter_3","Belong to com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,JsonLocation,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,JsonLocation,Throwable).rootCause","Parameter_4","Belong to com.fasterxml.jackson.core.JsonParseException.<init>(JsonParser,String,JsonLocation,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(String,JsonLocation)","Constructor","No Comment","// since 2.7
@Deprecated
public JsonParseException(String msg, JsonLocation loc) {
    this(null, msg, loc, null);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(String,JsonLocation).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParseException.<init>(String,JsonLocation)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(String,JsonLocation).loc","Parameter_2","Belong to com.fasterxml.jackson.core.JsonParseException.<init>(String,JsonLocation)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(String,JsonLocation,Throwable)","Constructor","No Comment","// since 2.7
@Deprecated
public JsonParseException(String msg, JsonLocation loc, Throwable rootCause) {
    this(null, msg, loc, rootCause);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(String,JsonLocation,Throwable).msg","Parameter_1","Belong to com.fasterxml.jackson.core.JsonParseException.<init>(String,JsonLocation,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(String,JsonLocation,Throwable).loc","Parameter_2","Belong to com.fasterxml.jackson.core.JsonParseException.<init>(String,JsonLocation,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonParseException.<init>(String,JsonLocation,Throwable).rootCause","Parameter_3","Belong to com.fasterxml.jackson.core.JsonParseException.<init>(String,JsonLocation,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.FormatSchema","Interface","* Simple tag interface used to mark schema objects that are used by some
 * {@link JsonParser} and {@link JsonGenerator} implementations to further
 * specify structure of expected format.
 * Basic JSON-based parsers and generators do not use schemas, but some data
 * formats (like many binary data formats like Thrift, protobuf) mandate
 * use of schemas.
 * Others like CSV and Java Properties may optionally use schemas (and/or use simple
 * default schema to use if caller does not specify one) which specifies
 * some aspects of structuring content.
 *<p>
 * Since there is little commonality between schemas for different data formats,
 * this interface does not define much meaningful functionality for accessing
 * schema details; rather, specific parser and generator implementations need
 * to cast to schema implementations they use. This marker interface is mostly
 * used for tagging ""some kind of schema"" -- instead of passing opaque
 * {@link java.lang.Object} -- for documentation purposes.","Interface do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.core.FormatSchema.getSchemaType()","Abstract Method","* Method that can be used to get an identifier that can be used for diagnostics
     * purposes, to indicate what kind of data format this schema is used for: typically
     * it is a short name of format itself, but it can also contain additional information
     * in cases where data format supports multiple types of schemas.
     *
     * @return Logical name of schema type","String getSchemaType();","String","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteFeature","Enum","* Token writer (generator) features not-specific to any particular format backend.
 * Eventual replacement for non-JSON-specific {@link com.fasterxml.jackson.core.JsonGenerator.Feature}s.
 *
 * @since 2.10","Enum do not obtain Source Code","No return type","public ","enum has no extends","com.fasterxml.jackson.core.util.JacksonFeature"
"com.fasterxml.jackson.core.StreamWriteFeature.AUTO_CLOSE_TARGET","Enum Constant","* Feature that determines whether generator will automatically
     * close underlying output target that is NOT owned by the
     * generator.
     * If disabled, calling application has to separately
     * close the underlying {@link OutputStream} and {@link Writer}
     * instances used to create the generator. If enabled, generator
     * will handle closing, as long as generator itself gets closed:
     * this happens when end-of-input is encountered, or generator
     * is closed by a call to {@link JsonGenerator#close}.
     *<p>
     * Feature is enabled by default.","AUTO_CLOSE_TARGET(JsonGenerator.Feature.AUTO_CLOSE_TARGET)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteFeature.AUTO_CLOSE_CONTENT","Enum Constant","* Feature that determines what happens when the generator is
     * closed while there are still unmatched
     * {@link JsonToken#START_ARRAY} or {@link JsonToken#START_OBJECT}
     * entries in output content. If enabled, such Array(s) and/or
     * Object(s) are automatically closed (that is, matching END_ token write
     * call is made for all open scopes); if disabled, no additional
     * write calls are made.
     *<p>
     * Feature is enabled by default.","AUTO_CLOSE_CONTENT(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteFeature.FLUSH_PASSED_TO_STREAM","Enum Constant","* Feature that specifies that calls to {@link JsonGenerator#flush} will cause
     * matching <code>flush()</code> to underlying {@link OutputStream}
     * or {@link Writer}; if disabled this will not be done.
     * Main reason to disable this feature is to prevent flushing at
     * generator level, if it is not possible to prevent method being
     * called by other code (like <code>ObjectMapper</code> or third
     * party libraries).
     *<p>
     * Feature is enabled by default.","FLUSH_PASSED_TO_STREAM(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteFeature.WRITE_BIGDECIMAL_AS_PLAIN","Enum Constant","* Feature that determines whether {@link java.math.BigDecimal} entries are
     * serialized using {@link java.math.BigDecimal#toPlainString()} to prevent
     * values to be written using scientific notation.
     *<p>
     * NOTE: only affects generators that serialize {@link java.math.BigDecimal}s
     * using textual representation (textual formats but potentially some binary
     * formats).
     *<p>
     * Feature is disabled by default, so default output mode is used; this generally
     * depends on how {@link BigDecimal} has been created.","WRITE_BIGDECIMAL_AS_PLAIN(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteFeature.STRICT_DUPLICATE_DETECTION","Enum Constant","* Feature that determines whether {@link JsonGenerator} will explicitly
     * check that no duplicate JSON Object field names are written.
     * If enabled, generator will check all names within context and report
     * duplicates by throwing a {@link JsonGenerationException}; if disabled,
     * no such checking will be done. Assumption in latter case is
     * that caller takes care of not trying to write duplicate names.
     *<p>
     * Note that enabling this feature will incur performance overhead
     * due to having to store and check additional information.
     *<p>
     * Feature is disabled by default.","STRICT_DUPLICATE_DETECTION(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteFeature.IGNORE_UNKNOWN","Enum Constant","* Feature that determines what to do if the underlying data format requires knowledge
     * of all properties to output, and if no definition is found for a property that
     * caller tries to write. If enabled, such properties will be quietly ignored;
     * if disabled, a {@link JsonProcessingException} will be thrown to indicate the
     * problem.
     * Typically most textual data formats do NOT require schema information (although
     * some do, such as CSV), whereas many binary data formats do require definitions
     * (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not).
     *<p>
     * Note that support for this feature is implemented by individual data format
     * module, if (and only if) it makes sense for the format in question. For JSON,
     * for example, this feature has no effect as properties need not be pre-defined.
     *<p>
     * Feature is disabled by default, meaning that if the underlying data format
     * requires knowledge of all properties to output, attempts to write an unknown
     * property will result in a {@link JsonProcessingException}","IGNORE_UNKNOWN(JsonGenerator.Feature.IGNORE_UNKNOWN)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteFeature.USE_FAST_DOUBLE_WRITER","Enum Constant","* Feature that determines whether to use standard Java code to write floats/doubles
     * (default) or use the Schubfach algorithm which may be faster (but see the next
     * paragraph for details).
     * Schubfach algorithm output may have small differences in the precision of the
     * float/double that compared to JDK default processing.
     *<p>
     * NOTE! Enabling this feature appears to improve performance significantly
     * up to and including JDK 17, but NOT when using JDK 21
     * and above -- in fact, it seems that JDK implementation is slightly faster.
     * Because of this,enabling this feature is only recommended for JDKs 17 and below.
     *<p>
     * Feature is disabled by default, meaning that JDK default conversions are used.
     *
     * @since 2.14","@SuppressWarnings(""deprecation"")
USE_FAST_DOUBLE_WRITER(JsonGenerator.Feature.USE_FAST_DOUBLE_WRITER)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteFeature.collectDefaults()","Method","* Method that calculates bit set (flags) of all features that
     * are enabled by default.
     *
     * @return Bit mask of all features that are enabled by default","public static int collectDefaults() {
    int flags = 0;
    for (StreamWriteFeature f : values()) {
        if (f.enabledByDefault()) {
            flags |= f.getMask();
        }
    }
    return flags;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteFeature.enabledByDefault()","Method","No Comment","@Override
public boolean enabledByDefault() {
    return _defaultState;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteFeature.enabledIn(int)","Method","No Comment","@Override
public boolean enabledIn(int flags) {
    return (flags & _mask) != 0;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteFeature.enabledIn(int).flags","Parameter_1","Belong to com.fasterxml.jackson.core.StreamWriteFeature.enabledIn(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteFeature.getMask()","Method","No Comment","@Override
public int getMask() {
    return _mask;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteFeature.mappedFeature()","Method","No Comment","public JsonGenerator.Feature mappedFeature() {
    return _mappedFeature;
}","JsonGenerator.Feature","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteFeature.<init>(JsonGenerator.Feature)","Constructor","No Comment","private StreamWriteFeature(JsonGenerator.Feature mappedTo) {
    // only for 2.x, let's map everything to legacy feature:
    _mappedFeature = mappedTo;
    _mask = mappedTo.getMask();
    _defaultState = mappedTo.enabledByDefault();
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamWriteFeature.<init>(JsonGenerator.Feature).mappedTo","Parameter_1","Belong to com.fasterxml.jackson.core.StreamWriteFeature.<init>(JsonGenerator.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory","Abstract Class","* Intermediate base class for actual format-specific factories for constructing
 * parsers (reading) and generators (writing). Although full power will only be
 * available with Jackson 3, skeletal implementation added in 2.10 to help conversion
 * of code for 2.x to 3.x migration of projects depending on Jackson
 *
 * @since 2.10","Abstract Class do not obtain Source Code","No return type","public , abstract ","","com.fasterxml.jackson.core.Versioned;java.io.Serializable"
"com.fasterxml.jackson.core.TokenStreamFactory.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 2;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.requiresPropertyOrdering()","Abstract Method","* Introspection method that higher-level functionality may call
     * to see whether underlying data format requires a stable ordering
     * of object properties or not.
     * This is usually used for determining
     * whether to force a stable ordering (like alphabetic ordering by name)
     * if no ordering if explicitly specified.
     *<p>
     * Default implementation returns <code>false</code> as JSON does NOT
     * require stable ordering. Formats that require ordering include positional
     * textual formats like <code>CSV</code>, and schema-based binary formats
     * like <code>Avro</code>.
     *
     * @return Whether format supported by this factory
     *   requires Object properties to be ordered.","public abstract boolean requiresPropertyOrdering();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.canHandleBinaryNatively()","Abstract Method","* Introspection method that higher-level functionality may call
     * to see whether underlying data format can read and write binary
     * data natively; that is, embeded it as-is without using encodings
     * such as Base64.
     *<p>
     * Default implementation returns <code>false</code> as JSON does not
     * support native access: all binary content must use Base64 encoding.
     * Most binary formats (like Smile and Avro) support native binary content.
     *
     * @return Whether format supported by this factory
     *    supports native binary content","public abstract boolean canHandleBinaryNatively();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.canParseAsync()","Abstract Method","* Introspection method that can be used to check whether this
     * factory can create non-blocking parsers: parsers that do not
     * use blocking I/O abstractions but instead use a
     * {@link com.fasterxml.jackson.core.async.NonBlockingInputFeeder}.
     *
     * @return Whether this factory supports non-blocking (""async"") parsing or
     *    not (and consequently whether {@code createNonBlockingXxx()} method(s) work)","public abstract boolean canParseAsync();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.getFormatReadFeatureType()","Abstract Method","* Method for accessing kind of {@link FormatFeature} that a parser
     * {@link JsonParser} produced by this factory would accept, if any;
     * <code>null</code> returned if none.
     *
     * @return Type of format-specific stream read features, if any; {@code null} if none
     *
     * @since 2.6","public abstract Class<? extends FormatFeature> getFormatReadFeatureType();","Class","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.getFormatWriteFeatureType()","Abstract Method","* Method for accessing kind of {@link FormatFeature} that a parser
     * {@link JsonGenerator} produced by this factory would accept, if any;
     * <code>null</code> returned if none.
     *
     * @return Type of format-specific stream read features, if any; {@code null} if none
     *
     * @since 2.6","public abstract Class<? extends FormatFeature> getFormatWriteFeatureType();","Class","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.canUseSchema(FormatSchema)","Abstract Method","* Method that can be used to quickly check whether given schema
     * is something that parsers and/or generators constructed by this
     * factory could use. Note that this means possible use, at the level
     * of data format (i.e. schema is for same data format as parsers and
     * generators this factory constructs); individual schema instances
     * may have further usage restrictions.
     *
     * @param schema Schema instance to check
     *
     * @return Whether parsers and generators constructed by this factory
     *   can use specified format schema instance
     *
     * @since 2.1","public abstract boolean canUseSchema(FormatSchema schema);","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.canUseSchema(FormatSchema).schema","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.canUseSchema(FormatSchema)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.getFormatName()","Abstract Method","* Method that returns short textual id identifying format
     * this factory supports.
     *
     * @return Name of the format handled by parsers, generators this factory creates","public abstract String getFormatName();","String","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(JsonFactory.Feature)","Abstract Method","No Comment","public abstract boolean isEnabled(JsonFactory.Feature f);","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(JsonFactory.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(JsonFactory.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(StreamReadFeature)","Abstract Method","No Comment","public abstract boolean isEnabled(StreamReadFeature f);","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(StreamReadFeature).f","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(StreamReadFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(StreamWriteFeature)","Abstract Method","No Comment","public abstract boolean isEnabled(StreamWriteFeature f);","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(StreamWriteFeature).f","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(StreamWriteFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(JsonParser.Feature)","Abstract Method","No Comment","public abstract boolean isEnabled(JsonParser.Feature f);","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(JsonParser.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(JsonParser.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(JsonGenerator.Feature)","Abstract Method","No Comment","public abstract boolean isEnabled(JsonGenerator.Feature f);","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(JsonGenerator.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(JsonGenerator.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.getFactoryFeatures()","Abstract Method","* Method for getting bit set of all {@link JsonFactory.Feature}s enabled
     *
     * @return Bitset of enabled {@link JsonFactory.Feature}s.
     *
     * @since 2.16","public abstract int getFactoryFeatures();","int","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.getParserFeatures()","Abstract Method","No Comment","public abstract int getParserFeatures();","int","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.getGeneratorFeatures()","Abstract Method","No Comment","public abstract int getGeneratorFeatures();","int","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.getFormatParserFeatures()","Abstract Method","No Comment","public abstract int getFormatParserFeatures();","int","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.getFormatGeneratorFeatures()","Abstract Method","No Comment","public abstract int getFormatGeneratorFeatures();","int","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.streamReadConstraints()","Abstract Method","* Get the constraints to apply when performing streaming reads.
     *
     * @return Constraints to apply to reads done by {@link JsonParser}s constructed
     *   by this factory.
     *
     * @since 2.15","public abstract StreamReadConstraints streamReadConstraints();","StreamReadConstraints","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.streamWriteConstraints()","Abstract Method","* Get the constraints to apply when performing streaming writes.
     *
     * @return Constraints to apply to reads done by {@link JsonGenerator}s constructed
     *   by this factory.
     *
     * @since 2.16","public abstract StreamWriteConstraints streamWriteConstraints();","StreamWriteConstraints","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(byte[])","Abstract Method","No Comment","public abstract JsonParser createParser(byte[] data) throws IOException;","JsonParser","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(byte[]).data","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createParser(byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(byte[],int,int)","Abstract Method","No Comment","public abstract JsonParser createParser(byte[] data, int offset, int len) throws IOException;","JsonParser","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(byte[],int,int).data","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createParser(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createParser(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(byte[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createParser(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(char[])","Abstract Method","No Comment","public abstract JsonParser createParser(char[] content) throws IOException;","JsonParser","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(char[]).content","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createParser(char[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(char[],int,int)","Abstract Method","No Comment","public abstract JsonParser createParser(char[] content, int offset, int len) throws IOException;","JsonParser","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(char[],int,int).content","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createParser(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createParser(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createParser(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(DataInput)","Abstract Method","No Comment","public abstract JsonParser createParser(DataInput in) throws IOException;","JsonParser","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(DataInput).in","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createParser(DataInput)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(File)","Abstract Method","No Comment","public abstract JsonParser createParser(File f) throws IOException;","JsonParser","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(File).f","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createParser(File)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(InputStream)","Abstract Method","No Comment","public abstract JsonParser createParser(InputStream in) throws IOException;","JsonParser","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(InputStream).in","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createParser(InputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(Reader)","Abstract Method","No Comment","public abstract JsonParser createParser(Reader r) throws IOException;","JsonParser","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(Reader).r","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createParser(Reader)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(String)","Abstract Method","No Comment","public abstract JsonParser createParser(String content) throws IOException;","JsonParser","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(String).content","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createParser(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(URL)","Abstract Method","No Comment","public abstract JsonParser createParser(URL url) throws IOException;","JsonParser","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createParser(URL).url","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createParser(URL)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createNonBlockingByteArrayParser()","Abstract Method","* Optional method for constructing parser for non-blocking parsing
     * via {@link com.fasterxml.jackson.core.async.ByteArrayFeeder}
     * interface (accessed using {@link JsonParser#getNonBlockingInputFeeder()}
     * from constructed instance).
     *<p>
     * If this factory does not support non-blocking parsing (either at all,
     * or from byte array),
     * will throw {@link UnsupportedOperationException}.
     *<p>
     * Note that JSON-backed factory only supports parsing of UTF-8 encoded JSON content
     * (and US-ASCII since it is proper subset); other encodings are not supported
     * at this point.
     *
     * @return Constructed parser
     *
     * @throws IOException If there are problems constructing parser
     *
     * @since 2.9","public abstract JsonParser createNonBlockingByteArrayParser() throws IOException;","JsonParser","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createNonBlockingByteBufferParser()","Abstract Method","* Optional method for constructing parser for non-blocking parsing
     * via {@link com.fasterxml.jackson.core.async.ByteBufferFeeder}
     * interface (accessed using {@link JsonParser#getNonBlockingInputFeeder()}
     * from constructed instance).
     *<p>
     * If this factory does not support non-blocking parsing (either at all,
     * or from byte array),
     * will throw {@link UnsupportedOperationException}.
     *<p>
     * Note that JSON-backed factory only supports parsing of UTF-8 encoded JSON content
     * (and US-ASCII since it is proper subset); other encodings are not supported
     * at this point.
     *
     * @return Constructed parser
     *
     * @throws IOException If there are problems constructing parser
     *
     * @since 2.14","public abstract JsonParser createNonBlockingByteBufferParser() throws IOException;","JsonParser","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(DataOutput,JsonEncoding)","Abstract Method","No Comment","public abstract JsonGenerator createGenerator(DataOutput out, JsonEncoding enc) throws IOException;","JsonGenerator","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(DataOutput,JsonEncoding).out","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(DataOutput,JsonEncoding)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(DataOutput,JsonEncoding).enc","Parameter_2","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(DataOutput,JsonEncoding)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(DataOutput)","Abstract Method","No Comment","public abstract JsonGenerator createGenerator(DataOutput out) throws IOException;","JsonGenerator","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(DataOutput).out","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(DataOutput)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(File,JsonEncoding)","Abstract Method","No Comment","public abstract JsonGenerator createGenerator(File f, JsonEncoding enc) throws IOException;","JsonGenerator","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(File,JsonEncoding).f","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(File,JsonEncoding)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(File,JsonEncoding).enc","Parameter_2","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(File,JsonEncoding)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(OutputStream)","Abstract Method","No Comment","public abstract JsonGenerator createGenerator(OutputStream out) throws IOException;","JsonGenerator","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(OutputStream).out","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(OutputStream,JsonEncoding)","Abstract Method","No Comment","public abstract JsonGenerator createGenerator(OutputStream out, JsonEncoding enc) throws IOException;","JsonGenerator","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(OutputStream,JsonEncoding).out","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(OutputStream,JsonEncoding)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(OutputStream,JsonEncoding).enc","Parameter_2","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(OutputStream,JsonEncoding)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(Writer)","Abstract Method","No Comment","public abstract JsonGenerator createGenerator(Writer w) throws IOException;","JsonGenerator","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(Writer).w","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory._createDataOutputWrapper(DataOutput)","Method","No Comment","protected OutputStream _createDataOutputWrapper(DataOutput out) {
    return new DataOutputAsStream(out);
}","OutputStream","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory._createDataOutputWrapper(DataOutput).out","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory._createDataOutputWrapper(DataOutput)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory._optimizedStreamFromURL(URL)","Method","* Helper method used for constructing an optimal stream for
     * parsers to use, when input is to be read from an URL.
     * This helps when reading file content via URL.
     *
     * @param url Source to read content to parse from
     *
     * @return InputStream constructed for given {@link URL}
     *
     * @throws IOException If there is a problem accessing content from specified {@link URL}","protected InputStream _optimizedStreamFromURL(URL url) throws IOException {
    if (""file"".equals(url.getProtocol())) {
        /* Cannot do this if the path refers
             * to a network drive on windows. This fixes the problem;
             * might not be needed on all platforms (NFS?), but should not
             * matter a lot: performance penalty of extra wrapping is more
             * relevant when accessing local file system.
             */
        String host = url.getHost();
        if (host == null || host.length() == 0) {
            // [core#48]: Let's try to avoid probs with URL encoded stuff
            String path = url.getPath();
            if (path.indexOf('%') < 0) {
                return new FileInputStream(url.getPath());
            }
            // otherwise, let's fall through and let URL decoder do its magic
        }
    }
    return url.openStream();
}","InputStream","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory._optimizedStreamFromURL(URL).url","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory._optimizedStreamFromURL(URL)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory._fileInputStream(File)","Method","* Helper methods used for constructing an {@link InputStream} for
     * parsers to use, when input is to be read from given {@link File}.
     *
     * @param f File to open stream for
     *
     * @return {@link InputStream} constructed
     *
     * @throws IOException If there is a problem opening the stream
     *
     * @since 2.14","protected InputStream _fileInputStream(File f) throws IOException {
    return new FileInputStream(f);
}","InputStream","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory._fileInputStream(File).f","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory._fileInputStream(File)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory._fileOutputStream(File)","Method","* Helper methods used for constructing an {@link OutputStream} for
     * generator to use, when target is to be written into given {@link File}.
     *
     * @param f File to open stream for
     *
     * @return {@link OutputStream} constructed
     *
     * @throws IOException If there is a problem opening the stream
     *
     * @since 2.14","protected OutputStream _fileOutputStream(File f) throws IOException {
    return new FileOutputStream(f);
}","OutputStream","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory._fileOutputStream(File).f","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory._fileOutputStream(File)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory._checkRangeBoundsForByteArray(byte[],int,int)","Method","@since 2.14","protected void _checkRangeBoundsForByteArray(byte[] data, int offset, int len) throws IllegalArgumentException {
    if (data == null) {
        _reportRangeError(""Invalid `byte[]` argument: `null`"");
    }
    final int dataLen = data.length;
    final int end = offset + len;
    // Note: we are checking that:
    //
    // !(offset < 0)
    // !(len < 0)
    // !((offset + len) < 0) // int overflow!
    // !((offset + len) > dataLen) == !((datalen - (offset+len)) < 0)
    // All can be optimized by OR'ing and checking for negative:
    int anyNegs = offset | len | end | (dataLen - end);
    if (anyNegs < 0) {
        _reportRangeError(String.format(""Invalid 'offset' (%d) and/or 'len' (%d) arguments for `byte[]` of length %d"", offset, len, dataLen));
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory._checkRangeBoundsForByteArray(byte[],int,int).data","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory._checkRangeBoundsForByteArray(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory._checkRangeBoundsForByteArray(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.TokenStreamFactory._checkRangeBoundsForByteArray(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory._checkRangeBoundsForByteArray(byte[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.TokenStreamFactory._checkRangeBoundsForByteArray(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory._checkRangeBoundsForCharArray(char[],int,int)","Method","@since 2.14","protected void _checkRangeBoundsForCharArray(char[] data, int offset, int len) throws IOException {
    if (data == null) {
        _reportRangeError(""Invalid `char[]` argument: `null`"");
    }
    final int dataLen = data.length;
    final int end = offset + len;
    // Note: we are checking same things as with other bounds-checks
    int anyNegs = offset | len | end | (dataLen - end);
    if (anyNegs < 0) {
        _reportRangeError(String.format(""Invalid 'offset' (%d) and/or 'len' (%d) arguments for `char[]` of length %d"", offset, len, dataLen));
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory._checkRangeBoundsForCharArray(char[],int,int).data","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory._checkRangeBoundsForCharArray(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory._checkRangeBoundsForCharArray(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.TokenStreamFactory._checkRangeBoundsForCharArray(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory._checkRangeBoundsForCharArray(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.TokenStreamFactory._checkRangeBoundsForCharArray(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory._reportRangeError(String)","Method","No Comment","protected <T> T _reportRangeError(String msg) throws IllegalArgumentException {
    throw new IllegalArgumentException(msg);
}","Object","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.TokenStreamFactory._reportRangeError(String).msg","Parameter_1","Belong to com.fasterxml.jackson.core.TokenStreamFactory._reportRangeError(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version","Class","* Object that encapsulates versioning information of a component.
 * Version information includes not just version number but also
 * optionally group and artifact ids of the component being versioned.
 *<p>
 * Note that optional group and artifact id properties are new with Jackson 2.0:
 * if provided, they should align with Maven artifact information.","Class do not obtain Source Code","No return type","public ","","java.lang.Comparable;java.io.Serializable"
"com.fasterxml.jackson.core.Version.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.UNKNOWN_VERSION","Field","No Comment","private final static Version UNKNOWN_VERSION = new Version(0, 0, 0, null, null, null);","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version._majorVersion","Field","No Comment","protected final int _majorVersion;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version._minorVersion","Field","No Comment","protected final int _minorVersion;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version._patchLevel","Field","No Comment","protected final int _patchLevel;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version._groupId","Field","No Comment","protected final String _groupId;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version._artifactId","Field","No Comment","protected final String _artifactId;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version._snapshotInfo","Field","* Additional information for snapshot versions; null for non-snapshot
     * (release) versions.","protected final String _snapshotInfo;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.unknownVersion()","Method","* Method returns canonical ""not known"" version, which is used as version
     * in cases where actual version information is not known (instead of null).
     *
     * @return Version instance to use as a placeholder when actual version is not known
     *   (or not relevant)","public static Version unknownVersion() {
    return UNKNOWN_VERSION;
}","Version","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.isUnknownVersion()","Method","* @return {@code True} if this instance is the one returned by
     *    call to {@link #unknownVersion()}
     *
     * @since 2.7 to replace misspelled {@link #isUknownVersion()}","public boolean isUnknownVersion() {
    return (this == UNKNOWN_VERSION);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.isSnapshot()","Method","No Comment","public boolean isSnapshot() {
    return (_snapshotInfo != null) && !_snapshotInfo.isEmpty();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.isUknownVersion()","Method","* @return {@code True} if this instance is the one returned by
     *    call to {@link #unknownVersion()}
     *
     * @deprecated Since 2.7 use correctly spelled method {@link #isUnknownVersion()}","@Deprecated
public boolean isUknownVersion() {
    return isUnknownVersion();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.getMajorVersion()","Method","No Comment","public int getMajorVersion() {
    return _majorVersion;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.getMinorVersion()","Method","No Comment","public int getMinorVersion() {
    return _minorVersion;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.getPatchLevel()","Method","No Comment","public int getPatchLevel() {
    return _patchLevel;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.getGroupId()","Method","No Comment","public String getGroupId() {
    return _groupId;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.getArtifactId()","Method","No Comment","public String getArtifactId() {
    return _artifactId;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.toFullString()","Method","No Comment","public String toFullString() {
    return _groupId + '/' + _artifactId + '/' + toString();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.toString()","Method","No Comment","@Override
public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(_majorVersion).append('.');
    sb.append(_minorVersion).append('.');
    sb.append(_patchLevel);
    if (isSnapshot()) {
        sb.append('-').append(_snapshotInfo);
    }
    return sb.toString();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.hashCode()","Method","No Comment","@Override
public int hashCode() {
    return _artifactId.hashCode() ^ _groupId.hashCode() ^ Objects.hashCode(_snapshotInfo) + _majorVersion - _minorVersion + _patchLevel;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.equals(Object)","Method","No Comment","@Override
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null)
        return false;
    if (o.getClass() != getClass())
        return false;
    Version other = (Version) o;
    return (other._majorVersion == _majorVersion) && (other._minorVersion == _minorVersion) && (other._patchLevel == _patchLevel) && Objects.equals(other._snapshotInfo, _snapshotInfo) && other._artifactId.equals(_artifactId) && other._groupId.equals(_groupId);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.equals(Object).o","Parameter_1","Belong to com.fasterxml.jackson.core.Version.equals(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.compareTo(Version)","Method","No Comment","@Override
public int compareTo(Version other) {
    if (other == this)
        return 0;
    int diff = _groupId.compareTo(other._groupId);
    if (diff == 0) {
        diff = _artifactId.compareTo(other._artifactId);
        if (diff == 0) {
            diff = _majorVersion - other._majorVersion;
            if (diff == 0) {
                diff = _minorVersion - other._minorVersion;
                if (diff == 0) {
                    diff = _patchLevel - other._patchLevel;
                    if (diff == 0) {
                        // Snapshot: non-snapshot AFTER snapshot, otherwise alphabetical
                        if (isSnapshot()) {
                            if (other.isSnapshot()) {
                                diff = _snapshotInfo.compareTo(other._snapshotInfo);
                            } else {
                                diff = -1;
                            }
                        } else if (other.isSnapshot()) {
                            diff = 1;
                        } else {
                            diff = 0;
                        }
                    }
                }
            }
        }
    }
    return diff;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.compareTo(Version).other","Parameter_1","Belong to com.fasterxml.jackson.core.Version.compareTo(Version)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.<init>(int,int,int,String)","Constructor","* @param major Major version number
     * @param minor Minor version number
     * @param patchLevel patch level of version
     * @param snapshotInfo Optional additional string qualifier
     *
     * @since 2.1
     * @deprecated Use variant that takes group and artifact ids","@Deprecated
public Version(int major, int minor, int patchLevel, String snapshotInfo) {
    this(major, minor, patchLevel, snapshotInfo, null, null);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.<init>(int,int,int,String).major","Parameter_1","Belong to com.fasterxml.jackson.core.Version.<init>(int,int,int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.<init>(int,int,int,String).minor","Parameter_2","Belong to com.fasterxml.jackson.core.Version.<init>(int,int,int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.<init>(int,int,int,String).patchLevel","Parameter_3","Belong to com.fasterxml.jackson.core.Version.<init>(int,int,int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.<init>(int,int,int,String).snapshotInfo","Parameter_4","Belong to com.fasterxml.jackson.core.Version.<init>(int,int,int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.<init>(int,int,int,String,String,String)","Constructor","No Comment","public Version(int major, int minor, int patchLevel, String snapshotInfo, String groupId, String artifactId) {
    _majorVersion = major;
    _minorVersion = minor;
    _patchLevel = patchLevel;
    _snapshotInfo = snapshotInfo;
    _groupId = (groupId == null) ? """" : groupId;
    _artifactId = (artifactId == null) ? """" : artifactId;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.<init>(int,int,int,String,String,String).major","Parameter_1","Belong to com.fasterxml.jackson.core.Version.<init>(int,int,int,String,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.<init>(int,int,int,String,String,String).minor","Parameter_2","Belong to com.fasterxml.jackson.core.Version.<init>(int,int,int,String,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.<init>(int,int,int,String,String,String).patchLevel","Parameter_3","Belong to com.fasterxml.jackson.core.Version.<init>(int,int,int,String,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.<init>(int,int,int,String,String,String).snapshotInfo","Parameter_4","Belong to com.fasterxml.jackson.core.Version.<init>(int,int,int,String,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.<init>(int,int,int,String,String,String).groupId","Parameter_5","Belong to com.fasterxml.jackson.core.Version.<init>(int,int,int,String,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.Version.<init>(int,int,int,String,String,String).artifactId","Parameter_6","Belong to com.fasterxml.jackson.core.Version.<init>(int,int,int,String,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadCapability","Enum","* Set of on/off capabilities that a {@link JsonParser} for given format
 * (or in case of buffering, original format) has.
 * Used in some cases to adjust aspects of things like content conversions,
 * coercions and validation by format-agnostic functionality.
 * Specific or expected usage documented by individual capability entry
 * Javadocs.
 *
 * @since 2.12","Enum do not obtain Source Code","No return type","public ","enum has no extends","com.fasterxml.jackson.core.util.JacksonFeature"
"com.fasterxml.jackson.core.StreamReadCapability.DUPLICATE_PROPERTIES","Enum Constant","* Capability that indicates that data format can expose multiple properties
     * with same name (""duplicates"") within one Object context.
     * This is usually not enabled, except for formats like {@code xml} that
     * have content model that does not map cleanly to JSON-based token stream.
     *<p>
     * Capability may be used for allowing secondary mapping of such duplicates
     * in case of using Tree Model (see {@link TreeNode}), or ""untyped"" databinding
     * (mapping content as generic {@link java.lang.Object}).
     *<p>
     * Capability is currently only enabled for XML format backend.","DUPLICATE_PROPERTIES(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadCapability.SCALARS_AS_OBJECTS","Enum Constant","* Capability that indicates that data format may in some cases expose Scalar values
     * (whether typed or untyped) as Object values. There are additional access methods
     * at databind level: this capability may be used to decide whether to attempt to
     * use such methods especially in potentially ambiguous cases.
     *<p>
     * Capability is currently only enabled for XML format backend.","SCALARS_AS_OBJECTS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadCapability.UNTYPED_SCALARS","Enum Constant","* Capability that indicates that data format only exposed ""untyped"" scalars: that is,
     * instead of Number, Boolean and String types all scalar values are reported as
     * text ({@link JsonToken#VALUE_STRING})
     * unless some sort of coercion is implied by caller.
     *<p>
     * This capability is true for many textual formats like CSV, Properties and XML.","UNTYPED_SCALARS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadCapability.EXACT_FLOATS","Enum Constant","* Capability that indicates whether data format supports reporting of
     * accurate floating point values (with respect to reported numeric type,
     * {@link com.fasterxml.jackson.core.JsonParser.NumberType#DOUBLE}) or not.
     * This usually depends on whether format stores such values natively
     * (as IEEE binary FP formats for {@code java.lang.Float} and {@code java.lang.Double};
     * using some other value preserving presentation for {@code java.math.BigDecimal})
     * or not: most binary formats do, and most textual formats do not (at least for
     * {@code Float} and {@code Double}, specifically).
     *<p>
     * In case of JSON numbers (as well as for most if not all textual formats),
     * all floating-point numbers are represented simply by decimal (10-base)
     * textual representation and can only be represented accurately using
     * {@link java.math.BigDecimal}. But for performance reasons they may be
     * (depending on settings) be exposed as {@link java.lang.Double}s (that is,
     * {@link com.fasterxml.jackson.core.JsonParser.NumberType#DOUBLE}).
     * Note that methods like {@link JsonParser#getNumberValueExact()},
     * {@link JsonParser#getValueAsString()} and
     * {@link JsonParser#getDecimalValue()} report values without
     * precision loss.
     *<p>
     * The main intended use case is to let non-Jackson code to handle cases
     * where exact accuracy is necessary in a way that handling does not incur
     * unnecessary conversions across different formats: for example, when reading
     * binary format, simple access is essentially guaranteed to expose value exactly
     * as encoded by the format (as {@code float}, {@code double} or {@code BigDecimal}),
     * whereas for textual formats like JSON it is necessary to access value explicitly
     * as {@code BigDecimal} using {@code JsonParser#getDecimalValue}.
     *<p>
     * Capability is false for text formats like JSON, but true for binary formats
     * like Smile, MessagePack, etc., where type is precisely and inexpensively
     * indicated by format.
     *
     * @since 2.14","EXACT_FLOATS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadCapability.enabledByDefault()","Method","No Comment","@Override
public boolean enabledByDefault() {
    return _defaultState;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadCapability.enabledIn(int)","Method","No Comment","@Override
public boolean enabledIn(int flags) {
    return (flags & _mask) != 0;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadCapability.enabledIn(int).flags","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadCapability.enabledIn(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadCapability.getMask()","Method","No Comment","@Override
public int getMask() {
    return _mask;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadCapability.<init>(boolean)","Constructor","No Comment","private StreamReadCapability(boolean defaultState) {
    _defaultState = defaultState;
    _mask = (1 << ordinal());
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.StreamReadCapability.<init>(boolean).defaultState","Parameter_1","Belong to com.fasterxml.jackson.core.StreamReadCapability.<init>(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase","Abstract Class","* This base class implements part of API that a JSON generator exposes
 * to applications, adds shared internal methods that sub-classes
 * can use and adds some abstract methods sub-classes must implement.","Abstract Class do not obtain Source Code","No return type","public , abstract ","com.fasterxml.jackson.core.JsonGenerator",""
"com.fasterxml.jackson.core.base.GeneratorBase.SURR1_FIRST","Field","No Comment","public final static int SURR1_FIRST = 0xD800;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.SURR1_LAST","Field","No Comment","public final static int SURR1_LAST = 0xDBFF;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.SURR2_FIRST","Field","No Comment","public final static int SURR2_FIRST = 0xDC00;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.SURR2_LAST","Field","No Comment","public final static int SURR2_LAST = 0xDFFF;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.DERIVED_FEATURES_MASK","Field","* Set of feature masks related to features that need updates of other
     * local configuration or state.
     *
     * @since 2.5","@SuppressWarnings(""deprecation"")
protected final static int DERIVED_FEATURES_MASK = Feature.WRITE_NUMBERS_AS_STRINGS.getMask() | Feature.ESCAPE_NON_ASCII.getMask() | Feature.STRICT_DUPLICATE_DETECTION.getMask();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.WRITE_BINARY","Field","No Comment","protected final static String WRITE_BINARY = ""write a binary value"";","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.WRITE_BOOLEAN","Field","No Comment","protected final static String WRITE_BOOLEAN = ""write a boolean value"";","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.WRITE_NULL","Field","No Comment","protected final static String WRITE_NULL = ""write a null"";","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.WRITE_NUMBER","Field","No Comment","protected final static String WRITE_NUMBER = ""write a number"";","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.WRITE_RAW","Field","No Comment","protected final static String WRITE_RAW = ""write a raw (unencoded) value"";","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.WRITE_STRING","Field","No Comment","protected final static String WRITE_STRING = ""write a string"";","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.MAX_BIG_DECIMAL_SCALE","Field","* This value is the limit of scale allowed for serializing {@link BigDecimal}
     * in ""plain"" (non-engineering) notation; intent is to prevent asymmetric
     * attack whereupon simple eng-notation with big scale is used to generate
     * huge ""plain"" serialization. See [core#315] for details.
     *
     * @since 2.7.7","protected final static int MAX_BIG_DECIMAL_SCALE = 9999;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._objectCodec","Field","No Comment","protected ObjectCodec _objectCodec;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._features","Field","* Bit flag composed of bits that indicate which
     * {@link com.fasterxml.jackson.core.JsonGenerator.Feature}s
     * are enabled.","protected int _features;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._ioContext","Field","since 2.16","protected final IOContext _ioContext;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._cfgNumbersAsStrings","Field","* Flag set to indicate that implicit conversion from number
     * to JSON String is needed (as per
     * {@link com.fasterxml.jackson.core.json.JsonWriteFeature#WRITE_NUMBERS_AS_STRINGS}).","protected boolean _cfgNumbersAsStrings;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._writeContext","Field","* Object that keeps track of the current contextual state
     * of the generator.","protected JsonWriteContext _writeContext;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._closed","Field","* Flag that indicates whether generator is closed or not. Gets
     * set when it is closed by an explicit call
     * ({@link #close}).","protected boolean _closed;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.version()","Method","* Implemented with standard version number detection algorithm, typically using
     * a simple generated class, with information extracted from Maven project file
     * during build.
     *
     * @return Version number of the generator (version of the jar that contains
     *     generator implementation class)","@Override
public Version version() {
    return PackageVersion.VERSION;
}","Version","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.currentValue()","Method","Overridden from JsonGenerator for direct context access:","@Override
public Object currentValue() {
    return _writeContext.getCurrentValue();
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.assignCurrentValue(Object)","Method","No Comment","@Override
public // Overridden from JsonGenerator for direct context access:
void assignCurrentValue(Object v) {
    if (_writeContext != null) {
        _writeContext.setCurrentValue(v);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.assignCurrentValue(Object).v","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.assignCurrentValue(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.isEnabled(Feature)","Method","No Comment","@Override
public final boolean isEnabled(Feature f) {
    return (_features & f.getMask()) != 0;
}","boolean","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.isEnabled(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.isEnabled(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.getFeatureMask()","Method","No Comment","@Override
public int getFeatureMask() {
    return _features;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.enable(Feature)","Method","No Comment","@SuppressWarnings(""deprecation"")
@Override
public JsonGenerator enable(Feature f) {
    final int mask = f.getMask();
    _features |= mask;
    if ((mask & DERIVED_FEATURES_MASK) != 0) {
        // why not switch? Requires addition of a generated class, alas
        if (f == Feature.WRITE_NUMBERS_AS_STRINGS) {
            _cfgNumbersAsStrings = true;
        } else if (f == Feature.ESCAPE_NON_ASCII) {
            setHighestNonEscapedChar(127);
        } else if (f == Feature.STRICT_DUPLICATE_DETECTION) {
            if (_writeContext.getDupDetector() == null) {
                // but only if disabled currently
                _writeContext = _writeContext.withDupDetector(DupDetector.rootDetector(this));
            }
        }
    }
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.enable(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.enable(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.disable(Feature)","Method","No Comment","@SuppressWarnings(""deprecation"")
@Override
public JsonGenerator disable(Feature f) {
    final int mask = f.getMask();
    _features &= ~mask;
    if ((mask & DERIVED_FEATURES_MASK) != 0) {
        if (f == Feature.WRITE_NUMBERS_AS_STRINGS) {
            _cfgNumbersAsStrings = false;
        } else if (f == Feature.ESCAPE_NON_ASCII) {
            setHighestNonEscapedChar(0);
        } else if (f == Feature.STRICT_DUPLICATE_DETECTION) {
            _writeContext = _writeContext.withDupDetector(null);
        }
    }
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.disable(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.disable(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.setFeatureMask(int)","Method","No Comment","@Override
@Deprecated
public JsonGenerator setFeatureMask(int newMask) {
    int changed = newMask ^ _features;
    _features = newMask;
    if (changed != 0) {
        _checkStdFeatureChanges(newMask, changed);
    }
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.setFeatureMask(int).newMask","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.setFeatureMask(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.overrideStdFeatures(int,int)","Method","No Comment","// since 2.7
@Override
public JsonGenerator overrideStdFeatures(int values, int mask) {
    int oldState = _features;
    int newState = (oldState & ~mask) | (values & mask);
    int changed = oldState ^ newState;
    if (changed != 0) {
        _features = newState;
        _checkStdFeatureChanges(newState, changed);
    }
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.overrideStdFeatures(int,int).values","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.overrideStdFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.overrideStdFeatures(int,int).mask","Parameter_2","Belong to com.fasterxml.jackson.core.base.GeneratorBase.overrideStdFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._checkStdFeatureChanges(int,int)","Method","* Helper method called to verify changes to standard features.
     *
     * @param newFeatureFlags Bitflag of standard features after they were changed
     * @param changedFeatures Bitflag of standard features for which setting
     *    did change
     *
     * @since 2.7","@SuppressWarnings(""deprecation"")
protected void _checkStdFeatureChanges(int newFeatureFlags, int changedFeatures) {
    if ((changedFeatures & DERIVED_FEATURES_MASK) == 0) {
        return;
    }
    _cfgNumbersAsStrings = Feature.WRITE_NUMBERS_AS_STRINGS.enabledIn(newFeatureFlags);
    if (Feature.ESCAPE_NON_ASCII.enabledIn(changedFeatures)) {
        if (Feature.ESCAPE_NON_ASCII.enabledIn(newFeatureFlags)) {
            setHighestNonEscapedChar(127);
        } else {
            setHighestNonEscapedChar(0);
        }
    }
    if (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(changedFeatures)) {
        if (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(newFeatureFlags)) {
            // enabling
            if (_writeContext.getDupDetector() == null) {
                // but only if disabled currently
                _writeContext = _writeContext.withDupDetector(DupDetector.rootDetector(this));
            }
        } else {
            // disabling
            _writeContext = _writeContext.withDupDetector(null);
        }
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._checkStdFeatureChanges(int,int).newFeatureFlags","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase._checkStdFeatureChanges(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._checkStdFeatureChanges(int,int).changedFeatures","Parameter_2","Belong to com.fasterxml.jackson.core.base.GeneratorBase._checkStdFeatureChanges(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.useDefaultPrettyPrinter()","Method","No Comment","@Override
public JsonGenerator useDefaultPrettyPrinter() {
    // Should not override a pretty printer if one already assigned.
    if (getPrettyPrinter() != null) {
        return this;
    }
    return setPrettyPrinter(_constructDefaultPrettyPrinter());
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.setCodec(ObjectCodec)","Method","No Comment","@Override
public JsonGenerator setCodec(ObjectCodec oc) {
    _objectCodec = oc;
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.setCodec(ObjectCodec).oc","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.setCodec(ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.getCodec()","Method","No Comment","@Override
public ObjectCodec getCodec() {
    return _objectCodec;
}","ObjectCodec","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.getOutputContext()","Method","* Note: type was co-variant until Jackson 2.7; reverted back to
     * base type in 2.8 to allow for overriding by subtypes that use
     * custom context type.","@Override
public JsonStreamContext getOutputContext() {
    return _writeContext;
}","JsonStreamContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.ioContext()","Method","* Accessor for use by {@code jackson-core} itself (tests in particular).
     *
     * @return {@link IOContext} in use by this generator
     *
     * @since 2.17","public IOContext ioContext() {
    return _ioContext;
}","IOContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeStartObject(Object)","Method","No Comment","// since 2.8
@Override
public void writeStartObject(Object forValue) throws IOException {
    writeStartObject();
    if (forValue != null) {
        assignCurrentValue(forValue);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeStartObject(Object).forValue","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.writeStartObject(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeFieldName(SerializableString)","Method","No Comment","@Override
public void writeFieldName(SerializableString name) throws IOException {
    writeFieldName(name.getValue());
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeFieldName(SerializableString).name","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.writeFieldName(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeString(SerializableString)","Method","No Comment","@Override
public void writeString(SerializableString text) throws IOException {
    writeString(text.getValue());
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeString(SerializableString).text","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.writeString(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(String)","Method","No Comment","@Override
public void writeRawValue(String text) throws IOException {
    _verifyValueWrite(""write raw value"");
    writeRaw(text);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(String).text","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(String,int,int)","Method","No Comment","@Override
public void writeRawValue(String text, int offset, int len) throws IOException {
    _verifyValueWrite(""write raw value"");
    writeRaw(text, offset, len);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(String,int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(String,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(String,int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(char[],int,int)","Method","No Comment","@Override
public void writeRawValue(char[] text, int offset, int len) throws IOException {
    _verifyValueWrite(""write raw value"");
    writeRaw(text, offset, len);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(char[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(SerializableString)","Method","No Comment","@Override
public void writeRawValue(SerializableString text) throws IOException {
    _verifyValueWrite(""write raw value"");
    writeRaw(text);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(SerializableString).text","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.writeRawValue(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeBinary(Base64Variant,InputStream,int)","Method","No Comment","@Override
public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException {
    // Let's implement this as ""unsupported"" to make it easier to add new parser impls
    _reportUnsupportedOperation();
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeBinary(Base64Variant,InputStream,int).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeBinary(Base64Variant,InputStream,int).data","Parameter_2","Belong to com.fasterxml.jackson.core.base.GeneratorBase.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeBinary(Base64Variant,InputStream,int).dataLength","Parameter_3","Belong to com.fasterxml.jackson.core.base.GeneratorBase.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeObject(Object)","Method","No Comment","@Override
public void writeObject(Object value) throws IOException {
    if (value == null) {
        // important: call method that does check value write:
        writeNull();
    } else {
        /* 02-Mar-2009, tatu: we are NOT to call _verifyValueWrite here,
             *   because that will be done when codec actually serializes
             *   contained POJO. If we did call it it would advance state
             *   causing exception later on
             */
        if (_objectCodec != null) {
            _objectCodec.writeValue(this, value);
            return;
        }
        _writeSimpleObject(value);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeObject(Object).value","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.writeObject(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeTree(TreeNode)","Method","No Comment","@Override
public void writeTree(TreeNode rootNode) throws IOException {
    // As with 'writeObject()', we are not check if write would work
    if (rootNode == null) {
        writeNull();
    } else {
        if (_objectCodec == null) {
            throw new IllegalStateException(""No ObjectCodec defined"");
        }
        _objectCodec.writeValue(this, rootNode);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.writeTree(TreeNode).rootNode","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.writeTree(TreeNode)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.flush()","Abstract Method","No Comment","@Override
public abstract void flush() throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.close()","Method","No Comment","@Override
public void close() throws IOException {
    if (!_closed) {
        if (_ioContext != null) {
            _ioContext.close();
        }
        _closed = true;
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.isClosed()","Method","No Comment","@Override
public boolean isClosed() {
    return _closed;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._releaseBuffers()","Abstract Method","* Method called to release any buffers generator may be holding,
     * once generator is being closed.","protected abstract void _releaseBuffers();","void","protected , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._verifyValueWrite(String)","Abstract Method","* Method called before trying to write a value (scalar or structured),
     * to verify that this is legal in current output state, as well as to
     * output separators if and as necessary.
     *
     * @param typeMsg Additional message used for generating exception message
     *   if value output is NOT legal in current generator output state.
     *
     * @throws IOException if there is either an underlying I/O problem or encoding
     *    issue at format layer","protected abstract void _verifyValueWrite(String typeMsg) throws IOException;","void","protected , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._verifyValueWrite(String).typeMsg","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase._verifyValueWrite(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._constructDefaultPrettyPrinter()","Method","* Overridable factory method called to instantiate an appropriate {@link PrettyPrinter}
     * for case of ""just use the default one"", when {@link #useDefaultPrettyPrinter()} is called.
     *
     * @return Instance of ""default"" pretty printer to use
     *
     * @since 2.6","protected PrettyPrinter _constructDefaultPrettyPrinter() {
    return new DefaultPrettyPrinter();
}","PrettyPrinter","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._asString(BigDecimal)","Method","* Helper method used to serialize a {@link java.math.BigDecimal} as a String,
     * for serialization, taking into account configuration settings
     *
     * @param value BigDecimal value to convert to String
     *
     * @return String representation of {@code value}
     *
     * @throws IOException if there is a problem serializing value as String
     *
     * @since 2.7.7","protected String _asString(BigDecimal value) throws IOException {
    if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) {
        // 24-Aug-2016, tatu: [core#315] prevent possible DoS vector
        int scale = value.scale();
        if ((scale < -MAX_BIG_DECIMAL_SCALE) || (scale > MAX_BIG_DECIMAL_SCALE)) {
            _reportError(String.format(""Attempt to write plain `java.math.BigDecimal` (see JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN) with illegal scale (%d): needs to be between [-%d, %d]"", scale, MAX_BIG_DECIMAL_SCALE, MAX_BIG_DECIMAL_SCALE));
        }
        return value.toPlainString();
    }
    return value.toString();
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._asString(BigDecimal).value","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase._asString(BigDecimal)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._decodeSurrogate(int,int)","Method","@since 2.5","protected final int _decodeSurrogate(int surr1, int surr2) throws IOException {
    // First is known to be valid, but how about the other?
    if (surr2 < SURR2_FIRST || surr2 > SURR2_LAST) {
        String msg = String.format(""Incomplete surrogate pair: first char 0x%04X, second 0x%04X"", surr1, surr2);
        _reportError(msg);
    }
    return (surr1 << 10) + surr2 + UTF8Writer.SURROGATE_BASE;
}","int","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._decodeSurrogate(int,int).surr1","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase._decodeSurrogate(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._decodeSurrogate(int,int).surr2","Parameter_2","Belong to com.fasterxml.jackson.core.base.GeneratorBase._decodeSurrogate(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForByteArray(byte[],int,int)","Method","@since 2.14","protected void _checkRangeBoundsForByteArray(byte[] data, int offset, int len) throws IOException {
    if (data == null) {
        _reportError(""Invalid `byte[]` argument: `null`"");
    }
    final int dataLen = data.length;
    final int end = offset + len;
    // Note: we are checking that:
    //
    // !(offset < 0)
    // !(len < 0)
    // !((offset + len) < 0) // int overflow!
    // !((offset + len) > dataLen) == !((datalen - (offset+len)) < 0)
    // All can be optimized by OR'ing and checking for negative:
    int anyNegs = offset | len | end | (dataLen - end);
    if (anyNegs < 0) {
        _reportError(String.format(""Invalid 'offset' (%d) and/or 'len' (%d) arguments for `byte[]` of length %d"", offset, len, dataLen));
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForByteArray(byte[],int,int).data","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForByteArray(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForByteArray(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForByteArray(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForByteArray(byte[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForByteArray(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForCharArray(char[],int,int)","Method","@since 2.14","protected void _checkRangeBoundsForCharArray(char[] data, int offset, int len) throws IOException {
    if (data == null) {
        _reportError(""Invalid `char[]` argument: `null`"");
    }
    final int dataLen = data.length;
    final int end = offset + len;
    // Note: we are checking same things as with other bounds-checks
    int anyNegs = offset | len | end | (dataLen - end);
    if (anyNegs < 0) {
        _reportError(String.format(""Invalid 'offset' (%d) and/or 'len' (%d) arguments for `char[]` of length %d"", offset, len, dataLen));
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForCharArray(char[],int,int).data","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForCharArray(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForCharArray(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForCharArray(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForCharArray(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForCharArray(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForString(String,int,int)","Method","@since 2.14","protected void _checkRangeBoundsForString(String data, int offset, int len) throws IOException {
    if (data == null) {
        _reportError(""Invalid `String` argument: `null`"");
    }
    final int dataLen = data.length();
    final int end = offset + len;
    // Note: we are checking same things as with other bounds-checks
    int anyNegs = offset | len | end | (dataLen - end);
    if (anyNegs < 0) {
        _reportError(String.format(""Invalid 'offset' (%d) and/or 'len' (%d) arguments for `String` of length %d"", offset, len, dataLen));
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForString(String,int,int).data","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForString(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForString(String,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForString(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForString(String,int,int).len","Parameter_3","Belong to com.fasterxml.jackson.core.base.GeneratorBase._checkRangeBoundsForString(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec)","Constructor","No Comment","// since 2.16
@Deprecated
protected GeneratorBase(int features, ObjectCodec codec) {
    this(features, codec, (IOContext) null);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec).features","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec).codec","Parameter_2","Belong to com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,IOContext)","Constructor","@since 2.16","@SuppressWarnings(""deprecation"")
protected GeneratorBase(int features, ObjectCodec codec, IOContext ioContext) {
    super();
    _features = features;
    _objectCodec = codec;
    _ioContext = ioContext;
    DupDetector dups = Feature.STRICT_DUPLICATE_DETECTION.enabledIn(features) ? DupDetector.rootDetector(this) : null;
    _writeContext = JsonWriteContext.createRootContext(dups);
    _cfgNumbersAsStrings = Feature.WRITE_NUMBERS_AS_STRINGS.enabledIn(features);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,IOContext).features","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,IOContext).codec","Parameter_2","Belong to com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,IOContext).ioContext","Parameter_3","Belong to com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,JsonWriteContext)","Constructor","@since 2.5","// since 2.16
@Deprecated
protected GeneratorBase(int features, ObjectCodec codec, JsonWriteContext ctxt) {
    this(features, codec, null, ctxt);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,JsonWriteContext).features","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,JsonWriteContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,JsonWriteContext).codec","Parameter_2","Belong to com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,JsonWriteContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,JsonWriteContext).ctxt","Parameter_3","Belong to com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,JsonWriteContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,IOContext,JsonWriteContext)","Constructor","@since 2.16","@SuppressWarnings(""deprecation"")
protected GeneratorBase(int features, ObjectCodec codec, IOContext ioContext, JsonWriteContext jsonWriteContext) {
    super();
    _features = features;
    _objectCodec = codec;
    _ioContext = ioContext;
    _writeContext = jsonWriteContext;
    _cfgNumbersAsStrings = Feature.WRITE_NUMBERS_AS_STRINGS.enabledIn(features);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,IOContext,JsonWriteContext).features","Parameter_1","Belong to com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,IOContext,JsonWriteContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,IOContext,JsonWriteContext).codec","Parameter_2","Belong to com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,IOContext,JsonWriteContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,IOContext,JsonWriteContext).ioContext","Parameter_3","Belong to com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,IOContext,JsonWriteContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,IOContext,JsonWriteContext).jsonWriteContext","Parameter_4","Belong to com.fasterxml.jackson.core.base.GeneratorBase.<init>(int,ObjectCodec,IOContext,JsonWriteContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase","Abstract Class","* Intermediate base class used by all Jackson {@link JsonParser}
 * implementations, but does not add any additional fields that depend
 * on particular method of obtaining input.
 *<p>
 * Note that 'minimal' here mostly refers to minimal number of fields
 * (size) and functionality that is specific to certain types
 * of parser implementations; but not necessarily to number of methods.","Abstract Class do not obtain Source Code","No return type","public , abstract ","com.fasterxml.jackson.core.JsonParser",""
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_TAB","Field","Control chars:","protected final static int INT_TAB = '\t';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_LF","Field","No Comment","protected final static int INT_LF = '\n';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_CR","Field","No Comment","protected final static int INT_CR = '\r';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE","Field","No Comment","protected final static int INT_SPACE = 0x0020;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_LBRACKET","Field","Markup","protected final static int INT_LBRACKET = '[';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_RBRACKET","Field","No Comment","protected final static int INT_RBRACKET = ']';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_LCURLY","Field","No Comment","protected final static int INT_LCURLY = '{';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_RCURLY","Field","No Comment","protected final static int INT_RCURLY = '}';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE","Field","No Comment","protected final static int INT_QUOTE = '""';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_APOS","Field","No Comment","protected final static int INT_APOS = '\'';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_BACKSLASH","Field","No Comment","protected final static int INT_BACKSLASH = '\\';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SLASH","Field","No Comment","protected final static int INT_SLASH = '/';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_ASTERISK","Field","No Comment","protected final static int INT_ASTERISK = '*';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_COLON","Field","No Comment","protected final static int INT_COLON = ':';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_COMMA","Field","No Comment","protected final static int INT_COMMA = ',';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_HASH","Field","No Comment","protected final static int INT_HASH = '#';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_0","Field","Number chars","protected final static int INT_0 = '0';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_9","Field","No Comment","protected final static int INT_9 = '9';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_MINUS","Field","No Comment","protected final static int INT_MINUS = '-';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_PLUS","Field","No Comment","protected final static int INT_PLUS = '+';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_PERIOD","Field","No Comment","protected final static int INT_PERIOD = '.';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_e","Field","No Comment","protected final static int INT_e = 'e';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.INT_E","Field","No Comment","protected final static int INT_E = 'E';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.CHAR_NULL","Field","No Comment","protected final static char CHAR_NULL = '\0';","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.NO_BYTES","Field","* @since 2.9","protected final static byte[] NO_BYTES = new byte[0];","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.NO_INTS","Field","* @since 2.9","protected final static int[] NO_INTS = new int[0];","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.NR_UNKNOWN","Field","No Comment","protected final static int NR_UNKNOWN = 0;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.NR_INT","Field","No Comment","protected final static int NR_INT = 0x0001;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.NR_LONG","Field","No Comment","protected final static int NR_LONG = 0x0002;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.NR_BIGINT","Field","No Comment","protected final static int NR_BIGINT = 0x0004;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.NR_DOUBLE","Field","No Comment","protected final static int NR_DOUBLE = 0x008;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.NR_BIGDECIMAL","Field","No Comment","protected final static int NR_BIGDECIMAL = 0x0010;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.NR_FLOAT","Field","* NOTE! Not used by JSON implementation but used by many of binary codecs
     *
     * @since 2.9","protected final static int NR_FLOAT = 0x020;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.BI_MIN_INT","Field","No Comment","protected final static BigInteger BI_MIN_INT = BigInteger.valueOf(Integer.MIN_VALUE);","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.BI_MAX_INT","Field","No Comment","protected final static BigInteger BI_MAX_INT = BigInteger.valueOf(Integer.MAX_VALUE);","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.BI_MIN_LONG","Field","No Comment","protected final static BigInteger BI_MIN_LONG = BigInteger.valueOf(Long.MIN_VALUE);","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.BI_MAX_LONG","Field","No Comment","protected final static BigInteger BI_MAX_LONG = BigInteger.valueOf(Long.MAX_VALUE);","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.BD_MIN_LONG","Field","No Comment","protected final static BigDecimal BD_MIN_LONG = new BigDecimal(BI_MIN_LONG);","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.BD_MAX_LONG","Field","No Comment","protected final static BigDecimal BD_MAX_LONG = new BigDecimal(BI_MAX_LONG);","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.BD_MIN_INT","Field","No Comment","protected final static BigDecimal BD_MIN_INT = new BigDecimal(BI_MIN_INT);","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.BD_MAX_INT","Field","No Comment","protected final static BigDecimal BD_MAX_INT = new BigDecimal(BI_MAX_INT);","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.MIN_INT_L","Field","No Comment","protected final static long MIN_INT_L = Integer.MIN_VALUE;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.MAX_INT_L","Field","No Comment","protected final static long MAX_INT_L = Integer.MAX_VALUE;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.MIN_LONG_D","Field","No Comment","protected final static double MIN_LONG_D = Long.MIN_VALUE;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.MAX_LONG_D","Field","No Comment","protected final static double MAX_LONG_D = Long.MAX_VALUE;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.MIN_INT_D","Field","No Comment","protected final static double MIN_INT_D = Integer.MIN_VALUE;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.MAX_INT_D","Field","No Comment","protected final static double MAX_INT_D = Integer.MAX_VALUE;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.MAX_ERROR_TOKEN_LENGTH","Field","* Maximum number of characters to include in token reported
     * as part of error messages.
     *
     * @since 2.9
     * @deprecated Since 2.16. {@link ErrorReportConfiguration#getMaxErrorTokenLength()} will be used instead.","@Deprecated
protected final static int MAX_ERROR_TOKEN_LENGTH = 256;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._streamReadConstraints","Field","* @since 2.18 (was higher up in {@code ParserBase} before)","protected final StreamReadConstraints _streamReadConstraints;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._currToken","Field","* Last token retrieved via {@link #nextToken}, if any.
     * Null before the first call to <code>nextToken()</code>,
     * as well as if token has been explicitly cleared","protected JsonToken _currToken;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._tokenCount","Field","* Current count of tokens, if tracked (see {@link #_trackMaxTokenCount})
     *
     * @since 2.18","protected long _tokenCount;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._trackMaxTokenCount","Field","* Whether or not to track the token count due a {@link StreamReadConstraints} maxTokenCount > 0.
     *
     * @since 2.18","protected final boolean _trackMaxTokenCount;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._lastClearedToken","Field","* Last cleared token, if any: that is, value that was in
     * effect when {@link #clearCurrentToken} was called.","protected JsonToken _lastClearedToken;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.streamReadConstraints()","Method","No Comment","// @since 2.18 (demoted from ParserBase)
@Override
public StreamReadConstraints streamReadConstraints() {
    return _streamReadConstraints;
}","StreamReadConstraints","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.nextToken()","Abstract Method","No Comment","@Override
public abstract JsonToken nextToken() throws IOException;","JsonToken","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.currentToken()","Method","No Comment","@Override
public JsonToken currentToken() {
    return _currToken;
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.currentTokenId()","Method","No Comment","@Override
public int currentTokenId() {
    final JsonToken t = _currToken;
    return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentToken()","Method","No Comment","@Override
public JsonToken getCurrentToken() {
    return _currToken;
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentTokenId()","Method","No Comment","@Deprecated
@Override
public int getCurrentTokenId() {
    final JsonToken t = _currToken;
    return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.hasCurrentToken()","Method","No Comment","@Override
public boolean hasCurrentToken() {
    return _currToken != null;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.hasTokenId(int)","Method","No Comment","@Override
public boolean hasTokenId(int id) {
    final JsonToken t = _currToken;
    if (t == null) {
        return (JsonTokenId.ID_NO_TOKEN == id);
    }
    return t.id() == id;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.hasTokenId(int).id","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.hasTokenId(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.hasToken(JsonToken)","Method","No Comment","@Override
public boolean hasToken(JsonToken t) {
    return (_currToken == t);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.hasToken(JsonToken).t","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.hasToken(JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartArrayToken()","Method","No Comment","@Override
public boolean isExpectedStartArrayToken() {
    return _currToken == JsonToken.START_ARRAY;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartObjectToken()","Method","No Comment","@Override
public boolean isExpectedStartObjectToken() {
    return _currToken == JsonToken.START_OBJECT;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedNumberIntToken()","Method","No Comment","@Override
public boolean isExpectedNumberIntToken() {
    return _currToken == JsonToken.VALUE_NUMBER_INT;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.nextValue()","Method","No Comment","@Override
public JsonToken nextValue() throws IOException {
    // Implementation should be as trivial as follows; only needs to change if
    // we are to skip other tokens (for example, if comments were exposed as tokens)
    JsonToken t = nextToken();
    if (t == JsonToken.FIELD_NAME) {
        t = nextToken();
    }
    return t;
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.skipChildren()","Method","No Comment","@Override
public JsonParser skipChildren() throws IOException {
    if (_currToken != JsonToken.START_OBJECT && _currToken != JsonToken.START_ARRAY) {
        return this;
    }
    int open = 1;
    // Since proper matching of start/end markers is handled
    // by nextToken(), we'll just count nesting levels here
    while (true) {
        JsonToken t = nextToken();
        if (t == null) {
            _handleEOF();
            /* given constraints, above should never return;
                 * however, FindBugs doesn't know about it and
                 * complains... so let's add dummy break here
                 */
            return this;
        }
        if (t.isStructStart()) {
            ++open;
        } else if (t.isStructEnd()) {
            if (--open == 0) {
                return this;
            }
            // 23-May-2018, tatu: [core#463] Need to consider non-blocking case...
        } else if (t == JsonToken.NOT_AVAILABLE) {
            // Nothing much we can do except to either return `null` (which seems wrong),
            // or, what we actually do, signal error
            _reportError(""Not enough content available for `skipChildren()`: non-blocking parser? (%s)"", getClass().getName());
        }
    }
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._handleEOF()","Abstract Method","* Method sub-classes need to implement for verifying that end-of-content
     * is acceptable at current input position.
     *
     * @throws JsonParseException If end-of-content is not acceptable (for example,
     *   missing end-object or end-array tokens)","protected abstract void _handleEOF() throws JsonParseException;","void","protected , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentName()","Abstract Method","No Comment","// since 2.17 -- still need to implement
@Deprecated
@Override
public abstract String getCurrentName() throws IOException;","String","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.close()","Abstract Method","No Comment","@Override
public abstract void close() throws IOException;","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.isClosed()","Abstract Method","No Comment","@Override
public abstract boolean isClosed();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getParsingContext()","Abstract Method","No Comment","@Override
public abstract JsonStreamContext getParsingContext();","JsonStreamContext","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.currentTokenCount()","Method","No Comment","// since 2.18
@Override
public long currentTokenCount() {
    return _tokenCount;
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.clearCurrentToken()","Method","No Comment","@Override
public void clearCurrentToken() {
    if (_currToken != null) {
        _lastClearedToken = _currToken;
        _currToken = null;
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getLastClearedToken()","Method","No Comment","@Override
public JsonToken getLastClearedToken() {
    return _lastClearedToken;
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.overrideCurrentName(String)","Abstract Method","No Comment","@Override
public abstract void overrideCurrentName(String name);","void","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.overrideCurrentName(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.overrideCurrentName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getText()","Abstract Method","No Comment","@Override
public abstract String getText() throws IOException;","String","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getTextCharacters()","Abstract Method","No Comment","@Override
public abstract char[] getTextCharacters() throws IOException;","char[]","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.hasTextCharacters()","Abstract Method","No Comment","@Override
public abstract boolean hasTextCharacters();","boolean","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getTextLength()","Abstract Method","No Comment","@Override
public abstract int getTextLength() throws IOException;","int","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getTextOffset()","Abstract Method","No Comment","@Override
public abstract int getTextOffset() throws IOException;","int","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getBinaryValue(Base64Variant)","Abstract Method","No Comment","@Override
public abstract byte[] getBinaryValue(Base64Variant b64variant) throws IOException;","byte[]","public , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getBinaryValue(Base64Variant).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.getBinaryValue(Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsBoolean(boolean)","Method","No Comment","@Override
public boolean getValueAsBoolean(boolean defaultValue) throws IOException {
    JsonToken t = _currToken;
    if (t != null) {
        switch(t.id()) {
            case ID_STRING:
                String str = getText().trim();
                if (""true"".equals(str)) {
                    return true;
                }
                if (""false"".equals(str)) {
                    return false;
                }
                if (_hasTextualNull(str)) {
                    return false;
                }
                break;
            case ID_NUMBER_INT:
                return getIntValue() != 0;
            case ID_TRUE:
                return true;
            case ID_FALSE:
            case ID_NULL:
                return false;
            case ID_EMBEDDED_OBJECT:
                Object value = getEmbeddedObject();
                if (value instanceof Boolean) {
                    return (Boolean) value;
                }
                break;
            default:
        }
    }
    return defaultValue;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsBoolean(boolean).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsBoolean(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt()","Method","No Comment","@Override
public int getValueAsInt() throws IOException {
    JsonToken t = _currToken;
    if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT)) {
        return getIntValue();
    }
    return getValueAsInt(0);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt(int)","Method","No Comment","@Override
public int getValueAsInt(int defaultValue) throws IOException {
    JsonToken t = _currToken;
    if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT)) {
        return getIntValue();
    }
    if (t != null) {
        switch(t.id()) {
            case ID_STRING:
                final String str = getText();
                if (_hasTextualNull(str)) {
                    return 0;
                }
                return NumberInput.parseAsInt(str, defaultValue);
            case ID_TRUE:
                return 1;
            case ID_FALSE:
                return 0;
            case ID_NULL:
                return 0;
            case ID_EMBEDDED_OBJECT:
                Object value = getEmbeddedObject();
                if (value instanceof Number) {
                    return ((Number) value).intValue();
                }
        }
    }
    return defaultValue;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt(int).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong()","Method","No Comment","@Override
public long getValueAsLong() throws IOException {
    JsonToken t = _currToken;
    if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT)) {
        return getLongValue();
    }
    return getValueAsLong(0L);
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong(long)","Method","No Comment","@Override
public long getValueAsLong(long defaultValue) throws IOException {
    JsonToken t = _currToken;
    if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT)) {
        return getLongValue();
    }
    if (t != null) {
        switch(t.id()) {
            case ID_STRING:
                final String str = getText();
                if (_hasTextualNull(str)) {
                    return 0L;
                }
                return NumberInput.parseAsLong(str, defaultValue);
            case ID_TRUE:
                return 1L;
            case ID_FALSE:
            case ID_NULL:
                return 0L;
            case ID_EMBEDDED_OBJECT:
                Object value = getEmbeddedObject();
                if (value instanceof Number) {
                    return ((Number) value).longValue();
                }
        }
    }
    return defaultValue;
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong(long).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsDouble(double)","Method","No Comment","@Override
public double getValueAsDouble(double defaultValue) throws IOException {
    JsonToken t = _currToken;
    if (t != null) {
        switch(t.id()) {
            case ID_STRING:
                String str = getText();
                if (_hasTextualNull(str)) {
                    return 0L;
                }
                _streamReadConstraints.validateFPLength(str.length());
                return NumberInput.parseAsDouble(str, defaultValue);
            case ID_NUMBER_INT:
            case ID_NUMBER_FLOAT:
                return getDoubleValue();
            case ID_TRUE:
                return 1.0;
            case ID_FALSE:
            case ID_NULL:
                return 0.0;
            case ID_EMBEDDED_OBJECT:
                Object value = this.getEmbeddedObject();
                if (value instanceof Number) {
                    return ((Number) value).doubleValue();
                }
        }
    }
    return defaultValue;
}","double","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsDouble(double).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsDouble(double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString()","Method","No Comment","@Override
public String getValueAsString() throws IOException {
    // sub-classes tend to override so...
    return getValueAsString(null);
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString(String)","Method","No Comment","@Override
public String getValueAsString(String defaultValue) throws IOException {
    if (_currToken == JsonToken.VALUE_STRING) {
        return getText();
    }
    if (_currToken == JsonToken.FIELD_NAME) {
        return currentName();
    }
    if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {
        return defaultValue;
    }
    return getText();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString(String).defaultValue","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64(String,ByteArrayBuilder,Base64Variant)","Method","* Helper method that can be used for base64 decoding in cases where
     * encoded content has already been read as a String.
     *
     * @param str String to decode
     * @param builder Builder used to buffer binary content decoded
     * @param b64variant Base64 variant expected in content
     *
     * @throws IOException for low-level read issues, or
     *   {@link JsonParseException} for decoding problems","protected void _decodeBase64(String str, ByteArrayBuilder builder, Base64Variant b64variant) throws IOException {
    try {
        b64variant.decode(str, builder);
    } catch (IllegalArgumentException e) {
        _reportError(e.getMessage());
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64(String,ByteArrayBuilder,Base64Variant).str","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64(String,ByteArrayBuilder,Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64(String,ByteArrayBuilder,Base64Variant).builder","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64(String,ByteArrayBuilder,Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64(String,ByteArrayBuilder,Base64Variant).b64variant","Parameter_3","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64(String,ByteArrayBuilder,Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._hasTextualNull(String)","Method","* Helper method used to determine whether we are currently pointing to
     * a String value of ""null"" (NOT a null token); and, if so, that parser
     * is to recognize and return it similar to if it was real null token.
     *<p>
     * Default implementation accepts exact string {@code ""null""} and nothing else
     *
     * @param value String value to check
     *
     * @return True if given value contains ""null equivalent"" String value (for
     *   content this parser handles).
     *
     * @since 2.3","protected boolean _hasTextualNull(String value) {
    return ""null"".equals(value);
}","boolean","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._hasTextualNull(String).value","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._hasTextualNull(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(String,JsonToken,Class)","Method","@since 2.10","protected void _reportInputCoercion(String msg, JsonToken inputType, Class<?> targetType) throws InputCoercionException {
    throw new InputCoercionException(this, msg, inputType, targetType);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(String,JsonToken,Class).msg","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(String,JsonToken,Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(String,JsonToken,Class).inputType","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(String,JsonToken,Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(String,JsonToken,Class).targetType","Parameter_3","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(String,JsonToken,Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF()","Method","No Comment","protected void _reportInvalidEOF() throws JsonParseException {
    _reportInvalidEOF("" in "" + _currToken, _currToken);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue(JsonToken)","Method","@since 2.8","protected void _reportInvalidEOFInValue(JsonToken type) throws JsonParseException {
    String msg;
    if (type == JsonToken.VALUE_STRING) {
        msg = "" in a String value"";
    } else if ((type == JsonToken.VALUE_NUMBER_INT) || (type == JsonToken.VALUE_NUMBER_FLOAT)) {
        msg = "" in a Number value"";
    } else {
        msg = "" in a value"";
    }
    _reportInvalidEOF(msg, type);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue(JsonToken).type","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue(JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(String,JsonToken)","Method","@since 2.8","protected void _reportInvalidEOF(String msg, JsonToken currToken) throws JsonParseException {
    throw new JsonEOFException(this, currToken, ""Unexpected end-of-input"" + msg);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(String,JsonToken).msg","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(String,JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(String,JsonToken).currToken","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(String,JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.reportInvalidNumber(String)","Method","* Method called to throw an exception for input token that looks like a number
     * based on first character(s), but is not valid according to rules of format.
     * In case of JSON this also includes invalid forms like positive sign and
     * leading zeroes.
     *
     * @param msg Base exception message to use
     *
     * @throws JsonParseException Exception that describes problem with number validity","protected void reportInvalidNumber(String msg) throws JsonParseException {
    throw _constructReadException(""Invalid numeric value: "" + msg);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.reportInvalidNumber(String).msg","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.reportInvalidNumber(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportMissingRootWS(int)","Method","No Comment","protected void _reportMissingRootWS(int ch) throws JsonParseException {
    _reportUnexpectedChar(ch, ""Expected space separating root-level values"");
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportMissingRootWS(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._reportMissingRootWS(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt()","Method","* Method called to throw an exception for integral (not floating point) input
     * token with value outside of Java signed 32-bit range when requested as {@code int}.
     * Result will be {@link InputCoercionException} being thrown.
     *
     * @throws JsonParseException Exception that describes problem with number range validity","protected void reportOverflowInt() throws IOException {
    reportOverflowInt(getText());
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(String)","Method","@since 2.10","protected void reportOverflowInt(String numDesc) throws IOException {
    reportOverflowInt(numDesc, currentToken());
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(String).numDesc","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(String,JsonToken)","Method","@since 2.10","protected void reportOverflowInt(String numDesc, JsonToken inputType) throws IOException {
    _reportInputCoercion(String.format(""Numeric value (%s) out of range of int (%d - %s)"", _longIntegerDesc(numDesc), Integer.MIN_VALUE, Integer.MAX_VALUE), inputType, Integer.TYPE);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(String,JsonToken).numDesc","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(String,JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(String,JsonToken).inputType","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(String,JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong()","Method","* Method called to throw an exception for integral (not floating point) input
     * token with value outside of Java signed 64-bit range when requested as {@code long}.
     * Result will be {@link InputCoercionException} being thrown.
     *
     * @throws JsonParseException Exception that describes problem with number range validity","protected void reportOverflowLong() throws IOException {
    reportOverflowLong(getText());
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(String)","Method","@since 2.10","protected void reportOverflowLong(String numDesc) throws IOException {
    reportOverflowLong(numDesc, currentToken());
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(String).numDesc","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(String,JsonToken)","Method","@since 2.10","protected void reportOverflowLong(String numDesc, JsonToken inputType) throws IOException {
    _reportInputCoercion(String.format(""Numeric value (%s) out of range of long (%d - %s)"", _longIntegerDesc(numDesc), Long.MIN_VALUE, Long.MAX_VALUE), inputType, Long.TYPE);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(String,JsonToken).numDesc","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(String,JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(String,JsonToken).inputType","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(String,JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._longIntegerDesc(String)","Method","@since 2.9.8","protected String _longIntegerDesc(String rawNum) {
    int rawLen = rawNum.length();
    if (rawLen < 1000) {
        return rawNum;
    }
    if (rawNum.startsWith(""-"")) {
        rawLen -= 1;
    }
    return String.format(""[Integer with %d digits]"", rawLen);
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._longIntegerDesc(String).rawNum","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._longIntegerDesc(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._longNumberDesc(String)","Method","@since 2.9.8","protected String _longNumberDesc(String rawNum) {
    int rawLen = rawNum.length();
    if (rawLen < 1000) {
        return rawNum;
    }
    if (rawNum.startsWith(""-"")) {
        rawLen -= 1;
    }
    return String.format(""[number with %d characters]"", rawLen);
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._longNumberDesc(String).rawNum","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._longNumberDesc(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar(int,String)","Method","No Comment","protected void _reportUnexpectedChar(int ch, String comment) throws JsonParseException {
    if (ch < 0) {
        // sanity check
        _reportInvalidEOF();
    }
    String msg = String.format(""Unexpected character (%s)"", _getCharDesc(ch));
    if (comment != null) {
        msg += "": "" + comment;
    }
    throw _constructReadException(msg, _currentLocationMinusOne());
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar(int,String).ch","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar(int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar(int,String).comment","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar(int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedNumberChar(int,String)","Method","* @since 2.14
     *
     * @param ch Character that was unexpected
     * @param comment Additional failure comment to add, if any
     * @param <T> Nominal type for bogus return value
     *
     * @return Nothing, just declared to let caller use {@code return} when
     *   calling this method, to keep compiler happy.
     *
     * @throws JsonParseException constructed with {@link #_constructReadException(String, JsonLocation)}","protected <T> T _reportUnexpectedNumberChar(int ch, String comment) throws JsonParseException {
    String msg = String.format(""Unexpected character (%s) in numeric value"", _getCharDesc(ch));
    if (comment != null) {
        msg += "": "" + comment;
    }
    throw _constructReadException(msg, _currentLocationMinusOne());
}","Object","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedNumberChar(int,String).ch","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedNumberChar(int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedNumberChar(int,String).comment","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedNumberChar(int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.reportUnexpectedNumberChar(int,String)","Method","No Comment","// @since 2.14
@Deprecated
protected void reportUnexpectedNumberChar(int ch, String comment) throws JsonParseException {
    _reportUnexpectedNumberChar(ch, comment);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.reportUnexpectedNumberChar(int,String).ch","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.reportUnexpectedNumberChar(int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.reportUnexpectedNumberChar(int,String).comment","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.reportUnexpectedNumberChar(int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._throwInvalidSpace(int)","Method","No Comment","protected void _throwInvalidSpace(int i) throws JsonParseException {
    char c = (char) i;
    String msg = ""Illegal character ("" + _getCharDesc(c) + ""): only regular white space (\\r, \\n, \\t) is allowed between tokens"";
    throw _constructReadException(msg);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._throwInvalidSpace(int).i","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._throwInvalidSpace(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._constructError(String,Throwable)","Method","No Comment","protected final JsonParseException _constructError(String msg, Throwable t) {
    return _constructReadException(msg, t);
}","JsonParseException","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._constructError(String,Throwable).msg","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._constructError(String,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._constructError(String,Throwable).t","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._constructError(String,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._currentLocationMinusOne()","Method","* Factory method used to provide location for cases where we must read
     * and consume a single ""wrong"" character (to possibly allow error recovery),
     * but need to report accurate location for that character: if so, the
     * current location is past location we want, and location we want will be
     * ""one location earlier"".
     *<p>
     * Default implementation simply returns {@link #currentLocation()}
     *
     * @since 2.17
     *
     * @return Same as {@link #currentLocation()} except offset by -1","protected JsonLocation _currentLocationMinusOne() {
    return currentLocation();
}","JsonLocation","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc(int)","Method","No Comment","protected final static String _getCharDesc(int ch) {
    char c = (char) ch;
    if (Character.isISOControl(c)) {
        return ""(CTRL-CHAR, code "" + ch + "")"";
    }
    if (ch > 255) {
        return ""'"" + c + ""' (code "" + ch + "" / 0x"" + Integer.toHexString(ch) + "")"";
    }
    return ""'"" + c + ""' (code "" + ch + "")"";
}","String","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(String)","Method","No Comment","protected final void _reportError(String msg) throws JsonParseException {
    throw _constructReadException(msg);
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(String).msg","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(String,Object)","Method","@since 2.9","protected final void _reportError(String msg, Object arg) throws JsonParseException {
    throw _constructReadException(msg, arg);
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(String,Object).msg","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(String,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(String,Object).arg","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(String,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(String,Object,Object)","Method","@since 2.9","protected final void _reportError(String msg, Object arg1, Object arg2) throws JsonParseException {
    throw _constructReadException(msg, arg1, arg2);
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(String,Object,Object).msg","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(String,Object,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(String,Object,Object).arg1","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(String,Object,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(String,Object,Object).arg2","Parameter_3","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(String,Object,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._throwInternal()","Method","No Comment","protected final void _throwInternal() {
    VersionUtil.throwInternal();
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._throwInternalReturnAny()","Method","@since 2.17","protected final <T> T _throwInternalReturnAny() {
    return VersionUtil.throwInternalReturnAny();
}","Object","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._wrapError(String,Throwable)","Method","No Comment","protected final void _wrapError(String msg, Throwable t) throws JsonParseException {
    throw _constructReadException(msg, t);
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._wrapError(String,Throwable).msg","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._wrapError(String,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._wrapError(String,Throwable).t","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._wrapError(String,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._updateToken(JsonToken)","Method","for performance reasons, this method assumes that the input token is non-null","protected final JsonToken _updateToken(final JsonToken token) throws StreamConstraintsException {
    _currToken = token;
    if (_trackMaxTokenCount) {
        _streamReadConstraints.validateTokenCount(++_tokenCount);
    }
    return token;
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._updateToken(JsonToken).token","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._updateToken(JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._nullSafeUpdateToken(JsonToken)","Method","only updates the token count if input token is non-null","protected final JsonToken _nullSafeUpdateToken(final JsonToken token) throws StreamConstraintsException {
    _currToken = token;
    if (_trackMaxTokenCount && token != null) {
        _streamReadConstraints.validateTokenCount(++_tokenCount);
    }
    return token;
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._nullSafeUpdateToken(JsonToken).token","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._nullSafeUpdateToken(JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._updateTokenToNull()","Method","No Comment","protected final JsonToken _updateTokenToNull() {
    return (_currToken = null);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._updateTokenToNA()","Method","No Comment","protected final JsonToken _updateTokenToNA() {
    return (_currToken = JsonToken.NOT_AVAILABLE);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._asciiBytes(String)","Method","No Comment","// since 2.11
@Deprecated
protected static byte[] _asciiBytes(String str) {
    byte[] b = new byte[str.length()];
    for (int i = 0, len = str.length(); i < len; ++i) {
        b[i] = (byte) str.charAt(i);
    }
    return b;
}","byte[]","protected , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._asciiBytes(String).str","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._asciiBytes(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._ascii(byte[])","Method","No Comment","// since 2.11
@Deprecated
protected static String _ascii(byte[] b) {
    return new String(b, StandardCharsets.US_ASCII);
}","String","protected , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase._ascii(byte[]).b","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase._ascii(byte[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.<init>()","Constructor","No Comment","// since 2.18
@Deprecated
protected ParserMinimalBase() {
    super();
    _streamReadConstraints = StreamReadConstraints.defaults();
    _trackMaxTokenCount = _streamReadConstraints.hasMaxTokenCount();
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.<init>(int)","Constructor","No Comment","// since 2.18
@Deprecated
protected ParserMinimalBase(int features) {
    this(features, null);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.<init>(int).features","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.<init>(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.<init>(StreamReadConstraints)","Constructor","@since 2.18","protected ParserMinimalBase(StreamReadConstraints src) {
    super();
    _streamReadConstraints = (src == null) ? StreamReadConstraints.defaults() : src;
    _trackMaxTokenCount = _streamReadConstraints.hasMaxTokenCount();
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.<init>(StreamReadConstraints).src","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.<init>(StreamReadConstraints)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.<init>(int,StreamReadConstraints)","Constructor","@since 2.18","protected ParserMinimalBase(int features, StreamReadConstraints src) {
    super(features);
    _streamReadConstraints = (src == null) ? StreamReadConstraints.defaults() : src;
    _trackMaxTokenCount = _streamReadConstraints.hasMaxTokenCount();
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.<init>(int,StreamReadConstraints).features","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.<init>(int,StreamReadConstraints)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserMinimalBase.<init>(int,StreamReadConstraints).src","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserMinimalBase.<init>(int,StreamReadConstraints)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase","Abstract Class","* Intermediate base class used by all Jackson {@link JsonParser}
 * implementations. Contains most common things that are independent
 * of actual underlying input source.","Abstract Class do not obtain Source Code","No return type","public , abstract ","com.fasterxml.jackson.core.base.ParserMinimalBase",""
"com.fasterxml.jackson.core.base.ParserBase.JSON_READ_CAPABILITIES","Field","@since 2.12","protected final static JacksonFeatureSet<StreamReadCapability> JSON_READ_CAPABILITIES = DEFAULT_READ_CAPABILITIES;","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._ioContext","Field","* I/O context for this reader. It handles buffer allocation
     * for the reader.","protected final IOContext _ioContext;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._closed","Field","* Flag that indicates whether parser is closed or not. Gets
     * set when parser is either closed by explicit call
     * ({@link #close}) or when end-of-input is reached.","protected boolean _closed;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._inputPtr","Field","* Pointer to next available character in buffer","protected int _inputPtr;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._inputEnd","Field","* Index of character after last available one in the buffer.","protected int _inputEnd;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._currInputProcessed","Field","* Number of characters/bytes that were contained in previous blocks
     * (blocks that were already processed prior to the current buffer).","protected long _currInputProcessed;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._currInputRow","Field","* Current row location of current point in input buffer, starting
     * from 1, if available.","protected int _currInputRow = 1;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._currInputRowStart","Field","* Current index of the first character of the current row in input
     * buffer. Needed to calculate column position, if necessary; benefit
     * of not having column itself is that this only has to be updated
     * once per line.","protected int _currInputRowStart;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._tokenInputTotal","Field","* Total number of bytes/characters read before start of current token.
     * For big (gigabyte-sized) sizes are possible, needs to be long,
     * unlike pointers and sizes related to in-memory buffers.","protected long _tokenInputTotal;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._tokenInputRow","Field","* Input row on which current token starts, 1-based","protected int _tokenInputRow = 1;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._tokenInputCol","Field","* Column on input row that current token starts; 0-based (although
     * in the end it'll be converted to 1-based)","protected int _tokenInputCol;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._parsingContext","Field","* Information about parser context, context in which
     * the next token is to be parsed (root, array, object).","protected JsonReadContext _parsingContext;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._nextToken","Field","* Secondary token related to the next token after current one;
     * used if its type is known. This may be value token that
     * follows FIELD_NAME, for example.","protected JsonToken _nextToken;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._textBuffer","Field","* Buffer that contains contents of String values, including
     * field names if necessary (name split across boundary,
     * contains escape sequence, or access needed to char array)","protected final TextBuffer _textBuffer;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._nameCopyBuffer","Field","* Temporary buffer that is needed if field name is accessed
     * using {@link #getTextCharacters} method (instead of String
     * returning alternatives)","protected char[] _nameCopyBuffer;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._nameCopied","Field","* Flag set to indicate whether the field name is available
     * from the name copy buffer or not (in addition to its String
     * representation  being available via read context)","protected boolean _nameCopied;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._byteArrayBuilder","Field","* ByteArrayBuilder is needed if 'getBinaryValue' is called. If so,
     * we better reuse it for remainder of content.","protected ByteArrayBuilder _byteArrayBuilder;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._binaryValue","Field","* We will hold on to decoded binary data, for duration of
     * current event, so that multiple calls to
     * {@link #getBinaryValue} will not need to decode data more
     * than once.","protected byte[] _binaryValue;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._numTypesValid","Field","* Bitfield that indicates which numeric representations
     * have been calculated for the current type","protected int _numTypesValid = NR_UNKNOWN;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._numberInt","Field","No Comment","protected int _numberInt;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._numberLong","Field","No Comment","protected long _numberLong;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._numberFloat","Field","No Comment","protected float _numberFloat;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._numberDouble","Field","No Comment","protected double _numberDouble;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._numberBigInt","Field","No Comment","protected BigInteger _numberBigInt;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._numberBigDecimal","Field","No Comment","protected BigDecimal _numberBigDecimal;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._numberString","Field","* Textual number representation captured from input in cases lazy-parsing
     * is desired.
     *
     * @since 2.14","protected String _numberString;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._numberIsNaN","Field","* Marker for explicit ""Not a Number"" (NaN) values that may be read
     * by some formats: this includes positive and negative infinity,
     * as well as ""NaN"" result for some arithmetic operations.
     *<p>
     * In case of JSON, such values can only be handled with non-standard
     * processing: for some other formats they can be passed normally.
     *<p>
     * NOTE: this marker is NOT set in case of value overflow/underflow for
     * {@code double} or {@code float} values.
     *
     * @since 2.17","protected boolean _numberIsNaN;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._numberNegative","Field","* Flag that indicates whether numeric value has a negative
     * value. That is, whether its textual representation starts
     * with minus character.","protected boolean _numberNegative;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._intLength","Field","* Length of integer part of the number, in characters","protected int _intLength;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._fractLength","Field","* Length of the fractional part (not including decimal
     * point or exponent), in characters.
     * Not used for  pure integer values.","protected int _fractLength;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._expLength","Field","* Length of the exponent part of the number, if any, not
     * including 'e' marker or sign, just digits.
     * Not used for  pure integer values.","protected int _expLength;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.version()","Method","No Comment","@Override
public Version version() {
    return PackageVersion.VERSION;
}","Version","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.currentValue()","Method","No Comment","@Override
public Object currentValue() {
    return _parsingContext.getCurrentValue();
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.assignCurrentValue(Object)","Method","No Comment","@Override
public void assignCurrentValue(Object v) {
    _parsingContext.setCurrentValue(v);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.assignCurrentValue(Object).v","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase.assignCurrentValue(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.enable(Feature)","Method","No Comment","@Override
public JsonParser enable(Feature f) {
    _features |= f.getMask();
    if (f == Feature.STRICT_DUPLICATE_DETECTION) {
        // enabling dup detection?
        if (_parsingContext.getDupDetector() == null) {
            // but only if disabled currently
            _parsingContext = _parsingContext.withDupDetector(DupDetector.rootDetector(this));
        }
    }
    return this;
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.enable(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase.enable(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.disable(Feature)","Method","No Comment","@Override
public JsonParser disable(Feature f) {
    _features &= ~f.getMask();
    if (f == Feature.STRICT_DUPLICATE_DETECTION) {
        _parsingContext = _parsingContext.withDupDetector(null);
    }
    return this;
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.disable(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase.disable(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.setFeatureMask(int)","Method","No Comment","@Override
@Deprecated
public JsonParser setFeatureMask(int newMask) {
    int changes = (_features ^ newMask);
    if (changes != 0) {
        _features = newMask;
        _checkStdFeatureChanges(newMask, changes);
    }
    return this;
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.setFeatureMask(int).newMask","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase.setFeatureMask(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.overrideStdFeatures(int,int)","Method","No Comment","// since 2.7
@Override
public JsonParser overrideStdFeatures(int values, int mask) {
    int oldState = _features;
    int newState = (oldState & ~mask) | (values & mask);
    int changed = oldState ^ newState;
    if (changed != 0) {
        _features = newState;
        _checkStdFeatureChanges(newState, changed);
    }
    return this;
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.overrideStdFeatures(int,int).values","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase.overrideStdFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.overrideStdFeatures(int,int).mask","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserBase.overrideStdFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._checkStdFeatureChanges(int,int)","Method","* Helper method called to verify changes to standard features.
     *
     * @param newFeatureFlags Bitflag of standard features after they were changed
     * @param changedFeatures Bitflag of standard features for which setting
     *    did change
     *
     * @since 2.7","protected void _checkStdFeatureChanges(int newFeatureFlags, int changedFeatures) {
    int f = Feature.STRICT_DUPLICATE_DETECTION.getMask();
    if ((changedFeatures & f) != 0) {
        if ((newFeatureFlags & f) != 0) {
            if (_parsingContext.getDupDetector() == null) {
                _parsingContext = _parsingContext.withDupDetector(DupDetector.rootDetector(this));
            } else {
                // disabling
                _parsingContext = _parsingContext.withDupDetector(null);
            }
        }
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._checkStdFeatureChanges(int,int).newFeatureFlags","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase._checkStdFeatureChanges(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._checkStdFeatureChanges(int,int).changedFeatures","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserBase._checkStdFeatureChanges(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.getCurrentName()","Method","* Method that can be called to get the name associated with
     * the current event.","// since 2.17
@Deprecated
@Override
public String getCurrentName() throws IOException {
    // [JACKSON-395]: start markers require information from parent
    if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {
        JsonReadContext parent = _parsingContext.getParent();
        if (parent != null) {
            return parent.getCurrentName();
        }
    }
    return _parsingContext.getCurrentName();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.overrideCurrentName(String)","Method","No Comment","@Override
public void overrideCurrentName(String name) {
    // Simple, but need to look for START_OBJECT/ARRAY's ""off-by-one"" thing:
    JsonReadContext ctxt = _parsingContext;
    if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {
        ctxt = ctxt.getParent();
    }
    // 24-Sep-2013, tatu: Unfortunate, but since we did not expose exceptions,
    //   need to wrap this here
    try {
        ctxt.setCurrentName(name);
    } catch (IOException e) {
        throw new IllegalStateException(e);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.overrideCurrentName(String).name","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase.overrideCurrentName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.close()","Method","No Comment","@Override
public void close() throws IOException {
    if (!_closed) {
        // 19-Jan-2018, tatu: as per [core#440] need to ensure no more data assumed available
        _inputPtr = Math.max(_inputPtr, _inputEnd);
        _closed = true;
        try {
            _closeInput();
        } finally {
            // as per [JACKSON-324], do in finally block
            // Also, internal buffer(s) can now be released as well
            _releaseBuffers();
            _ioContext.close();
        }
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.isClosed()","Method","No Comment","@Override
public boolean isClosed() {
    return _closed;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.getParsingContext()","Method","No Comment","@Override
public JsonReadContext getParsingContext() {
    return _parsingContext;
}","JsonReadContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.getTokenLocation()","Method","* Method that return the <b>starting</b> location of the current
     * token; that is, position of the first character from input
     * that starts the current token.","@Override
// since 2.17
@Deprecated
public JsonLocation getTokenLocation() {
    return new JsonLocation(_contentReference(), // bytes, chars
    -1L, // bytes, chars
    getTokenCharacterOffset(), getTokenLineNr(), getTokenColumnNr());
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.getCurrentLocation()","Method","* Method that returns location of the last processed character;
     * usually for error reporting purposes","@Override
// since 2.17
@Deprecated
public JsonLocation getCurrentLocation() {
    // 1-based
    int col = _inputPtr - _currInputRowStart + 1;
    return new JsonLocation(_contentReference(), // bytes, chars
    -1L, // bytes, chars
    _currInputProcessed + _inputPtr, _currInputRow, col);
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.hasTextCharacters()","Method","No Comment","@Override
public boolean hasTextCharacters() {
    // usually true
    if (_currToken == JsonToken.VALUE_STRING) {
        return true;
    }
    if (_currToken == JsonToken.FIELD_NAME) {
        return _nameCopied;
    }
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.getBinaryValue(Base64Variant)","Method","No Comment","@SuppressWarnings(""resource"")
// since 2.7
@Override
public byte[] getBinaryValue(Base64Variant variant) throws IOException {
    if (_binaryValue == null) {
        if (_currToken != JsonToken.VALUE_STRING) {
            _reportError(""Current token ("" + _currToken + "") not VALUE_STRING, can not access as binary"");
        }
        ByteArrayBuilder builder = _getByteArrayBuilder();
        _decodeBase64(getText(), builder, variant);
        _binaryValue = builder.toByteArray();
    }
    return _binaryValue;
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.getBinaryValue(Base64Variant).variant","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase.getBinaryValue(Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.getTokenCharacterOffset()","Method","No Comment","public long getTokenCharacterOffset() {
    return _tokenInputTotal;
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.getTokenLineNr()","Method","No Comment","public int getTokenLineNr() {
    return _tokenInputRow;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.getTokenColumnNr()","Method","No Comment","public int getTokenColumnNr() {
    // note: value of -1 means ""not available""; otherwise convert from 0-based to 1-based
    int col = _tokenInputCol;
    return (col < 0) ? col : (col + 1);
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._closeInput()","Abstract Method","No Comment","protected abstract void _closeInput() throws IOException;","void","protected , abstract ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._releaseBuffers()","Method","* Method called to release internal buffers owned by the base
     * reader. This may be called along with {@link #_closeInput} (for
     * example, when explicitly closing this reader instance), or
     * separately (if need be).
     *
     * @throws IOException Not thrown by base implementation but could be thrown
     *   by sub-classes","protected void _releaseBuffers() throws IOException {
    _textBuffer.releaseBuffers();
    char[] buf = _nameCopyBuffer;
    if (buf != null) {
        _nameCopyBuffer = null;
        _ioContext.releaseNameCopyBuffer(buf);
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._handleEOF()","Method","* Method called when an EOF is encountered between tokens.
     * If so, it may be a legitimate EOF, but <b>only</b> if there
     * is no open non-root context.","@Override
protected void _handleEOF() throws JsonParseException {
    if (!_parsingContext.inRoot()) {
        String marker = _parsingContext.inArray() ? ""Array"" : ""Object"";
        _reportInvalidEOF(String.format("": expected close marker for %s (start marker at %s)"", marker, _parsingContext.startLocation(_contentReference())), null);
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._eofAsNextChar()","Method","* @return If no exception is thrown, {@code -1} which is used as marked for ""end-of-input""
     *
     * @throws JsonParseException If check on {@code _handleEOF()} fails; usually because
     *    the current context is not root context (missing end markers in content)
     *
     * @since 2.4","protected final int _eofAsNextChar() throws JsonParseException {
    _handleEOF();
    return -1;
}","int","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._getByteArrayBuilder()","Method","No Comment","public ByteArrayBuilder _getByteArrayBuilder() {
    if (_byteArrayBuilder == null) {
        _byteArrayBuilder = new ByteArrayBuilder();
    } else {
        _byteArrayBuilder.reset();
    }
    return _byteArrayBuilder;
}","ByteArrayBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.reset(boolean,int,int,int)","Method","No Comment","protected final JsonToken reset(boolean negative, int intLen, int fractLen, int expLen) throws IOException {
    if (fractLen < 1 && expLen < 1) {
        // integer
        return resetInt(negative, intLen);
    }
    return resetFloat(negative, intLen, fractLen, expLen);
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.reset(boolean,int,int,int).negative","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase.reset(boolean,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.reset(boolean,int,int,int).intLen","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserBase.reset(boolean,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.reset(boolean,int,int,int).fractLen","Parameter_3","Belong to com.fasterxml.jackson.core.base.ParserBase.reset(boolean,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.reset(boolean,int,int,int).expLen","Parameter_4","Belong to com.fasterxml.jackson.core.base.ParserBase.reset(boolean,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.resetInt(boolean,int)","Method","No Comment","protected final JsonToken resetInt(boolean negative, int intLen) throws IOException {
    // May throw StreamConstraintsException:
    _streamReadConstraints.validateIntegerLength(intLen);
    _numberNegative = negative;
    _numberIsNaN = false;
    _intLength = intLen;
    _fractLength = 0;
    _expLength = 0;
    // to force decoding
    _numTypesValid = NR_UNKNOWN;
    _numberString = null;
    return JsonToken.VALUE_NUMBER_INT;
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.resetInt(boolean,int).negative","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase.resetInt(boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.resetInt(boolean,int).intLen","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserBase.resetInt(boolean,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.resetFloat(boolean,int,int,int)","Method","No Comment","protected final JsonToken resetFloat(boolean negative, int intLen, int fractLen, int expLen) throws IOException {
    // May throw StreamConstraintsException:
    _streamReadConstraints.validateFPLength(intLen + fractLen + expLen);
    _numberNegative = negative;
    _numberIsNaN = false;
    _intLength = intLen;
    _fractLength = fractLen;
    _expLength = expLen;
    // to force decoding
    _numTypesValid = NR_UNKNOWN;
    _numberString = null;
    return JsonToken.VALUE_NUMBER_FLOAT;
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.resetFloat(boolean,int,int,int).negative","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase.resetFloat(boolean,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.resetFloat(boolean,int,int,int).intLen","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserBase.resetFloat(boolean,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.resetFloat(boolean,int,int,int).fractLen","Parameter_3","Belong to com.fasterxml.jackson.core.base.ParserBase.resetFloat(boolean,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.resetFloat(boolean,int,int,int).expLen","Parameter_4","Belong to com.fasterxml.jackson.core.base.ParserBase.resetFloat(boolean,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.resetAsNaN(String,double)","Method","No Comment","protected final JsonToken resetAsNaN(String valueStr, double value) throws IOException {
    _textBuffer.resetWithString(valueStr);
    _numberDouble = value;
    _numTypesValid = NR_DOUBLE;
    _numberIsNaN = true;
    _numberString = null;
    return JsonToken.VALUE_NUMBER_FLOAT;
}","JsonToken","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.resetAsNaN(String,double).valueStr","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase.resetAsNaN(String,double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.resetAsNaN(String,double).value","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserBase.resetAsNaN(String,double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.isNaN()","Method","No Comment","@Override
public boolean isNaN() throws IOException {
    // 01-Dec-2023, tatu: [core#1137] Only return explicit NaN
    return (_currToken == JsonToken.VALUE_NUMBER_FLOAT) && _numberIsNaN;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.getNumberValue()","Method","No Comment","@Override
public Number getNumberValue() throws IOException {
    if (_numTypesValid == NR_UNKNOWN) {
        // will also check event type
        _parseNumericValue(NR_UNKNOWN);
    }
    // Separate types for int types
    if (_currToken == JsonToken.VALUE_NUMBER_INT) {
        if ((_numTypesValid & NR_INT) != 0) {
            return _numberInt;
        }
        if ((_numTypesValid & NR_LONG) != 0) {
            return _numberLong;
        }
        if ((_numTypesValid & NR_BIGINT) != 0) {
            return _getBigInteger();
        }
        _throwInternal();
    }
    // And then floating point types. But here optimal type
    // needs to be big decimal, to avoid losing any data?
    if ((_numTypesValid & NR_BIGDECIMAL) != 0) {
        return _getBigDecimal();
    }
    if ((_numTypesValid & NR_FLOAT) != 0) {
        return _getNumberFloat();
    }
    if ((_numTypesValid & NR_DOUBLE) == 0) {
        // sanity check
        _throwInternal();
    }
    return _getNumberDouble();
}","Number","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.getNumberValueExact()","Method","NOTE: mostly copied from above","@Override
public Number getNumberValueExact() throws IOException {
    if (_currToken == JsonToken.VALUE_NUMBER_INT) {
        if (_numTypesValid == NR_UNKNOWN) {
            _parseNumericValue(NR_UNKNOWN);
        }
        if ((_numTypesValid & NR_INT) != 0) {
            return _numberInt;
        }
        if ((_numTypesValid & NR_LONG) != 0) {
            return _numberLong;
        }
        if ((_numTypesValid & NR_BIGINT) != 0) {
            return _getBigInteger();
        }
        _throwInternal();
    }
    // 09-Jul-2020, tatu: [databind#2644] requires we will retain accuracy, so:
    if (_numTypesValid == NR_UNKNOWN) {
        _parseNumericValue(NR_BIGDECIMAL);
    }
    if ((_numTypesValid & NR_BIGDECIMAL) != 0) {
        return _getBigDecimal();
    }
    if ((_numTypesValid & NR_FLOAT) != 0) {
        return _getNumberFloat();
    }
    if ((_numTypesValid & NR_DOUBLE) == 0) {
        // sanity check
        _throwInternal();
    }
    return _getNumberDouble();
}","Number","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.getNumberValueDeferred()","Method","No Comment","// since 2.15
@Override
public Object getNumberValueDeferred() throws IOException {
    if (_currToken == JsonToken.VALUE_NUMBER_INT) {
        if (_numTypesValid == NR_UNKNOWN) {
            _parseNumericValue(NR_UNKNOWN);
        }
        if ((_numTypesValid & NR_INT) != 0) {
            return _numberInt;
        }
        if ((_numTypesValid & NR_LONG) != 0) {
            return _numberLong;
        }
        if ((_numTypesValid & NR_BIGINT) != 0) {
            // from _getBigInteger()
            if (_numberBigInt != null) {
                return _numberBigInt;
            } else if (_numberString != null) {
                return _numberString;
            }
            // will fail
            return _getBigInteger();
        }
        _throwInternal();
    }
    if (_currToken == JsonToken.VALUE_NUMBER_FLOAT) {
        // Ok this gets tricky since flags are not set quite as with
        // integers
        if ((_numTypesValid & NR_BIGDECIMAL) != 0) {
            return _getBigDecimal();
        }
        if ((_numTypesValid & NR_DOUBLE) != 0) {
            // sanity check
            return _getNumberDouble();
        }
        if ((_numTypesValid & NR_FLOAT) != 0) {
            return _getNumberFloat();
        }
        // Should be able to rely on this; might want to set _numberString
        // but state keeping looks complicated so don't do that yet
        return _textBuffer.contentsAsString();
    }
    // We'll just force exception by:
    return getNumberValue();
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.getNumberType()","Method","No Comment","@Override
public NumberType getNumberType() throws IOException {
    if (_numTypesValid == NR_UNKNOWN) {
        // will also check event type
        _parseNumericValue(NR_UNKNOWN);
    }
    if (_currToken == JsonToken.VALUE_NUMBER_INT) {
        if ((_numTypesValid & NR_INT) != 0) {
            return NumberType.INT;
        }
        if ((_numTypesValid & NR_LONG) != 0) {
            return NumberType.LONG;
        }
        return NumberType.BIG_INTEGER;
    }
    /* And then floating point types. Here optimal type
         * needs to be big decimal, to avoid losing any data?
         * However... using BD is slow, so let's allow returning
         * double as type if no explicit call has been made to access
         * data as BD?
         */
    if ((_numTypesValid & NR_BIGDECIMAL) != 0) {
        return NumberType.BIG_DECIMAL;
    }
    if ((_numTypesValid & NR_FLOAT) != 0) {
        return NumberType.FLOAT;
    }
    return NumberType.DOUBLE;
}","NumberType","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.getIntValue()","Method","No Comment","@Override
public int getIntValue() throws IOException {
    if ((_numTypesValid & NR_INT) == 0) {
        if (_numTypesValid == NR_UNKNOWN) {
            // not parsed at all
            return _parseIntValue();
        }
        if ((_numTypesValid & NR_INT) == 0) {
            // wasn't an int natively?
            // let's make it so, if possible
            convertNumberToInt();
        }
    }
    return _numberInt;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.getLongValue()","Method","No Comment","@Override
public long getLongValue() throws IOException {
    if ((_numTypesValid & NR_LONG) == 0) {
        if (_numTypesValid == NR_UNKNOWN) {
            _parseNumericValue(NR_LONG);
        }
        if ((_numTypesValid & NR_LONG) == 0) {
            convertNumberToLong();
        }
    }
    return _numberLong;
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.getBigIntegerValue()","Method","No Comment","@Override
public BigInteger getBigIntegerValue() throws IOException {
    if ((_numTypesValid & NR_BIGINT) == 0) {
        if (_numTypesValid == NR_UNKNOWN) {
            _parseNumericValue(NR_BIGINT);
        }
        if ((_numTypesValid & NR_BIGINT) == 0) {
            convertNumberToBigInteger();
            return _numberBigInt;
        }
    }
    return _getBigInteger();
}","BigInteger","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.getFloatValue()","Method","No Comment","@Override
public float getFloatValue() throws IOException {
    /* 22-Jan-2009, tatu: Bounds/range checks would be tricky
         *   here, so let's not bother even trying...
         */
    /*
        if (value < -Float.MAX_VALUE || value > MAX_FLOAT_D) {
            _reportError(""Numeric value (""+getText()+"") out of range of Java float"");
        }
        */
    if ((_numTypesValid & NR_FLOAT) == 0) {
        if (_numTypesValid == NR_UNKNOWN) {
            _parseNumericValue(NR_FLOAT);
        }
        if ((_numTypesValid & NR_FLOAT) == 0) {
            convertNumberToFloat();
            return _numberFloat;
        }
    }
    return _getNumberFloat();
}","float","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.getDoubleValue()","Method","No Comment","@Override
public double getDoubleValue() throws IOException {
    if ((_numTypesValid & NR_DOUBLE) == 0) {
        if (_numTypesValid == NR_UNKNOWN) {
            _parseNumericValue(NR_DOUBLE);
        }
        // if underlying type not FP, need conversion:
        if ((_numTypesValid & NR_DOUBLE) == 0) {
            convertNumberToDouble();
            return _numberDouble;
        }
    }
    return _getNumberDouble();
}","double","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.getDecimalValue()","Method","No Comment","@Override
public BigDecimal getDecimalValue() throws IOException {
    if ((_numTypesValid & NR_BIGDECIMAL) == 0) {
        if (_numTypesValid == NR_UNKNOWN) {
            _parseNumericValue(NR_BIGDECIMAL);
        }
        if ((_numTypesValid & NR_BIGDECIMAL) == 0) {
            convertNumberToBigDecimal();
            return _numberBigDecimal;
        }
    }
    return _getBigDecimal();
}","BigDecimal","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._parseNumericValue(int)","Method","* Method that will parse actual numeric value out of a syntactically
     * valid number value. Type it will parse into depends on whether
     * it is a floating point number, as well as its magnitude: smallest
     * legal type (of ones available) is used for efficiency.
     *
     * @param expType Numeric type that we will immediately need, if any;
     *   mostly necessary to optimize handling of floating point numbers
     *
     * @throws IOException If there are problems reading content
     * @throws JsonParseException If there are problems decoding number value","protected void _parseNumericValue(int expType) throws IOException {
    // 12-Jun-2020, tatu: Sanity check to prevent more cryptic error for this case.
    //    (note: could alternatively see if TextBuffer has aggregated contents, avoid
    //    exception -- but that might be more confusing)
    if (_closed) {
        _reportError(""Internal error: _parseNumericValue called when parser instance closed"");
    }
    // Int or float?
    if (_currToken == JsonToken.VALUE_NUMBER_INT) {
        final int len = _intLength;
        // First: optimization for simple int
        if (len <= 9) {
            _numberInt = _textBuffer.contentsAsInt(_numberNegative);
            _numTypesValid = NR_INT;
            return;
        }
        if (len <= 18) {
            // definitely fits AND is easy to parse using 2 int parse calls
            long l = _textBuffer.contentsAsLong(_numberNegative);
            // Might still fit in int, need to check
            if (len == 10) {
                if (_numberNegative) {
                    if (l >= MIN_INT_L) {
                        _numberInt = (int) l;
                        _numTypesValid = NR_INT;
                        return;
                    }
                } else {
                    if (l <= MAX_INT_L) {
                        _numberInt = (int) l;
                        _numTypesValid = NR_INT;
                        return;
                    }
                }
            }
            _numberLong = l;
            _numTypesValid = NR_LONG;
            return;
        }
        // For [core#865]: handle remaining 19-char cases as well
        if (len == 19) {
            char[] buf = _textBuffer.getTextBuffer();
            int offset = _textBuffer.getTextOffset();
            if (_numberNegative) {
                ++offset;
            }
            if (NumberInput.inLongRange(buf, offset, len, _numberNegative)) {
                _numberLong = NumberInput.parseLong19(buf, offset, _numberNegative);
                _numTypesValid = NR_LONG;
                return;
            }
        }
        _parseSlowInt(expType);
        return;
    }
    if (_currToken == JsonToken.VALUE_NUMBER_FLOAT) {
        _parseSlowFloat(expType);
        return;
    }
    _reportError(""Current token (%s) not numeric, can not use numeric value accessors"", _currToken);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._parseNumericValue(int).expType","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase._parseNumericValue(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._parseIntValue()","Method","@since 2.6","protected int _parseIntValue() throws IOException {
    // 12-Jun-2020, tatu: Sanity check to prevent more cryptic error for this case.
    //    (note: could alternatively see if TextBuffer has aggregated contents, avoid
    //    exception -- but that might be more confusing)
    if (_closed) {
        _reportError(""Internal error: _parseNumericValue called when parser instance closed"");
    }
    // Inlined variant of: _parseNumericValue(NR_INT)
    if (_currToken == JsonToken.VALUE_NUMBER_INT) {
        if (_intLength <= 9) {
            int i = _textBuffer.contentsAsInt(_numberNegative);
            _numberInt = i;
            _numTypesValid = NR_INT;
            return i;
        }
    }
    // if not optimizable, use more generic
    _parseNumericValue(NR_INT);
    if ((_numTypesValid & NR_INT) == 0) {
        convertNumberToInt();
    }
    return _numberInt;
}","int","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._parseSlowFloat(int)","Method","No Comment","private void _parseSlowFloat(int expType) throws IOException {
    /* Nope: floating point. Here we need to be careful to get
         * optimal parsing strategy: choice is between accurate but
         * slow (BigDecimal) and lossy but fast (Double). For now
         * let's only use BD when explicitly requested -- it can
         * still be constructed correctly at any point since we do
         * retain textual representation
         */
    if (expType == NR_BIGDECIMAL) {
        // 04-Dec-2022, tatu: Let's defer actual decoding until it is certain
        //    value is actually needed.
        // 24-Jun-2024, tatu: No; we shouldn't have to defer unless specifically
        //    request w/ `getNumberValueDeferred()` or so
        _numberBigDecimal = _textBuffer.contentsAsDecimal(isEnabled(StreamReadFeature.USE_FAST_BIG_NUMBER_PARSER));
        _numTypesValid = NR_BIGDECIMAL;
    } else if (expType == NR_DOUBLE) {
        _numberDouble = _textBuffer.contentsAsDouble(isEnabled(StreamReadFeature.USE_FAST_DOUBLE_PARSER));
        _numTypesValid = NR_DOUBLE;
    } else if (expType == NR_FLOAT) {
        _numberFloat = _textBuffer.contentsAsFloat(isEnabled(StreamReadFeature.USE_FAST_DOUBLE_PARSER));
        _numTypesValid = NR_FLOAT;
    } else {
        // NR_UNKOWN, or one of int types
        // 04-Dec-2022, tatu: We can get all kinds of values here
        //    (NR_INT, NR_LONG or even NR_UNKNOWN). Should we try further
        //    deferring some typing?
        _numberDouble = 0.0;
        _numberString = _textBuffer.contentsAsString();
        _numTypesValid = NR_DOUBLE;
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._parseSlowFloat(int).expType","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase._parseSlowFloat(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._parseSlowInt(int)","Method","No Comment","private void _parseSlowInt(int expType) throws IOException {
    final String numStr = _textBuffer.contentsAsString();
    // 16-Oct-2018, tatu: Need to catch ""too big"" early due to [jackson-core#488]
    if ((expType == NR_INT) || (expType == NR_LONG)) {
        _reportTooLongIntegral(expType, numStr);
    }
    if ((expType == NR_DOUBLE) || (expType == NR_FLOAT)) {
        _numberString = numStr;
        _numTypesValid = NR_DOUBLE;
    } else {
        // nope, need the heavy guns... (rare case) - since Jackson v2.14, BigInteger parsing is lazy
        _numberBigInt = null;
        _numberString = numStr;
        _numTypesValid = NR_BIGINT;
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._parseSlowInt(int).expType","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase._parseSlowInt(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._reportTooLongIntegral(int,String)","Method","@since 2.9.8","protected void _reportTooLongIntegral(int expType, String rawNum) throws IOException {
    if (expType == NR_INT) {
        reportOverflowInt(rawNum);
    } else {
        reportOverflowLong(rawNum);
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._reportTooLongIntegral(int,String).expType","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase._reportTooLongIntegral(int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._reportTooLongIntegral(int,String).rawNum","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserBase._reportTooLongIntegral(int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.convertNumberToInt()","Method","No Comment","protected void convertNumberToInt() throws IOException {
    // First, converting from long ought to be easy
    if ((_numTypesValid & NR_LONG) != 0) {
        // Let's verify its lossless conversion by simple roundtrip
        int result = (int) _numberLong;
        if (result != _numberLong) {
            reportOverflowInt(getText(), currentToken());
        }
        _numberInt = result;
    } else if ((_numTypesValid & NR_BIGINT) != 0) {
        final BigInteger bigInteger = _getBigInteger();
        if (BI_MIN_INT.compareTo(bigInteger) > 0 || BI_MAX_INT.compareTo(bigInteger) < 0) {
            reportOverflowInt();
        }
        _numberInt = bigInteger.intValue();
    } else if ((_numTypesValid & NR_DOUBLE) != 0) {
        // Need to check boundaries
        final double d = _getNumberDouble();
        if (d < MIN_INT_D || d > MAX_INT_D) {
            reportOverflowInt();
        }
        _numberInt = (int) d;
    } else if ((_numTypesValid & NR_BIGDECIMAL) != 0) {
        final BigDecimal bigDecimal = _getBigDecimal();
        if (BD_MIN_INT.compareTo(bigDecimal) > 0 || BD_MAX_INT.compareTo(bigDecimal) < 0) {
            reportOverflowInt();
        }
        _numberInt = bigDecimal.intValue();
    } else {
        _throwInternal();
    }
    _numTypesValid |= NR_INT;
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.convertNumberToLong()","Method","No Comment","protected void convertNumberToLong() throws IOException {
    if ((_numTypesValid & NR_INT) != 0) {
        _numberLong = _numberInt;
    } else if ((_numTypesValid & NR_BIGINT) != 0) {
        final BigInteger bigInteger = _getBigInteger();
        if (BI_MIN_LONG.compareTo(bigInteger) > 0 || BI_MAX_LONG.compareTo(bigInteger) < 0) {
            reportOverflowLong();
        }
        _numberLong = bigInteger.longValue();
    } else if ((_numTypesValid & NR_DOUBLE) != 0) {
        // Need to check boundaries
        final double d = _getNumberDouble();
        if (d < MIN_LONG_D || d > MAX_LONG_D) {
            reportOverflowLong();
        }
        _numberLong = (long) d;
    } else if ((_numTypesValid & NR_BIGDECIMAL) != 0) {
        final BigDecimal bigDecimal = _getBigDecimal();
        if (BD_MIN_LONG.compareTo(bigDecimal) > 0 || BD_MAX_LONG.compareTo(bigDecimal) < 0) {
            reportOverflowLong();
        }
        _numberLong = bigDecimal.longValue();
    } else {
        _throwInternal();
    }
    _numTypesValid |= NR_LONG;
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigInteger()","Method","No Comment","protected void convertNumberToBigInteger() throws IOException {
    if ((_numTypesValid & NR_BIGDECIMAL) != 0) {
        // here it'll just get truncated, no exceptions thrown
        _numberBigInt = _convertBigDecimalToBigInteger(_getBigDecimal());
    } else if ((_numTypesValid & NR_LONG) != 0) {
        _numberBigInt = BigInteger.valueOf(_numberLong);
    } else if ((_numTypesValid & NR_INT) != 0) {
        _numberBigInt = BigInteger.valueOf(_numberInt);
    } else if ((_numTypesValid & NR_DOUBLE) != 0) {
        if (_numberString != null) {
            _numberBigInt = _convertBigDecimalToBigInteger(_getBigDecimal());
        } else {
            _numberBigInt = _convertBigDecimalToBigInteger(BigDecimal.valueOf(_getNumberDouble()));
        }
    } else {
        _throwInternal();
    }
    _numTypesValid |= NR_BIGINT;
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.convertNumberToDouble()","Method","No Comment","protected void convertNumberToDouble() throws IOException {
    /* 05-Aug-2008, tatus: Important note: this MUST start with
         *   more accurate representations, since we don't know which
         *   value is the original one (others get generated when
         *   requested)
         */
    if ((_numTypesValid & NR_BIGDECIMAL) != 0) {
        if (_numberString != null) {
            _numberDouble = _getNumberDouble();
        } else {
            _numberDouble = _getBigDecimal().doubleValue();
        }
    } else if ((_numTypesValid & NR_BIGINT) != 0) {
        if (_numberString != null) {
            _numberDouble = _getNumberDouble();
        } else {
            _numberDouble = _getBigInteger().doubleValue();
        }
    } else if ((_numTypesValid & NR_LONG) != 0) {
        _numberDouble = _numberLong;
    } else if ((_numTypesValid & NR_INT) != 0) {
        _numberDouble = _numberInt;
    } else if ((_numTypesValid & NR_FLOAT) != 0) {
        if (_numberString != null) {
            _numberDouble = _getNumberDouble();
        } else {
            _numberDouble = _getNumberFloat();
        }
    } else {
        _throwInternal();
    }
    _numTypesValid |= NR_DOUBLE;
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.convertNumberToFloat()","Method","No Comment","protected void convertNumberToFloat() throws IOException {
    /* 05-Aug-2008, tatus: Important note: this MUST start with
         *   more accurate representations, since we don't know which
         *   value is the original one (others get generated when
         *   requested)
         */
    if ((_numTypesValid & NR_BIGDECIMAL) != 0) {
        if (_numberString != null) {
            _numberFloat = _getNumberFloat();
        } else {
            _numberFloat = _getBigDecimal().floatValue();
        }
    } else if ((_numTypesValid & NR_BIGINT) != 0) {
        if (_numberString != null) {
            _numberFloat = _getNumberFloat();
        } else {
            _numberFloat = _getBigInteger().floatValue();
        }
    } else if ((_numTypesValid & NR_LONG) != 0) {
        _numberFloat = _numberLong;
    } else if ((_numTypesValid & NR_INT) != 0) {
        _numberFloat = _numberInt;
    } else if ((_numTypesValid & NR_DOUBLE) != 0) {
        if (_numberString != null) {
            _numberFloat = _getNumberFloat();
        } else {
            _numberFloat = (float) _getNumberDouble();
        }
    } else {
        _throwInternal();
    }
    _numTypesValid |= NR_FLOAT;
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigDecimal()","Method","No Comment","protected void convertNumberToBigDecimal() throws IOException {
    /* 05-Aug-2008, tatus: Important note: this MUST start with
         *   more accurate representations, since we don't know which
         *   value is the original one (others get generated when
         *   requested)
         */
    if ((_numTypesValid & NR_DOUBLE) != 0) {
        // Let's actually parse from String representation, to avoid
        // rounding errors that non-decimal floating operations could incur
        final String numStr = _numberString == null ? getText() : _numberString;
        _numberBigDecimal = NumberInput.parseBigDecimal(numStr, isEnabled(StreamReadFeature.USE_FAST_BIG_NUMBER_PARSER));
    } else if ((_numTypesValid & NR_BIGINT) != 0) {
        _numberBigDecimal = new BigDecimal(_getBigInteger());
    } else if ((_numTypesValid & NR_LONG) != 0) {
        _numberBigDecimal = BigDecimal.valueOf(_numberLong);
    } else if ((_numTypesValid & NR_INT) != 0) {
        _numberBigDecimal = BigDecimal.valueOf(_numberInt);
    } else {
        _throwInternal();
    }
    _numTypesValid |= NR_BIGDECIMAL;
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._convertBigDecimalToBigInteger(BigDecimal)","Method","@since 2.15","protected BigInteger _convertBigDecimalToBigInteger(BigDecimal bigDec) throws IOException {
    // 04-Apr-2022, tatu: wrt [core#968] Need to limit max scale magnitude
    //   (may throw StreamConstraintsException)
    _streamReadConstraints.validateBigIntegerScale(bigDec.scale());
    return bigDec.toBigInteger();
}","BigInteger","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._convertBigDecimalToBigInteger(BigDecimal).bigDec","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase._convertBigDecimalToBigInteger(BigDecimal)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._getBigInteger()","Method","* Internal accessor that needs to be used for accessing number value of type
     * {@link BigInteger} which -- as of 2.14 -- is typically lazily parsed.
     *
     * @return {@link BigInteger} value of the current token
     *
     * @throws JsonParseException If parsing fails
     *
     * @since 2.14","protected BigInteger _getBigInteger() throws JsonParseException {
    if (_numberBigInt != null) {
        return _numberBigInt;
    }
    if (_numberString == null) {
        throw new IllegalStateException(""cannot get BigInteger from current parser state"");
    }
    try {
        // NOTE! Length of number string has been validated earlier
        _numberBigInt = NumberInput.parseBigInteger(_numberString, isEnabled(StreamReadFeature.USE_FAST_BIG_NUMBER_PARSER));
    } catch (NumberFormatException nex) {
        _wrapError(""Malformed numeric value ("" + _longNumberDesc(_numberString) + "")"", nex);
    }
    _numberString = null;
    return _numberBigInt;
}","BigInteger","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._getBigDecimal()","Method","* Internal accessor that needs to be used for accessing number value of type
     * {@link BigDecimal} which -- as of 2.14 -- is typically lazily parsed.
     *
     * @return {@link BigDecimal} value of the current token
     *
     * @throws JsonParseException If parsing fails
     *
     * @since 2.14","protected BigDecimal _getBigDecimal() throws JsonParseException {
    if (_numberBigDecimal != null) {
        return _numberBigDecimal;
    }
    if (_numberString == null) {
        throw new IllegalStateException(""cannot get BigDecimal from current parser state"");
    }
    try {
        // NOTE! Length of number string has been validated earlier
        _numberBigDecimal = NumberInput.parseBigDecimal(_numberString, isEnabled(StreamReadFeature.USE_FAST_BIG_NUMBER_PARSER));
    } catch (NumberFormatException nex) {
        _wrapError(""Malformed numeric value ("" + _longNumberDesc(_numberString) + "")"", nex);
    }
    _numberString = null;
    return _numberBigDecimal;
}","BigDecimal","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._getNumberDouble()","Method","* Internal accessor that needs to be used for accessing number value of type
     * {@code double} which -- as of 2.15 -- will be lazily parsed.
     *
     * @return {@code double} value of the current token
     *
     * @throws JsonParseException If parsing fails
     *
     * @since 2.15","protected double _getNumberDouble() throws JsonParseException {
    if (_numberString != null) {
        try {
            _numberDouble = NumberInput.parseDouble(_numberString, isEnabled(StreamReadFeature.USE_FAST_DOUBLE_PARSER));
        } catch (NumberFormatException nex) {
            _wrapError(""Malformed numeric value ("" + _longNumberDesc(_numberString) + "")"", nex);
        }
        _numberString = null;
    }
    return _numberDouble;
}","double","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._getNumberFloat()","Method","* Internal accessor that needs to be used for accessing number value of type
     * {@code float} which -- as of 2.15 -- will be lazily parsed.
     *
     * @return {@code float} value of the current token
     *
     * @throws JsonParseException If parsing fails
     *
     * @since 2.15","protected float _getNumberFloat() throws JsonParseException {
    if (_numberString != null) {
        try {
            _numberFloat = NumberInput.parseFloat(_numberString, isEnabled(StreamReadFeature.USE_FAST_DOUBLE_PARSER));
        } catch (NumberFormatException nex) {
            _wrapError(""Malformed numeric value ("" + _longNumberDesc(_numberString) + "")"", nex);
        }
        _numberString = null;
    }
    return _numberFloat;
}","float","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.createChildArrayContext(int,int)","Method","@since 2.15","protected void createChildArrayContext(final int lineNr, final int colNr) throws IOException {
    _parsingContext = _parsingContext.createChildArrayContext(lineNr, colNr);
    _streamReadConstraints.validateNestingDepth(_parsingContext.getNestingDepth());
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.createChildArrayContext(int,int).lineNr","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase.createChildArrayContext(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.createChildArrayContext(int,int).colNr","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserBase.createChildArrayContext(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.createChildObjectContext(int,int)","Method","@since 2.15","protected void createChildObjectContext(final int lineNr, final int colNr) throws IOException {
    _parsingContext = _parsingContext.createChildObjectContext(lineNr, colNr);
    _streamReadConstraints.validateNestingDepth(_parsingContext.getNestingDepth());
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.createChildObjectContext(int,int).lineNr","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase.createChildObjectContext(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.createChildObjectContext(int,int).colNr","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserBase.createChildObjectContext(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._handleUnrecognizedCharacterEscape(char)","Method","No Comment","@SuppressWarnings(""deprecation"")
protected char _handleUnrecognizedCharacterEscape(char ch) throws JsonProcessingException {
    // as per [JACKSON-300]
    if (isEnabled(Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER)) {
        return ch;
    }
    // and [JACKSON-548]
    if (ch == '\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {
        return ch;
    }
    throw _constructReadException(""Unrecognized character escape "" + _getCharDesc(ch), _currentLocationMinusOne());
}","char","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._handleUnrecognizedCharacterEscape(char).ch","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase._handleUnrecognizedCharacterEscape(char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._reportMismatchedEndMarker(int,char)","Method","No Comment","protected void _reportMismatchedEndMarker(int actCh, char expCh) throws JsonParseException {
    final JsonReadContext ctxt = getParsingContext();
    // 31-Jan-2025, tatu: [core#1394] Need to check case of no open scope
    if (ctxt.inRoot()) {
        _reportExtraEndMarker(actCh);
        return;
    }
    final String msg = String.format(""Unexpected close marker '%s': expected '%c' (for %s starting at %s)"", (char) actCh, expCh, ctxt.typeDesc(), ctxt.startLocation(_contentReference()));
    throw _constructReadException(msg, _currentLocationMinusOne());
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._reportMismatchedEndMarker(int,char).actCh","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase._reportMismatchedEndMarker(int,char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._reportMismatchedEndMarker(int,char).expCh","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserBase._reportMismatchedEndMarker(int,char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._reportExtraEndMarker(int)","Method","@since 2.19","protected void _reportExtraEndMarker(int actCh) throws JsonParseException {
    final String scopeDesc = (actCh == '}') ? ""Object"" : ""Array"";
    final String msg = String.format(""Unexpected close marker '%s': no open %s to close"", (char) actCh, scopeDesc);
    throw _constructReadException(msg, _currentLocationMinusOne());
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._reportExtraEndMarker(int).actCh","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase._reportExtraEndMarker(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._throwUnquotedSpace(int,String)","Method","* Method called to report a problem with unquoted control character.
     * Note: it is possible to suppress some instances of
     * exception by enabling
     * {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_UNESCAPED_CONTROL_CHARS}.
     *
     * @param i Invalid control character
     * @param ctxtDesc Addition description of context to use in exception message
     *
     * @throws JsonParseException explaining the problem","@SuppressWarnings(""deprecation"")
protected void _throwUnquotedSpace(int i, String ctxtDesc) throws JsonParseException {
    // JACKSON-208; possible to allow unquoted control chars:
    if (!isEnabled(Feature.ALLOW_UNQUOTED_CONTROL_CHARS) || i > INT_SPACE) {
        char c = (char) i;
        String msg = ""Illegal unquoted character ("" + _getCharDesc(c) + ""): has to be escaped using backslash to be included in "" + ctxtDesc;
        throw _constructReadException(msg, _currentLocationMinusOne());
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._throwUnquotedSpace(int,String).i","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase._throwUnquotedSpace(int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._throwUnquotedSpace(int,String).ctxtDesc","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserBase._throwUnquotedSpace(int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._validJsonTokenList()","Method","* @return Description to use as ""valid tokens"" in an exception message about
     *    invalid (unrecognized) JSON token: called when parser finds something that
     *    looks like unquoted textual token
     *
     * @throws IOException Not thrown by base implementation but allowed by sub-classes
     *
     * @since 2.10","protected String _validJsonTokenList() throws IOException {
    return _validJsonValueList();
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._validJsonValueList()","Method","* @return Description to use as ""valid JSON values"" in an exception message about
     *    invalid (unrecognized) JSON value: called when parser finds something that
     *    does not look like a value or separator.
     *
     * @throws IOException Not thrown by base implementation but allowed by sub-classes
     *
     * @since 2.10","@SuppressWarnings(""deprecation"")
protected String _validJsonValueList() throws IOException {
    if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {
        return ""(JSON String, Number (or 'NaN'/'+INF'/'-INF'), Array, Object or token 'null', 'true' or 'false')"";
    }
    return ""(JSON String, Number, Array, Object or token 'null', 'true' or 'false')"";
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._decodeEscaped()","Method","* Method that sub-classes must implement to support escaped sequences
     * in base64-encoded sections.
     * Sub-classes that do not need base64 support can leave this as is
     *
     * @return Character decoded, if any
     *
     * @throws IOException If escape decoding fails","protected char _decodeEscaped() throws IOException {
    throw new UnsupportedOperationException();
}","char","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(Base64Variant,int,int)","Method","No Comment","protected final int _decodeBase64Escape(Base64Variant b64variant, int ch, int index) throws IOException {
    // 17-May-2011, tatu: As per [JACKSON-xxx], need to handle escaped chars
    if (ch != '\\') {
        throw reportInvalidBase64Char(b64variant, ch, index);
    }
    int unescaped = _decodeEscaped();
    // if white space, skip if first triplet; otherwise errors
    if (unescaped <= INT_SPACE) {
        if (index == 0) {
            // whitespace only allowed to be skipped between triplets
            return -1;
        }
    }
    // otherwise try to find actual triplet value
    int bits = b64variant.decodeBase64Char(unescaped);
    if (bits < 0) {
        if (bits != Base64Variant.BASE64_VALUE_PADDING) {
            throw reportInvalidBase64Char(b64variant, unescaped, index);
        }
    }
    return bits;
}","int","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(Base64Variant,int,int).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(Base64Variant,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(Base64Variant,int,int).ch","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(Base64Variant,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(Base64Variant,int,int).index","Parameter_3","Belong to com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(Base64Variant,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(Base64Variant,char,int)","Method","No Comment","protected final int _decodeBase64Escape(Base64Variant b64variant, char ch, int index) throws IOException {
    if (ch != '\\') {
        throw reportInvalidBase64Char(b64variant, ch, index);
    }
    char unescaped = _decodeEscaped();
    // if white space, skip if first triplet; otherwise errors
    if (unescaped <= INT_SPACE) {
        if (index == 0) {
            // whitespace only allowed to be skipped between triplets
            return -1;
        }
    }
    // otherwise try to find actual triplet value
    int bits = b64variant.decodeBase64Char(unescaped);
    if (bits < 0) {
        // second check since padding can only be 3rd or 4th byte (index #2 or #3)
        if ((bits != Base64Variant.BASE64_VALUE_PADDING) || (index < 2)) {
            throw reportInvalidBase64Char(b64variant, unescaped, index);
        }
    }
    return bits;
}","int","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(Base64Variant,char,int).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(Base64Variant,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(Base64Variant,char,int).ch","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(Base64Variant,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(Base64Variant,char,int).index","Parameter_3","Belong to com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(Base64Variant,char,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(Base64Variant,int,int)","Method","No Comment","protected IllegalArgumentException reportInvalidBase64Char(Base64Variant b64variant, int ch, int bindex) throws IllegalArgumentException {
    return reportInvalidBase64Char(b64variant, ch, bindex, null);
}","IllegalArgumentException","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(Base64Variant,int,int).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(Base64Variant,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(Base64Variant,int,int).ch","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(Base64Variant,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(Base64Variant,int,int).bindex","Parameter_3","Belong to com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(Base64Variant,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(Base64Variant,int,int,String)","Method","* @param bindex Relative index within base64 character unit; between 0
     *  and 3 (as unit has exactly 4 characters)","protected IllegalArgumentException reportInvalidBase64Char(Base64Variant b64variant, int ch, int bindex, String msg) throws IllegalArgumentException {
    String base;
    if (ch <= INT_SPACE) {
        base = String.format(""Illegal white space character (code 0x%s) as character #%d of 4-char base64 unit: can only used between units"", Integer.toHexString(ch), (bindex + 1));
    } else if (b64variant.usesPaddingChar(ch)) {
        base = ""Unexpected padding character ('"" + b64variant.getPaddingChar() + ""') as character #"" + (bindex + 1) + "" of 4-char base64 unit: padding only legal as 3rd or 4th character"";
    } else if (!Character.isDefined(ch) || Character.isISOControl(ch)) {
        // Not sure if we can really get here... ? (most illegal xml chars are caught at lower level)
        base = ""Illegal character (code 0x"" + Integer.toHexString(ch) + "") in base64 content"";
    } else {
        base = ""Illegal character '"" + ((char) ch) + ""' (code 0x"" + Integer.toHexString(ch) + "") in base64 content"";
    }
    if (msg != null) {
        base = base + "": "" + msg;
    }
    return new IllegalArgumentException(base);
}","IllegalArgumentException","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(Base64Variant,int,int,String).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(Base64Variant,int,int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(Base64Variant,int,int,String).ch","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(Base64Variant,int,int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(Base64Variant,int,int,String).bindex","Parameter_3","Belong to com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(Base64Variant,int,int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(Base64Variant,int,int,String).msg","Parameter_4","Belong to com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(Base64Variant,int,int,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._handleBase64MissingPadding(Base64Variant)","Method","since 2.9.8","protected void _handleBase64MissingPadding(Base64Variant b64variant) throws IOException {
    _reportError(b64variant.missingPaddingMessage());
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._handleBase64MissingPadding(Base64Variant).b64variant","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase._handleBase64MissingPadding(Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._getSourceReference()","Method","* @return Source reference
     * @since 2.9
     * @deprecated Since 2.13, use {@link #_contentReference()} instead.","@Deprecated
protected Object _getSourceReference() {
    if (JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION.enabledIn(_features)) {
        return _ioContext.contentReference().getRawContent();
    }
    return null;
}","Object","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._contentReference()","Method","* Helper method used to encapsulate logic of including (or not) of
     * ""content reference"" when constructing {@link JsonLocation} instances.
     *
     * @return ContentReference object to use.
     *
     * @since 2.13","protected ContentReference _contentReference() {
    if (JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION.enabledIn(_features)) {
        return _ioContext.contentReference();
    }
    return _contentReferenceRedacted();
}","ContentReference","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._contentReferenceRedacted()","Method","* Helper method used to encapsulate logic of providing
     * ""content reference"" when constructing {@link JsonLocation} instances
     * and source information is <b>NOT</b> to be included
     * ({@code StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION} disabled).
     *<p>
     * Default implementation will simply return {@link ContentReference#redacted()}.
     *
     * @return ContentReference object to use when source is not to be included
     *
     * @since 2.16","protected ContentReference _contentReferenceRedacted() {
    return ContentReference.redacted();
}","ContentReference","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.growArrayBy(int[],int)","Method","Helper method called by name-decoding methods that require storage
     * for ""quads"" (4-byte units encode as ints), when existing buffer
     * is full.","protected static int[] growArrayBy(int[] arr, int more) throws IllegalArgumentException {
    if (arr == null) {
        return new int[more];
    }
    final int len = arr.length + more;
    if (len < 0) {
        throw new IllegalArgumentException(""Unable to grow array to longer than `Integer.MAX_VALUE`"");
    }
    return Arrays.copyOf(arr, len);
}","int[]","protected , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.growArrayBy(int[],int).arr","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase.growArrayBy(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.growArrayBy(int[],int).more","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserBase.growArrayBy(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._growNameDecodeBuffer(int[],int)","Method","Helper method to call to expand ""quad"" buffer for name decoding
     * 
     * @since 2.16","protected int[] _growNameDecodeBuffer(int[] arr, int more) throws StreamConstraintsException {
    // the following check will fail if the array is already bigger than is allowed for names
    _streamReadConstraints.validateNameLength(arr.length << 2);
    return growArrayBy(arr, more);
}","int[]","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._growNameDecodeBuffer(int[],int).arr","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase._growNameDecodeBuffer(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._growNameDecodeBuffer(int[],int).more","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserBase._growNameDecodeBuffer(int[],int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.loadMoreGuaranteed()","Method","No Comment","// since 2.8
@Deprecated
protected void loadMoreGuaranteed() throws IOException {
    if (!loadMore()) {
        _reportInvalidEOF();
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.loadMore()","Method","No Comment","// since 2.8
@Deprecated
protected boolean loadMore() throws IOException {
    return false;
}","boolean","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase._finishString()","Method","Can't declare as deprecated, for now, but shouldn't be needed","protected void _finishString() throws IOException {
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.<init>(IOContext,int)","Constructor","No Comment","protected ParserBase(IOContext ctxt, int features) {
    super(features, ctxt.streamReadConstraints());
    _ioContext = ctxt;
    _textBuffer = ctxt.constructReadConstrainedTextBuffer();
    DupDetector dups = Feature.STRICT_DUPLICATE_DETECTION.enabledIn(features) ? DupDetector.rootDetector(this) : null;
    _parsingContext = JsonReadContext.createRootContext(dups);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.<init>(IOContext,int).ctxt","Parameter_1","Belong to com.fasterxml.jackson.core.base.ParserBase.<init>(IOContext,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.base.ParserBase.<init>(IOContext,int).features","Parameter_2","Belong to com.fasterxml.jackson.core.base.ParserBase.<init>(IOContext,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder","Class","* {@link com.fasterxml.jackson.core.TSFBuilder}
 * implementation for constructing vanilla {@link JsonFactory}
 * instances for reading/writing JSON encoded content.
 *<p>
 * NOTE: as of Jackson 2.x, use of JSON-specific builder is bit cumbersome
 * since {@link JsonFactory} serves dual duty of base class AND actual
 * implementation for JSON backend. This will be fixed in Jackson 3.0.
 *
 * @since 2.10","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.TSFBuilder",""
"com.fasterxml.jackson.core.JsonFactoryBuilder._characterEscapes","Field","No Comment","protected CharacterEscapes _characterEscapes;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder._rootValueSeparator","Field","No Comment","protected SerializableString _rootValueSeparator;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder._maximumNonEscapedChar","Field","No Comment","protected int _maximumNonEscapedChar;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder._quoteChar","Field","* Character used for quoting field names (if field name quoting has not
     * been disabled with {@link JsonWriteFeature#QUOTE_FIELD_NAMES})
     * and JSON String values.","protected char _quoteChar = JsonFactory.DEFAULT_QUOTE_CHAR;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.enable(JsonReadFeature)","Method","No Comment","@Override
public JsonFactoryBuilder enable(JsonReadFeature f) {
    _legacyEnable(f.mappedFeature());
    return this;
}","JsonFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.enable(JsonReadFeature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.enable(JsonReadFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.enable(JsonReadFeature,JsonReadFeature[])","Method","No Comment","@Override
public JsonFactoryBuilder enable(JsonReadFeature first, JsonReadFeature... other) {
    _legacyEnable(first.mappedFeature());
    enable(first);
    for (JsonReadFeature f : other) {
        _legacyEnable(f.mappedFeature());
    }
    return this;
}","JsonFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.enable(JsonReadFeature,JsonReadFeature[]).first","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.enable(JsonReadFeature,JsonReadFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.enable(JsonReadFeature,JsonReadFeature[]).other","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.enable(JsonReadFeature,JsonReadFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.disable(JsonReadFeature)","Method","No Comment","@Override
public JsonFactoryBuilder disable(JsonReadFeature f) {
    _legacyDisable(f.mappedFeature());
    return this;
}","JsonFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.disable(JsonReadFeature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.disable(JsonReadFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.disable(JsonReadFeature,JsonReadFeature[])","Method","No Comment","@Override
public JsonFactoryBuilder disable(JsonReadFeature first, JsonReadFeature... other) {
    _legacyDisable(first.mappedFeature());
    for (JsonReadFeature f : other) {
        _legacyEnable(f.mappedFeature());
    }
    return this;
}","JsonFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.disable(JsonReadFeature,JsonReadFeature[]).first","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.disable(JsonReadFeature,JsonReadFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.disable(JsonReadFeature,JsonReadFeature[]).other","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.disable(JsonReadFeature,JsonReadFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.configure(JsonReadFeature,boolean)","Method","No Comment","@Override
public JsonFactoryBuilder configure(JsonReadFeature f, boolean state) {
    return state ? enable(f) : disable(f);
}","JsonFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.configure(JsonReadFeature,boolean).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.configure(JsonReadFeature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.configure(JsonReadFeature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.configure(JsonReadFeature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.enable(JsonWriteFeature)","Method","No Comment","@Override
public JsonFactoryBuilder enable(JsonWriteFeature f) {
    JsonGenerator.Feature old = f.mappedFeature();
    if (old != null) {
        _legacyEnable(old);
    }
    return this;
}","JsonFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.enable(JsonWriteFeature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.enable(JsonWriteFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.enable(JsonWriteFeature,JsonWriteFeature[])","Method","No Comment","@Override
public JsonFactoryBuilder enable(JsonWriteFeature first, JsonWriteFeature... other) {
    _legacyEnable(first.mappedFeature());
    for (JsonWriteFeature f : other) {
        _legacyEnable(f.mappedFeature());
    }
    return this;
}","JsonFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.enable(JsonWriteFeature,JsonWriteFeature[]).first","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.enable(JsonWriteFeature,JsonWriteFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.enable(JsonWriteFeature,JsonWriteFeature[]).other","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.enable(JsonWriteFeature,JsonWriteFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.disable(JsonWriteFeature)","Method","No Comment","@Override
public JsonFactoryBuilder disable(JsonWriteFeature f) {
    _legacyDisable(f.mappedFeature());
    return this;
}","JsonFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.disable(JsonWriteFeature).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.disable(JsonWriteFeature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.disable(JsonWriteFeature,JsonWriteFeature[])","Method","No Comment","@Override
public JsonFactoryBuilder disable(JsonWriteFeature first, JsonWriteFeature... other) {
    _legacyDisable(first.mappedFeature());
    for (JsonWriteFeature f : other) {
        _legacyDisable(f.mappedFeature());
    }
    return this;
}","JsonFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.disable(JsonWriteFeature,JsonWriteFeature[]).first","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.disable(JsonWriteFeature,JsonWriteFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.disable(JsonWriteFeature,JsonWriteFeature[]).other","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.disable(JsonWriteFeature,JsonWriteFeature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.configure(JsonWriteFeature,boolean)","Method","No Comment","@Override
public JsonFactoryBuilder configure(JsonWriteFeature f, boolean state) {
    return state ? enable(f) : disable(f);
}","JsonFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.configure(JsonWriteFeature,boolean).f","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.configure(JsonWriteFeature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.configure(JsonWriteFeature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.configure(JsonWriteFeature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.characterEscapes(CharacterEscapes)","Method","* Method for defining custom escapes factory uses for {@link JsonGenerator}s
     * it creates.
     *
     * @param esc CharacterEscapes to configure, if any; {@code null} if none
     *
     * @return This builder instance (to allow call chaining)","public JsonFactoryBuilder characterEscapes(CharacterEscapes esc) {
    _characterEscapes = esc;
    return this;
}","JsonFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.characterEscapes(CharacterEscapes).esc","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.characterEscapes(CharacterEscapes)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.rootValueSeparator(String)","Method","* Method that allows overriding String used for separating root-level
     * JSON values (default is single space character)
     *
     * @param sep Separator to use, if any; null means that no separator is
     *   automatically added
     *
     * @return This builder instance (to allow call chaining)","public JsonFactoryBuilder rootValueSeparator(String sep) {
    _rootValueSeparator = (sep == null) ? null : new SerializedString(sep);
    return this;
}","JsonFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.rootValueSeparator(String).sep","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.rootValueSeparator(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.rootValueSeparator(SerializableString)","Method","* Method that allows overriding String used for separating root-level
     * JSON values (default is single space character)
     *
     * @param sep Separator to use, if any; null means that no separator is
     *   automatically added
     *
     * @return This builder instance (to allow call chaining)","public JsonFactoryBuilder rootValueSeparator(SerializableString sep) {
    _rootValueSeparator = sep;
    return this;
}","JsonFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.rootValueSeparator(SerializableString).sep","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.rootValueSeparator(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.highestNonEscapedChar(int)","Method","* Method that allows specifying threshold beyond which all characters are
     * automatically escaped (without checking possible custom escaping settings
     * a la {@link #characterEscapes}: for example, to force escaping of all non-ASCII
     * characters (set to 127), or all non-Latin-1 character (set to 255).
     * Default setting is ""disabled"", specified by passing value of {@code 0} (or
     * negative numbers).
     *<p>
     * NOTE! Lowest legal value (aside from marker 0) is 127: for ASCII range, other checks apply
     * and this threshold is ignored. If value between [1, 126] is specified, 127 will be
     * used instead.
     *
     * @param maxNonEscaped Highest character code that is NOT automatically escaped; if
     *    positive value above 0, or 0 to indicate that no automatic escaping is applied
     *    beside from what JSON specification requires (and possible custom escape settings).
     *    Values between 1 and 127 are all taken to behave as if 127 is specified: that is,
     *    no automatic escaping is applied in ASCII range.
     *
     * @return This builder instance (to allow call chaining)","public JsonFactoryBuilder highestNonEscapedChar(int maxNonEscaped) {
    _maximumNonEscapedChar = (maxNonEscaped <= 0) ? 0 : Math.max(127, maxNonEscaped);
    return this;
}","JsonFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.highestNonEscapedChar(int).maxNonEscaped","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.highestNonEscapedChar(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.quoteChar(char)","Method","* Method that allows specifying an alternate
     * character used for quoting field names (if field name quoting has not
     * been disabled with {@link JsonWriteFeature#QUOTE_FIELD_NAMES})
     * and JSON String values.
     *<p>
     * Default value is double-quote ({@code ""}); typical alternative is
     * single-quote/apostrophe ({@code '}).
     *
     * @param ch Character to use for quoting field names and JSON String values.
     *
     * @return This builder instance (to allow call chaining)","public JsonFactoryBuilder quoteChar(char ch) {
    // 12-Aug-2019, tatu: Due to implementation details, escaping characters beyond
    //    7-bit ASCII set has deep overhead so let's limit set. If we absolutely
    //    must it is possible of course, but leads to problems combining with
    //    custom escaping aspects.
    if (ch > 0x7F) {
        throw new IllegalArgumentException(""Can only use Unicode characters up to 0x7F as quote characters"");
    }
    _quoteChar = ch;
    return this;
}","JsonFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.quoteChar(char).ch","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.quoteChar(char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.characterEscapes()","Method","No Comment","public CharacterEscapes characterEscapes() {
    return _characterEscapes;
}","CharacterEscapes","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.rootValueSeparator()","Method","No Comment","public SerializableString rootValueSeparator() {
    return _rootValueSeparator;
}","SerializableString","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.highestNonEscapedChar()","Method","No Comment","public int highestNonEscapedChar() {
    return _maximumNonEscapedChar;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.quoteChar()","Method","No Comment","public char quoteChar() {
    return _quoteChar;
}","char","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.build()","Method","No Comment","@Override
public JsonFactory build() {
    // 28-Dec-2017, tatu: No special settings beyond base class ones, so:
    return new JsonFactory(this);
}","JsonFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.<init>()","Constructor","No Comment","public JsonFactoryBuilder() {
    super();
    _rootValueSeparator = JsonFactory.DEFAULT_ROOT_VALUE_SEPARATOR;
    _maximumNonEscapedChar = 0;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.<init>(JsonFactory)","Constructor","No Comment","public JsonFactoryBuilder(JsonFactory base) {
    super(base);
    _characterEscapes = base.getCharacterEscapes();
    _rootValueSeparator = base._rootValueSeparator;
    _maximumNonEscapedChar = base._maximumNonEscapedChar;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonFactoryBuilder.<init>(JsonFactory).base","Parameter_1","Belong to com.fasterxml.jackson.core.JsonFactoryBuilder.<init>(JsonFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonpCharacterEscapes","Class","* Convenience {@link CharacterEscapes} implementation that escapes
 * Unicode characters `0x2028` and `0x2029` (in addition to characters
 * escaped otherwise), which are apparently considered linefeeds as
 * per newer Javascript specifications, and consequently problematic
 * when using JSONP (see https://en.wikipedia.org/wiki/JSONP).
 *
 * @since 2.8","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.io.CharacterEscapes",""
"com.fasterxml.jackson.core.JsonpCharacterEscapes.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonpCharacterEscapes.asciiEscapes","Field","No Comment","private static final int[] asciiEscapes = CharacterEscapes.standardAsciiEscapesForJSON();","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonpCharacterEscapes.escapeFor2028","Field","No Comment","private static final SerializedString escapeFor2028 = new SerializedString(""\\u2028"");","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonpCharacterEscapes.escapeFor2029","Field","No Comment","private static final SerializedString escapeFor2029 = new SerializedString(""\\u2029"");","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonpCharacterEscapes.sInstance","Field","No Comment","private static final JsonpCharacterEscapes sInstance = new JsonpCharacterEscapes();","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonpCharacterEscapes.instance()","Method","No Comment","public static JsonpCharacterEscapes instance() {
    return sInstance;
}","JsonpCharacterEscapes","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonpCharacterEscapes.getEscapeSequence(int)","Method","No Comment","@Override
public SerializableString getEscapeSequence(int ch) {
    switch(ch) {
        case 0x2028:
            return escapeFor2028;
        case 0x2029:
            return escapeFor2029;
        default:
            return null;
    }
}","SerializableString","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonpCharacterEscapes.getEscapeSequence(int).ch","Parameter_1","Belong to com.fasterxml.jackson.core.JsonpCharacterEscapes.getEscapeSequence(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonpCharacterEscapes.getEscapeCodesForAscii()","Method","No Comment","@Override
public int[] getEscapeCodesForAscii() {
    return asciiEscapes;
}","int[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration","Class","* Container for configuration values used when handling errorneous token inputs. 
 * For example, unquoted text segments.
 * <p>
 * Currently default settings are
 * <ul>
 *     <li>Maximum length of token to include in error messages (see {@link #_maxErrorTokenLength})
 *     <li>Maximum length of raw content to include in error messages (see {@link #_maxRawContentLength})
 * </ul>
 *
 * @since 2.16","Class do not obtain Source Code","No return type","public ","","java.io.Serializable"
"com.fasterxml.jackson.core.ErrorReportConfiguration.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.DEFAULT_MAX_ERROR_TOKEN_LENGTH","Field","* Default value for {@link #_maxErrorTokenLength}.","public static final int DEFAULT_MAX_ERROR_TOKEN_LENGTH = 256;","No return type","public , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.DEFAULT_MAX_RAW_CONTENT_LENGTH","Field","* Previously was {@code com.fasterxml.jackson.core.io.ContentReference#DEFAULT_MAX_CONTENT_SNIPPET}.
     * Default value for {@link #_maxRawContentLength}.","public static final int DEFAULT_MAX_RAW_CONTENT_LENGTH = 500;","No return type","public , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration._maxErrorTokenLength","Field","* Maximum length of token to include in error messages
     *
     * @see Builder#maxErrorTokenLength(int)","protected final int _maxErrorTokenLength;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration._maxRawContentLength","Field","* Maximum length of raw content to include in error messages
     * 
     * @see Builder#maxRawContentLength(int)","protected final int _maxRawContentLength;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.DEFAULT","Field","No Comment","private static ErrorReportConfiguration DEFAULT = new ErrorReportConfiguration(DEFAULT_MAX_ERROR_TOKEN_LENGTH, DEFAULT_MAX_RAW_CONTENT_LENGTH);","No return type","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.overrideDefaultErrorReportConfiguration(ErrorReportConfiguration)","Method","* Override the default ErrorReportConfiguration. These defaults are only used when {@link JsonFactory}
     * instances are not configured with their own ErrorReportConfiguration.
     * <p>
     * Library maintainers should not set this as it will affect other code that uses Jackson.
     * Library maintainers who want to configure ErrorReportConfiguration for the Jackson usage within their
     * lib should create <code>ObjectMapper</code> instances that have a {@link JsonFactory} instance with
     * the required ErrorReportConfiguration.
     * <p>
     * This method is meant for users delivering applications. If they use this, they set it when they start
     * their application to avoid having other code initialize their mappers before the defaults are overridden.
     *
     * @param errorReportConfiguration new default for ErrorReportConfiguration (a null value will reset to built-in default)
     * @see #defaults()
     * @see #builder()","public static void overrideDefaultErrorReportConfiguration(final ErrorReportConfiguration errorReportConfiguration) {
    if (errorReportConfiguration == null) {
        DEFAULT = new ErrorReportConfiguration(DEFAULT_MAX_ERROR_TOKEN_LENGTH, DEFAULT_MAX_RAW_CONTENT_LENGTH);
    } else {
        DEFAULT = errorReportConfiguration;
    }
}","void","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.overrideDefaultErrorReportConfiguration(ErrorReportConfiguration).errorReportConfiguration","Parameter_1","Belong to com.fasterxml.jackson.core.ErrorReportConfiguration.overrideDefaultErrorReportConfiguration(ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.builder()","Method","No Comment","public static Builder builder() {
    return new Builder();
}","Builder","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.defaults()","Method","* @return the default {@link ErrorReportConfiguration} (when none is set on the {@link JsonFactory} explicitly)
     * @see #overrideDefaultErrorReportConfiguration(ErrorReportConfiguration)","public static ErrorReportConfiguration defaults() {
    return DEFAULT;
}","ErrorReportConfiguration","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.rebuild()","Method","* @return New {@link Builder} initialized with settings of configuration instance","public Builder rebuild() {
    return new Builder(this);
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.getMaxErrorTokenLength()","Method","* Accessor for {@link #_maxErrorTokenLength}
     *
     * @return Maximum length of token to include in error messages
     * @see Builder#maxErrorTokenLength(int)","public int getMaxErrorTokenLength() {
    return _maxErrorTokenLength;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.getMaxRawContentLength()","Method","* Accessor for {@link #_maxRawContentLength}
     *
     * @return Maximum length of token to include in error messages
     * @see Builder#maxRawContentLength(int)","public int getMaxRawContentLength() {
    return _maxRawContentLength;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.validateMaxErrorTokenLength(int)","Method","* Convenience method that can be used verify valid {@link #_maxErrorTokenLength}.
     * If invalid value is passed in, {@link IllegalArgumentException} is thrown.
     *
     * @param maxErrorTokenLength Maximum length of token to include in error messages","static void validateMaxErrorTokenLength(int maxErrorTokenLength) throws IllegalArgumentException {
    if (maxErrorTokenLength < 0) {
        throw new IllegalArgumentException(String.format(""Value of maxErrorTokenLength (%d) cannot be negative"", maxErrorTokenLength));
    }
}","void","static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.validateMaxErrorTokenLength(int).maxErrorTokenLength","Parameter_1","Belong to com.fasterxml.jackson.core.ErrorReportConfiguration.validateMaxErrorTokenLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.validateMaxRawContentLength(int)","Method","No Comment","static void validateMaxRawContentLength(int maxRawContentLength) {
    if (maxRawContentLength < 0) {
        throw new IllegalArgumentException(String.format(""Value of maxRawContentLength (%d) cannot be negative"", maxRawContentLength));
    }
}","void","static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.validateMaxRawContentLength(int).maxRawContentLength","Parameter_1","Belong to com.fasterxml.jackson.core.ErrorReportConfiguration.validateMaxRawContentLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.<init>(int,int)","Constructor","No Comment","protected ErrorReportConfiguration(final int maxErrorTokenLength, final int maxRawContentLength) {
    _maxErrorTokenLength = maxErrorTokenLength;
    _maxRawContentLength = maxRawContentLength;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.<init>(int,int).maxErrorTokenLength","Parameter_1","Belong to com.fasterxml.jackson.core.ErrorReportConfiguration.<init>(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.<init>(int,int).maxRawContentLength","Parameter_2","Belong to com.fasterxml.jackson.core.ErrorReportConfiguration.<init>(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration$Builder","Class","No Comment","Class do not obtain Source Code","No return type","public , static , final ","",""
"com.fasterxml.jackson.core.ErrorReportConfiguration$Builder.maxErrorTokenLength","Field","No Comment","private int maxErrorTokenLength;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration$Builder.maxRawContentLength","Field","No Comment","private int maxRawContentLength;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration$Builder.maxErrorTokenLength(int)","Method","* @param maxErrorTokenLength Maximum error token length setting to use
         *
         * @return This factory instance (to allow call chaining)
         *
         * @throws IllegalArgumentException if {@code maxErrorTokenLength} is less than 0","public Builder maxErrorTokenLength(final int maxErrorTokenLength) {
    validateMaxErrorTokenLength(maxErrorTokenLength);
    this.maxErrorTokenLength = maxErrorTokenLength;
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration$Builder.maxErrorTokenLength(int).maxErrorTokenLength","Parameter_1","Belong to com.fasterxml.jackson.core.ErrorReportConfiguration$Builder.maxErrorTokenLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration$Builder.maxRawContentLength(int)","Method","* @param maxRawContentLength Maximum raw content setting to use
         * 
         * @see ErrorReportConfiguration#_maxRawContentLength
         *
         * @return This builder instance (to allow call chaining)","public Builder maxRawContentLength(final int maxRawContentLength) {
    validateMaxRawContentLength(maxRawContentLength);
    this.maxRawContentLength = maxRawContentLength;
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration$Builder.maxRawContentLength(int).maxRawContentLength","Parameter_1","Belong to com.fasterxml.jackson.core.ErrorReportConfiguration$Builder.maxRawContentLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration$Builder.build()","Method","No Comment","public ErrorReportConfiguration build() {
    return new ErrorReportConfiguration(maxErrorTokenLength, maxRawContentLength);
}","ErrorReportConfiguration","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration$Builder.<init>()","Constructor","No Comment","Builder() {
    this(DEFAULT_MAX_ERROR_TOKEN_LENGTH, DEFAULT_MAX_RAW_CONTENT_LENGTH);
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration$Builder.<init>(int,int)","Constructor","No Comment","Builder(final int maxErrorTokenLength, final int maxRawContentLength) {
    this.maxErrorTokenLength = maxErrorTokenLength;
    this.maxRawContentLength = maxRawContentLength;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration$Builder.<init>(int,int).maxErrorTokenLength","Parameter_1","Belong to com.fasterxml.jackson.core.ErrorReportConfiguration$Builder.<init>(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration$Builder.<init>(int,int).maxRawContentLength","Parameter_2","Belong to com.fasterxml.jackson.core.ErrorReportConfiguration$Builder.<init>(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration$Builder.<init>(ErrorReportConfiguration)","Constructor","No Comment","Builder(ErrorReportConfiguration src) {
    this.maxErrorTokenLength = src._maxErrorTokenLength;
    this.maxRawContentLength = src._maxRawContentLength;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration$Builder.<init>(ErrorReportConfiguration).src","Parameter_1","Belong to com.fasterxml.jackson.core.ErrorReportConfiguration$Builder.<init>(ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.Builder","Class","No Comment","Class do not obtain Source Code","No return type","public , static , final ","",""
"com.fasterxml.jackson.core.ErrorReportConfiguration.Builder.maxErrorTokenLength","Field","No Comment","private int maxErrorTokenLength;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.Builder.maxRawContentLength","Field","No Comment","private int maxRawContentLength;","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.Builder.maxErrorTokenLength(int)","Method","* @param maxErrorTokenLength Maximum error token length setting to use
         *
         * @return This factory instance (to allow call chaining)
         *
         * @throws IllegalArgumentException if {@code maxErrorTokenLength} is less than 0","public Builder maxErrorTokenLength(final int maxErrorTokenLength) {
    validateMaxErrorTokenLength(maxErrorTokenLength);
    this.maxErrorTokenLength = maxErrorTokenLength;
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.Builder.maxErrorTokenLength(int).maxErrorTokenLength","Parameter_1","Belong to com.fasterxml.jackson.core.ErrorReportConfiguration.Builder.maxErrorTokenLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.Builder.maxRawContentLength(int)","Method","* @param maxRawContentLength Maximum raw content setting to use
         * 
         * @see ErrorReportConfiguration#_maxRawContentLength
         *
         * @return This builder instance (to allow call chaining)","public Builder maxRawContentLength(final int maxRawContentLength) {
    validateMaxRawContentLength(maxRawContentLength);
    this.maxRawContentLength = maxRawContentLength;
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.Builder.maxRawContentLength(int).maxRawContentLength","Parameter_1","Belong to com.fasterxml.jackson.core.ErrorReportConfiguration.Builder.maxRawContentLength(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.Builder.build()","Method","No Comment","public ErrorReportConfiguration build() {
    return new ErrorReportConfiguration(maxErrorTokenLength, maxRawContentLength);
}","ErrorReportConfiguration","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.Builder.<init>()","Constructor","No Comment","Builder() {
    this(DEFAULT_MAX_ERROR_TOKEN_LENGTH, DEFAULT_MAX_RAW_CONTENT_LENGTH);
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.Builder.<init>(int,int)","Constructor","No Comment","Builder(final int maxErrorTokenLength, final int maxRawContentLength) {
    this.maxErrorTokenLength = maxErrorTokenLength;
    this.maxRawContentLength = maxRawContentLength;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.Builder.<init>(int,int).maxErrorTokenLength","Parameter_1","Belong to com.fasterxml.jackson.core.ErrorReportConfiguration.Builder.<init>(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.Builder.<init>(int,int).maxRawContentLength","Parameter_2","Belong to com.fasterxml.jackson.core.ErrorReportConfiguration.Builder.<init>(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.Builder.<init>(ErrorReportConfiguration)","Constructor","No Comment","Builder(ErrorReportConfiguration src) {
    this.maxErrorTokenLength = src._maxErrorTokenLength;
    this.maxRawContentLength = src._maxRawContentLength;
}","No return type","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.ErrorReportConfiguration.Builder.<init>(ErrorReportConfiguration).src","Parameter_1","Belong to com.fasterxml.jackson.core.ErrorReportConfiguration.Builder.<init>(ErrorReportConfiguration)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation","Class","* Object that encapsulates Location information used for reporting
 * parsing (or potentially generation) errors, as well as current location
 * within input streams.
 *<p>
 * NOTE: users should be careful if using {@link #equals} implementation as
 * it may or may not compare underlying ""content reference"" for equality.
 * Instead if would make sense to explicitly implementing equality checks
 * using specific criteria caller desires.","Class do not obtain Source Code","No return type","public ","","java.io.Serializable"
"com.fasterxml.jackson.core.JsonLocation.serialVersionUID","Field","in 2.13","private static final long serialVersionUID = 2L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.MAX_CONTENT_SNIPPET","Field","* @deprecated Since 2.13 use {@link ErrorReportConfiguration#DEFAULT_MAX_RAW_CONTENT_LENGTH} instead","@Deprecated
public static final int MAX_CONTENT_SNIPPET = 500;","No return type","public , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.NA","Field","* Shared immutable ""N/A location"" that can be returned to indicate
     * that no location information is available.
     *<p>
     * NOTE: before 2.9, Location was given as String ""N/A""; with 2.9 it was
     * removed so that source should be indicated as ""UNKNOWN"".","public final static JsonLocation NA = new JsonLocation(ContentReference.unknown(), -1L, -1L, -1, -1);","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation._totalBytes","Field","No Comment","protected final long _totalBytes;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation._totalChars","Field","No Comment","protected final long _totalChars;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation._lineNr","Field","No Comment","protected final int _lineNr;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation._columnNr","Field","No Comment","protected final int _columnNr;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation._contentReference","Field","* Reference to input source; never null (but may be that of
     * {@link ContentReference#unknown()}).
     *
     * @since 2.13 (before we have {@code _sourceRef} (Object-valued)","protected final ContentReference _contentReference;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation._sourceDescription","Field","* Lazily constructed description for source; constructed if and
     * when {@link #sourceDescription()} is called, retained.
     *
     * @since 2.13","protected transient String _sourceDescription;","No return type","protected , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation._wrap(Object)","Method","No Comment","protected static ContentReference _wrap(Object srcRef) {
    if (srcRef instanceof ContentReference) {
        return (ContentReference) srcRef;
    }
    return ContentReference.construct(false, srcRef, ErrorReportConfiguration.defaults());
}","ContentReference","protected , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation._wrap(Object).srcRef","Parameter_1","Belong to com.fasterxml.jackson.core.JsonLocation._wrap(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.contentReference()","Method","* Accessor for information about the original input source content is being
     * read from. Returned reference is never {@code null} but may not contain
     * useful information.
     *<p>
     * NOTE: not getter, on purpose, to avoid inlusion if serialized using
     * default Jackson serializer.
     *
     * @return Object with information about input source.
     *
     * @since 2.13 (to replace {@code getSourceRef})","public ContentReference contentReference() {
    return _contentReference;
}","ContentReference","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.getSourceRef()","Method","* Reference to the original resource being read, if one available.
     * For example, when a parser has been constructed by passing
     * a {@link java.io.File} instance, this method would return
     * that File. Will return null if no such reference is available,
     * for example when {@link java.io.InputStream} was used to
     * construct the parser instance.
     *
     * @return Source reference this location was constructed with, if any; {@code null} if none
     *
     * @deprecated Since 2.13 Use {@link #contentReference} instead","@Deprecated
public Object getSourceRef() {
    return _contentReference.getRawContent();
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.getLineNr()","Method","* Access for getting line number of this location, if available.
     * Note that line number is typically not available for binary formats.
     *
     * @return Line number of the location (1-based), if available; {@code -1} if not.","public int getLineNr() {
    return _lineNr;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.getColumnNr()","Method","* Access for getting column offset of this location, if available.
     * Note that column position is typically not available for binary formats.
     * Note: this returns an offset that is in units of input, so for {@code byte}-based
     * input sources (like {@link java.io.InputStream}) this does not take into
     * account multi-byte characters: one logical character can be 1, 2 or 3 bytes long.
     * To calculate column position in characters either {@code char}-based input
     * source (like {@link java.io.Reader}) needs to be used, or content needs to be
     * explicitly decoded.
     *
     * @return Column offset of the location (1-based), if available; {@code -1} if not.","public int getColumnNr() {
    return _columnNr;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.getCharOffset()","Method","* @return Character offset within underlying stream, reader or writer,
     *   if available; {@code -1} if not.","public long getCharOffset() {
    return _totalChars;
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.getByteOffset()","Method","* @return Byte offset within underlying stream, reader or writer,
     *   if available; {@code -1} if not.","public long getByteOffset() {
    return _totalBytes;
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.sourceDescription()","Method","* Accessor for getting a textual description of source reference
     * (Object returned by {@link #getSourceRef()}), as included in
     * description returned by {@link #toString()}.
     *<p>
     * Note: implementation will simply call
     * {@link ContentReference#buildSourceDescription()})
     *<p>
     * NOTE: not added as a ""getter"" to prevent it from getting serialized.
     *
     * @return Description of the source reference (see {@link #getSourceRef()}
     *
     * @since 2.9","public String sourceDescription() {
    // 04-Apr-2021, tatu: Construct lazily but retain
    if (_sourceDescription == null) {
        _sourceDescription = _contentReference.buildSourceDescription();
    }
    return _sourceDescription;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.offsetDescription()","Method","* Accessor for a brief summary of Location offsets (line number, column position,
     * or byte offset, if available).
     *
     * @return Description of available relevant location offsets; combination of
     *    line number and column position or byte offset
     *
     * @since 2.13","public String offsetDescription() {
    return appendOffsetDescription(new StringBuilder(40)).toString();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.appendOffsetDescription(StringBuilder)","Method","@since 2.13","public StringBuilder appendOffsetDescription(StringBuilder sb) {
    // 04-Apr-2021, tatu: [core#694] For binary content, we have no line
    //    number or column position indicators; try using what we do have
    //    (if anything)
    if (_contentReference.hasTextualContent()) {
        sb.append(""line: "");
        // should be 1-based, but consider -1 to be canonical ""got none""
        if (_lineNr >= 0) {
            sb.append(_lineNr);
        } else {
            sb.append(""UNKNOWN"");
        }
        sb.append("", column: "");
        if (_columnNr >= 0) {
            // same here
            sb.append(_columnNr);
        } else {
            sb.append(""UNKNOWN"");
        }
    } else {
        // 04-Apr-2021, tatu: Ideally byte formats would not need line/column
        //    info, but for backwards-compatibility purposes (Jackson 2.x),
        //    will leave logic here
        if (_lineNr > 0) {
            // yes, require 1-based in case of allegedly binary content
            sb.append(""line: "").append(_lineNr);
            if (_columnNr > 0) {
                sb.append("", column: "");
                sb.append(_columnNr);
            }
        } else {
            sb.append(""byte offset: #"");
            // For binary formats, total bytes should be the canonical offset
            // for token/current location
            if (_totalBytes >= 0) {
                sb.append(_totalBytes);
            } else {
                sb.append(""UNKNOWN"");
            }
        }
    }
    return sb;
}","StringBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.appendOffsetDescription(StringBuilder).sb","Parameter_1","Belong to com.fasterxml.jackson.core.JsonLocation.appendOffsetDescription(StringBuilder)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.hashCode()","Method","No Comment","@Override
public int hashCode() {
    int hash = (_contentReference == null) ? 1 : 2;
    hash ^= _lineNr;
    hash += _columnNr;
    hash ^= (int) _totalChars;
    hash += (int) _totalBytes;
    return hash;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.equals(Object)","Method","No Comment","@Override
public boolean equals(Object other) {
    if (other == this)
        return true;
    if (other == null)
        return false;
    if (!(other instanceof JsonLocation))
        return false;
    JsonLocation otherLoc = (JsonLocation) other;
    if (_contentReference == null) {
        if (otherLoc._contentReference != null)
            return false;
    } else if (!_contentReference.equals(otherLoc._contentReference)) {
        return false;
    }
    return (_lineNr == otherLoc._lineNr) && (_columnNr == otherLoc._columnNr) && (_totalChars == otherLoc._totalChars) && (_totalBytes == otherLoc._totalBytes);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.equals(Object).other","Parameter_1","Belong to com.fasterxml.jackson.core.JsonLocation.equals(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.toString()","Method","No Comment","@Override
public String toString() {
    final String srcDesc = sourceDescription();
    StringBuilder sb = new StringBuilder(40 + srcDesc.length()).append(""[Source: "").append(srcDesc).append(""; "");
    return appendOffsetDescription(sb).append(']').toString();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(ContentReference,long,int,int)","Constructor","No Comment","public JsonLocation(ContentReference contentRef, long totalChars, int lineNr, int colNr) {
    this(contentRef, -1L, totalChars, lineNr, colNr);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(ContentReference,long,int,int).contentRef","Parameter_1","Belong to com.fasterxml.jackson.core.JsonLocation.<init>(ContentReference,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(ContentReference,long,int,int).totalChars","Parameter_2","Belong to com.fasterxml.jackson.core.JsonLocation.<init>(ContentReference,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(ContentReference,long,int,int).lineNr","Parameter_3","Belong to com.fasterxml.jackson.core.JsonLocation.<init>(ContentReference,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(ContentReference,long,int,int).colNr","Parameter_4","Belong to com.fasterxml.jackson.core.JsonLocation.<init>(ContentReference,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(ContentReference,long,long,int,int)","Constructor","No Comment","public JsonLocation(ContentReference contentRef, long totalBytes, long totalChars, int lineNr, int columnNr) {
    // 14-Mar-2021, tatu: Defensive programming, but also for convenience...
    if (contentRef == null) {
        contentRef = ContentReference.unknown();
    }
    _contentReference = contentRef;
    _totalBytes = totalBytes;
    _totalChars = totalChars;
    _lineNr = lineNr;
    _columnNr = columnNr;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(ContentReference,long,long,int,int).contentRef","Parameter_1","Belong to com.fasterxml.jackson.core.JsonLocation.<init>(ContentReference,long,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(ContentReference,long,long,int,int).totalBytes","Parameter_2","Belong to com.fasterxml.jackson.core.JsonLocation.<init>(ContentReference,long,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(ContentReference,long,long,int,int).totalChars","Parameter_3","Belong to com.fasterxml.jackson.core.JsonLocation.<init>(ContentReference,long,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(ContentReference,long,long,int,int).lineNr","Parameter_4","Belong to com.fasterxml.jackson.core.JsonLocation.<init>(ContentReference,long,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(ContentReference,long,long,int,int).columnNr","Parameter_5","Belong to com.fasterxml.jackson.core.JsonLocation.<init>(ContentReference,long,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(Object,long,int,int)","Constructor","No Comment","// since 2.13
@Deprecated
public JsonLocation(Object srcRef, long totalChars, int lineNr, int columnNr) {
    this(_wrap(srcRef), totalChars, lineNr, columnNr);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(Object,long,int,int).srcRef","Parameter_1","Belong to com.fasterxml.jackson.core.JsonLocation.<init>(Object,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(Object,long,int,int).totalChars","Parameter_2","Belong to com.fasterxml.jackson.core.JsonLocation.<init>(Object,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(Object,long,int,int).lineNr","Parameter_3","Belong to com.fasterxml.jackson.core.JsonLocation.<init>(Object,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(Object,long,int,int).columnNr","Parameter_4","Belong to com.fasterxml.jackson.core.JsonLocation.<init>(Object,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(Object,long,long,int,int)","Constructor","No Comment","// since 2.13
@Deprecated
public JsonLocation(Object srcRef, long totalBytes, long totalChars, int lineNr, int columnNr) {
    this(_wrap(srcRef), totalBytes, totalChars, lineNr, columnNr);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(Object,long,long,int,int).srcRef","Parameter_1","Belong to com.fasterxml.jackson.core.JsonLocation.<init>(Object,long,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(Object,long,long,int,int).totalBytes","Parameter_2","Belong to com.fasterxml.jackson.core.JsonLocation.<init>(Object,long,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(Object,long,long,int,int).totalChars","Parameter_3","Belong to com.fasterxml.jackson.core.JsonLocation.<init>(Object,long,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(Object,long,long,int,int).lineNr","Parameter_4","Belong to com.fasterxml.jackson.core.JsonLocation.<init>(Object,long,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.core.JsonLocation.<init>(Object,long,long,int,int).columnNr","Parameter_5","Belong to com.fasterxml.jackson.core.JsonLocation.<init>(Object,long,long,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
