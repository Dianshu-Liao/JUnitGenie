FEN:ID,:LABEL,Comment,Source Code,Signature,Modifiers
com.fasterxml.jackson.core.StreamWriteCapability.CAN_WRITE_BINARY_NATIVELY,Enum Constant,"* Capability that indicates that the data format is able to express binary\n     * data natively, without using textual encoding like Base64.\n     *<p>\n     * Capability is currently enabled for all binary formats and none of textual\n     * formats.",CAN_WRITE_BINARY_NATIVELY(false),com.fasterxml.jackson.core.StreamWriteCapability CAN_WRITE_BINARY_NATIVELY,public 
com.fasterxml.jackson.core.StreamWriteCapability.CAN_WRITE_FORMATTED_NUMBERS,Enum Constant,"* Capability that indicates that the data format is able to write\n     * ""formatted numbers"": that is, output of numbers is done as Strings\n     * and caller is allowed to pass in logical number values as Strings.\n     *<p>\n     * Capability is currently enabled for most textual formats and none of binary\n     * formats.",CAN_WRITE_FORMATTED_NUMBERS(false),com.fasterxml.jackson.core.StreamWriteCapability CAN_WRITE_FORMATTED_NUMBERS,public 
com.fasterxml.jackson.core.util.Separators$Spacing.NONE,Enum Constant,No Comment,"NONE("""", """")",com.fasterxml.jackson.core.util.Separators$Spacing NONE,public 
com.fasterxml.jackson.core.util.Separators$Spacing.BEFORE,Enum Constant,No Comment,"BEFORE("" "", """")",com.fasterxml.jackson.core.util.Separators$Spacing BEFORE,public 
com.fasterxml.jackson.core.util.Separators$Spacing.AFTER,Enum Constant,No Comment,"AFTER("""", "" "")",com.fasterxml.jackson.core.util.Separators$Spacing AFTER,public 
com.fasterxml.jackson.core.util.Separators$Spacing.BOTH,Enum Constant,No Comment,"BOTH("" "", "" "")",com.fasterxml.jackson.core.util.Separators$Spacing BOTH,public 
com.fasterxml.jackson.core.JsonToken.NOT_AVAILABLE,Enum Constant,"* NOT_AVAILABLE can be returned if {@link JsonParser}\n     * implementation cannot currently return the requested\n     * token (usually next one), or even if any will be\n     * available, but that may be able to determine this in\n     * future. This is the case with non-blocking parsers --\n     * they cannot block to wait for more data to parse and\n     * must return something.","NOT_AVAILABLE(null, JsonTokenId.ID_NOT_AVAILABLE)",com.fasterxml.jackson.core.JsonToken NOT_AVAILABLE,public 
com.fasterxml.jackson.core.JsonToken.START_OBJECT,Enum Constant,* START_OBJECT is returned when encountering '{'\n     * which signals starting of an Object value.,"START_OBJECT(""{"", JsonTokenId.ID_START_OBJECT)",com.fasterxml.jackson.core.JsonToken START_OBJECT,public 
com.fasterxml.jackson.core.JsonToken.END_OBJECT,Enum Constant,* END_OBJECT is returned when encountering '}'\n     * which signals ending of an Object value,"END_OBJECT(""}"", JsonTokenId.ID_END_OBJECT)",com.fasterxml.jackson.core.JsonToken END_OBJECT,public 
com.fasterxml.jackson.core.JsonToken.START_ARRAY,Enum Constant,* START_ARRAY is returned when encountering '['\n     * which signals starting of an Array value,"START_ARRAY(""["", JsonTokenId.ID_START_ARRAY)",com.fasterxml.jackson.core.JsonToken START_ARRAY,public 
com.fasterxml.jackson.core.JsonToken.END_ARRAY,Enum Constant,* END_ARRAY is returned when encountering ']'\n     * which signals ending of an Array value,"END_ARRAY(""]"", JsonTokenId.ID_END_ARRAY)",com.fasterxml.jackson.core.JsonToken END_ARRAY,public 
com.fasterxml.jackson.core.JsonToken.FIELD_NAME,Enum Constant,"* FIELD_NAME is returned when a String token is encountered\n     * as a field name (same lexical value, different function).\n     *<p>\n     * NOTE: in Jackson 3.x this enum is renamed as {@code PROPERTY_NAME}","FIELD_NAME(null, JsonTokenId.ID_FIELD_NAME)",com.fasterxml.jackson.core.JsonToken FIELD_NAME,public 
com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT,Enum Constant,"* Placeholder token returned when the input source has a concept\n     * of embedded Object that are not accessible as usual structure\n     * (of starting with {@link #START_OBJECT}, having values, ending with\n     * {@link #END_OBJECT}), but as ""raw"" objects.\n     *<p>\n     * Note: this token is never returned by regular JSON readers, but\n     * only by readers that expose other kinds of source (like\n     * <code>JsonNode</code>-based JSON trees, Maps, Lists and such).","VALUE_EMBEDDED_OBJECT(null, JsonTokenId.ID_EMBEDDED_OBJECT)",com.fasterxml.jackson.core.JsonToken VALUE_EMBEDDED_OBJECT,public 
com.fasterxml.jackson.core.JsonToken.VALUE_STRING,Enum Constant,"* VALUE_STRING is returned when a String token is encountered\n     * in value context (array element, field value, or root-level\n     * stand-alone value)","VALUE_STRING(null, JsonTokenId.ID_STRING)",com.fasterxml.jackson.core.JsonToken VALUE_STRING,public 
com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT,Enum Constant,"* VALUE_NUMBER_INT is returned when an integer numeric token is\n     * encountered in value context: that is, a number that does\n     * not have floating point or exponent marker in it (consists\n     * only of an optional sign, followed by one or more digits;\n     * or, for binary formats, is indicated as integral number\n     * by internal representation).","VALUE_NUMBER_INT(null, JsonTokenId.ID_NUMBER_INT)",com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT,public 
com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT,Enum Constant,"* VALUE_NUMBER_FLOAT is returned when a numeric token other\n     * than integer is encountered: that is, a number that does\n     * have floating point or exponent marker in it, in addition\n     * to one or more digits (or, for non-textual formats,\n     * has internal floating-point representation).","VALUE_NUMBER_FLOAT(null, JsonTokenId.ID_NUMBER_FLOAT)",com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT,public 
com.fasterxml.jackson.core.JsonToken.VALUE_TRUE,Enum Constant,"* VALUE_TRUE is returned when encountering literal ""true"" in\n     * value context","VALUE_TRUE(""true"", JsonTokenId.ID_TRUE)",com.fasterxml.jackson.core.JsonToken VALUE_TRUE,public 
com.fasterxml.jackson.core.JsonToken.VALUE_FALSE,Enum Constant,"* VALUE_FALSE is returned when encountering literal ""false"" in\n     * value context","VALUE_FALSE(""false"", JsonTokenId.ID_FALSE)",com.fasterxml.jackson.core.JsonToken VALUE_FALSE,public 
com.fasterxml.jackson.core.JsonToken.VALUE_NULL,Enum Constant,"* VALUE_NULL is returned when encountering literal ""null"" in\n     * value context","VALUE_NULL(""null"", JsonTokenId.ID_NULL)",com.fasterxml.jackson.core.JsonToken VALUE_NULL,public 
com.fasterxml.jackson.core.JsonFactory$Feature.INTERN_FIELD_NAMES,Enum Constant,"* Feature that determines whether JSON object field names are\n         * to be canonicalized using {@link String#intern} or not:\n         * if enabled, all field names will be intern()ed (and caller\n         * can count on this being true for all such names); if disabled,\n         * no intern()ing is done. There may still be basic\n         * canonicalization (that is, same String will be used to represent\n         * all identical object property names for a single document).\n         *<p>\n         * Note: this setting only has effect if\n         * {@link #CANONICALIZE_FIELD_NAMES} is true -- otherwise no\n         * canonicalization of any sort is done.\n         *<p>\n         * This setting is enabled by default.",INTERN_FIELD_NAMES(true),com.fasterxml.jackson.core.JsonFactory$Feature INTERN_FIELD_NAMES,public 
com.fasterxml.jackson.core.JsonFactory$Feature.CANONICALIZE_FIELD_NAMES,Enum Constant,* Feature that determines whether JSON object field names are\n         * to be canonicalized (details of how canonicalization is done\n         * then further specified by\n         * {@link #INTERN_FIELD_NAMES}).\n         *<p>\n         * This setting is enabled by default.,CANONICALIZE_FIELD_NAMES(true),com.fasterxml.jackson.core.JsonFactory$Feature CANONICALIZE_FIELD_NAMES,public 
com.fasterxml.jackson.core.JsonFactory$Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW,Enum Constant,"* Feature that determines what happens if we encounter a case in symbol\n         * handling where number of hash collisions exceeds a safety threshold\n         * -- which almost certainly means a denial-of-service attack via generated\n         * duplicate hash codes.\n         * If feature is enabled, an {@link IllegalStateException} is\n         * thrown to indicate the suspected denial-of-service attack; if disabled, processing continues but\n         * canonicalization (and thereby <code>intern()</code>ing) is disabled) as protective\n         * measure.\n         *<p>\n         * This setting is enabled by default.\n         *\n         * @since 2.4",FAIL_ON_SYMBOL_HASH_OVERFLOW(true),com.fasterxml.jackson.core.JsonFactory$Feature FAIL_ON_SYMBOL_HASH_OVERFLOW,public 
com.fasterxml.jackson.core.JsonFactory$Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING,Enum Constant,"* Feature that determines whether we will use a {@link RecyclerPool}\n         * for allocating and possibly recycling {@link BufferRecycler} or not.\n         * The default {@link RecyclerPool} implementation uses\n         * {@link ThreadLocal} and {@link SoftReference} for efficient reuse of\n         * underlying input/output buffers.\n         * This usually makes sense on normal J2SE/J2EE server-side processing;\n         * but may not make sense on platforms where {@link SoftReference} handling\n         * is broken (like Android), or if there are retention issues due to\n         * {@link ThreadLocal} (see\n         * <a href=""https://github.com/FasterXML/jackson-core/issues/189"">jackson-core#189</a>\n         * for a possible case)\n         *<p>\n         * Note that since 2.16 naming here is somewhat misleading as this is used\n         * to now enable or disable pooling; but the actual pooling implementation\n         * is configurable and may not be based on {@link ThreadLocal}.\n         *<p>\n         * This setting is enabled by default.\n         *\n         * @since 2.6",USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING(true),com.fasterxml.jackson.core.JsonFactory$Feature USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING,public 
com.fasterxml.jackson.core.JsonFactory$Feature.CHARSET_DETECTION,Enum Constant,"* Feature to control charset detection for byte-based inputs ({@code byte[]}, {@link InputStream}...).\n         * When this feature is enabled (the default), the factory will allow UTF-16 and UTF-32 inputs and try to detect\n         * them, as specified by RFC 4627. When this feature is disabled the factory will assume UTF-8,\n         * as specified by RFC 8259.\n         *<p>\n         * This setting is enabled by default.\n         *\n         * @since 2.15",CHARSET_DETECTION(true),com.fasterxml.jackson.core.JsonFactory$Feature CHARSET_DETECTION,public 
com.fasterxml.jackson.core.json.JsonWriteFeature.QUOTE_FIELD_NAMES,Enum Constant,"* Feature that determines whether JSON Object field names are\n     * quoted using double-quotes, as specified by JSON specification\n     * or not. Ability to disable quoting was added to support use\n     * cases where they are not usually expected, which most commonly\n     * occurs when used straight from Javascript.\n     *<p>\n     * Feature is enabled by default (since it is required by JSON specification).","@SuppressWarnings(""deprecation"")\nQUOTE_FIELD_NAMES(true, JsonGenerator.Feature.QUOTE_FIELD_NAMES)",com.fasterxml.jackson.core.json.JsonWriteFeature QUOTE_FIELD_NAMES,public 
com.fasterxml.jackson.core.json.JsonWriteFeature.WRITE_NAN_AS_STRINGS,Enum Constant,"* Feature that determines whether ""NaN"" (""not a number"", that is, not\n     * real number) float/double values are output as JSON strings.\n     * The values checked are Double.Nan,\n     * Double.POSITIVE_INFINITY and Double.NEGATIVE_INIFINTY (and\n     * associated Float values).\n     * If feature is disabled, these numbers are still output using\n     * associated literal values, resulting in non-conforming\n     * output.\n     *<p>\n     * Feature is enabled by default.","@SuppressWarnings(""deprecation"")\nWRITE_NAN_AS_STRINGS(true, JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS)",com.fasterxml.jackson.core.json.JsonWriteFeature WRITE_NAN_AS_STRINGS,public 
com.fasterxml.jackson.core.json.JsonWriteFeature.WRITE_NUMBERS_AS_STRINGS,Enum Constant,"* Feature that forces all regular number values to be written as JSON Strings,\n     * instead of as JSON Numbers.\n     * Default state is 'false', meaning that Java numbers are to\n     * be serialized using basic numeric representation but\n     * if enabled all such numeric values are instead written out as\n     * JSON Strings instead.\n     *<p>\n     * One use case is to avoid problems with Javascript limitations:\n     * since Javascript standard specifies that all number handling\n     * should be done using 64-bit IEEE 754 floating point values,\n     * result being that some 64-bit integer values cannot be\n     * accurately represent (as mantissa is only 51 bit wide).\n     *<p>\n     * Feature is disabled by default.","@SuppressWarnings(""deprecation"")\nWRITE_NUMBERS_AS_STRINGS(false, JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS)",com.fasterxml.jackson.core.json.JsonWriteFeature WRITE_NUMBERS_AS_STRINGS,public 
com.fasterxml.jackson.core.json.JsonWriteFeature.ESCAPE_NON_ASCII,Enum Constant,"* Feature that specifies that all characters beyond 7-bit ASCII\n     * range (i.e. code points of 128 and above) need to be output\n     * using format-specific escapes (for JSON, backslash escapes),\n     * if format uses escaping mechanisms (which is generally true\n     * for textual formats but not for binary formats).\n     *<p>\n     * Feature is disabled by default.","@SuppressWarnings(""deprecation"")\nESCAPE_NON_ASCII(false, JsonGenerator.Feature.ESCAPE_NON_ASCII)",com.fasterxml.jackson.core.json.JsonWriteFeature ESCAPE_NON_ASCII,public 
com.fasterxml.jackson.core.json.JsonWriteFeature.WRITE_HEX_UPPER_CASE,Enum Constant,"* Feature that specifies that hex values are encoded with capital letters.\n     *<p>\n     * Can be disabled to have a better possibility to compare between other JSON\n     * writer libraries, such as JSON.stringify from Javascript.\n     *<p>\n     * Feature is enabled by default for backwards compatibility with earlier\n     * versions.\n     *\n     * @since 2.14","@SuppressWarnings(""deprecation"")\nWRITE_HEX_UPPER_CASE(true, JsonGenerator.Feature.WRITE_HEX_UPPER_CASE)",com.fasterxml.jackson.core.json.JsonWriteFeature WRITE_HEX_UPPER_CASE,public 
com.fasterxml.jackson.core.json.JsonWriteFeature.ESCAPE_FORWARD_SLASHES,Enum Constant,"* Feature that specifies whether {@link JsonGenerator} should escape forward slashes.\n     * <p>\n     * Feature is disabled by default for Jackson 2.x version, and enabled by default in Jackson 3.0.\n     *\n     * @since 2.17","ESCAPE_FORWARD_SLASHES(false, JsonGenerator.Feature.ESCAPE_FORWARD_SLASHES)",com.fasterxml.jackson.core.json.JsonWriteFeature ESCAPE_FORWARD_SLASHES,public 
com.fasterxml.jackson.core.json.JsonWriteFeature.COMBINE_UNICODE_SURROGATES_IN_UTF8,Enum Constant,"* Feature that specifies how characters outside ""Basic Multilingual Plane"" (BMP) -- ones encoded\n     * as 4-byte UTF-8 sequences but represented in JVM memory as 2 16-bit ""surrogate"" {@code chars} --\n     * should be encoded as UTF-8 by {@link JsonGenerator}.\n     * If enabled, surrogate pairs are combined and flushed as a\n     * single, 4-byte UTF-8 character.\n     * If disabled, each {@code char} of pair is written as 2 separate characters: that is, as 2\n     * separate 3-byte UTF-8 characters with values in Surrogate character ranges\n     * ({@code 0xD800} - {@code 0xDBFF} and {@code 0xDC00} - {@code 0xDFFF})\n     * <p>\n     * Note that this feature only has effect for {@link JsonGenerator}s that directly encode\n     * {@code byte}-based output, as UTF-8 (target {@link java.io.OutputStream}, {@code byte[]}\n     * and so on); it will not (cannot) change handling of\n     * {@code char}-based output (like {@link java.io.Writer} or {@link java.lang.String}).\n     * <p>\n     * Feature is disabled by default in 2.x for backwards-compatibility (will be enabled\n     * in 3.0).\n     *\n     * @since 2.18","COMBINE_UNICODE_SURROGATES_IN_UTF8(false, JsonGenerator.Feature.COMBINE_UNICODE_SURROGATES_IN_UTF8)",com.fasterxml.jackson.core.json.JsonWriteFeature COMBINE_UNICODE_SURROGATES_IN_UTF8,public 
com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_JAVA_COMMENTS,Enum Constant,"* Feature that determines whether parser will allow use\n     * of Java/C/C++ style comments (both '/'+'*' and\n     * '//' varieties) within parsed content or not.\n     *<p>\n     * Since JSON specification does not mention comments as legal\n     * construct,\n     * this is a non-standard feature; however, in the wild\n     * this is extensively used. As such, feature is\n     * <b>disabled by default</b> for parsers and must be\n     * explicitly enabled.","ALLOW_JAVA_COMMENTS(false, JsonParser.Feature.ALLOW_COMMENTS)",com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_JAVA_COMMENTS,public 
com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_YAML_COMMENTS,Enum Constant,"* Feature that determines whether parser will allow use\n     * of YAML comments, ones starting with '#' and continuing\n     * until the end of the line. This commenting style is common\n     * with scripting languages as well.\n     *<p>\n     * Since JSON specification does not mention comments as legal\n     * construct,\n     * this is a non-standard feature. As such, feature is\n     * <b>disabled by default</b> for parsers and must be\n     * explicitly enabled.","ALLOW_YAML_COMMENTS(false, JsonParser.Feature.ALLOW_YAML_COMMENTS)",com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_YAML_COMMENTS,public 
com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_SINGLE_QUOTES,Enum Constant,"* Feature that determines whether parser will allow use\n     * of single quotes (apostrophe, character '\'') for\n     * quoting Strings (names and String values). If so,\n     * this is in addition to other acceptable markers.\n     *<p>\n     * Since JSON specification requires use of double quotes for\n     * field names,\n     * this is a non-standard feature, and as such disabled by default.","ALLOW_SINGLE_QUOTES(false, JsonParser.Feature.ALLOW_SINGLE_QUOTES)",com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_SINGLE_QUOTES,public 
com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES,Enum Constant,"* Feature that determines whether parser will allow use\n     * of unquoted field names (which is allowed by Javascript,\n     * but not by JSON specification).\n     *<p>\n     * Since JSON specification requires use of double quotes for\n     * field names,\n     * this is a non-standard feature, and as such disabled by default.","ALLOW_UNQUOTED_FIELD_NAMES(false, JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES)",com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_UNQUOTED_FIELD_NAMES,public 
com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS,Enum Constant,"* Feature that determines whether parser will allow\n     * JSON Strings to contain unescaped control characters\n     * (ASCII characters with value less than 32, including\n     * tab and line feed characters) or not.\n     * If feature is set false, an exception is thrown if such a\n     * character is encountered.\n     *<p>\n     * Since JSON specification requires quoting for all control characters,\n     * this is a non-standard feature, and as such disabled by default.","@SuppressWarnings(""deprecation"")\nALLOW_UNESCAPED_CONTROL_CHARS(false, JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS)",com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_UNESCAPED_CONTROL_CHARS,public 
com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER,Enum Constant,"* Feature that can be enabled to accept quoting of all character\n     * using backslash quoting mechanism: if not enabled, only characters\n     * that are explicitly listed by JSON specification can be thus\n     * escaped (see JSON spec for small list of these characters)\n     *<p>\n     * Since JSON specification requires quoting for all control characters,\n     * this is a non-standard feature, and as such disabled by default.","@SuppressWarnings(""deprecation"")\nALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER(false, JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER)",com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER,public 
com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS,Enum Constant,"* Feature that determines whether parser will allow\n     * JSON integral numbers to start with additional (ignorable)\n     * zeroes (like: 000001). If enabled, no exception is thrown, and extra\n     * nulls are silently ignored (and not included in textual representation\n     * exposed via {@link JsonParser#getText}).\n     *<p>\n     * Since JSON specification does not allow leading zeroes,\n     * this is a non-standard feature, and as such disabled by default.","@SuppressWarnings(""deprecation"")\nALLOW_LEADING_ZEROS_FOR_NUMBERS(false, JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS)",com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_ZEROS_FOR_NUMBERS,public 
com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS,Enum Constant,"* Feature that determines whether parser will allow\n     * JSON decimal numbers to start with a plus sign\n     * (like: +123). If enabled, no exception is thrown, and the number\n     * is parsed as though a leading sign had not been present.\n     *<p>\n     * Since JSON specification does not allow leading plus signs,\n     * this is a non-standard feature, and as such disabled by default.\n     *\n     * @since 2.14","@SuppressWarnings(""deprecation"")\nALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS(false, JsonParser.Feature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS)",com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS,public 
com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS,Enum Constant,"* Feature that determines whether parser will allow\n     * JSON decimal numbers to start with a decimal point\n     * (like: .123). If enabled, no exception is thrown, and the number\n     * is parsed as though a leading 0 had been present.\n     *<p>\n     * Since JSON specification does not allow leading decimal points,\n     * this is a non-standard feature, and as such disabled by default.\n     *\n     * @since 2.11","@SuppressWarnings(""deprecation"")\nALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS(false, JsonParser.Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS)",com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS,public 
com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS,Enum Constant,"* Feature that determines whether parser will allow\n     * JSON decimal numbers to end with a decimal point\n     * (like: 123.). If enabled, no exception is thrown, and the number\n     * is parsed as though the trailing decimal point had not been present.\n     *<p>\n     * Since JSON specification does not allow trailing decimal points,\n     * this is a non-standard feature, and as such disabled by default.\n     *\n     * @since 2.14","@SuppressWarnings(""deprecation"")\nALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS(false, JsonParser.Feature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS)",com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS,public 
com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS,Enum Constant,"* Feature that allows parser to recognize set of\n     * ""Not-a-Number"" (NaN) tokens as legal floating number\n     * values (similar to how many other data formats and\n     * programming language source code allows it).\n     * Specific subset contains values that\n     * <a href=""http://www.w3.org/TR/xmlschema-2/"">XML Schema</a>\n     * (see section 3.2.4.1, Lexical Representation)\n     * allows (tokens are quoted contents, not including quotes):\n     *<ul>\n     *  <li>""INF"" (for positive infinity), as well as alias of ""Infinity""\n     *  <li>""-INF"" (for negative infinity), alias ""-Infinity""\n     *  <li>""NaN"" (for other not-a-numbers, like result of division by zero)\n     *</ul>\n     *<p>\n     * Since JSON specification does not allow use of such values,\n     * this is a non-standard feature, and as such disabled by default.","@SuppressWarnings(""deprecation"")\nALLOW_NON_NUMERIC_NUMBERS(false, JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS)",com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_NON_NUMERIC_NUMBERS,public 
com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_MISSING_VALUES,Enum Constant,"* Feature allows the support for ""missing"" values in a JSON array: missing\n     * value meaning sequence of two commas, without value in-between but only\n     * optional white space.\n     * Enabling this feature will expose ""missing"" values as {@link JsonToken#VALUE_NULL}\n     * tokens, which typically become Java nulls in arrays and {@link java.util.Collection}\n     * in data-binding.\n     * <p>\n     * For example, enabling this feature will represent a JSON array <code>[""value1"",,""value3"",]</code>\n     * as <code>[""value1"", null, ""value3"", null]</code>\n     * <p>\n     * Since the JSON specification does not allow missing values this is a non-compliant JSON\n     * feature and is disabled by default.","@SuppressWarnings(""deprecation"")\nALLOW_MISSING_VALUES(false, JsonParser.Feature.ALLOW_MISSING_VALUES)",com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_MISSING_VALUES,public 
com.fasterxml.jackson.core.json.JsonReadFeature.ALLOW_TRAILING_COMMA,Enum Constant,"* Feature that determines whether {@link JsonParser} will allow for a single trailing\n     * comma following the final value (in an Array) or member (in an Object). These commas\n     * will simply be ignored.\n     * <p>\n     * For example, when this feature is enabled, <code>[true,true,]</code> is equivalent to\n     * <code>[true, true]</code> and <code>{""a"": true,}</code> is equivalent to\n     * <code>{""a"": true}</code>.\n     * <p>\n     * When combined with <code>ALLOW_MISSING_VALUES</code>, this feature takes priority, and\n     * the final trailing comma in an array declaration does not imply a missing\n     * (<code>null</code>) value. For example, when both <code>ALLOW_MISSING_VALUES</code>\n     * and <code>ALLOW_TRAILING_COMMA</code> are enabled, <code>[true,true,]</code> is\n     * equivalent to <code>[true, true]</code>, and <code>[true,true,,]</code> is equivalent to\n     * <code>[true, true, null]</code>.\n     * <p>\n     * Since the JSON specification does not permit trailing commas, this is a non-standard\n     * feature, and as such disabled by default.","@SuppressWarnings(""deprecation"")\nALLOW_TRAILING_COMMA(false, JsonParser.Feature.ALLOW_TRAILING_COMMA)",com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_TRAILING_COMMA,public 
com.fasterxml.jackson.core.type.WritableTypeId$Inclusion.WRAPPER_ARRAY,Enum Constant,"* Inclusion as wrapper Array (1st element type id, 2nd element value).\n         *<p>\n         * Corresponds to <code>JsonTypeInfo.As.WRAPPER_ARRAY</code>.",WRAPPER_ARRAY,com.fasterxml.jackson.core.type.WritableTypeId$Inclusion WRAPPER_ARRAY,public 
com.fasterxml.jackson.core.type.WritableTypeId$Inclusion.WRAPPER_OBJECT,Enum Constant,* Inclusion as wrapper Object that has one key/value pair where type id\n         * is the key for typed value.\n         *<p>\n         * Corresponds to <code>JsonTypeInfo.As.WRAPPER_OBJECT</code>.,WRAPPER_OBJECT,com.fasterxml.jackson.core.type.WritableTypeId$Inclusion WRAPPER_OBJECT,public 
com.fasterxml.jackson.core.type.WritableTypeId$Inclusion.METADATA_PROPERTY,Enum Constant,"* Inclusion as a property within Object to write, but logically as separate\n         * metadata that is not exposed as payload to caller: that is, does not match\n         * any of visible properties value object has.\n         *<p>\n         * NOTE: if shape of typed value to write is NOT Object, will instead use\n         * {@link #WRAPPER_ARRAY} inclusion.\n         *<p>\n         * Corresponds to <code>JsonTypeInfo.As.PROPERTY</code>.",METADATA_PROPERTY,com.fasterxml.jackson.core.type.WritableTypeId$Inclusion METADATA_PROPERTY,public 
com.fasterxml.jackson.core.type.WritableTypeId$Inclusion.PAYLOAD_PROPERTY,Enum Constant,"* Inclusion as a ""regular"" property within Object to write; this implies that\n         * its value should come from regular POJO property on serialization, and\n         * be deserialized into such property. This handling, however, is up to databinding.\n         *<p>\n         * Regarding handling, type id is ONLY written as native type id; if no native\n         * type ids available, caller is assumed to handle output some other way.\n         * This is different from {@link #METADATA_PROPERTY}.\n         *<p>\n         * NOTE: if shape of typed value to write is NOT Object, will instead use\n         * {@link #WRAPPER_ARRAY} inclusion.\n         *<p>\n         * Corresponds to <code>JsonTypeInfo.As.EXISTING_PROPERTY</code>.",PAYLOAD_PROPERTY,com.fasterxml.jackson.core.type.WritableTypeId$Inclusion PAYLOAD_PROPERTY,public 
com.fasterxml.jackson.core.type.WritableTypeId$Inclusion.PARENT_PROPERTY,Enum Constant,"* Inclusion as a property within ""parent"" Object of value Object to write.\n         * This typically requires slightly convoluted processing in which property\n         * that contains type id is actually written <b>after</b> typed value object\n         * itself is written.\n         *<br>\n         * Note that it is illegal to call write method if the current (parent) write context\n         * is not Object: no coercion is done for other inclusion types (unlike with\n         * other <code>xxx_PROPERTY</code> choices.\n         * This also means that root values MAY NOT use this type id inclusion mechanism\n         * (as they have no parent context).\n         *<p>\n         * Corresponds to <code>JsonTypeInfo.As.EXTERNAL_PROPERTY</code>.",PARENT_PROPERTY,com.fasterxml.jackson.core.type.WritableTypeId$Inclusion PARENT_PROPERTY,public 
com.fasterxml.jackson.core.JsonEncoding.UTF8,Enum Constant,"N/A for big-endian, really","UTF8(""UTF-8"", false, 8)",com.fasterxml.jackson.core.JsonEncoding UTF8,public 
com.fasterxml.jackson.core.JsonEncoding.UTF16_BE,Enum Constant,No Comment,"UTF16_BE(""UTF-16BE"", true, 16)",com.fasterxml.jackson.core.JsonEncoding UTF16_BE,public 
com.fasterxml.jackson.core.JsonEncoding.UTF16_LE,Enum Constant,No Comment,"UTF16_LE(""UTF-16LE"", false, 16)",com.fasterxml.jackson.core.JsonEncoding UTF16_LE,public 
com.fasterxml.jackson.core.JsonEncoding.UTF32_BE,Enum Constant,No Comment,"UTF32_BE(""UTF-32BE"", true, 32)",com.fasterxml.jackson.core.JsonEncoding UTF32_BE,public 
com.fasterxml.jackson.core.JsonEncoding.UTF32_LE,Enum Constant,No Comment,"UTF32_LE(""UTF-32LE"", false, 32)",com.fasterxml.jackson.core.JsonEncoding UTF32_LE,public 
com.fasterxml.jackson.core.StreamReadFeature.AUTO_CLOSE_SOURCE,Enum Constant,"* Feature that determines whether parser will automatically\n     * close underlying input source that is NOT owned by the\n     * parser. If disabled, calling application has to separately\n     * close the underlying {@link InputStream} and {@link Reader}\n     * instances used to create the parser. If enabled, parser\n     * will handle closing, as long as parser itself gets closed:\n     * this happens when end-of-input is encountered, or parser\n     * is closed by a call to {@link JsonParser#close}.\n     *<p>\n     * Feature is enabled by default.",AUTO_CLOSE_SOURCE(JsonParser.Feature.AUTO_CLOSE_SOURCE),com.fasterxml.jackson.core.StreamReadFeature AUTO_CLOSE_SOURCE,public 
com.fasterxml.jackson.core.StreamReadFeature.STRICT_DUPLICATE_DETECTION,Enum Constant,"* Feature that determines whether {@link JsonParser} will explicitly\n     * check that no duplicate JSON Object field names are encountered.\n     * If enabled, parser will check all names within context and report\n     * duplicates by throwing a {@link JsonParseException}; if disabled,\n     * parser will not do such checking. Assumption in latter case is\n     * that caller takes care of handling duplicates at a higher level:\n     * data-binding, for example, has features to specify detection to\n     * be done there.\n     *<p>\n     * Note that enabling this feature will incur performance overhead\n     * due to having to store and check additional information: this typically\n     * adds 20-30% to execution time for basic parsing.",STRICT_DUPLICATE_DETECTION(JsonParser.Feature.STRICT_DUPLICATE_DETECTION),com.fasterxml.jackson.core.StreamReadFeature STRICT_DUPLICATE_DETECTION,public 
com.fasterxml.jackson.core.StreamReadFeature.IGNORE_UNDEFINED,Enum Constant,"* Feature that determines what to do if the underlying data format requires knowledge\n     * of all properties to decode (usually via a Schema), and if no definition is\n     * found for a property that input content contains.\n     * Typically most textual data formats do NOT require schema information (although\n     * some do, such as CSV), whereas many binary data formats do require definitions\n     * (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not).\n     * Further note that some formats that do require schema information will not be able\n     * to ignore undefined properties: for example, Avro is fully positional and there is\n     * no possibility of undefined data. This leaves formats like Protobuf that have identifiers\n     * that may or may not map; and as such Protobuf format does make use of this feature.\n     *<p>\n     * Note that support for this feature is implemented by individual data format\n     * module, if (and only if) it makes sense for the format in question. For JSON,\n     * for example, this feature has no effect as properties need not be pre-defined.\n     *<p>\n     * Feature is disabled by default, meaning that if the underlying data format\n     * requires knowledge of all properties to output, attempts to read an unknown\n     * property will result in a {@link JsonProcessingException}",IGNORE_UNDEFINED(JsonParser.Feature.IGNORE_UNDEFINED),com.fasterxml.jackson.core.StreamReadFeature IGNORE_UNDEFINED,public 
com.fasterxml.jackson.core.StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION,Enum Constant,"* Feature that determines whether {@link JsonLocation} instances should be constructed\n     * with reference to source or not. If source reference is included, its type and contents\n     * are included when `toString()` method is called (most notably when printing out parse\n     * exception with that location information). If feature is disabled, no source reference\n     * is passed and source is only indicated as ""UNKNOWN"".\n     *<p>\n     * Most common reason for disabling this feature is to avoid leaking\n     * internal information; this may be done for security reasons.\n     * Note that even if source reference is included, only parts of contents are usually\n     * printed, and not the whole contents. Further, many source reference types cannot\n     * necessarily access contents (like streams), so only type is indicated, not contents.\n     *<p>\n     * Feature is enabled by default, meaning that ""source reference"" information is passed\n     * and some or all of the source content may be included in {@link JsonLocation} information\n     * constructed either when requested explicitly, or when needed for an exception.",INCLUDE_SOURCE_IN_LOCATION(JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION),com.fasterxml.jackson.core.StreamReadFeature INCLUDE_SOURCE_IN_LOCATION,public 
com.fasterxml.jackson.core.StreamReadFeature.USE_FAST_DOUBLE_PARSER,Enum Constant,* Feature that determines whether we use the built-in {@link Double#parseDouble(String)} code to parse\n     * doubles or if we use {@code FastDoubleParser}\n     * instead.\n     *<p>\n     * This setting is disabled by default.\n     *\n     * @since 2.14,USE_FAST_DOUBLE_PARSER(JsonParser.Feature.USE_FAST_DOUBLE_PARSER),com.fasterxml.jackson.core.StreamReadFeature USE_FAST_DOUBLE_PARSER,public 
com.fasterxml.jackson.core.StreamReadFeature.USE_FAST_BIG_NUMBER_PARSER,Enum Constant,* Feature that determines whether to use the built-in Java code for parsing\n     * <code>BigDecimal</code>s and <code>BigInteger</code>s or to use\n     * {@code FastDoubleParser} instead.\n     *<p>\n     * This setting is disabled by default.\n     *\n     * @since 2.15,USE_FAST_BIG_NUMBER_PARSER(JsonParser.Feature.USE_FAST_BIG_NUMBER_PARSER),com.fasterxml.jackson.core.StreamReadFeature USE_FAST_BIG_NUMBER_PARSER,public 
com.fasterxml.jackson.core.format.MatchStrength.NO_MATCH,Enum Constant,* Value that indicates that given data cannot be in given format.,NO_MATCH,com.fasterxml.jackson.core.format.MatchStrength NO_MATCH,public 
com.fasterxml.jackson.core.format.MatchStrength.INCONCLUSIVE,Enum Constant,* Value that indicates that detector cannot find out whether could\n     * be a match or not.\n     * This can occur for example for textual data formats t\n     * when there are so many leading spaces that detector cannot\n     * find the first data byte (because detectors typically limit lookahead\n     * to some smallish value).,INCONCLUSIVE,com.fasterxml.jackson.core.format.MatchStrength INCONCLUSIVE,public 
com.fasterxml.jackson.core.format.MatchStrength.WEAK_MATCH,Enum Constant,"* Value that indicates that given data could be of specified format (i.e.\n     * it cannot be ruled out). This can occur for example when seen data\n     * is both not in canonical formats (for example: JSON data should be a JSON Array or Object\n     * not a scalar value, as per JSON specification) and there are known use case\n     * where a format detected is actually used (plain JSON Strings are actually used, even\n     * though specification does not indicate that as valid usage: as such, seeing a leading\n     * double-quote could indicate a JSON String, which plausibly <b>could</b> indicate\n     * non-standard JSON usage).",WEAK_MATCH,com.fasterxml.jackson.core.format.MatchStrength WEAK_MATCH,public 
com.fasterxml.jackson.core.format.MatchStrength.SOLID_MATCH,Enum Constant,"* Value that indicates that given data conforms to (one of) canonical form(s) of\n     * the data format.\n     *<p>\n     * For example, when testing for XML data format,\n     * seeing a less-than character (""&lt;"") alone (with possible leading spaces)\n     * would be a strong indication that data could\n     * be in xml format (but see below for {@link #FULL_MATCH} description for more)",SOLID_MATCH,com.fasterxml.jackson.core.format.MatchStrength SOLID_MATCH,public 
com.fasterxml.jackson.core.format.MatchStrength.FULL_MATCH,Enum Constant,"* Value that indicates that given data contains a signature that is deemed\n     * specific enough to uniquely indicate data format used.\n     *<p>\n     * For example, when testing for XML data format,\n     * seing ""&lt;xml"" as the first data bytes (""XML declaration"", as per XML specification)\n     * could give full confidence that data is indeed in XML format.\n     * Not all data formats have unique leading identifiers to allow full matches; for example,\n     * JSON only has heuristic matches and can have at most {@link #SOLID_MATCH}) match.",FULL_MATCH,com.fasterxml.jackson.core.format.MatchStrength FULL_MATCH,public 
com.fasterxml.jackson.core.JsonGenerator$Feature.AUTO_CLOSE_TARGET,Enum Constant,"* Feature that determines whether generator will automatically\n         * close underlying output target that is NOT owned by the\n         * generator.\n         * If disabled, calling application has to separately\n         * close the underlying {@link OutputStream} and {@link Writer}\n         * instances used to create the generator. If enabled, generator\n         * will handle closing, as long as generator itself gets closed:\n         * this happens when end-of-input is encountered, or generator\n         * is closed by a call to {@link JsonGenerator#close}.\n         *<p>\n         * Feature is enabled by default.",AUTO_CLOSE_TARGET(true),com.fasterxml.jackson.core.JsonGenerator$Feature AUTO_CLOSE_TARGET,public 
com.fasterxml.jackson.core.JsonGenerator$Feature.AUTO_CLOSE_JSON_CONTENT,Enum Constant,"* Feature that determines what happens when the generator is\n         * closed while there are still unmatched\n         * {@link JsonToken#START_ARRAY} or {@link JsonToken#START_OBJECT}\n         * entries in output content. If enabled, such Array(s) and/or\n         * Object(s) are automatically closed; if disabled, nothing\n         * specific is done.\n         *<p>\n         * Feature is enabled by default.",AUTO_CLOSE_JSON_CONTENT(true),com.fasterxml.jackson.core.JsonGenerator$Feature AUTO_CLOSE_JSON_CONTENT,public 
com.fasterxml.jackson.core.JsonGenerator$Feature.FLUSH_PASSED_TO_STREAM,Enum Constant,"* Feature that specifies that calls to {@link #flush} will cause\n         * matching <code>flush()</code> to underlying {@link OutputStream}\n         * or {@link Writer}; if disabled this will not be done.\n         * Main reason to disable this feature is to prevent flushing at\n         * generator level, if it is not possible to prevent method being\n         * called by other code (like <code>ObjectMapper</code> or third\n         * party libraries).\n         *<p>\n         * Feature is enabled by default.",FLUSH_PASSED_TO_STREAM(true),com.fasterxml.jackson.core.JsonGenerator$Feature FLUSH_PASSED_TO_STREAM,public 
com.fasterxml.jackson.core.JsonGenerator$Feature.QUOTE_FIELD_NAMES,Enum Constant,"* Feature that determines whether JSON Object field names are\n         * quoted using double-quotes, as specified by JSON specification\n         * or not. Ability to disable quoting was added to support use\n         * cases where they are not usually expected, which most commonly\n         * occurs when used straight from Javascript.\n         *<p>\n         * Feature is enabled by default (since it is required by JSON specification).\n         *\n         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonWriteFeature#QUOTE_FIELD_NAMES} instead",@Deprecated\nQUOTE_FIELD_NAMES(true),com.fasterxml.jackson.core.JsonGenerator$Feature QUOTE_FIELD_NAMES,public 
com.fasterxml.jackson.core.JsonGenerator$Feature.QUOTE_NON_NUMERIC_NUMBERS,Enum Constant,"* Feature that determines whether ""exceptional"" (not real number)\n         * float/double values are output as quoted strings.\n         * The values checked are Double.Nan,\n         * Double.POSITIVE_INFINITY and Double.NEGATIVE_INIFINTY (and\n         * associated Float values).\n         * If feature is disabled, these numbers are still output using\n         * associated literal values, resulting in non-conformant\n         * output.\n         *<p>\n         * Feature is enabled by default.\n         *\n         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonWriteFeature#WRITE_NAN_AS_STRINGS} instead",@Deprecated\nQUOTE_NON_NUMERIC_NUMBERS(true),com.fasterxml.jackson.core.JsonGenerator$Feature QUOTE_NON_NUMERIC_NUMBERS,public 
com.fasterxml.jackson.core.JsonGenerator$Feature.ESCAPE_NON_ASCII,Enum Constant,"* Feature that specifies that all characters beyond 7-bit ASCII\n         * range (i.e. code points of 128 and above) need to be output\n         * using format-specific escapes (for JSON, backslash escapes),\n         * if format uses escaping mechanisms (which is generally true\n         * for textual formats but not for binary formats).\n         *<p>\n         * Note that this setting may not necessarily make sense for all\n         * data formats (for example, binary formats typically do not use\n         * any escaping mechanisms; and some textual formats do not have\n         * general-purpose escaping); if so, settings is simply ignored.\n         * Put another way, effects of this feature are data-format specific.\n         *<p>\n         * Feature is disabled by default.\n         *\n         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonWriteFeature#ESCAPE_NON_ASCII} instead",@Deprecated\nESCAPE_NON_ASCII(false),com.fasterxml.jackson.core.JsonGenerator$Feature ESCAPE_NON_ASCII,public 
com.fasterxml.jackson.core.JsonGenerator$Feature.WRITE_NUMBERS_AS_STRINGS,Enum Constant,"* Feature that forces all Java numbers to be written as Strings,\n         * even if the underlying data format has non-textual representation\n         * (which is the case for JSON as well as all binary formats).\n         * Default state is 'false', meaning that Java numbers are to\n         * be serialized using basic numeric serialization (as JSON\n         * numbers, integral or floating point, for example).\n         * If enabled, all such numeric values are instead written out as\n         * textual values (which for JSON means quoted in double-quotes).\n         *<p>\n         * One use case is to avoid problems with Javascript limitations:\n         * since Javascript standard specifies that all number handling\n         * should be done using 64-bit IEEE 754 floating point values,\n         * result being that some 64-bit integer values cannot be\n         * accurately represented (as mantissa is only 51 bit wide).\n         *<p>\n         * Feature is disabled by default.\n         *\n         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonWriteFeature#WRITE_NUMBERS_AS_STRINGS} instead",@Deprecated\nWRITE_NUMBERS_AS_STRINGS(false),com.fasterxml.jackson.core.JsonGenerator$Feature WRITE_NUMBERS_AS_STRINGS,public 
com.fasterxml.jackson.core.JsonGenerator$Feature.WRITE_BIGDECIMAL_AS_PLAIN,Enum Constant,"* Feature that determines whether {@link java.math.BigDecimal} entries are\n         * serialized using {@link java.math.BigDecimal#toPlainString()} to prevent\n         * values to be written using scientific notation.\n         *<p>\n         * NOTE: only affects generators that serialize {@link java.math.BigDecimal}s\n         * using textual representation (textual formats but potentially some binary\n         * formats).\n         *<p>\n         * Feature is disabled by default, so default output mode is used; this generally\n         * depends on how {@link BigDecimal} has been created.\n         *\n         * @since 2.3",WRITE_BIGDECIMAL_AS_PLAIN(false),com.fasterxml.jackson.core.JsonGenerator$Feature WRITE_BIGDECIMAL_AS_PLAIN,public 
com.fasterxml.jackson.core.JsonGenerator$Feature.STRICT_DUPLICATE_DETECTION,Enum Constant,"* Feature that determines whether {@link JsonGenerator} will explicitly\n         * check that no duplicate JSON Object field names are written.\n         * If enabled, generator will check all names within context and report\n         * duplicates by throwing a {@link JsonGenerationException}; if disabled,\n         * no such checking will be done. Assumption in latter case is\n         * that caller takes care of not trying to write duplicate names.\n         *<p>\n         * Note that enabling this feature will incur performance overhead\n         * due to having to store and check additional information.\n         *<p>\n         * Feature is disabled by default.\n         *\n         * @since 2.3",STRICT_DUPLICATE_DETECTION(false),com.fasterxml.jackson.core.JsonGenerator$Feature STRICT_DUPLICATE_DETECTION,public 
com.fasterxml.jackson.core.JsonGenerator$Feature.IGNORE_UNKNOWN,Enum Constant,"* Feature that determines what to do if the underlying data format requires knowledge\n         * of all properties to output, and if no definition is found for a property that\n         * caller tries to write. If enabled, such properties will be quietly ignored;\n         * if disabled, a {@link JsonProcessingException} will be thrown to indicate the\n         * problem.\n         * Typically most textual data formats do NOT require schema information (although\n         * some do, such as CSV), whereas many binary data formats do require definitions\n         * (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not).\n         *<p>\n         * Note that support for this feature is implemented by individual data format\n         * module, if (and only if) it makes sense for the format in question. For JSON,\n         * for example, this feature has no effect as properties need not be pre-defined.\n         *<p>\n         * Feature is disabled by default, meaning that if the underlying data format\n         * requires knowledge of all properties to output, attempts to write an unknown\n         * property will result in a {@link JsonProcessingException}\n         *\n         * @since 2.5",IGNORE_UNKNOWN(false),com.fasterxml.jackson.core.JsonGenerator$Feature IGNORE_UNKNOWN,public 
com.fasterxml.jackson.core.JsonGenerator$Feature.USE_FAST_DOUBLE_WRITER,Enum Constant,* Alias for {@link com.fasterxml.jackson.core.StreamWriteFeature#USE_FAST_DOUBLE_WRITER} instead\n         *\n         * @since 2.14\n         * @deprecated Use {@link com.fasterxml.jackson.core.StreamWriteFeature#USE_FAST_DOUBLE_WRITER} instead,@Deprecated\nUSE_FAST_DOUBLE_WRITER(false),com.fasterxml.jackson.core.JsonGenerator$Feature USE_FAST_DOUBLE_WRITER,public 
com.fasterxml.jackson.core.JsonGenerator$Feature.WRITE_HEX_UPPER_CASE,Enum Constant,"* Feature that specifies that hex values are encoded with capital letters.\n         *<p>\n         * Can be disabled to have a better possibility to compare between other Json\n         * writer libraries, such as JSON.stringify from Javascript.\n         *<p>\n         * Feature is enabled by default.\n         *\n         * @since 2.14\n         * @deprecated Use {@link com.fasterxml.jackson.core.json.JsonWriteFeature#WRITE_HEX_UPPER_CASE} instead",@Deprecated\nWRITE_HEX_UPPER_CASE(true),com.fasterxml.jackson.core.JsonGenerator$Feature WRITE_HEX_UPPER_CASE,public 
com.fasterxml.jackson.core.JsonGenerator$Feature.ESCAPE_FORWARD_SLASHES,Enum Constant,* See {@link com.fasterxml.jackson.core.json.JsonWriteFeature#ESCAPE_FORWARD_SLASHES}.\n         *\n         * @since 2.17,ESCAPE_FORWARD_SLASHES(false),com.fasterxml.jackson.core.JsonGenerator$Feature ESCAPE_FORWARD_SLASHES,public 
com.fasterxml.jackson.core.JsonGenerator$Feature.COMBINE_UNICODE_SURROGATES_IN_UTF8,Enum Constant,* See {@link com.fasterxml.jackson.core.json.JsonWriteFeature#COMBINE_UNICODE_SURROGATES_IN_UTF8}.\n         *\n         * @since 2.18,COMBINE_UNICODE_SURROGATES_IN_UTF8(false),com.fasterxml.jackson.core.JsonGenerator$Feature COMBINE_UNICODE_SURROGATES_IN_UTF8,public 
com.fasterxml.jackson.core.JsonParser$NumberType.INT,Enum Constant,No Comment,INT,com.fasterxml.jackson.core.JsonParser$NumberType INT,public 
com.fasterxml.jackson.core.JsonParser$NumberType.LONG,Enum Constant,No Comment,LONG,com.fasterxml.jackson.core.JsonParser$NumberType LONG,public 
com.fasterxml.jackson.core.JsonParser$NumberType.BIG_INTEGER,Enum Constant,No Comment,BIG_INTEGER,com.fasterxml.jackson.core.JsonParser$NumberType BIG_INTEGER,public 
com.fasterxml.jackson.core.JsonParser$NumberType.FLOAT,Enum Constant,No Comment,FLOAT,com.fasterxml.jackson.core.JsonParser$NumberType FLOAT,public 
com.fasterxml.jackson.core.JsonParser$NumberType.DOUBLE,Enum Constant,No Comment,DOUBLE,com.fasterxml.jackson.core.JsonParser$NumberType DOUBLE,public 
com.fasterxml.jackson.core.JsonParser$NumberType.BIG_DECIMAL,Enum Constant,No Comment,BIG_DECIMAL,com.fasterxml.jackson.core.JsonParser$NumberType BIG_DECIMAL,public 
com.fasterxml.jackson.core.JsonParser$NumberTypeFP.FLOAT16,Enum Constant,"* Special ""mini-float"" that some binary formats support.",FLOAT16,com.fasterxml.jackson.core.JsonParser$NumberTypeFP FLOAT16,public 
com.fasterxml.jackson.core.JsonParser$NumberTypeFP.FLOAT32,Enum Constant,* Standard IEEE-754 single-precision 32-bit binary value,FLOAT32,com.fasterxml.jackson.core.JsonParser$NumberTypeFP FLOAT32,public 
com.fasterxml.jackson.core.JsonParser$NumberTypeFP.DOUBLE64,Enum Constant,* Standard IEEE-754 double-precision 64-bit binary value,DOUBLE64,com.fasterxml.jackson.core.JsonParser$NumberTypeFP DOUBLE64,public 
com.fasterxml.jackson.core.JsonParser$NumberTypeFP.BIG_DECIMAL,Enum Constant,"* Unlimited precision, decimal (10-based) values",BIG_DECIMAL,com.fasterxml.jackson.core.JsonParser$NumberTypeFP BIG_DECIMAL,public 
com.fasterxml.jackson.core.JsonParser$NumberTypeFP.UNKNOWN,Enum Constant,"* Constant used when type is not known, or there is no specific\n         * type to match: most commonly used for textual formats like JSON\n         * where representation does not necessarily have single easily detectable\n         * optimal representation (for example, value {@code 0.1} has no\n         * exact binary representation whereas {@code 0.25} has exact representation\n         * in every binary type supported)",UNKNOWN,com.fasterxml.jackson.core.JsonParser$NumberTypeFP UNKNOWN,public 
com.fasterxml.jackson.core.JsonParser$Feature.AUTO_CLOSE_SOURCE,Enum Constant,"* Feature that determines whether parser will automatically\n         * close underlying input source that is NOT owned by the\n         * parser. If disabled, calling application has to separately\n         * close the underlying {@link InputStream} and {@link Reader}\n         * instances used to create the parser. If enabled, parser\n         * will handle closing, as long as parser itself gets closed:\n         * this happens when end-of-input is encountered, or parser\n         * is closed by a call to {@link JsonParser#close}.\n         *<p>\n         * Feature is enabled by default.",AUTO_CLOSE_SOURCE(true),com.fasterxml.jackson.core.JsonParser$Feature AUTO_CLOSE_SOURCE,public 
com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_COMMENTS,Enum Constant,"* Feature that determines whether parser will allow use\n         * of Java/C++ style comments (both '/'+'*' and\n         * '//' varieties) within parsed content or not.\n         *<p>\n         * Since JSON specification does not mention comments as legal\n         * construct,\n         * this is a non-standard feature; however, in the wild\n         * this is extensively used. As such, feature is\n         * <b>disabled by default</b> for parsers and must be\n         * explicitly enabled.\n         *<p>\n         * NOTE: while not technically deprecated, since 2.10 recommended to use\n         * {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_JAVA_COMMENTS} instead.",ALLOW_COMMENTS(false),com.fasterxml.jackson.core.JsonParser$Feature ALLOW_COMMENTS,public 
com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_YAML_COMMENTS,Enum Constant,"* Feature that determines whether parser will allow use\n         * of YAML comments, ones starting with '#' and continuing\n         * until the end of the line. This commenting style is common\n         * with scripting languages as well.\n         *<p>\n         * Since JSON specification does not mention comments as legal\n         * construct,\n         * this is a non-standard feature. As such, feature is\n         * <b>disabled by default</b> for parsers and must be\n         * explicitly enabled.\n         *<p>\n         * NOTE: while not technically deprecated, since 2.10 recommended to use\n         * {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_YAML_COMMENTS} instead.",ALLOW_YAML_COMMENTS(false),com.fasterxml.jackson.core.JsonParser$Feature ALLOW_YAML_COMMENTS,public 
com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_UNQUOTED_FIELD_NAMES,Enum Constant,"* Feature that determines whether parser will allow use\n         * of unquoted field names (which is allowed by Javascript,\n         * but not by JSON specification).\n         *<p>\n         * Since JSON specification requires use of double quotes for\n         * field names,\n         * this is a non-standard feature, and as such disabled by default.\n         *<p>\n         * NOTE: while not technically deprecated, since 2.10 recommended to use\n         * {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_UNQUOTED_FIELD_NAMES} instead.",ALLOW_UNQUOTED_FIELD_NAMES(false),com.fasterxml.jackson.core.JsonParser$Feature ALLOW_UNQUOTED_FIELD_NAMES,public 
com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_SINGLE_QUOTES,Enum Constant,"* Feature that determines whether parser will allow use\n         * of single quotes (apostrophe, character '\'') for\n         * quoting Strings (names and String values). If so,\n         * this is in addition to other acceptable markers.\n         * but not by JSON specification).\n         *<p>\n         * Since JSON specification requires use of double quotes for\n         * field names,\n         * this is a non-standard feature, and as such disabled by default.\n         *<p>\n         * NOTE: while not technically deprecated, since 2.10 recommended to use\n         * {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_SINGLE_QUOTES} instead.",ALLOW_SINGLE_QUOTES(false),com.fasterxml.jackson.core.JsonParser$Feature ALLOW_SINGLE_QUOTES,public 
com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_UNQUOTED_CONTROL_CHARS,Enum Constant,"* Feature that determines whether parser will allow\n         * JSON Strings to contain unquoted control characters\n         * (ASCII characters with value less than 32, including\n         * tab and line feed characters) or not.\n         * If feature is set false, an exception is thrown if such a\n         * character is encountered.\n         *<p>\n         * Since JSON specification requires quoting for all control characters,\n         * this is a non-standard feature, and as such disabled by default.\n         *\n         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_UNESCAPED_CONTROL_CHARS} instead",@Deprecated\nALLOW_UNQUOTED_CONTROL_CHARS(false),com.fasterxml.jackson.core.JsonParser$Feature ALLOW_UNQUOTED_CONTROL_CHARS,public 
com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER,Enum Constant,"* Feature that can be enabled to accept quoting of all character\n         * using backslash quoting mechanism: if not enabled, only characters\n         * that are explicitly listed by JSON specification can be thus\n         * escaped (see JSON spec for small list of these characters)\n         *<p>\n         * Since JSON specification requires quoting for all control characters,\n         * this is a non-standard feature, and as such disabled by default.\n         *\n         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER} instead",@Deprecated\nALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER(false),com.fasterxml.jackson.core.JsonParser$Feature ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER,public 
com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_NUMERIC_LEADING_ZEROS,Enum Constant,"* Feature that determines whether parser will allow\n         * JSON integral numbers to start with additional (ignorable)\n         * zeroes (like: 000001). If enabled, no exception is thrown, and extra\n         * nulls are silently ignored (and not included in textual representation\n         * exposed via {@link JsonParser#getText}).\n         *<p>\n         * Since JSON specification does not allow leading zeroes,\n         * this is a non-standard feature, and as such disabled by default.\n         *\n         * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_LEADING_ZEROS_FOR_NUMBERS} instead",@Deprecated\nALLOW_NUMERIC_LEADING_ZEROS(false),com.fasterxml.jackson.core.JsonParser$Feature ALLOW_NUMERIC_LEADING_ZEROS,public 
com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS,Enum Constant,* @deprecated Use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS} instead,@Deprecated\nALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS(false),com.fasterxml.jackson.core.JsonParser$Feature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS,public 
com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS,Enum Constant,* @deprecated Use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS} instead,@Deprecated\nALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS(false),com.fasterxml.jackson.core.JsonParser$Feature ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS,public 
com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS,Enum Constant,* @deprecated Use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS} instead,@Deprecated\nALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS(false),com.fasterxml.jackson.core.JsonParser$Feature ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS,public 
com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_NON_NUMERIC_NUMBERS,Enum Constant,"* Feature that allows parser to recognize set of\n         * ""Not-a-Number"" (NaN) tokens as legal floating number\n         * values (similar to how many other data formats and\n         * programming language source code allows it).\n         * Specific subset contains values that\n         * <a href=""http://www.w3.org/TR/xmlschema-2/"">XML Schema</a>\n         * (see section 3.2.4.1, Lexical Representation)\n         * allows (tokens are quoted contents, not including quotes):\n         *<ul>\n         *  <li>""INF"" (for positive infinity), as well as alias of ""Infinity""\n         *  <li>""-INF"" (for negative infinity), alias ""-Infinity""\n         *  <li>""NaN"" (for other not-a-numbers, like result of division by zero)\n         *</ul>\n         *<p>\n         * Since JSON specification does not allow use of such values,\n         * this is a non-standard feature, and as such disabled by default.\n          *\n          * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_NON_NUMERIC_NUMBERS} instead",@Deprecated\nALLOW_NON_NUMERIC_NUMBERS(false),com.fasterxml.jackson.core.JsonParser$Feature ALLOW_NON_NUMERIC_NUMBERS,public 
com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_MISSING_VALUES,Enum Constant,"* Feature allows the support for ""missing"" values in a JSON array: missing\n          * value meaning sequence of two commas, without value in-between but only\n          * optional white space.\n          * Enabling this feature will expose ""missing"" values as {@link JsonToken#VALUE_NULL}\n          * tokens, which typically become Java nulls in arrays and {@link java.util.Collection}\n          * in data-binding.\n          * <p>\n          * For example, enabling this feature will represent a JSON array <code>[""value1"",,""value3"",]</code>\n          * as <code>[""value1"", null, ""value3"", null]</code>\n          * <p>\n          * Since the JSON specification does not allow missing values this is a non-compliant JSON\n          * feature and is disabled by default.\n          *\n          * @since 2.8\n          *\n          * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_MISSING_VALUES} instead",@Deprecated\nALLOW_MISSING_VALUES(false),com.fasterxml.jackson.core.JsonParser$Feature ALLOW_MISSING_VALUES,public 
com.fasterxml.jackson.core.JsonParser$Feature.ALLOW_TRAILING_COMMA,Enum Constant,"* Feature that determines whether {@link JsonParser} will allow for a single trailing\n          * comma following the final value (in an Array) or member (in an Object). These commas\n          * will simply be ignored.\n          * <p>\n          * For example, when this feature is enabled, <code>[true,true,]</code> is equivalent to\n          * <code>[true, true]</code> and <code>{""a"": true,}</code> is equivalent to\n          * <code>{""a"": true}</code>.\n          * <p>\n          * When combined with <code>ALLOW_MISSING_VALUES</code>, this feature takes priority, and\n          * the final trailing comma in an array declaration does not imply a missing\n          * (<code>null</code>) value. For example, when both <code>ALLOW_MISSING_VALUES</code>\n          * and <code>ALLOW_TRAILING_COMMA</code> are enabled, <code>[true,true,]</code> is\n          * equivalent to <code>[true, true]</code>, and <code>[true,true,,]</code> is equivalent to\n          * <code>[true, true, null]</code>.\n          * <p>\n          * Since the JSON specification does not permit trailing commas, this is a non-standard\n          * feature, and as such disabled by default.\n          *\n          * @since 2.9\n          *\n          * @deprecated Since 2.10 use {@link com.fasterxml.jackson.core.json.JsonReadFeature#ALLOW_TRAILING_COMMA} instead",@Deprecated\nALLOW_TRAILING_COMMA(false),com.fasterxml.jackson.core.JsonParser$Feature ALLOW_TRAILING_COMMA,public 
com.fasterxml.jackson.core.JsonParser$Feature.STRICT_DUPLICATE_DETECTION,Enum Constant,"* Feature that determines whether {@link JsonParser} will explicitly\n          * check that no duplicate JSON Object field names are encountered.\n          * If enabled, parser will check all names within context and report\n          * duplicates by throwing a {@link JsonParseException}; if disabled,\n          * parser will not do such checking. Assumption in latter case is\n          * that caller takes care of handling duplicates at a higher level:\n          * data-binding, for example, has features to specify detection to\n          * be done there.\n          *<p>\n          * Note that enabling this feature will incur performance overhead\n          * due to having to store and check additional information: this typically\n          * adds 20-30% to execution time for basic parsing.\n          *\n          * @since 2.3",STRICT_DUPLICATE_DETECTION(false),com.fasterxml.jackson.core.JsonParser$Feature STRICT_DUPLICATE_DETECTION,public 
com.fasterxml.jackson.core.JsonParser$Feature.IGNORE_UNDEFINED,Enum Constant,"* Feature that determines what to do if the underlying data format requires knowledge\n          * of all properties to decode (usually via a Schema), and if no definition is\n          * found for a property that input content contains.\n          * Typically most textual data formats do NOT require schema information (although\n          * some do, such as CSV), whereas many binary data formats do require definitions\n          * (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not).\n          * Further note that some formats that do require schema information will not be able\n          * to ignore undefined properties: for example, Avro is fully positional and there is\n          * no possibility of undefined data. This leaves formats like Protobuf that have identifiers\n          * that may or may not map; and as such Protobuf format does make use of this feature.\n          *<p>\n          * Note that support for this feature is implemented by individual data format\n          * module, if (and only if) it makes sense for the format in question. For JSON,\n          * for example, this feature has no effect as properties need not be pre-defined.\n          *<p>\n          * Feature is disabled by default, meaning that if the underlying data format\n          * requires knowledge of all properties to output, attempts to read an unknown\n          * property will result in a {@link JsonProcessingException}\n          *\n          * @since 2.6",IGNORE_UNDEFINED(false),com.fasterxml.jackson.core.JsonParser$Feature IGNORE_UNDEFINED,public 
com.fasterxml.jackson.core.JsonParser$Feature.INCLUDE_SOURCE_IN_LOCATION,Enum Constant,"* Feature that determines whether {@link JsonLocation} instances should be constructed\n          * with reference to source or not. If source reference is included, its type and contents\n          * are included when `toString()` method is called (most notably when printing out parse\n          * exception with that location information). If feature is disabled, no source reference\n          * is passed and source is only indicated as ""REDACTED"".\n          *<p>\n          * Most common reason for disabling this feature is to avoid leaking information about\n          * internal information; this may be done for security reasons.\n          * Note that even if source reference is included, only parts of contents are usually\n          * printed, and not the whole contents. Further, many source reference types cannot\n          * necessarily access contents (like streams), so only type is indicated, not contents.\n          *<p>\n          * Since 2.16 feature is <b>disabled</b> by default (before 2.16 it was enabled),\n          * meaning that ""source reference"" information is NOT passed; this for security\n          * reasons (so by default no information is leaked; see\n          * <a href=""https://github.com/FasterXML/jackson-core/issues/991"">core#991</a>\n          * for more)\n          *\n          * @since 2.9 (but different default since 2.16)",INCLUDE_SOURCE_IN_LOCATION(false),com.fasterxml.jackson.core.JsonParser$Feature INCLUDE_SOURCE_IN_LOCATION,public 
com.fasterxml.jackson.core.JsonParser$Feature.USE_FAST_DOUBLE_PARSER,Enum Constant,* Feature that determines whether we use the built-in {@link Double#parseDouble(String)} code to parse\n          * doubles or if we use {@code FastDoubleParser} implementation.\n          * instead.\n          *<p>\n          * This setting is disabled by default for backwards compatibility.\n          *\n          * @since 2.14,USE_FAST_DOUBLE_PARSER(false),com.fasterxml.jackson.core.JsonParser$Feature USE_FAST_DOUBLE_PARSER,public 
com.fasterxml.jackson.core.JsonParser$Feature.USE_FAST_BIG_NUMBER_PARSER,Enum Constant,* Feature that determines whether to use the built-in Java code for parsing\n          * <code>BigDecimal</code>s and <code>BigInteger</code>s or to use\n          * specifically optimized custom implementation instead.\n          *<p>\n          * This setting is disabled by default for backwards compatibility.\n          *\n          * @since 2.15,USE_FAST_BIG_NUMBER_PARSER(false),com.fasterxml.jackson.core.JsonParser$Feature USE_FAST_BIG_NUMBER_PARSER,public 
com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour.PADDING_FORBIDDEN,Enum Constant,* Padding is not allowed in Base64 content being read (finding something\n         * that looks like padding at the end of content results in an exception),PADDING_FORBIDDEN,com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour PADDING_FORBIDDEN,public 
com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour.PADDING_REQUIRED,Enum Constant,* Padding is required in Base64 content being read\n         * (missing padding for incomplete ending quartet results in an exception),PADDING_REQUIRED,com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour PADDING_REQUIRED,public 
com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour.PADDING_ALLOWED,Enum Constant,"* Padding is allowed but not required in Base64 content being read: no\n         * exception thrown based on existence or absence, as long as proper\n         * padding characters are used.",PADDING_ALLOWED,com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour PADDING_ALLOWED,public 
com.fasterxml.jackson.core.filter.TokenFilter$Inclusion.ONLY_INCLUDE_ALL,Enum Constant,* Tokens will only be included if the filter returns TokenFilter.INCLUDE_ALL,ONLY_INCLUDE_ALL,com.fasterxml.jackson.core.filter.TokenFilter$Inclusion ONLY_INCLUDE_ALL,public 
com.fasterxml.jackson.core.filter.TokenFilter$Inclusion.INCLUDE_ALL_AND_PATH,Enum Constant,"* When TokenFilter.INCLUDE_ALL is returned, the corresponding token will\n         * be included as well as enclosing tokens up to the root",INCLUDE_ALL_AND_PATH,com.fasterxml.jackson.core.filter.TokenFilter$Inclusion INCLUDE_ALL_AND_PATH,public 
com.fasterxml.jackson.core.filter.TokenFilter$Inclusion.INCLUDE_NON_NULL,Enum Constant,"* Tokens will be included if any non-null filter is returned.\n         * The exception is if a field name returns a non-null filter,\n         * but the field value returns a null filter. In this case the\n         * field name and value will both be omitted.",INCLUDE_NON_NULL,com.fasterxml.jackson.core.filter.TokenFilter$Inclusion INCLUDE_NON_NULL,public 
com.fasterxml.jackson.core.StreamWriteFeature.AUTO_CLOSE_TARGET,Enum Constant,"* Feature that determines whether generator will automatically\n     * close underlying output target that is NOT owned by the\n     * generator.\n     * If disabled, calling application has to separately\n     * close the underlying {@link OutputStream} and {@link Writer}\n     * instances used to create the generator. If enabled, generator\n     * will handle closing, as long as generator itself gets closed:\n     * this happens when end-of-input is encountered, or generator\n     * is closed by a call to {@link JsonGenerator#close}.\n     *<p>\n     * Feature is enabled by default.",AUTO_CLOSE_TARGET(JsonGenerator.Feature.AUTO_CLOSE_TARGET),com.fasterxml.jackson.core.StreamWriteFeature AUTO_CLOSE_TARGET,public 
com.fasterxml.jackson.core.StreamWriteFeature.AUTO_CLOSE_CONTENT,Enum Constant,"* Feature that determines what happens when the generator is\n     * closed while there are still unmatched\n     * {@link JsonToken#START_ARRAY} or {@link JsonToken#START_OBJECT}\n     * entries in output content. If enabled, such Array(s) and/or\n     * Object(s) are automatically closed (that is, matching END_ token write\n     * call is made for all open scopes); if disabled, no additional\n     * write calls are made.\n     *<p>\n     * Feature is enabled by default.",AUTO_CLOSE_CONTENT(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT),com.fasterxml.jackson.core.StreamWriteFeature AUTO_CLOSE_CONTENT,public 
com.fasterxml.jackson.core.StreamWriteFeature.FLUSH_PASSED_TO_STREAM,Enum Constant,"* Feature that specifies that calls to {@link JsonGenerator#flush} will cause\n     * matching <code>flush()</code> to underlying {@link OutputStream}\n     * or {@link Writer}; if disabled this will not be done.\n     * Main reason to disable this feature is to prevent flushing at\n     * generator level, if it is not possible to prevent method being\n     * called by other code (like <code>ObjectMapper</code> or third\n     * party libraries).\n     *<p>\n     * Feature is enabled by default.",FLUSH_PASSED_TO_STREAM(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM),com.fasterxml.jackson.core.StreamWriteFeature FLUSH_PASSED_TO_STREAM,public 
com.fasterxml.jackson.core.StreamWriteFeature.WRITE_BIGDECIMAL_AS_PLAIN,Enum Constant,"* Feature that determines whether {@link java.math.BigDecimal} entries are\n     * serialized using {@link java.math.BigDecimal#toPlainString()} to prevent\n     * values to be written using scientific notation.\n     *<p>\n     * NOTE: only affects generators that serialize {@link java.math.BigDecimal}s\n     * using textual representation (textual formats but potentially some binary\n     * formats).\n     *<p>\n     * Feature is disabled by default, so default output mode is used; this generally\n     * depends on how {@link BigDecimal} has been created.",WRITE_BIGDECIMAL_AS_PLAIN(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN),com.fasterxml.jackson.core.StreamWriteFeature WRITE_BIGDECIMAL_AS_PLAIN,public 
com.fasterxml.jackson.core.StreamWriteFeature.STRICT_DUPLICATE_DETECTION,Enum Constant,"* Feature that determines whether {@link JsonGenerator} will explicitly\n     * check that no duplicate JSON Object field names are written.\n     * If enabled, generator will check all names within context and report\n     * duplicates by throwing a {@link JsonGenerationException}; if disabled,\n     * no such checking will be done. Assumption in latter case is\n     * that caller takes care of not trying to write duplicate names.\n     *<p>\n     * Note that enabling this feature will incur performance overhead\n     * due to having to store and check additional information.\n     *<p>\n     * Feature is disabled by default.",STRICT_DUPLICATE_DETECTION(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION),com.fasterxml.jackson.core.StreamWriteFeature STRICT_DUPLICATE_DETECTION,public 
com.fasterxml.jackson.core.StreamWriteFeature.IGNORE_UNKNOWN,Enum Constant,"* Feature that determines what to do if the underlying data format requires knowledge\n     * of all properties to output, and if no definition is found for a property that\n     * caller tries to write. If enabled, such properties will be quietly ignored;\n     * if disabled, a {@link JsonProcessingException} will be thrown to indicate the\n     * problem.\n     * Typically most textual data formats do NOT require schema information (although\n     * some do, such as CSV), whereas many binary data formats do require definitions\n     * (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not).\n     *<p>\n     * Note that support for this feature is implemented by individual data format\n     * module, if (and only if) it makes sense for the format in question. For JSON,\n     * for example, this feature has no effect as properties need not be pre-defined.\n     *<p>\n     * Feature is disabled by default, meaning that if the underlying data format\n     * requires knowledge of all properties to output, attempts to write an unknown\n     * property will result in a {@link JsonProcessingException}",IGNORE_UNKNOWN(JsonGenerator.Feature.IGNORE_UNKNOWN),com.fasterxml.jackson.core.StreamWriteFeature IGNORE_UNKNOWN,public 
com.fasterxml.jackson.core.StreamWriteFeature.USE_FAST_DOUBLE_WRITER,Enum Constant,"* Feature that determines whether to use standard Java code to write floats/doubles\n     * (default) or use the Schubfach algorithm which may be faster (but see the next\n     * paragraph for details).\n     * Schubfach algorithm output may have small differences in the precision of the\n     * float/double that compared to JDK default processing.\n     *<p>\n     * NOTE! Enabling this feature appears to improve performance significantly\n     * up to and including JDK 17, but NOT when using JDK 21\n     * and above -- in fact, it seems that JDK implementation is slightly faster.\n     * Because of this,enabling this feature is only recommended for JDKs 17 and below.\n     *<p>\n     * Feature is disabled by default, meaning that JDK default conversions are used.\n     *\n     * @since 2.14","@SuppressWarnings(""deprecation"")\nUSE_FAST_DOUBLE_WRITER(JsonGenerator.Feature.USE_FAST_DOUBLE_WRITER)",com.fasterxml.jackson.core.StreamWriteFeature USE_FAST_DOUBLE_WRITER,public 
com.fasterxml.jackson.core.StreamReadCapability.DUPLICATE_PROPERTIES,Enum Constant,"* Capability that indicates that data format can expose multiple properties\n     * with same name (""duplicates"") within one Object context.\n     * This is usually not enabled, except for formats like {@code xml} that\n     * have content model that does not map cleanly to JSON-based token stream.\n     *<p>\n     * Capability may be used for allowing secondary mapping of such duplicates\n     * in case of using Tree Model (see {@link TreeNode}), or ""untyped"" databinding\n     * (mapping content as generic {@link java.lang.Object}).\n     *<p>\n     * Capability is currently only enabled for XML format backend.",DUPLICATE_PROPERTIES(false),com.fasterxml.jackson.core.StreamReadCapability DUPLICATE_PROPERTIES,public 
com.fasterxml.jackson.core.StreamReadCapability.SCALARS_AS_OBJECTS,Enum Constant,* Capability that indicates that data format may in some cases expose Scalar values\n     * (whether typed or untyped) as Object values. There are additional access methods\n     * at databind level: this capability may be used to decide whether to attempt to\n     * use such methods especially in potentially ambiguous cases.\n     *<p>\n     * Capability is currently only enabled for XML format backend.,SCALARS_AS_OBJECTS(false),com.fasterxml.jackson.core.StreamReadCapability SCALARS_AS_OBJECTS,public 
com.fasterxml.jackson.core.StreamReadCapability.UNTYPED_SCALARS,Enum Constant,"* Capability that indicates that data format only exposed ""untyped"" scalars: that is,\n     * instead of Number, Boolean and String types all scalar values are reported as\n     * text ({@link JsonToken#VALUE_STRING})\n     * unless some sort of coercion is implied by caller.\n     *<p>\n     * This capability is true for many textual formats like CSV, Properties and XML.",UNTYPED_SCALARS(false),com.fasterxml.jackson.core.StreamReadCapability UNTYPED_SCALARS,public 
com.fasterxml.jackson.core.StreamReadCapability.EXACT_FLOATS,Enum Constant,"* Capability that indicates whether data format supports reporting of\n     * accurate floating point values (with respect to reported numeric type,\n     * {@link com.fasterxml.jackson.core.JsonParser.NumberType#DOUBLE}) or not.\n     * This usually depends on whether format stores such values natively\n     * (as IEEE binary FP formats for {@code java.lang.Float} and {@code java.lang.Double};\n     * using some other value preserving presentation for {@code java.math.BigDecimal})\n     * or not: most binary formats do, and most textual formats do not (at least for\n     * {@code Float} and {@code Double}, specifically).\n     *<p>\n     * In case of JSON numbers (as well as for most if not all textual formats),\n     * all floating-point numbers are represented simply by decimal (10-base)\n     * textual representation and can only be represented accurately using\n     * {@link java.math.BigDecimal}. But for performance reasons they may be\n     * (depending on settings) be exposed as {@link java.lang.Double}s (that is,\n     * {@link com.fasterxml.jackson.core.JsonParser.NumberType#DOUBLE}).\n     * Note that methods like {@link JsonParser#getNumberValueExact()},\n     * {@link JsonParser#getValueAsString()} and\n     * {@link JsonParser#getDecimalValue()} report values without\n     * precision loss.\n     *<p>\n     * The main intended use case is to let non-Jackson code to handle cases\n     * where exact accuracy is necessary in a way that handling does not incur\n     * unnecessary conversions across different formats: for example, when reading\n     * binary format, simple access is essentially guaranteed to expose value exactly\n     * as encoded by the format (as {@code float}, {@code double} or {@code BigDecimal}),\n     * whereas for textual formats like JSON it is necessary to access value explicitly\n     * as {@code BigDecimal} using {@code JsonParser#getDecimalValue}.\n     *<p>\n     * Capability is false for text formats like JSON, but true for binary formats\n     * like Smile, MessagePack, etc., where type is precisely and inexpensively\n     * indicated by format.\n     *\n     * @since 2.14",EXACT_FLOATS(false),com.fasterxml.jackson.core.StreamReadCapability EXACT_FLOATS,public 
