FEN:ID,:LABEL,Comment,Source Code,Signature,Modifiers
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.DEFAULT_T_SIZE,Field,"* Initial size of the primary hash area. Each entry consumes 4 ints (16 bytes),\n     * and secondary area is same as primary; so default size will use 2kB of memory\n     * (plus 64x4 or 64x8 (256/512 bytes) for references to Strings, and Strings\n     * themselves).",private static final int DEFAULT_T_SIZE = 64;,int DEFAULT_T_SIZE,"private , static , final "
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.MAX_T_SIZE,Field,64k entries == 2M mem hash area,private static final int MAX_T_SIZE = 0x10000;,int MAX_T_SIZE,"private , static , final "
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.MIN_HASH_SIZE,Field,"* No point in trying to construct tiny tables, just need to resize soon.",private final static int MIN_HASH_SIZE = 16;,int MIN_HASH_SIZE,"private , final , static "
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.MAX_ENTRIES_FOR_REUSE,Field,"* Let's only share reasonably sized symbol tables. Max size set to 3/4 of 8k;\n     * this corresponds to 256k main hash index. This should allow for enough distinct\n     * names for almost any case, while preventing ballooning for cases where names\n     * are unique (or close thereof).",protected final static int MAX_ENTRIES_FOR_REUSE = 6000;,int MAX_ENTRIES_FOR_REUSE,"protected , final , static "
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._parent,Field,"* Reference to the root symbol table, for child tables, so\n     * that they can merge table information back as necessary.",protected final ByteQuadsCanonicalizer _parent;,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _parent,"protected , final "
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._tableInfo,Field,"* Member that is only used by the root table instance: root\n     * passes immutable state info child instances, and children\n     * may return new state if they add entries to the table.\n     * Child tables do NOT use the reference.",protected final AtomicReference<TableInfo> _tableInfo;,java.util.concurrent.atomic.AtomicReference _tableInfo,"protected , final "
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._seed,Field,"* Seed value we use as the base to make hash codes non-static between\n     * different runs, but still stable for lifetime of a single symbol table\n     * instance.\n     * This is done for security reasons, to avoid potential DoS attack via\n     * hash collisions.",protected final int _seed;,int _seed,"protected , final "
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._interner,Field,"* Entity that knows how to {@code intern} Strings, if needed,\n     * or {@code null} if no interning is wanted.\n     *\n     * @since 2.16",protected final InternCache _interner;,com.fasterxml.jackson.core.util.InternCache _interner,"protected , final "
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._failOnDoS,Field,* Flag that indicates whether we should throw an exception if enough\n     * hash collisions are detected (true); or just worked around (false).\n     *\n     * @since 2.4,protected final boolean _failOnDoS;,boolean _failOnDoS,"protected , final "
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._hashArea,Field,"* Primary hash information area: consists of <code>2 * _hashSize</code>\n     * entries of 16 bytes (4 ints), arranged in a cascading lookup\n     * structure (details of which may be tweaked depending on expected rates\n     * of collisions).",protected int[] _hashArea;,int[] _hashArea,protected 
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._hashSize,Field,"* Number of slots for primary entries within {@link #_hashArea}; which is\n     * at most <code>1/8</code> of actual size of the underlying array (4-int slots,\n     * primary covers only half of the area; plus, additional area for longer\n     * symbols after hash area).",protected int _hashSize;,int _hashSize,protected 
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._secondaryStart,Field,* Offset within {@link #_hashArea} where secondary entries start,protected int _secondaryStart;,int _secondaryStart,protected 
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._tertiaryStart,Field,* Offset within {@link #_hashArea} where tertiary entries start,protected int _tertiaryStart;,int _tertiaryStart,protected 
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._tertiaryShift,Field,"* Constant that determines size of buckets for tertiary entries:\n     * <code>1 &lt;&lt; _tertiaryShift</code> is the size, and shift value\n     * is also used for translating from primary offset into\n     * tertiary bucket (shift right by <code>4 + _tertiaryShift</code>).\n     *<p>\n     * Default value is 2, for buckets of 4 slots; grows bigger with\n     * bigger table sizes.",protected int _tertiaryShift;,int _tertiaryShift,protected 
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._count,Field,* Total number of Strings in the symbol table; only used for child tables.,protected int _count;,int _count,protected 
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._names,Field,* Array that contains <code>String</code> instances matching\n     * entries in {@link #_hashArea}.\n     * Contains nulls for unused entries. Note that this size is twice\n     * that of {@link #_hashArea},protected String[] _names;,java.lang.String[] _names,protected 
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._spilloverEnd,Field,* Pointer to the offset within spill-over area where there is room\n     * for more spilled over entries (if any).\n     * Spill over area is within fixed-size portion of {@link #_hashArea}.,protected int _spilloverEnd;,int _spilloverEnd,protected 
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._longNameOffset,Field,"* Offset within {@link #_hashArea} that follows main slots and contains\n     * quads for longer names (13 bytes or longer), and points to the\n     * first available int that may be used for appending quads of the next\n     * long name.\n     * Note that long name area follows immediately after the fixed-size\n     * main hash area ({@link #_hashArea}).",protected int _longNameOffset;,int _longNameOffset,protected 
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer._hashShared,Field,"* Flag that indicates whether underlying data structures for\n     * the main hash area are shared or not. If they are, then they\n     * need to be handled in copy-on-write way, i.e. if they need\n     * to be modified, a copy needs to be made first; at this point\n     * it will not be shared any more, and can be modified.\n     *<p>\n     * This flag needs to be checked both when adding new main entries,\n     * and when adding new collision list queues (i.e. creating a new\n     * collision list head entry)",protected boolean _hashShared;,boolean _hashShared,protected 
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.MULT,Field,(see [http://www.cse.yorku.ca/~oz/hash.html] for details),private final static int MULT = 33;,int MULT,"private , final , static "
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.MULT2,Field,No Comment,private final static int MULT2 = 65599;,int MULT2,"private , final , static "
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.MULT3,Field,No Comment,private final static int MULT3 = 31;,int MULT3,"private , final , static "
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.size,Field,No Comment,public final int size;,int size,"public , final "
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.count,Field,No Comment,public final int count;,int count,"public , final "
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.tertiaryShift,Field,No Comment,public final int tertiaryShift;,int tertiaryShift,"public , final "
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.mainHash,Field,No Comment,public final int[] mainHash;,int[] mainHash,"public , final "
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.names,Field,No Comment,public final String[] names;,java.lang.String[] names,"public , final "
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.spilloverEnd,Field,No Comment,public final int spilloverEnd;,int spilloverEnd,"public , final "
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo.longNameOffset,Field,No Comment,public final int longNameOffset;,int longNameOffset,"public , final "
com.fasterxml.jackson.core.sym.Name1.EMPTY,Field,No Comment,"private final static Name1 EMPTY = new Name1("""", 0, 0);",com.fasterxml.jackson.core.sym.Name1 EMPTY,"private , final , static "
com.fasterxml.jackson.core.sym.Name1.q,Field,No Comment,private final int q;,int q,"private , final "
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.HASH_MULT,Field,"If we use ""multiply-add"" based hash algorithm, this is the multiplier\n     * we use.\n     *<p>\n     * Note that JDK uses 31; but it seems that 33 produces fewer collisions,\n     * at least with tests we have.",public final static int HASH_MULT = 33;,int HASH_MULT,"public , final , static "
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.DEFAULT_T_SIZE,Field,"* Default initial table size. Shouldn't be miniscule (as there's\n     * cost to both array realloc and rehashing), but let's keep\n     * it reasonably small. For systems that properly\n     * reuse factories it doesn't matter either way; but when\n     * recreating factories often, initial overhead may dominate.",private static final int DEFAULT_T_SIZE = 64;,int DEFAULT_T_SIZE,"private , static , final "
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.MAX_T_SIZE,Field,64k entries == 256k mem,private static final int MAX_T_SIZE = 0x10000;,int MAX_T_SIZE,"private , static , final "
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.MAX_ENTRIES_FOR_REUSE,Field,* Let's only share reasonably sized symbol tables. Max size set to 3/4 of 16k;\n     * this corresponds to 64k main hash index. This should allow for enough distinct\n     * names for almost any case.,static final int MAX_ENTRIES_FOR_REUSE = 12000;,int MAX_ENTRIES_FOR_REUSE,"static , final "
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.MAX_COLL_CHAIN_LENGTH,Field,"* Also: to thwart attacks based on hash collisions (which may or may not\n     * be cheap to calculate), we will need to detect ""too long""\n     * collision chains.\n     * Started with static value of 100 entries for the longest legal chain,\n     * but increased in Jackson 2.13 to 150 to work around specific test case.\n     *<p>\n     * Note: longest chain we have been able to produce without malicious\n     * intent has been 38 (with ""com.fasterxml.jackson.core.main.TestWithTonsaSymbols"");\n     * our setting should be reasonable here.\n     *\n     * @since 2.1 (changed in 2.13)",static final int MAX_COLL_CHAIN_LENGTH = 150;,int MAX_COLL_CHAIN_LENGTH,"static , final "
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._parent,Field,"* Sharing of learnt symbols is done by optional linking of symbol\n     * table instances with their parents. When parent linkage is\n     * defined, and child instance is released (call to <code>release</code>),\n     * parent's shared tables may be updated from the child instance.",protected final CharsToNameCanonicalizer _parent;,com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _parent,"protected , final "
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._tableInfo,Field,"* Member that is only used by the root table instance: root\n     * passes immutable state info child instances, and children\n     * may return new state if they add entries to the table.\n     * Child tables do NOT use the reference.",protected final AtomicReference<TableInfo> _tableInfo;,java.util.concurrent.atomic.AtomicReference _tableInfo,"protected , final "
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._streamReadConstraints,Field,* Constraints used by {@link TokenStreamFactory} that uses\n     * this canonicalizer.\n     *\n     * @since 2.16,protected final StreamReadConstraints _streamReadConstraints;,com.fasterxml.jackson.core.StreamReadConstraints _streamReadConstraints,"protected , final "
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._seed,Field,"* Seed value we use as the base to make hash codes non-static between\n     * different runs, but still stable for lifetime of a single symbol table\n     * instance.\n     * This is done for security reasons, to avoid potential DoS attack via\n     * hash collisions.\n     *\n     * @since 2.1",protected final int _seed;,int _seed,"protected , final "
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._factoryFeatures,Field,* Feature flags of {@link TokenStreamFactory} that uses\n     * this canonicalizer.,protected final int _factoryFeatures;,int _factoryFeatures,"protected , final "
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._canonicalize,Field,* Whether any canonicalization should be attempted (whether using\n     * intern or not.\n     *<p>\n     * NOTE: non-final since we may need to disable this with overflow.,protected boolean _canonicalize;,boolean _canonicalize,protected 
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._symbols,Field,* Primary matching symbols; it's expected most match occur from\n     * here.,protected String[] _symbols;,java.lang.String[] _symbols,protected 
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._buckets,Field,"* Overflow buckets; if primary doesn't match, lookup is done\n     * from here.\n     *<p>\n     * Note: Number of buckets is half of number of symbol entries, on\n     * assumption there's less need for buckets.",protected Bucket[] _buckets;,com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] _buckets,protected 
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._size,Field,* Current size (number of entries); needed to know if and when\n     * rehash.,protected int _size;,int _size,protected 
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._sizeThreshold,Field,* Limit that indicates maximum size this instance can hold before\n     * it needs to be expanded and rehashed. Calculated using fill\n     * factor passed in to constructor.,protected int _sizeThreshold;,int _sizeThreshold,protected 
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._indexMask,Field,"* Mask used to get index from hash values; equal to\n     * <code>_buckets.length - 1</code>, when _buckets.length is\n     * a power of two.",protected int _indexMask;,int _indexMask,protected 
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._longestCollisionList,Field,* We need to keep track of the longest collision list; this is needed\n     * both to indicate problems with attacks and to allow flushing for\n     * other cases.\n     *\n     * @since 2.1,protected int _longestCollisionList;,int _longestCollisionList,protected 
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._hashShared,Field,"* Flag that indicates whether underlying data structures for\n     * the main hash area are shared or not. If they are, then they\n     * need to be handled in copy-on-write way, i.e. if they need\n     * to be modified, a copy needs to be made first; at this point\n     * it will not be shared any more, and can be modified.\n     *<p>\n     * This flag needs to be checked both when adding new main entries,\n     * and when adding new collision list queues (i.e. creating a new\n     * collision list head entry)",protected boolean _hashShared;,boolean _hashShared,protected 
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer._overflows,Field,* Lazily constructed structure that is used to keep track of\n     * collision buckets that have overflowed once: this is used\n     * to detect likely attempts at denial-of-service attacks that\n     * uses hash collisions.\n     *\n     * @since 2.4,protected BitSet _overflows;,java.util.BitSet _overflows,protected 
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket.symbol,Field,No Comment,public final String symbol;,java.lang.String symbol,"public , final "
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket.next,Field,No Comment,public final Bucket next;,com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket next,"public , final "
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket.length,Field,No Comment,public final int length;,int length,"public , final "
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.size,Field,No Comment,final int size;,int size,final 
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.longestCollisionList,Field,No Comment,final int longestCollisionList;,int longestCollisionList,final 
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.symbols,Field,No Comment,final String[] symbols;,java.lang.String[] symbols,final 
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo.buckets,Field,No Comment,final Bucket[] buckets;,com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket[] buckets,final 
com.fasterxml.jackson.core.sym.Name2.q1,Field,No Comment,"private final int q1, q2;",int q1,"private , final "
com.fasterxml.jackson.core.sym.Name2.q2,Field,No Comment,"private final int q1, q2;",int q2,"private , final "
com.fasterxml.jackson.core.sym.Name3.q1,Field,No Comment,"private final int q1, q2, q3;",int q1,"private , final "
com.fasterxml.jackson.core.sym.Name3.q2,Field,No Comment,"private final int q1, q2, q3;",int q2,"private , final "
com.fasterxml.jackson.core.sym.Name3.q3,Field,No Comment,"private final int q1, q2, q3;",int q3,"private , final "
com.fasterxml.jackson.core.sym.Name._name,Field,No Comment,protected final String _name;,java.lang.String _name,"protected , final "
com.fasterxml.jackson.core.sym.Name._hashCode,Field,No Comment,protected final int _hashCode;,int _hashCode,"protected , final "
com.fasterxml.jackson.core.sym.NameN.q1,Field,first four quads,"private final int q1, q2, q3, q4;",int q1,"private , final "
com.fasterxml.jackson.core.sym.NameN.q2,Field,first four quads,"private final int q1, q2, q3, q4;",int q2,"private , final "
com.fasterxml.jackson.core.sym.NameN.q3,Field,first four quads,"private final int q1, q2, q3, q4;",int q3,"private , final "
com.fasterxml.jackson.core.sym.NameN.q4,Field,first four quads,"private final int q1, q2, q3, q4;",int q4,"private , final "
com.fasterxml.jackson.core.sym.NameN.qlen,Field,total number of quads (4 + q.length),private final int qlen;,int qlen,"private , final "
com.fasterxml.jackson.core.sym.NameN.q,Field,No Comment,private final int[] q;,int[] q,"private , final "
com.fasterxml.jackson.core.PrettyPrinter.DEFAULT_SEPARATORS,Field,* @since 2.9,public final static Separators DEFAULT_SEPARATORS = Separators.createDefaultInstance();,com.fasterxml.jackson.core.util.Separators DEFAULT_SEPARATORS,"public , final , static "
com.fasterxml.jackson.core.PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR,Field,* Default String used for separating root values is single space.\n     *\n     * @since 2.9,"public final static SerializedString DEFAULT_ROOT_VALUE_SEPARATOR = new SerializedString("" "");",com.fasterxml.jackson.core.io.SerializedString DEFAULT_ROOT_VALUE_SEPARATOR,"public , final , static "
com.fasterxml.jackson.core.StreamWriteConstraints.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.StreamWriteConstraints.DEFAULT_MAX_DEPTH,Field,* Default setting for maximum depth: see {@link Builder#maxNestingDepth(int)} for details.,public static final int DEFAULT_MAX_DEPTH = 1000;,int DEFAULT_MAX_DEPTH,"public , static , final "
com.fasterxml.jackson.core.StreamWriteConstraints._maxNestingDepth,Field,No Comment,protected final int _maxNestingDepth;,int _maxNestingDepth,"protected , final "
com.fasterxml.jackson.core.StreamWriteConstraints.DEFAULT,Field,No Comment,private static StreamWriteConstraints DEFAULT = new StreamWriteConstraints(DEFAULT_MAX_DEPTH);,com.fasterxml.jackson.core.StreamWriteConstraints DEFAULT,"private , static "
com.fasterxml.jackson.core.StreamWriteConstraints$Builder.maxNestingDepth,Field,No Comment,private int maxNestingDepth;,int maxNestingDepth,private 
com.fasterxml.jackson.core.JsonProcessingException.serialVersionUID,Field,eclipse complains otherwise,private final static long serialVersionUID = 123;,long serialVersionUID,"private , final , static "
com.fasterxml.jackson.core.JsonProcessingException._location,Field,No Comment,protected JsonLocation _location;,com.fasterxml.jackson.core.JsonLocation _location,protected 
com.fasterxml.jackson.core.JsonPointer.ESC,Field,"* Escape character {@value #ESC} per <a href=""https://datatracker.ietf.org/doc/html/rfc6901"">RFC6901</a>.\n     * <pre>\n     * escaped         = ""~"" ( ""0"" / ""1"" )\n     *  ; representing '~' and '/', respectively\n     * </pre>   \n     *\n     * @since 2.17",public static final char ESC = '~';,char ESC,"public , static , final "
com.fasterxml.jackson.core.JsonPointer.ESC_SLASH,Field,"* Escaped slash string {@value #ESC_TILDE} per <a href=""https://datatracker.ietf.org/doc/html/rfc6901"">RFC6901</a>.\n     * <pre>\n     * escaped         = ""~"" ( ""0"" / ""1"" )\n     *  ; representing '~' and '/', respectively\n     * </pre>   \n     *\n     * @since 2.17","public static final String ESC_SLASH = ""~1"";",java.lang.String ESC_SLASH,"public , static , final "
com.fasterxml.jackson.core.JsonPointer.ESC_TILDE,Field,"* Escaped tilde string {@value #ESC_TILDE} per <a href=""https://datatracker.ietf.org/doc/html/rfc6901"">RFC6901</a>.\n     * <pre>\n     * escaped         = ""~"" ( ""0"" / ""1"" )\n     *  ; representing '~' and '/', respectively\n     * </pre>   \n     *\n     * @since 2.17","public static final String ESC_TILDE = ""~0"";",java.lang.String ESC_TILDE,"public , static , final "
com.fasterxml.jackson.core.JsonPointer.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.JsonPointer.SEPARATOR,Field,"* Character used to separate segments.\n     * <pre>\n     * json-pointer    = *( ""/"" reference-token )\n     * </pre>\n     *\n     * @since 2.9",public final static char SEPARATOR = '/';,char SEPARATOR,"public , final , static "
com.fasterxml.jackson.core.JsonPointer.EMPTY,Field,"* Marker instance used to represent segment that matches current\n     * node or position (that is, returns true for\n     * {@link #matches()}).",protected final static JsonPointer EMPTY = new JsonPointer();,com.fasterxml.jackson.core.JsonPointer EMPTY,"protected , final , static "
com.fasterxml.jackson.core.JsonPointer._nextSegment,Field,* Reference to rest of the pointer beyond currently matching\n     * segment (if any); null if this pointer refers to the matching\n     * segment.,protected final JsonPointer _nextSegment;,com.fasterxml.jackson.core.JsonPointer _nextSegment,"protected , final "
com.fasterxml.jackson.core.JsonPointer._head,Field,* Reference from currently matching segment (if any) to node\n     * before leaf.\n     * Lazily constructed if/as needed.\n     *<p>\n     * NOTE: we'll use `volatile` here assuming that this is unlikely to\n     * become a performance bottleneck. If it becomes one we can probably\n     * just drop it and things still should work (despite warnings as per JMM\n     * regarding visibility (and lack thereof) of unguarded changes).\n     *\n     * @since 2.5,protected volatile JsonPointer _head;,com.fasterxml.jackson.core.JsonPointer _head,"protected , volatile "
com.fasterxml.jackson.core.JsonPointer._asString,Field,"* We will retain representation of the pointer, as a String,\n     * so that {@link #toString} should be as efficient as possible.\n     *<p>\n     * NOTE: starting with 2.14, there is now accompanying\n     * {@link #_asStringOffset} that MUST be considered with this String;\n     * this {@code String} may contain preceding path, as it is now full path\n     * of parent pointer, except for the outermost pointer instance.",protected final String _asString;,java.lang.String _asString,"protected , final "
com.fasterxml.jackson.core.JsonPointer._asStringOffset,Field,* @since 2.14,protected final int _asStringOffset;,int _asStringOffset,"protected , final "
com.fasterxml.jackson.core.JsonPointer._matchingPropertyName,Field,No Comment,protected final String _matchingPropertyName;,java.lang.String _matchingPropertyName,"protected , final "
com.fasterxml.jackson.core.JsonPointer._matchingElementIndex,Field,No Comment,protected final int _matchingElementIndex;,int _matchingElementIndex,"protected , final "
com.fasterxml.jackson.core.JsonPointer._hashCode,Field,"* Lazily-calculated hash code: need to retain hash code now that we can no\n     * longer rely on {@link #_asString} being the exact full representation (it\n     * is often ""more"", including parent path).\n     *\n     * @since 2.14",protected int _hashCode;,int _hashCode,protected 
com.fasterxml.jackson.core.JsonPointer$PointerParent.parent,Field,No Comment,public final PointerParent parent;,com.fasterxml.jackson.core.JsonPointer$PointerParent parent,"public , final "
com.fasterxml.jackson.core.JsonPointer$PointerParent.fullPathOffset,Field,No Comment,public final int fullPathOffset;,int fullPathOffset,"public , final "
com.fasterxml.jackson.core.JsonPointer$PointerParent.segment,Field,No Comment,public final String segment;,java.lang.String segment,"public , final "
com.fasterxml.jackson.core.JsonPointer$PointerSegment.next,Field,No Comment,public final PointerSegment next;,com.fasterxml.jackson.core.JsonPointer$PointerSegment next,"public , final "
com.fasterxml.jackson.core.JsonPointer$PointerSegment.property,Field,No Comment,public final String property;,java.lang.String property,"public , final "
com.fasterxml.jackson.core.JsonPointer$PointerSegment.index,Field,No Comment,public final int index;,int index,"public , final "
com.fasterxml.jackson.core.JsonPointer$PointerSegment.pathOffset,Field,"Offset within external buffer, updated when constructing",public int pathOffset;,int pathOffset,public 
com.fasterxml.jackson.core.JsonPointer$PointerSegment.prev,Field,"And we actually need 2-way traversal, it turns out so:",public PointerSegment prev;,com.fasterxml.jackson.core.JsonPointer$PointerSegment prev,public 
com.fasterxml.jackson.core.JsonPointer$Serialization._fullPath,Field,No Comment,private String _fullPath;,java.lang.String _fullPath,private 
com.fasterxml.jackson.core.JacksonException.serialVersionUID,Field,eclipse complains otherwise,private final static long serialVersionUID = 123;,long serialVersionUID,"private , final , static "
com.fasterxml.jackson.core.util.RecyclerPool$ThreadLocalPoolBase.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.util.RecyclerPool$NonRecyclingPoolBase.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.util.RecyclerPool$StatefulImplBase.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.util.RecyclerPool$StatefulImplBase.SERIALIZATION_SHARED,Field,No Comment,public final static int SERIALIZATION_SHARED = -1;,int SERIALIZATION_SHARED,"public , final , static "
com.fasterxml.jackson.core.util.RecyclerPool$StatefulImplBase.SERIALIZATION_NON_SHARED,Field,No Comment,public final static int SERIALIZATION_NON_SHARED = 1;,int SERIALIZATION_NON_SHARED,"public , final , static "
com.fasterxml.jackson.core.util.RecyclerPool$StatefulImplBase._serialization,Field,"* Value that indicates basic aspects of pool for JDK serialization;\n         * either marker for shared/non-shared, or possibly bounded size;\n         * depends on sub-class.",protected final int _serialization;,int _serialization,"protected , final "
com.fasterxml.jackson.core.util.RecyclerPool$ConcurrentDequePoolBase.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.util.RecyclerPool$ConcurrentDequePoolBase.pool,Field,No Comment,protected final transient Deque<P> pool;,java.util.Deque pool,"protected , final , transient "
com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase.head,Field,Needs to be transient to avoid JDK serialization from writing it out,private final transient AtomicReference<Node<P>> head;,java.util.concurrent.atomic.AtomicReference head,"private , final , transient "
com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase$Node.value,Field,No Comment,final P value;,java.lang.Object value,final 
com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase$Node.next,Field,No Comment,Node<P> next;,com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase$Node next,default
com.fasterxml.jackson.core.util.RecyclerPool$BoundedPoolBase.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.util.RecyclerPool$BoundedPoolBase.DEFAULT_CAPACITY,Field,* Default capacity which limits number of items that are ever\n         * retained for reuse.,public final static int DEFAULT_CAPACITY = 100;,int DEFAULT_CAPACITY,"public , final , static "
com.fasterxml.jackson.core.util.RecyclerPool$BoundedPoolBase.pool,Field,No Comment,private final transient ArrayBlockingQueue<P> pool;,java.util.concurrent.ArrayBlockingQueue pool,"private , final , transient "
com.fasterxml.jackson.core.util.RecyclerPool$BoundedPoolBase.capacity,Field,No Comment,private final transient int capacity;,int capacity,"private , final , transient "
com.fasterxml.jackson.core.util.Separators.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.util.Separators.DEFAULT_ROOT_VALUE_SEPARATOR,Field,"* Constant that specifies default ""root-level"" separator to use between\n     * root values: a single space character.\n     *\n     * @since 2.16","public final static String DEFAULT_ROOT_VALUE_SEPARATOR = "" "";",java.lang.String DEFAULT_ROOT_VALUE_SEPARATOR,"public , final , static "
com.fasterxml.jackson.core.util.Separators.DEFAULT_OBJECT_EMPTY_SEPARATOR,Field,"* String to use in empty Object to separate start and end markers.\n     * Default is single space, resulting in output of {@code { }}.\n     * \n     * @since 2.17","public final static String DEFAULT_OBJECT_EMPTY_SEPARATOR = "" "";",java.lang.String DEFAULT_OBJECT_EMPTY_SEPARATOR,"public , final , static "
com.fasterxml.jackson.core.util.Separators.DEFAULT_ARRAY_EMPTY_SEPARATOR,Field,"* String to use in empty Array to separate start and end markers.\n     * Default is single space, resulting in output of {@code [ ]}.\n     * \n     * @since 2.17","public final static String DEFAULT_ARRAY_EMPTY_SEPARATOR = "" "";",java.lang.String DEFAULT_ARRAY_EMPTY_SEPARATOR,"public , final , static "
com.fasterxml.jackson.core.util.Separators.objectFieldValueSeparator,Field,No Comment,private final char objectFieldValueSeparator;,char objectFieldValueSeparator,"private , final "
com.fasterxml.jackson.core.util.Separators.objectFieldValueSpacing,Field,No Comment,private final Spacing objectFieldValueSpacing;,com.fasterxml.jackson.core.util.Separators$Spacing objectFieldValueSpacing,"private , final "
com.fasterxml.jackson.core.util.Separators.objectEntrySeparator,Field,No Comment,private final char objectEntrySeparator;,char objectEntrySeparator,"private , final "
com.fasterxml.jackson.core.util.Separators.objectEntrySpacing,Field,No Comment,private final Spacing objectEntrySpacing;,com.fasterxml.jackson.core.util.Separators$Spacing objectEntrySpacing,"private , final "
com.fasterxml.jackson.core.util.Separators.objectEmptySeparator,Field,No Comment,private final String objectEmptySeparator;,java.lang.String objectEmptySeparator,"private , final "
com.fasterxml.jackson.core.util.Separators.arrayValueSeparator,Field,No Comment,private final char arrayValueSeparator;,char arrayValueSeparator,"private , final "
com.fasterxml.jackson.core.util.Separators.arrayValueSpacing,Field,No Comment,private final Spacing arrayValueSpacing;,com.fasterxml.jackson.core.util.Separators$Spacing arrayValueSpacing,"private , final "
com.fasterxml.jackson.core.util.Separators.arrayEmptySeparator,Field,No Comment,private final String arrayEmptySeparator;,java.lang.String arrayEmptySeparator,"private , final "
com.fasterxml.jackson.core.util.Separators.rootSeparator,Field,No Comment,private final String rootSeparator;,java.lang.String rootSeparator,"private , final "
com.fasterxml.jackson.core.util.DefaultIndenter.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.util.DefaultIndenter.SYS_LF,Field,No Comment,public final static String SYS_LF;,java.lang.String SYS_LF,"public , final , static "
com.fasterxml.jackson.core.util.DefaultIndenter.SYSTEM_LINEFEED_INSTANCE,Field,No Comment,"public static final DefaultIndenter SYSTEM_LINEFEED_INSTANCE = new DefaultIndenter(""  "", SYS_LF);",com.fasterxml.jackson.core.util.DefaultIndenter SYSTEM_LINEFEED_INSTANCE,"public , static , final "
com.fasterxml.jackson.core.util.DefaultIndenter.INDENT_LEVELS,Field,"* We expect to rarely get indentation deeper than this number of levels,\n     * and try not to pre-generate more indentations than needed.",private final static int INDENT_LEVELS = 16;,int INDENT_LEVELS,"private , final , static "
com.fasterxml.jackson.core.util.DefaultIndenter.indents,Field,No Comment,private final char[] indents;,char[] indents,"private , final "
com.fasterxml.jackson.core.util.DefaultIndenter.charsPerLevel,Field,No Comment,private final int charsPerLevel;,int charsPerLevel,"private , final "
com.fasterxml.jackson.core.util.DefaultIndenter.eol,Field,No Comment,private final String eol;,java.lang.String eol,"private , final "
com.fasterxml.jackson.core.util.TextBuffer.NO_CHARS,Field,No Comment,final static char[] NO_CHARS = new char[0];,char[] NO_CHARS,"final , static "
com.fasterxml.jackson.core.util.TextBuffer.MIN_SEGMENT_LEN,Field,"* Let's start with sizable but not huge buffer, will grow as necessary\n     *<p>\n     * Reduced from 1000 down to 500 in 2.10.",final static int MIN_SEGMENT_LEN = 500;,int MIN_SEGMENT_LEN,"final , static "
com.fasterxml.jackson.core.util.TextBuffer.MAX_SEGMENT_LEN,Field,"* Let's limit maximum segment length to something sensible.\n     * For 2.10, let's limit to using 64kc chunks (128 kB) -- was 256kC/512kB up to 2.9",final static int MAX_SEGMENT_LEN = 0x10000;,int MAX_SEGMENT_LEN,"final , static "
com.fasterxml.jackson.core.util.TextBuffer._allocator,Field,No Comment,private final BufferRecycler _allocator;,com.fasterxml.jackson.core.util.BufferRecycler _allocator,"private , final "
com.fasterxml.jackson.core.util.TextBuffer._inputBuffer,Field,"* Shared input buffer; stored here in case some input can be returned\n     * as is, without being copied to collector's own buffers. Note that\n     * this is read-only for this Object.",private char[] _inputBuffer;,char[] _inputBuffer,private 
com.fasterxml.jackson.core.util.TextBuffer._inputStart,Field,* Character offset of first char in input buffer; -1 to indicate\n     * that input buffer currently does not contain any useful char data,private int _inputStart;,int _inputStart,private 
com.fasterxml.jackson.core.util.TextBuffer._inputLen,Field,No Comment,private int _inputLen;,int _inputLen,private 
com.fasterxml.jackson.core.util.TextBuffer._segments,Field,* List of segments prior to currently active segment.,private ArrayList<char[]> _segments;,java.util.ArrayList _segments,private 
com.fasterxml.jackson.core.util.TextBuffer._hasSegments,Field,* Flag that indicates whether _seqments is non-empty,private boolean _hasSegments;,boolean _hasSegments,private 
com.fasterxml.jackson.core.util.TextBuffer._segmentSize,Field,* Amount of characters in segments in {@link #_segments},private int _segmentSize;,int _segmentSize,private 
com.fasterxml.jackson.core.util.TextBuffer._currentSegment,Field,No Comment,private char[] _currentSegment;,char[] _currentSegment,private 
com.fasterxml.jackson.core.util.TextBuffer._currentSize,Field,* Number of characters in currently active (last) segment,private int _currentSize;,int _currentSize,private 
com.fasterxml.jackson.core.util.TextBuffer._resultString,Field,* String that will be constructed when the whole contents are\n     * needed; will be temporarily stored in case asked for again.,private String _resultString;,java.lang.String _resultString,private 
com.fasterxml.jackson.core.util.TextBuffer._resultArray,Field,No Comment,private char[] _resultArray;,char[] _resultArray,private 
com.fasterxml.jackson.core.util.RequestPayload.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.util.RequestPayload._payloadAsBytes,Field,request payload as byte[],protected byte[] _payloadAsBytes;,byte[] _payloadAsBytes,protected 
com.fasterxml.jackson.core.util.RequestPayload._payloadAsText,Field,request payload as String,protected CharSequence _payloadAsText;,java.lang.CharSequence _payloadAsText,protected 
com.fasterxml.jackson.core.util.RequestPayload._charset,Field,Charset if the request payload is set in bytes,protected String _charset;,java.lang.String _charset,protected 
com.fasterxml.jackson.core.util.ReadConstrainedTextBuffer._streamReadConstraints,Field,No Comment,private final StreamReadConstraints _streamReadConstraints;,com.fasterxml.jackson.core.StreamReadConstraints _streamReadConstraints,"private , final "
com.fasterxml.jackson.core.util.BufferRecyclers.SYSTEM_PROPERTY_TRACK_REUSABLE_BUFFERS,Field,"* System property that is checked to see if recycled buffers (see {@link BufferRecycler})\n     * should be tracked, for purpose of forcing release of all such buffers, typically\n     * during major garbage-collection.\n     *\n     * @since 2.9.6","public final static String SYSTEM_PROPERTY_TRACK_REUSABLE_BUFFERS = ""com.fasterxml.jackson.core.util.BufferRecyclers.trackReusableBuffers"";",java.lang.String SYSTEM_PROPERTY_TRACK_REUSABLE_BUFFERS,"public , final , static "
com.fasterxml.jackson.core.util.BufferRecyclers._bufferRecyclerTracker,Field,* Flag that indicates whether {@link BufferRecycler} instances should be tracked.,private final static ThreadLocalBufferManager _bufferRecyclerTracker;,com.fasterxml.jackson.core.util.ThreadLocalBufferManager _bufferRecyclerTracker,"private , final , static "
com.fasterxml.jackson.core.util.BufferRecyclers._recyclerRef,Field,* This <code>ThreadLocal</code> contains a {@link java.lang.ref.SoftReference}\n     * to a {@link BufferRecycler} used to provide a low-cost\n     * buffer recycling between reader and writer instances.,final protected static ThreadLocal<SoftReference<BufferRecycler>> _recyclerRef = new ThreadLocal<>();,java.lang.ThreadLocal _recyclerRef,"final , protected , static "
com.fasterxml.jackson.core.util.JsonParserSequence._parsers,Field,* Parsers other than the first one (which is initially assigned\n     * as delegate),protected final JsonParser[] _parsers;,com.fasterxml.jackson.core.JsonParser[] _parsers,"protected , final "
com.fasterxml.jackson.core.util.JsonParserSequence._checkForExistingToken,Field,"* Configuration that determines whether state of parsers is first verified\n     * to see if parser already points to a token (that is,\n     * {@link JsonParser#hasCurrentToken()} returns <code>true</code>), and if so\n     * that token is first return before {@link JsonParser#nextToken} is called.\n     * If enabled, this check is made; if disabled, no check is made and\n     * {@link JsonParser#nextToken} is always called for all parsers.\n     *<p>\n     * Default setting is <code>false</code> (for backwards-compatibility)\n     * so that possible existing token is not considered for parsers.\n     *\n     * @since 2.8",protected final boolean _checkForExistingToken;,boolean _checkForExistingToken,"protected , final "
com.fasterxml.jackson.core.util.JsonParserSequence._nextParserIndex,Field,* Index of the next parser in {@link #_parsers}.,protected int _nextParserIndex;,int _nextParserIndex,protected 
com.fasterxml.jackson.core.util.JsonParserSequence._hasToken,Field,"* Flag used to indicate that `JsonParser.nextToken()` should not be called,\n     * due to parser already pointing to a token.\n     *\n     * @since 2.8",protected boolean _hasToken;,boolean _hasToken,protected 
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegate,Field,* Delegate object that method calls are delegated to.,protected JsonGenerator delegate;,com.fasterxml.jackson.core.JsonGenerator delegate,protected 
com.fasterxml.jackson.core.util.JsonGeneratorDelegate.delegateCopyMethods,Field,"* Whether copy methods\n     * ({@link #copyCurrentEvent}, {@link #copyCurrentStructure}, {@link #writeTree} and {@link #writeObject})\n     * are to be called (true), or handled by this object (false).",protected boolean delegateCopyMethods;,boolean delegateCopyMethods,protected 
com.fasterxml.jackson.core.util.BufferRecycler.BYTE_READ_IO_BUFFER,Field,* Buffer used for reading byte-based input.,public final static int BYTE_READ_IO_BUFFER = 0;,int BYTE_READ_IO_BUFFER,"public , final , static "
com.fasterxml.jackson.core.util.BufferRecycler.BYTE_WRITE_ENCODING_BUFFER,Field,* Buffer used for temporarily storing encoded content; used\n     * for example by UTF-8 encoding writer,public final static int BYTE_WRITE_ENCODING_BUFFER = 1;,int BYTE_WRITE_ENCODING_BUFFER,"public , final , static "
com.fasterxml.jackson.core.util.BufferRecycler.BYTE_WRITE_CONCAT_BUFFER,Field,* Buffer used for temporarily concatenating output; used for\n     * example when requesting output as byte array.,public final static int BYTE_WRITE_CONCAT_BUFFER = 2;,int BYTE_WRITE_CONCAT_BUFFER,"public , final , static "
com.fasterxml.jackson.core.util.BufferRecycler.BYTE_BASE64_CODEC_BUFFER,Field,"* Buffer used for concatenating binary data that is either being\n     * encoded as base64 output, or decoded from base64 input.\n     *\n     * @since 2.1",public final static int BYTE_BASE64_CODEC_BUFFER = 3;,int BYTE_BASE64_CODEC_BUFFER,"public , final , static "
com.fasterxml.jackson.core.util.BufferRecycler.CHAR_TOKEN_BUFFER,Field,* Buffer used as input buffer for tokenization for character-based parsers.,public final static int CHAR_TOKEN_BUFFER = 0;,int CHAR_TOKEN_BUFFER,"public , final , static "
com.fasterxml.jackson.core.util.BufferRecycler.CHAR_CONCAT_BUFFER,Field,"* Buffer used by generators; for byte-backed generators for buffering of\n     * {@link String} values to output (before encoding into UTF-8),\n     * and for char-backed generators as actual concatenation buffer.",public final static int CHAR_CONCAT_BUFFER = 1;,int CHAR_CONCAT_BUFFER,"public , final , static "
com.fasterxml.jackson.core.util.BufferRecycler.CHAR_TEXT_BUFFER,Field,"* Used through {@link TextBuffer}: directly by parsers (to concatenate\n     * String values)\n     *  and indirectly via\n     * {@link com.fasterxml.jackson.core.io.SegmentedStringWriter}\n     * when serializing (databind level {@code ObjectMapper} and\n     * {@code ObjectWriter}). In both cases used as segments (and not for whole value),\n     * but may result in retention of larger chunks for big content\n     * (long text values during parsing; bigger output documents for generation).",public final static int CHAR_TEXT_BUFFER = 2;,int CHAR_TEXT_BUFFER,"public , final , static "
com.fasterxml.jackson.core.util.BufferRecycler.CHAR_NAME_COPY_BUFFER,Field,"* For parsers, temporary buffer into which {@code char[]} for names is copied\n     * when requested as such; for {@code WriterBasedGenerator} used for buffering\n     * during {@code writeString(Reader)} operation (not commonly used).",public final static int CHAR_NAME_COPY_BUFFER = 3;,int CHAR_NAME_COPY_BUFFER,"public , final , static "
com.fasterxml.jackson.core.util.BufferRecycler.BYTE_BUFFER_LENGTHS,Field,No Comment,"private final static int[] BYTE_BUFFER_LENGTHS = new int[] { 8000, 8000, 2000, 2000 };",int[] BYTE_BUFFER_LENGTHS,"private , final , static "
com.fasterxml.jackson.core.util.BufferRecycler.CHAR_BUFFER_LENGTHS,Field,No Comment,"private final static int[] CHAR_BUFFER_LENGTHS = new int[] { 4000, 4000, 200, 200 };",int[] CHAR_BUFFER_LENGTHS,"private , final , static "
com.fasterxml.jackson.core.util.BufferRecycler._byteBuffers,Field,Note: changed from simple array in 2.10:,protected final AtomicReferenceArray<byte[]> _byteBuffers;,java.util.concurrent.atomic.AtomicReferenceArray _byteBuffers,"protected , final "
com.fasterxml.jackson.core.util.BufferRecycler._charBuffers,Field,Note: changed from simple array in 2.10:,protected final AtomicReferenceArray<char[]> _charBuffers;,java.util.concurrent.atomic.AtomicReferenceArray _charBuffers,"protected , final "
com.fasterxml.jackson.core.util.BufferRecycler._pool,Field,No Comment,private RecyclerPool<BufferRecycler> _pool;,com.fasterxml.jackson.core.util.RecyclerPool _pool,private 
com.fasterxml.jackson.core.util.JacksonFeatureSet.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.util.JacksonFeatureSet._enabled,Field,No Comment,protected int _enabled;,int _enabled,protected 
com.fasterxml.jackson.core.util.InternCache.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.util.InternCache.DEFAULT_MAX_ENTRIES,Field,"* Size to use is somewhat arbitrary, so let's choose something that's\n     * neither too small (low hit ratio) nor too large (waste of memory).\n     *<p>\n     * One consideration is possible attack via colliding {@link String#hashCode};\n     * because of this, limit to reasonably low setting.\n     *<p>\n     * Increased to 200 (from 100) in 2.18",private final static int DEFAULT_MAX_ENTRIES = 280;,int DEFAULT_MAX_ENTRIES,"private , final , static "
com.fasterxml.jackson.core.util.InternCache.instance,Field,No Comment,public final static InternCache instance = new InternCache();,com.fasterxml.jackson.core.util.InternCache instance,"public , final , static "
com.fasterxml.jackson.core.util.InternCache.lock,Field,"* As minor optimization let's try to avoid ""flush storms"",\n     * cases where multiple threads might try to concurrently\n     * flush the map.",private final ReentrantLock lock = new ReentrantLock();,java.util.concurrent.locks.ReentrantLock lock,"private , final "
com.fasterxml.jackson.core.util.ByteArrayBuilder.NO_BYTES,Field,No Comment,public final static byte[] NO_BYTES = new byte[0];,byte[] NO_BYTES,"public , final , static "
com.fasterxml.jackson.core.util.ByteArrayBuilder.INITIAL_BLOCK_SIZE,Field,Size of the first block we will allocate.,private final static int INITIAL_BLOCK_SIZE = 500;,int INITIAL_BLOCK_SIZE,"private , final , static "
com.fasterxml.jackson.core.util.ByteArrayBuilder.MAX_BLOCK_SIZE,Field,"For 2.10, let's limit to using 128k chunks (was 256k up to 2.9)",private final static int MAX_BLOCK_SIZE = (1 << 17);,int MAX_BLOCK_SIZE,"private , final , static "
com.fasterxml.jackson.core.util.ByteArrayBuilder.DEFAULT_BLOCK_ARRAY_SIZE,Field,No Comment,final static int DEFAULT_BLOCK_ARRAY_SIZE = 40;,int DEFAULT_BLOCK_ARRAY_SIZE,"final , static "
com.fasterxml.jackson.core.util.ByteArrayBuilder._bufferRecycler,Field,Optional buffer recycler instance that we can use for allocating the first block.,private final BufferRecycler _bufferRecycler;,com.fasterxml.jackson.core.util.BufferRecycler _bufferRecycler,"private , final "
com.fasterxml.jackson.core.util.ByteArrayBuilder._pastBlocks,Field,No Comment,private final LinkedList<byte[]> _pastBlocks = new LinkedList<>();,java.util.LinkedList _pastBlocks,"private , final "
com.fasterxml.jackson.core.util.ByteArrayBuilder._pastLen,Field,Number of bytes within byte arrays in {@link _pastBlocks}.,private int _pastLen;,int _pastLen,private 
com.fasterxml.jackson.core.util.ByteArrayBuilder._currBlock,Field,No Comment,private byte[] _currBlock;,byte[] _currBlock,private 
com.fasterxml.jackson.core.util.ByteArrayBuilder._currBlockPtr,Field,No Comment,private int _currBlockPtr;,int _currBlockPtr,private 
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.util.DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR,Field,"* Constant that specifies default ""root-level"" separator to use between\n     * root values: a single space character.\n     *\n     * @since 2.1\n     * @deprecated in 2.16. Use the Separators API instead.","@Deprecated\npublic final static SerializedString DEFAULT_ROOT_VALUE_SEPARATOR = new SerializedString("" "");",com.fasterxml.jackson.core.io.SerializedString DEFAULT_ROOT_VALUE_SEPARATOR,"public , final , static "
com.fasterxml.jackson.core.util.DefaultPrettyPrinter._arrayIndenter,Field,"* By default, let's use only spaces to separate array values.",protected Indenter _arrayIndenter = FixedSpaceIndenter.instance;,com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter _arrayIndenter,protected 
com.fasterxml.jackson.core.util.DefaultPrettyPrinter._objectIndenter,Field,"* By default, let's use linefeed-adding indenter for separate\n     * object entries. We'll further configure indenter to use\n     * system-specific linefeeds, and 2 spaces per level (as opposed to,\n     * say, single tabs)",protected Indenter _objectIndenter = DefaultIndenter.SYSTEM_LINEFEED_INSTANCE;,com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter _objectIndenter,protected 
com.fasterxml.jackson.core.util.DefaultPrettyPrinter._rootSeparator,Field,"* String printed between root-level values, if any.",protected SerializableString _rootSeparator;,com.fasterxml.jackson.core.SerializableString _rootSeparator,protected 
com.fasterxml.jackson.core.util.DefaultPrettyPrinter._spacesInObjectEntries,Field,"* By default we will add spaces around colons used to\n     * separate object fields and values.\n     * If disabled, will not use spaces around colon.\n     * \n     * @deprecated in 2.16. Use Separators API instead.",@Deprecated\nprotected boolean _spacesInObjectEntries = true;,boolean _spacesInObjectEntries,protected 
com.fasterxml.jackson.core.util.DefaultPrettyPrinter._nesting,Field,* Number of open levels of nesting. Used to determine amount of\n     * indentation to use.,protected transient int _nesting;,int _nesting,"protected , transient "
com.fasterxml.jackson.core.util.DefaultPrettyPrinter._separators,Field,* @since 2.9,protected Separators _separators;,com.fasterxml.jackson.core.util.Separators _separators,protected 
com.fasterxml.jackson.core.util.DefaultPrettyPrinter._objectFieldValueSeparatorWithSpaces,Field,* @since 2.9,protected String _objectFieldValueSeparatorWithSpaces;,java.lang.String _objectFieldValueSeparatorWithSpaces,protected 
com.fasterxml.jackson.core.util.DefaultPrettyPrinter._objectEntrySeparator,Field,* @since 2.16,protected String _objectEntrySeparator;,java.lang.String _objectEntrySeparator,protected 
com.fasterxml.jackson.core.util.DefaultPrettyPrinter._objectEmptySeparator,Field,"* String to use in empty Object to separate start and end markers.\n     * Default is single space, resulting in output of {@code { }}.\n     * \n     * @since 2.17",protected String _objectEmptySeparator;,java.lang.String _objectEmptySeparator,protected 
com.fasterxml.jackson.core.util.DefaultPrettyPrinter._arrayValueSeparator,Field,* @since 2.16,protected String _arrayValueSeparator;,java.lang.String _arrayValueSeparator,protected 
com.fasterxml.jackson.core.util.DefaultPrettyPrinter._arrayEmptySeparator,Field,"* String to use in empty Array to separate start and end markers.\n     * Default is single space, resulting in output of {@code [ ]}.\n     * \n     * @since 2.17",protected String _arrayEmptySeparator;,java.lang.String _arrayEmptySeparator,protected 
com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter.instance,Field,No Comment,public static final NopIndenter instance = new NopIndenter();,com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter instance,"public , static , final "
com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter.instance,Field,No Comment,public static final FixedSpaceIndenter instance = new FixedSpaceIndenter();,com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter instance,"public , static , final "
com.fasterxml.jackson.core.util.MinimalPrettyPrinter.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.util.MinimalPrettyPrinter._rootValueSeparator,Field,No Comment,protected String _rootValueSeparator;,java.lang.String _rootValueSeparator,protected 
com.fasterxml.jackson.core.util.MinimalPrettyPrinter._separators,Field,* @since 2.9,protected Separators _separators;,com.fasterxml.jackson.core.util.Separators _separators,protected 
com.fasterxml.jackson.core.util.VersionUtil.V_SEP,Field,No Comment,"private final static Pattern V_SEP = Pattern.compile(""[-_./;:]"");",java.util.regex.Pattern V_SEP,"private , final , static "
com.fasterxml.jackson.core.util.JsonParserDelegate.delegate,Field,* Delegate object that method calls are delegated to.,protected JsonParser delegate;,com.fasterxml.jackson.core.JsonParser delegate,protected 
com.fasterxml.jackson.core.util.ThreadLocalBufferManager.RELEASE_LOCK,Field,* A lock to make sure releaseBuffers is only executed by one thread at a time\n     * since it iterates over and modifies the allSoftBufRecyclers.,private final ReentrantLock RELEASE_LOCK = new ReentrantLock();,java.util.concurrent.locks.ReentrantLock RELEASE_LOCK,"private , final "
com.fasterxml.jackson.core.util.ThreadLocalBufferManager._trackedRecyclers,Field,"* A set of all SoftReferences to all BufferRecyclers to be able to release them on shutdown.\n     * 'All' means the ones created by this class, in this classloader.\n     * There may be more from other classloaders.\n     * We use a HashSet to have quick O(1) add and remove operations.\n     *<p>\n     * NOTE: assumption is that {@link SoftReference} has its {@code equals()} and\n     * {@code hashCode()} implementations defined so that they use object identity, so\n     * we do not need to use something like {@link IdentityHashMap}","private final Map<SoftReference<BufferRecycler>, Boolean> _trackedRecyclers = new ConcurrentHashMap<>();",java.util.Map _trackedRecyclers,"private , final "
com.fasterxml.jackson.core.util.ThreadLocalBufferManager._refQueue,Field,"* Queue where gc will put just-cleared SoftReferences, previously referencing BufferRecyclers.\n     * We use it to remove the cleared softRefs from the above set.",private final ReferenceQueue<BufferRecycler> _refQueue = new ReferenceQueue<>();,java.lang.ref.ReferenceQueue _refQueue,"private , final "
com.fasterxml.jackson.core.util.ThreadLocalBufferManager$ThreadLocalBufferManagerHolder.manager,Field,No Comment,static final ThreadLocalBufferManager manager = new ThreadLocalBufferManager();,com.fasterxml.jackson.core.util.ThreadLocalBufferManager manager,"static , final "
com.fasterxml.jackson.core.util.JsonRecyclerPools$ThreadLocalPool.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.util.JsonRecyclerPools$ThreadLocalPool.GLOBAL,Field,No Comment,protected static final ThreadLocalPool GLOBAL = new ThreadLocalPool();,com.fasterxml.jackson.core.util.JsonRecyclerPools$ThreadLocalPool GLOBAL,"protected , static , final "
com.fasterxml.jackson.core.util.JsonRecyclerPools$NonRecyclingPool.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.util.JsonRecyclerPools$NonRecyclingPool.GLOBAL,Field,No Comment,protected static final NonRecyclingPool GLOBAL = new NonRecyclingPool();,com.fasterxml.jackson.core.util.JsonRecyclerPools$NonRecyclingPool GLOBAL,"protected , static , final "
com.fasterxml.jackson.core.util.JsonRecyclerPools$ConcurrentDequePool.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.util.JsonRecyclerPools$ConcurrentDequePool.GLOBAL,Field,No Comment,protected static final ConcurrentDequePool GLOBAL = new ConcurrentDequePool(SERIALIZATION_SHARED);,com.fasterxml.jackson.core.util.JsonRecyclerPools$ConcurrentDequePool GLOBAL,"protected , static , final "
com.fasterxml.jackson.core.util.JsonRecyclerPools$LockFreePool.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.util.JsonRecyclerPools$LockFreePool.GLOBAL,Field,No Comment,protected static final LockFreePool GLOBAL = new LockFreePool(SERIALIZATION_SHARED);,com.fasterxml.jackson.core.util.JsonRecyclerPools$LockFreePool GLOBAL,"protected , static , final "
com.fasterxml.jackson.core.util.JsonRecyclerPools$BoundedPool.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.util.JsonRecyclerPools$BoundedPool.GLOBAL,Field,No Comment,protected static final BoundedPool GLOBAL = new BoundedPool(SERIALIZATION_SHARED);,com.fasterxml.jackson.core.util.JsonRecyclerPools$BoundedPool GLOBAL,"protected , static , final "
com.fasterxml.jackson.core.StreamReadConstraints.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.StreamReadConstraints.DEFAULT_MAX_DEPTH,Field,* Default setting for maximum depth: see {@link Builder#maxNestingDepth(int)} for details.,public static final int DEFAULT_MAX_DEPTH = 1000;,int DEFAULT_MAX_DEPTH,"public , static , final "
com.fasterxml.jackson.core.StreamReadConstraints.DEFAULT_MAX_DOC_LEN,Field,* Default setting for maximum document length:\n     * see {@link Builder#maxDocumentLength} for details.,public static final long DEFAULT_MAX_DOC_LEN = -1L;,long DEFAULT_MAX_DOC_LEN,"public , static , final "
com.fasterxml.jackson.core.StreamReadConstraints.DEFAULT_MAX_TOKEN_COUNT,Field,* Default setting for maximum token count:\n     * see {@link Builder#maxTokenCount(long)} for details.,public static final long DEFAULT_MAX_TOKEN_COUNT = -1L;,long DEFAULT_MAX_TOKEN_COUNT,"public , static , final "
com.fasterxml.jackson.core.StreamReadConstraints.DEFAULT_MAX_NUM_LEN,Field,* @since 2.16,public static final int DEFAULT_MAX_NUM_LEN = 1000;,int DEFAULT_MAX_NUM_LEN,"public , static , final "
com.fasterxml.jackson.core.StreamReadConstraints.DEFAULT_MAX_STRING_LEN,Field,* Default setting for maximum string length: see {@link Builder#maxStringLength(int)}\n     * for details.\n     *<p>\n     * NOTE: Jackson 2.15.0 initially used a lower setting (5_000_000).,public static final int DEFAULT_MAX_STRING_LEN = 20_000_000;,int DEFAULT_MAX_STRING_LEN,"public , static , final "
com.fasterxml.jackson.core.StreamReadConstraints.DEFAULT_MAX_NAME_LEN,Field,* Default setting for maximum name length: see {@link Builder#maxNameLength(int)}\n     * for details.\n     *\n     * @since 2.16,public static final int DEFAULT_MAX_NAME_LEN = 50_000;,int DEFAULT_MAX_NAME_LEN,"public , static , final "
com.fasterxml.jackson.core.StreamReadConstraints.MAX_BIGINT_SCALE_MAGNITUDE,Field,"* Limit for the maximum magnitude of Scale of {@link java.math.BigDecimal} that can be\n     * converted to {@link java.math.BigInteger}.\n     *<p>\n     * ""100k digits ought to be enough for anybody!""",private static final int MAX_BIGINT_SCALE_MAGNITUDE = 100_000;,int MAX_BIGINT_SCALE_MAGNITUDE,"private , static , final "
com.fasterxml.jackson.core.StreamReadConstraints._maxNestingDepth,Field,No Comment,protected final int _maxNestingDepth;,int _maxNestingDepth,"protected , final "
com.fasterxml.jackson.core.StreamReadConstraints._maxDocLen,Field,No Comment,protected final long _maxDocLen;,long _maxDocLen,"protected , final "
com.fasterxml.jackson.core.StreamReadConstraints._maxTokenCount,Field,No Comment,protected final long _maxTokenCount;,long _maxTokenCount,"protected , final "
com.fasterxml.jackson.core.StreamReadConstraints._maxNumLen,Field,No Comment,protected final int _maxNumLen;,int _maxNumLen,"protected , final "
com.fasterxml.jackson.core.StreamReadConstraints._maxStringLen,Field,No Comment,protected final int _maxStringLen;,int _maxStringLen,"protected , final "
com.fasterxml.jackson.core.StreamReadConstraints._maxNameLen,Field,No Comment,protected final int _maxNameLen;,int _maxNameLen,"protected , final "
com.fasterxml.jackson.core.StreamReadConstraints.DEFAULT,Field,No Comment,"private static StreamReadConstraints DEFAULT = new StreamReadConstraints(DEFAULT_MAX_DEPTH, DEFAULT_MAX_DOC_LEN, DEFAULT_MAX_NUM_LEN, DEFAULT_MAX_STRING_LEN, DEFAULT_MAX_NAME_LEN);",com.fasterxml.jackson.core.StreamReadConstraints DEFAULT,"private , static "
com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxDocLen,Field,No Comment,private long maxDocLen;,long maxDocLen,private 
com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxTokenCount,Field,No Comment,private long maxTokenCount;,long maxTokenCount,private 
com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxNestingDepth,Field,No Comment,private int maxNestingDepth;,int maxNestingDepth,private 
com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxNumLen,Field,No Comment,private int maxNumLen;,int maxNumLen,private 
com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxStringLen,Field,No Comment,private int maxStringLen;,int maxStringLen,private 
com.fasterxml.jackson.core.StreamReadConstraints$Builder.maxNameLen,Field,No Comment,private int maxNameLen;,int maxNameLen,private 
com.fasterxml.jackson.core.JsonTokenId.ID_NOT_AVAILABLE,Field,"* Id used to represent {@link JsonToken#NOT_AVAILABLE}, used in\n     * cases where a token may become available when more input\n     * is available: this occurs in non-blocking use cases.",public final static int ID_NOT_AVAILABLE = -1;,int ID_NOT_AVAILABLE,"public , final , static "
com.fasterxml.jackson.core.JsonTokenId.ID_NO_TOKEN,Field,"* Id used to represent the case where no {@link JsonToken}\n     * is available: either because {@link JsonParser} has not been\n     * advanced to first token, or because no more tokens will be\n     * available (end-of-input or explicit closing of parser}.",public final static int ID_NO_TOKEN = 0;,int ID_NO_TOKEN,"public , final , static "
com.fasterxml.jackson.core.JsonTokenId.ID_START_OBJECT,Field,* Id used to represent {@link JsonToken#START_OBJECT},public final static int ID_START_OBJECT = 1;,int ID_START_OBJECT,"public , final , static "
com.fasterxml.jackson.core.JsonTokenId.ID_END_OBJECT,Field,* Id used to represent {@link JsonToken#END_OBJECT},public final static int ID_END_OBJECT = 2;,int ID_END_OBJECT,"public , final , static "
com.fasterxml.jackson.core.JsonTokenId.ID_START_ARRAY,Field,* Id used to represent {@link JsonToken#START_ARRAY},public final static int ID_START_ARRAY = 3;,int ID_START_ARRAY,"public , final , static "
com.fasterxml.jackson.core.JsonTokenId.ID_END_ARRAY,Field,* Id used to represent {@link JsonToken#END_ARRAY},public final static int ID_END_ARRAY = 4;,int ID_END_ARRAY,"public , final , static "
com.fasterxml.jackson.core.JsonTokenId.ID_FIELD_NAME,Field,* Id used to represent {@link JsonToken#FIELD_NAME}\n     *<p>\n     * NOTE: in Jackson 3.x this enum is renamed as {@code ID_PROPERTY_NAME},public final static int ID_FIELD_NAME = 5;,int ID_FIELD_NAME,"public , final , static "
com.fasterxml.jackson.core.JsonTokenId.ID_STRING,Field,* Id used to represent {@link JsonToken#VALUE_STRING},public final static int ID_STRING = 6;,int ID_STRING,"public , final , static "
com.fasterxml.jackson.core.JsonTokenId.ID_NUMBER_INT,Field,* Id used to represent {@link JsonToken#VALUE_NUMBER_INT},public final static int ID_NUMBER_INT = 7;,int ID_NUMBER_INT,"public , final , static "
com.fasterxml.jackson.core.JsonTokenId.ID_NUMBER_FLOAT,Field,* Id used to represent {@link JsonToken#VALUE_NUMBER_FLOAT},public final static int ID_NUMBER_FLOAT = 8;,int ID_NUMBER_FLOAT,"public , final , static "
com.fasterxml.jackson.core.JsonTokenId.ID_TRUE,Field,* Id used to represent {@link JsonToken#VALUE_TRUE},public final static int ID_TRUE = 9;,int ID_TRUE,"public , final , static "
com.fasterxml.jackson.core.JsonTokenId.ID_FALSE,Field,* Id used to represent {@link JsonToken#VALUE_FALSE},public final static int ID_FALSE = 10;,int ID_FALSE,"public , final , static "
com.fasterxml.jackson.core.JsonTokenId.ID_NULL,Field,No Comment,public final static int ID_NULL = 11;,int ID_NULL,"public , final , static "
com.fasterxml.jackson.core.JsonTokenId.ID_EMBEDDED_OBJECT,Field,* Id used to represent {@link JsonToken#VALUE_EMBEDDED_OBJECT},public final static int ID_EMBEDDED_OBJECT = 12;,int ID_EMBEDDED_OBJECT,"public , final , static "
com.fasterxml.jackson.core.JsonFactory.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 2;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.JsonFactory.FORMAT_NAME_JSON,Field,* Name used to identify JSON format\n     * (and returned by {@link #getFormatName()},"public final static String FORMAT_NAME_JSON = ""JSON"";",java.lang.String FORMAT_NAME_JSON,"public , final , static "
com.fasterxml.jackson.core.JsonFactory.DEFAULT_FACTORY_FEATURE_FLAGS,Field,* Bitfield (set of flags) of all factory features that are enabled by default.,protected final static int DEFAULT_FACTORY_FEATURE_FLAGS = JsonFactory.Feature.collectDefaults();,int DEFAULT_FACTORY_FEATURE_FLAGS,"protected , final , static "
com.fasterxml.jackson.core.JsonFactory.DEFAULT_PARSER_FEATURE_FLAGS,Field,* Bitfield (set of flags) of all parser features that are enabled\n     * by default.,protected final static int DEFAULT_PARSER_FEATURE_FLAGS = JsonParser.Feature.collectDefaults();,int DEFAULT_PARSER_FEATURE_FLAGS,"protected , final , static "
com.fasterxml.jackson.core.JsonFactory.DEFAULT_GENERATOR_FEATURE_FLAGS,Field,* Bitfield (set of flags) of all generator features that are enabled\n     * by default.,protected final static int DEFAULT_GENERATOR_FEATURE_FLAGS = JsonGenerator.Feature.collectDefaults();,int DEFAULT_GENERATOR_FEATURE_FLAGS,"protected , final , static "
com.fasterxml.jackson.core.JsonFactory.DEFAULT_ROOT_VALUE_SEPARATOR,Field,No Comment,public final static SerializableString DEFAULT_ROOT_VALUE_SEPARATOR = new SerializedString(Separators.DEFAULT_ROOT_VALUE_SEPARATOR);,com.fasterxml.jackson.core.SerializableString DEFAULT_ROOT_VALUE_SEPARATOR,"public , final , static "
com.fasterxml.jackson.core.JsonFactory.DEFAULT_QUOTE_CHAR,Field,* @since 2.10,"public final static char DEFAULT_QUOTE_CHAR = '""';",char DEFAULT_QUOTE_CHAR,"public , final , static "
com.fasterxml.jackson.core.JsonFactory._rootCharSymbols,Field,"* Each factory comes equipped with a shared root symbol table.\n     * It should not be linked back to the original blueprint, to\n     * avoid contents from leaking between factories.\n     *<p>\n     * NOTE: non-final since 2.17 due to need to re-create if\n     * {@link StreamReadConstraints} re-configured for factory.",protected transient CharsToNameCanonicalizer _rootCharSymbols;,com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _rootCharSymbols,"protected , transient "
com.fasterxml.jackson.core.JsonFactory._byteSymbolCanonicalizer,Field,"* Alternative to the basic symbol table, some stream-based\n     * parsers use different name canonicalization method.\n     *\n     * @since 2.6",protected final transient ByteQuadsCanonicalizer _byteSymbolCanonicalizer = ByteQuadsCanonicalizer.createRoot();,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _byteSymbolCanonicalizer,"protected , final , transient "
com.fasterxml.jackson.core.JsonFactory._factoryFeatures,Field,* Currently enabled factory features.,protected int _factoryFeatures = DEFAULT_FACTORY_FEATURE_FLAGS;,int _factoryFeatures,protected 
com.fasterxml.jackson.core.JsonFactory._parserFeatures,Field,* Currently enabled parser features.,protected int _parserFeatures = DEFAULT_PARSER_FEATURE_FLAGS;,int _parserFeatures,protected 
com.fasterxml.jackson.core.JsonFactory._generatorFeatures,Field,* Currently enabled generator features.,protected int _generatorFeatures = DEFAULT_GENERATOR_FEATURE_FLAGS;,int _generatorFeatures,protected 
com.fasterxml.jackson.core.JsonFactory._recyclerPool,Field,* {@link RecyclerPool} configured for use by this factory: used for\n     * recycling underlying read and/or write buffers via {@link BufferRecycler}.\n     *\n     * @since 2.16,protected RecyclerPool<BufferRecycler> _recyclerPool;,com.fasterxml.jackson.core.util.RecyclerPool _recyclerPool,protected 
com.fasterxml.jackson.core.JsonFactory._objectCodec,Field,"* Object that implements conversion functionality between\n     * Java objects and JSON content. For base JsonFactory implementation\n     * usually not set by default, but can be explicitly set.\n     * Sub-classes (like @link org.codehaus.jackson.map.MappingJsonFactory}\n     * usually provide an implementation.",protected ObjectCodec _objectCodec;,com.fasterxml.jackson.core.ObjectCodec _objectCodec,protected 
com.fasterxml.jackson.core.JsonFactory._characterEscapes,Field,"* Definition of custom character escapes to use for generators created\n     * by this factory, if any. If null, standard data format specific\n     * escapes are used.",protected CharacterEscapes _characterEscapes;,com.fasterxml.jackson.core.io.CharacterEscapes _characterEscapes,protected 
com.fasterxml.jackson.core.JsonFactory._streamReadConstraints,Field,* Read constraints to use for {@link JsonParser}s constructed using\n     * this factory.\n     *\n     * @since 2.15,protected StreamReadConstraints _streamReadConstraints;,com.fasterxml.jackson.core.StreamReadConstraints _streamReadConstraints,protected 
com.fasterxml.jackson.core.JsonFactory._errorReportConfiguration,Field,* Container for configuration values used when handling erroneous token inputs. \n     *\n     * @since 2.16,protected ErrorReportConfiguration _errorReportConfiguration;,com.fasterxml.jackson.core.ErrorReportConfiguration _errorReportConfiguration,protected 
com.fasterxml.jackson.core.JsonFactory._streamWriteConstraints,Field,* Write constraints to use for {@link JsonGenerator}s constructed using\n     * this factory.\n     *\n     * @since 2.16,protected StreamWriteConstraints _streamWriteConstraints;,com.fasterxml.jackson.core.StreamWriteConstraints _streamWriteConstraints,protected 
com.fasterxml.jackson.core.JsonFactory._inputDecorator,Field,"* Optional helper object that may decorate input sources, to do\n     * additional processing on input during parsing.",protected InputDecorator _inputDecorator;,com.fasterxml.jackson.core.io.InputDecorator _inputDecorator,protected 
com.fasterxml.jackson.core.JsonFactory._outputDecorator,Field,"* Optional helper object that may decorate output object, to do\n     * additional processing on output during content generation.",protected OutputDecorator _outputDecorator;,com.fasterxml.jackson.core.io.OutputDecorator _outputDecorator,protected 
com.fasterxml.jackson.core.JsonFactory._generatorDecorators,Field,* List of {@link JsonGeneratorDecorator}s to apply to {@link JsonGenerator}s\n     * after construction; applied in the order of addition.\n     *\n     * @since 2.16,protected final List<JsonGeneratorDecorator> _generatorDecorators;,java.util.List _generatorDecorators,"protected , final "
com.fasterxml.jackson.core.JsonFactory._rootValueSeparator,Field,"* Separator used between root-level values, if any; null indicates\n     * ""do not add separator"".\n     * Default separator is a single space character.\n     *\n     * @since 2.1",protected SerializableString _rootValueSeparator = DEFAULT_ROOT_VALUE_SEPARATOR;,com.fasterxml.jackson.core.SerializableString _rootValueSeparator,protected 
com.fasterxml.jackson.core.JsonFactory._maximumNonEscapedChar,Field,"* Optional threshold used for automatically escaping character above certain character\n     * code value: either {@code 0} to indicate that no threshold is specified, or value\n     * at or above 127 to indicate last character code that is NOT automatically escaped\n     * (but depends on other configuration rules for checking).\n     *\n     * @since 2.10",protected int _maximumNonEscapedChar;,int _maximumNonEscapedChar,protected 
com.fasterxml.jackson.core.JsonFactory._quoteChar,Field,* Character used for quoting field names (if field name quoting has not\n     * been disabled with {@link JsonWriteFeature#QUOTE_FIELD_NAMES})\n     * and JSON String values.,protected final char _quoteChar;,char _quoteChar,"protected , final "
com.fasterxml.jackson.core.io.CharacterEscapes.ESCAPE_NONE,Field,* Value used for lookup tables to indicate that matching characters\n     * do not need to be escaped.,public final static int ESCAPE_NONE = 0;,int ESCAPE_NONE,"public , final , static "
com.fasterxml.jackson.core.io.CharacterEscapes.ESCAPE_STANDARD,Field,"* Value used for lookup tables to indicate that matching characters\n     * are to be escaped using standard escaping; for JSON this means\n     * (for example) using ""backslash - u"" escape method.",public final static int ESCAPE_STANDARD = -1;,int ESCAPE_STANDARD,"public , final , static "
com.fasterxml.jackson.core.io.CharacterEscapes.ESCAPE_CUSTOM,Field,* Value used for lookup tables to indicate that matching characters\n     * will need custom escapes; and that another call\n     * to {@link #getEscapeSequence} is needed to figure out exact escape\n     * sequence to output.,public final static int ESCAPE_CUSTOM = -2;,int ESCAPE_CUSTOM,"public , final , static "
com.fasterxml.jackson.core.io.UTF32Reader.LAST_VALID_UNICODE_CHAR,Field,* JSON actually limits available Unicode range in the high end\n     * to the same as xml (to basically limit UTF-8 max byte sequence\n     * length to 4),protected final static int LAST_VALID_UNICODE_CHAR = 0x10FFFF;,int LAST_VALID_UNICODE_CHAR,"protected , final , static "
com.fasterxml.jackson.core.io.UTF32Reader.NC,Field,No Comment,protected final static char NC = (char) 0;,char NC,"protected , final , static "
com.fasterxml.jackson.core.io.UTF32Reader._context,Field,No Comment,protected final IOContext _context;,com.fasterxml.jackson.core.io.IOContext _context,"protected , final "
com.fasterxml.jackson.core.io.UTF32Reader._in,Field,No Comment,protected InputStream _in;,java.io.InputStream _in,protected 
com.fasterxml.jackson.core.io.UTF32Reader._buffer,Field,No Comment,protected byte[] _buffer;,byte[] _buffer,protected 
com.fasterxml.jackson.core.io.UTF32Reader._ptr,Field,No Comment,protected int _ptr;,int _ptr,protected 
com.fasterxml.jackson.core.io.UTF32Reader._length,Field,No Comment,protected int _length;,int _length,protected 
com.fasterxml.jackson.core.io.UTF32Reader._bigEndian,Field,No Comment,protected final boolean _bigEndian;,boolean _bigEndian,"protected , final "
com.fasterxml.jackson.core.io.UTF32Reader._surrogate,Field,"* Although input is fine with full Unicode set, Java still uses\n     * 16-bit chars, so we may have to split high-order chars into\n     * surrogate pairs.",protected char _surrogate = NC;,char _surrogate,protected 
com.fasterxml.jackson.core.io.UTF32Reader._charCount,Field,* Total read character count; used for error reporting purposes,protected int _charCount;,int _charCount,protected 
com.fasterxml.jackson.core.io.UTF32Reader._byteCount,Field,* Total read byte count; used for error reporting purposes,protected int _byteCount;,int _byteCount,protected 
com.fasterxml.jackson.core.io.UTF32Reader._managedBuffers,Field,No Comment,protected final boolean _managedBuffers;,boolean _managedBuffers,"protected , final "
com.fasterxml.jackson.core.io.UTF32Reader._tmpBuf,Field,No Comment,protected char[] _tmpBuf;,char[] _tmpBuf,protected 
com.fasterxml.jackson.core.io.CharTypes.HC,Field,No Comment,"protected final static char[] HC = ""0123456789ABCDEF"".toCharArray();",char[] HC,"protected , final , static "
com.fasterxml.jackson.core.io.CharTypes.HClower,Field,No Comment,"protected final static char[] HClower = ""0123456789abcdef"".toCharArray();",char[] HClower,"protected , final , static "
com.fasterxml.jackson.core.io.CharTypes.HB,Field,No Comment,protected final static byte[] HB;,byte[] HB,"protected , final , static "
com.fasterxml.jackson.core.io.CharTypes.HBlower,Field,No Comment,protected final static byte[] HBlower;,byte[] HBlower,"protected , final , static "
com.fasterxml.jackson.core.io.CharTypes.sInputCodes,Field,* Lookup table used for determining which input characters\n     * need special handling when contained in text segment.,protected final static int[] sInputCodes;,int[] sInputCodes,"protected , final , static "
com.fasterxml.jackson.core.io.CharTypes.sInputCodesUTF8,Field,* Additionally we can combine UTF-8 decoding info into similar\n     * data table.,protected final static int[] sInputCodesUTF8;,int[] sInputCodesUTF8,"protected , final , static "
com.fasterxml.jackson.core.io.CharTypes.sInputCodesJsNames,Field,"* To support non-default (and -standard) unquoted field names mode,\n     * need to have alternate checking.\n     * Basically this is list of 8-bit ASCII characters that are legal\n     * as part of Javascript identifier",protected final static int[] sInputCodesJsNames;,int[] sInputCodesJsNames,"protected , final , static "
com.fasterxml.jackson.core.io.CharTypes.sInputCodesUtf8JsNames,Field,"* This table is similar to Latin-1, except that it marks all ""high-bit""\n     * code as ok. They will be validated at a later point, when decoding\n     * name",protected final static int[] sInputCodesUtf8JsNames;,int[] sInputCodesUtf8JsNames,"protected , final , static "
com.fasterxml.jackson.core.io.CharTypes.sInputCodesComment,Field,* Decoding table used to quickly determine characters that are\n     * relevant within comment content.,protected final static int[] sInputCodesComment;,int[] sInputCodesComment,"protected , final , static "
com.fasterxml.jackson.core.io.CharTypes.sInputCodesWS,Field,* Decoding table used for skipping white space and comments.\n     *\n     * @since 2.3,protected final static int[] sInputCodesWS;,int[] sInputCodesWS,"protected , final , static "
com.fasterxml.jackson.core.io.CharTypes.sOutputEscapes128,Field,* Lookup table used for determining which output characters in\n     * 7-bit ASCII range need to be quoted.,protected final static int[] sOutputEscapes128;,int[] sOutputEscapes128,"protected , final , static "
com.fasterxml.jackson.core.io.CharTypes.sOutputEscapes128WithSlash,Field,* Lookup table same as {@link #sOutputEscapes128} except that\n     * forward slash ('/') is also escaped,protected final static int[] sOutputEscapes128WithSlash;,int[] sOutputEscapes128WithSlash,"protected , final , static "
com.fasterxml.jackson.core.io.CharTypes.sHexValues,Field,"* Lookup table for the first 256 Unicode characters (ASCII / UTF-8)\n     * range. For actual hex digits, contains corresponding value;\n     * for others -1.\n     *<p>\n     * NOTE: before 2.10.1, was of size 128, extended for simpler handling",protected final static int[] sHexValues = new int[256];,int[] sHexValues,"protected , final , static "
com.fasterxml.jackson.core.io.CharTypes$AltEscapes.instance,Field,No Comment,public final static AltEscapes instance = new AltEscapes();,com.fasterxml.jackson.core.io.CharTypes$AltEscapes instance,"public , final , static "
com.fasterxml.jackson.core.io.CharTypes$AltEscapes._altEscapes,Field,No Comment,private int[][] _altEscapes = new int[128][];,int[][] _altEscapes,private 
com.fasterxml.jackson.core.io.CharTypes$AltEscapes._altEscapesWithSlash,Field,@since 2.17,private int[][] _altEscapesWithSlash = new int[128][];,int[][] _altEscapesWithSlash,private 
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.P,Field,The precision in bits.,static final int P = 53;,int P,"static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.W,Field,Exponent width in bits.,private static final int W = (Double.SIZE - 1) - (P - 1);,int W,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.Q_MIN,Field,Minimum value of the exponent: -(2^(W-1)) - P + 3.,static final int Q_MIN = (-1 << W - 1) - P + 3;,int Q_MIN,"static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.Q_MAX,Field,Maximum value of the exponent: 2^(W-1) - P.,static final int Q_MAX = (1 << W - 1) - P;,int Q_MAX,"static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.E_MIN,Field,10^(E_MIN - 1) <= MIN_VALUE < 10^E_MIN,static final int E_MIN = -323;,int E_MIN,"static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.E_MAX,Field,10^(E_MAX - 1) <= MAX_VALUE < 10^E_MAX,static final int E_MAX = 309;,int E_MAX,"static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.C_TINY,Field,"Threshold to detect tiny values, as in section 8.1.1 of [1]",static final long C_TINY = 3;,long C_TINY,"static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.K_MIN,Field,"The minimum and maximum k, as in section 8 of [1]",static final int K_MIN = -324;,int K_MIN,"static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.K_MAX,Field,No Comment,static final int K_MAX = 292;,int K_MAX,"static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.H,Field,H is as in section 8 of [1].,static final int H = 17;,int H,"static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.C_MIN,Field,Minimum value of the significand of a normal value: 2^(P-1).,private static final long C_MIN = 1L << P - 1;,long C_MIN,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.BQ_MASK,Field,Mask to extract the biased exponent.,private static final int BQ_MASK = (1 << W) - 1;,int BQ_MASK,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.T_MASK,Field,Mask to extract the fraction bits.,private static final long T_MASK = (1L << P - 1) - 1;,long T_MASK,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.MASK_63,Field,Used in rop().,private static final long MASK_63 = (1L << 63) - 1;,long MASK_63,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.MASK_28,Field,Used for left-to-tight digit extraction.,private static final int MASK_28 = (1 << 28) - 1;,int MASK_28,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.NON_SPECIAL,Field,No Comment,private static final int NON_SPECIAL = 0;,int NON_SPECIAL,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.PLUS_ZERO,Field,No Comment,private static final int PLUS_ZERO = 1;,int PLUS_ZERO,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.MINUS_ZERO,Field,No Comment,private static final int MINUS_ZERO = 2;,int MINUS_ZERO,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.PLUS_INF,Field,No Comment,private static final int PLUS_INF = 3;,int PLUS_INF,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.MINUS_INF,Field,No Comment,private static final int MINUS_INF = 4;,int MINUS_INF,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.NAN,Field,No Comment,private static final int NAN = 5;,int NAN,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.MAX_CHARS,Field,Room for the longer of the forms\n        -ddddd.dddddddddddd         H + 2 characters\n        -0.00ddddddddddddddddd      H + 5 characters\n        -d.ddddddddddddddddE-eee    H + 7 characters\n    where there are H digits d,public final int MAX_CHARS = H + 7;,int MAX_CHARS,"public , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.bytes,Field,Numerical results are created here...,private final byte[] bytes = new byte[MAX_CHARS];,byte[] bytes,"private , final "
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal.index,Field,Index into bytes of rightmost valid character.,private int index;,int index,private 
com.fasterxml.jackson.core.io.schubfach.MathUtils.K_MIN,Field,The boundaries for k in g0(int) and g1(int).\n    K_MIN must be DoubleToDecimal.K_MIN or less.\n    K_MAX must be DoubleToDecimal.K_MAX or more.,static final int K_MIN = -324;,int K_MIN,"static , final "
com.fasterxml.jackson.core.io.schubfach.MathUtils.K_MAX,Field,No Comment,static final int K_MAX = 292;,int K_MAX,"static , final "
com.fasterxml.jackson.core.io.schubfach.MathUtils.H,Field,Must be DoubleToDecimal.H or more,static final int H = 17;,int H,"static , final "
com.fasterxml.jackson.core.io.schubfach.MathUtils.Q_10,Field,"C_10 = floor(log10(2) * 2^Q_10), A_10 = floor(log10(3/4) * 2^Q_10)",private static final int Q_10 = 41;,int Q_10,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.MathUtils.C_10,Field,No Comment,private static final long C_10 = 661_971_961_083L;,long C_10,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.MathUtils.A_10,Field,No Comment,private static final long A_10 = -274_743_187_321L;,long A_10,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.MathUtils.Q_2,Field,C_2 = floor(log2(10) * 2^Q_2),private static final int Q_2 = 38;,int Q_2,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.MathUtils.C_2,Field,No Comment,private static final long C_2 = 913_124_641_741L;,long C_2,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.MathUtils.pow10,Field,The first powers of 10. The last entry must be 10^H.,"private static final long[] pow10 = { 1L, 10L, 100L, 1_000L, 10_000L, 100_000L, 1_000_000L, 10_000_000L, 100_000_000L, 1_000_000_000L, 10_000_000_000L, 100_000_000_000L, 1_000_000_000_000L, 10_000_000_000_000L, 100_000_000_000_000L, 1_000_000_000_000_000L, 10_000_000_000_000_000L, 100_000_000_000_000_000L };",long[] pow10,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.MathUtils.g,Field,The precomputed values for g1(int) and g0(int).\n    The first entry must be for an exponent of K_MIN or less.\n    The last entry must be for an exponent of K_MAX or more.,"private static final long[] g = { /* -324 */\n0x4F0C_EDC9_5A71_8DD4L, 0x5B01_E8B0_9AA0_D1B5L, /* -323 */\n0x7E7B_160E_F71C_1621L, 0x119C_A780_F767_B5EEL, /* -322 */\n0x652F_44D8_C5B0_11B4L, 0x0E16_EC67_2C52_F7F2L, /* -321 */\n0x50F2_9D7A_37C0_0E29L, 0x5812_56B8_F042_5FF5L, /* -320 */\n0x40C2_1794_F966_71BAL, 0x79A8_4560_C035_1991L, /* -319 */\n0x679C_F287_F570_B5F7L, 0x75DA_089A_CD21_C281L, /* -318 */\n0x52E3_F539_9126_F7F9L, 0x44AE_6D48_A41B_0201L, /* -317 */\n0x424F_F761_40EB_F994L, 0x36F1_F106_E9AF_34CDL, /* -316 */\n0x6A19_8BCE_CE46_5C20L, 0x57E9_81A4_A918_547BL, /* -315 */\n0x54E1_3CA5_71D1_E34DL, 0x2CBA_CE1D_5413_76C9L, /* -314 */\n0x43E7_63B7_8E41_82A4L, 0x23C8_A4E4_4342_C56EL, /* -313 */\n0x6CA5_6C58_E39C_043AL, 0x060D_D4A0_6B9E_08B0L, /* -312 */\n0x56EA_BD13_E949_9CFBL, 0x1E71_76E6_BC7E_6D59L, /* -311 */\n0x4588_9743_2107_B0C8L, 0x7EC1_2BEB_C9FE_BDE1L, /* -310 */\n0x6F40_F205_01A5_E7A7L, 0x7E01_DFDF_A997_9635L, /* -309 */\n0x5900_C19D_9AEB_1FB9L, 0x4B34_B319_5479_44F7L, /* -308 */\n0x4733_CE17_AF22_7FC7L, 0x55C3_C27A_A9FA_9D93L, /* -307 */\n0x71EC_7CF2_B1D0_CC72L, 0x5606_03F7_765D_C8EAL, /* -306 */\n0x5B23_9728_8E40_A38EL, 0x7804_CFF9_2B7E_3A55L, /* -305 */\n0x48E9_45BA_0B66_E93FL, 0x1337_0CC7_55FE_9511L, /* -304 */\n0x74A8_6F90_123E_41FEL, 0x51F1_AE0B_BCCA_881BL, /* -303 */\n0x5D53_8C73_41CB_67FEL, 0x74C1_5809_63D5_39AFL, /* -302 */\n0x4AA9_3D29_016F_8665L, 0x43CD_E007_8310_FAF3L, /* -301 */\n0x7775_2EA8_024C_0A3CL, 0x0616_333F_381B_2B1EL, /* -300 */\n0x5F90_F220_01D6_6E96L, 0x3811_C298_F9AF_55B1L, /* -299 */\n0x4C73_F4E6_67DE_BEDEL, 0x600E_3547_2E25_DE28L, /* -298 */\n0x7A53_2170_A631_3164L, 0x3349_EED8_49D6_303FL, /* -297 */\n0x61DC_1AC0_84F4_2783L, 0x42A1_8BE0_3B11_C033L, /* -296 */\n0x4E49_AF00_6A5C_EC69L, 0x1BB4_6FE6_95A7_CCF5L, /* -295 */\n0x7D42_B19A_43C7_E0A8L, 0x2C53_E63D_BC3F_AE55L, /* -294 */\n0x6435_5AE1_CFD3_1A20L, 0x2376_51CA_FCFF_BEAAL, /* -293 */\n0x502A_AF1B_0CA8_E1B3L, 0x35F8_416F_30CC_9888L, /* -292 */\n0x4022_25AF_3D53_E7C2L, 0x5E60_3458_F3D6_E06DL, /* -291 */\n0x669D_0918_621F_D937L, 0x4A33_86F4_B957_CD7BL, /* -290 */\n0x5217_3A79_E819_7A92L, 0x6E8F_9F2A_2DDF_D796L, /* -289 */\n0x41AC_2EC7_ECE1_2EDBL, 0x720C_7F54_F17F_DFABL, /* -288 */\n0x6913_7E0C_AE35_17C6L, 0x1CE0_CBBB_1BFF_CC45L, /* -287 */\n0x540F_980A_24F7_4638L, 0x171A_3C95_AFFF_D69EL, /* -286 */\n0x433F_ACD4_EA5F_6B60L, 0x127B_63AA_F333_1218L, /* -285 */\n0x6B99_1487_DD65_7899L, 0x6A5F_05DE_51EB_5026L, /* -284 */\n0x5614_106C_B11D_FA14L, 0x5518_D17E_A7EF_7352L, /* -283 */\n0x44DC_D9F0_8DB1_94DDL, 0x2A7A_4132_1FF2_C2A8L, /* -282 */\n0x6E2E_2980_E2B5_BAFBL, 0x5D90_6850_331E_043FL, /* -281 */\n0x5824_EE00_B55E_2F2FL, 0x6473_86A6_8F4B_3699L, /* -280 */\n0x4683_F19A_2AB1_BF59L, 0x36C2_D21E_D908_F87BL, /* -279 */\n0x70D3_1C29_DDE9_3228L, 0x579E_1CFE_280E_5A5DL, /* -278 */\n0x5A42_7CEE_4B20_F4EDL, 0x2C7E_7D98_200B_7B7EL, /* -277 */\n0x4835_30BE_A280_C3F1L, 0x09FE_CAE0_19A2_C932L, /* -276 */\n0x7388_4DFD_D0CE_064EL, 0x4331_4499_C29E_0EB6L, /* -275 */\n0x5C6D_0B31_73D8_050BL, 0x4F5A_9D47_CEE4_D891L, /* -274 */\n0x49F0_D5C1_2979_9DA2L, 0x72AE_E439_7250_AD41L, /* -273 */\n0x764E_22CE_A8C2_95D1L, 0x377E_39F5_83B4_4868L, /* -272 */\n0x5EA4_E8A5_53CE_DE41L, 0x12CB_6191_3629_D387L, /* -271 */\n0x4BB7_2084_430B_E500L, 0x756F_8140_F821_7605L, /* -270 */\n0x7925_00D3_9E79_6E67L, 0x6F18_CECE_59CF_233CL, /* -269 */\n0x60EA_670F_B1FA_BEB9L, 0x3F47_0BD8_47D8_E8FDL, /* -268 */\n0x4D88_5272_F4C8_9894L, 0x329F_3CAD_0647_20CAL, /* -267 */\n0x7C0D_50B7_EE0D_C0EDL, 0x3765_2DE1_A3A5_0143L, /* -266 */\n0x633D_DA2C_BE71_6724L, 0x2C50_F181_4FB7_3436L, /* -265 */\n0x4F64_AE8A_31F4_5283L, 0x3D0D_8E01_0C92_902BL, /* -264 */\n0x7F07_7DA9_E986_EA6BL, 0x7B48_E334_E0EA_8045L, /* -263 */\n0x659F_97BB_2138_BB89L, 0x4907_1C2A_4D88_669DL, /* -262 */\n0x514C_7962_80FA_2FA1L, 0x20D2_7CEE_A46D_1EE4L, /* -261 */\n0x4109_FAB5_33FB_594DL, 0x670E_CA58_838A_7F1DL, /* -260 */\n0x680F_F788_532B_C216L, 0x0B4A_DD5A_6C10_CB62L, /* -259 */\n0x533F_F939_DC23_01ABL, 0x22A2_4AAE_BCDA_3C4EL, /* -258 */\n0x4299_942E_49B5_9AEFL, 0x354E_A225_63E1_C9D8L, /* -257 */\n0x6A8F_537D_42BC_2B18L, 0x554A_9D08_9FCF_A95AL, /* -256 */\n0x553F_75FD_CEFC_EF46L, 0x776E_E406_E63F_BAAEL, /* -255 */\n0x4432_C4CB_0BFD_8C38L, 0x5F8B_E99F_1E99_6225L, /* -254 */\n0x6D1E_07AB_4662_79F4L, 0x3279_75CB_6428_9D08L, /* -253 */\n0x574B_3955_D1E8_6190L, 0x2861_2B09_1CED_4A6DL, /* -252 */\n0x45D5_C777_DB20_4E0DL, 0x06B4_226D_B0BD_D524L, /* -251 */\n0x6FBC_7259_5E9A_167BL, 0x2453_6A49_1AC9_5506L, /* -250 */\n0x5963_8EAD_E548_11FCL, 0x1D0F_883A_7BD4_4405L, /* -249 */\n0x4782_D88B_1DD3_4196L, 0x4A72_D361_FCA9_D004L, /* -248 */\n0x726A_F411_C952_028AL, 0x43EA_EBCF_FAA9_4CD3L, /* -247 */\n0x5B88_C341_6DDB_353BL, 0x4FEF_230C_C887_70A9L, /* -246 */\n0x493A_35CD_F17C_2A96L, 0x0CBF_4F3D_6D39_26EEL, /* -245 */\n0x7529_EFAF_E8C6_AA89L, 0x6132_1862_485B_717CL, /* -244 */\n0x5DBB_2626_53D2_2207L, 0x675B_46B5_06AF_8DFDL, /* -243 */\n0x4AFC_1E85_0FDB_4E6CL, 0x52AF_6BC4_0559_3E64L, /* -242 */\n0x77F9_CA6E_7FC5_4A47L, 0x377F_12D3_3BC1_FD6DL, /* -241 */\n0x5FFB_0858_6637_6E9FL, 0x45FF_4242_9634_CABDL, /* -240 */\n0x4CC8_D379_EB5F_8BB2L, 0x6B32_9B68_782A_3BCBL, /* -239 */\n0x7ADA_EBF6_4565_AC51L, 0x2B84_2BDA_59DD_2C77L, /* -238 */\n0x6248_BCC5_0451_56A7L, 0x3C69_BCAE_AE4A_89F9L, /* -237 */\n0x4EA0_9704_0374_4552L, 0x6387_CA25_583B_A194L, /* -236 */\n0x7DCD_BE6C_D253_A21EL, 0x05A6_103B_C05F_68EDL, /* -235 */\n0x64A4_9857_0EA9_4E7EL, 0x37B8_0CFC_99E5_ED8AL, /* -234 */\n0x5083_AD12_7221_0B98L, 0x2C93_3D96_E184_BE08L, /* -233 */\n0x4069_5741_F4E7_3C79L, 0x7075_CADF_1AD0_9807L, /* -232 */\n0x670E_F203_2171_FA5CL, 0x4D89_4498_2AE7_59A4L, /* -231 */\n0x5272_5B35_B45B_2EB0L, 0x3E07_6A13_5585_E150L, /* -230 */\n0x41F5_15C4_9048_F226L, 0x64D2_BB42_AAD1_810DL, /* -229 */\n0x6988_22D4_1A0E_503EL, 0x07B7_9204_4482_6815L, /* -228 */\n0x546C_E8A9_AE71_D9CBL, 0x1FC6_0E69_D068_5344L, /* -227 */\n0x438A_53BA_F1F4_AE3CL, 0x196B_3EBB_0D20_429DL, /* -226 */\n0x6C10_85F7_E987_7D2DL, 0x0F11_FDF8_1500_6A94L, /* -225 */\n0x5673_9E5F_EE05_FDBDL, 0x58DB_3193_4400_5543L, /* -224 */\n0x4529_4B7F_F19E_6497L, 0x60AF_5ADC_3666_AA9CL, /* -223 */\n0x6EA8_78CC_B5CA_3A8CL, 0x344B_C493_8A3D_DDC7L, /* -222 */\n0x5886_C70A_2B08_2ED6L, 0x5D09_6A0F_A1CB_17D2L, /* -221 */\n0x46D2_38D4_EF39_BF12L, 0x173A_BB3F_B4A2_7975L, /* -220 */\n0x7150_5AEE_4B8F_981DL, 0x0B91_2B99_2103_F588L, /* -219 */\n0x5AA6_AF25_093F_ACE4L, 0x0940_EFAD_B403_2AD3L, /* -218 */\n0x4885_58EA_6DCC_8A50L, 0x0767_2624_9002_88A9L, /* -217 */\n0x7408_8E43_E2E0_DD4CL, 0x723E_A36D_B337_410EL, /* -216 */\n0x5CD3_A503_1BE7_1770L, 0x5B65_4F8A_F5C5_CDA5L, /* -215 */\n0x4A42_EA68_E31F_45F3L, 0x62B7_72D5_916B_0AEBL, /* -214 */\n0x76D1_770E_3832_0986L, 0x0458_B7BC_1BDE_77DDL, /* -213 */\n0x5F0D_F8D8_2CF4_D46BL, 0x1D13_C630_164B_9318L, /* -212 */\n0x4C0B_2D79_BD90_A9EFL, 0x30DC_9E8C_DEA2_DC13L, /* -211 */\n0x79AB_7BF5_FC1A_A97FL, 0x0160_FDAE_3104_9351L, /* -210 */\n0x6155_FCC4_C9AE_EDFFL, 0x1AB3_FE24_F403_A90EL, /* -209 */\n0x4DDE_63D0_A158_BE65L, 0x6229_981D_9002_EDA5L, /* -208 */\n0x7C97_061A_9BC1_30A2L, 0x69DC_2695_B337_E2A1L, /* -207 */\n0x63AC_04E2_1634_26E8L, 0x54B0_1EDE_28F9_821BL, /* -206 */\n0x4FBC_D0B4_DE90_1F20L, 0x43C0_18B1_BA61_34E2L, /* -205 */\n0x7F94_8121_6419_CB67L, 0x1F99_C11C_5D68_549DL, /* -204 */\n0x6610_674D_E9AE_3C52L, 0x4C7B_00E3_7DED_107EL, /* -203 */\n0x51A6_B90B_2158_3042L, 0x09FC_00B5_FE57_4065L, /* -202 */\n0x4152_2DA2_8113_59CEL, 0x3B30_0091_9845_CD1DL, /* -201 */\n0x6883_7C37_34EB_C2E3L, 0x784C_CDB5_C06F_AE95L, /* -200 */\n0x539C_635F_5D89_68B6L, 0x2D0A_3E2B_0059_5877L, /* -199 */\n0x42E3_82B2_B13A_BA2BL, 0x3DA1_CB55_99E1_1393L, /* -198 */\n0x6B05_9DEA_B52A_C378L, 0x629C_7888_F634_EC1EL, /* -197 */\n0x559E_17EE_F755_692DL, 0x3549_FA07_2B5D_89B1L, /* -196 */\n0x447E_798B_F911_20F1L, 0x1107_FB38_EF7E_07C1L, /* -195 */\n0x6D97_28DF_F4E8_34B5L, 0x01A6_5EC1_7F30_0C68L, /* -194 */\n0x57AC_20B3_2A53_5D5DL, 0x4E1E_B234_65C0_09EDL, /* -193 */\n0x4623_4D5C_21DC_4AB1L, 0x24E5_5B5D_1E33_3B24L, /* -192 */\n0x7038_7BC6_9C93_AAB5L, 0x216E_F894_FD1E_C506L, /* -191 */\n0x59C6_C96B_B076_222AL, 0x4DF2_6077_30E5_6A6CL, /* -190 */\n0x47D2_3ABC_8D2B_4E88L, 0x3E5B_805F_5A51_21F0L, /* -189 */\n0x72E9_F794_1512_1740L, 0x63C5_9A32_2A1B_697FL, /* -188 */\n0x5BEE_5FA9_AA74_DF67L, 0x0304_7B5B_54E2_BACCL, /* -187 */\n0x498B_7FBA_EEC3_E5ECL, 0x0269_FC49_10B5_623DL, /* -186 */\n0x75AB_FF91_7E06_3CACL, 0x6A43_2D41_B455_69FBL, /* -185 */\n0x5E23_32DA_CB38_308AL, 0x21CF_5767_C377_87FCL, /* -184 */\n0x4B4F_5BE2_3C2C_F3A1L, 0x67D9_12B9_692C_6CCAL, /* -183 */\n0x787E_F969_F9E1_85CFL, 0x595B_5128_A847_1476L, /* -182 */\n0x6065_9454_C7E7_9E3FL, 0x6115_DA86_ED05_A9F8L, /* -181 */\n0x4D1E_1043_D31F_B1CCL, 0x4DAB_1538_BD9E_2193L, /* -180 */\n0x7B63_4D39_51CC_4FADL, 0x62AB_5527_95C9_CF52L, /* -179 */\n0x62B5_D761_0E3D_0C8BL, 0x0222_AA86_116E_3F75L, /* -178 */\n0x4EF7_DF80_D830_D6D5L, 0x4E82_2204_DABE_992AL, /* -177 */\n0x7E59_659A_F381_57BCL, 0x1736_9CD4_9130_F510L, /* -176 */\n0x6514_5148_C2CD_DFC9L, 0x5F5E_E3DD_40F3_F740L, /* -175 */\n0x50DD_0DD3_CF0B_196EL, 0x1918_B64A_9A5C_C5CDL, /* -174 */\n0x40B0_D7DC_A5A2_7ABEL, 0x4746_F83B_AEB0_9E3EL, /* -173 */\n0x6781_5961_0903_F797L, 0x253E_59F9_1780_FD2FL, /* -172 */\n0x52CD_E11A_6D9C_C612L, 0x50FE_AE60_DF9A_6426L, /* -171 */\n0x423E_4DAE_BE17_04DBL, 0x5A65_584D_7FAE_B685L, /* -170 */\n0x69FD_4917_968B_3AF9L, 0x10A2_26E2_65E4_573BL, /* -169 */\n0x54CA_A0DF_ABA2_9594L, 0x0D4E_8581_EB1D_1295L, /* -168 */\n0x43D5_4D7F_BC82_1143L, 0x243E_D134_BC17_4211L, /* -167 */\n0x6C88_7BFF_9403_4ED2L, 0x06CA_E854_6025_3682L, /* -166 */\n0x56D3_9666_1002_A574L, 0x6BD5_86A9_E684_2B9BL, /* -165 */\n0x4576_11EB_4002_1DF7L, 0x0977_9EEE_5203_5616L, /* -164 */\n0x6F23_4FDE_CCD0_2FF1L, 0x5BF2_97E3_B66B_BCEFL, /* -163 */\n0x58E9_0CB2_3D73_598EL, 0x165B_ACB6_2B89_63F3L, /* -162 */\n0x4720_D6F4_FDF5_E13EL, 0x4516_23C4_EFA1_1CC2L, /* -161 */\n0x71CE_24BB_2FEF_CECAL, 0x3B56_9FA1_7F68_2E03L, /* -160 */\n0x5B0B_5095_BFF3_0BD5L, 0x15DE_E61A_CC53_5803L, /* -159 */\n0x48D5_DA11_665C_0977L, 0x2B18_B815_7042_ACCFL, /* -158 */\n0x7489_5CE8_A3C6_758BL, 0x5E8D_F355_806A_AE18L, /* -157 */\n0x5D3A_B0BA_1C9E_C46FL, 0x653E_5C44_66BB_BE7AL, /* -156 */\n0x4A95_5A2E_7D4B_D059L, 0x3765_169D_1EFC_9861L, /* -155 */\n0x7755_5D17_2EDF_B3C2L, 0x256E_8A94_FE60_F3CFL, /* -154 */\n0x5F77_7DAC_257F_C301L, 0x6ABE_D543_FEB3_F63FL, /* -153 */\n0x4C5F_97BC_EACC_9C01L, 0x3BCB_DDCF_FEF6_5E99L, /* -152 */\n0x7A32_8C61_77AD_C668L, 0x5FAC_9619_97F0_975BL, /* -151 */\n0x61C2_09E7_92F1_6B86L, 0x7FBD_44E1_465A_12AFL, /* -150 */\n0x4E34_D4B9_425A_BC6BL, 0x7FCA_9D81_0514_DBBFL, /* -149 */\n0x7D21_545B_9D5D_FA46L, 0x32DD_C8CE_6E87_C5FFL, /* -148 */\n0x641A_A9E2_E44B_2E9EL, 0x5BE4_A0A5_2539_6B32L, /* -147 */\n0x5015_54B5_836F_587EL, 0x7CB6_E6EA_842D_EF5CL, /* -146 */\n0x4011_1091_35F2_AD32L, 0x3092_5255_368B_25E3L, /* -145 */\n0x6681_B41B_8984_4850L, 0x4DB6_EA21_F0DE_A304L, /* -144 */\n0x5201_5CE2_D469_D373L, 0x57C5_881B_2718_826AL, /* -143 */\n0x419A_B0B5_76BB_0F8FL, 0x5FD1_39AF_527A_01EFL, /* -142 */\n0x68F7_8122_5791_B27FL, 0x4C81_F5E5_50C3_364AL, /* -141 */\n0x53F9_341B_7941_5B99L, 0x239B_2B1D_DA35_C508L, /* -140 */\n0x432D_C349_2DCD_E2E1L, 0x02E2_88E4_AE91_6A6DL, /* -139 */\n0x6B7C_6BA8_4949_6B01L, 0x516A_74A1_174F_10AEL, /* -138 */\n0x55FD_22ED_076D_EF34L, 0x4121_F6E7_45D8_DA25L, /* -137 */\n0x44CA_8257_3924_BF5DL, 0x1A81_9252_9E47_14EBL, /* -136 */\n0x6E10_D08B_8EA1_322EL, 0x5D9C_1D50_FD3E_87DDL, /* -135 */\n0x580D_73A2_D880_F4F2L, 0x17B0_1773_FDCB_9FE4L, /* -134 */\n0x4671_294F_139A_5D8EL, 0x4626_7929_97D6_1984L, /* -133 */\n0x70B5_0EE4_EC2A_2F4AL, 0x3D0A_5B75_BFBC_F59FL, /* -132 */\n0x5A2A_7250_BCEE_8C3BL, 0x4A6E_AF91_6630_C47FL, /* -131 */\n0x4821_F50D_63F2_09C9L, 0x21F2_260D_EB5A_36CCL, /* -130 */\n0x7369_8815_6CB6_760EL, 0x6983_7016_455D_247AL, /* -129 */\n0x5C54_6CDD_F091_F80BL, 0x6E02_C011_D117_5062L, /* -128 */\n0x49DD_23E4_C074_C66FL, 0x719B_CCDB_0DAC_404EL, /* -127 */\n0x762E_9FD4_6721_3D7FL, 0x68F9_47C4_E2AD_33B0L, /* -126 */\n0x5E8B_B310_5280_FDFFL, 0x6D94_396A_4EF0_F627L, /* -125 */\n0x4BA2_F5A6_A867_3199L, 0x3E10_2DEE_A58D_91B9L, /* -124 */\n0x7904_BC3D_DA3E_B5C2L, 0x3019_E317_6F48_E927L, /* -123 */\n0x60D0_9697_E1CB_C49BL, 0x4014_B5AC_5907_20ECL, /* -122 */\n0x4D73_ABAC_B4A3_03AFL, 0x4CDD_5E23_7A6C_1A57L, /* -121 */\n0x7BEC_45E1_2104_D2B2L, 0x47C8_969F_2A46_908AL, /* -120 */\n0x6323_6B1A_80D0_A88EL, 0x6CA0_787F_5505_406FL, /* -119 */\n0x4F4F_88E2_00A6_ED3FL, 0x0A19_F9FF_7737_66BFL, /* -118 */\n0x7EE5_A7D0_010B_1531L, 0x5CF6_5CCB_F1F2_3DFEL, /* -117 */\n0x6584_8640_00D5_AA8EL, 0x172B_7D6F_F4C1_CB32L, /* -116 */\n0x5136_D1CC_CD77_BBA4L, 0x78EF_978C_C3CE_3C28L, /* -115 */\n0x40F8_A7D7_0AC6_2FB7L, 0x13F2_DFA3_CFD8_3020L, /* -114 */\n0x67F4_3FBE_77A3_7F8BL, 0x3984_9906_1959_E699L, /* -113 */\n0x5329_CC98_5FB5_FFA2L, 0x6136_E0D1_ADE1_8548L, /* -112 */\n0x4287_D6E0_4C91_994FL, 0x00F8_B3DA_F181_376DL, /* -111 */\n0x6A72_F166_E0E8_F54BL, 0x1B27_862B_1C01_F247L, /* -110 */\n0x5528_C11F_1A53_F76FL, 0x2F52_D1BC_1667_F506L, /* -109 */\n0x4420_9A7F_4843_2C59L, 0x0C42_4163_451F_F738L, /* -108 */\n0x6D00_F732_0D38_46F4L, 0x7A03_9BD2_0833_2526L, /* -107 */\n0x5733_F8F4_D760_38C3L, 0x7B36_1641_A028_EA85L, /* -106 */\n0x45C3_2D90_AC4C_FA36L, 0x2F5E_7834_8020_BB9EL, /* -105 */\n0x6F9E_AF4D_E07B_29F0L, 0x4BCA_59ED_99CD_F8FCL, /* -104 */\n0x594B_BF71_8062_87F3L, 0x563B_7B24_7B0B_2D96L, /* -103 */\n0x476F_CC5A_CD1B_9FF6L, 0x11C9_2F50_626F_57ACL, /* -102 */\n0x724C_7A2A_E1C5_CCBDL, 0x02DB_7EE7_03E5_5912L, /* -101 */\n0x5B70_61BB_E7D1_7097L, 0x1BE2_CBEC_031D_E0DCL, /* -100 */\n0x4926_B496_530D_F3ACL, 0x164F_0989_9C17_E716L, /*  -99 */\n0x750A_BA8A_1E7C_B913L, 0x3D4B_4275_C68C_A4F0L, /*  -98 */\n0x5DA2_2ED4_E530_940FL, 0x4AA2_9B91_6BA3_B726L, /*  -97 */\n0x4AE8_2577_1DC0_7672L, 0x6EE8_7C74_561C_9285L, /*  -96 */\n0x77D9_D58B_62CD_8A51L, 0x3173_FA53_BCFA_8408L, /*  -95 */\n0x5FE1_77A2_B571_3B74L, 0x278F_FB76_30C8_69A0L, /*  -94 */\n0x4CB4_5FB5_5DF4_2F90L, 0x1FA6_62C4_F3D3_87B3L, /*  -93 */\n0x7ABA_32BB_C986_B280L, 0x32A3_D13B_1FB8_D91FL, /*  -92 */\n0x622E_8EFC_A138_8ECDL, 0x0EE9_742F_4C93_E0E6L, /*  -91 */\n0x4E8B_A596_E760_723DL, 0x58BA_C359_0A0F_E71EL, /*  -90 */\n0x7DAC_3C24_A567_1D2FL, 0x412A_D228_1019_71C9L, /*  -89 */\n0x6489_C9B6_EAB8_E426L, 0x00EF_0E86_7347_8E3BL, /*  -88 */\n0x506E_3AF8_BBC7_1CEBL, 0x1A58_D86B_8F6C_71C9L, /*  -87 */\n0x4058_2F2D_6305_B0BCL, 0x1513_E056_0C56_C16EL, /*  -86 */\n0x66F3_7EAF_04D5_E793L, 0x3B53_0089_AD57_9BE2L, /*  -85 */\n0x525C_6558_D0AB_1FA9L, 0x15DC_006E_2446_164FL, /*  -84 */\n0x41E3_8447_0D55_B2EDL, 0x5E49_99F1_B69E_783FL, /*  -83 */\n0x696C_06D8_1555_EB15L, 0x7D42_8FE9_2430_C065L, /*  -82 */\n0x5456_6BE0_1111_88DEL, 0x3102_0CBA_835A_3384L, /*  -81 */\n0x4378_564C_DA74_6D7EL, 0x5A68_0A2E_CF7B_5C69L, /*  -80 */\n0x6BF3_BD47_C3ED_7BFDL, 0x770C_DD17_B25E_FA42L, /*  -79 */\n0x565C_976C_9CBD_FCCBL, 0x1270_B0DF_C1E5_9502L, /*  -78 */\n0x4516_DF8A_16FE_63D5L, 0x5B8D_5A4C_9B1E_10CEL, /*  -77 */\n0x6E8A_FF43_57FD_6C89L, 0x127B_C3AD_C4FC_E7B0L, /*  -76 */\n0x586F_329C_4664_56D4L, 0x0EC9_6957_D0CA_52F3L, /*  -75 */\n0x46BF_5BB0_3850_4576L, 0x3F07_8779_73D5_0F29L, /*  -74 */\n0x7132_2C4D_26E6_D58AL, 0x31A5_A58F_1FBB_4B75L, /*  -73 */\n0x5A8E_89D7_5252_446EL, 0x5AEA_EAD8_E62F_6F91L, /*  -72 */\n0x4872_07DF_750E_9D25L, 0x2F22_557A_51BF_8C74L, /*  -71 */\n0x73E9_A632_54E4_2EA2L, 0x1836_EF2A_1C65_AD86L, /*  -70 */\n0x5CBA_EB5B_771C_F21BL, 0x2CF8_BF54_E384_8AD2L, /*  -69 */\n0x4A2F_22AF_927D_8E7CL, 0x23FA_32AA_4F9D_3BDBL, /*  -68 */\n0x76B1_D118_EA62_7D93L, 0x5329_EAAA_18FB_92F8L, /*  -67 */\n0x5EF4_A747_21E8_6476L, 0x0F54_BBBB_472F_A8C6L, /*  -66 */\n0x4BF6_EC38_E7ED_1D2BL, 0x25DD_62FC_38F2_ED6CL, /*  -65 */\n0x798B_138E_3FE1_C845L, 0x22FB_D193_8E51_7BDFL, /*  -64 */\n0x613C_0FA4_FFE7_D36AL, 0x4F2F_DADC_71DA_C97FL, /*  -63 */\n0x4DC9_A61D_9986_42BBL, 0x58F3_157D_27E2_3ACCL, /*  -62 */\n0x7C75_D695_C270_6AC5L, 0x74B8_2261_D969_F7ADL, /*  -61 */\n0x6391_7877_CEC0_556BL, 0x1093_4EB4_ADEE_5FBEL, /*  -60 */\n0x4FA7_9393_0BCD_1122L, 0x4075_D890_8B25_1965L, /*  -59 */\n0x7F72_85B8_12E1_B504L, 0x00BC_8DB4_11D4_F56EL, /*  -58 */\n0x65F5_37C6_7581_5D9CL, 0x66FD_3E29_A7DD_9125L, /*  -57 */\n0x5190_F96B_9134_4AE3L, 0x6BFD_CB54_864A_DA84L, /*  -56 */\n0x4140_C789_40F6_A24FL, 0x6FFE_3C43_9EA2_486AL, /*  -55 */\n0x6867_A5A8_67F1_03B2L, 0x7FFD_2D38_FDD0_73DCL, /*  -54 */\n0x5386_1E20_5327_3628L, 0x6664_242D_97D9_F64AL, /*  -53 */\n0x42D1_B1B3_75B8_F820L, 0x51E9_B68A_DFE1_91D5L, /*  -52 */\n0x6AE9_1C52_55F4_C034L, 0x1CA9_2411_6635_B621L, /*  -51 */\n0x5587_49DB_77F7_0029L, 0x63BA_8341_1E91_5E81L, /*  -50 */\n0x446C_3B15_F992_6687L, 0x6962_029A_7EDA_B201L, /*  -49 */\n0x6D79_F823_28EA_3DA6L, 0x0F03_375D_97C4_5001L, /*  -48 */\n0x5794_C682_8721_CAEBL, 0x259C_2C4A_DFD0_4001L, /*  -47 */\n0x4610_9ECE_D281_6F22L, 0x5149_BD08_B30D_0001L, /*  -46 */\n0x701A_97B1_50CF_1837L, 0x3542_C80D_EB48_0001L, /*  -45 */\n0x59AE_DFC1_0D72_79C5L, 0x7768_A00B_22A0_0001L, /*  -44 */\n0x47BF_1967_3DF5_2E37L, 0x7920_8008_E880_0001L, /*  -43 */\n0x72CB_5BD8_6321_E38CL, 0x5B67_3341_7400_0001L, /*  -42 */\n0x5BD5_E313_8281_82D6L, 0x7C52_8F67_9000_0001L, /*  -41 */\n0x4977_E8DC_6867_9BDFL, 0x16A8_72B9_4000_0001L, /*  -40 */\n0x758C_A7C7_0D72_92FEL, 0x5773_EAC2_0000_0001L, /*  -39 */\n0x5E0A_1FD2_7128_7598L, 0x45F6_5568_0000_0001L, /*  -38 */\n0x4B3B_4CA8_5A86_C47AL, 0x04C5_1120_0000_0001L, /*  -37 */\n0x785E_E10D_5DA4_6D90L, 0x07A1_B500_0000_0001L, /*  -36 */\n0x604B_E73D_E483_8AD9L, 0x52E7_C400_0000_0001L, /*  -35 */\n0x4D09_85CB_1D36_08AEL, 0x0F1F_D000_0000_0001L, /*  -34 */\n0x7B42_6FAB_61F0_0DE3L, 0x31CC_8000_0000_0001L, /*  -33 */\n0x629B_8C89_1B26_7182L, 0x5B0A_0000_0000_0001L, /*  -32 */\n0x4EE2_D6D4_15B8_5ACEL, 0x7C08_0000_0000_0001L, /*  -31 */\n0x7E37_BE20_22C0_914BL, 0x1340_0000_0000_0001L, /*  -30 */\n0x64F9_64E6_8233_A76FL, 0x2900_0000_0000_0001L, /*  -29 */\n0x50C7_83EB_9B5C_85F2L, 0x5400_0000_0000_0001L, /*  -28 */\n0x409F_9CBC_7C4A_04C2L, 0x1000_0000_0000_0001L, /*  -27 */\n0x6765_C793_FA10_079DL, 0x0000_0000_0000_0001L, /*  -26 */\n0x52B7_D2DC_C80C_D2E4L, 0x0000_0000_0000_0001L, /*  -25 */\n0x422C_A8B0_A00A_4250L, 0x0000_0000_0000_0001L, /*  -24 */\n0x69E1_0DE7_6676_D080L, 0x0000_0000_0000_0001L, /*  -23 */\n0x54B4_0B1F_852B_DA00L, 0x0000_0000_0000_0001L, /*  -22 */\n0x43C3_3C19_3756_4800L, 0x0000_0000_0000_0001L, /*  -21 */\n0x6C6B_935B_8BBD_4000L, 0x0000_0000_0000_0001L, /*  -20 */\n0x56BC_75E2_D631_0000L, 0x0000_0000_0000_0001L, /*  -19 */\n0x4563_9182_44F4_0000L, 0x0000_0000_0000_0001L, /*  -18 */\n0x6F05_B59D_3B20_0000L, 0x0000_0000_0000_0001L, /*  -17 */\n0x58D1_5E17_6280_0000L, 0x0000_0000_0000_0001L, /*  -16 */\n0x470D_E4DF_8200_0000L, 0x0000_0000_0000_0001L, /*  -15 */\n0x71AF_D498_D000_0000L, 0x0000_0000_0000_0001L, /*  -14 */\n0x5AF3_107A_4000_0000L, 0x0000_0000_0000_0001L, /*  -13 */\n0x48C2_7395_0000_0000L, 0x0000_0000_0000_0001L, /*  -12 */\n0x746A_5288_0000_0000L, 0x0000_0000_0000_0001L, /*  -11 */\n0x5D21_DBA0_0000_0000L, 0x0000_0000_0000_0001L, /*  -10 */\n0x4A81_7C80_0000_0000L, 0x0000_0000_0000_0001L, /*   -9 */\n0x7735_9400_0000_0000L, 0x0000_0000_0000_0001L, /*   -8 */\n0x5F5E_1000_0000_0000L, 0x0000_0000_0000_0001L, /*   -7 */\n0x4C4B_4000_0000_0000L, 0x0000_0000_0000_0001L, /*   -6 */\n0x7A12_0000_0000_0000L, 0x0000_0000_0000_0001L, /*   -5 */\n0x61A8_0000_0000_0000L, 0x0000_0000_0000_0001L, /*   -4 */\n0x4E20_0000_0000_0000L, 0x0000_0000_0000_0001L, /*   -3 */\n0x7D00_0000_0000_0000L, 0x0000_0000_0000_0001L, /*   -2 */\n0x6400_0000_0000_0000L, 0x0000_0000_0000_0001L, /*   -1 */\n0x5000_0000_0000_0000L, 0x0000_0000_0000_0001L, /*    0 */\n0x4000_0000_0000_0000L, 0x0000_0000_0000_0001L, /*    1 */\n0x6666_6666_6666_6666L, 0x3333_3333_3333_3334L, /*    2 */\n0x51EB_851E_B851_EB85L, 0x0F5C_28F5_C28F_5C29L, /*    3 */\n0x4189_374B_C6A7_EF9DL, 0x5916_872B_020C_49BBL, /*    4 */\n0x68DB_8BAC_710C_B295L, 0x74F0_D844_D013_A92BL, /*    5 */\n0x53E2_D623_8DA3_C211L, 0x43F3_E037_0CDC_8755L, /*    6 */\n0x431B_DE82_D7B6_34DAL, 0x698F_E692_70B0_6C44L, /*    7 */\n0x6B5F_CA6A_F2BD_215EL, 0x0F4C_A41D_811A_46D4L, /*    8 */\n0x55E6_3B88_C230_E77EL, 0x3F70_834A_CDAE_9F10L, /*    9 */\n0x44B8_2FA0_9B5A_52CBL, 0x4C5A_02A2_3E25_4C0DL, /*   10 */\n0x6DF3_7F67_5EF6_EADFL, 0x2D5C_D103_96A2_1347L, /*   11 */\n0x57F5_FF85_E592_557FL, 0x3DE3_DA69_454E_75D3L, /*   12 */\n0x465E_6604_B7A8_4465L, 0x7E4F_E1ED_D10B_9175L, /*   13 */\n0x7097_09A1_25DA_0709L, 0x4A19_697C_81AC_1BEFL, /*   14 */\n0x5A12_6E1A_84AE_6C07L, 0x54E1_2130_67BC_E326L, /*   15 */\n0x480E_BE7B_9D58_566CL, 0x43E7_4DC0_52FD_8285L, /*   16 */\n0x734A_CA5F_6226_F0ADL, 0x530B_AF9A_1E62_6A6DL, /*   17 */\n0x5C3B_D519_1B52_5A24L, 0x426F_BFAE_7EB5_21F1L, /*   18 */\n0x49C9_7747_490E_AE83L, 0x4EBF_CC8B_9890_E7F4L, /*   19 */\n0x760F_253E_DB4A_B0D2L, 0x4ACC_7A78_F41B_0CBAL, /*   20 */\n0x5E72_8432_4908_8D75L, 0x223D_2EC7_29AF_3D62L, /*   21 */\n0x4B8E_D028_3A6D_3DF7L, 0x34FD_BF05_BAF2_9781L, /*   22 */\n0x78E4_8040_5D7B_9658L, 0x54C9_31A2_C4B7_58CFL, /*   23 */\n0x60B6_CD00_4AC9_4513L, 0x5D6D_C14F_03C5_E0A5L, /*   24 */\n0x4D5F_0A66_A23A_9DA9L, 0x3124_9AA5_9C9E_4D51L, /*   25 */\n0x7BCB_43D7_69F7_62A8L, 0x4EA0_F76F_60FD_4882L, /*   26 */\n0x6309_0312_BB2C_4EEDL, 0x254D_92BF_80CA_A068L, /*   27 */\n0x4F3A_68DB_C8F0_3F24L, 0x1DD7_A899_33D5_4D20L, /*   28 */\n0x7EC3_DAF9_4180_6506L, 0x62F2_A75B_8622_1500L, /*   29 */\n0x6569_7BFA_9ACD_1D9FL, 0x025B_B916_04E8_10CDL, /*   30 */\n0x5121_2FFB_AF0A_7E18L, 0x6849_60DE_6A53_40A4L, /*   31 */\n0x40E7_5996_25A1_FE7AL, 0x203A_B3E5_21DC_33B6L, /*   32 */\n0x67D8_8F56_A29C_CA5DL, 0x19F7_863B_6960_52BDL, /*   33 */\n0x5313_A5DE_E87D_6EB0L, 0x7B2C_6B62_BAB3_7564L, /*   34 */\n0x4276_1E4B_ED31_255AL, 0x2F56_BC4E_FBC2_C450L, /*   35 */\n0x6A56_96DF_E1E8_3BC3L, 0x6557_93B1_92D1_3A1AL, /*   36 */\n0x5512_124C_B4B9_C969L, 0x3779_42F4_7574_2E7BL, /*   37 */\n0x440E_750A_2A2E_3ABAL, 0x5F94_3590_5DF6_8B96L, /*   38 */\n0x6CE3_EE76_A9E3_912AL, 0x65B9_EF4D_6324_1289L, /*   39 */\n0x571C_BEC5_54B6_0DBBL, 0x6AFB_25D7_8283_4207L, /*   40 */\n0x45B0_989D_DD5E_7163L, 0x08C8_EB12_CECF_6806L, /*   41 */\n0x6F80_F42F_C897_1BD1L, 0x5ADB_11B7_B14B_D9A3L, /*   42 */\n0x5933_F68C_A078_E30EL, 0x157C_0E2C_8DD6_47B5L, /*   43 */\n0x475C_C53D_4D2D_8271L, 0x5DFC_D823_A4AB_6C91L, /*   44 */\n0x722E_0862_1515_9D82L, 0x632E_269F_6DDF_141BL, /*   45 */\n0x5B58_06B4_DDAA_E468L, 0x4F58_1EE5_F17F_4349L, /*   46 */\n0x4913_3890_B155_8386L, 0x72AC_E584_C132_9C3BL, /*   47 */\n0x74EB_8DB4_4EEF_38D7L, 0x6AAE_3C07_9B84_2D2AL, /*   48 */\n0x5D89_3E29_D8BF_60ACL, 0x5558_3006_1603_5755L, /*   49 */\n0x4AD4_31BB_13CC_4D56L, 0x7779_C004_DE69_12ABL, /*   50 */\n0x77B9_E92B_52E0_7BBEL, 0x258F_99A1_63DB_5111L, /*   51 */\n0x5FC7_EDBC_424D_2FCBL, 0x37A6_1481_1CAF_740DL, /*   52 */\n0x4C9F_F163_683D_BFD5L, 0x7951_AA00_E3BF_900BL, /*   53 */\n0x7A99_8238_A6C9_32EFL, 0x754F_7667_D2CC_19ABL, /*   54 */\n0x6214_682D_523A_8F26L, 0x2AA5_F853_0F09_AE22L, /*   55 */\n0x4E76_B9BD_DB62_0C1EL, 0x5551_9375_A5A1_581BL, /*   56 */\n0x7D8A_C2C9_5F03_4697L, 0x3BB5_B8BC_3C35_59C5L, /*   57 */\n0x646F_023A_B269_0545L, 0x7C91_6096_9691_149EL, /*   58 */\n0x5058_CE95_5B87_376BL, 0x16DA_B3AB_ABA7_43B2L, /*   59 */\n0x4047_0BAA_AF9F_5F88L, 0x78AE_F622_EFB9_02F5L, /*   60 */\n0x66D8_12AA_B298_98DBL, 0x0DE4_BD04_B2C1_9E54L, /*   61 */\n0x5246_7555_5BAD_4715L, 0x57EA_30D0_8F01_4B76L, /*   62 */\n0x41D1_F777_7C8A_9F44L, 0x4654_F3DA_0C01_092CL, /*   63 */\n0x694F_F258_C744_3207L, 0x23BB_1FC3_4668_0EACL, /*   64 */\n0x543F_F513_D29C_F4D2L, 0x4FC8_E635_D1EC_D88AL, /*   65 */\n0x4366_5DA9_754A_5D75L, 0x263A_51C4_A7F0_AD3BL, /*   66 */\n0x6BD6_FC42_5543_C8BBL, 0x56C3_B607_731A_AEC4L, /*   67 */\n0x5645_969B_7769_6D62L, 0x789C_919F_8F48_8BD0L, /*   68 */\n0x4504_787C_5F87_8AB5L, 0x46E3_A7B2_D906_D640L, /*   69 */\n0x6E6D_8D93_CC0C_1122L, 0x3E39_0C51_5B3E_239AL, /*   70 */\n0x5857_A476_3CD6_741BL, 0x4B60_D6A7_7C31_B615L, /*   71 */\n0x46AC_8391_CA45_29AFL, 0x55E7_121F_968E_2B44L, /*   72 */\n0x7114_05B6_106E_A919L, 0x0971_B698_F0E3_786DL, /*   73 */\n0x5A76_6AF8_0D25_5414L, 0x078E_2BAD_8D82_C6BDL, /*   74 */\n0x485E_BBF9_A41D_DCDCL, 0x6C71_BC8A_D79B_D231L, /*   75 */\n0x73CA_C65C_39C9_6161L, 0x2D82_C744_8C2C_8382L, /*   76 */\n0x5CA2_3849_C7D4_4DE7L, 0x3E02_3903_A356_CF9BL, /*   77 */\n0x4A1B_603B_0643_7185L, 0x7E68_2D9C_82AB_D949L, /*   78 */\n0x7692_3391_A39F_1C09L, 0x4A40_48FA_6AAC_8EDBL, /*   79 */\n0x5EDB_5C74_82E5_B007L, 0x5500_3A61_EEF0_7249L, /*   80 */\n0x4BE2_B05D_3584_8CD2L, 0x7733_61E7_F259_F507L, /*   81 */\n0x796A_B3C8_55A0_E151L, 0x3EB8_9CA6_508F_EE71L, /*   82 */\n0x6122_296D_114D_810DL, 0x7EFA_16EB_73A6_585BL, /*   83 */\n0x4DB4_EDF0_DAA4_673EL, 0x3261_ABEF_8FB8_46AFL, /*   84 */\n0x7C54_AFE7_C43A_3ECAL, 0x1D69_1318_E5F3_A44BL, /*   85 */\n0x6376_F31F_D02E_98A1L, 0x6454_0F47_1E5C_836FL, /*   86 */\n0x4F92_5C19_7358_7A1BL, 0x0376_729F_4B7D_35F3L, /*   87 */\n0x7F50_935B_EBC0_C35EL, 0x38BD_8432_1261_EFEBL, /*   88 */\n0x65DA_0F7C_BC9A_35E5L, 0x13CA_D028_0EB4_BFEFL, /*   89 */\n0x517B_3F96_FD48_2B1DL, 0x5CA2_4020_0BC3_CCBFL, /*   90 */\n0x412F_6612_6439_BC17L, 0x63B5_0019_A303_0A33L, /*   91 */\n0x684B_D683_D38F_9359L, 0x1F88_0029_04D1_A9EAL, /*   92 */\n0x536F_DECF_DC72_DC47L, 0x32D3_3354_03DA_EE55L, /*   93 */\n0x42BF_E573_16C2_49D2L, 0x5BDC_2910_0315_8B77L, /*   94 */\n0x6ACC_A251_BE03_A951L, 0x12F9_DB4C_D1BC_1258L, /*   95 */\n0x5570_81DA_FE69_5440L, 0x7594_AF70_A7C9_A847L, /*   96 */\n0x445A_017B_FEBA_A9CDL, 0x4476_F2C0_863A_ED06L, /*   97 */\n0x6D5C_CF2C_CAC4_42E2L, 0x3A57_EACD_A391_7B3CL, /*   98 */\n0x577D_728A_3BD0_3581L, 0x7B79_88A4_82DA_C8FDL, /*   99 */\n0x45FD_F53B_630C_F79BL, 0x15FA_D3B6_CF15_6D97L, /*  100 */\n0x6FFC_BB92_3814_BF5EL, 0x565E_1F8A_E4EF_15BEL, /*  101 */\n0x5996_FC74_F9AA_32B2L, 0x11E4_E608_B725_AAFFL, /*  102 */\n0x47AB_FD2A_6154_F55BL, 0x27EA_51A0_9284_88CCL, /*  103 */\n0x72AC_C843_CEEE_555EL, 0x7310_829A_8407_4146L, /*  104 */\n0x5BBD_6D03_0BF1_DDE5L, 0x4273_9BAE_D005_CDD2L, /*  105 */\n0x4964_5735_A327_E4B7L, 0x4EC2_E2F2_4004_A4A8L, /*  106 */\n0x756D_5855_D1D9_6DF2L, 0x4AD1_6B1D_333A_A10CL, /*  107 */\n0x5DF1_1377_DB14_57F5L, 0x2241_227D_C295_4DA3L, /*  108 */\n0x4B27_42C6_48DD_132AL, 0x4E9A_81FE_3544_3E1CL, /*  109 */\n0x783E_D13D_4161_B844L, 0x175D_9CC9_EED3_9694L, /*  110 */\n0x6032_40FD_CDE7_C69CL, 0x7917_B0A1_8BDC_7876L, /*  111 */\n0x4CF5_00CB_0B1F_D217L, 0x1412_F3B4_6FE3_9392L, /*  112 */\n0x7B21_9ADE_7832_E9BEL, 0x5351_85ED_7FD2_85B6L, /*  113 */\n0x6281_48B1_F9C2_5498L, 0x42A7_9E57_9975_37C5L, /*  114 */\n0x4ECD_D3C1_949B_76E0L, 0x3552_E512_E12A_9304L, /*  115 */\n0x7E16_1F9C_20F8_BE33L, 0x6EEB_081E_3510_EB39L, /*  116 */\n0x64DE_7FB0_1A60_9829L, 0x3F22_6CE4_F740_BC2EL, /*  117 */\n0x50B1_FFC0_151A_1354L, 0x3281_F0B7_2C33_C9BEL, /*  118 */\n0x408E_6633_4414_DC43L, 0x4201_8D5F_568F_D498L, /*  119 */\n0x674A_3D1E_D354_939FL, 0x1CCF_4898_8A7F_BA8DL, /*  120 */\n0x52A1_CA7F_0F76_DC7FL, 0x30A5_D3AD_3B99_620BL, /*  121 */\n0x421B_0865_A5F8_B065L, 0x73B7_DC8A_9614_4E6FL, /*  122 */\n0x69C4_DA3C_3CC1_1A3CL, 0x52BF_C744_2353_B0B1L, /*  123 */\n0x549D_7B63_63CD_AE96L, 0x7566_3903_4F76_26F4L, /*  124 */\n0x43B1_2F82_B63E_2545L, 0x4451_C735_D92B_525DL, /*  125 */\n0x6C4E_B26A_BD30_3BA2L, 0x3A1C_71EF_C1DE_EA2EL, /*  126 */\n0x56A5_5B88_9759_C94EL, 0x61B0_5B26_34B2_54F2L, /*  127 */\n0x4551_1606_DF7B_0772L, 0x1AF3_7C1E_908E_AA5BL, /*  128 */\n0x6EE8_233E_325E_7250L, 0x2B1F_2CFD_B417_76F8L, /*  129 */\n0x58B9_B5CB_5B7E_C1D9L, 0x6F4C_23FE_29AC_5F2DL, /*  130 */\n0x46FA_F7D5_E2CB_CE47L, 0x72A3_4FFE_87BD_18F1L, /*  131 */\n0x7191_8C89_6ADF_B073L, 0x0438_7FFD_A5FB_5B1BL, /*  132 */\n0x5ADA_D6D4_557F_C05CL, 0x0360_6664_84C9_15AFL, /*  133 */\n0x48AF_1243_7799_66B0L, 0x02B3_851D_3707_448CL, /*  134 */\n0x744B_506B_F28F_0AB3L, 0x1DEC_082E_BE72_0746L, /*  135 */\n0x5D09_0D23_2872_6EF5L, 0x64BC_D358_985B_3905L, /*  136 */\n0x4A6D_A41C_205B_8BF7L, 0x6A30_A913_AD15_C738L, /*  137 */\n0x7715_D360_33C5_ACBFL, 0x5D1A_A81F_7B56_0B8CL, /*  138 */\n0x5F44_A919_C304_8A32L, 0x7DAE_ECE5_FC44_D609L, /*  139 */\n0x4C36_EDAE_359D_3B5BL, 0x7E25_8A51_969D_7808L, /*  140 */\n0x79F1_7C49_EF61_F893L, 0x16A2_76E8_F0FB_F33FL, /*  141 */\n0x618D_FD07_F2B4_C6DCL, 0x121B_9253_F3FC_C299L, /*  142 */\n0x4E0B_30D3_2890_9F16L, 0x41AF_A843_2997_0214L, /*  143 */\n0x7CDE_B485_0DB4_31BDL, 0x4F7F_739E_A8F1_9CEDL, /*  144 */\n0x63E5_5D37_3E29_C164L, 0x3F99_294B_BA5A_E3F1L, /*  145 */\n0x4FEA_B0F8_FE87_CDE9L, 0x7FAD_BAA2_FB7B_E98DL, /*  146 */\n0x7FDD_E7F4_CA72_E30FL, 0x7F7C_5DD1_925F_DC15L, /*  147 */\n0x664B_1FF7_085B_E8D9L, 0x4C63_7E41_41E6_49ABL, /*  148 */\n0x51D5_B32C_06AF_ED7AL, 0x704F_9834_34B8_3AEFL, /*  149 */\n0x4177_C289_9EF3_2462L, 0x26A6_135C_F6F9_C8BFL, /*  150 */\n0x68BF_9DA8_FE51_D3D0L, 0x3DD6_8561_8B29_4132L, /*  151 */\n0x53CC_7E20_CB74_A973L, 0x4B12_044E_08ED_CDC2L, /*  152 */\n0x4309_FE80_A2C3_BAC2L, 0x6F41_9D0B_3A57_D7CEL, /*  153 */\n0x6B43_30CD_D139_2AD1L, 0x3202_94DE_C3BF_BFB0L, /*  154 */\n0x55CF_5A3E_40FA_88A7L, 0x419B_AA4B_CFCC_995AL, /*  155 */\n0x44A5_E1CB_672E_D3B9L, 0x1AE2_EEA3_0CA3_ADE1L, /*  156 */\n0x6DD6_3612_3EB1_52C1L, 0x77D1_7DD1_ADD2_AFCFL, /*  157 */\n0x57DE_91A8_3227_7567L, 0x7974_64A7_BE42_263FL, /*  158 */\n0x464B_A7B9_C1B9_2AB9L, 0x4790_5086_31CE_84FFL, /*  159 */\n0x7079_0C5C_6928_445CL, 0x0C1A_1A70_4FB0_D4CCL, /*  160 */\n0x59FA_7049_EDB9_D049L, 0x567B_4859_D95A_43D6L, /*  161 */\n0x47FB_8D07_F161_736EL, 0x11FC_39E1_7AAE_9CABL, /*  162 */\n0x732C_14D9_8235_857DL, 0x032D_2968_C44A_9445L, /*  163 */\n0x5C23_43E1_34F7_9DFDL, 0x4F57_5453_D03B_A9D1L, /*  164 */\n0x49B5_CFE7_5D92_E4CAL, 0x72AC_4376_402F_BB0EL, /*  165 */\n0x75EF_B30B_C8EB_07ABL, 0x0446_D256_CD19_2B49L, /*  166 */\n0x5E59_5C09_6D88_D2EFL, 0x1D05_7512_3DAD_BC3AL, /*  167 */\n0x4B7A_B007_8AD3_DBF2L, 0x4A6A_C40E_97BE_302FL, /*  168 */\n0x78C4_4CD8_DE1F_C650L, 0x7711_39B0_F2C9_E6B1L, /*  169 */\n0x609D_0A47_1819_6B73L, 0x78DA_948D_8F07_EBC1L, /*  170 */\n0x4D4A_6E9F_467A_BC5CL, 0x60AE_DD3E_0C06_5634L, /*  171 */\n0x7BAA_4A98_70C4_6094L, 0x344A_FB96_79A3_BD20L, /*  172 */\n0x62EE_A213_8D69_E6DDL, 0x103B_FC78_614F_CA80L, /*  173 */\n0x4F25_4E76_0ABB_1F17L, 0x2696_6393_810C_A200L, /*  174 */\n0x7EA2_1723_445E_9825L, 0x2423_D285_9B47_6999L, /*  175 */\n0x654E_78E9_037E_E01DL, 0x69B6_4204_7C39_2148L, /*  176 */\n0x510B_93ED_9C65_8017L, 0x6E2B_6803_9694_1AA0L, /*  177 */\n0x40D6_0FF1_49EA_CCDFL, 0x71BC_5336_1210_154DL, /*  178 */\n0x67BC_E64E_DCAA_E166L, 0x1C60_8523_5019_BBAEL, /*  179 */\n0x52FD_850B_E3BB_E784L, 0x7D1A_041C_4014_9625L, /*  180 */\n0x4264_6A6F_E963_1F9DL, 0x4A7B_367D_0010_781DL, /*  181 */\n0x6A3A_43E6_4238_3295L, 0x5D91_F0C8_001A_59C8L, /*  182 */\n0x54FB_6985_01C6_8EDEL, 0x17A7_F3D3_3348_47D4L, /*  183 */\n0x43FC_546A_67D2_0BE4L, 0x7953_2975_C2A0_3976L, /*  184 */\n0x6CC6_ED77_0C83_463BL, 0x0EEB_7589_3766_C256L, /*  185 */\n0x5705_8AC5_A39C_382FL, 0x2589_2AD4_2C52_3512L, /*  186 */\n0x459E_089E_1C7C_F9BFL, 0x37A0_EF10_2374_F742L, /*  187 */\n0x6F63_40FC_FA61_8F98L, 0x5901_7E80_38BB_2536L, /*  188 */\n0x591C_33FD_951A_D946L, 0x7A67_9866_93C8_EA91L, /*  189 */\n0x4749_C331_4415_7A9FL, 0x151F_AD1E_DCA0_BBA8L, /*  190 */\n0x720F_9EB5_39BB_F765L, 0x0832_AE97_C767_92A5L, /*  191 */\n0x5B3F_B22A_9496_5F84L, 0x068E_F213_05EC_7551L, /*  192 */\n0x48FF_C1BB_AA11_E603L, 0x1ED8_C1A8_D189_F774L, /*  193 */\n0x74CC_692C_434F_D66BL, 0x4AF4_690E_1C0F_F253L, /*  194 */\n0x5D70_5423_690C_AB89L, 0x225D_20D8_1673_2843L, /*  195 */\n0x4AC0_434F_873D_5607L, 0x3517_4D79_AB8F_5369L, /*  196 */\n0x779A_054C_0B95_5672L, 0x21BE_E25C_45B2_1F0EL, /*  197 */\n0x5FAE_6AA3_3C77_785BL, 0x3498_B516_9E28_18D8L, /*  198 */\n0x4C8B_8882_96C5_F9E2L, 0x5D46_F745_4B53_4713L, /*  199 */\n0x7A78_DA6A_8AD6_5C9DL, 0x7BA4_BED5_4552_0B52L, /*  200 */\n0x61FA_4855_3BDE_B07EL, 0x2FB6_FF11_0441_A2A8L, /*  201 */\n0x4E61_D377_6318_8D31L, 0x72F8_CC0D_9D01_4EEDL, /*  202 */\n0x7D69_5258_9E8D_AEB6L, 0x1E5A_E015_C802_17E1L, /*  203 */\n0x6454_41E0_7ED7_BEF8L, 0x1848_B344_A001_ACB4L, /*  204 */\n0x5043_67E6_CBDF_CBF9L, 0x603A_2903_B334_8A2AL, /*  205 */\n0x4035_ECB8_A319_6FFBL, 0x002E_8736_28F6_D4EEL, /*  206 */\n0x66BC_ADF4_3828_B32BL, 0x19E4_0B89_DB24_87E3L, /*  207 */\n0x5230_8B29_C686_F5BCL, 0x14B6_6FA1_7C1D_3983L, /*  208 */\n0x41C0_6F54_9ED2_5E30L, 0x1091_F2E7_967D_C79CL, /*  209 */\n0x6933_E554_3150_96B3L, 0x341C_B7D8_F0C9_3F5FL, /*  210 */\n0x5429_8443_5AA6_DEF5L, 0x767D_5FE0_C0A0_FF80L, /*  211 */\n0x4354_69CF_7BB8_B25EL, 0x2B97_7FE7_0080_CC66L, /*  212 */\n0x6BBA_42E5_92C1_1D63L, 0x5F58_CCA4_CD9A_E0A3L, /*  213 */\n0x562E_9BEA_DBCD_B11CL, 0x4C47_0A1D_7148_B3B6L, /*  214 */\n0x44F2_1655_7CA4_8DB0L, 0x3D05_A1B1_276D_5C92L, /*  215 */\n0x6E50_23BB_FAA0_E2B3L, 0x7B3C_35E8_3F15_60E9L, /*  216 */\n0x5840_1C96_621A_4EF6L, 0x2F63_5E53_65AA_B3EDL, /*  217 */\n0x4699_B078_4E7B_725EL, 0x591C_4B75_EAEE_F658L, /*  218 */\n0x70F5_E726_E3F8_B6FDL, 0x74FA_1256_44B1_8A26L, /*  219 */\n0x5A5E_5285_832D_5F31L, 0x43FB_41DE_9D5A_D4EBL, /*  220 */\n0x484B_7537_9C24_4C27L, 0x4FFC_34B2_177B_DD89L, /*  221 */\n0x73AB_EEBF_603A_1372L, 0x4CC6_BAB6_8BF9_6274L, /*  222 */\n0x5C89_8BCC_4CFB_42C2L, 0x0A38_955E_D661_1B90L, /*  223 */\n0x4A07_A309_D72F_689BL, 0x21C6_DDE5_784D_AFA7L, /*  224 */\n0x7672_9E76_2518_A75EL, 0x693E_2FD5_8D49_190BL, /*  225 */\n0x5EC2_185E_8413_B918L, 0x5431_BFDE_0AA0_E0D5L, /*  226 */\n0x4BCE_79E5_3676_2DADL, 0x29C1_664B_3BB3_E711L, /*  227 */\n0x794A_5CA1_F0BD_15E2L, 0x0F9B_D6DE_C5EC_A4E8L, /*  228 */\n0x6108_4A1B_26FD_AB1BL, 0x2616_457F_04BD_50BAL, /*  229 */\n0x4DA0_3B48_EBFE_227CL, 0x1E78_3798_D097_73C8L, /*  230 */\n0x7C33_920E_4663_6A60L, 0x30C0_58F4_80F2_52D9L, /*  231 */\n0x635C_74D8_384F_884DL, 0x0D66_AD90_6728_4247L, /*  232 */\n0x4F7D_2A46_9372_D370L, 0x711E_F140_5286_9B6CL, /*  233 */\n0x7F2E_AA0A_8584_8581L, 0x34FE_4ECD_50D7_5F14L, /*  234 */\n0x65BE_EE6E_D136_D134L, 0x2A65_0BD7_73DF_7F43L, /*  235 */\n0x5165_8B8B_DA92_40F6L, 0x551D_A312_C319_329CL, /*  236 */\n0x411E_093C_AEDB_672BL, 0x5DB1_4F42_35AD_C217L, /*  237 */\n0x6830_0EC7_7E2B_D845L, 0x7C4E_E536_BC49_368AL, /*  238 */\n0x5359_A56C_64EF_E037L, 0x7D0B_EA92_303A_9208L, /*  239 */\n0x42AE_1DF0_50BF_E693L, 0x173C_BBA8_2695_41A0L, /*  240 */\n0x6AB0_2FE6_E799_70EBL, 0x3EC7_92A6_A422_029AL, /*  241 */\n0x5559_BFEB_EC7A_C0BCL, 0x3239_421E_E9B4_CEE1L, /*  242 */\n0x4447_CCBC_BD2F_0096L, 0x5B61_01B2_5490_A581L, /*  243 */\n0x6D3F_ADFA_C84B_3424L, 0x2BCE_691D_541A_A268L, /*  244 */\n0x5766_24C8_A03C_29B6L, 0x563E_BA7D_DCE2_1B87L, /*  245 */\n0x45EB_50A0_8030_215EL, 0x7832_2ECB_171B_4939L, /*  246 */\n0x6FDE_E767_3380_3564L, 0x59E9_E478_24F8_7527L, /*  247 */\n0x597F_1F85_C2CC_F783L, 0x6187_E9F9_B72D_2A86L, /*  248 */\n0x4798_E604_9BD7_2C69L, 0x346C_BB2E_2C24_2205L, /*  249 */\n0x728E_3CD4_2C8B_7A42L, 0x20AD_F849_E039_D007L, /*  250 */\n0x5BA4_FD76_8A09_2E9BL, 0x33BE_603B_19C7_D99FL, /*  251 */\n0x4950_CAC5_3B3A_8BAFL, 0x42FE_B362_7B06_47B3L, /*  252 */\n0x754E_113B_91F7_45E5L, 0x5197_856A_5E70_72B8L, /*  253 */\n0x5DD8_0DC9_4192_9E51L, 0x27AC_6ABB_7EC0_5BC6L, /*  254 */\n0x4B13_3E3A_9ADB_B1DAL, 0x52F0_5562_CBCD_1638L, /*  255 */\n0x781E_C9F7_5E2C_4FC4L, 0x1E4D_556A_DFAE_89F3L, /*  256 */\n0x6018_A192_B1BD_0C9CL, 0x7EA4_4455_7FBE_D4C3L, /*  257 */\n0x4CE0_8142_27CA_707DL, 0x4BB6_9D11_32FF_109CL, /*  258 */\n0x7B00_CED0_3FAA_4D95L, 0x5F8A_94E8_5198_1A93L, /*  259 */\n0x6267_0BD9_CC88_3E11L, 0x32D5_43ED_0E13_4875L, /*  260 */\n0x4EB8_D647_D6D3_64DAL, 0x5BDD_CFF0_D80F_6D2BL, /*  261 */\n0x7DF4_8A0C_8AEB_D491L, 0x12FC_7FE7_C018_AEABL, /*  262 */\n0x64C3_A1A3_A256_43A7L, 0x28C9_FFEC_99AD_5889L, /*  263 */\n0x509C_814F_B511_CFB9L, 0x0707_FFF0_7AF1_13A1L, /*  264 */\n0x407D_343F_C40E_3FC7L, 0x1F39_998D_2F27_42E7L, /*  265 */\n0x672E_B9FF_A016_CC71L, 0x7EC2_8F48_4B72_04A4L, /*  266 */\n0x528B_C7FF_B345_705BL, 0x189B_A5D3_6F8E_6A1DL, /*  267 */\n0x4209_6CCC_8F6A_C048L, 0x7A16_1E42_BFA5_21B1L, /*  268 */\n0x69A8_AE14_18AA_CD41L, 0x4356_96D1_32A1_CF81L, /*  269 */\n0x5486_F1A9_AD55_7101L, 0x1C45_4574_2881_72CEL, /*  270 */\n0x439F_27BA_F111_2734L, 0x169D_D129_BA01_28A5L, /*  271 */\n0x6C31_D92B_1B4E_A520L, 0x242F_B50F_9001_DAA1L, /*  272 */\n0x568E_4755_AF72_1DB3L, 0x368C_90D9_4001_7BB4L, /*  273 */\n0x453E_9F77_BF8E_7E29L, 0x120A_0D7A_999A_C95DL, /*  274 */\n0x6ECA_98BF_98E3_FD0EL, 0x5010_1590_F5C4_7561L, /*  275 */\n0x58A2_13CC_7A4F_FDA5L, 0x2673_4473_F7D0_5DE8L, /*  276 */\n0x46E8_0FD6_C83F_FE1DL, 0x6B8F_69F6_5FD9_E4B9L, /*  277 */\n0x7173_4C8A_D9FF_FCFCL, 0x45B2_4323_CC8F_D45CL, /*  278 */\n0x5AC2_A3A2_47FF_FD96L, 0x6AF5_0283_0A0C_A9E3L, /*  279 */\n0x489B_B61B_6CCC_CADFL, 0x08C4_0202_6E70_87E9L, /*  280 */\n0x742C_5692_47AE_1164L, 0x746C_D003_E3E7_3FDBL, /*  281 */\n0x5CF0_4541_D2F1_A783L, 0x76BD_7336_4FEC_3315L, /*  282 */\n0x4A59_D101_758E_1F9CL, 0x5EFD_F5C5_0CBC_F5ABL, /*  283 */\n0x76F6_1B35_88E3_65C7L, 0x4B2F_EFA1_ADFB_22ABL, /*  284 */\n0x5F2B_48F7_A0B5_EB06L, 0x08F3_261A_F195_B555L, /*  285 */\n0x4C22_A0C6_1A2B_226BL, 0x20C2_84E2_5ADE_2AABL, /*  286 */\n0x79D1_013C_F6AB_6A45L, 0x1AD0_D49D_5E30_4444L, /*  287 */\n0x6174_00FD_9222_BB6AL, 0x48A7_107D_E4F3_69D0L, /*  288 */\n0x4DF6_6731_41B5_62BBL, 0x53B8_D9FE_50C2_BB0DL, /*  289 */\n0x7CBD_71E8_6922_3792L, 0x52C1_5CCA_1AD1_2B48L, /*  290 */\n0x63CA_C186_BA81_C60EL, 0x7567_7D6E_7BDA_8906L, /*  291 */\n0x4FD5_679E_FB9B_04D8L, 0x5DEC_6458_6315_3A6CL, /*  292 */\n0x7FBB_D8FE_5F5E_6E27L, 0x497A_3A27_04EE_C3DFL };",long[] g,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.P,Field,The precision in bits.,static final int P = 24;,int P,"static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.W,Field,Exponent width in bits.,private static final int W = (Float.SIZE - 1) - (P - 1);,int W,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.Q_MIN,Field,Minimum value of the exponent: -(2^(W-1)) - P + 3.,static final int Q_MIN = (-1 << W - 1) - P + 3;,int Q_MIN,"static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.Q_MAX,Field,Maximum value of the exponent: 2^(W-1) - P.,static final int Q_MAX = (1 << W - 1) - P;,int Q_MAX,"static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.E_MIN,Field,10^(E_MIN - 1) <= MIN_VALUE < 10^E_MIN,static final int E_MIN = -44;,int E_MIN,"static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.E_MAX,Field,10^(E_MAX - 1) <= MAX_VALUE < 10^E_MAX,static final int E_MAX = 39;,int E_MAX,"static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.C_TINY,Field,"Threshold to detect tiny values, as in section 8.1.1 of [1]",static final int C_TINY = 8;,int C_TINY,"static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.K_MIN,Field,"The minimum and maximum k, as in section 8 of [1]",static final int K_MIN = -45;,int K_MIN,"static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.K_MAX,Field,No Comment,static final int K_MAX = 31;,int K_MAX,"static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.H,Field,H is as in section 8 of [1].,static final int H = 9;,int H,"static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.C_MIN,Field,Minimum value of the significand of a normal value: 2^(P-1).,private static final int C_MIN = 1 << P - 1;,int C_MIN,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.BQ_MASK,Field,Mask to extract the biased exponent.,private static final int BQ_MASK = (1 << W) - 1;,int BQ_MASK,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.T_MASK,Field,Mask to extract the fraction bits.,private static final int T_MASK = (1 << P - 1) - 1;,int T_MASK,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.MASK_32,Field,Used in rop().,private static final long MASK_32 = (1L << 32) - 1;,long MASK_32,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.MASK_28,Field,Used for left-to-tight digit extraction.,private static final int MASK_28 = (1 << 28) - 1;,int MASK_28,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.NON_SPECIAL,Field,No Comment,private static final int NON_SPECIAL = 0;,int NON_SPECIAL,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.PLUS_ZERO,Field,No Comment,private static final int PLUS_ZERO = 1;,int PLUS_ZERO,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.MINUS_ZERO,Field,No Comment,private static final int MINUS_ZERO = 2;,int MINUS_ZERO,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.PLUS_INF,Field,No Comment,private static final int PLUS_INF = 3;,int PLUS_INF,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.MINUS_INF,Field,No Comment,private static final int MINUS_INF = 4;,int MINUS_INF,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.NAN,Field,No Comment,private static final int NAN = 5;,int NAN,"private , static , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.MAX_CHARS,Field,Room for the longer of the forms\n        -ddddd.dddd         H + 2 characters\n        -0.00ddddddddd      H + 5 characters\n        -d.ddddddddE-ee     H + 6 characters\n    where there are H digits d,public final int MAX_CHARS = H + 6;,int MAX_CHARS,"public , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.bytes,Field,Numerical results are created here...,private final byte[] bytes = new byte[MAX_CHARS];,byte[] bytes,"private , final "
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal.index,Field,Index into buf of rightmost valid character.,private int index;,int index,private 
com.fasterxml.jackson.core.io.JsonStringEncoder.HC,Field,No Comment,private final static char[] HC = CharTypes.copyHexChars(true);,char[] HC,"private , final , static "
com.fasterxml.jackson.core.io.JsonStringEncoder.HB,Field,No Comment,private final static byte[] HB = CharTypes.copyHexBytes(true);,byte[] HB,"private , final , static "
com.fasterxml.jackson.core.io.JsonStringEncoder.SURR1_FIRST,Field,No Comment,private final static int SURR1_FIRST = 0xD800;,int SURR1_FIRST,"private , final , static "
com.fasterxml.jackson.core.io.JsonStringEncoder.SURR1_LAST,Field,No Comment,private final static int SURR1_LAST = 0xDBFF;,int SURR1_LAST,"private , final , static "
com.fasterxml.jackson.core.io.JsonStringEncoder.SURR2_FIRST,Field,No Comment,private final static int SURR2_FIRST = 0xDC00;,int SURR2_FIRST,"private , final , static "
com.fasterxml.jackson.core.io.JsonStringEncoder.SURR2_LAST,Field,No Comment,private final static int SURR2_LAST = 0xDFFF;,int SURR2_LAST,"private , final , static "
com.fasterxml.jackson.core.io.JsonStringEncoder.MIN_CHAR_BUFFER_SIZE,Field,No Comment,final static int MIN_CHAR_BUFFER_SIZE = 16;,int MIN_CHAR_BUFFER_SIZE,"final , static "
com.fasterxml.jackson.core.io.JsonStringEncoder.MAX_CHAR_BUFFER_SIZE,Field,use segments beyond,final static int MAX_CHAR_BUFFER_SIZE = 32000;,int MAX_CHAR_BUFFER_SIZE,"final , static "
com.fasterxml.jackson.core.io.JsonStringEncoder.MIN_BYTE_BUFFER_SIZE,Field,No Comment,final static int MIN_BYTE_BUFFER_SIZE = 24;,int MIN_BYTE_BUFFER_SIZE,"final , static "
com.fasterxml.jackson.core.io.JsonStringEncoder.MAX_BYTE_BUFFER_SIZE,Field,use segments beyond,final static int MAX_BYTE_BUFFER_SIZE = 32000;,int MAX_BYTE_BUFFER_SIZE,"final , static "
com.fasterxml.jackson.core.io.JsonStringEncoder.instance,Field,Since 2.10 we have stateless singleton and NO fancy ThreadLocal/SofRef caching!!!,private final static JsonStringEncoder instance = new JsonStringEncoder();,com.fasterxml.jackson.core.io.JsonStringEncoder instance,"private , final , static "
com.fasterxml.jackson.core.io.SerializedString.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.io.SerializedString.JSON_ENCODER,Field,No Comment,private static final JsonStringEncoder JSON_ENCODER = JsonStringEncoder.getInstance();,com.fasterxml.jackson.core.io.JsonStringEncoder JSON_ENCODER,"private , static , final "
com.fasterxml.jackson.core.io.SerializedString._value,Field,No Comment,protected final String _value;,java.lang.String _value,"protected , final "
com.fasterxml.jackson.core.io.SerializedString._quotedUTF8Ref,Field,No Comment,protected volatile byte[] _quotedUTF8Ref;,byte[] _quotedUTF8Ref,"protected , volatile "
com.fasterxml.jackson.core.io.SerializedString._unquotedUTF8Ref,Field,No Comment,protected volatile byte[] _unquotedUTF8Ref;,byte[] _unquotedUTF8Ref,"protected , volatile "
com.fasterxml.jackson.core.io.SerializedString._quotedChars,Field,No Comment,protected volatile char[] _quotedChars;,char[] _quotedChars,"protected , volatile "
com.fasterxml.jackson.core.io.SerializedString._jdkSerializeValue,Field,"* Ugly hack, to work through the requirement that _value is indeed final,\n     * and that JDK serialization won't call ctor(s).\n     *\n     * @since 2.1",protected transient String _jdkSerializeValue;,java.lang.String _jdkSerializeValue,"protected , transient "
com.fasterxml.jackson.core.io.NumberOutput.MILLION,Field,No Comment,private static int MILLION = 1000000;,int MILLION,"private , static "
com.fasterxml.jackson.core.io.NumberOutput.BILLION,Field,No Comment,private static int BILLION = 1000000000;,int BILLION,"private , static "
com.fasterxml.jackson.core.io.NumberOutput.BILLION_L,Field,No Comment,private static long BILLION_L = 1000000000L;,long BILLION_L,"private , static "
com.fasterxml.jackson.core.io.NumberOutput.MIN_INT_AS_LONG,Field,No Comment,private static long MIN_INT_AS_LONG = Integer.MIN_VALUE;,long MIN_INT_AS_LONG,"private , static "
com.fasterxml.jackson.core.io.NumberOutput.MAX_INT_AS_LONG,Field,No Comment,private static long MAX_INT_AS_LONG = Integer.MAX_VALUE;,long MAX_INT_AS_LONG,"private , static "
com.fasterxml.jackson.core.io.NumberOutput.SMALLEST_INT,Field,No Comment,final static String SMALLEST_INT = String.valueOf(Integer.MIN_VALUE);,java.lang.String SMALLEST_INT,"final , static "
com.fasterxml.jackson.core.io.NumberOutput.SMALLEST_LONG,Field,No Comment,final static String SMALLEST_LONG = String.valueOf(Long.MIN_VALUE);,java.lang.String SMALLEST_LONG,"final , static "
com.fasterxml.jackson.core.io.NumberOutput.TRIPLET_TO_CHARS,Field,"* Encoded representations of 3-decimal-digit indexed values, where\n     * 3 LSB are ascii characters\n     *\n     * @since 2.8.2",private final static int[] TRIPLET_TO_CHARS = new int[1000];,int[] TRIPLET_TO_CHARS,"private , final , static "
com.fasterxml.jackson.core.io.NumberOutput.sSmallIntStrs,Field,No Comment,"private final static String[] sSmallIntStrs = new String[] { ""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"" };",java.lang.String[] sSmallIntStrs,"private , final , static "
com.fasterxml.jackson.core.io.NumberOutput.sSmallIntStrs2,Field,No Comment,"private final static String[] sSmallIntStrs2 = new String[] { ""-1"", ""-2"", ""-3"", ""-4"", ""-5"", ""-6"", ""-7"", ""-8"", ""-9"", ""-10"" };",java.lang.String[] sSmallIntStrs2,"private , final , static "
com.fasterxml.jackson.core.io.BigDecimalParser.MAX_CHARS_TO_REPORT,Field,No Comment,final static int MAX_CHARS_TO_REPORT = 1000;,int MAX_CHARS_TO_REPORT,"final , static "
com.fasterxml.jackson.core.io.BigDecimalParser.SIZE_FOR_SWITCH_TO_FASTDOUBLEPARSER,Field,No Comment,private final static int SIZE_FOR_SWITCH_TO_FASTDOUBLEPARSER = 500;,int SIZE_FOR_SWITCH_TO_FASTDOUBLEPARSER,"private , final , static "
com.fasterxml.jackson.core.io.DataOutputAsStream._output,Field,No Comment,protected final DataOutput _output;,java.io.DataOutput _output,"protected , final "
com.fasterxml.jackson.core.io.IOContext._contentReference,Field,"* Reference to the source object, which can be used for displaying\n     * location information",protected final ContentReference _contentReference;,com.fasterxml.jackson.core.io.ContentReference _contentReference,"protected , final "
com.fasterxml.jackson.core.io.IOContext._sourceRef,Field,"* Old, deprecated ""raw"" reference to input source.\n     *\n     * @deprecated Since 2.13, use {@link #_contentReference} instead",@Deprecated\nprotected final Object _sourceRef;,java.lang.Object _sourceRef,"protected , final "
com.fasterxml.jackson.core.io.IOContext._encoding,Field,"* Encoding used by the underlying stream, if known.",protected JsonEncoding _encoding;,com.fasterxml.jackson.core.JsonEncoding _encoding,protected 
com.fasterxml.jackson.core.io.IOContext._managedResource,Field,"* Flag that indicates whether underlying input/output source/target\n     * object is fully managed by the owner of this context (parser or\n     * generator). If true, it is, and is to be closed by parser/generator;\n     * if false, calling application has to do closing (unless auto-closing\n     * feature is enabled for the parser/generator in question; in which\n     * case it acts like the owner).",protected final boolean _managedResource;,boolean _managedResource,"protected , final "
com.fasterxml.jackson.core.io.IOContext._bufferRecycler,Field,* Recycler used for actual allocation/deallocation/reuse,protected final BufferRecycler _bufferRecycler;,com.fasterxml.jackson.core.util.BufferRecycler _bufferRecycler,"protected , final "
com.fasterxml.jackson.core.io.IOContext._releaseRecycler,Field,"* Flag that indicates whether this context instance should release\n     * configured {@code _bufferRecycler} or not: if it does, it needs to call\n     * (via {@link BufferRecycler#releaseToPool()} when closed; if not,\n     * should do nothing (recycler life-cycle is externally managed)\n     *\n     * @since 2.17",protected boolean _releaseRecycler = true;,boolean _releaseRecycler,protected 
com.fasterxml.jackson.core.io.IOContext._streamReadConstraints,Field,* @since 2.15,protected final StreamReadConstraints _streamReadConstraints;,com.fasterxml.jackson.core.StreamReadConstraints _streamReadConstraints,"protected , final "
com.fasterxml.jackson.core.io.IOContext._streamWriteConstraints,Field,* @since 2.16,protected final StreamWriteConstraints _streamWriteConstraints;,com.fasterxml.jackson.core.StreamWriteConstraints _streamWriteConstraints,"protected , final "
com.fasterxml.jackson.core.io.IOContext._errorReportConfiguration,Field,* @since 2.16,protected final ErrorReportConfiguration _errorReportConfiguration;,com.fasterxml.jackson.core.ErrorReportConfiguration _errorReportConfiguration,"protected , final "
com.fasterxml.jackson.core.io.IOContext._readIOBuffer,Field,"* Reference to the allocated I/O buffer for low-level input reading,\n     * if any allocated.",protected byte[] _readIOBuffer;,byte[] _readIOBuffer,protected 
com.fasterxml.jackson.core.io.IOContext._writeEncodingBuffer,Field,* Reference to the allocated I/O buffer used for low-level\n     * encoding-related buffering.,protected byte[] _writeEncodingBuffer;,byte[] _writeEncodingBuffer,protected 
com.fasterxml.jackson.core.io.IOContext._base64Buffer,Field,* Reference to the buffer allocated for temporary use with\n     * base64 encoding or decoding.,protected byte[] _base64Buffer;,byte[] _base64Buffer,protected 
com.fasterxml.jackson.core.io.IOContext._tokenCBuffer,Field,"* Reference to the buffer allocated for tokenization purposes,\n     * in which character input is read, and from which it can be\n     * further returned.",protected char[] _tokenCBuffer;,char[] _tokenCBuffer,protected 
com.fasterxml.jackson.core.io.IOContext._concatCBuffer,Field,"* Reference to the buffer allocated for buffering it for\n     * output, before being encoded: generally this means concatenating\n     * output, then encoding when buffer fills up.",protected char[] _concatCBuffer;,char[] _concatCBuffer,protected 
com.fasterxml.jackson.core.io.IOContext._nameCopyBuffer,Field,* Reference temporary buffer Parser instances need if calling\n     * app decides it wants to access name via 'getTextCharacters' method.\n     * Regular text buffer cannot be used as it may contain textual\n     * representation of the value token.,protected char[] _nameCopyBuffer;,char[] _nameCopyBuffer,protected 
com.fasterxml.jackson.core.io.IOContext._closed,Field,No Comment,private boolean _closed = false;,boolean _closed,private 
com.fasterxml.jackson.core.io.InputDecorator.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.io.SegmentedStringWriter._buffer,Field,No Comment,final private TextBuffer _buffer;,com.fasterxml.jackson.core.util.TextBuffer _buffer,"final , private "
com.fasterxml.jackson.core.io.ContentReference.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.io.ContentReference.UNKNOWN_CONTENT,Field,"* Constant that may be used when source/target content is not known\n     * (or not exposed).\n     *<p>\n     * NOTE: As of 2.13 assume to contain Binary content, meaning that no\n     * content snippets will be included.","protected final static ContentReference UNKNOWN_CONTENT = new ContentReference(false, null);",com.fasterxml.jackson.core.io.ContentReference UNKNOWN_CONTENT,"protected , final , static "
com.fasterxml.jackson.core.io.ContentReference.REDACTED_CONTENT,Field,"* As content will be redacted by default in Jackson 2.16 and later,\n     * we'll use a new marker reference for slightly different description\n     * from ""unknown"", to indicate explicit removal of source/content reference\n     * (as opposed to it missing from not being available or so)\n     *\n     * @since 2.16","protected final static ContentReference REDACTED_CONTENT = new ContentReference(false, null);",com.fasterxml.jackson.core.io.ContentReference REDACTED_CONTENT,"protected , final , static "
com.fasterxml.jackson.core.io.ContentReference.DEFAULT_MAX_CONTENT_SNIPPET,Field,"* Include at most first 500 characters/bytes from contents; should be enough\n     * to give context, but not cause unfortunate side effects in things like\n     * logs.\n     *\n     * @since 2.9\n     * @deprecated Since 2.16. {@link ErrorReportConfiguration#DEFAULT_MAX_RAW_CONTENT_LENGTH} will be used instead.",@Deprecated\npublic static final int DEFAULT_MAX_CONTENT_SNIPPET = 500;,int DEFAULT_MAX_CONTENT_SNIPPET,"public , static , final "
com.fasterxml.jackson.core.io.ContentReference._rawContent,Field,* Reference to the actual underlying content.,protected final transient Object _rawContent;,java.lang.Object _rawContent,"protected , final , transient "
com.fasterxml.jackson.core.io.ContentReference._offset,Field,"* For static content, indicates offset from the beginning\n     * of static array.\n     * {@code -1} if not in use.",protected final int _offset;,int _offset,"protected , final "
com.fasterxml.jackson.core.io.ContentReference._length,Field,"* For static content, indicates length of content in\n     * the static array.\n     * {@code -1} if not in use.",protected final int _length;,int _length,"protected , final "
com.fasterxml.jackson.core.io.ContentReference._isContentTextual,Field,"* Marker flag to indicate whether included content is textual or not:\n     * this is taken to mean, by default, that a snippet of content may be\n     * displayed for exception messages.",protected final boolean _isContentTextual;,boolean _isContentTextual,"protected , final "
com.fasterxml.jackson.core.io.ContentReference._maxRawContentLength,Field,* max raw content to return as configured \n     *\n     * @since 2.16,protected final int _maxRawContentLength;,int _maxRawContentLength,"protected , final "
com.fasterxml.jackson.core.io.MergedStream._ctxt,Field,No Comment,final private IOContext _ctxt;,com.fasterxml.jackson.core.io.IOContext _ctxt,"final , private "
com.fasterxml.jackson.core.io.MergedStream._in,Field,No Comment,final private InputStream _in;,java.io.InputStream _in,"final , private "
com.fasterxml.jackson.core.io.MergedStream._b,Field,No Comment,private byte[] _b;,byte[] _b,private 
com.fasterxml.jackson.core.io.MergedStream._ptr,Field,No Comment,private int _ptr;,int _ptr,private 
com.fasterxml.jackson.core.io.MergedStream._end,Field,No Comment,final private int _end;,int _end,"final , private "
com.fasterxml.jackson.core.io.UTF8Writer.SURR1_FIRST,Field,No Comment,final static int SURR1_FIRST = 0xD800;,int SURR1_FIRST,"final , static "
com.fasterxml.jackson.core.io.UTF8Writer.SURR1_LAST,Field,No Comment,final static int SURR1_LAST = 0xDBFF;,int SURR1_LAST,"final , static "
com.fasterxml.jackson.core.io.UTF8Writer.SURR2_FIRST,Field,No Comment,final static int SURR2_FIRST = 0xDC00;,int SURR2_FIRST,"final , static "
com.fasterxml.jackson.core.io.UTF8Writer.SURR2_LAST,Field,No Comment,final static int SURR2_LAST = 0xDFFF;,int SURR2_LAST,"final , static "
com.fasterxml.jackson.core.io.UTF8Writer.SURROGATE_BASE,Field,* @since 2.17,public static final int SURROGATE_BASE = 0x10000 - UTF8Writer.SURR2_FIRST - (UTF8Writer.SURR1_FIRST << 10);,int SURROGATE_BASE,"public , static , final "
com.fasterxml.jackson.core.io.UTF8Writer._context,Field,No Comment,final private IOContext _context;,com.fasterxml.jackson.core.io.IOContext _context,"final , private "
com.fasterxml.jackson.core.io.UTF8Writer._out,Field,No Comment,private OutputStream _out;,java.io.OutputStream _out,private 
com.fasterxml.jackson.core.io.UTF8Writer._outBuffer,Field,No Comment,private byte[] _outBuffer;,byte[] _outBuffer,private 
com.fasterxml.jackson.core.io.UTF8Writer._outBufferEnd,Field,No Comment,final private int _outBufferEnd;,int _outBufferEnd,"final , private "
com.fasterxml.jackson.core.io.UTF8Writer._outPtr,Field,No Comment,private int _outPtr;,int _outPtr,private 
com.fasterxml.jackson.core.io.UTF8Writer._surrogate,Field,"* When outputting chars from BMP, surrogate pairs need to be coalesced.\n     * To do this, both pairs must be known first; and since it is possible\n     * pairs may be split, we need temporary storage for the first half",private int _surrogate;,int _surrogate,private 
com.fasterxml.jackson.core.io.JsonEOFException.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.io.JsonEOFException._token,Field,"* Type of token that was being decoded, if parser had enough information\n     * to recognize type (such as starting double-quote for Strings)",protected final JsonToken _token;,com.fasterxml.jackson.core.JsonToken _token,"protected , final "
com.fasterxml.jackson.core.io.NumberInput.NASTY_SMALL_DOUBLE,Field,* Formerly used constant for a value that was problematic on certain\n     * pre-1.8 JDKs.\n     *\n     * @deprecated Since 2.14 -- do not use,"// since 2.14\n@Deprecated\npublic final static String NASTY_SMALL_DOUBLE = ""2.2250738585072012e-308"";",java.lang.String NASTY_SMALL_DOUBLE,"public , final , static "
com.fasterxml.jackson.core.io.NumberInput.L_BILLION,Field,* Constants needed for parsing longs from basic int parsing methods,final static long L_BILLION = 1000000000;,long L_BILLION,"final , static "
com.fasterxml.jackson.core.io.NumberInput.MIN_LONG_STR_NO_SIGN,Field,No Comment,final static String MIN_LONG_STR_NO_SIGN = String.valueOf(Long.MIN_VALUE).substring(1);,java.lang.String MIN_LONG_STR_NO_SIGN,"final , static "
com.fasterxml.jackson.core.io.NumberInput.MAX_LONG_STR,Field,No Comment,final static String MAX_LONG_STR = String.valueOf(Long.MAX_VALUE);,java.lang.String MAX_LONG_STR,"final , static "
com.fasterxml.jackson.core.io.NumberInput.PATTERN_FLOAT,Field,"* Regexp used to pre-validate ""Stringified Numbers"": slightly looser than\n     * JSON Number definition (allows leading zeroes, positive sign).\n     *\n     * @since 2.17","private final static Pattern PATTERN_FLOAT = Pattern.compile(""[+-]?[0-9]*[\\.]?[0-9]+([eE][+-]?[0-9]+)?"");",java.util.regex.Pattern PATTERN_FLOAT,"private , final , static "
com.fasterxml.jackson.core.io.NumberInput.PATTERN_FLOAT_TRAILING_DOT,Field,"* Secondary regexp used along with {@code PATTERN_FLOAT} to cover\n     * case where number ends with dot, like {@code ""+12.""}\n     *\n     * @since 2.17.2","private final static Pattern PATTERN_FLOAT_TRAILING_DOT = Pattern.compile(""[+-]?[0-9]+[\\.]"");",java.util.regex.Pattern PATTERN_FLOAT_TRAILING_DOT,"private , final , static "
com.fasterxml.jackson.core.TSFBuilder.DEFAULT_FACTORY_FEATURE_FLAGS,Field,* Bitfield (set of flags) of all factory features that are enabled by default.,protected final static int DEFAULT_FACTORY_FEATURE_FLAGS = JsonFactory.Feature.collectDefaults();,int DEFAULT_FACTORY_FEATURE_FLAGS,"protected , final , static "
com.fasterxml.jackson.core.TSFBuilder.DEFAULT_PARSER_FEATURE_FLAGS,Field,* Bitfield (set of flags) of all parser features that are enabled\n     * by default.,protected final static int DEFAULT_PARSER_FEATURE_FLAGS = JsonParser.Feature.collectDefaults();,int DEFAULT_PARSER_FEATURE_FLAGS,"protected , final , static "
com.fasterxml.jackson.core.TSFBuilder.DEFAULT_GENERATOR_FEATURE_FLAGS,Field,* Bitfield (set of flags) of all generator features that are enabled\n     * by default.,protected final static int DEFAULT_GENERATOR_FEATURE_FLAGS = JsonGenerator.Feature.collectDefaults();,int DEFAULT_GENERATOR_FEATURE_FLAGS,"protected , final , static "
com.fasterxml.jackson.core.TSFBuilder._factoryFeatures,Field,"* Set of {@link com.fasterxml.jackson.core.JsonFactory.Feature}s enabled,\n     * as bitmask.",protected int _factoryFeatures;,int _factoryFeatures,protected 
com.fasterxml.jackson.core.TSFBuilder._streamReadFeatures,Field,"* Set of {@link JsonParser.Feature}s enabled, as bitmask.",protected int _streamReadFeatures;,int _streamReadFeatures,protected 
com.fasterxml.jackson.core.TSFBuilder._streamWriteFeatures,Field,"* Set of {@link JsonGenerator.Feature}s enabled, as bitmask.",protected int _streamWriteFeatures;,int _streamWriteFeatures,protected 
com.fasterxml.jackson.core.TSFBuilder._recyclerPool,Field,* @since 2.16,protected RecyclerPool<BufferRecycler> _recyclerPool;,com.fasterxml.jackson.core.util.RecyclerPool _recyclerPool,protected 
com.fasterxml.jackson.core.TSFBuilder._inputDecorator,Field,"* Optional helper object that may decorate input sources, to do\n     * additional processing on input during parsing.",protected InputDecorator _inputDecorator;,com.fasterxml.jackson.core.io.InputDecorator _inputDecorator,protected 
com.fasterxml.jackson.core.TSFBuilder._outputDecorator,Field,"* Optional helper object that may decorate output object, to do\n     * additional processing on output during content generation.",protected OutputDecorator _outputDecorator;,com.fasterxml.jackson.core.io.OutputDecorator _outputDecorator,protected 
com.fasterxml.jackson.core.TSFBuilder._streamReadConstraints,Field,* {@link StreamReadConstraints} to use.\n     *\n     * @since 2.15,protected StreamReadConstraints _streamReadConstraints;,com.fasterxml.jackson.core.StreamReadConstraints _streamReadConstraints,protected 
com.fasterxml.jackson.core.TSFBuilder._streamWriteConstraints,Field,* {@link StreamWriteConstraints} to use.\n     *\n     * @since 2.16,protected StreamWriteConstraints _streamWriteConstraints;,com.fasterxml.jackson.core.StreamWriteConstraints _streamWriteConstraints,protected 
com.fasterxml.jackson.core.TSFBuilder._errorReportConfiguration,Field,* {@link ErrorReportConfiguration} to use.\n     *\n     * @since 2.16,protected ErrorReportConfiguration _errorReportConfiguration;,com.fasterxml.jackson.core.ErrorReportConfiguration _errorReportConfiguration,protected 
com.fasterxml.jackson.core.TSFBuilder._generatorDecorators,Field,* @since 2.16,protected List<JsonGeneratorDecorator> _generatorDecorators;,java.util.List _generatorDecorators,protected 
com.fasterxml.jackson.core.JsonStreamContext.TYPE_ROOT,Field,"* Indicator for ""Root Value"" context (has not parent)",public final static int TYPE_ROOT = 0;,int TYPE_ROOT,"public , final , static "
com.fasterxml.jackson.core.JsonStreamContext.TYPE_ARRAY,Field,"* Indicator for ""Array"" context.",public final static int TYPE_ARRAY = 1;,int TYPE_ARRAY,"public , final , static "
com.fasterxml.jackson.core.JsonStreamContext.TYPE_OBJECT,Field,"* Indicator for ""Object"" context.",public final static int TYPE_OBJECT = 2;,int TYPE_OBJECT,"public , final , static "
com.fasterxml.jackson.core.JsonStreamContext._type,Field,* Indicates logical type of context as one of {@code TYPE_xxx} constants.,protected int _type;,int _type,protected 
com.fasterxml.jackson.core.JsonStreamContext._index,Field,"* Index of the currently processed entry. Starts with -1 to signal\n     * that no entries have been started, and gets advanced each\n     * time a new entry is started, either by encountering an expected\n     * separator, or with new values if no separators are expected\n     * (the case for root context).",protected int _index;,int _index,protected 
com.fasterxml.jackson.core.JsonStreamContext._nestingDepth,Field,"* The nesting depth is a count of objects and arrays that have not\n     * been closed, `{` and `[` respectively.\n     *\n     * @since 2.15",protected int _nestingDepth;,int _nestingDepth,protected 
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.SHORT_WRITE,Field,No Comment,protected final static int SHORT_WRITE = 32;,int SHORT_WRITE,"protected , final , static "
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.HEX_CHARS_UPPER,Field,No Comment,protected final static char[] HEX_CHARS_UPPER = CharTypes.copyHexChars(true);,char[] HEX_CHARS_UPPER,"protected , final , static "
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.HEX_CHARS_LOWER,Field,No Comment,protected final static char[] HEX_CHARS_LOWER = CharTypes.copyHexChars(false);,char[] HEX_CHARS_LOWER,"protected , final , static "
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._writer,Field,No Comment,protected final Writer _writer;,java.io.Writer _writer,"protected , final "
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._quoteChar,Field,* Character used for quoting JSON Object property names\n     * and String values.,protected char _quoteChar;,char _quoteChar,protected 
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._outputBuffer,Field,* Intermediate buffer in which contents are buffered before\n     * being written using {@link #_writer}.,protected char[] _outputBuffer;,char[] _outputBuffer,protected 
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._outputHead,Field,* Pointer to the first buffered character to output,protected int _outputHead;,int _outputHead,protected 
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._outputTail,Field,* Pointer to the position right beyond the last character to output\n     * (end marker; may point to position right beyond the end of the buffer),protected int _outputTail;,int _outputTail,protected 
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._outputEnd,Field,* End marker of the output buffer; one past the last valid position\n     * within the buffer.,protected int _outputEnd;,int _outputEnd,protected 
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._entityBuffer,Field,"* Short (14 char) temporary buffer allocated if needed, for constructing\n     * escape sequences",protected char[] _entityBuffer;,char[] _entityBuffer,protected 
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._currentEscape,Field,"* When custom escapes are used, this member variable is used\n     * internally to hold a reference to currently used escape",protected SerializableString _currentEscape;,com.fasterxml.jackson.core.SerializableString _currentEscape,protected 
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator._copyBuffer,Field,* Intermediate buffer in which characters of a String are copied\n     * before being encoded.\n     *\n     * @since 2.10,protected char[] _copyBuffer;,char[] _copyBuffer,protected 
com.fasterxml.jackson.core.json.JsonGeneratorImpl.sOutputEscapes,Field,"* This is the default set of escape codes, over 7-bit ASCII range\n     * (first 128 character codes), used for single-byte UTF-8 characters.",protected final static int[] sOutputEscapes = CharTypes.get7BitOutputEscapes();,int[] sOutputEscapes,"protected , final , static "
com.fasterxml.jackson.core.json.JsonGeneratorImpl.JSON_WRITE_CAPABILITIES,Field,"* Default capabilities for JSON generator implementations which do not\n     * different from ""general textual"" defaults\n     *\n     * @since 2.12",protected final static JacksonFeatureSet<StreamWriteCapability> JSON_WRITE_CAPABILITIES = DEFAULT_TEXTUAL_WRITE_CAPABILITIES;,com.fasterxml.jackson.core.util.JacksonFeatureSet JSON_WRITE_CAPABILITIES,"protected , final , static "
com.fasterxml.jackson.core.json.JsonGeneratorImpl._streamWriteConstraints,Field,* @since 2.16,protected final StreamWriteConstraints _streamWriteConstraints;,com.fasterxml.jackson.core.StreamWriteConstraints _streamWriteConstraints,"protected , final "
com.fasterxml.jackson.core.json.JsonGeneratorImpl._outputEscapes,Field,* Currently active set of output escape code definitions (whether\n     * and how to escape or not) for 7-bit ASCII range (first 128\n     * character codes). Defined separately to make potentially\n     * customizable,protected int[] _outputEscapes = sOutputEscapes;,int[] _outputEscapes,protected 
com.fasterxml.jackson.core.json.JsonGeneratorImpl._maximumNonEscapedChar,Field,* Value between 128 (0x80) and 65535 (0xFFFF) that indicates highest\n     * Unicode code point that will not need escaping; or 0 to indicate\n     * that all characters can be represented without escaping.\n     * Typically used to force escaping of some portion of character set;\n     * for example to always escape non-ASCII characters (if value was 127).\n     *<p>\n     * NOTE: not all sub-classes make use of this setting.,protected int _maximumNonEscapedChar;,int _maximumNonEscapedChar,protected 
com.fasterxml.jackson.core.json.JsonGeneratorImpl._characterEscapes,Field,"* Definition of custom character escapes to use for generators created\n     * by this factory, if any. If null, standard data format specific\n     * escapes are used.",protected CharacterEscapes _characterEscapes;,com.fasterxml.jackson.core.io.CharacterEscapes _characterEscapes,protected 
com.fasterxml.jackson.core.json.JsonGeneratorImpl._rootValueSeparator,Field,"* Separator to use, if any, between root-level values.\n     *\n     * @since 2.1",protected SerializableString _rootValueSeparator = JsonFactory.DEFAULT_ROOT_VALUE_SEPARATOR;,com.fasterxml.jackson.core.SerializableString _rootValueSeparator,protected 
com.fasterxml.jackson.core.json.JsonGeneratorImpl._cfgUnqNames,Field,* Flag that is set if quoting is not to be added around\n     * JSON Object property names.\n     *\n     * @since 2.7,protected boolean _cfgUnqNames;,boolean _cfgUnqNames,protected 
com.fasterxml.jackson.core.json.JsonGeneratorImpl._cfgWriteHexUppercase,Field,* Write Hex values with uppercase letters\n     *\n     * @since 2.14,protected boolean _cfgWriteHexUppercase;,boolean _cfgWriteHexUppercase,protected 
com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_u,Field,No Comment,private final static byte BYTE_u = (byte) 'u';,byte BYTE_u,"private , final , static "
com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_0,Field,No Comment,private final static byte BYTE_0 = (byte) '0';,byte BYTE_0,"private , final , static "
com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_LBRACKET,Field,No Comment,private final static byte BYTE_LBRACKET = (byte) '[';,byte BYTE_LBRACKET,"private , final , static "
com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_RBRACKET,Field,No Comment,private final static byte BYTE_RBRACKET = (byte) ']';,byte BYTE_RBRACKET,"private , final , static "
com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_LCURLY,Field,No Comment,private final static byte BYTE_LCURLY = (byte) '{';,byte BYTE_LCURLY,"private , final , static "
com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_RCURLY,Field,No Comment,private final static byte BYTE_RCURLY = (byte) '}';,byte BYTE_RCURLY,"private , final , static "
com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_BACKSLASH,Field,No Comment,private final static byte BYTE_BACKSLASH = (byte) '\\';,byte BYTE_BACKSLASH,"private , final , static "
com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_COMMA,Field,No Comment,"private final static byte BYTE_COMMA = (byte) ',';",byte BYTE_COMMA,"private , final , static "
com.fasterxml.jackson.core.json.UTF8JsonGenerator.BYTE_COLON,Field,No Comment,private final static byte BYTE_COLON = (byte) ':';,byte BYTE_COLON,"private , final , static "
com.fasterxml.jackson.core.json.UTF8JsonGenerator.MAX_BYTES_TO_BUFFER,Field,intermediate copies only made up to certain length...,private final static int MAX_BYTES_TO_BUFFER = 512;,int MAX_BYTES_TO_BUFFER,"private , final , static "
com.fasterxml.jackson.core.json.UTF8JsonGenerator.HEX_BYTES_UPPER,Field,No Comment,private final static byte[] HEX_BYTES_UPPER = CharTypes.copyHexBytes(true);,byte[] HEX_BYTES_UPPER,"private , final , static "
com.fasterxml.jackson.core.json.UTF8JsonGenerator.HEX_BYTES_LOWER,Field,No Comment,private final static byte[] HEX_BYTES_LOWER = CharTypes.copyHexBytes(false);,byte[] HEX_BYTES_LOWER,"private , final , static "
com.fasterxml.jackson.core.json.UTF8JsonGenerator.NULL_BYTES,Field,No Comment,"private final static byte[] NULL_BYTES = { 'n', 'u', 'l', 'l' };",byte[] NULL_BYTES,"private , final , static "
com.fasterxml.jackson.core.json.UTF8JsonGenerator.TRUE_BYTES,Field,No Comment,"private final static byte[] TRUE_BYTES = { 't', 'r', 'u', 'e' };",byte[] TRUE_BYTES,"private , final , static "
com.fasterxml.jackson.core.json.UTF8JsonGenerator.FALSE_BYTES,Field,No Comment,"private final static byte[] FALSE_BYTES = { 'f', 'a', 'l', 's', 'e' };",byte[] FALSE_BYTES,"private , final , static "
com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputStream,Field,* Underlying output stream used for writing JSON content.,final protected OutputStream _outputStream;,java.io.OutputStream _outputStream,"final , protected "
com.fasterxml.jackson.core.json.UTF8JsonGenerator._quoteChar,Field,* Character used for quoting JSON Object property names\n     * and String values.\n     *\n     * @since 2.8,protected byte _quoteChar;,byte _quoteChar,protected 
com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputBuffer,Field,* Intermediate buffer in which contents are buffered before\n     * being written using {@link #_outputStream}.,protected byte[] _outputBuffer;,byte[] _outputBuffer,protected 
com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputTail,Field,* Pointer to the position right beyond the last character to output\n     * (end marker; may be past the buffer),protected int _outputTail;,int _outputTail,protected 
com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputEnd,Field,* End marker of the output buffer; one past the last valid position\n     * within the buffer.,protected final int _outputEnd;,int _outputEnd,"protected , final "
com.fasterxml.jackson.core.json.UTF8JsonGenerator._outputMaxContiguous,Field,* Maximum number of <code>char</code>s that we know will always fit\n     * in the output buffer after escaping,protected final int _outputMaxContiguous;,int _outputMaxContiguous,"protected , final "
com.fasterxml.jackson.core.json.UTF8JsonGenerator._charBuffer,Field,* Intermediate buffer in which characters of a String are copied\n     * before being encoded.,protected char[] _charBuffer;,char[] _charBuffer,protected 
com.fasterxml.jackson.core.json.UTF8JsonGenerator._charBufferLength,Field,* Length of <code>_charBuffer</code>,protected final int _charBufferLength;,int _charBufferLength,"protected , final "
com.fasterxml.jackson.core.json.UTF8JsonGenerator._entityBuffer,Field,"* 6 character temporary buffer allocated if needed, for constructing\n     * escape sequences",protected byte[] _entityBuffer;,byte[] _entityBuffer,protected 
com.fasterxml.jackson.core.json.UTF8JsonGenerator._bufferRecyclable,Field,* Flag that indicates whether the output buffer is recycable (and\n     * needs to be returned to recycler once we are done) or not.,protected boolean _bufferRecyclable;,boolean _bufferRecyclable,protected 
com.fasterxml.jackson.core.json.UTF8StreamJsonParser.BYTE_LF,Field,No Comment,protected final static byte BYTE_LF = (byte) '\n';,byte BYTE_LF,"protected , final , static "
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._symbols,Field,* Symbol table that contains field names encountered so far,protected final ByteQuadsCanonicalizer _symbols;,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols,"protected , final "
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._quadBuffer,Field,* Temporary buffer used for name parsing.,protected int[] _quadBuffer = new int[16];,int[] _quadBuffer,protected 
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._tokenIncomplete,Field,"* Flag that indicates that the current token has not yet\n     * been fully processed, and needs to be finished for\n     * some access (or skipped to obtain the next token)",protected boolean _tokenIncomplete;,boolean _tokenIncomplete,protected 
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._quad1,Field,* Temporary storage for partially parsed name bytes.,private int _quad1;,int _quad1,private 
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nameStartOffset,Field,"* Value of {@link #_inputPtr} at the time when the first character of\n     * name token was read. Used for calculating token location when requested;\n     * combined with {@link #_currInputProcessed}, may be updated appropriately\n     * as needed.\n     *\n     * @since 2.7",protected int _nameStartOffset;,int _nameStartOffset,protected 
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nameStartRow,Field,* @since 2.7,protected int _nameStartRow;,int _nameStartRow,protected 
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nameStartCol,Field,* @since 2.7,protected int _nameStartCol;,int _nameStartCol,protected 
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._inputStream,Field,No Comment,protected InputStream _inputStream;,java.io.InputStream _inputStream,protected 
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._inputBuffer,Field,"* Current buffer from which data is read; generally data is read into\n     * buffer from input source, but in some cases pre-loaded buffer\n     * is handed to the parser.",protected byte[] _inputBuffer;,byte[] _inputBuffer,protected 
com.fasterxml.jackson.core.json.UTF8StreamJsonParser._bufferRecyclable,Field,"* Flag that indicates whether the input buffer is recycable (and\n     * needs to be returned to recycler once we are done) or not.\n     *<p>\n     * If it is not, it also means that parser can NOT modify underlying\n     * buffer.",protected boolean _bufferRecyclable;,boolean _bufferRecyclable,protected 
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._symbols,Field,* Symbol table that contains field names encountered so far,protected final ByteQuadsCanonicalizer _symbols;,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols,"protected , final "
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._quadBuffer,Field,* Temporary buffer used for name parsing.,protected int[] _quadBuffer = new int[16];,int[] _quadBuffer,protected 
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._tokenIncomplete,Field,"* Flag that indicates that the current token has not yet\n     * been fully processed, and needs to be finished for\n     * some access (or skipped to obtain the next token)",protected boolean _tokenIncomplete;,boolean _tokenIncomplete,protected 
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._quad1,Field,* Temporary storage for partially parsed name bytes.,private int _quad1;,int _quad1,private 
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._inputData,Field,No Comment,protected DataInput _inputData;,java.io.DataInput _inputData,protected 
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser._nextByte,Field,"* Sometimes we need buffering for just a single byte we read but\n     * have to ""push back""",protected int _nextByte = -1;,int _nextByte,protected 
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser._inputBuffer,Field,No Comment,private byte[] _inputBuffer = NO_BYTES;,byte[] _inputBuffer,private 
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.FEAT_MASK_TRAILING_COMMA,Field,No Comment,"@SuppressWarnings(""deprecation"")\nprivate final static int FEAT_MASK_TRAILING_COMMA = Feature.ALLOW_TRAILING_COMMA.getMask();",int FEAT_MASK_TRAILING_COMMA,"private , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.FEAT_MASK_LEADING_ZEROS,Field,No Comment,"@SuppressWarnings(""deprecation"")\nprivate final static int FEAT_MASK_LEADING_ZEROS = Feature.ALLOW_NUMERIC_LEADING_ZEROS.getMask();",int FEAT_MASK_LEADING_ZEROS,"private , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.FEAT_MASK_ALLOW_MISSING,Field,No Comment,"@SuppressWarnings(""deprecation"")\nprivate final static int FEAT_MASK_ALLOW_MISSING = Feature.ALLOW_MISSING_VALUES.getMask();",int FEAT_MASK_ALLOW_MISSING,"private , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.FEAT_MASK_ALLOW_SINGLE_QUOTES,Field,No Comment,private final static int FEAT_MASK_ALLOW_SINGLE_QUOTES = Feature.ALLOW_SINGLE_QUOTES.getMask();,int FEAT_MASK_ALLOW_SINGLE_QUOTES,"private , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.FEAT_MASK_ALLOW_UNQUOTED_NAMES,Field,No Comment,private final static int FEAT_MASK_ALLOW_UNQUOTED_NAMES = Feature.ALLOW_UNQUOTED_FIELD_NAMES.getMask();,int FEAT_MASK_ALLOW_UNQUOTED_NAMES,"private , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.FEAT_MASK_ALLOW_JAVA_COMMENTS,Field,No Comment,private final static int FEAT_MASK_ALLOW_JAVA_COMMENTS = Feature.ALLOW_COMMENTS.getMask();,int FEAT_MASK_ALLOW_JAVA_COMMENTS,"private , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase.FEAT_MASK_ALLOW_YAML_COMMENTS,Field,No Comment,private final static int FEAT_MASK_ALLOW_YAML_COMMENTS = Feature.ALLOW_YAML_COMMENTS.getMask();,int FEAT_MASK_ALLOW_YAML_COMMENTS,"private , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._icUTF8,Field,"This is the main input-code lookup table, fetched eagerly",private final static int[] _icUTF8 = CharTypes.getInputCodeUtf8();,int[] _icUTF8,"private , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._icLatin1,Field,"pre-processing task, to simplify first pass, keep it fast.",protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();,int[] _icLatin1,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase._origBufferLen,Field,"* In addition to current buffer pointer, and end pointer,\n     * we will also need to know number of bytes originally\n     * contained. This is needed to correctly update location\n     * information when the block has been completed.",protected int _origBufferLen;,int _origBufferLen,protected 
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MAJOR_INITIAL,Field,"* State right after parser has been constructed, before seeing the first byte\n     * to handle possible (but optional) BOM.",protected final static int MAJOR_INITIAL = 0;,int MAJOR_INITIAL,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MAJOR_ROOT,Field,"* State right after parser a root value has been\n     * finished, but next token has not yet been recognized.",protected final static int MAJOR_ROOT = 1;,int MAJOR_ROOT,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MAJOR_OBJECT_FIELD_FIRST,Field,No Comment,protected final static int MAJOR_OBJECT_FIELD_FIRST = 2;,int MAJOR_OBJECT_FIELD_FIRST,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MAJOR_OBJECT_FIELD_NEXT,Field,No Comment,protected final static int MAJOR_OBJECT_FIELD_NEXT = 3;,int MAJOR_OBJECT_FIELD_NEXT,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MAJOR_OBJECT_VALUE,Field,No Comment,protected final static int MAJOR_OBJECT_VALUE = 4;,int MAJOR_OBJECT_VALUE,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MAJOR_ARRAY_ELEMENT_FIRST,Field,No Comment,protected final static int MAJOR_ARRAY_ELEMENT_FIRST = 5;,int MAJOR_ARRAY_ELEMENT_FIRST,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MAJOR_ARRAY_ELEMENT_NEXT,Field,No Comment,protected final static int MAJOR_ARRAY_ELEMENT_NEXT = 6;,int MAJOR_ARRAY_ELEMENT_NEXT,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MAJOR_CLOSED,Field,* State after non-blocking input source has indicated that no more input\n     * is forthcoming AND we have exhausted all the input,protected final static int MAJOR_CLOSED = 7;,int MAJOR_CLOSED,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_ROOT_BOM,Field,"* State in which part of (UTF-8) BOM has been detected, but not yet completely.",protected final static int MINOR_ROOT_BOM = 1;,int MINOR_ROOT_BOM,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_ROOT_NEED_SEPARATOR,Field,"* State between root-level value, waiting for at least one white-space\n     * character as separator",protected final static int MINOR_ROOT_NEED_SEPARATOR = 2;,int MINOR_ROOT_NEED_SEPARATOR,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_ROOT_GOT_SEPARATOR,Field,"* State between root-level value, having processed at least one white-space\n     * character, and expecting either more, start of a value, or end of input\n     * stream.",protected final static int MINOR_ROOT_GOT_SEPARATOR = 3;,int MINOR_ROOT_GOT_SEPARATOR,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_FIELD_LEADING_WS,Field,"state before field name itself, waiting for quote (or unquoted name)",protected final static int MINOR_FIELD_LEADING_WS = 4;,int MINOR_FIELD_LEADING_WS,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_FIELD_LEADING_COMMA,Field,"state before field name, expecting comma (or closing curly), then field name",protected final static int MINOR_FIELD_LEADING_COMMA = 5;,int MINOR_FIELD_LEADING_COMMA,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_FIELD_NAME,Field,State within regular (double-quoted) field name,protected final static int MINOR_FIELD_NAME = 7;,int MINOR_FIELD_NAME,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_FIELD_NAME_ESCAPE,Field,"encountered either just backslash, or backslash and 'u' and 0 - 3 hex digits,",protected final static int MINOR_FIELD_NAME_ESCAPE = 8;,int MINOR_FIELD_NAME_ESCAPE,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_FIELD_APOS_NAME,Field,No Comment,protected final static int MINOR_FIELD_APOS_NAME = 9;,int MINOR_FIELD_APOS_NAME,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_FIELD_UNQUOTED_NAME,Field,No Comment,protected final static int MINOR_FIELD_UNQUOTED_NAME = 10;,int MINOR_FIELD_UNQUOTED_NAME,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_LEADING_WS,Field,No Comment,protected final static int MINOR_VALUE_LEADING_WS = 12;,int MINOR_VALUE_LEADING_WS,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_EXPECTING_COMMA,Field,No Comment,protected final static int MINOR_VALUE_EXPECTING_COMMA = 13;,int MINOR_VALUE_EXPECTING_COMMA,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_EXPECTING_COLON,Field,No Comment,protected final static int MINOR_VALUE_EXPECTING_COLON = 14;,int MINOR_VALUE_EXPECTING_COLON,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_WS_AFTER_COMMA,Field,No Comment,protected final static int MINOR_VALUE_WS_AFTER_COMMA = 15;,int MINOR_VALUE_WS_AFTER_COMMA,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_TOKEN_NULL,Field,No Comment,protected final static int MINOR_VALUE_TOKEN_NULL = 16;,int MINOR_VALUE_TOKEN_NULL,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_TOKEN_TRUE,Field,No Comment,protected final static int MINOR_VALUE_TOKEN_TRUE = 17;,int MINOR_VALUE_TOKEN_TRUE,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_TOKEN_FALSE,Field,No Comment,protected final static int MINOR_VALUE_TOKEN_FALSE = 18;,int MINOR_VALUE_TOKEN_FALSE,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_TOKEN_NON_STD,Field,No Comment,protected final static int MINOR_VALUE_TOKEN_NON_STD = 19;,int MINOR_VALUE_TOKEN_NON_STD,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_NUMBER_PLUS,Field,No Comment,protected final static int MINOR_NUMBER_PLUS = 22;,int MINOR_NUMBER_PLUS,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_NUMBER_MINUS,Field,No Comment,protected final static int MINOR_NUMBER_MINUS = 23;,int MINOR_NUMBER_MINUS,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_NUMBER_ZERO,Field,"zero as first, possibly trimming multiple",protected final static int MINOR_NUMBER_ZERO = 24;,int MINOR_NUMBER_ZERO,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_NUMBER_MINUSZERO,Field,"""-0"" (and possibly more zeroes) receive",protected final static int MINOR_NUMBER_MINUSZERO = 25;,int MINOR_NUMBER_MINUSZERO,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_NUMBER_INTEGER_DIGITS,Field,No Comment,protected final static int MINOR_NUMBER_INTEGER_DIGITS = 26;,int MINOR_NUMBER_INTEGER_DIGITS,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_NUMBER_FRACTION_DIGITS,Field,No Comment,protected final static int MINOR_NUMBER_FRACTION_DIGITS = 30;,int MINOR_NUMBER_FRACTION_DIGITS,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_NUMBER_EXPONENT_MARKER,Field,No Comment,protected final static int MINOR_NUMBER_EXPONENT_MARKER = 31;,int MINOR_NUMBER_EXPONENT_MARKER,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_NUMBER_EXPONENT_DIGITS,Field,No Comment,protected final static int MINOR_NUMBER_EXPONENT_DIGITS = 32;,int MINOR_NUMBER_EXPONENT_DIGITS,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_STRING,Field,No Comment,protected final static int MINOR_VALUE_STRING = 40;,int MINOR_VALUE_STRING,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_STRING_ESCAPE,Field,No Comment,protected final static int MINOR_VALUE_STRING_ESCAPE = 41;,int MINOR_VALUE_STRING_ESCAPE,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_STRING_UTF8_2,Field,No Comment,protected final static int MINOR_VALUE_STRING_UTF8_2 = 42;,int MINOR_VALUE_STRING_UTF8_2,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_STRING_UTF8_3,Field,No Comment,protected final static int MINOR_VALUE_STRING_UTF8_3 = 43;,int MINOR_VALUE_STRING_UTF8_3,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_STRING_UTF8_4,Field,No Comment,protected final static int MINOR_VALUE_STRING_UTF8_4 = 44;,int MINOR_VALUE_STRING_UTF8_4,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_APOS_STRING,Field,No Comment,protected final static int MINOR_VALUE_APOS_STRING = 45;,int MINOR_VALUE_APOS_STRING,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_VALUE_TOKEN_ERROR,Field,"* Special state at which point decoding of a non-quoted token has encountered\n     * a problem; that is, either not matching fully (like ""truf"" instead of ""true"",\n     * at ""tru""), or not having trailing separator (or end of input), like ""trueful"".\n     * Attempt is made, then, to decode likely full input token to report suitable\n     * error.",protected final static int MINOR_VALUE_TOKEN_ERROR = 50;,int MINOR_VALUE_TOKEN_ERROR,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_COMMENT_LEADING_SLASH,Field,No Comment,protected final static int MINOR_COMMENT_LEADING_SLASH = 51;,int MINOR_COMMENT_LEADING_SLASH,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_COMMENT_CLOSING_ASTERISK,Field,No Comment,protected final static int MINOR_COMMENT_CLOSING_ASTERISK = 52;,int MINOR_COMMENT_CLOSING_ASTERISK,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_COMMENT_C,Field,No Comment,protected final static int MINOR_COMMENT_C = 53;,int MINOR_COMMENT_C,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_COMMENT_CPP,Field,No Comment,protected final static int MINOR_COMMENT_CPP = 54;,int MINOR_COMMENT_CPP,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.MINOR_COMMENT_YAML,Field,No Comment,protected final static int MINOR_COMMENT_YAML = 55;,int MINOR_COMMENT_YAML,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._symbols,Field,* Symbol table that contains field names encountered so far,final protected ByteQuadsCanonicalizer _symbols;,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer _symbols,"final , protected "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._quadBuffer,Field,* Temporary buffer used for name parsing.,protected int[] _quadBuffer = new int[8];,int[] _quadBuffer,protected 
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._quadLength,Field,No Comment,protected int _quadLength;,int _quadLength,protected 
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._quad1,Field,No Comment,protected int _quad1;,int _quad1,protected 
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._pending32,Field,No Comment,protected int _pending32;,int _pending32,protected 
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._pendingBytes,Field,No Comment,protected int _pendingBytes;,int _pendingBytes,protected 
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._quoted32,Field,No Comment,protected int _quoted32;,int _quoted32,protected 
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._quotedDigits,Field,No Comment,protected int _quotedDigits;,int _quotedDigits,protected 
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._majorState,Field,* Current main decoding state within logical tree,protected int _majorState;,int _majorState,protected 
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._majorStateAfterValue,Field,* Value of {@link #_majorState} after completing a scalar value,protected int _majorStateAfterValue;,int _majorStateAfterValue,protected 
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._minorState,Field,* Additional indicator within state; contextually relevant for just that state,protected int _minorState;,int _minorState,protected 
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._minorStateAfterSplit,Field,* Secondary minor state indicator used during decoding of escapes and/or\n     * multi-byte Unicode characters,protected int _minorStateAfterSplit;,int _minorStateAfterSplit,protected 
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._endOfInput,Field,* Flag that is sent when calling application indicates that there will\n     * be no more input to parse.,protected boolean _endOfInput = false;,boolean _endOfInput,protected 
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.NON_STD_TOKEN_NAN,Field,No Comment,protected final static int NON_STD_TOKEN_NAN = 0;,int NON_STD_TOKEN_NAN,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.NON_STD_TOKEN_INFINITY,Field,No Comment,protected final static int NON_STD_TOKEN_INFINITY = 1;,int NON_STD_TOKEN_INFINITY,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.NON_STD_TOKEN_PLUS_INFINITY,Field,No Comment,protected final static int NON_STD_TOKEN_PLUS_INFINITY = 2;,int NON_STD_TOKEN_PLUS_INFINITY,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.NON_STD_TOKEN_MINUS_INFINITY,Field,No Comment,protected final static int NON_STD_TOKEN_MINUS_INFINITY = 3;,int NON_STD_TOKEN_MINUS_INFINITY,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.NON_STD_TOKENS,Field,No Comment,"protected final static String[] NON_STD_TOKENS = new String[] { ""NaN"", ""Infinity"", ""+Infinity"", ""-Infinity"" };",java.lang.String[] NON_STD_TOKENS,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase.NON_STD_TOKEN_VALUES,Field,No Comment,"protected final static double[] NON_STD_TOKEN_VALUES = new double[] { Double.NaN, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY };",double[] NON_STD_TOKEN_VALUES,"protected , final , static "
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._nonStdTokenType,Field,"* When tokenizing non-standard (""odd"") tokens, this is the type to consider;\n     * also works as index to actual textual representation.",protected int _nonStdTokenType;,int _nonStdTokenType,protected 
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._currBufferStart,Field,"* Since we are fed content that may or may not start at zero offset, we need\n     * to keep track of the first byte within that buffer, to be able to calculate\n     * logical offset within input ""stream""",protected int _currBufferStart = 0;,int _currBufferStart,protected 
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase._currInputRowAlt,Field,"* Alternate row tracker, used to keep track of position by `\r` marker\n     * (whereas <code>_currInputRow</code> tracks `\n`). Used to simplify\n     * tracking of linefeeds, assuming that input typically uses various\n     * linefeed combinations (`\r`, `\n` or `\r\n`) consistently, in which\n     * case we can simply choose max of two row candidates.",protected int _currInputRowAlt = 1;,int _currInputRowAlt,protected 
com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser._inputBuffer,Field,No Comment,private ByteBuffer _inputBuffer = ByteBuffer.wrap(NO_BYTES);,java.nio.ByteBuffer _inputBuffer,private 
com.fasterxml.jackson.core.json.PackageVersion.VERSION,Field,No Comment,"public final static Version VERSION = VersionUtil.parseVersion(""2.19.0-SNAPSHOT"", ""com.fasterxml.jackson.core"", ""jackson-core"");",com.fasterxml.jackson.core.Version VERSION,"public , final , static "
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.UTF8_BOM_1,Field,No Comment,public final static byte UTF8_BOM_1 = (byte) 0xEF;,byte UTF8_BOM_1,"public , final , static "
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.UTF8_BOM_2,Field,No Comment,public final static byte UTF8_BOM_2 = (byte) 0xBB;,byte UTF8_BOM_2,"public , final , static "
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.UTF8_BOM_3,Field,No Comment,public final static byte UTF8_BOM_3 = (byte) 0xBF;,byte UTF8_BOM_3,"public , final , static "
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper.STRING_READER_BYTE_ARRAY_LENGTH_LIMIT,Field,[jackson-core#1081] Limit in bytes for input byte array length to use StringReader instead of InputStreamReader,private static final int STRING_READER_BYTE_ARRAY_LENGTH_LIMIT = 8192;,int STRING_READER_BYTE_ARRAY_LENGTH_LIMIT,"private , static , final "
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper._context,Field,No Comment,private final IOContext _context;,com.fasterxml.jackson.core.io.IOContext _context,"private , final "
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper._in,Field,No Comment,private final InputStream _in;,java.io.InputStream _in,"private , final "
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper._inputBuffer,Field,No Comment,private final byte[] _inputBuffer;,byte[] _inputBuffer,"private , final "
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper._inputPtr,Field,No Comment,private int _inputPtr;,int _inputPtr,private 
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper._inputEnd,Field,No Comment,private int _inputEnd;,int _inputEnd,private 
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper._bufferRecyclable,Field,* Flag that indicates whether buffer above is to be recycled\n     * after being used or not.,private final boolean _bufferRecyclable;,boolean _bufferRecyclable,"private , final "
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper._bigEndian,Field,* Whether input has been detected to be in Big-Endian encoding or not.,private boolean _bigEndian = true;,boolean _bigEndian,private 
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper._bytesPerChar,Field,"0 means ""dunno yet""",private int _bytesPerChar;,int _bytesPerChar,private 
com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_OK_AS_IS,Field,No Comment,public final static int STATUS_OK_AS_IS = 0;,int STATUS_OK_AS_IS,"public , final , static "
com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_OK_AFTER_COMMA,Field,No Comment,public final static int STATUS_OK_AFTER_COMMA = 1;,int STATUS_OK_AFTER_COMMA,"public , final , static "
com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_OK_AFTER_COLON,Field,No Comment,public final static int STATUS_OK_AFTER_COLON = 2;,int STATUS_OK_AFTER_COLON,"public , final , static "
com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_OK_AFTER_SPACE,Field,in root context,public final static int STATUS_OK_AFTER_SPACE = 3;,int STATUS_OK_AFTER_SPACE,"public , final , static "
com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_EXPECT_VALUE,Field,No Comment,public final static int STATUS_EXPECT_VALUE = 4;,int STATUS_EXPECT_VALUE,"public , final , static "
com.fasterxml.jackson.core.json.JsonWriteContext.STATUS_EXPECT_NAME,Field,No Comment,public final static int STATUS_EXPECT_NAME = 5;,int STATUS_EXPECT_NAME,"public , final , static "
com.fasterxml.jackson.core.json.JsonWriteContext._parent,Field,* Parent context for this context; null for root context.,protected final JsonWriteContext _parent;,com.fasterxml.jackson.core.json.JsonWriteContext _parent,"protected , final "
com.fasterxml.jackson.core.json.JsonWriteContext._dups,Field,No Comment,protected DupDetector _dups;,com.fasterxml.jackson.core.json.DupDetector _dups,protected 
com.fasterxml.jackson.core.json.JsonWriteContext._child,Field,No Comment,protected JsonWriteContext _child;,com.fasterxml.jackson.core.json.JsonWriteContext _child,protected 
com.fasterxml.jackson.core.json.JsonWriteContext._currentName,Field,* Name of the field of which value is to be written; only\n     * used for OBJECT contexts,protected String _currentName;,java.lang.String _currentName,protected 
com.fasterxml.jackson.core.json.JsonWriteContext._currentValue,Field,* @since 2.5,protected Object _currentValue;,java.lang.Object _currentValue,protected 
com.fasterxml.jackson.core.json.JsonWriteContext._gotName,Field,"* Marker used to indicate that we just wrote a name, and\n     * now expect a value to write",protected boolean _gotName;,boolean _gotName,protected 
com.fasterxml.jackson.core.json.DupDetector._source,Field,* We need to store a back-reference here to parser/generator.,protected final Object _source;,java.lang.Object _source,"protected , final "
com.fasterxml.jackson.core.json.DupDetector._firstName,Field,No Comment,protected String _firstName;,java.lang.String _firstName,protected 
com.fasterxml.jackson.core.json.DupDetector._secondName,Field,No Comment,protected String _secondName;,java.lang.String _secondName,protected 
com.fasterxml.jackson.core.json.DupDetector._seen,Field,* Lazily constructed set of names already seen within this context.,protected HashSet<String> _seen;,java.util.HashSet _seen,protected 
com.fasterxml.jackson.core.json.JsonParserBase.FEAT_MASK_TRAILING_COMMA,Field,No Comment,"@SuppressWarnings(""deprecation"")\nprotected final static int FEAT_MASK_TRAILING_COMMA = Feature.ALLOW_TRAILING_COMMA.getMask();",int FEAT_MASK_TRAILING_COMMA,"protected , final , static "
com.fasterxml.jackson.core.json.JsonParserBase.FEAT_MASK_LEADING_ZEROS,Field,No Comment,"@SuppressWarnings(""deprecation"")\nprotected final static int FEAT_MASK_LEADING_ZEROS = Feature.ALLOW_NUMERIC_LEADING_ZEROS.getMask();",int FEAT_MASK_LEADING_ZEROS,"protected , final , static "
com.fasterxml.jackson.core.json.JsonParserBase.FEAT_MASK_NON_NUM_NUMBERS,Field,No Comment,"@SuppressWarnings(""deprecation"")\nprotected final static int FEAT_MASK_NON_NUM_NUMBERS = Feature.ALLOW_NON_NUMERIC_NUMBERS.getMask();",int FEAT_MASK_NON_NUM_NUMBERS,"protected , final , static "
com.fasterxml.jackson.core.json.JsonParserBase.FEAT_MASK_ALLOW_MISSING,Field,No Comment,"@SuppressWarnings(""deprecation"")\nprotected final static int FEAT_MASK_ALLOW_MISSING = Feature.ALLOW_MISSING_VALUES.getMask();",int FEAT_MASK_ALLOW_MISSING,"protected , final , static "
com.fasterxml.jackson.core.json.JsonParserBase.FEAT_MASK_ALLOW_SINGLE_QUOTES,Field,No Comment,protected final static int FEAT_MASK_ALLOW_SINGLE_QUOTES = Feature.ALLOW_SINGLE_QUOTES.getMask();,int FEAT_MASK_ALLOW_SINGLE_QUOTES,"protected , final , static "
com.fasterxml.jackson.core.json.JsonParserBase.FEAT_MASK_ALLOW_UNQUOTED_NAMES,Field,No Comment,protected final static int FEAT_MASK_ALLOW_UNQUOTED_NAMES = Feature.ALLOW_UNQUOTED_FIELD_NAMES.getMask();,int FEAT_MASK_ALLOW_UNQUOTED_NAMES,"protected , final , static "
com.fasterxml.jackson.core.json.JsonParserBase.FEAT_MASK_ALLOW_JAVA_COMMENTS,Field,No Comment,protected final static int FEAT_MASK_ALLOW_JAVA_COMMENTS = Feature.ALLOW_COMMENTS.getMask();,int FEAT_MASK_ALLOW_JAVA_COMMENTS,"protected , final , static "
com.fasterxml.jackson.core.json.JsonParserBase.FEAT_MASK_ALLOW_YAML_COMMENTS,Field,No Comment,protected final static int FEAT_MASK_ALLOW_YAML_COMMENTS = Feature.ALLOW_YAML_COMMENTS.getMask();,int FEAT_MASK_ALLOW_YAML_COMMENTS,"protected , final , static "
com.fasterxml.jackson.core.json.JsonParserBase.INPUT_CODES_LATIN1,Field,"pre-processing task, to simplify first pass, keep it fast.",protected final static int[] INPUT_CODES_LATIN1 = CharTypes.getInputCodeLatin1();,int[] INPUT_CODES_LATIN1,"protected , final , static "
com.fasterxml.jackson.core.json.JsonParserBase.INPUT_CODES_UTF8,Field,"This is the main input-code lookup table, fetched eagerly",protected final static int[] INPUT_CODES_UTF8 = CharTypes.getInputCodeUtf8();,int[] INPUT_CODES_UTF8,"protected , final , static "
com.fasterxml.jackson.core.json.JsonParserBase._objectCodec,Field,"* Codec used for data binding when (if) requested; typically full\n     * <code>ObjectMapper</code>, but that abstract is not part of core\n     * package.",protected ObjectCodec _objectCodec;,com.fasterxml.jackson.core.ObjectCodec _objectCodec,protected 
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._reader,Field,"* Reader that can be used for reading more content, if one\n     * buffer from input source, but in some cases pre-loaded buffer\n     * is handed to the parser.",protected Reader _reader;,java.io.Reader _reader,protected 
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._inputBuffer,Field,* Current buffer from which data is read; generally data is read into\n     * buffer from input source.,protected char[] _inputBuffer;,char[] _inputBuffer,protected 
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._bufferRecyclable,Field,"* Flag that indicates whether the input buffer is recycable (and\n     * needs to be returned to recycler once we are done) or not.\n     *<p>\n     * If it is not, it also means that parser can NOT modify underlying\n     * buffer.",protected boolean _bufferRecyclable;,boolean _bufferRecyclable,protected 
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._objectCodec,Field,No Comment,protected ObjectCodec _objectCodec;,com.fasterxml.jackson.core.ObjectCodec _objectCodec,protected 
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._symbols,Field,No Comment,protected final CharsToNameCanonicalizer _symbols;,com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _symbols,"protected , final "
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._hashSeed,Field,No Comment,protected final int _hashSeed;,int _hashSeed,"protected , final "
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._tokenIncomplete,Field,"* Flag that indicates that the current token has not yet\n     * been fully processed, and needs to be finished for\n     * some access (or skipped to obtain the next token)",protected boolean _tokenIncomplete;,boolean _tokenIncomplete,protected 
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._nameStartOffset,Field,"* Value of {@link #_inputPtr} at the time when the first character of\n     * name token was read. Used for calculating token location when requested;\n     * combined with {@link #_currInputProcessed}, may be updated appropriately\n     * as needed.\n     *\n     * @since 2.7",protected long _nameStartOffset;,long _nameStartOffset,protected 
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._nameStartRow,Field,* @since 2.7,protected int _nameStartRow;,int _nameStartRow,protected 
com.fasterxml.jackson.core.json.ReaderBasedJsonParser._nameStartCol,Field,* @since 2.7,protected int _nameStartCol;,int _nameStartCol,protected 
com.fasterxml.jackson.core.json.JsonReadContext._parent,Field,* Parent context for this context; null for root context.,protected final JsonReadContext _parent;,com.fasterxml.jackson.core.json.JsonReadContext _parent,"protected , final "
com.fasterxml.jackson.core.json.JsonReadContext._dups,Field,No Comment,protected DupDetector _dups;,com.fasterxml.jackson.core.json.DupDetector _dups,protected 
com.fasterxml.jackson.core.json.JsonReadContext._child,Field,No Comment,protected JsonReadContext _child;,com.fasterxml.jackson.core.json.JsonReadContext _child,protected 
com.fasterxml.jackson.core.json.JsonReadContext._currentName,Field,No Comment,protected String _currentName;,java.lang.String _currentName,protected 
com.fasterxml.jackson.core.json.JsonReadContext._currentValue,Field,* @since 2.5,protected Object _currentValue;,java.lang.Object _currentValue,protected 
com.fasterxml.jackson.core.json.JsonReadContext._lineNr,Field,No Comment,protected int _lineNr;,int _lineNr,protected 
com.fasterxml.jackson.core.json.JsonReadContext._columnNr,Field,No Comment,protected int _columnNr;,int _columnNr,protected 
com.fasterxml.jackson.core.type.WritableTypeId.forValue,Field,"* Java object for which type id is being written. Not needed by default handling,\n     * but may be useful for customized format handling.",public Object forValue;,java.lang.Object forValue,public 
com.fasterxml.jackson.core.type.WritableTypeId.forValueType,Field,"* (optional) Super-type of {@link #forValue} to use for type id generation (if no\n     * explicit id passed): used instead of actual class of {@link #forValue} in cases\n     * where we do not want to use the ""real"" type but something more generic, usually\n     * to work around specific problem with implementation type, or its deserializer.",public Class<?> forValueType;,java.lang.Class forValueType,public 
com.fasterxml.jackson.core.type.WritableTypeId.id,Field,* Actual type id to use: usually {link java.lang.String}.,public Object id;,java.lang.Object id,public 
com.fasterxml.jackson.core.type.WritableTypeId.asProperty,Field,"* If type id is to be embedded as a regular property, name of the property;\n     * otherwise `null`.\n     *<p>\n     * NOTE: if ""wrap-as-Object"" is used, this does NOT contain property name to\n     * use but `null`.",public String asProperty;,java.lang.String asProperty,public 
com.fasterxml.jackson.core.type.WritableTypeId.include,Field,"* Property used to indicate style of inclusion for this type id, in cases where\n     * no native type id may be used (either because format has none, like JSON; or\n     * because use of native type ids is disabled [with YAML]).",public Inclusion include;,com.fasterxml.jackson.core.type.WritableTypeId$Inclusion include,public 
com.fasterxml.jackson.core.type.WritableTypeId.valueShape,Field,"* Information about intended shape of the value being written (that is, {@link #forValue});\n     * in case of structured values, start token of the structure; for scalars, value token.\n     * Main difference is between structured values\n     * ({@link JsonToken#START_ARRAY}, {@link JsonToken#START_OBJECT})\n     * and scalars ({@link JsonToken#VALUE_STRING}): specific scalar type may not be\n     * important for processing.",public JsonToken valueShape;,com.fasterxml.jackson.core.JsonToken valueShape,public 
com.fasterxml.jackson.core.type.WritableTypeId.wrapperWritten,Field,* Flag that can be set to indicate that wrapper structure was written (during\n     * prefix-writing); used to determine if suffix requires matching close markers.,public boolean wrapperWritten;,boolean wrapperWritten,public 
com.fasterxml.jackson.core.type.WritableTypeId.extra,Field,"* Optional additional information that generator may add during ""prefix write"",\n     * to be available on matching ""suffix write"".",public Object extra;,java.lang.Object extra,public 
com.fasterxml.jackson.core.type.TypeReference._type,Field,No Comment,protected final Type _type;,java.lang.reflect.Type _type,"protected , final "
com.fasterxml.jackson.core.Base64Variants.STD_BASE64_ALPHABET,Field,No Comment,"final static String STD_BASE64_ALPHABET = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"";",java.lang.String STD_BASE64_ALPHABET,"final , static "
com.fasterxml.jackson.core.Base64Variants.MIME,Field,"* This variant is what most people would think of ""the standard""\n     * Base64 encoding.\n     *<p>\n     * See <a href=""http://en.wikipedia.org/wiki/Base64"">wikipedia Base64 entry</a> for details.\n     *<p>\n     * Note that although this can be thought of as the standard variant,\n     * it is <b>not</b> the default for Jackson: no-linefeeds alternative\n     * is instead used because of JSON requirement of escaping all linefeeds.\n     *<p>\n     * Writes padding on output; requires padding when reading (may change later with a call to {@link Base64Variant#withWritePadding})",public final static Base64Variant MIME;,com.fasterxml.jackson.core.Base64Variant MIME,"public , final , static "
com.fasterxml.jackson.core.Base64Variants.MIME_NO_LINEFEEDS,Field,"* Slightly non-standard modification of {@link #MIME} which does not\n     * use linefeeds (max line length set to infinite). Useful when linefeeds\n     * wouldn't work well (possibly in attributes), or for minor space savings\n     * (save 1 linefeed per 76 data chars, ie. ~1.4% savings).\n     *<p>\n     * Writes padding on output; requires padding when reading (may change later with a call to {@link Base64Variant#withWritePadding})",public final static Base64Variant MIME_NO_LINEFEEDS;,com.fasterxml.jackson.core.Base64Variant MIME_NO_LINEFEEDS,"public , final , static "
com.fasterxml.jackson.core.Base64Variants.PEM,Field,"* This variant is the one that predates {@link #MIME}: it is otherwise\n     * identical, except that it mandates shorter line length.\n     *<p>\n     * Writes padding on output; requires padding when reading (may change later with a call to {@link Base64Variant#withWritePadding})","public final static Base64Variant PEM = new Base64Variant(MIME, ""PEM"", true, '=', 64);",com.fasterxml.jackson.core.Base64Variant PEM,"public , final , static "
com.fasterxml.jackson.core.Base64Variants.MODIFIED_FOR_URL,Field,"* This non-standard variant is usually used when encoded data needs to be\n     * passed via URLs (such as part of GET request). It differs from the\n     * base {@link #MIME} variant in multiple ways.\n     * First, no padding is used: this also means that it generally cannot\n     * be written in multiple separate but adjacent chunks (which would not\n     * be the usual use case in any case). Also, no linefeeds are used (max\n     * line length set to infinite). And finally, two characters (plus and\n     * slash) that would need quoting in URLs are replaced with more\n     * optimal alternatives (hyphen and underscore, respectively).\n     *<p>\n     * Does not write padding on output; does not accept padding when reading (may change later with a call to {@link Base64Variant#withWritePadding})",public final static Base64Variant MODIFIED_FOR_URL;,com.fasterxml.jackson.core.Base64Variant MODIFIED_FOR_URL,"public , final , static "
com.fasterxml.jackson.core.format.DataFormatMatcher._originalStream,Field,No Comment,protected final InputStream _originalStream;,java.io.InputStream _originalStream,"protected , final "
com.fasterxml.jackson.core.format.DataFormatMatcher._bufferedData,Field,* Content read during format matching process,protected final byte[] _bufferedData;,byte[] _bufferedData,"protected , final "
com.fasterxml.jackson.core.format.DataFormatMatcher._bufferedStart,Field,* Pointer to the first byte in buffer available for reading,protected final int _bufferedStart;,int _bufferedStart,"protected , final "
com.fasterxml.jackson.core.format.DataFormatMatcher._bufferedLength,Field,* Number of bytes available in buffer.,protected final int _bufferedLength;,int _bufferedLength,"protected , final "
com.fasterxml.jackson.core.format.DataFormatMatcher._match,Field,* Factory that produced sufficient match (if any),protected final JsonFactory _match;,com.fasterxml.jackson.core.JsonFactory _match,"protected , final "
com.fasterxml.jackson.core.format.DataFormatMatcher._matchStrength,Field,* Strength of match with {@link #_match},protected final MatchStrength _matchStrength;,com.fasterxml.jackson.core.format.MatchStrength _matchStrength,"protected , final "
com.fasterxml.jackson.core.format.DataFormatDetector.DEFAULT_MAX_INPUT_LOOKAHEAD,Field,"* By default we will look ahead at most 64 bytes; in most cases,\n     * much less (4 bytes or so) is needed, but we will allow bit more\n     * leniency to support data formats that need more complex heuristics.",public final static int DEFAULT_MAX_INPUT_LOOKAHEAD = 64;,int DEFAULT_MAX_INPUT_LOOKAHEAD,"public , final , static "
com.fasterxml.jackson.core.format.DataFormatDetector._detectors,Field,"* Ordered list of factories which both represent data formats to\n     * detect (in precedence order, starting with highest) and are used\n     * for actual detection.",protected final JsonFactory[] _detectors;,com.fasterxml.jackson.core.JsonFactory[] _detectors,"protected , final "
com.fasterxml.jackson.core.format.DataFormatDetector._optimalMatch,Field,"* Strength of match we consider to be good enough to be used\n     * without checking any other formats.\n     * Default value is {@link MatchStrength#SOLID_MATCH},",protected final MatchStrength _optimalMatch;,com.fasterxml.jackson.core.format.MatchStrength _optimalMatch,"protected , final "
com.fasterxml.jackson.core.format.DataFormatDetector._minimalMatch,Field,"* Strength of minimal match we accept as the answer, unless\n     * better matches are found.\n     * Default value is {@link MatchStrength#WEAK_MATCH},",protected final MatchStrength _minimalMatch;,com.fasterxml.jackson.core.format.MatchStrength _minimalMatch,"protected , final "
com.fasterxml.jackson.core.format.DataFormatDetector._maxInputLookahead,Field,* Maximum number of leading bytes of the input that we can read\n     * to determine data format.\n     *<p>\n     * Default value is {@link #DEFAULT_MAX_INPUT_LOOKAHEAD}.,protected final int _maxInputLookahead;,int _maxInputLookahead,"protected , final "
com.fasterxml.jackson.core.format.InputAccessor$Std._in,Field,No Comment,protected final InputStream _in;,java.io.InputStream _in,"protected , final "
com.fasterxml.jackson.core.format.InputAccessor$Std._buffer,Field,No Comment,protected final byte[] _buffer;,byte[] _buffer,"protected , final "
com.fasterxml.jackson.core.format.InputAccessor$Std._bufferedStart,Field,No Comment,protected final int _bufferedStart;,int _bufferedStart,"protected , final "
com.fasterxml.jackson.core.format.InputAccessor$Std._bufferedEnd,Field,* End of valid bytes in the buffer (points to one past last valid),protected int _bufferedEnd;,int _bufferedEnd,protected 
com.fasterxml.jackson.core.format.InputAccessor$Std._ptr,Field,* Pointer to next available buffered byte in {@link #_buffer}.,protected int _ptr;,int _ptr,protected 
com.fasterxml.jackson.core.JsonGenerator.DEFAULT_WRITE_CAPABILITIES,Field,* Default set of {@link StreamWriteCapability}ies that may be used as\n     * basis for format-specific readers (or as bogus instance if non-null\n     * set needs to be passed).\n     *\n     * @since 2.12,protected final static JacksonFeatureSet<StreamWriteCapability> DEFAULT_WRITE_CAPABILITIES = JacksonFeatureSet.fromDefaults(StreamWriteCapability.values());,com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_WRITE_CAPABILITIES,"protected , final , static "
com.fasterxml.jackson.core.JsonGenerator.DEFAULT_TEXTUAL_WRITE_CAPABILITIES,Field,"* Default set of {@link StreamWriteCapability}ies for typical textual formats,\n     * to use either as-is, or as a base with possible differences.\n     *\n     * @since 2.12",protected final static JacksonFeatureSet<StreamWriteCapability> DEFAULT_TEXTUAL_WRITE_CAPABILITIES = DEFAULT_WRITE_CAPABILITIES.with(StreamWriteCapability.CAN_WRITE_FORMATTED_NUMBERS);,com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_TEXTUAL_WRITE_CAPABILITIES,"protected , final , static "
com.fasterxml.jackson.core.JsonGenerator.DEFAULT_BINARY_WRITE_CAPABILITIES,Field,"* Default set of {@link StreamWriteCapability}ies for typical binary formats,\n     * to use either as-is, or as a base with possible differences.\n     *\n     * @since 2.12",protected final static JacksonFeatureSet<StreamWriteCapability> DEFAULT_BINARY_WRITE_CAPABILITIES = DEFAULT_WRITE_CAPABILITIES.with(StreamWriteCapability.CAN_WRITE_BINARY_NATIVELY);,com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_BINARY_WRITE_CAPABILITIES,"protected , final , static "
com.fasterxml.jackson.core.JsonGenerator._cfgPrettyPrinter,Field,"* Object that handles pretty-printing (usually additional\n     * white space to make results more human-readable) during\n     * output. If null, no pretty-printing is done.",protected PrettyPrinter _cfgPrettyPrinter;,com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter,protected 
com.fasterxml.jackson.core.exc.StreamConstraintsException.serialVersionUID,Field,No Comment,private final static long serialVersionUID = 2L;,long serialVersionUID,"private , final , static "
com.fasterxml.jackson.core.exc.StreamWriteException.serialVersionUID,Field,No Comment,private final static long serialVersionUID = 2L;,long serialVersionUID,"private , final , static "
com.fasterxml.jackson.core.exc.StreamWriteException._processor,Field,No Comment,protected transient JsonGenerator _processor;,com.fasterxml.jackson.core.JsonGenerator _processor,"protected , transient "
com.fasterxml.jackson.core.exc.StreamReadException.serialVersionUID,Field,No Comment,final static long serialVersionUID = 2L;,long serialVersionUID,"final , static "
com.fasterxml.jackson.core.exc.StreamReadException._processor,Field,No Comment,protected transient JsonParser _processor;,com.fasterxml.jackson.core.JsonParser _processor,"protected , transient "
com.fasterxml.jackson.core.exc.StreamReadException._requestPayload,Field,* Optional payload that can be assigned to pass along for error reporting\n     * or handling purposes. Core streaming parser implementations DO NOT\n     * initialize this; it is up to using applications and frameworks to\n     * populate it.,protected RequestPayload _requestPayload;,com.fasterxml.jackson.core.util.RequestPayload _requestPayload,protected 
com.fasterxml.jackson.core.exc.InputCoercionException.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.exc.InputCoercionException._inputType,Field,* Input token that represents input value that failed to coerce.,protected final JsonToken _inputType;,com.fasterxml.jackson.core.JsonToken _inputType,"protected , final "
com.fasterxml.jackson.core.exc.InputCoercionException._targetType,Field,* Target type that input value failed to coerce to.,protected final Class<?> _targetType;,java.lang.Class _targetType,"protected , final "
com.fasterxml.jackson.core.JsonGenerationException.serialVersionUID,Field,eclipse complains otherwise,private final static long serialVersionUID = 123;,long serialVersionUID,"private , final , static "
com.fasterxml.jackson.core.JsonParser.MIN_BYTE_I,Field,No Comment,private final static int MIN_BYTE_I = Byte.MIN_VALUE;,int MIN_BYTE_I,"private , final , static "
com.fasterxml.jackson.core.JsonParser.MAX_BYTE_I,Field,"as per [JACKSON-804], allow range up to and including 255",private final static int MAX_BYTE_I = 255;,int MAX_BYTE_I,"private , final , static "
com.fasterxml.jackson.core.JsonParser.MIN_SHORT_I,Field,No Comment,private final static int MIN_SHORT_I = Short.MIN_VALUE;,int MIN_SHORT_I,"private , final , static "
com.fasterxml.jackson.core.JsonParser.MAX_SHORT_I,Field,No Comment,private final static int MAX_SHORT_I = Short.MAX_VALUE;,int MAX_SHORT_I,"private , final , static "
com.fasterxml.jackson.core.JsonParser.DEFAULT_READ_CAPABILITIES,Field,* Default set of {@link StreamReadCapability}ies that may be used as\n     * basis for format-specific readers (or as bogus instance if non-null\n     * set needs to be passed).\n     *\n     * @since 2.12,protected final static JacksonFeatureSet<StreamReadCapability> DEFAULT_READ_CAPABILITIES = JacksonFeatureSet.fromDefaults(StreamReadCapability.values());,com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_READ_CAPABILITIES,"protected , final , static "
com.fasterxml.jackson.core.JsonParser._features,Field,* Bit flag composed of bits that indicate which\n     * {@link com.fasterxml.jackson.core.JsonParser.Feature}s\n     * are enabled.,protected int _features;,int _features,protected 
com.fasterxml.jackson.core.JsonParser._requestPayload,Field,* Optional container that holds the request payload which will be displayed on JSON parsing error.\n     *\n     * @since 2.8,protected transient RequestPayload _requestPayload;,com.fasterxml.jackson.core.util.RequestPayload _requestPayload,"protected , transient "
com.fasterxml.jackson.core.Base64Variant.INT_SPACE,Field,No Comment,private final static int INT_SPACE = 0x20;,int INT_SPACE,"private , final , static "
com.fasterxml.jackson.core.Base64Variant.serialVersionUID,Field,We'll only serialize name,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.Base64Variant.PADDING_CHAR_NONE,Field,"* Placeholder used by ""no padding"" variant, to be used when a character\n     * value is needed.",protected final static char PADDING_CHAR_NONE = '\0';,char PADDING_CHAR_NONE,"protected , final , static "
com.fasterxml.jackson.core.Base64Variant.BASE64_VALUE_INVALID,Field,"* Marker used to denote ascii characters that do not correspond\n     * to a 6-bit value (in this variant), and is not used as a padding\n     * character.",public final static int BASE64_VALUE_INVALID = -1;,int BASE64_VALUE_INVALID,"public , final , static "
com.fasterxml.jackson.core.Base64Variant.BASE64_VALUE_PADDING,Field,* Marker used to denote ascii character (in decoding table) that\n     * is the padding character using this variant (if any).,public final static int BASE64_VALUE_PADDING = -2;,int BASE64_VALUE_PADDING,"public , final , static "
com.fasterxml.jackson.core.Base64Variant._asciiToBase64,Field,* Decoding table used for base 64 decoding.,private final transient int[] _asciiToBase64 = new int[128];,int[] _asciiToBase64,"private , final , transient "
com.fasterxml.jackson.core.Base64Variant._base64ToAsciiC,Field,* Encoding table used for base 64 decoding when output is done\n     * as characters.,private final transient char[] _base64ToAsciiC = new char[64];,char[] _base64ToAsciiC,"private , final , transient "
com.fasterxml.jackson.core.Base64Variant._base64ToAsciiB,Field,* Alternative encoding table used for base 64 decoding when output is done\n     * as ascii bytes.,private final transient byte[] _base64ToAsciiB = new byte[64];,byte[] _base64ToAsciiB,"private , final , transient "
com.fasterxml.jackson.core.Base64Variant._name,Field,"* Symbolic name of variant; used for diagnostics/debugging.\n     *<p>\n     * Note that this is the only non-transient field; used when reading\n     * back from serialized state.\n     *<p>\n     * Also: must not be private, accessed from `BaseVariants`",final String _name;,java.lang.String _name,final 
com.fasterxml.jackson.core.Base64Variant._paddingChar,Field,"* Character used for padding, if any ({@link #PADDING_CHAR_NONE} if not).",private final char _paddingChar;,char _paddingChar,"private , final "
com.fasterxml.jackson.core.Base64Variant._maxLineLength,Field,"* Maximum number of encoded base64 characters to output during encoding\n     * before adding a linefeed, if line length is to be limited\n     * ({@link java.lang.Integer#MAX_VALUE} if not limited).\n     *<p>\n     * Note: for some output modes (when writing attributes) linefeeds may\n     * need to be avoided, and this value ignored.",private final int _maxLineLength;,int _maxLineLength,"private , final "
com.fasterxml.jackson.core.Base64Variant._writePadding,Field,* Whether this variant uses padding when writing out content or not.\n     *\n     * @since 2.12,private final boolean _writePadding;,boolean _writePadding,"private , final "
com.fasterxml.jackson.core.Base64Variant._paddingReadBehaviour,Field,* Whether padding characters should be required or not while decoding\n     *\n     * @since 2.12,private final PaddingReadBehaviour _paddingReadBehaviour;,com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour _paddingReadBehaviour,"private , final "
com.fasterxml.jackson.core.filter.JsonPointerBasedFilter._pathToMatch,Field,No Comment,protected final JsonPointer _pathToMatch;,com.fasterxml.jackson.core.JsonPointer _pathToMatch,"protected , final "
com.fasterxml.jackson.core.filter.JsonPointerBasedFilter._includeAllElements,Field,* If true include all array elements by ignoring the array index match and advancing\n     * the JsonPointer to the next level\n     *\n     * @since 2.16,protected final boolean _includeAllElements;,boolean _includeAllElements,"protected , final "
com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL,Field,"* Marker value that should be used to indicate inclusion of a structured\n     * value (sub-tree representing Object or Array), or value of a named\n     * property (regardless of type).\n     * Note that if this instance is returned, it will used as a marker, and\n     * no actual callbacks need to be made. For this reason, it is more efficient\n     * to return this instance if the whole sub-tree is to be included, instead\n     * of implementing similar filter functionality explicitly.",public final static TokenFilter INCLUDE_ALL = new TokenFilter();,com.fasterxml.jackson.core.filter.TokenFilter INCLUDE_ALL,"public , final , static "
com.fasterxml.jackson.core.filter.FilteringParserDelegate.rootFilter,Field,* Object consulted to determine whether to write parts of content generator\n     * is asked to write or not.,protected TokenFilter rootFilter;,com.fasterxml.jackson.core.filter.TokenFilter rootFilter,protected 
com.fasterxml.jackson.core.filter.FilteringParserDelegate._allowMultipleMatches,Field,"* Flag that determines whether filtering will continue after the first\n     * match is indicated or not: if `false`, output is based on just the first\n     * full match (returning {@link TokenFilter#INCLUDE_ALL}) and no more\n     * checks are made; if `true` then filtering will be applied as necessary\n     * until end of content.",protected boolean _allowMultipleMatches;,boolean _allowMultipleMatches,protected 
com.fasterxml.jackson.core.filter.FilteringParserDelegate._inclusion,Field,"* Flag that determines whether path leading up to included content should\n     * also be automatically included or not. If `false`, no path inclusion is\n     * done and only explicitly included entries are output; if `true` then\n     * path from main level down to match is also included as necessary.",protected TokenFilter.Inclusion _inclusion;,com.fasterxml.jackson.core.filter.TokenFilter$Inclusion _inclusion,protected 
com.fasterxml.jackson.core.filter.FilteringParserDelegate._currToken,Field,"* Last token retrieved via {@link #nextToken}, if any.\n     * Null before the first call to <code>nextToken()</code>,\n     * as well as if token has been explicitly cleared",protected JsonToken _currToken;,com.fasterxml.jackson.core.JsonToken _currToken,protected 
com.fasterxml.jackson.core.filter.FilteringParserDelegate._lastClearedToken,Field,"* Last cleared token, if any: that is, value that was in\n     * effect when {@link #clearCurrentToken} was called.",protected JsonToken _lastClearedToken;,com.fasterxml.jackson.core.JsonToken _lastClearedToken,protected 
com.fasterxml.jackson.core.filter.FilteringParserDelegate._headContext,Field,"* During traversal this is the actual ""open"" parse tree, which sometimes\n     * is the same as {@link #_exposedContext}, and at other times is ahead\n     * of it. Note that this context is never null.",protected TokenFilterContext _headContext;,com.fasterxml.jackson.core.filter.TokenFilterContext _headContext,protected 
com.fasterxml.jackson.core.filter.FilteringParserDelegate._exposedContext,Field,"* In cases where {@link #_headContext} is ""ahead"" of context exposed to\n     * caller, this context points to what is currently exposed to caller.\n     * When the two are in sync, this context reference will be <code>null</code>.",protected TokenFilterContext _exposedContext;,com.fasterxml.jackson.core.filter.TokenFilterContext _exposedContext,protected 
com.fasterxml.jackson.core.filter.FilteringParserDelegate._itemFilter,Field,"* State that applies to the item within container, used where applicable.\n     * Specifically used to pass inclusion state between property name and\n     * property, and also used for array elements.",protected TokenFilter _itemFilter;,com.fasterxml.jackson.core.filter.TokenFilter _itemFilter,protected 
com.fasterxml.jackson.core.filter.FilteringParserDelegate._matchCount,Field,* Number of tokens for which {@link TokenFilter#INCLUDE_ALL}\n     * has been returned.,protected int _matchCount;,int _matchCount,protected 
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate.rootFilter,Field,* Object consulted to determine whether to write parts of content generator\n     * is asked to write or not.,protected TokenFilter rootFilter;,com.fasterxml.jackson.core.filter.TokenFilter rootFilter,protected 
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._allowMultipleMatches,Field,"* Flag that determines whether filtering will continue after the first\n     * match is indicated or not: if `false`, output is based on just the first\n     * full match (returning {@link TokenFilter#INCLUDE_ALL}) and no more\n     * checks are made; if `true` then filtering will be applied as necessary\n     * until end of content.",protected boolean _allowMultipleMatches;,boolean _allowMultipleMatches,protected 
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._inclusion,Field,"* Flag that determines whether path leading up to included content should\n     * also be automatically included or not. If `false`, no path inclusion is\n     * done and only explicitly included entries are output; if `true` then\n     * path from main level down to match is also included as necessary.",protected TokenFilter.Inclusion _inclusion;,com.fasterxml.jackson.core.filter.TokenFilter$Inclusion _inclusion,protected 
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._filterContext,Field,* Although delegate has its own output context it is not sufficient since we actually\n     * have to keep track of excluded (filtered out) structures as well as ones delegate\n     * actually outputs.,protected TokenFilterContext _filterContext;,com.fasterxml.jackson.core.filter.TokenFilterContext _filterContext,protected 
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._itemFilter,Field,"* State that applies to the item within container, used where applicable.\n     * Specifically used to pass inclusion state between property name and\n     * property, and also used for array elements.",protected TokenFilter _itemFilter;,com.fasterxml.jackson.core.filter.TokenFilter _itemFilter,protected 
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate._matchCount,Field,* Number of tokens for which {@link TokenFilter#INCLUDE_ALL}\n     * has been returned,protected int _matchCount;,int _matchCount,protected 
com.fasterxml.jackson.core.filter.TokenFilterContext._parent,Field,* Parent context for this context; null for root context.,protected final TokenFilterContext _parent;,com.fasterxml.jackson.core.filter.TokenFilterContext _parent,"protected , final "
com.fasterxml.jackson.core.filter.TokenFilterContext._child,Field,No Comment,protected TokenFilterContext _child;,com.fasterxml.jackson.core.filter.TokenFilterContext _child,protected 
com.fasterxml.jackson.core.filter.TokenFilterContext._currentName,Field,* Name of the field of which value is to be parsed; only\n     * used for OBJECT contexts,protected String _currentName;,java.lang.String _currentName,protected 
com.fasterxml.jackson.core.filter.TokenFilterContext._filter,Field,"* Filter to use for items in this state (for properties of Objects,\n     * elements of Arrays, and root-level values of root context)",protected TokenFilter _filter;,com.fasterxml.jackson.core.filter.TokenFilter _filter,protected 
com.fasterxml.jackson.core.filter.TokenFilterContext._startHandled,Field,"* Flag that indicates that start token has been read/written,\n     * so that matching close token needs to be read/written as well\n     * when context is getting closed.",protected boolean _startHandled;,boolean _startHandled,protected 
com.fasterxml.jackson.core.filter.TokenFilterContext._needToHandleName,Field,"* Flag that indicates that the current name of this context\n     * still needs to be read/written, if path from root down to\n     * included leaf is to be exposed.",protected boolean _needToHandleName;,boolean _needToHandleName,protected 
com.fasterxml.jackson.core.JsonParseException.serialVersionUID,Field,2.7,private static final long serialVersionUID = 2L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.TokenStreamFactory.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 2;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.Version.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.Version.UNKNOWN_VERSION,Field,No Comment,"private final static Version UNKNOWN_VERSION = new Version(0, 0, 0, null, null, null);",com.fasterxml.jackson.core.Version UNKNOWN_VERSION,"private , final , static "
com.fasterxml.jackson.core.Version._majorVersion,Field,No Comment,protected final int _majorVersion;,int _majorVersion,"protected , final "
com.fasterxml.jackson.core.Version._minorVersion,Field,No Comment,protected final int _minorVersion;,int _minorVersion,"protected , final "
com.fasterxml.jackson.core.Version._patchLevel,Field,No Comment,protected final int _patchLevel;,int _patchLevel,"protected , final "
com.fasterxml.jackson.core.Version._groupId,Field,No Comment,protected final String _groupId;,java.lang.String _groupId,"protected , final "
com.fasterxml.jackson.core.Version._artifactId,Field,No Comment,protected final String _artifactId;,java.lang.String _artifactId,"protected , final "
com.fasterxml.jackson.core.Version._snapshotInfo,Field,* Additional information for snapshot versions; null for non-snapshot\n     * (release) versions.,protected final String _snapshotInfo;,java.lang.String _snapshotInfo,"protected , final "
com.fasterxml.jackson.core.base.GeneratorBase.SURR1_FIRST,Field,No Comment,public final static int SURR1_FIRST = 0xD800;,int SURR1_FIRST,"public , final , static "
com.fasterxml.jackson.core.base.GeneratorBase.SURR1_LAST,Field,No Comment,public final static int SURR1_LAST = 0xDBFF;,int SURR1_LAST,"public , final , static "
com.fasterxml.jackson.core.base.GeneratorBase.SURR2_FIRST,Field,No Comment,public final static int SURR2_FIRST = 0xDC00;,int SURR2_FIRST,"public , final , static "
com.fasterxml.jackson.core.base.GeneratorBase.SURR2_LAST,Field,No Comment,public final static int SURR2_LAST = 0xDFFF;,int SURR2_LAST,"public , final , static "
com.fasterxml.jackson.core.base.GeneratorBase.DERIVED_FEATURES_MASK,Field,* Set of feature masks related to features that need updates of other\n     * local configuration or state.\n     *\n     * @since 2.5,"@SuppressWarnings(""deprecation"")\nprotected final static int DERIVED_FEATURES_MASK = Feature.WRITE_NUMBERS_AS_STRINGS.getMask() | Feature.ESCAPE_NON_ASCII.getMask() | Feature.STRICT_DUPLICATE_DETECTION.getMask();",int DERIVED_FEATURES_MASK,"protected , final , static "
com.fasterxml.jackson.core.base.GeneratorBase.WRITE_BINARY,Field,No Comment,"protected final static String WRITE_BINARY = ""write a binary value"";",java.lang.String WRITE_BINARY,"protected , final , static "
com.fasterxml.jackson.core.base.GeneratorBase.WRITE_BOOLEAN,Field,No Comment,"protected final static String WRITE_BOOLEAN = ""write a boolean value"";",java.lang.String WRITE_BOOLEAN,"protected , final , static "
com.fasterxml.jackson.core.base.GeneratorBase.WRITE_NULL,Field,No Comment,"protected final static String WRITE_NULL = ""write a null"";",java.lang.String WRITE_NULL,"protected , final , static "
com.fasterxml.jackson.core.base.GeneratorBase.WRITE_NUMBER,Field,No Comment,"protected final static String WRITE_NUMBER = ""write a number"";",java.lang.String WRITE_NUMBER,"protected , final , static "
com.fasterxml.jackson.core.base.GeneratorBase.WRITE_RAW,Field,No Comment,"protected final static String WRITE_RAW = ""write a raw (unencoded) value"";",java.lang.String WRITE_RAW,"protected , final , static "
com.fasterxml.jackson.core.base.GeneratorBase.WRITE_STRING,Field,No Comment,"protected final static String WRITE_STRING = ""write a string"";",java.lang.String WRITE_STRING,"protected , final , static "
com.fasterxml.jackson.core.base.GeneratorBase.MAX_BIG_DECIMAL_SCALE,Field,"* This value is the limit of scale allowed for serializing {@link BigDecimal}\n     * in ""plain"" (non-engineering) notation; intent is to prevent asymmetric\n     * attack whereupon simple eng-notation with big scale is used to generate\n     * huge ""plain"" serialization. See [core#315] for details.\n     *\n     * @since 2.7.7",protected final static int MAX_BIG_DECIMAL_SCALE = 9999;,int MAX_BIG_DECIMAL_SCALE,"protected , final , static "
com.fasterxml.jackson.core.base.GeneratorBase._objectCodec,Field,No Comment,protected ObjectCodec _objectCodec;,com.fasterxml.jackson.core.ObjectCodec _objectCodec,protected 
com.fasterxml.jackson.core.base.GeneratorBase._features,Field,* Bit flag composed of bits that indicate which\n     * {@link com.fasterxml.jackson.core.JsonGenerator.Feature}s\n     * are enabled.,protected int _features;,int _features,protected 
com.fasterxml.jackson.core.base.GeneratorBase._ioContext,Field,since 2.16,protected final IOContext _ioContext;,com.fasterxml.jackson.core.io.IOContext _ioContext,"protected , final "
com.fasterxml.jackson.core.base.GeneratorBase._cfgNumbersAsStrings,Field,* Flag set to indicate that implicit conversion from number\n     * to JSON String is needed (as per\n     * {@link com.fasterxml.jackson.core.json.JsonWriteFeature#WRITE_NUMBERS_AS_STRINGS}).,protected boolean _cfgNumbersAsStrings;,boolean _cfgNumbersAsStrings,protected 
com.fasterxml.jackson.core.base.GeneratorBase._writeContext,Field,* Object that keeps track of the current contextual state\n     * of the generator.,protected JsonWriteContext _writeContext;,com.fasterxml.jackson.core.json.JsonWriteContext _writeContext,protected 
com.fasterxml.jackson.core.base.GeneratorBase._closed,Field,* Flag that indicates whether generator is closed or not. Gets\n     * set when it is closed by an explicit call\n     * ({@link #close}).,protected boolean _closed;,boolean _closed,protected 
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_TAB,Field,Control chars:,protected final static int INT_TAB = '\t';,int INT_TAB,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_LF,Field,No Comment,protected final static int INT_LF = '\n';,int INT_LF,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_CR,Field,No Comment,protected final static int INT_CR = '\r';,int INT_CR,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SPACE,Field,No Comment,protected final static int INT_SPACE = 0x0020;,int INT_SPACE,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_LBRACKET,Field,Markup,protected final static int INT_LBRACKET = '[';,int INT_LBRACKET,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_RBRACKET,Field,No Comment,protected final static int INT_RBRACKET = ']';,int INT_RBRACKET,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_LCURLY,Field,No Comment,protected final static int INT_LCURLY = '{';,int INT_LCURLY,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_RCURLY,Field,No Comment,protected final static int INT_RCURLY = '}';,int INT_RCURLY,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_QUOTE,Field,No Comment,"protected final static int INT_QUOTE = '""';",int INT_QUOTE,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_APOS,Field,No Comment,protected final static int INT_APOS = '\'';,int INT_APOS,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_BACKSLASH,Field,No Comment,protected final static int INT_BACKSLASH = '\\';,int INT_BACKSLASH,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_SLASH,Field,No Comment,protected final static int INT_SLASH = '/';,int INT_SLASH,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_ASTERISK,Field,No Comment,protected final static int INT_ASTERISK = '*';,int INT_ASTERISK,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_COLON,Field,No Comment,protected final static int INT_COLON = ':';,int INT_COLON,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_COMMA,Field,No Comment,"protected final static int INT_COMMA = ',';",int INT_COMMA,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_HASH,Field,No Comment,protected final static int INT_HASH = '#';,int INT_HASH,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_0,Field,Number chars,protected final static int INT_0 = '0';,int INT_0,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_9,Field,No Comment,protected final static int INT_9 = '9';,int INT_9,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_MINUS,Field,No Comment,protected final static int INT_MINUS = '-';,int INT_MINUS,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_PLUS,Field,No Comment,protected final static int INT_PLUS = '+';,int INT_PLUS,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_PERIOD,Field,No Comment,protected final static int INT_PERIOD = '.';,int INT_PERIOD,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_e,Field,No Comment,protected final static int INT_e = 'e';,int INT_e,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.INT_E,Field,No Comment,protected final static int INT_E = 'E';,int INT_E,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.CHAR_NULL,Field,No Comment,protected final static char CHAR_NULL = '\0';,char CHAR_NULL,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.NO_BYTES,Field,* @since 2.9,protected final static byte[] NO_BYTES = new byte[0];,byte[] NO_BYTES,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.NO_INTS,Field,* @since 2.9,protected final static int[] NO_INTS = new int[0];,int[] NO_INTS,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.NR_UNKNOWN,Field,No Comment,protected final static int NR_UNKNOWN = 0;,int NR_UNKNOWN,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.NR_INT,Field,No Comment,protected final static int NR_INT = 0x0001;,int NR_INT,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.NR_LONG,Field,No Comment,protected final static int NR_LONG = 0x0002;,int NR_LONG,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.NR_BIGINT,Field,No Comment,protected final static int NR_BIGINT = 0x0004;,int NR_BIGINT,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.NR_DOUBLE,Field,No Comment,protected final static int NR_DOUBLE = 0x008;,int NR_DOUBLE,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.NR_BIGDECIMAL,Field,No Comment,protected final static int NR_BIGDECIMAL = 0x0010;,int NR_BIGDECIMAL,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.NR_FLOAT,Field,* NOTE! Not used by JSON implementation but used by many of binary codecs\n     *\n     * @since 2.9,protected final static int NR_FLOAT = 0x020;,int NR_FLOAT,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.BI_MIN_INT,Field,No Comment,protected final static BigInteger BI_MIN_INT = BigInteger.valueOf(Integer.MIN_VALUE);,java.math.BigInteger BI_MIN_INT,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.BI_MAX_INT,Field,No Comment,protected final static BigInteger BI_MAX_INT = BigInteger.valueOf(Integer.MAX_VALUE);,java.math.BigInteger BI_MAX_INT,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.BI_MIN_LONG,Field,No Comment,protected final static BigInteger BI_MIN_LONG = BigInteger.valueOf(Long.MIN_VALUE);,java.math.BigInteger BI_MIN_LONG,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.BI_MAX_LONG,Field,No Comment,protected final static BigInteger BI_MAX_LONG = BigInteger.valueOf(Long.MAX_VALUE);,java.math.BigInteger BI_MAX_LONG,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.BD_MIN_LONG,Field,No Comment,protected final static BigDecimal BD_MIN_LONG = new BigDecimal(BI_MIN_LONG);,java.math.BigDecimal BD_MIN_LONG,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.BD_MAX_LONG,Field,No Comment,protected final static BigDecimal BD_MAX_LONG = new BigDecimal(BI_MAX_LONG);,java.math.BigDecimal BD_MAX_LONG,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.BD_MIN_INT,Field,No Comment,protected final static BigDecimal BD_MIN_INT = new BigDecimal(BI_MIN_INT);,java.math.BigDecimal BD_MIN_INT,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.BD_MAX_INT,Field,No Comment,protected final static BigDecimal BD_MAX_INT = new BigDecimal(BI_MAX_INT);,java.math.BigDecimal BD_MAX_INT,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.MIN_INT_L,Field,No Comment,protected final static long MIN_INT_L = Integer.MIN_VALUE;,long MIN_INT_L,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.MAX_INT_L,Field,No Comment,protected final static long MAX_INT_L = Integer.MAX_VALUE;,long MAX_INT_L,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.MIN_LONG_D,Field,No Comment,protected final static double MIN_LONG_D = Long.MIN_VALUE;,double MIN_LONG_D,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.MAX_LONG_D,Field,No Comment,protected final static double MAX_LONG_D = Long.MAX_VALUE;,double MAX_LONG_D,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.MIN_INT_D,Field,No Comment,protected final static double MIN_INT_D = Integer.MIN_VALUE;,double MIN_INT_D,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.MAX_INT_D,Field,No Comment,protected final static double MAX_INT_D = Integer.MAX_VALUE;,double MAX_INT_D,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase.MAX_ERROR_TOKEN_LENGTH,Field,* Maximum number of characters to include in token reported\n     * as part of error messages.\n     *\n     * @since 2.9\n     * @deprecated Since 2.16. {@link ErrorReportConfiguration#getMaxErrorTokenLength()} will be used instead.,@Deprecated\nprotected final static int MAX_ERROR_TOKEN_LENGTH = 256;,int MAX_ERROR_TOKEN_LENGTH,"protected , final , static "
com.fasterxml.jackson.core.base.ParserMinimalBase._streamReadConstraints,Field,* @since 2.18 (was higher up in {@code ParserBase} before),protected final StreamReadConstraints _streamReadConstraints;,com.fasterxml.jackson.core.StreamReadConstraints _streamReadConstraints,"protected , final "
com.fasterxml.jackson.core.base.ParserMinimalBase._currToken,Field,"* Last token retrieved via {@link #nextToken}, if any.\n     * Null before the first call to <code>nextToken()</code>,\n     * as well as if token has been explicitly cleared",protected JsonToken _currToken;,com.fasterxml.jackson.core.JsonToken _currToken,protected 
com.fasterxml.jackson.core.base.ParserMinimalBase._tokenCount,Field,"* Current count of tokens, if tracked (see {@link #_trackMaxTokenCount})\n     *\n     * @since 2.18",protected long _tokenCount;,long _tokenCount,protected 
com.fasterxml.jackson.core.base.ParserMinimalBase._trackMaxTokenCount,Field,* Whether or not to track the token count due a {@link StreamReadConstraints} maxTokenCount > 0.\n     *\n     * @since 2.18,protected final boolean _trackMaxTokenCount;,boolean _trackMaxTokenCount,"protected , final "
com.fasterxml.jackson.core.base.ParserMinimalBase._lastClearedToken,Field,"* Last cleared token, if any: that is, value that was in\n     * effect when {@link #clearCurrentToken} was called.",protected JsonToken _lastClearedToken;,com.fasterxml.jackson.core.JsonToken _lastClearedToken,protected 
com.fasterxml.jackson.core.base.ParserBase.JSON_READ_CAPABILITIES,Field,@since 2.12,protected final static JacksonFeatureSet<StreamReadCapability> JSON_READ_CAPABILITIES = DEFAULT_READ_CAPABILITIES;,com.fasterxml.jackson.core.util.JacksonFeatureSet JSON_READ_CAPABILITIES,"protected , final , static "
com.fasterxml.jackson.core.base.ParserBase._ioContext,Field,* I/O context for this reader. It handles buffer allocation\n     * for the reader.,protected final IOContext _ioContext;,com.fasterxml.jackson.core.io.IOContext _ioContext,"protected , final "
com.fasterxml.jackson.core.base.ParserBase._closed,Field,* Flag that indicates whether parser is closed or not. Gets\n     * set when parser is either closed by explicit call\n     * ({@link #close}) or when end-of-input is reached.,protected boolean _closed;,boolean _closed,protected 
com.fasterxml.jackson.core.base.ParserBase._inputPtr,Field,* Pointer to next available character in buffer,protected int _inputPtr;,int _inputPtr,protected 
com.fasterxml.jackson.core.base.ParserBase._inputEnd,Field,* Index of character after last available one in the buffer.,protected int _inputEnd;,int _inputEnd,protected 
com.fasterxml.jackson.core.base.ParserBase._currInputProcessed,Field,* Number of characters/bytes that were contained in previous blocks\n     * (blocks that were already processed prior to the current buffer).,protected long _currInputProcessed;,long _currInputProcessed,protected 
com.fasterxml.jackson.core.base.ParserBase._currInputRow,Field,"* Current row location of current point in input buffer, starting\n     * from 1, if available.",protected int _currInputRow = 1;,int _currInputRow,protected 
com.fasterxml.jackson.core.base.ParserBase._currInputRowStart,Field,"* Current index of the first character of the current row in input\n     * buffer. Needed to calculate column position, if necessary; benefit\n     * of not having column itself is that this only has to be updated\n     * once per line.",protected int _currInputRowStart;,int _currInputRowStart,protected 
com.fasterxml.jackson.core.base.ParserBase._tokenInputTotal,Field,"* Total number of bytes/characters read before start of current token.\n     * For big (gigabyte-sized) sizes are possible, needs to be long,\n     * unlike pointers and sizes related to in-memory buffers.",protected long _tokenInputTotal;,long _tokenInputTotal,protected 
com.fasterxml.jackson.core.base.ParserBase._tokenInputRow,Field,"* Input row on which current token starts, 1-based",protected int _tokenInputRow = 1;,int _tokenInputRow,protected 
com.fasterxml.jackson.core.base.ParserBase._tokenInputCol,Field,* Column on input row that current token starts; 0-based (although\n     * in the end it'll be converted to 1-based),protected int _tokenInputCol;,int _tokenInputCol,protected 
com.fasterxml.jackson.core.base.ParserBase._parsingContext,Field,"* Information about parser context, context in which\n     * the next token is to be parsed (root, array, object).",protected JsonReadContext _parsingContext;,com.fasterxml.jackson.core.json.JsonReadContext _parsingContext,protected 
com.fasterxml.jackson.core.base.ParserBase._nextToken,Field,"* Secondary token related to the next token after current one;\n     * used if its type is known. This may be value token that\n     * follows FIELD_NAME, for example.",protected JsonToken _nextToken;,com.fasterxml.jackson.core.JsonToken _nextToken,protected 
com.fasterxml.jackson.core.base.ParserBase._textBuffer,Field,"* Buffer that contains contents of String values, including\n     * field names if necessary (name split across boundary,\n     * contains escape sequence, or access needed to char array)",protected final TextBuffer _textBuffer;,com.fasterxml.jackson.core.util.TextBuffer _textBuffer,"protected , final "
com.fasterxml.jackson.core.base.ParserBase._nameCopyBuffer,Field,* Temporary buffer that is needed if field name is accessed\n     * using {@link #getTextCharacters} method (instead of String\n     * returning alternatives),protected char[] _nameCopyBuffer;,char[] _nameCopyBuffer,protected 
com.fasterxml.jackson.core.base.ParserBase._nameCopied,Field,* Flag set to indicate whether the field name is available\n     * from the name copy buffer or not (in addition to its String\n     * representation  being available via read context),protected boolean _nameCopied;,boolean _nameCopied,protected 
com.fasterxml.jackson.core.base.ParserBase._byteArrayBuilder,Field,"* ByteArrayBuilder is needed if 'getBinaryValue' is called. If so,\n     * we better reuse it for remainder of content.",protected ByteArrayBuilder _byteArrayBuilder;,com.fasterxml.jackson.core.util.ByteArrayBuilder _byteArrayBuilder,protected 
com.fasterxml.jackson.core.base.ParserBase._binaryValue,Field,"* We will hold on to decoded binary data, for duration of\n     * current event, so that multiple calls to\n     * {@link #getBinaryValue} will not need to decode data more\n     * than once.",protected byte[] _binaryValue;,byte[] _binaryValue,protected 
com.fasterxml.jackson.core.base.ParserBase._numTypesValid,Field,* Bitfield that indicates which numeric representations\n     * have been calculated for the current type,protected int _numTypesValid = NR_UNKNOWN;,int _numTypesValid,protected 
com.fasterxml.jackson.core.base.ParserBase._numberInt,Field,No Comment,protected int _numberInt;,int _numberInt,protected 
com.fasterxml.jackson.core.base.ParserBase._numberLong,Field,No Comment,protected long _numberLong;,long _numberLong,protected 
com.fasterxml.jackson.core.base.ParserBase._numberFloat,Field,No Comment,protected float _numberFloat;,float _numberFloat,protected 
com.fasterxml.jackson.core.base.ParserBase._numberDouble,Field,No Comment,protected double _numberDouble;,double _numberDouble,protected 
com.fasterxml.jackson.core.base.ParserBase._numberBigInt,Field,No Comment,protected BigInteger _numberBigInt;,java.math.BigInteger _numberBigInt,protected 
com.fasterxml.jackson.core.base.ParserBase._numberBigDecimal,Field,No Comment,protected BigDecimal _numberBigDecimal;,java.math.BigDecimal _numberBigDecimal,protected 
com.fasterxml.jackson.core.base.ParserBase._numberString,Field,* Textual number representation captured from input in cases lazy-parsing\n     * is desired.\n     *\n     * @since 2.14,protected String _numberString;,java.lang.String _numberString,protected 
com.fasterxml.jackson.core.base.ParserBase._numberIsNaN,Field,"* Marker for explicit ""Not a Number"" (NaN) values that may be read\n     * by some formats: this includes positive and negative infinity,\n     * as well as ""NaN"" result for some arithmetic operations.\n     *<p>\n     * In case of JSON, such values can only be handled with non-standard\n     * processing: for some other formats they can be passed normally.\n     *<p>\n     * NOTE: this marker is NOT set in case of value overflow/underflow for\n     * {@code double} or {@code float} values.\n     *\n     * @since 2.17",protected boolean _numberIsNaN;,boolean _numberIsNaN,protected 
com.fasterxml.jackson.core.base.ParserBase._numberNegative,Field,"* Flag that indicates whether numeric value has a negative\n     * value. That is, whether its textual representation starts\n     * with minus character.",protected boolean _numberNegative;,boolean _numberNegative,protected 
com.fasterxml.jackson.core.base.ParserBase._intLength,Field,"* Length of integer part of the number, in characters",protected int _intLength;,int _intLength,protected 
com.fasterxml.jackson.core.base.ParserBase._fractLength,Field,"* Length of the fractional part (not including decimal\n     * point or exponent), in characters.\n     * Not used for  pure integer values.",protected int _fractLength;,int _fractLength,protected 
com.fasterxml.jackson.core.base.ParserBase._expLength,Field,"* Length of the exponent part of the number, if any, not\n     * including 'e' marker or sign, just digits.\n     * Not used for  pure integer values.",protected int _expLength;,int _expLength,protected 
com.fasterxml.jackson.core.JsonFactoryBuilder._characterEscapes,Field,No Comment,protected CharacterEscapes _characterEscapes;,com.fasterxml.jackson.core.io.CharacterEscapes _characterEscapes,protected 
com.fasterxml.jackson.core.JsonFactoryBuilder._rootValueSeparator,Field,No Comment,protected SerializableString _rootValueSeparator;,com.fasterxml.jackson.core.SerializableString _rootValueSeparator,protected 
com.fasterxml.jackson.core.JsonFactoryBuilder._maximumNonEscapedChar,Field,No Comment,protected int _maximumNonEscapedChar;,int _maximumNonEscapedChar,protected 
com.fasterxml.jackson.core.JsonFactoryBuilder._quoteChar,Field,* Character used for quoting field names (if field name quoting has not\n     * been disabled with {@link JsonWriteFeature#QUOTE_FIELD_NAMES})\n     * and JSON String values.,protected char _quoteChar = JsonFactory.DEFAULT_QUOTE_CHAR;,char _quoteChar,protected 
com.fasterxml.jackson.core.JsonpCharacterEscapes.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.JsonpCharacterEscapes.asciiEscapes,Field,No Comment,private static final int[] asciiEscapes = CharacterEscapes.standardAsciiEscapesForJSON();,int[] asciiEscapes,"private , static , final "
com.fasterxml.jackson.core.JsonpCharacterEscapes.escapeFor2028,Field,No Comment,"private static final SerializedString escapeFor2028 = new SerializedString(""\\u2028"");",com.fasterxml.jackson.core.io.SerializedString escapeFor2028,"private , static , final "
com.fasterxml.jackson.core.JsonpCharacterEscapes.escapeFor2029,Field,No Comment,"private static final SerializedString escapeFor2029 = new SerializedString(""\\u2029"");",com.fasterxml.jackson.core.io.SerializedString escapeFor2029,"private , static , final "
com.fasterxml.jackson.core.JsonpCharacterEscapes.sInstance,Field,No Comment,private static final JsonpCharacterEscapes sInstance = new JsonpCharacterEscapes();,com.fasterxml.jackson.core.JsonpCharacterEscapes sInstance,"private , static , final "
com.fasterxml.jackson.core.ErrorReportConfiguration.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.ErrorReportConfiguration.DEFAULT_MAX_ERROR_TOKEN_LENGTH,Field,* Default value for {@link #_maxErrorTokenLength}.,public static final int DEFAULT_MAX_ERROR_TOKEN_LENGTH = 256;,int DEFAULT_MAX_ERROR_TOKEN_LENGTH,"public , static , final "
com.fasterxml.jackson.core.ErrorReportConfiguration.DEFAULT_MAX_RAW_CONTENT_LENGTH,Field,* Previously was {@code com.fasterxml.jackson.core.io.ContentReference#DEFAULT_MAX_CONTENT_SNIPPET}.\n     * Default value for {@link #_maxRawContentLength}.,public static final int DEFAULT_MAX_RAW_CONTENT_LENGTH = 500;,int DEFAULT_MAX_RAW_CONTENT_LENGTH,"public , static , final "
com.fasterxml.jackson.core.ErrorReportConfiguration._maxErrorTokenLength,Field,* Maximum length of token to include in error messages\n     *\n     * @see Builder#maxErrorTokenLength(int),protected final int _maxErrorTokenLength;,int _maxErrorTokenLength,"protected , final "
com.fasterxml.jackson.core.ErrorReportConfiguration._maxRawContentLength,Field,* Maximum length of raw content to include in error messages\n     * \n     * @see Builder#maxRawContentLength(int),protected final int _maxRawContentLength;,int _maxRawContentLength,"protected , final "
com.fasterxml.jackson.core.ErrorReportConfiguration.DEFAULT,Field,No Comment,"private static ErrorReportConfiguration DEFAULT = new ErrorReportConfiguration(DEFAULT_MAX_ERROR_TOKEN_LENGTH, DEFAULT_MAX_RAW_CONTENT_LENGTH);",com.fasterxml.jackson.core.ErrorReportConfiguration DEFAULT,"private , static "
com.fasterxml.jackson.core.ErrorReportConfiguration$Builder.maxErrorTokenLength,Field,No Comment,private int maxErrorTokenLength;,int maxErrorTokenLength,private 
com.fasterxml.jackson.core.ErrorReportConfiguration$Builder.maxRawContentLength,Field,No Comment,private int maxRawContentLength;,int maxRawContentLength,private 
com.fasterxml.jackson.core.JsonLocation.serialVersionUID,Field,in 2.13,private static final long serialVersionUID = 2L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.core.JsonLocation.MAX_CONTENT_SNIPPET,Field,* @deprecated Since 2.13 use {@link ErrorReportConfiguration#DEFAULT_MAX_RAW_CONTENT_LENGTH} instead,@Deprecated\npublic static final int MAX_CONTENT_SNIPPET = 500;,int MAX_CONTENT_SNIPPET,"public , static , final "
com.fasterxml.jackson.core.JsonLocation.NA,Field,"* Shared immutable ""N/A location"" that can be returned to indicate\n     * that no location information is available.\n     *<p>\n     * NOTE: before 2.9, Location was given as String ""N/A""; with 2.9 it was\n     * removed so that source should be indicated as ""UNKNOWN"".","public final static JsonLocation NA = new JsonLocation(ContentReference.unknown(), -1L, -1L, -1, -1);",com.fasterxml.jackson.core.JsonLocation NA,"public , final , static "
com.fasterxml.jackson.core.JsonLocation._totalBytes,Field,No Comment,protected final long _totalBytes;,long _totalBytes,"protected , final "
com.fasterxml.jackson.core.JsonLocation._totalChars,Field,No Comment,protected final long _totalChars;,long _totalChars,"protected , final "
com.fasterxml.jackson.core.JsonLocation._lineNr,Field,No Comment,protected final int _lineNr;,int _lineNr,"protected , final "
com.fasterxml.jackson.core.JsonLocation._columnNr,Field,No Comment,protected final int _columnNr;,int _columnNr,"protected , final "
com.fasterxml.jackson.core.JsonLocation._contentReference,Field,* Reference to input source; never null (but may be that of\n     * {@link ContentReference#unknown()}).\n     *\n     * @since 2.13 (before we have {@code _sourceRef} (Object-valued),protected final ContentReference _contentReference;,com.fasterxml.jackson.core.io.ContentReference _contentReference,"protected , final "
com.fasterxml.jackson.core.JsonLocation._sourceDescription,Field,"* Lazily constructed description for source; constructed if and\n     * when {@link #sourceDescription()} is called, retained.\n     *\n     * @since 2.13",protected transient String _sourceDescription;,java.lang.String _sourceDescription,"protected , transient "
