FEN:ID,:LABEL,Comment,Modifiers,Extends,Implements
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer,Class,"* Replacement for <code>BytesToNameCanonicalizer</code> which aims at more localized\n * memory access due to flattening of name quad data.\n * Performance improvement modest for simple JSON document data binding (maybe 3%),\n * but should help more for larger symbol tables, or for binary formats like Smile.\n *<p>\n * Hash area is divided into 4 sections:\n *<ol>\n * <li>Primary area (1/2 of total size), direct match from hash (LSB)</li>\n * <li>Secondary area (1/4 of total size), match from {@code hash (LSB) >> 1}</li>\n * <li>Tertiary area (1/8 of total size), match from {@code hash (LSB) >> 2}</li>\n * <li>Spill-over area (remaining 1/8) with linear scan, insertion order</li>\n * <li></li>\n * </ol>\n * and within every area, entries are 4 {@code int}s, where 1 - 3 ints contain 1 - 12\n * UTF-8 encoded bytes of name (null-padded), and last int is offset in\n * {@code _names} that contains actual name Strings.\n *\n * @since 2.6","public , final ",,
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo,Class,"* Immutable value class used for sharing information as efficiently\n     * as possible, by only require synchronization of reference manipulation\n     * but not access to contents.\n     *\n     * @since 2.1","private , final , static ",,
com.fasterxml.jackson.core.sym.Name1,Class,* Specialized implementation of PName: can be used for short Strings\n * that consists of at most 4 bytes. Usually this means short\n * ascii-only names.\n *<p>\n * The reason for such specialized classes is mostly space efficiency;\n * and to a lesser degree performance. Both are achieved for short\n * Strings by avoiding another level of indirection (via quad arrays),"public , final ",com.fasterxml.jackson.core.sym.Name,
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer,Class,"* This class is a kind of specialized type-safe Map, from char array to\n * String value. Specialization means that in addition to type-safety\n * and specific access patterns (key char array, Value optionally interned\n * String; values added on access if necessary), and that instances are\n * meant to be used concurrently, but by using well-defined mechanisms\n * to obtain such concurrently usable instances. Main use for the class\n * is to store symbol table information for things like compilers and\n * parsers; especially when number of symbols (keywords) is limited.\n *<p>\n * For optimal performance, usage pattern should be one where matches\n * should be very common (especially after ""warm-up""), and as with most hash-based\n * maps/sets, that hash codes are uniformly distributed. Also, collisions\n * are slightly more expensive than with HashMap or HashSet, since hash codes\n * are not used in resolving collisions; that is, equals() comparison is\n * done with all symbols in same bucket index.<br>\n * Finally, rehashing is also more expensive, as hash codes are not\n * stored; rehashing requires all entries' hash codes to be recalculated.\n * Reason for not storing hash codes is reduced memory usage, hoping\n * for better memory locality.\n *<p>\n * Usual usage pattern is to create a single ""master"" instance, and either\n * use that instance in sequential fashion, or to create derived ""child""\n * instances, which after use, are asked to return possible symbol additions\n * to master instance. In either case benefit is that symbol table gets\n * initialized so that further uses are more efficient, as eventually all\n * symbols needed will already be in symbol table. At that point no more\n * Symbol String allocations are needed, nor changes to symbol table itself.\n *<p>\n * Note that while individual SymbolTable instances are NOT thread-safe\n * (much like generic collection classes), concurrently used ""child""\n * instances can be freely used without synchronization. However, using\n * master table concurrently with child instances can only be done if\n * access to master instance is read-only (i.e. no modifications done).","public , final ",,
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket,Class,* This class is a symbol table entry. Each entry acts as a node\n     * in a linked list.,"static , final ",,
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$TableInfo,Class,"* Immutable value class used for sharing information as efficiently\n     * as possible, by only require synchronization of reference manipulation\n     * but not access to contents.\n     *\n     * @since 2.8.7","private , final , static ",,
com.fasterxml.jackson.core.sym.Name2,Class,* Specialized implementation of PName: can be used for short Strings\n * that consists of 5 to 8 bytes. Usually this means relatively short\n * ascii-only names.\n *<p>\n * The reason for such specialized classes is mostly space efficiency;\n * and to a lesser degree performance. Both are achieved for short\n * Strings by avoiding another level of indirection (via quad arrays),"public , final ",com.fasterxml.jackson.core.sym.Name,
com.fasterxml.jackson.core.sym.Name3,Class,* Specialized implementation of PName: can be used for short Strings\n * that consists of 9 to 12 bytes. It's the longest special purpose\n * implementaion; longer ones are expressed using {@link NameN}.,"public , final ",com.fasterxml.jackson.core.sym.Name,
com.fasterxml.jackson.core.sym.Name,Abstract Class,* Base class for tokenized names (key strings in objects) that have\n * been tokenized from byte-based input sources (like\n * {@link java.io.InputStream}.\n *\n * @author Tatu Saloranta,"public , abstract ",,
com.fasterxml.jackson.core.sym.NameN,Class,"* Generic implementation of PName used for ""long"" names, where long\n * means that its byte (UTF-8) representation is 13 bytes or more.","public , final ",com.fasterxml.jackson.core.sym.Name,
com.fasterxml.jackson.core.PrettyPrinter,Interface,"* Interface for objects that implement pretty printer functionality, such\n * as indentation.\n * Pretty printers are used to add white space in output JSON content,\n * to make results more human readable. Usually this means things like adding\n * linefeeds and indentation.\n *<p>\n * Note: since Jackson 2.1, stateful implementations MUST implement\n * {@link com.fasterxml.jackson.core.util.Instantiatable} interface,\n * to allow for constructing  per-generation instances and avoid\n * state corruption.\n * Stateless implementations need not do this; but those are less common.",public ,,
com.fasterxml.jackson.core.StreamWriteConstraints,Class,"* The constraints to use for streaming writes: used to guard against problematic\n * output by preventing processing of ""too big"" output constructs (values,\n * structures).\n * Constraints are registered with {@code TokenStreamFactory} (such as\n * {@code JsonFactory}); if nothing explicitly specified, default\n * constraints are used.\n *<p>\n * Currently constrained aspects, with default settings, are:\n * <ul>\n *  <li>Maximum Nesting depth: default 1000 (see {@link #DEFAULT_MAX_DEPTH})\n *   </li>\n * </ul>\n *\n * @since 2.16",public ,,java.io.Serializable
com.fasterxml.jackson.core.StreamWriteConstraints$Builder,Class,No Comment,"public , static , final ",,
com.fasterxml.jackson.core.StreamWriteCapability,Enum,"* Set of on/off capabilities that a {@link JsonGenerator} for given format\n * (or in case of buffering, original format) has.\n * Used in some cases to adjust aspects of things like content conversions and\n * coercions by format-agnostic functionality.\n * Specific or expected usage documented by individual capability entry Javadocs.\n *\n * @since 2.12",public ,enum has no extends,com.fasterxml.jackson.core.util.JacksonFeature
com.fasterxml.jackson.core.JsonProcessingException,Class,"* Intermediate base class for all problems encountered when\n * processing (parsing, generating) JSON content\n * that are not pure I/O problems.\n * Regular {@link java.io.IOException}s will be passed through as is.\n * Sub-class of {@link java.io.IOException} for convenience.\n *<p>\n * Since Jackson 2.12 extends intermediate {@link JacksonException} type\n * instead of directly extending {@link java.io.IOException}.\n *<p>\n * Since Jackson 2.16, handles its content as configured using {@link com.fasterxml.jackson.core.ErrorReportConfiguration}.",public ,com.fasterxml.jackson.core.JacksonException,
com.fasterxml.jackson.core.JsonPointer,Class,"* Implementation of\n * <a href=""http://tools.ietf.org/html/draft-ietf-appsawg-json-pointer-03"">JSON Pointer</a>\n * specification.\n * Pointer instances can be used to locate logical JSON nodes for things like\n * tree traversal (see {@link TreeNode#at}).\n * It may be used in future for filtering of streaming JSON content\n * as well (not implemented yet for 2.3).\n *<p>\n * Note that the implementation was largely rewritten for Jackson 2.14 to\n * reduce memory usage by sharing backing ""full path"" representation for\n * nested instances.\n *<p>\n * Instances are fully immutable and can be cached, shared between threads.\n *\n * @author Tatu Saloranta\n *\n * @since 2.3",public ,,java.io.Serializable
com.fasterxml.jackson.core.JsonPointer$PointerParent,Class,* Helper class used to replace call stack when parsing JsonPointer\n     * expressions.,"private , static ",,
com.fasterxml.jackson.core.JsonPointer$PointerSegment,Class,* Helper class used to contain a single segment when constructing JsonPointer\n     * from context.,"private , static ",,
com.fasterxml.jackson.core.JsonPointer$Serialization,Class,"* This must only exist to allow both final properties and implementation of\n     * Externalizable/Serializable for JsonPointer.\n     * Note that here we do not store offset but simply use (and expect use)\n     * full path, from which we need to decode actual structure.\n     *\n     * @since 2.14",static ,,java.io.Externalizable
com.fasterxml.jackson.core.JacksonException,Abstract Class,"* Base class for all Jackson-produced checked exceptions.\n *<p>\n * For Jackson 2.x this base type is not widely used (instead, its main subtype\n * {@link JsonProcessingException} is): it is provided more for forwards-compatibility\n * purposes as 3.x will base all other types directly on it and deprecate\n * {@link JsonProcessingException} (as well as chance its type to unchecked).\n *\n * @since 2.12","public , abstract ",java.io.IOException,
com.fasterxml.jackson.core.util.RecyclerPool,Interface,"* API for object pools that control creation and possible reuse of\n * objects that are costly to create (often things like encoding/decoding buffers).\n *<p>\n * Also contains partial (base) implementations for pools that use different\n * strategies on retaining objects for reuse.\n * Following implementations are included:\n *<ul>\n * <li>{@link NonRecyclingPoolBase} which does not retain or recycle anything and\n * will always simply construct and return new instance when\n * {@code acquireBufferRecycler} is called\n *  </li>\n * <li>{@link ThreadLocalPoolBase} which uses {@link ThreadLocal} to retain at most\n *   1 object per {@link Thread}.\n * </li>\n * <li>{@link BoundedPoolBase} is ""bounded pool"" and retains at most N objects (default value being\n *  {@link BoundedPoolBase#DEFAULT_CAPACITY}) at any given time.\n *  </li>\n * <li>Two implementations -- {@link ConcurrentDequePoolBase}, {@link LockFreePoolBase}\n *   -- are ""unbounded"" and retain any number of objects released: in practice\n *   it is at most the highest number of concurrently used {@link BufferRecycler}s.\n *  </li>\n *</ul>\n *\n *<p>\n * Default implementations are also included as nested classes.\n *\n * @param <P> Type of Objects pool recycles\n *\n * @since 2.16",public ,java.io.Serializable,
com.fasterxml.jackson.core.util.RecyclerPool$WithPool,Interface,* Simple add-on interface that poolable entities must implement.\n     *\n     * @param <P> Self type,public ,,
com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase$Node,Class,No Comment,"protected , static ",,
com.fasterxml.jackson.core.util.RecyclerPool$ThreadLocalPoolBase,Abstract Class,"* Default {@link RecyclerPool} implementation that uses\n     * {@link ThreadLocal} for recycling instances. \n     * Instances are stored using {@link java.lang.ref.SoftReference}s so that\n     * they may be Garbage Collected as needed by JVM.\n     *<p>\n     * Note that this implementation may not work well on platforms where\n     * {@link java.lang.ref.SoftReference}s are not well supported (like\n     * Android), or on platforms where {@link java.lang.Thread}s are not\n     * long-living or reused (like Project Loom).",abstract ,,com.fasterxml.jackson.core.util.RecyclerPool
com.fasterxml.jackson.core.util.RecyclerPool$NonRecyclingPoolBase,Abstract Class,* {@link RecyclerPool} implementation that does not use\n     * any pool but simply creates new instances when necessary.,abstract ,,com.fasterxml.jackson.core.util.RecyclerPool
com.fasterxml.jackson.core.util.RecyclerPool$StatefulImplBase,Abstract Class,"* Intermediate base class for instances that are stateful and require\n     * special handling with respect to JDK serialization, to retain\n     * ""global"" reference distinct from non-shared ones.",abstract ,,com.fasterxml.jackson.core.util.RecyclerPool
com.fasterxml.jackson.core.util.RecyclerPool$ConcurrentDequePoolBase,Abstract Class,* {@link RecyclerPool} implementation that uses\n     * {@link ConcurrentLinkedDeque} for recycling instances.\n     *<p>\n     * Pool is unbounded: see {@link RecyclerPool} what this means.,abstract ,com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase,
com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase,Abstract Class,"* {@link RecyclerPool} implementation that uses\n     * a lock free linked list for recycling instances.\n     * Pool is unbounded: see {@link RecyclerPool} for\n     * details on what this means.\n     *<p>\n     * NOTE: serious issues found with 2.17.0 lead to deprecation\n     * of this implementation -- basically it is possible to have\n     * unbalanced acquire/release success rate lead to excessive\n     * growth of pooled instances.\n     * See <a href=""https://github.com/FasterXML/jackson-core/issues/1260"">\n     * jackson-core#1260</a> for details.\n     *\n     * @deprecated Since 2.18: use other implementations",abstract ,com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase,
com.fasterxml.jackson.core.util.RecyclerPool$LockFreePoolBase.Node,Class,No Comment,"protected , static ",,
com.fasterxml.jackson.core.util.RecyclerPool$BoundedPoolBase,Abstract Class,"* {@link RecyclerPool} implementation that uses\n     * a bounded queue ({@link ArrayBlockingQueue} for recycling instances.\n     * This is ""bounded"" pool since it will never hold on to more\n     * pooled instances than its size configuration:\n     * the default size is {@link BoundedPoolBase#DEFAULT_CAPACITY}.",abstract ,com.fasterxml.jackson.core.util.RecyclerPool.StatefulImplBase,
com.fasterxml.jackson.core.util.Separators,Class,* Value class used with some {@link com.fasterxml.jackson.core.PrettyPrinter}\n * implements\n *\n * @see com.fasterxml.jackson.core.util.DefaultPrettyPrinter\n * @see com.fasterxml.jackson.core.util.MinimalPrettyPrinter\n *\n * @since 2.9,public ,,java.io.Serializable
com.fasterxml.jackson.core.util.Separators$Spacing,Enum,* Define the spacing around elements like commas and colons.\n     * \n     * @since 2.16,public ,enum has no extends,
com.fasterxml.jackson.core.util.DefaultIndenter,Class,"* Default linefeed-based indenter, used by {@link DefaultPrettyPrinter} (unless\n * overridden). Uses system-specific linefeeds and 2 spaces for indentation per level.\n *\n * @since 2.5",public ,com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter,
com.fasterxml.jackson.core.util.TextBuffer,Class,"* TextBuffer is a class similar to {@link java.lang.StringBuffer}, with\n * following differences:\n *<ul>\n *  <li>TextBuffer uses segments character arrays, to avoid having\n *     to do additional array copies when array is not big enough.\n *     This means that only reallocating that is necessary is done only once:\n *     if and when caller\n *     wants to access contents in a linear array (char[], String).\n *    </li>\n*  <li>TextBuffer can also be initialized in ""shared mode"", in which\n*     it will just act as a wrapper to a single char array managed\n*     by another object (like parser that owns it)\n *    </li>\n *  <li>TextBuffer is not synchronized.\n *    </li>\n * </ul>",public ,,
com.fasterxml.jackson.core.util.RequestPayload,Class,"* Container object used to contain optional information on content\n * being parsed, passed to {@link com.fasterxml.jackson.core.JsonParseException} in case of\n * exception being thrown; this may be useful for caller to display\n * information on failure.\n *\n * @since 2.8",public ,,java.io.Serializable
com.fasterxml.jackson.core.util.ReadConstrainedTextBuffer,Class,No Comment,"public , final ",com.fasterxml.jackson.core.util.TextBuffer,
com.fasterxml.jackson.core.util.InternalJacksonUtil,Abstract Class,* Internal Use Only. Helper class used to contain some useful utility methods.\n *\n * @since 2.17.3 / 2.18.1,"public , abstract ",,
com.fasterxml.jackson.core.util.BufferRecyclers,Class,"* Helper entity used to control access to simple buffer recycling scheme used for\n * some encoding, decoding tasks.\n *\n * @see BufferRecycler\n *\n * @since 2.9.2\n *\n * @deprecated Since 2.16 recycling aspects are handled via {@link RecyclerPool}.",public ,,
com.fasterxml.jackson.core.util.JsonGeneratorDecorator,Interface,* Simple interface to allow adding decorators around {@link JsonGenerator}s.\n *\n * @since 2.16,public ,,
com.fasterxml.jackson.core.util.JsonParserSequence,Class,"* Helper class that can be used to sequence multiple physical\n * {@link JsonParser}s to create a single logical sequence of\n * tokens, as a single {@link JsonParser}.\n *<p>\n * Fairly simple use of {@link JsonParserDelegate}: only need\n * to override {@link #nextToken} to handle transition",public ,com.fasterxml.jackson.core.util.JsonParserDelegate,
com.fasterxml.jackson.core.util.JsonGeneratorDelegate,Class,No Comment,public ,com.fasterxml.jackson.core.JsonGenerator,
com.fasterxml.jackson.core.util.BufferRecycler,Class,"* This is a small utility class, whose main functionality is to allow\n * simple reuse of raw byte/char buffers. It is usually allocated through\n * {@link RecyclerPool} (starting with 2.16): multiple pool\n * implementations exists.\n * The default pool implementation uses\n * {@code ThreadLocal} combined with {@code SoftReference}.\n * The end result is a low-overhead GC-cleanable recycling: hopefully\n * ideal for use by stream readers.\n *<p>\n * Rewritten in 2.10 to be thread-safe (see [jackson-core#479] for details),\n * to not rely on {@code ThreadLocal} access.<br>\n * Rewritten in 2.16 to work with {@link RecyclerPool} abstraction.",public ,,com.fasterxml.jackson.core.util.RecyclerPool.WithPool
com.fasterxml.jackson.core.util.BufferRecycler$Gettable,Interface,* Tag-on interface to allow various other types to expose {@link BufferRecycler}\n     * they are constructed with.\n     *\n     * @since 2.17,public ,,
com.fasterxml.jackson.core.util.JacksonFeatureSet,Class,"* Container similar to {@link java.util.EnumSet} meant for storing sets of\n * {@link JacksonFeature}s (usually {@link java.lang.Enum}s): main\n * difference being that these sets are immutable. Also only supports relatively\n * small sets of features: specifically, up to 31 features.\n *\n * @since 2.12","public , final ",,java.io.Serializable
com.fasterxml.jackson.core.util.InternCache,Class,"* Singleton class that adds a simple first-level cache in front of\n * regular String.intern() functionality. This is done as a minor\n * performance optimization, to avoid calling native intern() method\n * in cases where same String is being interned multiple times.","public , final ",java.util.concurrent.ConcurrentHashMap,
com.fasterxml.jackson.core.util.ByteArrayBuilder,Class,"* Helper class that is similar to {@link java.io.ByteArrayOutputStream}\n * in usage, but more geared to Jackson use cases internally.\n * Specific changes include segment storage (no need to have linear\n * backing buffer, can avoid reallocations, copying), as well API\n * not based on {@link java.io.OutputStream}. In short, a very much\n * specialized builder object.\n *<p>\n * Also implements {@link OutputStream} to allow\n * efficient aggregation of output content as a byte array, similar\n * to how {@link java.io.ByteArrayOutputStream} works, but somewhat more\n * efficiently for many use cases.\n *<p>\n * NOTE: maximum size limited to Java Array maximum, 2 gigabytes: this\n * because usage pattern is to collect content for a `byte[]` and so although\n * theoretically this builder can aggregate more content it will not be usable\n * as things are. Behavior may be improved if we solve the access problem.","public , final ",java.io.OutputStream,com.fasterxml.jackson.core.util.BufferRecycler.Gettable
com.fasterxml.jackson.core.util.DefaultPrettyPrinter,Class,"* Default {@link PrettyPrinter} implementation that uses 2-space\n * indentation with platform-default linefeeds.\n * Usually this class is not instantiated directly, but instead\n * method {@link JsonGenerator#useDefaultPrettyPrinter} is\n * used, which will use an instance of this class for operation.\n *<p>\n * If you override this class, take note of {@link Instantiatable},\n * as subclasses will still create an instance of DefaultPrettyPrinter.\n *<p>\n * This class is designed for the JSON data format. It works on other formats\n * with same logical model (such as binary {@code CBOR} and {@code Smile} formats),\n * but may not work as-is for other data formats, most notably {@code XML}.\n * It may be necessary to use format-specific {@link PrettyPrinter}\n * implementation specific to that format.",public ,,com.fasterxml.jackson.core.PrettyPrinter;com.fasterxml.jackson.core.util.Instantiatable;java.io.Serializable
com.fasterxml.jackson.core.util.DefaultPrettyPrinter$Indenter,Interface,"* Interface that defines objects that can produce indentation used\n     * to separate object entries and array values. Indentation in this\n     * context just means insertion of white space, independent of whether\n     * linefeeds are output.",public ,,
com.fasterxml.jackson.core.util.DefaultPrettyPrinter$NopIndenter,Class,* Dummy implementation that adds no indentation whatsoever,"public , static ",,com.fasterxml.jackson.core.util.DefaultPrettyPrinter.Indenter;java.io.Serializable
com.fasterxml.jackson.core.util.DefaultPrettyPrinter$FixedSpaceIndenter,Class,* This is a very simple indenter that only adds a\n     * single space for indentation. It is used as the default\n     * indenter for array values.,"public , static ",com.fasterxml.jackson.core.util.DefaultPrettyPrinter.NopIndenter,
com.fasterxml.jackson.core.util.MinimalPrettyPrinter,Class,"* {@link PrettyPrinter} implementation that adds no indentation,\n * just implements everything necessary for value output to work\n * as expected, and provide simpler extension points to allow\n * for creating simple custom implementations that add specific\n * decoration or overrides. Since behavior then is very similar\n * to using no pretty printer at all, usually sub-classes are used.\n *<p>\n * Beyond purely minimal implementation, there is limited amount of\n * configurability which may be useful for actual use: for example,\n * it is possible to redefine separator used between root-level\n * values (default is single space; can be changed to line-feed).\n *<p>\n * Note: does NOT implement {@link Instantiatable} since this is\n * a stateless implementation; that is, a single instance can be\n * shared between threads.",public ,,com.fasterxml.jackson.core.PrettyPrinter;java.io.Serializable
com.fasterxml.jackson.core.util.JacksonFeature,Interface,"* Basic API implemented by Enums used for simple Jackson ""features"": on/off\n * settings and capabilities exposed as something that can be internally\n * represented as bit sets.\n * Designed to be used with {@link JacksonFeatureSet}.\n *\n * @since 2.12",public ,,
com.fasterxml.jackson.core.util.VersionUtil,Class,"* Functionality for supporting exposing of component {@link Version}s.\n * Also contains other misc methods that have no other place to live in.\n *<p>\n * Note that this class can be used in two roles: first, as a static\n * utility class for loading purposes, and second, as a singleton\n * loader of per-module version information.\n *<p>\n * Note that method for accessing version information changed between versions\n * 2.1 and 2.2; earlier code used file named ""VERSION.txt""; but this has serious\n * performance issues on some platforms (Android), so a replacement system\n * was implemented to use class generation and dynamic class loading.\n *<p>\n * Note that functionality for reading ""VERSION.txt"" was removed completely\n * from Jackson 2.6.",public ,,
com.fasterxml.jackson.core.util.JsonParserDelegate,Class,"* Helper class that implements\n * <a href=""http://en.wikipedia.org/wiki/Delegation_pattern"">delegation pattern</a> for {@link JsonParser},\n * to allow for simple overridability of basic parsing functionality.\n * The idea is that any functionality to be modified can be simply\n * overridden; and anything else will be delegated by default.",public ,com.fasterxml.jackson.core.JsonParser,
com.fasterxml.jackson.core.util.ThreadLocalBufferManager,Class,"* For issue [jackson-core#400] We keep a separate Set of all SoftReferences to BufferRecyclers\n * which are (also) referenced using `ThreadLocals`.\n * We do this to be able to release them (dereference) in `releaseBuffers()` and `shutdown()`\n * method to reduce heap consumption during hot reloading of services where otherwise\n * {@link ClassLoader} would have dangling reference via {@link ThreadLocal}s.\n * When gc clears a SoftReference, it puts it on a newly introduced referenceQueue.\n * We use this queue to release the inactive SoftReferences from the Set.\n *\n * @since 2.9.6",default,,
com.fasterxml.jackson.core.util.ThreadLocalBufferManager$ThreadLocalBufferManagerHolder,Class,"* ThreadLocalBufferManagerHolder uses the thread-safe initialize-on-demand, holder class idiom that implicitly\n     * incorporates lazy initialization by declaring a static variable within a static Holder inner class","private , static , final ",,
com.fasterxml.jackson.core.util.JsonRecyclerPools,Class,* Set of {@link RecyclerPool} implementations to be used by the default\n * JSON-backed {@link JsonFactory} for recycling {@link BufferRecycler}\n * containers.\n *\n * @since 2.16,"public , final ",,
com.fasterxml.jackson.core.util.JsonRecyclerPools$ThreadLocalPool,Class,* {@link ThreadLocal}-based {@link RecyclerPool} implementation used for\n     * recycling {@link BufferRecycler} instances:\n     * see {@link RecyclerPool.ThreadLocalPoolBase} for full explanation\n     * of functioning.,"public , static ",com.fasterxml.jackson.core.util.RecyclerPool.ThreadLocalPoolBase,
com.fasterxml.jackson.core.util.JsonRecyclerPools$NonRecyclingPool,Class,* Dummy {@link RecyclerPool} implementation that does not recycle\n     * anything but simply creates new instances when asked to acquire items.,"public , static ",com.fasterxml.jackson.core.util.RecyclerPool.NonRecyclingPoolBase,
com.fasterxml.jackson.core.util.JsonRecyclerPools$ConcurrentDequePool,Class,* {@link RecyclerPool} implementation that uses\n     * {@link ConcurrentLinkedDeque} for recycling instances.\n     *<p>\n     * Pool is unbounded: see {@link RecyclerPool} what this means.,"public , static ",com.fasterxml.jackson.core.util.RecyclerPool.ConcurrentDequePoolBase,
com.fasterxml.jackson.core.util.JsonRecyclerPools$LockFreePool,Class,"* {@link RecyclerPool} implementation that uses\n     * a lock free linked list for recycling instances.\n     *<p>\n     * Pool is unbounded: see {@link RecyclerPool} for\n     * details on what this means.\n     *<p>\n     * NOTE: serious issues found with 2.17.0 lead to deprecation\n     * of this implementation -- basically it is possible to have\n     * unbalanced acquire/release success rate lead to excessive\n     * growth of pooled instances.\n     * See <a href=""https://github.com/FasterXML/jackson-core/issues/1260"">\n     * jackson-core#1260</a> for details.\n     *\n     * @deprecated Since 2.18: use other implementations instead","public , static ",com.fasterxml.jackson.core.util.RecyclerPool.LockFreePoolBase,
com.fasterxml.jackson.core.util.JsonRecyclerPools$BoundedPool,Class,"* {@link RecyclerPool} implementation that uses\n     * a bounded queue ({@link ArrayBlockingQueue} for recycling instances.\n     * This is ""bounded"" pool since it will never hold on to more\n     * {@link BufferRecycler} instances than its size configuration:\n     * the default size is {@link BoundedPoolBase#DEFAULT_CAPACITY}.","public , static ",com.fasterxml.jackson.core.util.RecyclerPool.BoundedPoolBase,
com.fasterxml.jackson.core.util.Instantiatable,Interface,"* Add-on interface used to indicate things that may be ""blueprint"" objects\n * which cannot be used as is, but are used for creating usable per-process\n * (serialization, deserialization) instances, using\n * {@link #createInstance} method.\n *<p>\n * Note that some implementations may choose to implement {@link #createInstance}\n * by simply returning 'this': this is acceptable if instances are stateless.\n *\n * @see DefaultPrettyPrinter\n *\n * @since 2.1",public ,,
com.fasterxml.jackson.core.StreamReadConstraints,Class,"* The constraints to use for streaming reads: used to guard against malicious\n * input by preventing processing of ""too big"" input constructs (values,\n * structures).\n * Constraints are registered with {@code TokenStreamFactory} (such as\n * {@code JsonFactory}); if nothing explicitly specified, default\n * constraints are used.\n *<p>\n * Currently constrained aspects, with default settings, are:\n * <ul>\n *  <li>Maximum Number value length: default 1000 (see {@link #DEFAULT_MAX_NUM_LEN})\n *   </li>\n *  <li>Maximum String value length: default 20_000_000 (see {@link #DEFAULT_MAX_STRING_LEN})\n *   </li>\n *  <li>Maximum Property name length: default 50_000 (see {@link #DEFAULT_MAX_NAME_LEN})\n *   </li>\n *  <li>Maximum Nesting depth: default 1000 (see {@link #DEFAULT_MAX_DEPTH})\n *   </li>\n *  <li>Maximum Document length: default {@code unlimited} (coded as {@code -1},\n *      (see {@link #DEFAULT_MAX_DOC_LEN})\n *   </li>\n *  <li>Maximum Token count: default {@code unlimited} (coded as {@code -1},\n *      (see {@link #DEFAULT_MAX_TOKEN_COUNT})\n *   </li>\n * </ul>\n *\n * @since 2.15",public ,,java.io.Serializable
com.fasterxml.jackson.core.StreamReadConstraints$Builder,Class,No Comment,"public , static , final ",,
com.fasterxml.jackson.core.JsonTokenId,Interface,"* Interface defined to contain ids accessible with {@link JsonToken#id()}.\n * Needed because it is impossible to define these constants in\n * {@link JsonToken} itself, as static constants (oddity of how Enums\n * are implemented by JVM).\n *\n * @since 2.3",public ,,
com.fasterxml.jackson.core.JsonToken,Enum,* Enumeration for basic token types used for returning results\n * of parsing JSON content.,public ,enum has no extends,
com.fasterxml.jackson.core.TreeNode,Interface,"* Marker interface used to denote JSON Tree nodes, as far as\n * the core package knows them (which is very little): mostly\n * needed to allow {@link ObjectCodec} to have some level\n * of interoperability.\n * Most functionality is within <code>JsonNode</code>\n * base class in <code>mapper</code> package.\n *<p>\n * Note that in Jackson 1.x <code>JsonNode</code> itself\n * was part of core package: Jackson 2.x refactored this\n * since conceptually Tree Model is part of mapper package,\n * and so part visible to <code>core</code> package should\n * be minimized.\n *<p>\n * NOTE: starting with Jackson 2.2, there is more functionality\n * available via this class, and the intent was that this should\n * form actual base for multiple alternative tree representations;\n * for example, immutable trees could use different implementation\n * than mutable trees.\n *\n * @since 2.2",public ,,
com.fasterxml.jackson.core.JsonFactory,Class,"* The main factory class of Jackson package, used to configure and\n * construct\n * reader (aka parser, {@link JsonParser})\n * and\n * writer (aka generator, {@link JsonGenerator})\n * instances.\n *<p>\n * Factory instances are thread-safe and reusable after configuration\n * (if any). Typically applications and services use only a single\n * globally shared factory instance, unless they need differently\n * configured factories. Factory reuse is important if efficiency matters;\n * most recycling of expensive construct is done on per-factory basis.\n *<p>\n * Creation of a factory instance is a light-weight operation,\n * and since there is no need for pluggable alternative implementations\n * (as there is no ""standard"" JSON processor API to implement),\n * the default constructor is used for constructing factory\n * instances.\n *\n * @author Tatu Saloranta",public ,com.fasterxml.jackson.core.TokenStreamFactory,java.io.Serializable
com.fasterxml.jackson.core.JsonFactory$Feature,Enum,* Enumeration that defines all on/off features that can only be\n     * changed for {@link JsonFactory}.,public ,enum has no extends,com.fasterxml.jackson.core.util.JacksonFeature
com.fasterxml.jackson.core.FormatFeature,Interface,"* Marker interface that is to be implemented by data format - specific features.\n * Interface used since Java Enums cannot extend classes or other Enums, but\n * they can implement interfaces; and as such we may be able to use limited\n * amount of generic functionality.\n *<p>\n * Since 2.12 this is more of an extra marker feature, as its core API is now\n * defined in more general {@link JacksonFeature}.\n *\n * @since 2.6",public ,com.fasterxml.jackson.core.util.JacksonFeature,
com.fasterxml.jackson.core.async.ByteBufferFeeder,Interface,* {@link NonBlockingInputFeeder} implementation used when feeding data\n * as {@link ByteBuffer} contents.\n *\n * @since 2.9,public ,com.fasterxml.jackson.core.async.NonBlockingInputFeeder,
com.fasterxml.jackson.core.async.NonBlockingInputFeeder,Interface,* Interface used by non-blocking {@link com.fasterxml.jackson.core.JsonParser}\n * implementations to feed input to parse.\n * Feeder is used by entity that feeds content to parse; at any given point\n * only one chunk of content can be processed so caller has to take care to\n * only feed more content when existing content has been parsed (which occurs\n * when parser's <code>nextToken</code> is called). Once application using\n * non-blocking parser has no more data to feed it should call\n * {@link #endOfInput} to indicate end of logical input (stream) to parse.\n *\n * @since 2.9,public ,,
com.fasterxml.jackson.core.async.ByteArrayFeeder,Interface,* {@link NonBlockingInputFeeder} implementation used when feeding data\n * as byte arrays.\n *\n * @since 2.9,public ,com.fasterxml.jackson.core.async.NonBlockingInputFeeder,
com.fasterxml.jackson.core.io.CharacterEscapes,Abstract Class,"* Abstract base class that defines interface for customizing character\n * escaping aspects for String values, for formats that use escaping.\n * For JSON this applies to both property names and String values.","public , abstract ",,java.io.Serializable
com.fasterxml.jackson.core.io.UTF32Reader,Class,"* Since JDK does not come with UTF-32/UCS-4, let's implement a simple\n * decoder to use.",public ,java.io.Reader,
com.fasterxml.jackson.core.io.CharTypes,Class,No Comment,"public , final ",,
com.fasterxml.jackson.core.io.CharTypes$AltEscapes,Class,"* Helper used for lazy initialization of alternative escape (quoting)\n     * table, used for escaping content that uses non-standard quote\n     * character (usually apostrophe).\n     *\n     * @since 2.10","private , static ",,
com.fasterxml.jackson.core.io.schubfach.DoubleToDecimal,Class,* This class exposes a method to render a {@code double} as a string.\n *\n * @author Raffaello Giulietti,"final , public ",,
com.fasterxml.jackson.core.io.schubfach.MathUtils,Class,"* This class exposes package private utilities for other classes.\n * Thus, all methods are assumed to be invoked with correct arguments,\n * so these are not checked at all.\n *\n * @author Raffaello Giulietti",final ,,
com.fasterxml.jackson.core.io.schubfach.FloatToDecimal,Class,* This class exposes a method to render a {@code float} as a string.\n *\n * @author Raffaello Giulietti,"final , public ",,
com.fasterxml.jackson.core.io.JsonStringEncoder,Class,"* Helper class used for efficient encoding of JSON String values (including\n * JSON field names) into Strings or UTF-8 byte arrays.\n *<p>\n * Note that methods in here are somewhat optimized, but not ridiculously so.\n * Reason is that conversion method results are expected to be cached so that\n * these methods will not be hot spots during normal operation.","public , final ",,
com.fasterxml.jackson.core.io.SerializedString,Class,"* String token that can lazily serialize String contained and then reuse that\n * serialization later on. This is similar to JDBC prepared statements, for example,\n * in that instances should only be created when they are used more than use;\n * prime candidates are various serializers.\n *<p>\n * Class is final for performance reasons and since this is not designed to\n * be extensible or customizable (customizations would occur in calling code)",public ,,com.fasterxml.jackson.core.SerializableString;java.io.Serializable
com.fasterxml.jackson.core.io.NumberOutput,Class,No Comment,"public , final ",,
com.fasterxml.jackson.core.io.BigDecimalParser,Class,"* Internal Jackson Helper class used to implement more optimized parsing of {@link BigDecimal} for REALLY\n * big values (over 500 characters).\n *<p>\n * This class is not meant to be used directly. It is designed to be used by Jackson JSON parsers (and parsers\n * for other Jackson supported data formats). The parsers check for invalid characters and the length of the number.\n * Without these checks, this parser is susceptible to performing badly with invalid inputs. If you need to parse\n * numbers directly, please use JavaBigDecimalParser in <a href=""https://github.com/wrandelshofer/FastDoubleParser"">fastdoubleparser</a>\n * instead.\n *</p>\n *<p>\n * Based on ideas from this\n * <a href=""https://github.com/eobermuhlner/big-math/commit/7a5419aac8b2adba2aa700ccf00197f97b2ad89f"">this\n * git commit</a>.\n *</p>\n *\n * @since 2.13","public , final ",,
com.fasterxml.jackson.core.io.DataOutputAsStream,Class,"* Helper class to support use of {@link DataOutput} for output, directly,\n * without caller having to provide for implementation.\n *\n * @since 2.8",public ,java.io.OutputStream,
com.fasterxml.jackson.core.io.IOContext,Class,"* To limit number of configuration and state objects to pass, all\n * contextual objects that need to be passed by the factory to\n * readers and writers are combined under this object. One instance\n * is created for each reader and writer.\n *<p>\n * NOTE: non-final since 2.4, to allow sub-classing.",public ,,java.lang.AutoCloseable
com.fasterxml.jackson.core.io.InputDecorator,Abstract Class,"* Handler class that can be used to decorate input sources.\n * Typical use is to use a filter abstraction (filtered stream,\n * reader) around original input source, and apply additional\n * processing during read operations.","public , abstract ",,java.io.Serializable
com.fasterxml.jackson.core.io.BigIntegerParser,Class,* Helper class used to implement more optimized parsing of {@link BigInteger} for REALLY\n * big values (over 500 characters).\n *\n * @since 2.15,"public , final ",,
com.fasterxml.jackson.core.io.SegmentedStringWriter,Class,"* Efficient alternative to {@link StringWriter}, based on using segmented\n * internal buffer. Initial input buffer is also recyclable.\n *<p>\n * This class is most useful when serializing JSON content as a String:\n * if so, instance of this class can be given as the writer to\n * <code>JsonGenerator</code>.","public , final ",java.io.Writer,com.fasterxml.jackson.core.util.BufferRecycler.Gettable
com.fasterxml.jackson.core.io.ContentReference,Class,"* Abstraction that encloses information about content being processed --\n * input source or output target, streaming or\n * not -- for the purpose of including pertinent information in\n * location (see {@link com.fasterxml.jackson.core.JsonLocation})\n * objections, most commonly to be printed out as part of {@code Exception}\n * messages.\n *\n * @since 2.13",public ,,java.io.Serializable
com.fasterxml.jackson.core.io.OutputDecorator,Abstract Class,"* Handler class that can be used to decorate output destinations.\n * Typical use is to use a filter abstraction (filtered output stream,\n * writer) around original output destination, and apply additional\n * processing during write operations.","public , abstract ",,java.io.Serializable
com.fasterxml.jackson.core.io.MergedStream,Class,"* Simple {@link InputStream} implementation that is used to ""unwind"" some\n * data previously read from an input stream; so that as long as some of\n * that data remains, it's returned; but as long as it's read, we'll\n * just use data from the underlying original stream.\n * This is similar to {@link java.io.PushbackInputStream}, but here there's\n * only one implicit pushback, when instance is constructed.","public , final ",java.io.InputStream,
com.fasterxml.jackson.core.io.UTF8Writer,Class,No Comment,"public , final ",java.io.Writer,
com.fasterxml.jackson.core.io.JsonEOFException,Class,"* Specialized {@link JsonParseException} that is thrown when end-of-input\n * is reached unexpectedly, either within token being decoded, or during\n * skipping of intervening white-space that is not between root-level\n * tokens (that is, is within JSON Object or JSON Array construct).\n *\n * @since 2.8",public ,com.fasterxml.jackson.core.JsonParseException,
com.fasterxml.jackson.core.io.NumberInput,Class,* Helper class for efficient parsing of various JSON numbers.\n *<p>\n * NOTE! Does NOT validate against maximum length limits: caller must\n * do that if and as necessary.,"public , final ",,
com.fasterxml.jackson.core.TSFBuilder,Abstract Class,"* Since 2.10, Builder class is offered for creating token stream factories\n * with difference configurations: with 3.x they will be fully immutable.\n *\n * @since 2.10","public , abstract ",,
com.fasterxml.jackson.core.ObjectCodec,Abstract Class,"* Abstract class that defines the interface that {@link JsonParser} and\n * {@link JsonGenerator} use to serialize and deserialize regular\n * Java objects (POJOs aka Beans).\n *<p>\n * The standard implementation of this class is\n * <code>com.fasterxml.jackson.databind.ObjectMapper</code>,\n * defined in the ""jackson-databind"".","public , abstract ",com.fasterxml.jackson.core.TreeCodec,com.fasterxml.jackson.core.Versioned
com.fasterxml.jackson.core.SerializableString,Interface,"* Interface that defines how Jackson package can interact with efficient\n * pre-serialized or lazily-serialized and reused String representations.\n * Typically implementations store possible serialized version(s) so that\n * serialization of String can be done more efficiently, especially when\n * used multiple times.\n *<p>\n * Note that ""quoted"" in methods means quoting of 'special' characters using\n * JSON backlash notation (and not use of actual double quotes).\n *\n * @see com.fasterxml.jackson.core.io.SerializedString",public ,,
com.fasterxml.jackson.core.JsonStreamContext,Abstract Class,"* Shared base class for streaming processing contexts used during\n * reading and writing of Json content using Streaming API.\n * This context is also exposed to applications:\n * context object can be used by applications to get an idea of\n * relative position of the parser/generator within json content\n * being processed. This allows for some contextual processing: for\n * example, output within Array context can differ from that of\n * Object context.\n *<p>\n * NOTE: in Jackson 3.x this class is renamed as {@code TokenStreamContext}","public , abstract ",,
com.fasterxml.jackson.core.TreeCodec,Abstract Class,* Interface that defines objects that can read and write\n * {@link TreeNode} instances using Streaming API.\n *\n * @since 2.3,"public , abstract ",,
com.fasterxml.jackson.core.json.JsonWriteFeature,Enum,* Token writer features specific to JSON backend.\n *\n * @since 2.10,public ,enum has no extends,com.fasterxml.jackson.core.FormatFeature
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator,Class,* {@link JsonGenerator} that outputs JSON content using a {@link java.io.Writer}\n * which handles character encoding.,public ,com.fasterxml.jackson.core.json.JsonGeneratorImpl,
com.fasterxml.jackson.core.json.JsonGeneratorImpl,Abstract Class,* Intermediate base class shared by JSON-backed generators\n * like {@link UTF8JsonGenerator} and {@link WriterBasedJsonGenerator}.\n *\n * @since 2.1,"public , abstract ",com.fasterxml.jackson.core.base.GeneratorBase,
com.fasterxml.jackson.core.json.UTF8JsonGenerator,Class,No Comment,public ,com.fasterxml.jackson.core.json.JsonGeneratorImpl,
com.fasterxml.jackson.core.json.UTF8StreamJsonParser,Class,"* This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.InputStream} as the input source.",public ,com.fasterxml.jackson.core.json.JsonParserBase,
com.fasterxml.jackson.core.json.UTF8DataInputJsonParser,Class,"* This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.DataInput} as the input source.\n *<p>\n * Due to limitations in look-ahead (basically there's none), as well\n * as overhead of reading content mostly byte-by-byte,\n * there are some\n * minor differences from regular streaming parsing. Specifically:\n *<ul>\n * <li>Input location offsets not being tracked, as offsets would need to\n *   be updated for each read from all over the place. If caller wants\n *   this information, it has to track this with {@link DataInput}.\n *   This also affects column number, so the only location information\n *   available is the row (line) number (but even that is approximate in\n *   case of two-byte linefeeds -- it should work with single CR or LF tho)\n *  </li>\n * <li>No white space validation:\n *    checks are simplified NOT to check for control characters.\n *  </li>\n * </ul>\n *\n * @since 2.8",public ,com.fasterxml.jackson.core.json.JsonParserBase,
com.fasterxml.jackson.core.json.JsonReadFeature,Enum,* Token reader (parser) features specific to JSON backend.\n * Eventual replacement for JSON-specific {@link com.fasterxml.jackson.core.JsonParser.Feature}s.\n *\n * @since 2.10,public ,enum has no extends,com.fasterxml.jackson.core.FormatFeature
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser,Class,* Non-blocking parser implementation for JSON content that takes its input\n * via {@code byte[]} passed.\n *<p>\n * NOTE: only supports parsing of UTF-8 encoded content (and 7-bit US-ASCII since\n * it is strict subset of UTF-8): other encodings are not supported.\n *\n * @since 2.9,public ,com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase,com.fasterxml.jackson.core.async.ByteArrayFeeder
com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase,Abstract Class,* Non-blocking parser base implementation for JSON content.\n *<p>\n * NOTE: only supports parsing of UTF-8 encoded content (and 7-bit US-ASCII since\n * it is strict subset of UTF-8): other encodings are not supported.\n *\n * @since 2.9,"public , abstract ",com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase,
com.fasterxml.jackson.core.json.async.NonBlockingJsonParserBase,Abstract Class,* Intermediate base class for non-blocking JSON parsers.\n *\n * @since 2.9,"public , abstract ",com.fasterxml.jackson.core.json.JsonParserBase,
com.fasterxml.jackson.core.json.async.NonBlockingByteBufferJsonParser,Class,* Non-blocking parser implementation for JSON content that takes its input\n * via {@link java.nio.ByteBuffer} instance(s) passed.\n *<p>\n * NOTE: only supports parsing of UTF-8 encoded content (and 7-bit US-ASCII since\n * it is strict subset of UTF-8): other encodings are not supported.\n *\n * @since 2.14,public ,com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase,com.fasterxml.jackson.core.async.ByteBufferFeeder
com.fasterxml.jackson.core.json.PackageVersion,Class,* Automatically generated from PackageVersion.java.in during\n * packageVersion-generate execution of maven-replacer-plugin in\n * pom.xml.,"public , final ",,com.fasterxml.jackson.core.Versioned
com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper,Class,"* This class is used to determine the encoding of byte stream\n * that is to contain JSON content. Rules are fairly simple, and\n * defined in JSON specification (RFC-4627 or newer), except\n * for BOM handling, which is a property of underlying\n * streams.","public , final ",,
com.fasterxml.jackson.core.json.JsonWriteContext,Class,"* Extension of {@link JsonStreamContext}, which implements\n * core methods needed, and also exposes\n * more complete API to generator implementation classes.",public ,com.fasterxml.jackson.core.JsonStreamContext,
com.fasterxml.jackson.core.json.DupDetector,Class,"* Helper class used if\n * {@link com.fasterxml.jackson.core.JsonParser.Feature#STRICT_DUPLICATE_DETECTION}\n * is enabled.\n * Optimized to try to limit memory usage and processing overhead for smallest\n * entries, but without adding trashing (immutable objects would achieve optimal\n * memory usage but lead to significant number of discarded temp objects for\n * scopes with large number of entries). Another consideration is trying to limit\n * actual number of compiled classes as it contributes significantly to overall\n * jar size (due to linkage etc).\n *\n * @since 2.3",public ,,
com.fasterxml.jackson.core.json.JsonParserBase,Abstract Class,"* Another intermediate base class, only used by actual JSON-backed parser\n * implementations.\n *\n * @since 2.17","public , abstract ",com.fasterxml.jackson.core.base.ParserBase,
com.fasterxml.jackson.core.json.ReaderBasedJsonParser,Class,"* This is a concrete implementation of {@link JsonParser}, which is\n * based on a {@link java.io.Reader} to handle low-level character\n * conversion tasks.",public ,com.fasterxml.jackson.core.json.JsonParserBase,
com.fasterxml.jackson.core.json.JsonReadContext,Class,"* Extension of {@link JsonStreamContext}, which implements\n * core methods needed, and also exposes\n * more complete API to parser implementation classes.","public , final ",com.fasterxml.jackson.core.JsonStreamContext,
com.fasterxml.jackson.core.type.WritableTypeId,Class,"* This is a simple value class used between core streaming and higher level\n * databinding to pass information about type ids to write.\n * Properties are exposed and mutable on purpose: they are only used for communication\n * over serialization of a single value, and neither retained across calls nor shared\n * between threads.\n *<p>\n * Usual usage pattern is such that instance of this class is passed on two calls that are\n * needed for outputting type id (and possible additional wrapping, depending on format;\n * JSON, for example, requires wrapping as type id is part of regular data): first, a ""prefix""\n * write (which usually includes actual id), performed before value write; and then\n * matching ""suffix"" write after value serialization.\n *\n * @since 2.9",public ,,
com.fasterxml.jackson.core.type.WritableTypeId$Inclusion,Enum,"* Enumeration of values that matches enum `As` from annotation\n     * `JsonTypeInfo`: separate definition to avoid dependency between\n     * streaming core and annotations packages; also allows more flexibility\n     * in case new values needed at this level of internal API.\n     *<p>\n     * NOTE: in most cases this only matters with formats that do NOT have native\n     * type id capabilities, and require type id to be included within regular\n     * data (whether exposed as Java properties or not). Formats with native\n     * types usually use native type id functionality regardless, unless\n     * overridden by a feature to use ""non-native"" type inclusion.",public ,enum has no extends,
com.fasterxml.jackson.core.type.ResolvedType,Abstract Class,"* Type abstraction that represents Java type that has been resolved\n * (i.e. has all generic information, if any, resolved to concrete\n * types).\n * Note that this is an intermediate type, and all concrete instances\n * MUST be of type <code>JavaType</code> from ""databind"" bundle -- this\n * abstraction is only needed so that types can be passed through\n * {@link com.fasterxml.jackson.core.JsonParser#readValueAs} methods.\n *\n * @since 2.0","public , abstract ",,
com.fasterxml.jackson.core.type.TypeReference,Abstract Class,"* This generic abstract class is used for obtaining full generics type information\n * by sub-classing; it must be converted to {@link ResolvedType} implementation\n * (implemented by <code>JavaType</code> from ""databind"" bundle) to be used.\n * Class is based on ideas from\n * <a href=""http://gafter.blogspot.com/2006/12/super-type-tokens.html""\n * >http://gafter.blogspot.com/2006/12/super-type-tokens.html</a>,\n * Additional idea (from a suggestion made in comments of the article)\n * is to require bogus implementation of <code>Comparable</code>\n * (any such generic interface would do, as long as it forces a method\n * with generic type to be implemented).\n * to ensure that a Type argument is indeed given.\n *<p>\n * Usage is by sub-classing: here is one way to instantiate reference\n * to generic type <code>List&lt;Integer&gt;</code>:\n *<pre>\n *  TypeReference ref = new TypeReference&lt;List&lt;Integer&gt;&gt;() { };\n *</pre>\n * which can be passed to methods that accept TypeReference, or resolved\n * using <code>TypeFactory</code> to obtain {@link ResolvedType}.","public , abstract ",,java.lang.Comparable
com.fasterxml.jackson.core.JsonEncoding,Enum,"* Enumeration that defines legal encodings that can be used\n * for JSON content, based on list of allowed encodings from\n * <a href=""http://www.ietf.org/rfc/rfc4627.txt"">JSON specification</a>.\n *<p>\n * Note: if application want to explicitly disregard Encoding\n * limitations (to read in JSON encoded using an encoding not\n * listed as allowed), they can use {@link java.io.Reader} /\n * {@link java.io.Writer} instances as input",public ,enum has no extends,
com.fasterxml.jackson.core.Base64Variants,Class,"* Container for commonly used Base64 variants:\n *<ul>\n * <li> {@link #MIME}\n * <li> {@link #MIME_NO_LINEFEEDS}\n * <li> {@link #PEM}\n * <li> {@link #MODIFIED_FOR_URL}\n * </ul>\n * See entries for full description of differences.\n *<p>\n * Note that for default {@link Base64Variant} instances listed above, configuration\n * is such that if padding is written on output, it will also be required on\n * reading. This behavior may be changed by using methods:\n *<ul>\n * <li>{@link Base64Variant#withPaddingAllowed()}\n *  </li>\n * <li>{@link Base64Variant#withPaddingForbidden()}\n *  </li>\n * <li>{@link Base64Variant#withPaddingRequired()}\n *  </li>\n * <li>{@link Base64Variant#withWritePadding(boolean)}\n *  </li>\n *</ul>\n *\n * @author Tatu Saloranta","public , final ",,
com.fasterxml.jackson.core.Versioned,Interface,"* Interface that those Jackson components that are explicitly versioned will implement.\n * Intention is to allow both plug-in components (custom extensions) and applications and\n * frameworks that use Jackson to detect exact version of Jackson in use.\n * This may be useful for example for ensuring that proper Jackson version is deployed\n * (beyond mechanisms that deployment system may have), as well as for possible\n * workarounds.",public ,,
com.fasterxml.jackson.core.StreamReadFeature,Enum,* Token reader (parser) features not-specific to any particular format backend.\n * Eventual replacement for non-JSON-specific {@link com.fasterxml.jackson.core.JsonParser.Feature}s.\n *\n * @since 2.10,public ,enum has no extends,com.fasterxml.jackson.core.util.JacksonFeature
com.fasterxml.jackson.core.format.DataFormatMatcher,Class,* Result object constructed by {@link DataFormatDetector} when requested\n * to detect format of given input data.,public ,,
com.fasterxml.jackson.core.format.MatchStrength,Enum,"* Enumeration used to indicate strength of match between data format\n * and piece of data (typically beginning of a data file).\n * Values are in increasing match strength; and detectors should return\n * ""strongest"" value: that is, it should start with strongest match\n * criteria, and downgrading if criteria is not fulfilled.",public ,enum has no extends,
com.fasterxml.jackson.core.format.DataFormatDetector,Class,"* Simple helper class that allows data format (content type) auto-detection,\n * given an ordered set of {@link JsonFactory} instances to use for actual low-level\n * detection.",public ,,
com.fasterxml.jackson.core.format.InputAccessor,Interface,* Interface used to expose beginning of a data file to data format\n * detection code.,public ,,
com.fasterxml.jackson.core.format.InputAccessor$Std,Class,* Basic implementation that reads data from given\n     * {@link InputStream} and buffers it as necessary.,,,com.fasterxml.jackson.core.format.InputAccessor
com.fasterxml.jackson.core.JsonGenerator,Abstract Class,* Base class that defines public API for writing JSON content.\n * Instances are created using factory methods of a\n * {@link JsonFactory} instance.\n *\n *\n * @author Tatu Saloranta,"public , abstract ",,java.io.Closeable;java.io.Flushable;com.fasterxml.jackson.core.Versioned
com.fasterxml.jackson.core.JsonGenerator$Feature,Enum,* Enumeration that defines all togglable features for generators.,public ,enum has no extends,
com.fasterxml.jackson.core.exc.StreamConstraintsException,Class,* Exception type used to indicate violations of stream constraints\n * (for example {@link com.fasterxml.jackson.core.StreamReadConstraints})\n * when reading or writing content.\n *\n * @since 2.15,public ,com.fasterxml.jackson.core.JsonProcessingException,
com.fasterxml.jackson.core.exc.StreamWriteException,Abstract Class,"* Intermediate base class for all read-side streaming processing problems, including\n * parsing and input value coercion problems.\n *<p>\n * Added in 2.13 to eventually replace {@link com.fasterxml.jackson.core.JsonGenerationException}.\n *\n * @since 2.13","public , abstract ",com.fasterxml.jackson.core.JsonProcessingException,
com.fasterxml.jackson.core.exc.StreamReadException,Abstract Class,"* Intermediate base class for all read-side streaming processing problems, including\n * parsing and input value coercion problems.\n *<p>\n * Added in 2.10 to eventually replace {@link com.fasterxml.jackson.core.JsonParseException}.\n *\n * @since 2.10","public , abstract ",com.fasterxml.jackson.core.JsonProcessingException,
com.fasterxml.jackson.core.exc.InputCoercionException,Class,"* Exception type for read-side problems that are not direct decoding (""parsing"")\n * problems (those would be reported as {@link com.fasterxml.jackson.core.JsonParseException}s),\n * but rather result from failed attempts to convert specific Java value out of valid\n * but incompatible input value. One example is numeric coercions where target number type's\n * range does not allow mapping of too large/too small input value.\n *\n * @since 2.10",public ,com.fasterxml.jackson.core.exc.StreamReadException,
com.fasterxml.jackson.core.JsonGenerationException,Class,"* Exception type for exceptions during JSON writing, such as trying\n * to output  content in wrong context (non-matching end-array or end-object,\n * for example).",public ,com.fasterxml.jackson.core.exc.StreamWriteException,
com.fasterxml.jackson.core.JsonParser,Abstract Class,* Base class that defines public API for reading JSON content.\n * Instances are created using factory methods of\n * a {@link JsonFactory} instance.\n *\n * @author Tatu Saloranta,"public , abstract ",,java.io.Closeable;com.fasterxml.jackson.core.Versioned
com.fasterxml.jackson.core.JsonParser$NumberType,Enum,"* Enumeration of possible ""native"" (optimal) types that can be\n     * used for numbers.",public ,enum has no extends,
com.fasterxml.jackson.core.JsonParser$NumberTypeFP,Enum,"* Enumeration of possible physical Floating-Point types that\n     * underlying format uses. Used to indicate most accurate (and\n     * efficient) representation if known (if not known,\n     * {@link NumberTypeFP#UNKNOWN} is used).\n     *\n     * @since 2.17",public ,enum has no extends,
com.fasterxml.jackson.core.JsonParser$Feature,Enum,* Enumeration that defines all on/off features for parsers.,public ,enum has no extends,
com.fasterxml.jackson.core.Base64Variant,Class,"* Class used to define specific details of which\n * variant of Base64 encoding/decoding is to be used. Although there is\n * somewhat standard basic version (so-called ""MIME Base64""), other variants\n * exists, see <a href=""http://en.wikipedia.org/wiki/Base64"">Base64 Wikipedia entry</a> for details.\n *\n * @author Tatu Saloranta","public , final ",,java.io.Serializable
com.fasterxml.jackson.core.Base64Variant$PaddingReadBehaviour,Enum,* Defines how the Base64Variant deals with Padding while reading\n     *\n     * @since 2.12,public ,enum has no extends,
com.fasterxml.jackson.core.filter.JsonPointerBasedFilter,Class,"* Simple {@link TokenFilter} implementation that takes a single\n * {@link JsonPointer} and matches a single value accordingly.\n * Instances are immutable and fully thread-safe, shareable,\n * and efficient to use.\n *\n * @since 2.6",public ,com.fasterxml.jackson.core.filter.TokenFilter,
com.fasterxml.jackson.core.filter.TokenFilter,Class,"* Strategy class that can be implemented to specify actual inclusion/exclusion\n * criteria for filtering, used by {@link FilteringGeneratorDelegate}.\n *\n * @since 2.6",public ,,
com.fasterxml.jackson.core.filter.TokenFilter$Inclusion,Enum,* Enumeration that controls how TokenFilter return values are interpreted.\n     *\n     * @since 2.12,public ,enum has no extends,
com.fasterxml.jackson.core.filter.FilteringParserDelegate,Class,* Specialized {@link JsonParserDelegate} that allows use of\n * {@link TokenFilter} for outputting a subset of content that\n * is visible to caller\n *\n * @since 2.6,public ,com.fasterxml.jackson.core.util.JsonParserDelegate,
com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate,Class,* Specialized {@link JsonGeneratorDelegate} that allows use of\n * {@link TokenFilter} for outputting a subset of content that\n * caller tries to generate.\n *\n * @since 2.6,public ,com.fasterxml.jackson.core.util.JsonGeneratorDelegate,
com.fasterxml.jackson.core.filter.TokenFilterContext,Class,"* Alternative variant of {@link JsonStreamContext}, used when filtering\n * content being read or written (based on {@link TokenFilter}).\n *\n * @since 2.6",public ,com.fasterxml.jackson.core.JsonStreamContext,
com.fasterxml.jackson.core.JsonParseException,Class,"* Exception type for parsing problems, used when non-well-formed content\n * (content that does not conform to JSON syntax as per specification)\n * is encountered.",public ,com.fasterxml.jackson.core.exc.StreamReadException,
com.fasterxml.jackson.core.FormatSchema,Interface,"* Simple tag interface used to mark schema objects that are used by some\n * {@link JsonParser} and {@link JsonGenerator} implementations to further\n * specify structure of expected format.\n * Basic JSON-based parsers and generators do not use schemas, but some data\n * formats (like many binary data formats like Thrift, protobuf) mandate\n * use of schemas.\n * Others like CSV and Java Properties may optionally use schemas (and/or use simple\n * default schema to use if caller does not specify one) which specifies\n * some aspects of structuring content.\n *<p>\n * Since there is little commonality between schemas for different data formats,\n * this interface does not define much meaningful functionality for accessing\n * schema details; rather, specific parser and generator implementations need\n * to cast to schema implementations they use. This marker interface is mostly\n * used for tagging ""some kind of schema"" -- instead of passing opaque\n * {@link java.lang.Object} -- for documentation purposes.",public ,,
com.fasterxml.jackson.core.StreamWriteFeature,Enum,* Token writer (generator) features not-specific to any particular format backend.\n * Eventual replacement for non-JSON-specific {@link com.fasterxml.jackson.core.JsonGenerator.Feature}s.\n *\n * @since 2.10,public ,enum has no extends,com.fasterxml.jackson.core.util.JacksonFeature
com.fasterxml.jackson.core.TokenStreamFactory,Abstract Class,"* Intermediate base class for actual format-specific factories for constructing\n * parsers (reading) and generators (writing). Although full power will only be\n * available with Jackson 3, skeletal implementation added in 2.10 to help conversion\n * of code for 2.x to 3.x migration of projects depending on Jackson\n *\n * @since 2.10","public , abstract ",,com.fasterxml.jackson.core.Versioned;java.io.Serializable
com.fasterxml.jackson.core.Version,Class,"* Object that encapsulates versioning information of a component.\n * Version information includes not just version number but also\n * optionally group and artifact ids of the component being versioned.\n *<p>\n * Note that optional group and artifact id properties are new with Jackson 2.0:\n * if provided, they should align with Maven artifact information.",public ,,java.lang.Comparable;java.io.Serializable
com.fasterxml.jackson.core.StreamReadCapability,Enum,"* Set of on/off capabilities that a {@link JsonParser} for given format\n * (or in case of buffering, original format) has.\n * Used in some cases to adjust aspects of things like content conversions,\n * coercions and validation by format-agnostic functionality.\n * Specific or expected usage documented by individual capability entry\n * Javadocs.\n *\n * @since 2.12",public ,enum has no extends,com.fasterxml.jackson.core.util.JacksonFeature
com.fasterxml.jackson.core.base.GeneratorBase,Abstract Class,"* This base class implements part of API that a JSON generator exposes\n * to applications, adds shared internal methods that sub-classes\n * can use and adds some abstract methods sub-classes must implement.","public , abstract ",com.fasterxml.jackson.core.JsonGenerator,
com.fasterxml.jackson.core.base.ParserMinimalBase,Abstract Class,"* Intermediate base class used by all Jackson {@link JsonParser}\n * implementations, but does not add any additional fields that depend\n * on particular method of obtaining input.\n *<p>\n * Note that 'minimal' here mostly refers to minimal number of fields\n * (size) and functionality that is specific to certain types\n * of parser implementations; but not necessarily to number of methods.","public , abstract ",com.fasterxml.jackson.core.JsonParser,
com.fasterxml.jackson.core.base.ParserBase,Abstract Class,* Intermediate base class used by all Jackson {@link JsonParser}\n * implementations. Contains most common things that are independent\n * of actual underlying input source.,"public , abstract ",com.fasterxml.jackson.core.base.ParserMinimalBase,
com.fasterxml.jackson.core.JsonFactoryBuilder,Class,"* {@link com.fasterxml.jackson.core.TSFBuilder}\n * implementation for constructing vanilla {@link JsonFactory}\n * instances for reading/writing JSON encoded content.\n *<p>\n * NOTE: as of Jackson 2.x, use of JSON-specific builder is bit cumbersome\n * since {@link JsonFactory} serves dual duty of base class AND actual\n * implementation for JSON backend. This will be fixed in Jackson 3.0.\n *\n * @since 2.10",public ,com.fasterxml.jackson.core.TSFBuilder,
com.fasterxml.jackson.core.JsonpCharacterEscapes,Class,"* Convenience {@link CharacterEscapes} implementation that escapes\n * Unicode characters `0x2028` and `0x2029` (in addition to characters\n * escaped otherwise), which are apparently considered linefeeds as\n * per newer Javascript specifications, and consequently problematic\n * when using JSONP (see https://en.wikipedia.org/wiki/JSONP).\n *\n * @since 2.8",public ,com.fasterxml.jackson.core.io.CharacterEscapes,
com.fasterxml.jackson.core.ErrorReportConfiguration,Class,"* Container for configuration values used when handling errorneous token inputs. \n * For example, unquoted text segments.\n * <p>\n * Currently default settings are\n * <ul>\n *     <li>Maximum length of token to include in error messages (see {@link #_maxErrorTokenLength})\n *     <li>Maximum length of raw content to include in error messages (see {@link #_maxRawContentLength})\n * </ul>\n *\n * @since 2.16",public ,,java.io.Serializable
com.fasterxml.jackson.core.ErrorReportConfiguration$Builder,Class,No Comment,"public , static , final ",,
com.fasterxml.jackson.core.JsonLocation,Class,"* Object that encapsulates Location information used for reporting\n * parsing (or potentially generation) errors, as well as current location\n * within input streams.\n *<p>\n * NOTE: users should be careful if using {@link #equals} implementation as\n * it may or may not compare underlying ""content reference"" for equality.\n * Instead if would make sense to explicitly implementing equality checks\n * using specific criteria caller desires.",public ,,java.io.Serializable
