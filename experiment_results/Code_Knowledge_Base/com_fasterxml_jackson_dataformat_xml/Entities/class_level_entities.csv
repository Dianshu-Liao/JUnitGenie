FEN:ID,:LABEL,Comment,Modifiers,Extends,Implements
com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter,Interface,* There are some XML-specific quirks that need extra TLC when\n * indenting: so we will use a refinement of general purpose one.,public ,com.fasterxml.jackson.core.PrettyPrinter,
com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder,Class,* {@link com.fasterxml.jackson.core.TSFBuilder} implementation\n * for constructing {@link XmlFactory} instances.,public ,com.fasterxml.jackson.core.TSFBuilder,
com.fasterxml.jackson.dataformat.xml.util.XmlInfo,Class,* Helper container class used to contain XML specific information\n * we need to retain to construct proper bean serializer,public ,,
com.fasterxml.jackson.dataformat.xml.util.StaxUtil,Class,No Comment,public ,,
com.fasterxml.jackson.dataformat.xml.util.StaxUtil$Base64Mapper,Class,No Comment,"private , static ",,
com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil,Class,No Comment,public ,,
com.fasterxml.jackson.dataformat.xml.util.CaseInsensitiveNameSet,Class,"* Helper class for matching element wrappers, possibly in case-insensitive\n * manner.\n *\n * @since 2.12","public , final ",java.util.AbstractSet,
com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter,Class,"* Indentation to use with XML is different from JSON, because JSON\n * requires use of separator characters and XML just basic whitespace.\n *<p>\n * Note that only a subset of methods of {@link PrettyPrinter} actually\n * get called by {@link ToXmlGenerator}; because of this, implementation\n * is bit briefer (and uglier...).",public ,,com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter;com.fasterxml.jackson.core.util.Instantiatable;java.io.Serializable
com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter,Interface,"* Interface that defines objects that can produce indentation used\n     * to separate object entries and array values. Indentation in this\n     * context just means insertion of white space, independent of whether\n     * linefeeds are output.",public ,,
com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter,Class,* Dummy implementation that adds no indentation whatsoever,"protected , static ",,com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter;java.io.Serializable
com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter,Class,* This is a very simple indenter that only every adds a\n     * single space for indentation. It is used as the default\n     * indenter for array values.,"protected , static ",,com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter;java.io.Serializable
com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter,Class,* Default linefeed-based indenter uses system-specific linefeeds and\n     * 2 spaces for indentation per level.,protected ,,com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter;java.io.Serializable
com.fasterxml.jackson.dataformat.xml.util.TypeUtil,Class,No Comment,public ,,
com.fasterxml.jackson.dataformat.xml.util.Stax2JacksonReaderAdapter,Class,"* Refinement of {@link Stax2ReaderAdapter} to override certain methods,\n * to patch over flaws of JDK-provided default Stax implementation, SJSXP\n *\n * @since 2.17",public ,org.codehaus.stax2.ri.Stax2ReaderAdapter,
com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup,Class,* Helper class used for efficiently finding root element name used with\n * XML serializations.,public ,,java.io.Serializable
com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder,Class,"* Custom specialization of {@link StdTypeResolverBuilder}; needed so that\n * type id property name can be modified as necessary to make it legal\n * XML element or attribute name.\n *<p>\n * NOTE: Since 2.17, property name cleansing only applied to default\n * names (like {@code ""@class""} and {@code ""@type""}) but not to explicitly\n * specified ones (where caller presumably knows what to do).",public ,com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder,
com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver,Class,No Comment,"protected , static ",com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver,
com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver,Class,No Comment,"protected , static ",com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver,
com.fasterxml.jackson.dataformat.xml.XmlNameProcessor,Interface,"* API of processors primarily used for dealing with XML names\n * containing invalid characters. Invalid characters in names can,\n * for instance, easily appear in map keys.\n * <p>\n * Processors should be set in the {@link XmlMapper#setXmlNameProcessor}\n * and/or the {@link XmlMapper.Builder#xmlNameProcessor} methods.\n * <p>\n * See {@link XmlNameProcessors} for default processors.\n *\n * @since 2.14",public ,java.io.Serializable,
com.fasterxml.jackson.dataformat.xml.XmlNameProcessor$XmlName,Class,* Representation of an XML element or attribute name,,,
com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector,Interface,* Additional extension interface used above and beyond\n * {@link AnnotationIntrospector} to handle XML-specific configuration.,public ,com.fasterxml.jackson.databind.AnnotationIntrospector.XmlExtensions,
com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair,Class,* Extension of <code>AnnotationIntrospector.Pair</code> that can\n     * also dispatch 'XmlAnnotationIntrospector' methods.,"public , static ",com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair,com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector
com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext,Class,"* Extension of {@link JsonStreamContext}, which implements\n * core methods needed, and adds small amount of additional\n * state data we need.\n *<p>\n * Almost same as standard <code>JsonReaderContext</code>, but\n * custom version needed to be able to keep track of names\n * of properties that need wrapping; this is needed to\n * support wrapped/unwrapped Collection/array values.","public , final ",com.fasterxml.jackson.core.JsonStreamContext,
com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer,Class,"* Delegating deserializer that is used in the special cases where\n * we may sometimes see a ""plain"" String value but need to map it\n * as if it was a property of POJO. The impedance is introduced by\n * heuristic conversion from XML events into rough JSON equivalents;\n * and this is one work-around that can only be done after the fact.",public ,com.fasterxml.jackson.databind.deser.std.DelegatingDeserializer,
com.fasterxml.jackson.dataformat.xml.deser.ElementWrappable,Interface,"* Minimal API to be implemented by XML-backed parsers for which ""virtual""\n * wrapping may be imposed.\n *<p>\n * NOTE: this method is considered part of internal implementation\n * interface, and it is <b>NOT</b> guaranteed to remain unchanged\n * between minor versions (it is however expected not to change in\n * patch versions). So if you have to use it, be prepared for\n * possible additional work.\n *\n * @since 2.15",public ,,
com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper,Class,* Helper class needed to keep track of virtual wrapper elements\n * added in the logical XML token stream.,default,,
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser,Class,* {@link JsonParser} implementation that exposes XML structure as\n * set of JSON events that can be used for data binding.,public ,com.fasterxml.jackson.core.base.ParserMinimalBase,com.fasterxml.jackson.dataformat.xml.deser.ElementWrappable
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature,Enum,* Enumeration that defines all togglable features for XML parsers.,public ,enum has no extends,com.fasterxml.jackson.core.FormatFeature
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream,Class,"* Simple helper class used on top of STAX {@link XMLStreamReader} to further\n * abstract out all irrelevant details, and to expose equivalent of flat token\n * stream with no ""fluff"" tokens (comments, processing instructions, mixed\n * content) all of which is just to simplify\n * actual higher-level conversion to JSON tokens.\n *<p>\n * Beyond initial idea there are also couple of other detours like ability\n * to ""replay"" some tokens, add virtual wrappers (ironically to support ""unwrapped""\n * array values), and to unroll ""Objects"" into String values in some cases.",public ,,
com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier,Class,* The main reason for a modifier is to support handling of\n * 'wrapped' Collection types.,public ,com.fasterxml.jackson.databind.deser.BeanDeserializerModifier,java.io.Serializable
com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext,Class,* XML-specific {@link DeserializationContext} needed to override certain\n * handlers.\n *\n * @since 2.12,public ,com.fasterxml.jackson.databind.deser.DefaultDeserializationContext,
com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer,Class,"* Delegating deserializer whose only function is to handle case of\n * ""unwrapped"" List/array deserialization from XML.",public ,com.fasterxml.jackson.databind.deser.std.DelegatingDeserializer,
com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder,Class,* Sub-class of {@code StdTypeResolverBuilder} specifically used with\n * Default Typing.\n *<p>\n * Composition/sub-classing gets quite tricky here: ideally we would just\n * extend {@link XmlTypeResolverBuilder} but unfortunately inheritance hierarchy\n * does not allow this.\n *\n * @since 2.10,public ,com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder,java.io.Serializable
com.fasterxml.jackson.dataformat.xml.PackageVersion,Class,* Automatically generated from PackageVersion.java.in during\n * packageVersion-generate execution of maven-replacer-plugin in\n * pom.xml.,"public , final ",,com.fasterxml.jackson.core.Versioned
com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector,Class,"* Alternative {@link com.fasterxml.jackson.databind.AnnotationIntrospector}\n * implementation that\n * that USED TO build on {@code JaxbAnnotationIntrospector} from\n * {@code jackson-module-jaxb-annotatins} package.\n * But as of Jackson 2.13, SHOULD NOT BE USED as it DOES NOT WORK.\n * Removal was necessary because XML format package does not (and can not)\n * depend on JAXB annotations.\n * Class WILL BE REMOVED from Jackson 2.14 or later on.\n *<p>\n *\n * @deprecated Since 2.12 (as per above notes): broken since 2.13",public ,com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector,com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector
com.fasterxml.jackson.dataformat.xml.JacksonXmlModule,Class,"* Module that implements most functionality needed to support producing and\n * consuming XML instead of JSON, used by {@link XmlMapper} for registering\n * handlers for XML-specific processing.\n *<p>\n * NOTE: please do NOT register this directly on {@link XmlMapper}: mapper\n * registers an instance (either one explicitly given in constructor, or, if none,\n * one it configures) and attempts to re-register is unlikely to work as\n * you'd expect.",public ,com.fasterxml.jackson.databind.module.SimpleModule,java.io.Serializable
com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector,Class,"* Extension of {@link JacksonAnnotationIntrospector} that is needed to support\n * additional xml-specific annotation that Jackson provides. Note, however, that\n * there is no JAXB annotation support here; that is provided with\n * separate introspector (see\n * https://github.com/FasterXML/jackson-modules-base/tree/master/jaxb,\n * class {@code com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector}).",public ,com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector,com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector
com.fasterxml.jackson.dataformat.xml.XmlNameProcessors,Class,* Contains default {@link XmlNameProcessor} implementations.\n * <p>\n * Processors should be set in the {@link XmlMapper#setXmlNameProcessor(XmlNameProcessor)}\n * and/or the {@link XmlMapper.Builder#xmlNameProcessor(XmlNameProcessor)} methods.\n *\n * @since 2.14,"public , final ",,
com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$PassthroughProcessor,Class,No Comment,static ,,com.fasterxml.jackson.dataformat.xml.XmlNameProcessor
com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$ReplaceNameProcessor,Class,No Comment,static ,,com.fasterxml.jackson.dataformat.xml.XmlNameProcessor
com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor,Class,No Comment,static ,,com.fasterxml.jackson.dataformat.xml.XmlNameProcessor
com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$AlwaysOnBase64NameProcessor,Class,No Comment,static ,,com.fasterxml.jackson.dataformat.xml.XmlNameProcessor
com.fasterxml.jackson.dataformat.xml.XmlFactory,Class,* Factory used for constructing {@link FromXmlParser} and {@link ToXmlGenerator}\n* instances.\n*<p>\n* Implements {@link JsonFactory} since interface for constructing XML backed\n* parsers and generators is quite similar to dealing with JSON.\n* \n* @author Tatu Saloranta (tatu.saloranta@iki.fi),public ,com.fasterxml.jackson.core.JsonFactory,
com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier,Class,* We need a {@link BeanSerializerModifier} to replace default <code>BeanSerializer</code>\n * with XML-specific one; mostly to ensure that attribute properties are output\n * before element properties.,public ,com.fasterxml.jackson.databind.ser.BeanSerializerModifier,java.io.Serializable
com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase,Abstract Class,"* Specific sub-class of {@link BeanSerializerBase} needed to take care\n * of some xml-specific aspects, such as distinction between attributes\n * and elements.","public , abstract ",com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,
com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider,Class,"* We need to override some parts of\n * {@link com.fasterxml.jackson.databind.SerializerProvider}\n * implementation to handle oddities of XML output, like ""extra"" root element.",public ,com.fasterxml.jackson.databind.ser.DefaultSerializerProvider,
com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer,Class,* Copy of {@link UnwrappingBeanSerializer} required to extend\n * {@link XmlBeanSerializerBase} for XML-specific handling.\n * \n * @author Pascal Gélinas\n *,public ,com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase,
com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator,Class,"* {@link JsonGenerator} that outputs JAXB-style XML output instead of JSON content.\n * Operation requires calling code (usually either standard Jackson serializers,\n * or in some cases (like <code>BeanSerializer</code>) customized ones) to do\n * additional configuration calls beyond regular {@link JsonGenerator} API,\n * mostly to pass namespace information.",public ,com.fasterxml.jackson.core.base.GeneratorBase,
com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature,Enum,* Enumeration that defines all togglable extra XML-specific features,public ,enum has no extends,com.fasterxml.jackson.core.FormatFeature
com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter,Class,"* Property writer sub-class used for handling element wrapping needed for serializing\n * collection (array, Collection; possibly Map) types.",public ,com.fasterxml.jackson.databind.ser.BeanPropertyWriter,
com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer,Class,* Variant of {@link BeanSerializer} for XML handling.\n * \n * @author Pascal Gélinas,public ,com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase,
com.fasterxml.jackson.dataformat.xml.XmlMapper,Class,"* Customized {@link ObjectMapper} that will read and write XML instead of JSON,\n * using XML-backed {@link com.fasterxml.jackson.core.JsonFactory}\n * implementation ({@link XmlFactory}).\n *<p>\n * Mapper itself overrides some aspects of functionality to try to handle\n * data binding aspects as similar to JAXB as possible.\n *<p>\n * Note that most of configuration should be done by pre-constructing\n * {@link JacksonXmlModule} explicitly, instead of relying on default settings.",public ,com.fasterxml.jackson.databind.ObjectMapper,
com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder,Class,* Builder implementation for constructing {@link XmlMapper} instances.\n     *\n     * @since 2.10,"public , static ",com.fasterxml.jackson.databind.cfg.MapperBuilder,
