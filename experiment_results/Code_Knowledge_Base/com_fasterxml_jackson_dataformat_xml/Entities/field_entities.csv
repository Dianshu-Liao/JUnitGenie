FEN:ID,:LABEL,Comment,Source Code,Signature,Modifiers
com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder._formatParserFeatures,Field,"* Set of {@code FromXmlParser.Feature}s enabled, as bitmask.",protected int _formatParserFeatures;,int _formatParserFeatures,protected 
com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder._formatGeneratorFeatures,Field,"* Set of {@@code ToXmlGenerator.Feature}s enabled, as bitmask.",protected int _formatGeneratorFeatures;,int _formatGeneratorFeatures,protected 
com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder._xmlInputFactory,Field,"* Stax factory for creating underlying input stream readers;\n     * `null` for ""use default instance with default settings""",protected XMLInputFactory _xmlInputFactory;,javax.xml.stream.XMLInputFactory _xmlInputFactory,protected 
com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder._xmlOutputFactory,Field,"* Stax factory for creating underlying output stream writers;\n     * `null` for ""use default instance with default settings""",protected XMLOutputFactory _xmlOutputFactory;,javax.xml.stream.XMLOutputFactory _xmlOutputFactory,protected 
com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder._nameForTextElement,Field,"* In cases where a start element has both attributes and non-empty textual\n     * value, we have to create a bogus property; we will use this as\n     * the property name.\n     *<p>\n     * Name used for pseudo-property used for returning XML Text value (which does\n     * not have actual element name to use). Defaults to empty String, but\n     * may be changed for interoperability reasons: JAXB, for example, uses\n     * ""value"" as name.",protected String _nameForTextElement;,java.lang.String _nameForTextElement,protected 
com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder._classLoaderForStax,Field,"* Optional {@link ClassLoader} to use for constructing\n     * {@link XMLInputFactory} and {@kink XMLOutputFactory} instances if\n     * not explicitly specified by caller. If not specified, will\n     * default to {@link ClassLoader} that loaded this class.\n     *\n     * @since 2.13",protected ClassLoader _classLoaderForStax;,java.lang.ClassLoader _classLoaderForStax,protected 
com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder._nameProcessor,Field,* See {@link XmlNameProcessor} and {@link XmlNameProcessors}\n     *\n     * @since 2.14,protected XmlNameProcessor _nameProcessor;,com.fasterxml.jackson.dataformat.xml.XmlNameProcessor _nameProcessor,protected 
com.fasterxml.jackson.dataformat.xml.util.XmlInfo._namespace,Field,No Comment,protected final String _namespace;,java.lang.String _namespace,"protected , final "
com.fasterxml.jackson.dataformat.xml.util.XmlInfo._isAttribute,Field,No Comment,protected final boolean _isAttribute;,boolean _isAttribute,"protected , final "
com.fasterxml.jackson.dataformat.xml.util.XmlInfo._isText,Field,No Comment,protected final boolean _isText;,boolean _isText,"protected , final "
com.fasterxml.jackson.dataformat.xml.util.XmlInfo._isCData,Field,No Comment,protected final boolean _isCData;,boolean _isCData,"protected , final "
com.fasterxml.jackson.dataformat.xml.util.StaxUtil$Base64Mapper.instance,Field,No Comment,public final static Base64Mapper instance = new Base64Mapper();,com.fasterxml.jackson.dataformat.xml.util.StaxUtil$Base64Mapper instance,"public , final , static "
com.fasterxml.jackson.dataformat.xml.util.StaxUtil$Base64Mapper.j2stax2,Field,No Comment,"private final Map<String, org.codehaus.stax2.typed.Base64Variant> j2stax2 = new HashMap<>();",java.util.Map j2stax2,"private , final "
com.fasterxml.jackson.dataformat.xml.util.CaseInsensitiveNameSet._namesToMatch,Field,No Comment,private final Set<String> _namesToMatch;,java.util.Set _namesToMatch,"private , final "
com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.serialVersionUID,Field,since 2.6,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._arrayIndenter,Field,"* By default, let's use only spaces to separate array values.",protected Indenter _arrayIndenter = new FixedSpaceIndenter();,com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter _arrayIndenter,protected 
com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter,Field,"* By default, let's use linefeed-adding indenter for separate\n     * object entries. We'll further configure indenter to use\n     * system-specific linefeeds, and 2 spaces per level (as opposed to,\n     * say, single tabs)",protected Indenter _objectIndenter = new Lf2SpacesIndenter();,com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter _objectIndenter,protected 
com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.SYSTEM_DEFAULT_NEW_LINE,Field,"* By default, will try to set as System.getProperty(""line.separator"").\n     * Can later set custom new line with withCustomNewLine method.\n     * @since 2.15",private static final String SYSTEM_DEFAULT_NEW_LINE;,java.lang.String SYSTEM_DEFAULT_NEW_LINE,"private , static , final "
com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._newLine,Field,No Comment,protected String _newLine = SYSTEM_DEFAULT_NEW_LINE;,java.lang.String _newLine,protected 
com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.SPACE_COUNT,Field,No Comment,static final int SPACE_COUNT = 64;,int SPACE_COUNT,"static , final "
com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.SPACES,Field,No Comment,static final char[] SPACES = new char[SPACE_COUNT];,char[] SPACES,"static , final "
com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._nesting,Field,* Number of open levels of nesting. Used to determine amount of\n     * indentation to use.,protected transient int _nesting = 0;,int _nesting,"protected , transient "
com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._justHadStartElement,Field,"* Marker flag set on start element, and cleared if an end element\n     * is encountered. Used for suppressing indentation to allow empty\n     * elements.\n     * \n     * @since 2.3",protected transient boolean _justHadStartElement;,boolean _justHadStartElement,"protected , transient "
com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.util.Stax2JacksonReaderAdapter._delegate,Field,No Comment,private final XMLStreamReader _delegate;,javax.xml.stream.XMLStreamReader _delegate,"private , final "
com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.ROOT_NAME_FOR_NULL,Field,"* If all we get to serialize is a null, there's no way to figure out\n     * expected root name; so let's just default to literal {@code ""null""}.","public final static QName ROOT_NAME_FOR_NULL = new QName(""null"");",javax.xml.namespace.QName ROOT_NAME_FOR_NULL,"public , final , static "
com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._rootNames,Field,"* For efficient operation, let's try to minimize number of times we\n     * need to introspect root element name to use.\n     *<p>\n     * Note: changed to <code>transient</code> for 2.3; no point in serializing such\n     * state","protected final transient LRUMap<ClassKey, QName> _rootNames;",com.fasterxml.jackson.databind.util.LRUMap _rootNames,"protected , final , transient "
com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 2L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 2L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.XmlNameProcessor$XmlName.namespace,Field,No Comment,public String namespace;,java.lang.String namespace,public 
com.fasterxml.jackson.dataformat.xml.XmlNameProcessor$XmlName.localPart,Field,No Comment,public String localPart;,java.lang.String localPart,public 
com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair._xmlPrimary,Field,No Comment,protected final AnnotationIntrospector.XmlExtensions _xmlPrimary;,com.fasterxml.jackson.databind.AnnotationIntrospector$XmlExtensions _xmlPrimary,"protected , final "
com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair._xmlSecondary,Field,No Comment,protected final AnnotationIntrospector.XmlExtensions _xmlSecondary;,com.fasterxml.jackson.databind.AnnotationIntrospector$XmlExtensions _xmlSecondary,"protected , final "
com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._parent,Field,No Comment,protected final XmlReadContext _parent;,com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext _parent,"protected , final "
com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._lineNr,Field,No Comment,protected int _lineNr;,int _lineNr,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._columnNr,Field,No Comment,protected int _columnNr;,int _columnNr,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._currentName,Field,No Comment,protected String _currentName;,java.lang.String _currentName,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._currentValue,Field,* @since 2.9,protected Object _currentValue;,java.lang.Object _currentValue,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._namesToWrap,Field,No Comment,protected Set<String> _namesToWrap;,java.util.Set _namesToWrap,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._wrappedName,Field,* Name of property that requires wrapping,protected String _wrappedName;,java.lang.String _wrappedName,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._child,Field,No Comment,protected XmlReadContext _child = null;,com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext _child,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._xmlTextPropertyIndex,Field,"* Property index of the ""XML text property""; needed for finding actual\n     * property instance after resolution and contextualization: instance\n     * may change, but index will remain constant.",protected final int _xmlTextPropertyIndex;,int _xmlTextPropertyIndex,"protected , final "
com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._xmlTextProperty,Field,"* Actual property that is indicated to be of type ""XML Text"" (and\n     * is the only element-valued property)",protected final SettableBeanProperty _xmlTextProperty;,com.fasterxml.jackson.databind.deser.SettableBeanProperty _xmlTextProperty,"protected , final "
com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._valueInstantiator,Field,No Comment,protected final ValueInstantiator _valueInstantiator;,com.fasterxml.jackson.databind.deser.ValueInstantiator _valueInstantiator,"protected , final "
com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._parent,Field,No Comment,protected final ElementWrapper _parent;,com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper _parent,"protected , final "
com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._wrapperName,Field,No Comment,protected final String _wrapperName;,java.lang.String _wrapperName,"protected , final "
com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._wrapperNamespace,Field,No Comment,protected final String _wrapperNamespace;,java.lang.String _wrapperNamespace,"protected , final "
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.DEFAULT_UNNAMED_TEXT_PROPERTY,Field,"* The default name placeholder for XML text segments is empty\n     * String ("""").","public final static String DEFAULT_UNNAMED_TEXT_PROPERTY = """";",java.lang.String DEFAULT_UNNAMED_TEXT_PROPERTY,"public , final , static "
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.XML_READ_CAPABILITIES,Field,"* XML format has some peculiarities, indicated via new (2.12) capability\n     * system.\n     *\n     * @since 2.12",protected final static JacksonFeatureSet<StreamReadCapability> XML_READ_CAPABILITIES = DEFAULT_READ_CAPABILITIES.with(StreamReadCapability.DUPLICATE_PROPERTIES).with(StreamReadCapability.SCALARS_AS_OBJECTS).with(StreamReadCapability.UNTYPED_SCALARS);,com.fasterxml.jackson.core.util.JacksonFeatureSet XML_READ_CAPABILITIES,"protected , final , static "
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._cfgNameForTextElement,Field,"* In cases where a start element has both attributes and non-empty textual\n     * value, we have to create a bogus property; we will use this as\n     * the property name.\n     *<p>\n     * Name used for pseudo-property used for returning XML Text value (which does\n     * not have actual element name to use). Defaults to empty String, but\n     * may be changed for inter-operability reasons: JAXB, for example, uses\n     * ""value"" as name.\n     * \n     * @since 2.1",protected String _cfgNameForTextElement = DEFAULT_UNNAMED_TEXT_PROPERTY;,java.lang.String _cfgNameForTextElement,protected 
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._formatFeatures,Field,* Bit flag composed of bits that indicate which\n     * {@link FromXmlParser.Feature}s\n     * are enabled.,protected int _formatFeatures;,int _formatFeatures,protected 
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._objectCodec,Field,No Comment,protected ObjectCodec _objectCodec;,com.fasterxml.jackson.core.ObjectCodec _objectCodec,protected 
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._ioContext,Field,No Comment,protected final IOContext _ioContext;,com.fasterxml.jackson.core.io.IOContext _ioContext,"protected , final "
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._closed,Field,* Flag that indicates whether parser is closed or not. Gets\n     * set when parser is either closed by explicit call\n     * ({@link #close}) or when end-of-input is reached.,protected boolean _closed;,boolean _closed,protected 
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._parsingContext,Field,"* Information about parser context, context in which\n     * the next token is to be parsed (root, array, object).",protected XmlReadContext _parsingContext;,com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext _parsingContext,protected 
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._xmlTokens,Field,No Comment,protected final XmlTokenStream _xmlTokens;,com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream _xmlTokens,"protected , final "
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._mayBeLeaf,Field,* \n     * We need special handling to keep track of whether a value\n     * may be exposed as simple leaf value.,protected boolean _mayBeLeaf;,boolean _mayBeLeaf,protected 
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._nextToken,Field,No Comment,protected JsonToken _nextToken;,com.fasterxml.jackson.core.JsonToken _nextToken,protected 
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._currText,Field,No Comment,protected String _currText;,java.lang.String _currText,protected 
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._nextIsLeadingMixed,Field,"* Additional flag that is strictly needed when exposing ""mixed"" leading\n     * String value as ""anonymous"" property/string pair. If so, code returns\n     * START_OBJECT first, sets {@code _nextToken} to be {@code FIELD_NAME}\n     * and sets this flag to indicate use of ""anonymous"" marker.\n     *\n     * @since 2.13",protected boolean _nextIsLeadingMixed;,boolean _nextIsLeadingMixed,protected 
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._byteArrayBuilder,Field,"* ByteArrayBuilder is needed if 'getBinaryValue' is called. If so,\n     * we better reuse it for remainder of content.",protected ByteArrayBuilder _byteArrayBuilder = null;,com.fasterxml.jackson.core.util.ByteArrayBuilder _byteArrayBuilder,protected 
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._binaryValue,Field,"* We will hold on to decoded binary data, for duration of\n     * current event, so that multiple calls to\n     * {@link #getBinaryValue} will not need to decode data more\n     * than once.",protected byte[] _binaryValue;,byte[] _binaryValue,protected 
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._numTypesValid,Field,* Bitfield that indicates which numeric representations\n     * have been calculated for the current type,protected int _numTypesValid = NR_UNKNOWN;,int _numTypesValid,protected 
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._numberInt,Field,No Comment,protected int _numberInt;,int _numberInt,protected 
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._numberLong,Field,No Comment,protected long _numberLong;,long _numberLong,protected 
com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._numberBigInt,Field,No Comment,protected BigInteger _numberBigInt;,java.math.BigInteger _numberBigInt,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XML_START_ELEMENT,Field,No Comment,public final static int XML_START_ELEMENT = 1;,int XML_START_ELEMENT,"public , final , static "
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XML_END_ELEMENT,Field,No Comment,public final static int XML_END_ELEMENT = 2;,int XML_END_ELEMENT,"public , final , static "
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XML_ATTRIBUTE_NAME,Field,No Comment,public final static int XML_ATTRIBUTE_NAME = 3;,int XML_ATTRIBUTE_NAME,"public , final , static "
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XML_ATTRIBUTE_VALUE,Field,No Comment,public final static int XML_ATTRIBUTE_VALUE = 4;,int XML_ATTRIBUTE_VALUE,"public , final , static "
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XML_TEXT,Field,No Comment,public final static int XML_TEXT = 5;,int XML_TEXT,"public , final , static "
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XML_ROOT_TEXT,Field,needs some more state management too,public final static int XML_ROOT_TEXT = 7;,int XML_ROOT_TEXT,"public , final , static "
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XML_END,Field,No Comment,public final static int XML_END = 8;,int XML_END,"public , final , static "
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.REPLAY_START_DUP,Field,No Comment,private final static int REPLAY_START_DUP = 1;,int REPLAY_START_DUP,"private , final , static "
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.REPLAY_END,Field,No Comment,private final static int REPLAY_END = 2;,int REPLAY_END,"private , final , static "
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.REPLAY_START_DELAYED,Field,No Comment,private final static int REPLAY_START_DELAYED = 3;,int REPLAY_START_DELAYED,"private , final , static "
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XSI_NAMESPACE,Field,No Comment,private final static String XSI_NAMESPACE = XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI;,java.lang.String XSI_NAMESPACE,"private , final , static "
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._xmlReader,Field,No Comment,protected final XMLStreamReader2 _xmlReader;,org.codehaus.stax2.XMLStreamReader2 _xmlReader,"protected , final "
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._sourceReference,Field,@since 2.13 (was untyped before),protected final ContentReference _sourceReference;,com.fasterxml.jackson.core.io.ContentReference _sourceReference,"protected , final "
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._formatFeatures,Field,* Bit flag composed of bits that indicate which\n     * {@link FromXmlParser.Feature}s\n     * are enabled.,protected int _formatFeatures;,int _formatFeatures,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._cfgProcessXsiNil,Field,No Comment,protected boolean _cfgProcessXsiNil;,boolean _cfgProcessXsiNil,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._cfgProcessXsiType,Field,@since 2.17,protected boolean _cfgProcessXsiType;,boolean _cfgProcessXsiType,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nameProcessor,Field,No Comment,protected XmlNameProcessor _nameProcessor;,com.fasterxml.jackson.dataformat.xml.XmlNameProcessor _nameProcessor,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentState,Field,No Comment,protected int _currentState;,int _currentState,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._attributeCount,Field,No Comment,protected int _attributeCount;,int _attributeCount,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._xsiNilFound,Field,"* Marker used to indicate presence of `xsi:nil=""true""' in current START_ELEMENT.\n     *\n     * @since 2.10",protected boolean _xsiNilFound;,boolean _xsiNilFound,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._startElementAfterText,Field,* Flag set true if current event is {@code XML_TEXT} and there is START_ELEMENT\n     *\n     * @since 2.12,protected boolean _startElementAfterText;,boolean _startElementAfterText,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextAttributeIndex,Field,"* Index of the next attribute of the current START_ELEMENT\n     * to return (as field name and value pair), if any; -1\n     * when no attributes to return",protected int _nextAttributeIndex;,int _nextAttributeIndex,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._localName,Field,No Comment,protected String _localName;,java.lang.String _localName,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._namespaceURI,Field,No Comment,protected String _namespaceURI;,java.lang.String _namespaceURI,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._textValue,Field,* Current text value for TEXT_VALUE returned,protected String _textValue;,java.lang.String _textValue,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._repeatCurrentToken,Field,"* Marker flag set if caller wants to ""push back"" current token so\n     * that next call to {@link #next()} should simply be given what was\n     * already read.\n     *\n     * @since 2.12",protected boolean _repeatCurrentToken;,boolean _repeatCurrentToken,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nameToDecode,Field,* Reusable internal value object\n     *\n     * @since 2.14,protected XmlNameProcessor.XmlName _nameToDecode = new XmlNameProcessor.XmlName();,com.fasterxml.jackson.dataformat.xml.XmlNameProcessor$XmlName _nameToDecode,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._repeatElement,Field,"* Flag used to indicate that given element should be ""replayed"".",protected int _repeatElement;,int _repeatElement,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentWrapper,Field,"* Wrapping state, if any active (null if none)",protected ElementWrapper _currentWrapper;,com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper _currentWrapper,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextLocalName,Field,"* In cases where we need to 'inject' a virtual END_ELEMENT, we may also\n     * need to restore START_ELEMENT afterwards; if so, this is where names\n     * are held.",protected String _nextLocalName;,java.lang.String _nextLocalName,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextNamespaceURI,Field,No Comment,protected String _nextNamespaceURI;,java.lang.String _nextNamespaceURI,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._cfgNameForTextValue,Field,* Virtual name used for text segments.,"protected String _cfgNameForTextValue = """";",java.lang.String _cfgNameForTextValue,protected 
com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._namesToWrap,Field,"* (Simple) Names of properties, for which virtual wrapping is needed\n     * to compensate: these are so-called 'unwrapped' XML lists where property\n     * name is used for elements, and not as List markers.",protected final Set<String> _namesToWrap;,java.util.Set _namesToWrap,"protected , final "
com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._type,Field,No Comment,protected final JavaType _type;,com.fasterxml.jackson.databind.JavaType _type,"protected , final "
com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._caseInsensitive,Field,@since 2.12,protected final boolean _caseInsensitive;,boolean _caseInsensitive,"protected , final "
com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.PackageVersion.VERSION,Field,No Comment,"public final static Version VERSION = VersionUtil.parseVersion(""2.19.0-SNAPSHOT"", ""com.fasterxml.jackson.dataformat"", ""jackson-dataformat-xml"");",com.fasterxml.jackson.core.Version VERSION,"public , final , static "
com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.serialVersionUID,Field,since 2.7,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._cfgDefaultUseWrapper,Field,"* Determination of whether indexed properties (arrays, Lists) that are not explicitly\n     * annotated (with {@link com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper}\n     * or equivalent) should default to using implicit wrapper (with same name as property) or not.\n     * If enabled, wrapping is used by default; if false, it is not.\n     *<p>\n     * Note that JAXB annotation introspector always assumes ""do not wrap by default"".\n     * Jackson annotations have different default due to backwards compatibility.\n     * \n     * @since 2.1",protected boolean _cfgDefaultUseWrapper = JacksonXmlAnnotationIntrospector.DEFAULT_USE_WRAPPER;,boolean _cfgDefaultUseWrapper,protected 
com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._cfgNameForTextElement,Field,"* Name used for pseudo-property used for returning XML Text value (which does\n     * not have actual element name to use). Defaults to empty String, but\n     * may be changed for inter-operability reasons: JAXB, for example, uses\n     * ""value"" as name.\n     * \n     * @since 2.1",protected String _cfgNameForTextElement = FromXmlParser.DEFAULT_UNNAMED_TEXT_PROPERTY;,java.lang.String _cfgNameForTextElement,protected 
com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._serializerFactoryOverride,Field,* Optional override for {@link SerializerFactory}\n     * used by {@link XmlMapper}. Needed to allow proper override and configurability\n     * using custom {@SerializerFactory} implementations.\n     * \n     * @since 2.18.2,protected SerializerFactory _serializerFactoryOverride;,com.fasterxml.jackson.databind.ser.SerializerFactory _serializerFactoryOverride,protected 
com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.ANNOTATIONS_TO_INFER_XML_PROP,Field,@since 2.11.1,"@SuppressWarnings(""unchecked"")\nprivate final static Class<? extends Annotation>[] ANNOTATIONS_TO_INFER_XML_PROP = (Class<? extends Annotation>[]) new Class<?>[] { JacksonXmlText.class, JacksonXmlElementWrapper.class };",java.lang.Class[] ANNOTATIONS_TO_INFER_XML_PROP,"private , final , static "
com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.DEFAULT_USE_WRAPPER,Field,"* For backwards compatibility with 2.0, the default behavior is\n     * to assume use of List wrapper if no annotations are used.",public final static boolean DEFAULT_USE_WRAPPER = true;,boolean DEFAULT_USE_WRAPPER,"public , final , static "
com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._cfgDefaultUseWrapper,Field,"non-final from 2.7 on, to allow mapper to change",protected boolean _cfgDefaultUseWrapper;,boolean _cfgDefaultUseWrapper,protected 
com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$PassthroughProcessor.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$ReplaceNameProcessor.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$ReplaceNameProcessor.BEGIN_MATCHER,Field,No Comment,"private static final Pattern BEGIN_MATCHER = Pattern.compile(""^[^a-zA-Z_:]"");",java.util.regex.Pattern BEGIN_MATCHER,"private , static , final "
com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$ReplaceNameProcessor.MAIN_MATCHER,Field,No Comment,"private static final Pattern MAIN_MATCHER = Pattern.compile(""[^a-zA-Z0-9_:-]"");",java.util.regex.Pattern MAIN_MATCHER,"private , static , final "
com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$ReplaceNameProcessor._replacement,Field,No Comment,private final String _replacement;,java.lang.String _replacement,"private , final "
com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor.BASE64_DECODER,Field,No Comment,private static final Base64.Decoder BASE64_DECODER = Base64.getUrlDecoder();,java.util.Base64$Decoder BASE64_DECODER,"private , static , final "
com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor.BASE64_ENCODER,Field,No Comment,private static final Base64.Encoder BASE64_ENCODER = Base64.getUrlEncoder().withoutPadding();,java.util.Base64$Encoder BASE64_ENCODER,"private , static , final "
com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor.VALID_XML_NAME,Field,No Comment,"private static final Pattern VALID_XML_NAME = Pattern.compile(""[a-zA-Z_:]([a-zA-Z0-9_:.-])*"");",java.util.regex.Pattern VALID_XML_NAME,"private , static , final "
com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor._prefix,Field,No Comment,private final String _prefix;,java.lang.String _prefix,"private , final "
com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$AlwaysOnBase64NameProcessor.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$AlwaysOnBase64NameProcessor.BASE64_DECODER,Field,No Comment,private static final Base64.Decoder BASE64_DECODER = Base64.getUrlDecoder();,java.util.Base64$Decoder BASE64_DECODER,"private , static , final "
com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$AlwaysOnBase64NameProcessor.BASE64_ENCODER,Field,No Comment,private static final Base64.Encoder BASE64_ENCODER = Base64.getUrlEncoder().withoutPadding();,java.util.Base64$Encoder BASE64_ENCODER,"private , static , final "
com.fasterxml.jackson.dataformat.xml.XmlFactory.serialVersionUID,Field,2.6,private static final long serialVersionUID = 1;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.XmlFactory.FORMAT_NAME_XML,Field,* Name used to identify XML format\n     * (and returned by {@link #getFormatName()},"public final static String FORMAT_NAME_XML = ""XML"";",java.lang.String FORMAT_NAME_XML,"public , final , static "
com.fasterxml.jackson.dataformat.xml.XmlFactory.DEFAULT_XML_PARSER_FEATURE_FLAGS,Field,* Bitfield (set of flags) of all parser features that are enabled\n     * by default.,final static int DEFAULT_XML_PARSER_FEATURE_FLAGS = FromXmlParser.Feature.collectDefaults();,int DEFAULT_XML_PARSER_FEATURE_FLAGS,"final , static "
com.fasterxml.jackson.dataformat.xml.XmlFactory.DEFAULT_XML_GENERATOR_FEATURE_FLAGS,Field,* Bitfield (set of flags) of all generator features that are enabled\n     * by default.,final static int DEFAULT_XML_GENERATOR_FEATURE_FLAGS = ToXmlGenerator.Feature.collectDefaults();,int DEFAULT_XML_GENERATOR_FEATURE_FLAGS,"final , static "
com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlParserFeatures,Field,No Comment,protected int _xmlParserFeatures;,int _xmlParserFeatures,protected 
com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlGeneratorFeatures,Field,No Comment,protected int _xmlGeneratorFeatures;,int _xmlGeneratorFeatures,protected 
com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlInputFactory,Field,non-final for setters (why are they needed again?),protected transient XMLInputFactory _xmlInputFactory;,javax.xml.stream.XMLInputFactory _xmlInputFactory,"protected , transient "
com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlOutputFactory,Field,No Comment,protected transient XMLOutputFactory _xmlOutputFactory;,javax.xml.stream.XMLOutputFactory _xmlOutputFactory,"protected , transient "
com.fasterxml.jackson.dataformat.xml.XmlFactory._cfgNameForTextElement,Field,No Comment,protected String _cfgNameForTextElement;,java.lang.String _cfgNameForTextElement,protected 
com.fasterxml.jackson.dataformat.xml.XmlFactory._nameProcessor,Field,No Comment,protected XmlNameProcessor _nameProcessor;,com.fasterxml.jackson.dataformat.xml.XmlNameProcessor _nameProcessor,protected 
com.fasterxml.jackson.dataformat.xml.XmlFactory._jdkXmlInFactory,Field,* Hiding place for JDK-serialization unthawed factories...,protected transient String _jdkXmlInFactory;,java.lang.String _jdkXmlInFactory,"protected , transient "
com.fasterxml.jackson.dataformat.xml.XmlFactory._jdkXmlOutFactory,Field,* Hiding place for JDK-serialization unthawed factories...,protected transient String _jdkXmlOutFactory;,java.lang.String _jdkXmlOutFactory,"protected , transient "
com.fasterxml.jackson.dataformat.xml.XmlFactory.UTF8_BOM_1,Field,No Comment,private final static byte UTF8_BOM_1 = (byte) 0xEF;,byte UTF8_BOM_1,"private , final , static "
com.fasterxml.jackson.dataformat.xml.XmlFactory.UTF8_BOM_2,Field,No Comment,private final static byte UTF8_BOM_2 = (byte) 0xBB;,byte UTF8_BOM_2,"private , final , static "
com.fasterxml.jackson.dataformat.xml.XmlFactory.UTF8_BOM_3,Field,No Comment,private final static byte UTF8_BOM_3 = (byte) 0xBF;,byte UTF8_BOM_3,"private , final , static "
com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_x,Field,No Comment,private final static byte BYTE_x = (byte) 'x';,byte BYTE_x,"private , final , static "
com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_m,Field,No Comment,private final static byte BYTE_m = (byte) 'm';,byte BYTE_m,"private , final , static "
com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_l,Field,No Comment,private final static byte BYTE_l = (byte) 'l';,byte BYTE_l,"private , final , static "
com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_D,Field,No Comment,private final static byte BYTE_D = (byte) 'D';,byte BYTE_D,"private , final , static "
com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_LT,Field,No Comment,private final static byte BYTE_LT = (byte) '<';,byte BYTE_LT,"private , final , static "
com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_QMARK,Field,No Comment,private final static byte BYTE_QMARK = (byte) '?';,byte BYTE_QMARK,"private , final , static "
com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_EXCL,Field,No Comment,private final static byte BYTE_EXCL = (byte) '!';,byte BYTE_EXCL,"private , final , static "
com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_HYPHEN,Field,No Comment,private final static byte BYTE_HYPHEN = (byte) '-';,byte BYTE_HYPHEN,"private , final , static "
com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.KEY_XML_INFO,Field,* Marker used for storing associated internal data with {@link BeanPropertyWriter}\n     * instances; to mark instances that are to be written out as attributes.\n     * Created as separate non-interned String to ensure there are no collisions.,"public final static String KEY_XML_INFO = new String(""xmlInfo"");",java.lang.String KEY_XML_INFO,"public , final , static "
com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._attributeCount,Field,* Number of attributes to write; these will have been ordered to be the first\n     * properties to write.,protected final int _attributeCount;,int _attributeCount,"protected , final "
com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._textPropertyIndex,Field,"* Index of ""text value"" property we have, if any; can have at most\n     * one such property.",protected final int _textPropertyIndex;,int _textPropertyIndex,"protected , final "
com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._xmlNames,Field,"* Array that contains namespace URIs associated with properties, if any;\n     * null if no namespace definitions have been assigned",protected final QName[] _xmlNames;,javax.xml.namespace.QName[] _xmlNames,"protected , final "
com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._cdata,Field,"* Optional set of indexes of properties that should be serialized as CDATA,\n     * instead of regular XML text segment. Left as null in cases where none of\n     * element values are to be written in such a way.",protected final BitSet _cdata;,java.util.BitSet _cdata,"protected , final "
com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serialVersionUID,Field,As of 2.7,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameLookup,Field,No Comment,protected final XmlRootNameLookup _rootNameLookup;,com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup _rootNameLookup,"protected , final "
com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer._nameTransformer,Field,* Transformer used to add prefix and/or suffix for properties of unwrapped\n     * POJO.,protected final NameTransformer _nameTransformer;,com.fasterxml.jackson.databind.util.NameTransformer _nameTransformer,"protected , final "
com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.DEFAULT_UNKNOWN_ELEMENT,Field,"* If we support optional definition of element names, this is the element\n     * name to use...","protected final static String DEFAULT_UNKNOWN_ELEMENT = ""unknown"";",java.lang.String DEFAULT_UNKNOWN_ELEMENT,"protected , final , static "
com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter,Field,No Comment,protected final XMLStreamWriter2 _xmlWriter;,org.codehaus.stax2.XMLStreamWriter2 _xmlWriter,"protected , final "
com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._originalXmlWriter,Field,No Comment,protected final XMLStreamWriter _originalXmlWriter;,javax.xml.stream.XMLStreamWriter _originalXmlWriter,"protected , final "
com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._stax2Emulation,Field,* Marker flag set if the underlying stream writer has to emulate\n     * Stax2 API: this is problematic if trying to use {@link #writeRaw} calls.,protected final boolean _stax2Emulation;,boolean _stax2Emulation,"protected , final "
com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._streamWriteConstraints,Field,* @since 2.16,protected final StreamWriteConstraints _streamWriteConstraints;,com.fasterxml.jackson.core.StreamWriteConstraints _streamWriteConstraints,"protected , final "
com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._formatFeatures,Field,* Bit flag composed of bits that indicate which\n     * {@link ToXmlGenerator.Feature}s\n     * are enabled.,protected int _formatFeatures;,int _formatFeatures,protected 
com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter,Field,* We may need to use XML-specific indentation as well,protected XmlPrettyPrinter _xmlPrettyPrinter;,com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter _xmlPrettyPrinter,protected 
com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nameProcessor,Field,* Escapes names with invalid XML characters\n     *\n     * @since 2.14,protected XmlNameProcessor _nameProcessor;,com.fasterxml.jackson.dataformat.xml.XmlNameProcessor _nameProcessor,protected 
com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._initialized,Field,* Marker set when {@link #initGenerator()} has been called or not.\n     * \n     * @since 2.2,protected boolean _initialized;,boolean _initialized,protected 
com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName,Field,* Element or attribute name to use for next output call.\n     * Assigned by either code that initiates serialization\n     * or bean serializer.,protected QName _nextName = null;,javax.xml.namespace.QName _nextName,protected 
com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute,Field,* Marker flag that indicates whether next name to write\n     * implies an attribute (true) or element (false),protected boolean _nextIsAttribute = false;,boolean _nextIsAttribute,protected 
com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsUnwrapped,Field,* Marker flag used to indicate that the next write of a (property)\n     * value should be done without using surrounding start/end\n     * elements. Flag is to be cleared once unwrapping has been triggered\n     * once.,protected boolean _nextIsUnwrapped = false;,boolean _nextIsUnwrapped,protected 
com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsCData,Field,* Marker flag used to indicate that the next write of a (property)\n     * value should be as CData,protected boolean _nextIsCData = false;,boolean _nextIsCData,protected 
com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._elementNameStack,Field,"* To support proper serialization of arrays it is necessary to keep\n     * stack of element names, so that we can ""revert"" to earlier",protected LinkedList<QName> _elementNameStack = new LinkedList<QName>();,java.util.LinkedList _elementNameStack,protected 
com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nameToEncode,Field,* Reusable internal value object\n     *\n     * @since 2.14,protected XmlNameProcessor.XmlName _nameToEncode = new XmlNameProcessor.XmlName();,com.fasterxml.jackson.dataformat.xml.XmlNameProcessor$XmlName _nameToEncode,protected 
com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._wrapperQName,Field,* Element name used as wrapper for collection.,protected final QName _wrapperQName;,javax.xml.namespace.QName _wrapperQName,"protected , final "
com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._wrappedQName,Field,* Element name used for items in the collection,protected final QName _wrappedQName;,javax.xml.namespace.QName _wrappedQName,"protected , final "
com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialVersionUID,Field,No Comment,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.XmlMapper.serialVersionUID,Field,as of 2.6,private static final long serialVersionUID = 1L;,long serialVersionUID,"private , static , final "
com.fasterxml.jackson.dataformat.xml.XmlMapper.DEFAULT_XML_MODULE,Field,No Comment,protected final static JacksonXmlModule DEFAULT_XML_MODULE = new JacksonXmlModule();,com.fasterxml.jackson.dataformat.xml.JacksonXmlModule DEFAULT_XML_MODULE,"protected , final , static "
com.fasterxml.jackson.dataformat.xml.XmlMapper.DEFAULT_XML_PRETTY_PRINTER,Field,No Comment,protected final static DefaultXmlPrettyPrinter DEFAULT_XML_PRETTY_PRINTER = new DefaultXmlPrettyPrinter();,com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter DEFAULT_XML_PRETTY_PRINTER,"protected , final , static "
com.fasterxml.jackson.dataformat.xml.XmlMapper._xmlModule,Field,need to hold on to module instance just in case copy() is used,protected final JacksonXmlModule _xmlModule;,com.fasterxml.jackson.dataformat.xml.JacksonXmlModule _xmlModule,"protected , final "
