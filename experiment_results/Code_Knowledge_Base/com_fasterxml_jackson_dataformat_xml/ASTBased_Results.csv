"FEN","Type","Comment","Source Code","Return Type","Modifier","class_extends","implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter","Interface","* There are some XML-specific quirks that need extra TLC when
 * indenting: so we will use a refinement of general purpose one.","Interface do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.PrettyPrinter",""
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeStartElement(XMLStreamWriter2,String,String)","Abstract Method","* Method for forcibly writing a start element, without going
     * through Jackson generator (and thus, without updating currently
     * active element stack)
     * 
     * @since 2.1","public void writeStartElement(XMLStreamWriter2 sw, String nsURI, String localName) throws XMLStreamException;","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeStartElement(XMLStreamWriter2,String,String).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeStartElement(XMLStreamWriter2,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeStartElement(XMLStreamWriter2,String,String).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeStartElement(XMLStreamWriter2,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeStartElement(XMLStreamWriter2,String,String).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeStartElement(XMLStreamWriter2,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeEndElement(XMLStreamWriter2,int)","Abstract Method","* Method for forcibly writing an end element, without going
     * through Jackson generator (and thus, without updating currently
     * active element stack)
     * 
     * @since 2.1","public void writeEndElement(XMLStreamWriter2 sw, int nrOfEntries) throws XMLStreamException;","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeEndElement(XMLStreamWriter2,int).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeEndElement(XMLStreamWriter2,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeEndElement(XMLStreamWriter2,int).nrOfEntries","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeEndElement(XMLStreamWriter2,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writePrologLinefeed(XMLStreamWriter2)","Abstract Method","* Method for trying to write a linefeed to separate entities outside of the
     * root element (that is, in prolog or epilog), most often called to separate
     * XML declaration from the root element.
     *
     * @since 2.7","public void writePrologLinefeed(XMLStreamWriter2 sw) throws XMLStreamException;","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writePrologLinefeed(XMLStreamWriter2).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writePrologLinefeed(XMLStreamWriter2)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean)","Abstract Method","No Comment","public void writeLeafElement(XMLStreamWriter2 sw, String nsURI, String localName, String text, boolean isCData) throws XMLStreamException;","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean).text","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean).isCData","Parameter_5","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean)","Abstract Method","No Comment","public void writeLeafElement(XMLStreamWriter2 sw, String nsURI, String localName, char[] buffer, int offset, int len, boolean isCData) throws XMLStreamException;","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean).buffer","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean).offset","Parameter_5","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean).len","Parameter_6","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean).isCData","Parameter_7","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,boolean)","Abstract Method","No Comment","public void writeLeafElement(XMLStreamWriter2 sw, String nsURI, String localName, boolean value) throws XMLStreamException;","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,boolean).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,boolean).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,boolean).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,boolean).value","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,int)","Abstract Method","No Comment","public void writeLeafElement(XMLStreamWriter2 sw, String nsURI, String localName, int value) throws XMLStreamException;","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,int).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,int).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,int).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,int).value","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,long)","Abstract Method","No Comment","public void writeLeafElement(XMLStreamWriter2 sw, String nsURI, String localName, long value) throws XMLStreamException;","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,long).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,long).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,long).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,long).value","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,double)","Abstract Method","No Comment","public void writeLeafElement(XMLStreamWriter2 sw, String nsURI, String localName, double value) throws XMLStreamException;","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,double).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,double).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,double).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,double).value","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,float)","Abstract Method","No Comment","public void writeLeafElement(XMLStreamWriter2 sw, String nsURI, String localName, float value) throws XMLStreamException;","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,float).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,float).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,float).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,float).value","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigInteger)","Abstract Method","No Comment","public void writeLeafElement(XMLStreamWriter2 sw, String nsURI, String localName, BigInteger value) throws XMLStreamException;","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigInteger).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigInteger)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigInteger).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigInteger)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigInteger).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigInteger)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigInteger).value","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigInteger)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigDecimal)","Abstract Method","No Comment","public void writeLeafElement(XMLStreamWriter2 sw, String nsURI, String localName, BigDecimal value) throws XMLStreamException;","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigDecimal).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigDecimal)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigDecimal).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigDecimal)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigDecimal).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigDecimal)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigDecimal).value","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigDecimal)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int)","Abstract Method","binary element","public void writeLeafElement(XMLStreamWriter2 sw, String nsURI, String localName, org.codehaus.stax2.typed.Base64Variant base64variant, byte[] data, int offset, int len) throws XMLStreamException;","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int).base64variant","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int).data","Parameter_5","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int).offset","Parameter_6","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int).len","Parameter_7","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafNullElement(XMLStreamWriter2,String,String)","Abstract Method","empty element to represent null","public void writeLeafNullElement(XMLStreamWriter2 sw, String nsURI, String localName) throws XMLStreamException;","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafNullElement(XMLStreamWriter2,String,String).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafNullElement(XMLStreamWriter2,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafNullElement(XMLStreamWriter2,String,String).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafNullElement(XMLStreamWriter2,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafNullElement(XMLStreamWriter2,String,String).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter.writeLeafNullElement(XMLStreamWriter2,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder","Class","* {@link com.fasterxml.jackson.core.TSFBuilder} implementation
 * for constructing {@link XmlFactory} instances.","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.TSFBuilder",""
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder._formatParserFeatures","Field","* Set of {@code FromXmlParser.Feature}s enabled, as bitmask.","protected int _formatParserFeatures;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder._formatGeneratorFeatures","Field","* Set of {@@code ToXmlGenerator.Feature}s enabled, as bitmask.","protected int _formatGeneratorFeatures;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder._xmlInputFactory","Field","* Stax factory for creating underlying input stream readers;
     * `null` for ""use default instance with default settings""","protected XMLInputFactory _xmlInputFactory;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder._xmlOutputFactory","Field","* Stax factory for creating underlying output stream writers;
     * `null` for ""use default instance with default settings""","protected XMLOutputFactory _xmlOutputFactory;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder._nameForTextElement","Field","* In cases where a start element has both attributes and non-empty textual
     * value, we have to create a bogus property; we will use this as
     * the property name.
     *<p>
     * Name used for pseudo-property used for returning XML Text value (which does
     * not have actual element name to use). Defaults to empty String, but
     * may be changed for interoperability reasons: JAXB, for example, uses
     * ""value"" as name.","protected String _nameForTextElement;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder._classLoaderForStax","Field","* Optional {@link ClassLoader} to use for constructing
     * {@link XMLInputFactory} and {@kink XMLOutputFactory} instances if
     * not explicitly specified by caller. If not specified, will
     * default to {@link ClassLoader} that loaded this class.
     *
     * @since 2.13","protected ClassLoader _classLoaderForStax;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder._nameProcessor","Field","* See {@link XmlNameProcessor} and {@link XmlNameProcessors}
     *
     * @since 2.14","protected XmlNameProcessor _nameProcessor;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.formatParserFeaturesMask()","Method","No Comment","public int formatParserFeaturesMask() {
    return _formatParserFeatures;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.formatGeneratorFeaturesMask()","Method","No Comment","public int formatGeneratorFeaturesMask() {
    return _formatGeneratorFeatures;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.nameForTextElement()","Method","No Comment","public String nameForTextElement() {
    return _nameForTextElement;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.xmlInputFactory()","Method","No Comment","public XMLInputFactory xmlInputFactory() {
    if (_xmlInputFactory == null) {
        return defaultInputFactory();
    }
    return _xmlInputFactory;
}","XMLInputFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.defaultInputFactory()","Method","No Comment","protected XMLInputFactory defaultInputFactory() {
    XMLInputFactory xmlIn = StaxUtil.defaultInputFactory(_classLoaderForStax);
    // as per [dataformat-xml#190], disable external entity expansion by default
    xmlIn.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);
    // and ditto wrt [dataformat-xml#211], SUPPORT_DTD
    xmlIn.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);
    return xmlIn;
}","XMLInputFactory","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.xmlOutputFactory()","Method","No Comment","public XMLOutputFactory xmlOutputFactory() {
    if (_xmlOutputFactory == null) {
        return defaultOutputFactory();
    }
    return _xmlOutputFactory;
}","XMLOutputFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.defaultOutputFactory()","Method","No Comment","protected XMLOutputFactory defaultOutputFactory() {
    XMLOutputFactory xmlOut = StaxUtil.defaultOutputFactory(_classLoaderForStax);
    // [dataformat-xml#326]: Better ensure namespaces get built properly:
    xmlOut.setProperty(XMLOutputFactory.IS_REPAIRING_NAMESPACES, Boolean.TRUE);
    return xmlOut;
}","XMLOutputFactory","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.staxClassLoader()","Method","@since 2.13","protected ClassLoader staxClassLoader() {
    return (_classLoaderForStax == null) ? getClass().getClassLoader() : _classLoaderForStax;
}","ClassLoader","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.xmlNameProcessor()","Method","No Comment","public XmlNameProcessor xmlNameProcessor() {
    return _nameProcessor;
}","XmlNameProcessor","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.enable(FromXmlParser.Feature)","Method","No Comment","public XmlFactoryBuilder enable(FromXmlParser.Feature f) {
    _formatParserFeatures |= f.getMask();
    return _this();
}","XmlFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.enable(FromXmlParser.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.enable(FromXmlParser.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.enable(FromXmlParser.Feature,FromXmlParser.Feature[])","Method","No Comment","public XmlFactoryBuilder enable(FromXmlParser.Feature first, FromXmlParser.Feature... other) {
    _formatParserFeatures |= first.getMask();
    for (FromXmlParser.Feature f : other) {
        _formatParserFeatures |= f.getMask();
    }
    return _this();
}","XmlFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.enable(FromXmlParser.Feature,FromXmlParser.Feature[]).first","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.enable(FromXmlParser.Feature,FromXmlParser.Feature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.enable(FromXmlParser.Feature,FromXmlParser.Feature[]).other","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.enable(FromXmlParser.Feature,FromXmlParser.Feature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.disable(FromXmlParser.Feature)","Method","No Comment","public XmlFactoryBuilder disable(FromXmlParser.Feature f) {
    _formatParserFeatures &= ~f.getMask();
    return _this();
}","XmlFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.disable(FromXmlParser.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.disable(FromXmlParser.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.disable(FromXmlParser.Feature,FromXmlParser.Feature[])","Method","No Comment","public XmlFactoryBuilder disable(FromXmlParser.Feature first, FromXmlParser.Feature... other) {
    _formatParserFeatures &= ~first.getMask();
    for (FromXmlParser.Feature f : other) {
        _formatParserFeatures &= ~f.getMask();
    }
    return _this();
}","XmlFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.disable(FromXmlParser.Feature,FromXmlParser.Feature[]).first","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.disable(FromXmlParser.Feature,FromXmlParser.Feature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.disable(FromXmlParser.Feature,FromXmlParser.Feature[]).other","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.disable(FromXmlParser.Feature,FromXmlParser.Feature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.configure(FromXmlParser.Feature,boolean)","Method","No Comment","public XmlFactoryBuilder configure(FromXmlParser.Feature f, boolean state) {
    return state ? enable(f) : disable(f);
}","XmlFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.configure(FromXmlParser.Feature,boolean).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.configure(FromXmlParser.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.configure(FromXmlParser.Feature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.configure(FromXmlParser.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.enable(ToXmlGenerator.Feature)","Method","No Comment","public XmlFactoryBuilder enable(ToXmlGenerator.Feature f) {
    _formatGeneratorFeatures |= f.getMask();
    return _this();
}","XmlFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.enable(ToXmlGenerator.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.enable(ToXmlGenerator.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.enable(ToXmlGenerator.Feature,ToXmlGenerator.Feature[])","Method","No Comment","public XmlFactoryBuilder enable(ToXmlGenerator.Feature first, ToXmlGenerator.Feature... other) {
    _formatGeneratorFeatures |= first.getMask();
    for (ToXmlGenerator.Feature f : other) {
        _formatGeneratorFeatures |= f.getMask();
    }
    return _this();
}","XmlFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.enable(ToXmlGenerator.Feature,ToXmlGenerator.Feature[]).first","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.enable(ToXmlGenerator.Feature,ToXmlGenerator.Feature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.enable(ToXmlGenerator.Feature,ToXmlGenerator.Feature[]).other","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.enable(ToXmlGenerator.Feature,ToXmlGenerator.Feature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.disable(ToXmlGenerator.Feature)","Method","No Comment","public XmlFactoryBuilder disable(ToXmlGenerator.Feature f) {
    _formatGeneratorFeatures &= ~f.getMask();
    return _this();
}","XmlFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.disable(ToXmlGenerator.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.disable(ToXmlGenerator.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.disable(ToXmlGenerator.Feature,ToXmlGenerator.Feature[])","Method","No Comment","public XmlFactoryBuilder disable(ToXmlGenerator.Feature first, ToXmlGenerator.Feature... other) {
    _formatGeneratorFeatures &= ~first.getMask();
    for (ToXmlGenerator.Feature f : other) {
        _formatGeneratorFeatures &= ~f.getMask();
    }
    return _this();
}","XmlFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.disable(ToXmlGenerator.Feature,ToXmlGenerator.Feature[]).first","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.disable(ToXmlGenerator.Feature,ToXmlGenerator.Feature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.disable(ToXmlGenerator.Feature,ToXmlGenerator.Feature[]).other","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.disable(ToXmlGenerator.Feature,ToXmlGenerator.Feature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.configure(ToXmlGenerator.Feature,boolean)","Method","No Comment","public XmlFactoryBuilder configure(ToXmlGenerator.Feature f, boolean state) {
    return state ? enable(f) : disable(f);
}","XmlFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.configure(ToXmlGenerator.Feature,boolean).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.configure(ToXmlGenerator.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.configure(ToXmlGenerator.Feature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.configure(ToXmlGenerator.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.nameForTextElement(String)","Method","No Comment","public XmlFactoryBuilder nameForTextElement(String name) {
    _nameForTextElement = name;
    return _this();
}","XmlFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.nameForTextElement(String).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.nameForTextElement(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.xmlInputFactory(XMLInputFactory)","Method","* @since 2.13 (was misnamed as {@code inputFactory(in) formerly})","public XmlFactoryBuilder xmlInputFactory(XMLInputFactory xmlIn) {
    _xmlInputFactory = xmlIn;
    return _this();
}","XmlFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.xmlInputFactory(XMLInputFactory).xmlIn","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.xmlInputFactory(XMLInputFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.xmlOutputFactory(XMLOutputFactory)","Method","* @since 2.13 (was misnamed as {@code outputFactory(in) formerly})","public XmlFactoryBuilder xmlOutputFactory(XMLOutputFactory xmlOut) {
    _xmlOutputFactory = xmlOut;
    return _this();
}","XmlFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.xmlOutputFactory(XMLOutputFactory).xmlOut","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.xmlOutputFactory(XMLOutputFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.inputFactory(XMLInputFactory)","Method","* @deprecated Since 2.13 use {@link #xmlInputFactory()} instead","// since 2.13
@Deprecated
public XmlFactoryBuilder inputFactory(XMLInputFactory xmlIn) {
    return xmlInputFactory(xmlIn);
}","XmlFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.inputFactory(XMLInputFactory).xmlIn","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.inputFactory(XMLInputFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.outputFactory(XMLOutputFactory)","Method","* @deprecated Since 2.13 use {@link #xmlOutputFactory()} instead","// since 2.13
@Deprecated
public XmlFactoryBuilder outputFactory(XMLOutputFactory xmlOut) {
    return xmlOutputFactory(xmlOut);
}","XmlFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.outputFactory(XMLOutputFactory).xmlOut","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.outputFactory(XMLOutputFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.staxClassLoader(ClassLoader)","Method","* Method that can be used to specific {@link ClassLoader} for creating
     * {@link XMLInputFactory} and {@link XMLOutputFactory} instances if
     * those are not explicitly defined by caller: passed to respective
     * {@code newFactory()} methods.
     *<br>
     * NOTE: recommended approach is to explicitly pass {@link XMLInputFactory}
     * and {@link XMLOutputFactory} methods instead of relying on JDK SPI
     * mechanism.
     *
     * @since 2.13","public XmlFactoryBuilder staxClassLoader(ClassLoader cl) {
    _classLoaderForStax = cl;
    return _this();
}","XmlFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.staxClassLoader(ClassLoader).cl","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.staxClassLoader(ClassLoader)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.xmlNameProcessor(XmlNameProcessor)","Method","* @since 2.14","public XmlFactoryBuilder xmlNameProcessor(XmlNameProcessor nameProcessor) {
    _nameProcessor = nameProcessor;
    return _this();
}","XmlFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.xmlNameProcessor(XmlNameProcessor).nameProcessor","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.xmlNameProcessor(XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.build()","Method","No Comment","@Override
public XmlFactory build() {
    return new XmlFactory(this);
}","XmlFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.<init>()","Constructor","No Comment","protected XmlFactoryBuilder() {
    _formatParserFeatures = XmlFactory.DEFAULT_XML_PARSER_FEATURE_FLAGS;
    _formatGeneratorFeatures = XmlFactory.DEFAULT_XML_GENERATOR_FEATURE_FLAGS;
    _classLoaderForStax = null;
    _nameProcessor = XmlNameProcessors.newPassthroughProcessor();
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.<init>(XmlFactory)","Constructor","No Comment","public XmlFactoryBuilder(XmlFactory base) {
    super(base);
    _formatParserFeatures = base._xmlParserFeatures;
    _formatGeneratorFeatures = base._xmlGeneratorFeatures;
    _xmlInputFactory = base._xmlInputFactory;
    _xmlOutputFactory = base._xmlOutputFactory;
    _nameForTextElement = base._cfgNameForTextElement;
    _nameProcessor = base._nameProcessor;
    _classLoaderForStax = null;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.<init>(XmlFactory).base","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactoryBuilder.<init>(XmlFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlInfo","Class","* Helper container class used to contain XML specific information
 * we need to retain to construct proper bean serializer","Class do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.dataformat.xml.util.XmlInfo._namespace","Field","No Comment","protected final String _namespace;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlInfo._isAttribute","Field","No Comment","protected final boolean _isAttribute;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlInfo._isText","Field","No Comment","protected final boolean _isText;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlInfo._isCData","Field","No Comment","protected final boolean _isCData;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlInfo.getNamespace()","Method","No Comment","public String getNamespace() {
    return _namespace;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlInfo.isAttribute()","Method","No Comment","public boolean isAttribute() {
    return _isAttribute;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlInfo.isText()","Method","No Comment","public boolean isText() {
    return _isText;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlInfo.isCData()","Method","No Comment","public boolean isCData() {
    return _isCData;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlInfo.<init>(Boolean,String,Boolean,Boolean)","Constructor","No Comment","public XmlInfo(Boolean isAttribute, String ns, Boolean isText, Boolean isCData) {
    _isAttribute = (isAttribute == null) ? false : isAttribute.booleanValue();
    _namespace = (ns == null) ? """" : ns;
    _isText = (isText == null) ? false : isText.booleanValue();
    _isCData = (isCData == null) ? false : isCData.booleanValue();
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlInfo.<init>(Boolean,String,Boolean,Boolean).isAttribute","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.XmlInfo.<init>(Boolean,String,Boolean,Boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlInfo.<init>(Boolean,String,Boolean,Boolean).ns","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.XmlInfo.<init>(Boolean,String,Boolean,Boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlInfo.<init>(Boolean,String,Boolean,Boolean).isText","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.util.XmlInfo.<init>(Boolean,String,Boolean,Boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlInfo.<init>(Boolean,String,Boolean,Boolean).isCData","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.util.XmlInfo.<init>(Boolean,String,Boolean,Boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil","Class","No Comment","Class do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(XMLStreamException,JsonParser)","Method","* @since 2.9","public static <T> T throwAsParseException(XMLStreamException e, JsonParser p) throws IOException {
    Throwable t = _unwrap(e);
    throw new JsonParseException(p, _message(t, e), t);
}","Object","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(XMLStreamException,JsonParser).e","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(XMLStreamException,JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(XMLStreamException,JsonParser).p","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsParseException(XMLStreamException,JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(XMLStreamException,JsonGenerator)","Method","* @since 2.9","public static <T> T throwAsGenerationException(XMLStreamException e, JsonGenerator g) throws IOException {
    Throwable t = _unwrap(e);
    throw new JsonGenerationException(_message(t, e), t, g);
}","Object","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(XMLStreamException,JsonGenerator).e","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(XMLStreamException,JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(XMLStreamException,JsonGenerator).g","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.StaxUtil.throwAsGenerationException(XMLStreamException,JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil._unwrap(Throwable)","Method","No Comment","private static Throwable _unwrap(Throwable t) {
    while (t.getCause() != null) {
        t = t.getCause();
    }
    if (t instanceof Error)
        throw (Error) t;
    if (t instanceof RuntimeException)
        throw (RuntimeException) t;
    return t;
}","Throwable","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil._unwrap(Throwable).t","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.StaxUtil._unwrap(Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil._message(Throwable,Throwable)","Method","No Comment","private static String _message(Throwable t1, Throwable t2) {
    String msg = t1.getMessage();
    if (msg == null) {
        msg = t2.getMessage();
    }
    return msg;
}","String","private , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil._message(Throwable,Throwable).t1","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.StaxUtil._message(Throwable,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil._message(Throwable,Throwable).t2","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.StaxUtil._message(Throwable,Throwable)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil.sanitizeXmlTypeName(String)","Method","* Since XML names can not contain all characters JSON names can, we may
     * need to replace characters. Let's start with trivial replacement of
     * ASCII characters that can not be included.","public static String sanitizeXmlTypeName(String name) {
    // [dataformat-xml#451]: with DEDUCTION, at least, won't have property name
    //   (but probably sensible to check for it anyway)
    if (name == null) {
        return null;
    }
    StringBuilder sb;
    int changes = 0;
    // First things first: remove array types' trailing[]...
    if (name.endsWith(""[]"")) {
        do {
            name = name.substring(0, name.length() - 2);
            ++changes;
        } while (name.endsWith(""[]""));
        sb = new StringBuilder(name);
        // do trivial pluralization attempt
        if (name.endsWith(""s"")) {
            sb.append(""es"");
        } else {
            sb.append('s');
        }
    } else {
        sb = new StringBuilder(name);
    }
    for (int i = 0, len = name.length(); i < len; ++i) {
        char c = name.charAt(i);
        if (c > 127)
            continue;
        if (c >= 'a' && c <= 'z')
            continue;
        if (c >= 'A' && c <= 'Z')
            continue;
        if (c >= '0' && c <= '9')
            continue;
        if (c == '_' || c == '.' || c == '-')
            continue;
        // Ok, need to replace
        ++changes;
        if (c == '$') {
            sb.setCharAt(i, '.');
        } else {
            sb.setCharAt(i, '_');
        }
    }
    if (changes == 0) {
        return name;
    }
    return sb.toString();
}","String","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil.sanitizeXmlTypeName(String).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.StaxUtil.sanitizeXmlTypeName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil.toStax2Base64Variant(Base64Variant)","Method","* Helper method used to ""convert"" Jackson's {@link Base64Variant} into corresponding
     * Stax2 equivalent, to try to allow Jackson-style configuration for XML output as well.
     *
     * @param j64b Jackson base64 variant to find match for
     *
     * @return Stax2 Base64 variant that most closely resembles Jackson canonical Base64 variant
     *     passed in as argument
     *
     * @since 2.12","public static org.codehaus.stax2.typed.Base64Variant toStax2Base64Variant(Base64Variant j64b) {
    return Base64Mapper.instance.map(j64b);
}","org.codehaus.stax2.typed.Base64Variant","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil.toStax2Base64Variant(Base64Variant).j64b","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.StaxUtil.toStax2Base64Variant(Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil.defaultInputFactory(ClassLoader)","Method","* @since 2.14","public static XMLInputFactory defaultInputFactory(ClassLoader cl) {
    // 05-Jul-2021, tatu: as per [dataformat-xml#483], specify ClassLoader
    try {
        return XMLInputFactory.newFactory(XMLInputFactory.class.getName(), cl);
    } catch (FactoryConfigurationError | NoSuchMethodError e) {
        // 24-Oct-2022, tatu: as per [dataformat-xml#550] need extra care
        return XMLInputFactory.newInstance();
    }
}","XMLInputFactory","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil.defaultInputFactory(ClassLoader).cl","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.StaxUtil.defaultInputFactory(ClassLoader)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil.defaultOutputFactory(ClassLoader)","Method","* @since 2.14","public static XMLOutputFactory defaultOutputFactory(ClassLoader cl) {
    // 05-Jul-2021, tatu: as per [dataformat-xml#483], specify ClassLoader
    try {
        return XMLOutputFactory.newFactory(XMLOutputFactory.class.getName(), cl);
    } catch (FactoryConfigurationError | NoSuchMethodError e) {
        // 24-Oct-2022, tatu: as per [dataformat-xml#550] need extra care
        return XMLOutputFactory.newInstance();
    }
}","XMLOutputFactory","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil.defaultOutputFactory(ClassLoader).cl","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.StaxUtil.defaultOutputFactory(ClassLoader)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil$Base64Mapper","Class","No Comment","Class do not obtain Source Code","No return type","private , static ","",""
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil$Base64Mapper.instance","Field","No Comment","public final static Base64Mapper instance = new Base64Mapper();","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil$Base64Mapper.j2stax2","Field","No Comment","private final Map<String, org.codehaus.stax2.typed.Base64Variant> j2stax2 = new HashMap<>();","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil$Base64Mapper.map(Base64Variant)","Method","No Comment","public org.codehaus.stax2.typed.Base64Variant map(Base64Variant j64b) {
    org.codehaus.stax2.typed.Base64Variant result = j2stax2.get(j64b.getName());
    if (result == null) {
        // 13-May-2020, tatu: in unexpected case of no match, default to what Stax2
        //    considers default, not Jackson: this for backwards compatibility with
        //    Jackson 2.11 and earlier
        result = org.codehaus.stax2.typed.Base64Variants.getDefaultVariant();
    }
    return result;
}","org.codehaus.stax2.typed.Base64Variant","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil$Base64Mapper.map(Base64Variant).j64b","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.StaxUtil$Base64Mapper.map(Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil$Base64Mapper.<init>()","Constructor","No Comment","private Base64Mapper() {
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil.Base64Mapper","Class","No Comment","Class do not obtain Source Code","No return type","private , static ","",""
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil.Base64Mapper.instance","Field","No Comment","public final static Base64Mapper instance = new Base64Mapper();","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil.Base64Mapper.j2stax2","Field","No Comment","private final Map<String, org.codehaus.stax2.typed.Base64Variant> j2stax2 = new HashMap<>();","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil.Base64Mapper.map(Base64Variant)","Method","No Comment","public org.codehaus.stax2.typed.Base64Variant map(Base64Variant j64b) {
    org.codehaus.stax2.typed.Base64Variant result = j2stax2.get(j64b.getName());
    if (result == null) {
        // 13-May-2020, tatu: in unexpected case of no match, default to what Stax2
        //    considers default, not Jackson: this for backwards compatibility with
        //    Jackson 2.11 and earlier
        result = org.codehaus.stax2.typed.Base64Variants.getDefaultVariant();
    }
    return result;
}","org.codehaus.stax2.typed.Base64Variant","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil.Base64Mapper.map(Base64Variant).j64b","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.StaxUtil.Base64Mapper.map(Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.StaxUtil.Base64Mapper.<init>()","Constructor","No Comment","private Base64Mapper() {
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil","Class","No Comment","Class do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember)","Method","No Comment","public static String findNamespaceAnnotation(MapperConfig<?> config, AnnotationIntrospector ai, AnnotatedMember prop) {
    for (AnnotationIntrospector intr : ai.allIntrospectors()) {
        if (intr instanceof AnnotationIntrospector.XmlExtensions) {
            String ns = ((AnnotationIntrospector.XmlExtensions) intr).findNamespace(config, prop);
            if (ns != null) {
                return ns;
            }
        }
    }
    return null;
}","String","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember).ai","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember).prop","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findNamespaceAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember)","Method","No Comment","public static Boolean findIsAttributeAnnotation(MapperConfig<?> config, AnnotationIntrospector ai, AnnotatedMember prop) {
    for (AnnotationIntrospector intr : ai.allIntrospectors()) {
        if (intr instanceof AnnotationIntrospector.XmlExtensions) {
            Boolean b = ((AnnotationIntrospector.XmlExtensions) intr).isOutputAsAttribute(config, prop);
            if (b != null) {
                return b;
            }
        }
    }
    return null;
}","Boolean","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember).ai","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember).prop","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsAttributeAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember)","Method","No Comment","public static Boolean findIsTextAnnotation(MapperConfig<?> config, AnnotationIntrospector ai, AnnotatedMember prop) {
    for (AnnotationIntrospector intr : ai.allIntrospectors()) {
        if (intr instanceof AnnotationIntrospector.XmlExtensions) {
            Boolean b = ((AnnotationIntrospector.XmlExtensions) intr).isOutputAsText(config, prop);
            if (b != null) {
                return b;
            }
        }
    }
    return null;
}","Boolean","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember).ai","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember).prop","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsTextAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember)","Method","No Comment","public static Boolean findIsCDataAnnotation(MapperConfig<?> config, AnnotationIntrospector ai, AnnotatedMember prop) {
    for (AnnotationIntrospector intr : ai.allIntrospectors()) {
        if (intr instanceof AnnotationIntrospector.XmlExtensions) {
            Boolean b = ((AnnotationIntrospector.XmlExtensions) intr).isOutputAsCData(config, prop);
            if (b != null) {
                return b;
            }
        }
    }
    return null;
}","Boolean","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember).ai","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember).prop","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil.findIsCDataAnnotation(MapperConfig,AnnotationIntrospector,AnnotatedMember)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.CaseInsensitiveNameSet","Class","* Helper class for matching element wrappers, possibly in case-insensitive
 * manner.
 *
 * @since 2.12","Class do not obtain Source Code","No return type","public , final ","java.util.AbstractSet",""
"com.fasterxml.jackson.dataformat.xml.util.CaseInsensitiveNameSet._namesToMatch","Field","No Comment","private final Set<String> _namesToMatch;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.CaseInsensitiveNameSet.construct(Set)","Method","No Comment","public static CaseInsensitiveNameSet construct(Set<String> names0) {
    Set<String> namesToMatch = new HashSet<String>(names0);
    for (String name : names0) {
        namesToMatch.add(name.toLowerCase());
    }
    return new CaseInsensitiveNameSet(namesToMatch);
}","CaseInsensitiveNameSet","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.CaseInsensitiveNameSet.construct(Set).names0","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.CaseInsensitiveNameSet.construct(Set)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.CaseInsensitiveNameSet.contains(Object)","Method","No Comment","@Override
public boolean contains(Object key0) {
    final String key = (String) key0;
    if (_namesToMatch.contains(key)) {
        return true;
    }
    final String lc = key.toLowerCase();
    return (lc != key) && _namesToMatch.contains(lc);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.CaseInsensitiveNameSet.contains(Object).key0","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.CaseInsensitiveNameSet.contains(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.CaseInsensitiveNameSet.iterator()","Method","No Comment","@Override
public Iterator<String> iterator() {
    return _namesToMatch.iterator();
}","Iterator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.CaseInsensitiveNameSet.size()","Method","No Comment","@Override
public int size() {
    return _namesToMatch.size();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.CaseInsensitiveNameSet.<init>(Set)","Constructor","No Comment","private CaseInsensitiveNameSet(Set<String> namesToMatch) {
    _namesToMatch = namesToMatch;
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.CaseInsensitiveNameSet.<init>(Set).namesToMatch","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.CaseInsensitiveNameSet.<init>(Set)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter","Class","* Indentation to use with XML is different from JSON, because JSON
 * requires use of separator characters and XML just basic whitespace.
 *<p>
 * Note that only a subset of methods of {@link PrettyPrinter} actually
 * get called by {@link ToXmlGenerator}; because of this, implementation
 * is bit briefer (and uglier...).","Class do not obtain Source Code","No return type","public ","","com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter;com.fasterxml.jackson.core.util.Instantiatable;java.io.Serializable"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.serialVersionUID","Field","since 2.6","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._arrayIndenter","Field","* By default, let's use only spaces to separate array values.","protected Indenter _arrayIndenter = new FixedSpaceIndenter();","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._objectIndenter","Field","* By default, let's use linefeed-adding indenter for separate
     * object entries. We'll further configure indenter to use
     * system-specific linefeeds, and 2 spaces per level (as opposed to,
     * say, single tabs)","protected Indenter _objectIndenter = new Lf2SpacesIndenter();","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.SYSTEM_DEFAULT_NEW_LINE","Field","* By default, will try to set as System.getProperty(""line.separator"").
     * Can later set custom new line with withCustomNewLine method.
     * @since 2.15","private static final String SYSTEM_DEFAULT_NEW_LINE;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._newLine","Field","No Comment","protected String _newLine = SYSTEM_DEFAULT_NEW_LINE;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.SPACE_COUNT","Field","No Comment","static final int SPACE_COUNT = 64;","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.SPACES","Field","No Comment","static final char[] SPACES = new char[SPACE_COUNT];","No return type","static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._nesting","Field","* Number of open levels of nesting. Used to determine amount of
     * indentation to use.","protected transient int _nesting = 0;","No return type","protected , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter._justHadStartElement","Field","* Marker flag set on start element, and cleared if an end element
     * is encountered. Used for suppressing indentation to allow empty
     * elements.
     * 
     * @since 2.3","protected transient boolean _justHadStartElement;","No return type","protected , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.indentArraysWith(Indenter)","Method","No Comment","public void indentArraysWith(Indenter i) {
    _arrayIndenter = (i == null) ? new NopIndenter() : i;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.indentArraysWith(Indenter).i","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.indentArraysWith(Indenter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.indentObjectsWith(Indenter)","Method","No Comment","public void indentObjectsWith(Indenter i) {
    _objectIndenter = (i == null) ? new NopIndenter() : i;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.indentObjectsWith(Indenter).i","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.indentObjectsWith(Indenter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.withCustomNewLine(String)","Method","* Sets custom new-line.
     * @since 2.15","public DefaultXmlPrettyPrinter withCustomNewLine(String newLine) {
    _newLine = newLine != null ? newLine : SYSTEM_DEFAULT_NEW_LINE;
    return this;
}","DefaultXmlPrettyPrinter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.withCustomNewLine(String).newLine","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.withCustomNewLine(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.createInstance()","Method","No Comment","@Override
public DefaultXmlPrettyPrinter createInstance() {
    return new DefaultXmlPrettyPrinter(this);
}","DefaultXmlPrettyPrinter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeRootValueSeparator(JsonGenerator)","Method","No Comment","@Override
public void writeRootValueSeparator(JsonGenerator gen) throws IOException {
    // Not sure if this should ever be applicable; but if multiple roots were allowed, we'd use linefeed
    gen.writeRaw('\n');
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeRootValueSeparator(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeRootValueSeparator(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.beforeArrayValues(JsonGenerator)","Method","No Comment","@Override
public void beforeArrayValues(JsonGenerator gen) throws IOException {
    // never called for ToXmlGenerator
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.beforeArrayValues(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.beforeArrayValues(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartArray(JsonGenerator)","Method","No Comment","@Override
public void writeStartArray(JsonGenerator gen) throws IOException {
    // anything to do here?
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartArray(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartArray(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeArrayValueSeparator(JsonGenerator)","Method","No Comment","@Override
public void writeArrayValueSeparator(JsonGenerator gen) throws IOException {
    // never called for ToXmlGenerator
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeArrayValueSeparator(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeArrayValueSeparator(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndArray(JsonGenerator,int)","Method","No Comment","@Override
public void writeEndArray(JsonGenerator gen, int nrOfValues) throws IOException {
    // anything to do here?
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndArray(JsonGenerator,int).gen","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndArray(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndArray(JsonGenerator,int).nrOfValues","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndArray(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.beforeObjectEntries(JsonGenerator)","Method","No Comment","@Override
public void beforeObjectEntries(JsonGenerator gen) throws IOException, JsonGenerationException {
    // never called for ToXmlGenerator
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.beforeObjectEntries(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.beforeObjectEntries(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartObject(JsonGenerator)","Method","No Comment","@Override
public void writeStartObject(JsonGenerator gen) throws IOException {
    if (!_objectIndenter.isInline()) {
        if (_nesting > 0) {
            _objectIndenter.writeIndentation(gen, _nesting);
        }
        ++_nesting;
    }
    _justHadStartElement = true;
    ((ToXmlGenerator) gen)._handleStartObject();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartObject(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartObject(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeObjectEntrySeparator(JsonGenerator)","Method","No Comment","@Override
public void writeObjectEntrySeparator(JsonGenerator gen) throws IOException {
    // never called for ToXmlGenerator
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeObjectEntrySeparator(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeObjectEntrySeparator(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeObjectFieldValueSeparator(JsonGenerator)","Method","No Comment","@Override
public void writeObjectFieldValueSeparator(JsonGenerator gen) throws IOException {
    // never called for ToXmlGenerator
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeObjectFieldValueSeparator(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeObjectFieldValueSeparator(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndObject(JsonGenerator,int)","Method","No Comment","@Override
public void writeEndObject(JsonGenerator gen, int nrOfEntries) throws IOException {
    if (!_objectIndenter.isInline()) {
        --_nesting;
    }
    // for empty elements, no need for linefeeds etc:
    if (_justHadStartElement) {
        _justHadStartElement = false;
    } else {
        _objectIndenter.writeIndentation(gen, _nesting);
    }
    ((ToXmlGenerator) gen)._handleEndObject();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndObject(JsonGenerator,int).gen","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndObject(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndObject(JsonGenerator,int).nrOfEntries","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndObject(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartElement(XMLStreamWriter2,String,String)","Method","No Comment","@Override
public void writeStartElement(XMLStreamWriter2 sw, String nsURI, String localName) throws XMLStreamException {
    if (!_objectIndenter.isInline()) {
        if (_justHadStartElement) {
            _justHadStartElement = false;
        }
        _objectIndenter.writeIndentation(sw, _nesting);
        ++_nesting;
    }
    sw.writeStartElement(nsURI, localName);
    _justHadStartElement = true;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartElement(XMLStreamWriter2,String,String).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartElement(XMLStreamWriter2,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartElement(XMLStreamWriter2,String,String).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartElement(XMLStreamWriter2,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartElement(XMLStreamWriter2,String,String).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeStartElement(XMLStreamWriter2,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndElement(XMLStreamWriter2,int)","Method","No Comment","@Override
public void writeEndElement(XMLStreamWriter2 sw, int nrOfEntries) throws XMLStreamException {
    if (!_objectIndenter.isInline()) {
        --_nesting;
    }
    // for empty elements, no need for linefeeds etc:
    if (_justHadStartElement) {
        _justHadStartElement = false;
    } else {
        _objectIndenter.writeIndentation(sw, _nesting);
    }
    sw.writeEndElement();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndElement(XMLStreamWriter2,int).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndElement(XMLStreamWriter2,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndElement(XMLStreamWriter2,int).nrOfEntries","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeEndElement(XMLStreamWriter2,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean)","Method","No Comment","@Override
public void writeLeafElement(XMLStreamWriter2 sw, String nsURI, String localName, String text, boolean isCData) throws XMLStreamException {
    if (!_objectIndenter.isInline()) {
        _objectIndenter.writeIndentation(sw, _nesting);
    }
    sw.writeStartElement(nsURI, localName);
    if (isCData) {
        sw.writeCData(text);
    } else {
        sw.writeCharacters(text);
    }
    sw.writeEndElement();
    _justHadStartElement = false;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean).text","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean).isCData","Parameter_5","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean)","Method","No Comment","@Override
public void writeLeafElement(XMLStreamWriter2 sw, String nsURI, String localName, char[] buffer, int offset, int len, boolean isCData) throws XMLStreamException {
    if (!_objectIndenter.isInline()) {
        _objectIndenter.writeIndentation(sw, _nesting);
    }
    sw.writeStartElement(nsURI, localName);
    if (isCData) {
        sw.writeCData(buffer, offset, len);
    } else {
        sw.writeCharacters(buffer, offset, len);
    }
    sw.writeEndElement();
    _justHadStartElement = false;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean).buffer","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean).offset","Parameter_5","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean).len","Parameter_6","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean).isCData","Parameter_7","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,char[],int,int,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,boolean)","Method","No Comment","@Override
public void writeLeafElement(XMLStreamWriter2 sw, String nsURI, String localName, boolean value) throws XMLStreamException {
    if (!_objectIndenter.isInline()) {
        _objectIndenter.writeIndentation(sw, _nesting);
    }
    sw.writeStartElement(nsURI, localName);
    sw.writeBoolean(value);
    sw.writeEndElement();
    _justHadStartElement = false;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,boolean).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,boolean).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,boolean).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,boolean).value","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,int)","Method","No Comment","@Override
public void writeLeafElement(XMLStreamWriter2 sw, String nsURI, String localName, int value) throws XMLStreamException {
    if (!_objectIndenter.isInline()) {
        _objectIndenter.writeIndentation(sw, _nesting);
    }
    sw.writeStartElement(nsURI, localName);
    sw.writeInt(value);
    sw.writeEndElement();
    _justHadStartElement = false;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,int).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,int).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,int).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,int).value","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,long)","Method","No Comment","@Override
public void writeLeafElement(XMLStreamWriter2 sw, String nsURI, String localName, long value) throws XMLStreamException {
    if (!_objectIndenter.isInline()) {
        _objectIndenter.writeIndentation(sw, _nesting);
    }
    sw.writeStartElement(nsURI, localName);
    sw.writeLong(value);
    sw.writeEndElement();
    _justHadStartElement = false;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,long).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,long).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,long).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,long).value","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,double)","Method","No Comment","@Override
public void writeLeafElement(XMLStreamWriter2 sw, String nsURI, String localName, double value) throws XMLStreamException {
    if (!_objectIndenter.isInline()) {
        _objectIndenter.writeIndentation(sw, _nesting);
    }
    sw.writeStartElement(nsURI, localName);
    sw.writeDouble(value);
    sw.writeEndElement();
    _justHadStartElement = false;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,double).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,double).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,double).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,double).value","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,float)","Method","No Comment","@Override
public void writeLeafElement(XMLStreamWriter2 sw, String nsURI, String localName, float value) throws XMLStreamException {
    if (!_objectIndenter.isInline()) {
        _objectIndenter.writeIndentation(sw, _nesting);
    }
    sw.writeStartElement(nsURI, localName);
    sw.writeFloat(value);
    sw.writeEndElement();
    _justHadStartElement = false;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,float).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,float).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,float).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,float).value","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigInteger)","Method","No Comment","@Override
public void writeLeafElement(XMLStreamWriter2 sw, String nsURI, String localName, BigInteger value) throws XMLStreamException {
    if (!_objectIndenter.isInline()) {
        _objectIndenter.writeIndentation(sw, _nesting);
    }
    sw.writeStartElement(nsURI, localName);
    sw.writeInteger(value);
    sw.writeEndElement();
    _justHadStartElement = false;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigInteger).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigInteger)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigInteger).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigInteger)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigInteger).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigInteger)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigInteger).value","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigInteger)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigDecimal)","Method","No Comment","@Override
public void writeLeafElement(XMLStreamWriter2 sw, String nsURI, String localName, BigDecimal value) throws XMLStreamException {
    if (!_objectIndenter.isInline()) {
        _objectIndenter.writeIndentation(sw, _nesting);
    }
    sw.writeStartElement(nsURI, localName);
    sw.writeDecimal(value);
    sw.writeEndElement();
    _justHadStartElement = false;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigDecimal).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigDecimal)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigDecimal).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigDecimal)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigDecimal).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigDecimal)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigDecimal).value","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,BigDecimal)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int)","Method","method definition changed in 2.12","@Override
public void writeLeafElement(XMLStreamWriter2 sw, String nsURI, String localName, org.codehaus.stax2.typed.Base64Variant base64variant, byte[] data, int offset, int len) throws XMLStreamException {
    if (!_objectIndenter.isInline()) {
        _objectIndenter.writeIndentation(sw, _nesting);
    }
    sw.writeStartElement(nsURI, localName);
    sw.writeBinary(base64variant, data, offset, len);
    sw.writeEndElement();
    _justHadStartElement = false;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int).base64variant","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int).data","Parameter_5","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int).offset","Parameter_6","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int).len","Parameter_7","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafElement(XMLStreamWriter2,String,String,org.codehaus.stax2.typed.Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafNullElement(XMLStreamWriter2,String,String)","Method","No Comment","@Override
public void writeLeafNullElement(XMLStreamWriter2 sw, String nsURI, String localName) throws XMLStreamException {
    if (!_objectIndenter.isInline()) {
        _objectIndenter.writeIndentation(sw, _nesting);
    }
    sw.writeEmptyElement(nsURI, localName);
    _justHadStartElement = false;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafNullElement(XMLStreamWriter2,String,String).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafNullElement(XMLStreamWriter2,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafNullElement(XMLStreamWriter2,String,String).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafNullElement(XMLStreamWriter2,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafNullElement(XMLStreamWriter2,String,String).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafNullElement(XMLStreamWriter2,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafXsiNilElement(XMLStreamWriter2,String,String)","Method","@since 2.12","public void writeLeafXsiNilElement(XMLStreamWriter2 sw, String nsURI, String localName) throws XMLStreamException {
    if (!_objectIndenter.isInline()) {
        _objectIndenter.writeIndentation(sw, _nesting);
    }
    sw.writeEmptyElement(nsURI, localName);
    sw.writeAttribute(""xsi"", XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI, ""nil"", ""true"");
    _justHadStartElement = false;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafXsiNilElement(XMLStreamWriter2,String,String).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafXsiNilElement(XMLStreamWriter2,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafXsiNilElement(XMLStreamWriter2,String,String).nsURI","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafXsiNilElement(XMLStreamWriter2,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafXsiNilElement(XMLStreamWriter2,String,String).localName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writeLeafXsiNilElement(XMLStreamWriter2,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writePrologLinefeed(XMLStreamWriter2)","Method","No Comment","// since 2.7
@Override
public void writePrologLinefeed(XMLStreamWriter2 sw) throws XMLStreamException {
    // 06-Dec-2015, tatu: Alternatively could try calling `writeSpace()`...
    sw.writeRaw(_newLine);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writePrologLinefeed(XMLStreamWriter2).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.writePrologLinefeed(XMLStreamWriter2)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.<init>()","Constructor","No Comment","public DefaultXmlPrettyPrinter() {
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.<init>(DefaultXmlPrettyPrinter)","Constructor","No Comment","protected DefaultXmlPrettyPrinter(DefaultXmlPrettyPrinter base) {
    _arrayIndenter = base._arrayIndenter;
    _objectIndenter = base._objectIndenter;
    _nesting = base._nesting;
    _newLine = base._newLine;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.<init>(DefaultXmlPrettyPrinter).base","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.<init>(DefaultXmlPrettyPrinter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter","Interface","* Interface that defines objects that can produce indentation used
     * to separate object entries and array values. Indentation in this
     * context just means insertion of white space, independent of whether
     * linefeeds are output.","Interface do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(JsonGenerator,int)","Abstract Method","No Comment","public void writeIndentation(JsonGenerator g, int level) throws IOException;","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(JsonGenerator,int).g","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(JsonGenerator,int).level","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(XMLStreamWriter2,int)","Abstract Method","No Comment","public void writeIndentation(XMLStreamWriter2 sw, int level) throws XMLStreamException;","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(XMLStreamWriter2,int).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(XMLStreamWriter2,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(XMLStreamWriter2,int).level","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.writeIndentation(XMLStreamWriter2,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Indenter.isInline()","Abstract Method","* @return True if indenter is considered inline (does not add linefeeds),
         *   false otherwise","public boolean isInline();","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter","Class","* Dummy implementation that adds no indentation whatsoever","Class do not obtain Source Code","No return type","protected , static ","","com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter;java.io.Serializable"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.writeIndentation(JsonGenerator,int)","Method","No Comment","@Override
public void writeIndentation(JsonGenerator jg, int level) {
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.writeIndentation(JsonGenerator,int).jg","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.writeIndentation(JsonGenerator,int).level","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.isInline()","Method","No Comment","@Override
public boolean isInline() {
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.writeIndentation(XMLStreamWriter2,int)","Method","No Comment","@Override
public void writeIndentation(XMLStreamWriter2 sw, int level) {
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.writeIndentation(XMLStreamWriter2,int).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.writeIndentation(XMLStreamWriter2,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.writeIndentation(XMLStreamWriter2,int).level","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.writeIndentation(XMLStreamWriter2,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$NopIndenter.<init>()","Constructor","No Comment","public NopIndenter() {
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter","Class","* This is a very simple indenter that only every adds a
     * single space for indentation. It is used as the default
     * indenter for array values.","Class do not obtain Source Code","No return type","protected , static ","","com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter;java.io.Serializable"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.writeIndentation(XMLStreamWriter2,int)","Method","No Comment","@Override
public void writeIndentation(XMLStreamWriter2 sw, int level) throws XMLStreamException {
    sw.writeRaw("" "");
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.writeIndentation(XMLStreamWriter2,int).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.writeIndentation(XMLStreamWriter2,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.writeIndentation(XMLStreamWriter2,int).level","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.writeIndentation(XMLStreamWriter2,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.writeIndentation(JsonGenerator,int)","Method","No Comment","@Override
public void writeIndentation(JsonGenerator g, int level) throws IOException {
    g.writeRaw(' ');
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.writeIndentation(JsonGenerator,int).g","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.writeIndentation(JsonGenerator,int).level","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.isInline()","Method","No Comment","@Override
public boolean isInline() {
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$FixedSpaceIndenter.<init>()","Constructor","No Comment","public FixedSpaceIndenter() {
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter","Class","* Default linefeed-based indenter uses system-specific linefeeds and
     * 2 spaces for indentation per level.","Class do not obtain Source Code","No return type","protected ","","com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter;java.io.Serializable"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.isInline()","Method","No Comment","@Override
public boolean isInline() {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(XMLStreamWriter2,int)","Method","No Comment","@Override
public void writeIndentation(XMLStreamWriter2 sw, int level) throws XMLStreamException {
    sw.writeRaw(_newLine);
    // 2 spaces per level
    level += level;
    while (level > SPACE_COUNT) {
        // should never happen but...
        sw.writeRaw(SPACES, 0, SPACE_COUNT);
        level -= SPACES.length;
    }
    sw.writeRaw(SPACES, 0, level);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(XMLStreamWriter2,int).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(XMLStreamWriter2,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(XMLStreamWriter2,int).level","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(XMLStreamWriter2,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(JsonGenerator,int)","Method","No Comment","@Override
public void writeIndentation(JsonGenerator jg, int level) throws IOException {
    jg.writeRaw(_newLine);
    // 2 spaces per level
    level += level;
    while (level > SPACE_COUNT) {
        // should never happen but...
        jg.writeRaw(SPACES, 0, SPACE_COUNT);
        level -= SPACES.length;
    }
    jg.writeRaw(SPACES, 0, level);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(JsonGenerator,int).jg","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(JsonGenerator,int).level","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter$Lf2SpacesIndenter.<init>()","Constructor","No Comment","public Lf2SpacesIndenter() {
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter","Interface","* Interface that defines objects that can produce indentation used
     * to separate object entries and array values. Indentation in this
     * context just means insertion of white space, independent of whether
     * linefeeds are output.","Interface do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter.writeIndentation(JsonGenerator,int)","Abstract Method","No Comment","public void writeIndentation(JsonGenerator g, int level) throws IOException;","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter.writeIndentation(JsonGenerator,int).g","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter.writeIndentation(JsonGenerator,int).level","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter.writeIndentation(XMLStreamWriter2,int)","Abstract Method","No Comment","public void writeIndentation(XMLStreamWriter2 sw, int level) throws XMLStreamException;","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter.writeIndentation(XMLStreamWriter2,int).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter.writeIndentation(XMLStreamWriter2,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter.writeIndentation(XMLStreamWriter2,int).level","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter.writeIndentation(XMLStreamWriter2,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter.isInline()","Abstract Method","* @return True if indenter is considered inline (does not add linefeeds),
         *   false otherwise","public boolean isInline();","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.NopIndenter","Class","* Dummy implementation that adds no indentation whatsoever","Class do not obtain Source Code","No return type","protected , static ","","com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter;java.io.Serializable"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.NopIndenter.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.NopIndenter.writeIndentation(JsonGenerator,int)","Method","No Comment","@Override
public void writeIndentation(JsonGenerator jg, int level) {
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.NopIndenter.writeIndentation(JsonGenerator,int).jg","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.NopIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.NopIndenter.writeIndentation(JsonGenerator,int).level","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.NopIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.NopIndenter.isInline()","Method","No Comment","@Override
public boolean isInline() {
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.NopIndenter.writeIndentation(XMLStreamWriter2,int)","Method","No Comment","@Override
public void writeIndentation(XMLStreamWriter2 sw, int level) {
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.NopIndenter.writeIndentation(XMLStreamWriter2,int).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.NopIndenter.writeIndentation(XMLStreamWriter2,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.NopIndenter.writeIndentation(XMLStreamWriter2,int).level","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.NopIndenter.writeIndentation(XMLStreamWriter2,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.NopIndenter.<init>()","Constructor","No Comment","public NopIndenter() {
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.FixedSpaceIndenter","Class","* This is a very simple indenter that only every adds a
     * single space for indentation. It is used as the default
     * indenter for array values.","Class do not obtain Source Code","No return type","protected , static ","","com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter;java.io.Serializable"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.FixedSpaceIndenter.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.FixedSpaceIndenter.writeIndentation(XMLStreamWriter2,int)","Method","No Comment","@Override
public void writeIndentation(XMLStreamWriter2 sw, int level) throws XMLStreamException {
    sw.writeRaw("" "");
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.FixedSpaceIndenter.writeIndentation(XMLStreamWriter2,int).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.FixedSpaceIndenter.writeIndentation(XMLStreamWriter2,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.FixedSpaceIndenter.writeIndentation(XMLStreamWriter2,int).level","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.FixedSpaceIndenter.writeIndentation(XMLStreamWriter2,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.FixedSpaceIndenter.writeIndentation(JsonGenerator,int)","Method","No Comment","@Override
public void writeIndentation(JsonGenerator g, int level) throws IOException {
    g.writeRaw(' ');
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.FixedSpaceIndenter.writeIndentation(JsonGenerator,int).g","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.FixedSpaceIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.FixedSpaceIndenter.writeIndentation(JsonGenerator,int).level","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.FixedSpaceIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.FixedSpaceIndenter.isInline()","Method","No Comment","@Override
public boolean isInline() {
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.FixedSpaceIndenter.<init>()","Constructor","No Comment","public FixedSpaceIndenter() {
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Lf2SpacesIndenter","Class","* Default linefeed-based indenter uses system-specific linefeeds and
     * 2 spaces for indentation per level.","Class do not obtain Source Code","No return type","protected ","","com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Indenter;java.io.Serializable"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Lf2SpacesIndenter.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Lf2SpacesIndenter.isInline()","Method","No Comment","@Override
public boolean isInline() {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Lf2SpacesIndenter.writeIndentation(XMLStreamWriter2,int)","Method","No Comment","@Override
public void writeIndentation(XMLStreamWriter2 sw, int level) throws XMLStreamException {
    sw.writeRaw(_newLine);
    // 2 spaces per level
    level += level;
    while (level > SPACE_COUNT) {
        // should never happen but...
        sw.writeRaw(SPACES, 0, SPACE_COUNT);
        level -= SPACES.length;
    }
    sw.writeRaw(SPACES, 0, level);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Lf2SpacesIndenter.writeIndentation(XMLStreamWriter2,int).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Lf2SpacesIndenter.writeIndentation(XMLStreamWriter2,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Lf2SpacesIndenter.writeIndentation(XMLStreamWriter2,int).level","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Lf2SpacesIndenter.writeIndentation(XMLStreamWriter2,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Lf2SpacesIndenter.writeIndentation(JsonGenerator,int)","Method","No Comment","@Override
public void writeIndentation(JsonGenerator jg, int level) throws IOException {
    jg.writeRaw(_newLine);
    // 2 spaces per level
    level += level;
    while (level > SPACE_COUNT) {
        // should never happen but...
        jg.writeRaw(SPACES, 0, SPACE_COUNT);
        level -= SPACES.length;
    }
    jg.writeRaw(SPACES, 0, level);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Lf2SpacesIndenter.writeIndentation(JsonGenerator,int).jg","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Lf2SpacesIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Lf2SpacesIndenter.writeIndentation(JsonGenerator,int).level","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Lf2SpacesIndenter.writeIndentation(JsonGenerator,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter.Lf2SpacesIndenter.<init>()","Constructor","No Comment","public Lf2SpacesIndenter() {
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.TypeUtil","Class","No Comment","Class do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(JavaType)","Method","* Helper method used for figuring out if given raw type is a collection (""indexed"") type;
     * in which case a wrapper element is typically added.","public static boolean isIndexedType(JavaType type) {
    Class<?> cls = type.getRawClass();
    // 25-Mar-2024, tatu [dataformat-xml#646]: Need to support Iterable too
    if (type.isContainerType() || type.isIterationType() || cls == Iterable.class) {
        // One special case; byte[] will be serialized as base64-encoded String, not real array, so:
        // (actually, ditto for char[]; thought to be a String)
        if (cls == byte[].class || cls == char[].class) {
            return false;
        }
        // Also, should not add wrapping for Maps
        // [dataformat-xml#220]: nor map-like (Scala Map) types
        if (type.isMapLikeType()) {
            return false;
        }
        return true;
    }
    return false;
}","boolean","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(JavaType).type","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.TypeUtil.isIndexedType(JavaType)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.Stax2JacksonReaderAdapter","Class","* Refinement of {@link Stax2ReaderAdapter} to override certain methods,
 * to patch over flaws of JDK-provided default Stax implementation, SJSXP
 *
 * @since 2.17","Class do not obtain Source Code","No return type","public ","org.codehaus.stax2.ri.Stax2ReaderAdapter",""
"com.fasterxml.jackson.dataformat.xml.util.Stax2JacksonReaderAdapter._delegate","Field","No Comment","private final XMLStreamReader _delegate;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.Stax2JacksonReaderAdapter.wrapIfNecessary(XMLStreamReader)","Method","No Comment","public static XMLStreamReader2 wrapIfNecessary(XMLStreamReader sr) {
    if (sr instanceof XMLStreamReader2) {
        return (XMLStreamReader2) sr;
    }
    return new Stax2JacksonReaderAdapter(sr);
}","XMLStreamReader2","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.Stax2JacksonReaderAdapter.wrapIfNecessary(XMLStreamReader).sr","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.Stax2JacksonReaderAdapter.wrapIfNecessary(XMLStreamReader)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.Stax2JacksonReaderAdapter.next()","Method","04-Dec-2023, tatu: Needed to catch exceptions from buggy SJSXP decoder...","@Override
public int next() throws XMLStreamException {
    try {
        return super.next();
    } catch (ArrayIndexOutOfBoundsException e) {
        // Use IllegalStateException since that is guaranteed to be translated
        // appropriately into Jackson type by caller:
        throw new IllegalStateException(""Internal processing error by `XMLStreamReader` of type "" + ClassUtil.classNameOf(_delegate) + "" when calling `next()` ("" + ""consider using Woodstox instead): "" + e.getMessage(), e);
    }
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.Stax2JacksonReaderAdapter.<init>(XMLStreamReader)","Constructor","No Comment","public Stax2JacksonReaderAdapter(XMLStreamReader sr) {
    super(sr);
    _delegate = sr;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.Stax2JacksonReaderAdapter.<init>(XMLStreamReader).sr","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.Stax2JacksonReaderAdapter.<init>(XMLStreamReader)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup","Class","* Helper class used for efficiently finding root element name used with
 * XML serializations.","Class do not obtain Source Code","No return type","public ","","java.io.Serializable"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.ROOT_NAME_FOR_NULL","Field","* If all we get to serialize is a null, there's no way to figure out
     * expected root name; so let's just default to literal {@code ""null""}.","public final static QName ROOT_NAME_FOR_NULL = new QName(""null"");","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._rootNames","Field","* For efficient operation, let's try to minimize number of times we
     * need to introspect root element name to use.
     *<p>
     * Note: changed to <code>transient</code> for 2.3; no point in serializing such
     * state","protected final transient LRUMap<ClassKey, QName> _rootNames;","No return type","protected , final , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.readResolve()","Method","No Comment","protected Object readResolve() {
    // just need to make 100% sure it gets set to non-null, that's all
    // 05-Jan-2020, tatu: How is that possibly, you ask? JDK serialization, that's how
    //   (it by-passes calls to constructors, as well as initializers)
    //   ... and if you don't believe, try commenting it out and see test failure you get
    if (_rootNames == null) {
        return new XmlRootNameLookup();
    }
    return this;
}","Object","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(JavaType,MapperConfig)","Method","No Comment","public QName findRootName(JavaType rootType, MapperConfig<?> config) {
    return findRootName(rootType.getRawClass(), config);
}","QName","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(JavaType,MapperConfig).rootType","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(JavaType,MapperConfig)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(JavaType,MapperConfig).config","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(JavaType,MapperConfig)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(Class,MapperConfig)","Method","No Comment","public QName findRootName(Class<?> rootType, MapperConfig<?> config) {
    ClassKey key = new ClassKey(rootType);
    QName name = _rootNames.get(key);
    if (name != null) {
        return name;
    }
    name = _findRootName(config, rootType);
    _rootNames.put(key, name);
    return name;
}","QName","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(Class,MapperConfig).rootType","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(Class,MapperConfig)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(Class,MapperConfig).config","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.findRootName(Class,MapperConfig)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(MapperConfig,Class)","Method","No Comment","protected QName _findRootName(MapperConfig<?> config, Class<?> rootType) {
    BeanDescription beanDesc = config.introspectClassAnnotations(rootType);
    AnnotationIntrospector intr = config.getAnnotationIntrospector();
    AnnotatedClass ac = beanDesc.getClassInfo();
    String localName = null;
    String ns = null;
    PropertyName root = intr.findRootName(ac);
    if (root != null) {
        localName = root.getSimpleName();
        ns = root.getNamespace();
    }
    // No answer so far? Let's just default to using simple class name
    if (localName == null || localName.length() == 0) {
        // Should we strip out enclosing class tho? For now, nope:
        // one caveat: array simple names end with ""[]""; also, ""$"" needs replacing
        localName = StaxUtil.sanitizeXmlTypeName(rootType.getSimpleName());
        return _qname(ns, localName);
    }
    // Otherwise let's see if there's namespace, too (if we are missing it)
    if (ns == null || ns.isEmpty()) {
        ns = _findNamespace(config, intr, ac);
    }
    return _qname(ns, localName);
}","QName","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(MapperConfig,Class).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(MapperConfig,Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(MapperConfig,Class).rootType","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findRootName(MapperConfig,Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._qname(String,String)","Method","No Comment","private QName _qname(String ns, String localName) {
    if (ns == null) {
        // some QName impls barf on nulls...
        ns = """";
    }
    return new QName(ns, localName);
}","QName","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._qname(String,String).ns","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._qname(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._qname(String,String).localName","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._qname(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findNamespace(MapperConfig,AnnotationIntrospector,AnnotatedClass)","Method","No Comment","private String _findNamespace(MapperConfig<?> config, AnnotationIntrospector ai, AnnotatedClass ann) {
    for (AnnotationIntrospector intr : ai.allIntrospectors()) {
        if (intr instanceof AnnotationIntrospector.XmlExtensions) {
            String ns = ((AnnotationIntrospector.XmlExtensions) intr).findNamespace(config, ann);
            if (ns != null) {
                return ns;
            }
        }
    }
    return null;
}","String","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findNamespace(MapperConfig,AnnotationIntrospector,AnnotatedClass).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findNamespace(MapperConfig,AnnotationIntrospector,AnnotatedClass)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findNamespace(MapperConfig,AnnotationIntrospector,AnnotatedClass).ai","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findNamespace(MapperConfig,AnnotationIntrospector,AnnotatedClass)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findNamespace(MapperConfig,AnnotationIntrospector,AnnotatedClass).ann","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup._findNamespace(MapperConfig,AnnotationIntrospector,AnnotatedClass)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup.<init>()","Constructor","No Comment","public XmlRootNameLookup() {
    _rootNames = new LRUMap<ClassKey, QName>(40, 200);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder","Class","* Custom specialization of {@link StdTypeResolverBuilder}; needed so that
 * type id property name can be modified as necessary to make it legal
 * XML element or attribute name.
 *<p>
 * NOTE: Since 2.17, property name cleansing only applied to default
 * names (like {@code ""@class""} and {@code ""@type""}) but not to explicitly
 * specified ones (where caller presumably knows what to do).","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",""
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder._propName(String,JsonTypeInfo.Id)","Method","No Comment","@Override
protected String _propName(String propName, JsonTypeInfo.Id idType) {
    // 30-Jan-2024, tatu: Before 2.17 we used to indiscriminately cleanse
    //   property name always; with 2.17+ only default ones
    if (propName == null || propName.isEmpty()) {
        propName = StaxUtil.sanitizeXmlTypeName(idType.getDefaultPropertyName());
    } else {
        // ... alas, there's... a ""feature"" (read: bug) in `JsonTypeInfo.Value` construction
        // which will automatically apply default property name if no explicit property
        // name specific. This means we don't really know if default is being used.
        // But let's assume that if ""propName.equals(defaultPropName)"" this is the case.
        if (propName.equals(idType.getDefaultPropertyName())) {
            propName = StaxUtil.sanitizeXmlTypeName(propName);
        }
    }
    return propName;
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder._propName(String,JsonTypeInfo.Id).propName","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder._propName(String,JsonTypeInfo.Id)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder._propName(String,JsonTypeInfo.Id).idType","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder._propName(String,JsonTypeInfo.Id)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean)","Method","No Comment","@Override
protected TypeIdResolver idResolver(MapperConfig<?> config, JavaType baseType, PolymorphicTypeValidator subtypeValidator, Collection<NamedType> subtypes, boolean forSer, boolean forDeser) {
    if (_customIdResolver != null) {
        return _customIdResolver;
    }
    // Only override handlers of class, minimal class; name is good as is
    switch(_idType) {
        case CLASS:
            return new XmlClassNameIdResolver(baseType, config.getTypeFactory(), subTypeValidator(config));
        case MINIMAL_CLASS:
            return new XmlMinimalClassNameIdResolver(baseType, config.getTypeFactory(), subTypeValidator(config));
        default:
    }
    return super.idResolver(config, baseType, subtypeValidator, subtypes, forSer, forDeser);
}","TypeIdResolver","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean).baseType","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean).subtypeValidator","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean).subtypes","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean).forSer","Parameter_5","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean).forDeser","Parameter_6","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.encodeXmlClassName(String)","Method","* Helper method for encoding regular Java class name in form that
     * can be used as XML element name.","protected static String encodeXmlClassName(String className) {
    /* For now, let's just replace '$'s with double dots...
         * Perhaps make configurable in future?
         */
    int ix = className.lastIndexOf('$');
    if (ix >= 0) {
        StringBuilder sb = new StringBuilder(className);
        do {
            sb.replace(ix, ix + 1, "".."");
            ix = className.lastIndexOf('$', ix - 1);
        } while (ix >= 0);
        className = sb.toString();
    }
    return className;
}","String","protected , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.encodeXmlClassName(String).className","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.encodeXmlClassName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.decodeXmlClassName(String)","Method","* Helper method for decoding ""XML safe"" Java class name back into
     * actual class name","protected static String decodeXmlClassName(String className) {
    int ix = className.lastIndexOf("".."");
    if (ix >= 0) {
        StringBuilder sb = new StringBuilder(className);
        do {
            sb.replace(ix, ix + 2, ""$"");
            ix = className.lastIndexOf("".."", ix - 1);
        } while (ix >= 0);
        className = sb.toString();
    }
    return className;
}","String","protected , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.decodeXmlClassName(String).className","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.decodeXmlClassName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.<init>()","Constructor","No Comment","public XmlTypeResolverBuilder() {
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.<init>(JsonTypeInfo.Value)","Constructor","No Comment","public XmlTypeResolverBuilder(JsonTypeInfo.Value settings) {
    super(settings);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.<init>(JsonTypeInfo.Value).settings","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.<init>(JsonTypeInfo.Value)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver","Class","No Comment","Class do not obtain Source Code","No return type","protected , static ","com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver",""
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 2L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.idFromValue(Object)","Method","No Comment","@Override
public String idFromValue(Object value) {
    return encodeXmlClassName(super.idFromValue(value));
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.idFromValue(Object).value","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.idFromValue(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.typeFromId(DatabindContext,String)","Method","No Comment","@Override
public JavaType typeFromId(DatabindContext context, String id) throws IOException {
    return super.typeFromId(context, decodeXmlClassName(id));
}","JavaType","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.typeFromId(DatabindContext,String).context","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.typeFromId(DatabindContext,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.typeFromId(DatabindContext,String).id","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.typeFromId(DatabindContext,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator)","Constructor","No Comment","public XmlClassNameIdResolver(JavaType baseType, TypeFactory typeFactory, PolymorphicTypeValidator ptv) {
    super(baseType, typeFactory, ptv);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator).baseType","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator).typeFactory","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator).ptv","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver","Class","No Comment","Class do not obtain Source Code","No return type","protected , static ","com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver",""
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 2L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.idFromValue(Object)","Method","No Comment","@Override
public String idFromValue(Object value) {
    return encodeXmlClassName(super.idFromValue(value));
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.idFromValue(Object).value","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.idFromValue(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.typeFromId(DatabindContext,String)","Method","No Comment","@Override
public JavaType typeFromId(DatabindContext context, String id) throws IOException {
    return super.typeFromId(context, decodeXmlClassName(id));
}","JavaType","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.typeFromId(DatabindContext,String).context","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.typeFromId(DatabindContext,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.typeFromId(DatabindContext,String).id","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.typeFromId(DatabindContext,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator)","Constructor","No Comment","public XmlMinimalClassNameIdResolver(JavaType baseType, TypeFactory typeFactory, PolymorphicTypeValidator ptv) {
    super(baseType, typeFactory, ptv);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator).baseType","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator).typeFactory","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator).ptv","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder$XmlMinimalClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlClassNameIdResolver","Class","No Comment","Class do not obtain Source Code","No return type","protected , static ","com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver",""
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlClassNameIdResolver.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 2L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlClassNameIdResolver.idFromValue(Object)","Method","No Comment","@Override
public String idFromValue(Object value) {
    return encodeXmlClassName(super.idFromValue(value));
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlClassNameIdResolver.idFromValue(Object).value","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlClassNameIdResolver.idFromValue(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlClassNameIdResolver.typeFromId(DatabindContext,String)","Method","No Comment","@Override
public JavaType typeFromId(DatabindContext context, String id) throws IOException {
    return super.typeFromId(context, decodeXmlClassName(id));
}","JavaType","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlClassNameIdResolver.typeFromId(DatabindContext,String).context","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlClassNameIdResolver.typeFromId(DatabindContext,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlClassNameIdResolver.typeFromId(DatabindContext,String).id","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlClassNameIdResolver.typeFromId(DatabindContext,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator)","Constructor","No Comment","public XmlClassNameIdResolver(JavaType baseType, TypeFactory typeFactory, PolymorphicTypeValidator ptv) {
    super(baseType, typeFactory, ptv);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator).baseType","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator).typeFactory","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator).ptv","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlMinimalClassNameIdResolver","Class","No Comment","Class do not obtain Source Code","No return type","protected , static ","com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver",""
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlMinimalClassNameIdResolver.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 2L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlMinimalClassNameIdResolver.idFromValue(Object)","Method","No Comment","@Override
public String idFromValue(Object value) {
    return encodeXmlClassName(super.idFromValue(value));
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlMinimalClassNameIdResolver.idFromValue(Object).value","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlMinimalClassNameIdResolver.idFromValue(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlMinimalClassNameIdResolver.typeFromId(DatabindContext,String)","Method","No Comment","@Override
public JavaType typeFromId(DatabindContext context, String id) throws IOException {
    return super.typeFromId(context, decodeXmlClassName(id));
}","JavaType","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlMinimalClassNameIdResolver.typeFromId(DatabindContext,String).context","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlMinimalClassNameIdResolver.typeFromId(DatabindContext,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlMinimalClassNameIdResolver.typeFromId(DatabindContext,String).id","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlMinimalClassNameIdResolver.typeFromId(DatabindContext,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlMinimalClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator)","Constructor","No Comment","public XmlMinimalClassNameIdResolver(JavaType baseType, TypeFactory typeFactory, PolymorphicTypeValidator ptv) {
    super(baseType, typeFactory, ptv);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlMinimalClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator).baseType","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlMinimalClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlMinimalClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator).typeFactory","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlMinimalClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlMinimalClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator).ptv","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlTypeResolverBuilder.XmlMinimalClassNameIdResolver.<init>(JavaType,TypeFactory,PolymorphicTypeValidator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessor","Interface","* API of processors primarily used for dealing with XML names
 * containing invalid characters. Invalid characters in names can,
 * for instance, easily appear in map keys.
 * <p>
 * Processors should be set in the {@link XmlMapper#setXmlNameProcessor}
 * and/or the {@link XmlMapper.Builder#xmlNameProcessor} methods.
 * <p>
 * See {@link XmlNameProcessors} for default processors.
 *
 * @since 2.14","Interface do not obtain Source Code","No return type","public ","java.io.Serializable",""
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessor.encodeName(XmlName)","Abstract Method","* Used during XML serialization.
     * <p>
     * This method should process the provided {@link XmlName} and
     * escape / encode invalid XML characters.
     *
     * @param name The name to encode","void encodeName(XmlName name);","void","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessor.encodeName(XmlName).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessor.encodeName(XmlName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessor.decodeName(XmlName)","Abstract Method","* Used during XML deserialization.
     * <p>
     * This method should process the provided {@link XmlName} and
     * revert the encoding done in the {@link #encodeName(XmlName)}
     * method.
     * <p>
     * Note: Depending on the use case, it is not always required (or
     * even possible) to reverse an encoding with 100% accuracy.
     *
     * @param name The name to encode","void decodeName(XmlName name);","void","default","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessor.decodeName(XmlName).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessor.decodeName(XmlName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessor$XmlName","Class","* Representation of an XML element or attribute name","Class do not obtain Source Code","No return type","","",""
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessor$XmlName.namespace","Field","No Comment","public String namespace;","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessor$XmlName.localPart","Field","No Comment","public String localPart;","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessor$XmlName.<init>()","Constructor","No Comment","public XmlName() {
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessor.XmlName","Class","* Representation of an XML element or attribute name","Class do not obtain Source Code","No return type","default","",""
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessor.XmlName.namespace","Field","No Comment","public String namespace;","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessor.XmlName.localPart","Field","No Comment","public String localPart;","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessor.XmlName.<init>()","Constructor","No Comment","public XmlName() {
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector","Interface","* Additional extension interface used above and beyond
 * {@link AnnotationIntrospector} to handle XML-specific configuration.","Interface do not obtain Source Code","No return type","public ","com.fasterxml.jackson.databind.AnnotationIntrospector.XmlExtensions",""
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair","Class","* Extension of <code>AnnotationIntrospector.Pair</code> that can
     * also dispatch 'XmlAnnotationIntrospector' methods.","Class do not obtain Source Code","No return type","public , static ","com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair","com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair._xmlPrimary","Field","No Comment","protected final AnnotationIntrospector.XmlExtensions _xmlPrimary;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair._xmlSecondary","Field","No Comment","protected final AnnotationIntrospector.XmlExtensions _xmlSecondary;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.instance(AnnotationIntrospector,AnnotationIntrospector)","Method","No Comment","public static XmlAnnotationIntrospector.Pair instance(AnnotationIntrospector a1, AnnotationIntrospector a2) {
    return new XmlAnnotationIntrospector.Pair(a1, a2);
}","XmlAnnotationIntrospector.Pair","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.instance(AnnotationIntrospector,AnnotationIntrospector).a1","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.instance(AnnotationIntrospector,AnnotationIntrospector)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.instance(AnnotationIntrospector,AnnotationIntrospector).a2","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.instance(AnnotationIntrospector,AnnotationIntrospector)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.findNamespace(MapperConfig,Annotated)","Method","No Comment","@Override
public String findNamespace(MapperConfig<?> config, Annotated ann) {
    String value = (_xmlPrimary == null) ? null : _xmlPrimary.findNamespace(config, ann);
    if ((value == null) && (_xmlSecondary != null)) {
        value = _xmlSecondary.findNamespace(config, ann);
    }
    return value;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.findNamespace(MapperConfig,Annotated).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.findNamespace(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.findNamespace(MapperConfig,Annotated).ann","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.findNamespace(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsAttribute(MapperConfig,Annotated)","Method","No Comment","@Override
public Boolean isOutputAsAttribute(MapperConfig<?> config, Annotated ann) {
    Boolean value = (_xmlPrimary == null) ? null : _xmlPrimary.isOutputAsAttribute(config, ann);
    if ((value == null) && (_xmlSecondary != null)) {
        value = _xmlSecondary.isOutputAsAttribute(config, ann);
    }
    return value;
}","Boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsAttribute(MapperConfig,Annotated).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsAttribute(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsAttribute(MapperConfig,Annotated).ann","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsAttribute(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsText(MapperConfig,Annotated)","Method","No Comment","@Override
public Boolean isOutputAsText(MapperConfig<?> config, Annotated ann) {
    Boolean value = (_xmlPrimary == null) ? null : _xmlPrimary.isOutputAsText(config, ann);
    if ((value == null) && (_xmlSecondary != null)) {
        value = _xmlSecondary.isOutputAsText(config, ann);
    }
    return value;
}","Boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsText(MapperConfig,Annotated).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsText(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsText(MapperConfig,Annotated).ann","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsText(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsCData(MapperConfig,Annotated)","Method","No Comment","@Override
public Boolean isOutputAsCData(MapperConfig<?> config, Annotated ann) {
    Boolean value = (_xmlPrimary == null) ? null : _xmlPrimary.isOutputAsCData(config, ann);
    if ((value == null) && (_xmlSecondary != null)) {
        value = _xmlSecondary.isOutputAsCData(config, ann);
    }
    return value;
}","Boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsCData(MapperConfig,Annotated).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsCData(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsCData(MapperConfig,Annotated).ann","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.isOutputAsCData(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.<init>(AnnotationIntrospector,AnnotationIntrospector)","Constructor","No Comment","public Pair(AnnotationIntrospector p, AnnotationIntrospector s) {
    super(p, s);
    if (p instanceof AnnotationIntrospector.XmlExtensions) {
        _xmlPrimary = (AnnotationIntrospector.XmlExtensions) p;
    } else {
        _xmlPrimary = null;
    }
    if (s instanceof AnnotationIntrospector.XmlExtensions) {
        _xmlSecondary = (AnnotationIntrospector.XmlExtensions) s;
    } else {
        _xmlSecondary = null;
    }
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.<init>(AnnotationIntrospector,AnnotationIntrospector).p","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.<init>(AnnotationIntrospector,AnnotationIntrospector)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.<init>(AnnotationIntrospector,AnnotationIntrospector).s","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector$Pair.<init>(AnnotationIntrospector,AnnotationIntrospector)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair","Class","* Extension of <code>AnnotationIntrospector.Pair</code> that can
     * also dispatch 'XmlAnnotationIntrospector' methods.","Class do not obtain Source Code","No return type","public , static ","com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair","com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair._xmlPrimary","Field","No Comment","protected final AnnotationIntrospector.XmlExtensions _xmlPrimary;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair._xmlSecondary","Field","No Comment","protected final AnnotationIntrospector.XmlExtensions _xmlSecondary;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.instance(AnnotationIntrospector,AnnotationIntrospector)","Method","No Comment","public static XmlAnnotationIntrospector.Pair instance(AnnotationIntrospector a1, AnnotationIntrospector a2) {
    return new XmlAnnotationIntrospector.Pair(a1, a2);
}","XmlAnnotationIntrospector.Pair","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.instance(AnnotationIntrospector,AnnotationIntrospector).a1","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.instance(AnnotationIntrospector,AnnotationIntrospector)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.instance(AnnotationIntrospector,AnnotationIntrospector).a2","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.instance(AnnotationIntrospector,AnnotationIntrospector)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.findNamespace(MapperConfig,Annotated)","Method","No Comment","@Override
public String findNamespace(MapperConfig<?> config, Annotated ann) {
    String value = (_xmlPrimary == null) ? null : _xmlPrimary.findNamespace(config, ann);
    if ((value == null) && (_xmlSecondary != null)) {
        value = _xmlSecondary.findNamespace(config, ann);
    }
    return value;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.findNamespace(MapperConfig,Annotated).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.findNamespace(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.findNamespace(MapperConfig,Annotated).ann","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.findNamespace(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.isOutputAsAttribute(MapperConfig,Annotated)","Method","No Comment","@Override
public Boolean isOutputAsAttribute(MapperConfig<?> config, Annotated ann) {
    Boolean value = (_xmlPrimary == null) ? null : _xmlPrimary.isOutputAsAttribute(config, ann);
    if ((value == null) && (_xmlSecondary != null)) {
        value = _xmlSecondary.isOutputAsAttribute(config, ann);
    }
    return value;
}","Boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.isOutputAsAttribute(MapperConfig,Annotated).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.isOutputAsAttribute(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.isOutputAsAttribute(MapperConfig,Annotated).ann","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.isOutputAsAttribute(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.isOutputAsText(MapperConfig,Annotated)","Method","No Comment","@Override
public Boolean isOutputAsText(MapperConfig<?> config, Annotated ann) {
    Boolean value = (_xmlPrimary == null) ? null : _xmlPrimary.isOutputAsText(config, ann);
    if ((value == null) && (_xmlSecondary != null)) {
        value = _xmlSecondary.isOutputAsText(config, ann);
    }
    return value;
}","Boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.isOutputAsText(MapperConfig,Annotated).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.isOutputAsText(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.isOutputAsText(MapperConfig,Annotated).ann","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.isOutputAsText(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.isOutputAsCData(MapperConfig,Annotated)","Method","No Comment","@Override
public Boolean isOutputAsCData(MapperConfig<?> config, Annotated ann) {
    Boolean value = (_xmlPrimary == null) ? null : _xmlPrimary.isOutputAsCData(config, ann);
    if ((value == null) && (_xmlSecondary != null)) {
        value = _xmlSecondary.isOutputAsCData(config, ann);
    }
    return value;
}","Boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.isOutputAsCData(MapperConfig,Annotated).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.isOutputAsCData(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.isOutputAsCData(MapperConfig,Annotated).ann","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.isOutputAsCData(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.<init>(AnnotationIntrospector,AnnotationIntrospector)","Constructor","No Comment","public Pair(AnnotationIntrospector p, AnnotationIntrospector s) {
    super(p, s);
    if (p instanceof AnnotationIntrospector.XmlExtensions) {
        _xmlPrimary = (AnnotationIntrospector.XmlExtensions) p;
    } else {
        _xmlPrimary = null;
    }
    if (s instanceof AnnotationIntrospector.XmlExtensions) {
        _xmlSecondary = (AnnotationIntrospector.XmlExtensions) s;
    } else {
        _xmlSecondary = null;
    }
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.<init>(AnnotationIntrospector,AnnotationIntrospector).p","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.<init>(AnnotationIntrospector,AnnotationIntrospector)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.<init>(AnnotationIntrospector,AnnotationIntrospector).s","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector.Pair.<init>(AnnotationIntrospector,AnnotationIntrospector)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext","Class","* Extension of {@link JsonStreamContext}, which implements
 * core methods needed, and adds small amount of additional
 * state data we need.
 *<p>
 * Almost same as standard <code>JsonReaderContext</code>, but
 * custom version needed to be able to keep track of names
 * of properties that need wrapping; this is needed to
 * support wrapped/unwrapped Collection/array values.","Class do not obtain Source Code","No return type","public , final ","com.fasterxml.jackson.core.JsonStreamContext",""
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._parent","Field","No Comment","protected final XmlReadContext _parent;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._lineNr","Field","No Comment","protected int _lineNr;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._columnNr","Field","No Comment","protected int _columnNr;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._currentName","Field","No Comment","protected String _currentName;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._currentValue","Field","* @since 2.9","protected Object _currentValue;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._namesToWrap","Field","No Comment","protected Set<String> _namesToWrap;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._wrappedName","Field","* Name of property that requires wrapping","protected String _wrappedName;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext._child","Field","No Comment","protected XmlReadContext _child = null;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.reset(int,int,int)","Method","No Comment","protected final void reset(int type, int lineNr, int colNr) {
    _type = type;
    _index = -1;
    _lineNr = lineNr;
    _columnNr = colNr;
    _currentName = null;
    _currentValue = null;
    _namesToWrap = null;
    // _nestingDepth fine as is, same level for reuse
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.reset(int,int,int).type","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.reset(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.reset(int,int,int).lineNr","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.reset(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.reset(int,int,int).colNr","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.reset(int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getCurrentValue()","Method","No Comment","@Override
public Object getCurrentValue() {
    return _currentValue;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setCurrentValue(Object)","Method","No Comment","@Override
public void setCurrentValue(Object v) {
    _currentValue = v;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setCurrentValue(Object).v","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setCurrentValue(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createRootContext(int,int)","Method","No Comment","public static XmlReadContext createRootContext(int lineNr, int colNr) {
    return new XmlReadContext(null, 0, TYPE_ROOT, lineNr, colNr);
}","XmlReadContext","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createRootContext(int,int).lineNr","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createRootContext(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createRootContext(int,int).colNr","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createRootContext(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createRootContext()","Method","No Comment","public static XmlReadContext createRootContext() {
    return new XmlReadContext(null, 0, TYPE_ROOT, 1, 0);
}","XmlReadContext","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildArrayContext(int,int)","Method","No Comment","public final XmlReadContext createChildArrayContext(int lineNr, int colNr) {
    // not needed for Object, but does not hurt so no need to check curr type
    ++_index;
    XmlReadContext ctxt = _child;
    if (ctxt == null) {
        _child = ctxt = new XmlReadContext(this, _nestingDepth + 1, TYPE_ARRAY, lineNr, colNr);
        return ctxt;
    }
    ctxt.reset(TYPE_ARRAY, lineNr, colNr);
    return ctxt;
}","XmlReadContext","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildArrayContext(int,int).lineNr","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildArrayContext(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildArrayContext(int,int).colNr","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildArrayContext(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildObjectContext(int,int)","Method","No Comment","public final XmlReadContext createChildObjectContext(int lineNr, int colNr) {
    // not needed for Object, but does not hurt so no need to check curr type
    ++_index;
    XmlReadContext ctxt = _child;
    if (ctxt == null) {
        _child = ctxt = new XmlReadContext(this, TYPE_OBJECT, lineNr, colNr);
        return ctxt;
    }
    ctxt.reset(TYPE_OBJECT, lineNr, colNr);
    return ctxt;
}","XmlReadContext","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildObjectContext(int,int).lineNr","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildObjectContext(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildObjectContext(int,int).colNr","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.createChildObjectContext(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getCurrentName()","Method","No Comment","@Override
public final String getCurrentName() {
    return _currentName;
}","String","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.hasCurrentName()","Method","@since 2.9","@Override
public boolean hasCurrentName() {
    return _currentName != null;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.getParent()","Method","No Comment","@Override
public final XmlReadContext getParent() {
    return _parent;
}","XmlReadContext","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.startLocation(ContentReference)","Method","* @return Location pointing to the point where the context
     *   start marker was found","@Override
public final JsonLocation startLocation(ContentReference srcRef) {
    // We don't keep track of offsets at this level (only reader does)
    long totalChars = -1L;
    return new JsonLocation(srcRef, totalChars, _lineNr, _columnNr);
}","JsonLocation","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.startLocation(ContentReference).srcRef","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.startLocation(ContentReference)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.valueStarted()","Method","* Method called to mark start of new value, mostly to update `index`
     * for Array and Root contexts.
     *
     * @since 2.12","public final void valueStarted() {
    ++_index;
}","void","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setCurrentName(String)","Method","No Comment","public void setCurrentName(String name) {
    _currentName = name;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setCurrentName(String).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setCurrentName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setNamesToWrap(Set)","Method","No Comment","public void setNamesToWrap(Set<String> namesToWrap) {
    _namesToWrap = namesToWrap;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setNamesToWrap(Set).namesToWrap","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.setNamesToWrap(Set)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.shouldWrap(String)","Method","@since 2.11.1","public boolean shouldWrap(String localName) {
    return (_namesToWrap != null) && _namesToWrap.contains(localName);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.shouldWrap(String).localName","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.shouldWrap(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.convertToArray()","Method","No Comment","protected void convertToArray() {
    _type = TYPE_ARRAY;
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.toString()","Method","* Overridden to provide developer readable ""JsonPath"" representation
     * of the context.","@Override
public final String toString() {
    StringBuilder sb = new StringBuilder(64);
    switch(_type) {
        case TYPE_ROOT:
            sb.append(""/"");
            break;
        case TYPE_ARRAY:
            sb.append('[');
            sb.append(getCurrentIndex());
            sb.append(']');
            break;
        case TYPE_OBJECT:
            sb.append('{');
            if (_currentName != null) {
                sb.append('""');
                CharTypes.appendQuoted(sb, _currentName);
                sb.append('""');
            } else {
                sb.append('?');
            }
            sb.append('}');
            break;
    }
    return sb.toString();
}","String","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.<init>(XmlReadContext,int,int,int,int)","Constructor","* @since 2.18","public XmlReadContext(XmlReadContext parent, int nestingDepth, int type, int lineNr, int colNr) {
    super();
    _type = type;
    _parent = parent;
    _lineNr = lineNr;
    _columnNr = colNr;
    _index = -1;
    _nestingDepth = nestingDepth;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.<init>(XmlReadContext,int,int,int,int).parent","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.<init>(XmlReadContext,int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.<init>(XmlReadContext,int,int,int,int).nestingDepth","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.<init>(XmlReadContext,int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.<init>(XmlReadContext,int,int,int,int).type","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.<init>(XmlReadContext,int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.<init>(XmlReadContext,int,int,int,int).lineNr","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.<init>(XmlReadContext,int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.<init>(XmlReadContext,int,int,int,int).colNr","Parameter_5","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.<init>(XmlReadContext,int,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.<init>(XmlReadContext,int,int,int)","Constructor","* @deprecated Since 2.18","// since 2.18
@Deprecated
public XmlReadContext(XmlReadContext parent, int type, int lineNr, int colNr) {
    this(parent, (parent == null) ? 0 : parent._nestingDepth + 1, type, lineNr, colNr);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.<init>(XmlReadContext,int,int,int).parent","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.<init>(XmlReadContext,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.<init>(XmlReadContext,int,int,int).type","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.<init>(XmlReadContext,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.<init>(XmlReadContext,int,int,int).lineNr","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.<init>(XmlReadContext,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.<init>(XmlReadContext,int,int,int).colNr","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlReadContext.<init>(XmlReadContext,int,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer","Class","* Delegating deserializer that is used in the special cases where
 * we may sometimes see a ""plain"" String value but need to map it
 * as if it was a property of POJO. The impedance is introduced by
 * heuristic conversion from XML events into rough JSON equivalents;
 * and this is one work-around that can only be done after the fact.","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.databind.deser.std.DelegatingDeserializer",""
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._xmlTextPropertyIndex","Field","* Property index of the ""XML text property""; needed for finding actual
     * property instance after resolution and contextualization: instance
     * may change, but index will remain constant.","protected final int _xmlTextPropertyIndex;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._xmlTextProperty","Field","* Actual property that is indicated to be of type ""XML Text"" (and
     * is the only element-valued property)","protected final SettableBeanProperty _xmlTextProperty;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._valueInstantiator","Field","No Comment","protected final ValueInstantiator _valueInstantiator;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.newDelegatingInstance(JsonDeserializer)","Method","No Comment","@Override
protected JsonDeserializer<?> newDelegatingInstance(JsonDeserializer<?> newDelegatee0) {
    // default not enough, as we need to create a new wrapping deserializer
    // even if delegatee does not change
    throw new IllegalStateException(""Internal error: should never get called"");
}","JsonDeserializer","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.newDelegatingInstance(JsonDeserializer).newDelegatee0","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.newDelegatingInstance(JsonDeserializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.createContextual(DeserializationContext,BeanProperty)","Method","No Comment","@Override
public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {
    return new XmlTextDeserializer(_verifyDeserType(_delegatee), _xmlTextPropertyIndex);
}","JsonDeserializer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.createContextual(DeserializationContext,BeanProperty).ctxt","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.createContextual(DeserializationContext,BeanProperty)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.createContextual(DeserializationContext,BeanProperty).property","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.createContextual(DeserializationContext,BeanProperty)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(JsonParser,DeserializationContext)","Method","No Comment","@Override
public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
    if (p.getCurrentToken() == JsonToken.VALUE_STRING) {
        Object bean = _valueInstantiator.createUsingDefault(ctxt);
        _xmlTextProperty.deserializeAndSet(p, ctxt, bean);
        return bean;
    }
    return _delegatee.deserialize(p, ctxt);
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(JsonParser,DeserializationContext).p","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(JsonParser,DeserializationContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(JsonParser,DeserializationContext).ctxt","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(JsonParser,DeserializationContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(JsonParser,DeserializationContext,Object)","Method","No Comment","@SuppressWarnings(""unchecked"")
@Override
public Object deserialize(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException {
    if (p.getCurrentToken() == JsonToken.VALUE_STRING) {
        _xmlTextProperty.deserializeAndSet(p, ctxt, bean);
        return bean;
    }
    return ((JsonDeserializer<Object>) _delegatee).deserialize(p, ctxt, bean);
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(JsonParser,DeserializationContext,Object).p","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(JsonParser,DeserializationContext,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(JsonParser,DeserializationContext,Object).ctxt","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(JsonParser,DeserializationContext,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(JsonParser,DeserializationContext,Object).bean","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserialize(JsonParser,DeserializationContext,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer)","Method","No Comment","@Override
public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {
    return _delegatee.deserializeWithType(p, ctxt, typeDeserializer);
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer).p","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer).ctxt","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer).typeDeserializer","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._verifyDeserType(JsonDeserializer)","Method","No Comment","protected BeanDeserializerBase _verifyDeserType(JsonDeserializer<?> deser) {
    if (!(deser instanceof BeanDeserializerBase)) {
        throw new IllegalArgumentException(""Can not change delegate to be of type "" + deser.getClass().getName());
    }
    return (BeanDeserializerBase) deser;
}","BeanDeserializerBase","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._verifyDeserType(JsonDeserializer).deser","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer._verifyDeserType(JsonDeserializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.<init>(BeanDeserializerBase,SettableBeanProperty)","Constructor","No Comment","public XmlTextDeserializer(BeanDeserializerBase delegate, SettableBeanProperty prop) {
    super(delegate);
    _xmlTextProperty = prop;
    _xmlTextPropertyIndex = prop.getPropertyIndex();
    _valueInstantiator = delegate.getValueInstantiator();
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.<init>(BeanDeserializerBase,SettableBeanProperty).delegate","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.<init>(BeanDeserializerBase,SettableBeanProperty)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.<init>(BeanDeserializerBase,SettableBeanProperty).prop","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.<init>(BeanDeserializerBase,SettableBeanProperty)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.<init>(BeanDeserializerBase,int)","Constructor","No Comment","public XmlTextDeserializer(BeanDeserializerBase delegate, int textPropIndex) {
    super(delegate);
    _xmlTextPropertyIndex = textPropIndex;
    _valueInstantiator = delegate.getValueInstantiator();
    _xmlTextProperty = delegate.findProperty(textPropIndex);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.<init>(BeanDeserializerBase,int).delegate","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.<init>(BeanDeserializerBase,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.<init>(BeanDeserializerBase,int).textPropIndex","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTextDeserializer.<init>(BeanDeserializerBase,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrappable","Interface","* Minimal API to be implemented by XML-backed parsers for which ""virtual""
 * wrapping may be imposed.
 *<p>
 * NOTE: this method is considered part of internal implementation
 * interface, and it is <b>NOT</b> guaranteed to remain unchanged
 * between minor versions (it is however expected not to change in
 * patch versions). So if you have to use it, be prepared for
 * possible additional work.
 *
 * @since 2.15","Interface do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrappable.addVirtualWrapping(Set,boolean)","Abstract Method","* Method that may be called to indicate that specified names
     * (only local parts retained currently: this may be changed in
     * future) should be considered ""auto-wrapping"", meaning that
     * they will be doubled to contain two opening elements, two
     * matching closing elements. This is needed for supporting
     * handling of so-called ""unwrapped"" array types, something
     * XML mappings like JAXB often use.","public void addVirtualWrapping(Set<String> namesToWrap0, boolean caseInsensitive);","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrappable.addVirtualWrapping(Set,boolean).namesToWrap0","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.ElementWrappable.addVirtualWrapping(Set,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrappable.addVirtualWrapping(Set,boolean).caseInsensitive","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.ElementWrappable.addVirtualWrapping(Set,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper","Class","* Helper class needed to keep track of virtual wrapper elements
 * added in the logical XML token stream.","Class do not obtain Source Code","No return type","default","",""
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._parent","Field","No Comment","protected final ElementWrapper _parent;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._wrapperName","Field","No Comment","protected final String _wrapperName;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper._wrapperNamespace","Field","No Comment","protected final String _wrapperNamespace;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchingWrapper(ElementWrapper,String,String)","Method","* Factory method called to construct a new ""matching"" wrapper element,
     * at level where virtual wrapping is needed.","public static ElementWrapper matchingWrapper(ElementWrapper parent, String wrapperLocalName, String wrapperNamespace) {
    return new ElementWrapper(parent, wrapperLocalName, wrapperNamespace);
}","ElementWrapper","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchingWrapper(ElementWrapper,String,String).parent","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchingWrapper(ElementWrapper,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchingWrapper(ElementWrapper,String,String).wrapperLocalName","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchingWrapper(ElementWrapper,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchingWrapper(ElementWrapper,String,String).wrapperNamespace","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchingWrapper(ElementWrapper,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.intermediateWrapper()","Method","* Factory method used for creating intermediate wrapper level, which
     * is only used for purpose of keeping track of physical element
     * nesting.","public ElementWrapper intermediateWrapper() {
    return new ElementWrapper(this, null, null);
}","ElementWrapper","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.isMatching()","Method","No Comment","public boolean isMatching() {
    return _wrapperName != null;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.getWrapperLocalName()","Method","No Comment","public String getWrapperLocalName() {
    return _wrapperName;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.getWrapperNamespace()","Method","No Comment","public String getWrapperNamespace() {
    return _wrapperNamespace;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.getParent()","Method","No Comment","public ElementWrapper getParent() {
    return _parent;
}","ElementWrapper","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchesWrapper(String,String)","Method","No Comment","public boolean matchesWrapper(String localName, String ns) {
    // null means ""anything goes"", so:
    if (_wrapperName == null) {
        return true;
    }
    if (ns == null) {
        ns = """";
    }
    return _wrapperName.equals(localName) && _wrapperNamespace.equals(ns);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchesWrapper(String,String).localName","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchesWrapper(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchesWrapper(String,String).ns","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.matchesWrapper(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.toString()","Method","No Comment","@Override
public String toString() {
    if (_parent == null) {
        return ""Wrapper: ROOT, matching: "" + _wrapperName;
    }
    if (_wrapperName == null) {
        return ""Wrapper: empty"";
    }
    return ""Wrapper: branch, matching: "" + _wrapperName;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.<init>(ElementWrapper)","Constructor","No Comment","private ElementWrapper(ElementWrapper parent) {
    _parent = parent;
    _wrapperName = null;
    _wrapperNamespace = """";
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.<init>(ElementWrapper).parent","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.<init>(ElementWrapper)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.<init>(ElementWrapper,String,String)","Constructor","No Comment","private ElementWrapper(ElementWrapper parent, String wrapperLocalName, String wrapperNamespace) {
    _parent = parent;
    _wrapperName = wrapperLocalName;
    _wrapperNamespace = (wrapperNamespace == null) ? """" : wrapperNamespace;
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.<init>(ElementWrapper,String,String).parent","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.<init>(ElementWrapper,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.<init>(ElementWrapper,String,String).wrapperLocalName","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.<init>(ElementWrapper,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.<init>(ElementWrapper,String,String).wrapperNamespace","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.deser.ElementWrapper.<init>(ElementWrapper,String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser","Class","* {@link JsonParser} implementation that exposes XML structure as
 * set of JSON events that can be used for data binding.","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.base.ParserMinimalBase","com.fasterxml.jackson.dataformat.xml.deser.ElementWrappable"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.DEFAULT_UNNAMED_TEXT_PROPERTY","Field","* The default name placeholder for XML text segments is empty
     * String ("""").","public final static String DEFAULT_UNNAMED_TEXT_PROPERTY = """";","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.XML_READ_CAPABILITIES","Field","* XML format has some peculiarities, indicated via new (2.12) capability
     * system.
     *
     * @since 2.12","protected final static JacksonFeatureSet<StreamReadCapability> XML_READ_CAPABILITIES = DEFAULT_READ_CAPABILITIES.with(StreamReadCapability.DUPLICATE_PROPERTIES).with(StreamReadCapability.SCALARS_AS_OBJECTS).with(StreamReadCapability.UNTYPED_SCALARS);","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._cfgNameForTextElement","Field","* In cases where a start element has both attributes and non-empty textual
     * value, we have to create a bogus property; we will use this as
     * the property name.
     *<p>
     * Name used for pseudo-property used for returning XML Text value (which does
     * not have actual element name to use). Defaults to empty String, but
     * may be changed for inter-operability reasons: JAXB, for example, uses
     * ""value"" as name.
     * 
     * @since 2.1","protected String _cfgNameForTextElement = DEFAULT_UNNAMED_TEXT_PROPERTY;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._formatFeatures","Field","* Bit flag composed of bits that indicate which
     * {@link FromXmlParser.Feature}s
     * are enabled.","protected int _formatFeatures;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._objectCodec","Field","No Comment","protected ObjectCodec _objectCodec;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._ioContext","Field","No Comment","protected final IOContext _ioContext;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._closed","Field","* Flag that indicates whether parser is closed or not. Gets
     * set when parser is either closed by explicit call
     * ({@link #close}) or when end-of-input is reached.","protected boolean _closed;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._parsingContext","Field","* Information about parser context, context in which
     * the next token is to be parsed (root, array, object).","protected XmlReadContext _parsingContext;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._xmlTokens","Field","No Comment","protected final XmlTokenStream _xmlTokens;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._mayBeLeaf","Field","* 
     * We need special handling to keep track of whether a value
     * may be exposed as simple leaf value.","protected boolean _mayBeLeaf;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._nextToken","Field","No Comment","protected JsonToken _nextToken;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._currText","Field","No Comment","protected String _currText;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._nextIsLeadingMixed","Field","* Additional flag that is strictly needed when exposing ""mixed"" leading
     * String value as ""anonymous"" property/string pair. If so, code returns
     * START_OBJECT first, sets {@code _nextToken} to be {@code FIELD_NAME}
     * and sets this flag to indicate use of ""anonymous"" marker.
     *
     * @since 2.13","protected boolean _nextIsLeadingMixed;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._byteArrayBuilder","Field","* ByteArrayBuilder is needed if 'getBinaryValue' is called. If so,
     * we better reuse it for remainder of content.","protected ByteArrayBuilder _byteArrayBuilder = null;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._binaryValue","Field","* We will hold on to decoded binary data, for duration of
     * current event, so that multiple calls to
     * {@link #getBinaryValue} will not need to decode data more
     * than once.","protected byte[] _binaryValue;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._numTypesValid","Field","* Bitfield that indicates which numeric representations
     * have been calculated for the current type","protected int _numTypesValid = NR_UNKNOWN;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._numberInt","Field","No Comment","protected int _numberInt;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._numberLong","Field","No Comment","protected long _numberLong;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._numberBigInt","Field","No Comment","protected BigInteger _numberBigInt;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.version()","Method","No Comment","@Override
public Version version() {
    return PackageVersion.VERSION;
}","Version","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCodec()","Method","No Comment","@Override
public ObjectCodec getCodec() {
    return _objectCodec;
}","ObjectCodec","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.setCodec(ObjectCodec)","Method","No Comment","@Override
public void setCodec(ObjectCodec c) {
    _objectCodec = c;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.setCodec(ObjectCodec).c","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.setCodec(ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.setXMLTextElementName(String)","Method","* @since 2.1","public void setXMLTextElementName(String name) {
    _cfgNameForTextElement = name;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.setXMLTextElementName(String).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.setXMLTextElementName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.requiresCustomCodec()","Method","* XML format does require support from custom {@link ObjectCodec}
     * (that is, {@link XmlMapper}), so need to return true here.
     * 
     * @return True since XML format does require support from codec","@Override
public boolean requiresCustomCodec() {
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.canReadObjectId()","Method","No Comment","@Override
public boolean canReadObjectId() {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.canReadTypeId()","Method","No Comment","@Override
public boolean canReadTypeId() {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getReadCapabilities()","Method","No Comment","@Override
public JacksonFeatureSet<StreamReadCapability> getReadCapabilities() {
    return XML_READ_CAPABILITIES;
}","JacksonFeatureSet","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.enable(Feature)","Method","No Comment","public FromXmlParser enable(Feature f) {
    _formatFeatures |= f.getMask();
    _xmlTokens.setFormatFeatures(_formatFeatures);
    return this;
}","FromXmlParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.enable(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.enable(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.disable(Feature)","Method","No Comment","public FromXmlParser disable(Feature f) {
    _formatFeatures &= ~f.getMask();
    _xmlTokens.setFormatFeatures(_formatFeatures);
    return this;
}","FromXmlParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.disable(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.disable(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isEnabled(Feature)","Method","No Comment","public final boolean isEnabled(Feature f) {
    return (_formatFeatures & f.getMask()) != 0;
}","boolean","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isEnabled(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isEnabled(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.configure(Feature,boolean)","Method","No Comment","public FromXmlParser configure(Feature f, boolean state) {
    if (state) {
        enable(f);
    } else {
        disable(f);
    }
    return this;
}","FromXmlParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.configure(Feature,boolean).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.configure(Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.configure(Feature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.configure(Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getFormatFeatures()","Method","No Comment","@Override
public int getFormatFeatures() {
    return _formatFeatures;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideFormatFeatures(int,int)","Method","No Comment","@Override
public JsonParser overrideFormatFeatures(int values, int mask) {
    _formatFeatures = (_formatFeatures & ~mask) | (values & mask);
    _xmlTokens.setFormatFeatures(_formatFeatures);
    return this;
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideFormatFeatures(int,int).values","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideFormatFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideFormatFeatures(int,int).mask","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideFormatFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getStaxReader()","Method","* Method that allows application direct access to underlying
     * Stax {@link XMLStreamWriter}. Note that use of writer is
     * discouraged, and may interfere with processing of this writer;
     * however, occasionally it may be necessary.
     *<p>
     * Note: writer instance will always be of type
     * {@link org.codehaus.stax2.XMLStreamWriter2} (including
     * Typed Access API) so upcasts are safe.","public XMLStreamReader getStaxReader() {
    return _xmlTokens.getXmlReader();
}","XMLStreamReader","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.addVirtualWrapping(Set,boolean)","Method","No Comment","@Override
public void addVirtualWrapping(Set<String> namesToWrap0, boolean caseInsensitive) {
    //System.out.printf(""addVirtualWrapping(%s) at '%s' [case-insensitive? %s]\n"", namesToWrap0, _parsingContext.pathAsPointer(), caseInsensitive);
    final Set<String> namesToWrap = caseInsensitive ? CaseInsensitiveNameSet.construct(namesToWrap0) : namesToWrap0;
    // 17-Sep-2012, tatu: Not 100% sure why, but this is necessary to avoid
    //   problems with Lists-in-Lists properties
    // 12-May-2020, tatu: But as per [dataformat-xml#86] NOT for root element
    //   (would still like to know why work-around needed ever, but...)
    if (!_parsingContext.inRoot() && !_parsingContext.getParent().inRoot()) {
        String name = _xmlTokens.getLocalName();
        if ((name != null) && namesToWrap.contains(name)) {
            //System.out.println(""REPEAT from addVirtualWrapping() for '""+name+""'"");
            _xmlTokens.repeatStartElement();
        }
    }
    _parsingContext.setNamesToWrap(namesToWrap);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.addVirtualWrapping(Set,boolean).namesToWrap0","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.addVirtualWrapping(Set,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.addVirtualWrapping(Set,boolean).caseInsensitive","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.addVirtualWrapping(Set,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.currentName()","Method","* Method that can be called to get the name associated with
     * the current event.","@Override
public String currentName() throws IOException {
    // start markers require information from parent
    String name;
    if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {
        XmlReadContext parent = _parsingContext.getParent();
        name = parent.getCurrentName();
    } else {
        name = _parsingContext.getCurrentName();
    }
    // sanity check
    if (name == null) {
        throw new IllegalStateException(""Missing name, in state: "" + _currToken);
    }
    return name;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentName()","Method","No Comment","// since 2.17
@Deprecated
@Override
public String getCurrentName() throws IOException {
    return currentName();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideCurrentName(String)","Method","No Comment","@Override
public void overrideCurrentName(String name) {
    // Simple, but need to look for START_OBJECT/ARRAY's ""off-by-one"" thing:
    XmlReadContext ctxt = _parsingContext;
    if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {
        ctxt = ctxt.getParent();
    }
    ctxt.setCurrentName(name);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideCurrentName(String).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.overrideCurrentName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.close()","Method","No Comment","@Override
public void close() throws IOException {
    if (!_closed) {
        _closed = true;
        try {
            if (_ioContext.isResourceManaged() || isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE)) {
                _xmlTokens.closeCompletely();
            } else {
                _xmlTokens.close();
            }
        } catch (XMLStreamException e) {
            StaxUtil.throwAsParseException(e, this);
        } finally {
            // Also, internal buffer(s) can now be released as well
            _releaseBuffers();
        }
        _ioContext.close();
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isClosed()","Method","No Comment","@Override
public boolean isClosed() {
    return _closed;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getParsingContext()","Method","No Comment","@Override
public XmlReadContext getParsingContext() {
    return _parsingContext;
}","XmlReadContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.currentTokenLocation()","Method","* Method that return the <b>starting</b> location of the current
     * token; that is, position of the first character from input
     * that starts the current token.","@Override
public JsonLocation currentTokenLocation() {
    return _xmlTokens.getTokenLocation();
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.currentLocation()","Method","* Method that returns location of the last processed character;
     * usually for error reporting purposes","@Override
public JsonLocation currentLocation() {
    return _xmlTokens.getCurrentLocation();
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getCurrentLocation()","Method","No Comment","// since 2.17
@Deprecated
@Override
public JsonLocation getCurrentLocation() {
    return currentLocation();
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTokenLocation()","Method","No Comment","// since 2.17
@Deprecated
@Override
public JsonLocation getTokenLocation() {
    return currentTokenLocation();
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isExpectedStartArrayToken()","Method","* Since xml representation can not really distinguish between array
     * and object starts (both are represented with elements), this method
     * is overridden and taken to mean that expectation is that the current
     * start element is to mean 'start array', instead of default of
     * 'start object'.
     *
     * @throws UncheckedIOException if underlying {@link StreamReadConstraints} constraint fails","@Override
public boolean isExpectedStartArrayToken() {
    JsonToken t = _currToken;
    if (t == JsonToken.START_OBJECT) {
        try {
            _updateToken(JsonToken.START_ARRAY);
        } catch (StreamConstraintsException e) {
            throw new UncheckedIOException(e);
        }
        // Ok: must replace current context with array as well
        _parsingContext.convertToArray();
        //System.out.println("" FromXmlParser.isExpectedArrayStart(): OBJ->Array"");
        // And just in case a field name was to be returned, wipe it
        // 06-Jan-2015, tatu: Actually, could also be empty Object buffered; if so, convert...
        if (_nextToken == JsonToken.END_OBJECT) {
            _nextToken = JsonToken.END_ARRAY;
        } else {
            _nextToken = null;
        }
        // and last thing, [dataformat-xml#33], better ignore attributes
        _xmlTokens.skipAttributes();
        return true;
    }
    //System.out.println("" FromXmlParser.isExpectedArrayStart?: t=""+t);
    return (t == JsonToken.START_ARRAY);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isExpectedNumberIntToken()","Method","* Since xml representation can not really distinguish between different
     * scalar types (numbers, booleans) -- they are all just Character Data,
     * without schema -- we can try to infer type from intent here.
     * The main benefit is avoiding checks for coercion.
     *
     * @throws UncheckedIOException if underlying {@link StreamReadConstraints} constraint fails","@Override
public boolean isExpectedNumberIntToken() {
    JsonToken t = _currToken;
    if (t == JsonToken.VALUE_STRING) {
        final String text = _currText.trim();
        final int len = _isIntNumber(text);
        try {
            if (len > 0) {
                if (len <= 9) {
                    _numberInt = NumberInput.parseInt(text);
                    _numTypesValid = NR_INT;
                    _updateToken(JsonToken.VALUE_NUMBER_INT);
                    return true;
                }
                if (len <= 18) {
                    // definitely in long range
                    long l = NumberInput.parseLong(text);
                    if (len == 10) {
                        int asInt = (int) l;
                        long l2 = (long) asInt;
                        if (l == l2) {
                            _numberInt = asInt;
                            _numTypesValid = NR_INT;
                            _updateToken(JsonToken.VALUE_NUMBER_INT);
                            return true;
                        }
                    }
                    _numberLong = l;
                    _numTypesValid = NR_LONG;
                    _updateToken(JsonToken.VALUE_NUMBER_INT);
                    return true;
                }
                // Might still fit within `long`
                if (len == 19) {
                    final boolean stillLong;
                    if (text.charAt(0) == '-') {
                        stillLong = NumberInput.inLongRange(text.substring(1), true);
                    } else {
                        stillLong = NumberInput.inLongRange(text, false);
                    }
                    if (stillLong) {
                        _numberLong = NumberInput.parseLong(text);
                        _numTypesValid = NR_LONG;
                        _updateToken(JsonToken.VALUE_NUMBER_INT);
                        return true;
                    }
                }
                // finally, need BigInteger
                streamReadConstraints().validateIntegerLength(text.length());
                _numberBigInt = NumberInput.parseBigInteger(text, isEnabled(StreamReadFeature.USE_FAST_BIG_NUMBER_PARSER));
                _numTypesValid = NR_BIGINT;
                _updateToken(JsonToken.VALUE_NUMBER_INT);
                return true;
            }
        } catch (StreamConstraintsException e) {
            // Ugh. This method in API ought to expose IOException
            throw new UncheckedIOException(e);
        }
    }
    return (t == JsonToken.VALUE_NUMBER_INT);
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextToken()","Method","public JsonToken nextToken0() throws IOException","@Override
public JsonToken nextToken() throws IOException {
    _binaryValue = null;
    _numTypesValid = NR_UNKNOWN;
    //System.out.println(""FromXmlParser.nextToken0: _nextToken = ""+_nextToken);
    if (_nextToken != null) {
        final JsonToken t = _updateToken(_nextToken);
        _nextToken = null;
        switch(t) {
            case START_OBJECT:
                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                break;
            case START_ARRAY:
                _parsingContext = _parsingContext.createChildArrayContext(-1, -1);
                break;
            case END_OBJECT:
            case END_ARRAY:
                _parsingContext = _parsingContext.getParent();
                break;
            case FIELD_NAME:
                // 29-Mar-2021, tatu: [dataformat-xml#442]: special case of leading
                //    mixed text added
                if (_nextIsLeadingMixed) {
                    _nextIsLeadingMixed = false;
                    _parsingContext.setCurrentName(_cfgNameForTextElement);
                    _nextToken = JsonToken.VALUE_STRING;
                } else {
                    _parsingContext.setCurrentName(_xmlTokens.getLocalName());
                }
                break;
            default:
                // VALUE_STRING, VALUE_NULL
                // 13-May-2020, tatu: [dataformat-xml#397]: advance `index` anyway; not
                //    used for Object contexts, updated automatically by ""createChildXxxContext""
                _parsingContext.valueStarted();
        }
        return t;
    }
    int token = _nextToken();
    // Need to have a loop just because we may have to eat/convert
    // a start-element that indicates an array element.
    while (token == XmlTokenStream.XML_START_ELEMENT) {
        // If we thought we might get leaf, no such luck
        if (_mayBeLeaf) {
            // leave _mayBeLeaf set, as we start a new context
            _nextToken = JsonToken.FIELD_NAME;
            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
            return _updateToken(JsonToken.START_OBJECT);
        }
        if (_parsingContext.inArray()) {
            // Yup: in array, so this element could be verified; but it won't be
            // reported anyway, and we need to process following event.
            token = _nextToken();
            _mayBeLeaf = true;
            continue;
        }
        String name = _xmlTokens.getLocalName();
        _parsingContext.setCurrentName(name);
        // Ok: virtual wrapping can be done by simply repeating current START_ELEMENT.
        // Couple of ways to do it; but start by making _xmlTokens replay the thing...
        if (_parsingContext.shouldWrap(name)) {
            _xmlTokens.repeatStartElement();
        }
        _mayBeLeaf = true;
        // Ok: in array context we need to skip reporting field names.
        // But what's the best way to find next token?
        return _updateToken(JsonToken.FIELD_NAME);
    }
    // Ok; beyond start element, what do we get?
    while (true) {
        switch(token) {
            case XmlTokenStream.XML_END_ELEMENT:
                // Simple, except that if this is a leaf, need to suppress end:
                if (_mayBeLeaf) {
                    _mayBeLeaf = false;
                    if (_parsingContext.inArray()) {
                        // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to
                        //    expose as empty Object, not null
                        _nextToken = JsonToken.END_OBJECT;
                        _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                        return _updateToken(JsonToken.START_OBJECT);
                    }
                    // 07-Sep-2019, tatu: for [dataformat-xml#353], must NOT return second null
                    if (_currToken != JsonToken.VALUE_NULL) {
                        // 13-May-2020, tatu: [dataformat-xml#397]: advance `index`
                        _parsingContext.valueStarted();
                        return _updateToken(JsonToken.VALUE_NULL);
                    }
                }
                _updateToken(_parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT);
                _parsingContext = _parsingContext.getParent();
                return _currToken;
            case XmlTokenStream.XML_ATTRIBUTE_NAME:
                // If there was a chance of leaf node, no more...
                if (_mayBeLeaf) {
                    _mayBeLeaf = false;
                    _nextToken = JsonToken.FIELD_NAME;
                    _currText = _xmlTokens.getText();
                    _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                    return _updateToken(JsonToken.START_OBJECT);
                }
                _parsingContext.setCurrentName(_xmlTokens.getLocalName());
                return _updateToken(JsonToken.FIELD_NAME);
            case XmlTokenStream.XML_ATTRIBUTE_VALUE:
                _currText = _xmlTokens.getText();
                // 13-May-2020, tatu: [dataformat-xml#397]: advance `index`
                _parsingContext.valueStarted();
                return _updateToken(JsonToken.VALUE_STRING);
            case XmlTokenStream.XML_TEXT:
                _currText = _xmlTokens.getText();
                if (_mayBeLeaf) {
                    _mayBeLeaf = false;
                    // One more refinement (pronounced like ""hack"") is that if
                    // we had an empty String (or all white space), and we are
                    // deserializing an array, we better hide the empty text.
                    // Also: must skip following END_ELEMENT
                    // 05-Jun-2020, tatu: ... if there is one; we may actually alternatively
                    //   get START_ELEMENT for ""mixed content"" case; if so, need to change to
                    //   expose ""XmlText"" as separate property
                    token = _nextToken();
                    if (token == XmlTokenStream.XML_END_ELEMENT) {
                        if (_parsingContext.inArray()) {
                            if (XmlTokenStream._allWs(_currText)) {
                                // 06-Jan-2015, tatu: as per [dataformat-xml#180], need to
                                //    expose as empty Object, not null (or, worse, as used to
                                //    be done, by swallowing the token)
                                _nextToken = JsonToken.END_OBJECT;
                                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                                return _updateToken(JsonToken.START_OBJECT);
                            }
                        }
                        return _updateToken(JsonToken.VALUE_STRING);
                    }
                    if (token != XmlTokenStream.XML_START_ELEMENT) {
                        throw new JsonParseException(this, String.format(""Internal error: Expected END_ELEMENT (%d) or START_ELEMENT (%d), got event of type %d"", XmlTokenStream.XML_END_ELEMENT, XmlTokenStream.XML_START_ELEMENT, token));
                    }
                    // fall-through, except must create new context AND push back
                    // START_ELEMENT we just saw:
                    _xmlTokens.pushbackCurrentToken();
                    _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                }
                // [dataformat-xml#177]: empty text may also need to be skipped
                // but... [dataformat-xml#191]: looks like we can't short-cut, must
                // loop over again
                if (_parsingContext.inObject()) {
                    if (_currToken == JsonToken.FIELD_NAME) {
                        // 29-Mar-2021, tatu: [dataformat-xml#442]: need special handling for
                        //    leading mixed content; requires 3-token sequence for which _nextToken
                        //    along is not enough.
                        _nextIsLeadingMixed = true;
                        _nextToken = JsonToken.FIELD_NAME;
                        return _updateToken(JsonToken.START_OBJECT);
                    } else if (XmlTokenStream._allWs(_currText)) {
                        token = _nextToken();
                        continue;
                    }
                } else if (_parsingContext.inArray()) {
                    // [dataformat-xml#319] Aaaaand for Arrays too
                    if (XmlTokenStream._allWs(_currText)) {
                        token = _nextToken();
                        continue;
                    }
                    // 29-Mar-2021, tatu: This seems like an error condition...
                    //   How should we indicate it? As of 2.13, report as unexpected state
                    /*
                    throw _constructError(
""Unexpected non-whitespace text ('""+_currText+""') in Array context: should not occur (or should be handled)""
);
                    */
                    // [dataformat-xml#509] 2.13 introduced a defect in which an Exception was thrown above, breaking
                    // parsing of mixed content arrays (https://github.com/FasterXML/jackson-dataformat-xml/issues/509).
                    // This exception case was removed to enable continued support of that functionality, but more
                    // robust state handling may be in order.
                    // See comment https://github.com/FasterXML/jackson-dataformat-xml/pull/604
                }
                // If not a leaf (or otherwise ignorable), need to transform into property...
                _parsingContext.setCurrentName(_cfgNameForTextElement);
                _nextToken = JsonToken.VALUE_STRING;
                return _updateToken(JsonToken.FIELD_NAME);
            case XmlTokenStream.XML_END:
                return _updateTokenToNull();
            default:
                return _internalErrorUnknownToken(token);
        }
    }
}","JsonToken","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.nextTextValue()","Method","* Method overridden to support more reliable deserialization of
     * String collections.","@Override
public String nextTextValue() throws IOException {
    _binaryValue = null;
    if (_nextToken != null) {
        final JsonToken t = _updateToken(_nextToken);
        _nextToken = null;
        // expected case; yes, got a String
        if (t == JsonToken.VALUE_STRING) {
            // 13-May-2020, tatu: [dataformat-xml#397]: advance `index`
            _parsingContext.valueStarted();
            return _currText;
        }
        _updateState(t);
        return null;
    }
    int token = _nextToken();
    // mostly copied from 'nextToken()'
    while (token == XmlTokenStream.XML_START_ELEMENT) {
        if (_mayBeLeaf) {
            _nextToken = JsonToken.FIELD_NAME;
            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
            _updateToken(JsonToken.START_OBJECT);
            return null;
        }
        if (_parsingContext.inArray()) {
            token = _nextToken();
            _mayBeLeaf = true;
            continue;
        }
        String name = _xmlTokens.getLocalName();
        _parsingContext.setCurrentName(name);
        if (_parsingContext.shouldWrap(name)) {
            //System.out.println(""REPEAT from nextTextValue()"");
            _xmlTokens.repeatStartElement();
        }
        _mayBeLeaf = true;
        _updateToken(JsonToken.FIELD_NAME);
        return null;
    }
    // Ok; beyond start element, what do we get?
    switch(token) {
        case XmlTokenStream.XML_END_ELEMENT:
            if (_mayBeLeaf) {
                _mayBeLeaf = false;
                // 18-Mar-2023, tatu: [dataformat-xml#584 / #585] in 2.14 and before
                //    returned VALUE_STRING on assumption we never expose `null`s if
                //    asked text value -- but that seems incorrect. Hoping this won't
                //    break anything in 2.15+
                _updateToken(JsonToken.VALUE_NULL);
                // 13-May-2020, tatu: [dataformat-xml#397]: advance `index`
                _parsingContext.valueStarted();
                return (_currText = null);
            }
            _updateToken(_parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT);
            _parsingContext = _parsingContext.getParent();
            break;
        case XmlTokenStream.XML_ATTRIBUTE_NAME:
            // If there was a chance of leaf node, no more...
            if (_mayBeLeaf) {
                _mayBeLeaf = false;
                _nextToken = JsonToken.FIELD_NAME;
                _currText = _xmlTokens.getText();
                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
                _updateToken(JsonToken.START_OBJECT);
            } else {
                _parsingContext.setCurrentName(_xmlTokens.getLocalName());
                _updateToken(JsonToken.FIELD_NAME);
            }
            break;
        case XmlTokenStream.XML_ATTRIBUTE_VALUE:
            _updateToken(JsonToken.VALUE_STRING);
            // 13-May-2020, tatu: [dataformat-xml#397]: advance `index`
            _parsingContext.valueStarted();
            return (_currText = _xmlTokens.getText());
        case XmlTokenStream.XML_TEXT:
            _currText = _xmlTokens.getText();
            if (_mayBeLeaf) {
                _mayBeLeaf = false;
                // Also: must skip following END_ELEMENT
                _skipEndElement();
                // NOTE: this is different from nextToken() -- NO work-around
                // for otherwise empty List/array
                // 13-May-2020, tatu: [dataformat-xml#397]: advance `index`
                _parsingContext.valueStarted();
                _updateToken(JsonToken.VALUE_STRING);
                return _currText;
            }
            // If not a leaf, need to transform into property...
            _parsingContext.setCurrentName(_cfgNameForTextElement);
            _nextToken = JsonToken.VALUE_STRING;
            _updateToken(JsonToken.FIELD_NAME);
            break;
        case XmlTokenStream.XML_END:
            _updateTokenToNull();
        default:
            return _internalErrorUnknownToken(token);
    }
    return null;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(JsonToken)","Method","No Comment","private void _updateState(JsonToken t) {
    switch(t) {
        case START_OBJECT:
            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);
            break;
        case START_ARRAY:
            _parsingContext = _parsingContext.createChildArrayContext(-1, -1);
            break;
        case END_OBJECT:
        case END_ARRAY:
            _parsingContext = _parsingContext.getParent();
            break;
        case FIELD_NAME:
            _parsingContext.setCurrentName(_xmlTokens.getLocalName());
            break;
        default:
            _internalErrorUnknownToken(t);
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(JsonToken).t","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._updateState(JsonToken)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText()","Method","No Comment","@Override
public String getText() throws IOException {
    if (_currToken == null) {
        return null;
    }
    switch(_currToken) {
        case FIELD_NAME:
            return currentName();
        case VALUE_STRING:
            return _currText;
        default:
            return _currToken.asString();
    }
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTextCharacters()","Method","No Comment","@Override
public char[] getTextCharacters() throws IOException {
    String text = getText();
    return (text == null) ? null : text.toCharArray();
}","char[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTextLength()","Method","No Comment","@Override
public int getTextLength() throws IOException {
    String text = getText();
    return (text == null) ? 0 : text.length();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getTextOffset()","Method","No Comment","@Override
public int getTextOffset() throws IOException {
    return 0;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.hasTextCharacters()","Method","* XML input actually would offer access to character arrays; but since
     * we must coalesce things it cannot really be exposed.","@Override
public boolean hasTextCharacters() {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText(Writer)","Method","No Comment","// since 2.8
@Override
public int getText(Writer writer) throws IOException {
    String str = getText();
    if (str == null) {
        return 0;
    }
    writer.write(str);
    return str.length();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText(Writer).writer","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getText(Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getEmbeddedObject()","Method","No Comment","@Override
public Object getEmbeddedObject() throws IOException {
    // no way to embed POJOs for now...
    return null;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(Base64Variant)","Method","No Comment","@Override
public byte[] getBinaryValue(Base64Variant b64variant) throws IOException {
    if (_currToken != JsonToken.VALUE_STRING && (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null)) {
        _reportError(""Current token ("" + _currToken + "") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary"");
    }
    /* To ensure that we won't see inconsistent data, better clear up
         * state...
         */
    if (_binaryValue == null) {
        try {
            _binaryValue = _decodeBase64(b64variant);
        } catch (IllegalArgumentException iae) {
            throw _constructError(""Failed to decode VALUE_STRING as base64 ("" + b64variant + ""): "" + iae.getMessage());
        }
    }
    return _binaryValue;
}","byte[]","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(Base64Variant).b64variant","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBinaryValue(Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._decodeBase64(Base64Variant)","Method","No Comment","@SuppressWarnings(""resource"")
protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException {
    ByteArrayBuilder builder = _getByteArrayBuilder();
    final String str = getText();
    _decodeBase64(str, builder, b64variant);
    return builder.toByteArray();
}","byte[]","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._decodeBase64(Base64Variant).b64variant","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._decodeBase64(Base64Variant)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.isNaN()","Method","No Comment","@Override
public boolean isNaN() {
    // can't have since we only coerce integers
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getNumberType()","Method","No Comment","@Override
public NumberType getNumberType() throws IOException {
    if (_numTypesValid == NR_UNKNOWN) {
        // will also check event type
        _checkNumericValue(NR_UNKNOWN);
    }
    // Only integer types supported so...
    if ((_numTypesValid & NR_INT) != 0) {
        return NumberType.INT;
    }
    if ((_numTypesValid & NR_LONG) != 0) {
        return NumberType.LONG;
    }
    return NumberType.BIG_INTEGER;
}","NumberType","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getNumberTypeFP()","Method","* XML has no notion of natural/native floating-point type (has to be
     * provided externally via Schema or so), so need to ensure we indicate that.","// added in 2.17
@Override
public NumberTypeFP getNumberTypeFP() throws IOException {
    return NumberTypeFP.UNKNOWN;
}","NumberTypeFP","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getNumberValue()","Method","No Comment","@Override
public Number getNumberValue() throws IOException {
    if (_numTypesValid == NR_UNKNOWN) {
        // will also check event type
        _checkNumericValue(NR_UNKNOWN);
    }
    // Only integer types supported so...
    if ((_numTypesValid & NR_INT) != 0) {
        return _numberInt;
    }
    if ((_numTypesValid & NR_LONG) != 0) {
        return _numberLong;
    }
    if ((_numTypesValid & NR_BIGINT) != 0) {
        return _numberBigInt;
    }
    _throwInternal();
    return null;
}","Number","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getIntValue()","Method","No Comment","@Override
public int getIntValue() throws IOException {
    if ((_numTypesValid & NR_INT) == 0) {
        if (_numTypesValid == NR_UNKNOWN) {
            // not parsed at all
            // will also check event type
            _checkNumericValue(NR_INT);
        }
        if ((_numTypesValid & NR_INT) == 0) {
            // wasn't an int natively?
            // let's make it so, if possible
            _convertNumberToInt();
        }
    }
    return _numberInt;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getLongValue()","Method","No Comment","@Override
public long getLongValue() throws IOException {
    if ((_numTypesValid & NR_LONG) == 0) {
        if (_numTypesValid == NR_UNKNOWN) {
            _checkNumericValue(NR_LONG);
        }
        if ((_numTypesValid & NR_LONG) == 0) {
            _convertNumberToLong();
        }
    }
    return _numberLong;
}","long","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getBigIntegerValue()","Method","No Comment","@Override
public BigInteger getBigIntegerValue() throws IOException {
    if ((_numTypesValid & NR_BIGINT) == 0) {
        if (_numTypesValid == NR_UNKNOWN) {
            _checkNumericValue(NR_BIGINT);
        }
        if ((_numTypesValid & NR_BIGINT) == 0) {
            _convertNumberToBigInteger();
        }
    }
    return _numberBigInt;
}","BigInteger","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getFloatValue()","Method","No Comment","@Override
public float getFloatValue() throws IOException {
    if ((_numTypesValid & NR_FLOAT) == 0) {
        if (_numTypesValid == NR_UNKNOWN) {
            _checkNumericValue(NR_FLOAT);
        }
    }
    return _convertNumberToFloat();
}","float","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getDoubleValue()","Method","No Comment","@Override
public double getDoubleValue() throws IOException {
    if ((_numTypesValid & NR_DOUBLE) == 0) {
        if (_numTypesValid == NR_UNKNOWN) {
            _checkNumericValue(NR_DOUBLE);
        }
    }
    return _convertNumberToDouble();
}","double","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.getDecimalValue()","Method","No Comment","@Override
public BigDecimal getDecimalValue() throws IOException {
    if ((_numTypesValid & NR_BIGDECIMAL) == 0) {
        if (_numTypesValid == NR_UNKNOWN) {
            _checkNumericValue(NR_BIGDECIMAL);
        }
    }
    return _convertNumberToBigDecimal();
}","BigDecimal","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._checkNumericValue(int)","Method","No Comment","protected final void _checkNumericValue(int expType) throws IOException {
    if (_currToken == JsonToken.VALUE_NUMBER_INT) {
        return;
    }
    _reportError(""Current token ("" + currentToken() + "") not numeric, can not use numeric value accessors"");
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._checkNumericValue(int).expType","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._checkNumericValue(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._isIntNumber(String)","Method","NOTE: copied from `StdDeserializer`...","protected final int _isIntNumber(String text) {
    final int len = text.length();
    if (len > 0) {
        char c = text.charAt(0);
        // skip leading negative sign, do NOT allow leading plus
        final int start = (c == '-') ? 1 : 0;
        for (int i = start; i < len; ++i) {
            int ch = text.charAt(i);
            if (ch > '9' || ch < '0') {
                return -1;
            }
        }
        return len - start;
    }
    return 0;
}","int","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._isIntNumber(String).text","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._isIntNumber(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._convertNumberToInt()","Method","No Comment","protected void _convertNumberToInt() throws IOException {
    // First, converting from long ought to be easy
    if ((_numTypesValid & NR_LONG) != 0) {
        // Let's verify it's lossless conversion by simple roundtrip
        int result = (int) _numberLong;
        if (((long) result) != _numberLong) {
            _reportError(""Numeric value ("" + getText() + "") out of range of int"");
        }
        _numberInt = result;
    } else if ((_numTypesValid & NR_BIGINT) != 0) {
        if (BI_MIN_INT.compareTo(_numberBigInt) > 0 || BI_MAX_INT.compareTo(_numberBigInt) < 0) {
            reportOverflowInt();
        }
        _numberInt = _numberBigInt.intValue();
    } else {
        _throwInternal();
    }
    _numTypesValid |= NR_INT;
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._convertNumberToLong()","Method","No Comment","protected void _convertNumberToLong() throws IOException {
    if ((_numTypesValid & NR_INT) != 0) {
        _numberLong = (long) _numberInt;
    } else if ((_numTypesValid & NR_BIGINT) != 0) {
        if (BI_MIN_LONG.compareTo(_numberBigInt) > 0 || BI_MAX_LONG.compareTo(_numberBigInt) < 0) {
            reportOverflowLong();
        }
        _numberLong = _numberBigInt.longValue();
    } else {
        _throwInternal();
    }
    _numTypesValid |= NR_LONG;
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._convertNumberToBigInteger()","Method","No Comment","protected void _convertNumberToBigInteger() throws IOException {
    if ((_numTypesValid & NR_LONG) != 0) {
        _numberBigInt = BigInteger.valueOf(_numberLong);
    } else if ((_numTypesValid & NR_INT) != 0) {
        _numberBigInt = BigInteger.valueOf(_numberInt);
    } else {
        _throwInternal();
    }
    _numTypesValid |= NR_BIGINT;
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._convertNumberToFloat()","Method","No Comment","protected float _convertNumberToFloat() throws IOException {
    // Note: this MUST start with more accurate representations, since we don't know which
    //  value is the original one (others get generated when requested)
    if ((_numTypesValid & NR_BIGINT) != 0) {
        return _numberBigInt.floatValue();
    }
    if ((_numTypesValid & NR_LONG) != 0) {
        return (float) _numberLong;
    }
    if ((_numTypesValid & NR_INT) != 0) {
        return (float) _numberInt;
    }
    _throwInternal();
    return 0.0f;
}","float","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._convertNumberToDouble()","Method","No Comment","protected double _convertNumberToDouble() throws IOException {
    // same as above, start from more to less accurate
    if ((_numTypesValid & NR_BIGINT) != 0) {
        return _numberBigInt.doubleValue();
    }
    if ((_numTypesValid & NR_LONG) != 0) {
        return (double) _numberLong;
    }
    if ((_numTypesValid & NR_INT) != 0) {
        return (double) _numberInt;
    }
    _throwInternal();
    return 0.0;
}","double","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._convertNumberToBigDecimal()","Method","No Comment","protected BigDecimal _convertNumberToBigDecimal() throws IOException {
    if ((_numTypesValid & NR_BIGINT) != 0) {
        return new BigDecimal(_numberBigInt);
    }
    if ((_numTypesValid & NR_LONG) != 0) {
        return BigDecimal.valueOf(_numberLong);
    }
    if ((_numTypesValid & NR_INT) != 0) {
        return BigDecimal.valueOf(_numberInt);
    }
    _throwInternal();
    return null;
}","BigDecimal","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._handleEOF()","Method","* Method called when an EOF is encountered between tokens.
     * If so, it may be a legitimate EOF, but only iff there
     * is no open non-root context.","@Override
protected void _handleEOF() throws JsonParseException {
    if (!_parsingContext.inRoot()) {
        String marker = _parsingContext.inArray() ? ""Array"" : ""Object"";
        _reportInvalidEOF(String.format("": expected close marker for %s (start marker at %s)"", marker, _parsingContext.startLocation(_ioContext.contentReference())), null);
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._releaseBuffers()","Method","* Method called to release internal buffers owned by the base
     * parser.","protected void _releaseBuffers() throws IOException {
    // anything we can/must release? Underlying parser should do all of it, for now?
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._getByteArrayBuilder()","Method","No Comment","protected ByteArrayBuilder _getByteArrayBuilder() {
    if (_byteArrayBuilder == null) {
        _byteArrayBuilder = new ByteArrayBuilder();
    } else {
        _byteArrayBuilder.reset();
    }
    return _byteArrayBuilder;
}","ByteArrayBuilder","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._internalErrorUnknownToken(Object)","Method","No Comment","private <T> T _internalErrorUnknownToken(Object token) {
    throw new IllegalStateException(""Internal error: unrecognized XmlTokenStream token: "" + token);
}","Object","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._internalErrorUnknownToken(Object).token","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._internalErrorUnknownToken(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._nextToken()","Method","No Comment","protected int _nextToken() throws IOException {
    try {
        return _xmlTokens.next();
    } catch (XMLStreamException e) {
        return StaxUtil.throwAsParseException(e, this);
    } catch (IllegalStateException e) {
        // 08-Apr-2021, tatu: Should improve on this, wrt better information
        //   on issue.
        throw new JsonParseException(this, e.getMessage(), e);
    }
}","int","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser._skipEndElement()","Method","No Comment","protected void _skipEndElement() throws IOException {
    try {
        _xmlTokens.skipEndElement();
    } catch (XMLStreamException e) {
        StaxUtil.throwAsParseException(e, this);
    } catch (Exception e) {
        throw new JsonParseException(this, e.getMessage(), e);
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.<init>(IOContext,int,int,ObjectCodec,XMLStreamReader,XmlNameProcessor)","Constructor","No Comment","public FromXmlParser(IOContext ctxt, int genericParserFeatures, int xmlFeatures, ObjectCodec codec, XMLStreamReader xmlReader, XmlNameProcessor tagProcessor) throws IOException {
    super(genericParserFeatures, ctxt.streamReadConstraints());
    _formatFeatures = xmlFeatures;
    _ioContext = ctxt;
    _objectCodec = codec;
    _parsingContext = XmlReadContext.createRootContext(-1, -1);
    _xmlTokens = new XmlTokenStream(xmlReader, ctxt.contentReference(), _formatFeatures, tagProcessor);
    final int firstToken;
    try {
        firstToken = _xmlTokens.initialize();
    } catch (XMLStreamException e) {
        StaxUtil.throwAsParseException(e, this);
        return;
    }
    // 04-Jan-2019, tatu: Root-level nulls need slightly specific handling;
    //    changed in 2.10.2
    if (_xmlTokens.hasXsiNil()) {
        _nextToken = JsonToken.VALUE_NULL;
    } else {
        switch(firstToken) {
            case XmlTokenStream.XML_START_ELEMENT:
                // Removed from 2.14:
                // case XmlTokenStream.XML_DELAYED_START_ELEMENT:
                _nextToken = JsonToken.START_OBJECT;
                break;
            case XmlTokenStream.XML_ROOT_TEXT:
                _currText = _xmlTokens.getText();
                // [dataformat-xml#435]: may get `null` from empty element...
                // It's complicated.
                if (_currText == null) {
                    _nextToken = JsonToken.VALUE_NULL;
                } else {
                    _nextToken = JsonToken.VALUE_STRING;
                }
                break;
            default:
                _reportError(""Internal problem: invalid starting state (%s)"", _xmlTokens._currentStateDesc());
        }
    }
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.<init>(IOContext,int,int,ObjectCodec,XMLStreamReader,XmlNameProcessor).ctxt","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.<init>(IOContext,int,int,ObjectCodec,XMLStreamReader,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.<init>(IOContext,int,int,ObjectCodec,XMLStreamReader,XmlNameProcessor).genericParserFeatures","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.<init>(IOContext,int,int,ObjectCodec,XMLStreamReader,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.<init>(IOContext,int,int,ObjectCodec,XMLStreamReader,XmlNameProcessor).xmlFeatures","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.<init>(IOContext,int,int,ObjectCodec,XMLStreamReader,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.<init>(IOContext,int,int,ObjectCodec,XMLStreamReader,XmlNameProcessor).codec","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.<init>(IOContext,int,int,ObjectCodec,XMLStreamReader,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.<init>(IOContext,int,int,ObjectCodec,XMLStreamReader,XmlNameProcessor).xmlReader","Parameter_5","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.<init>(IOContext,int,int,ObjectCodec,XMLStreamReader,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.<init>(IOContext,int,int,ObjectCodec,XMLStreamReader,XmlNameProcessor).tagProcessor","Parameter_6","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.<init>(IOContext,int,int,ObjectCodec,XMLStreamReader,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature","Enum","* Enumeration that defines all togglable features for XML parsers.","Enum do not obtain Source Code","No return type","public ","enum has no extends","com.fasterxml.jackson.core.FormatFeature"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature","Enum","* Enumeration that defines all togglable features for XML parsers.","Enum do not obtain Source Code","No return type","public ","enum has no extends","com.fasterxml.jackson.core.FormatFeature"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.AUTO_DETECT_XSI_TYPE","Enum Constant","* Feature that enables automatic conversion of incoming ""xsi:type""
         * (where ""type""  is the local name and ""xsi"" prefix is bound to URI
         * {@link XMLConstants#W3C_XML_SCHEMA_INSTANCE_NS_URI}),
         * into Jackson simple Property Name of {@code ""xsi:type""}.
         * This is usually needed to read content written using
         * matching {@code ToXmlGenerator.Feature#AUTO_DETECT_XSI_TYPE} feature,
         * usually used for Polymorphic handling where it is difficult
         * to specify proper XML Namespace for type identifier.
         * 
         * Default setting is {@code false} in Jackson 2.x (for backwards compatibility):
         * will be changed to true in Jackson 3.x
         *
         * @since 2.17","AUTO_DETECT_XSI_TYPE(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.EMPTY_ELEMENT_AS_NULL","Enum Constant","* Feature that indicates whether XML Empty elements (ones where there are
         * no separate start and end tags, but just one tag that ends with ""/&gt;"")
         * are exposed as {@link JsonToken#VALUE_NULL}) or not. If they are not
         * returned as `null` tokens, they will be returned as {@link JsonToken#VALUE_STRING}
         * tokens with textual value of """" (empty String).
         *<p>
         * Default setting was {@code true} (for backwards compatibility) from 2.9 to 2.11 (inclusive)
         * but was changed in 2.12 to be {@code false} (see [dataformat-xml#411] for details)
         *
         * @since 2.9","EMPTY_ELEMENT_AS_NULL(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.PROCESS_XSI_NIL","Enum Constant","* Feature that indicates whether XML Schema Instance attribute
         * {@code xsi:nil} will be processed automatically -- to indicate {@code null}
         * values -- or not.
         * If enabled, {@code xsi:nil} attribute on any XML element will mark such
         * elements as ""null values"" and any other attributes or child elements they
         * might have to be ignored. If disabled this attribute will be exposed like
         * any other attribute.
         *<p>
         * Default setting is {@code true} since processing was enabled in 2.12.
         *
         * @since 2.13","PROCESS_XSI_NIL(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.collectDefaults()","Method","* Method that calculates bit set (flags) of all features that
         * are enabled by default.","public static int collectDefaults() {
    int flags = 0;
    for (Feature f : values()) {
        if (f.enabledByDefault()) {
            flags |= f.getMask();
        }
    }
    return flags;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.enabledByDefault()","Method","No Comment","@Override
public boolean enabledByDefault() {
    return _defaultState;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.getMask()","Method","No Comment","@Override
public int getMask() {
    return _mask;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.enabledIn(int)","Method","No Comment","@Override
public boolean enabledIn(int flags) {
    return (flags & getMask()) != 0;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.enabledIn(int).flags","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.enabledIn(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.<init>(boolean)","Constructor","No Comment","private Feature(boolean defaultState) {
    _defaultState = defaultState;
    _mask = (1 << ordinal());
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.<init>(boolean).defaultState","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser$Feature.<init>(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature","Enum","* Enumeration that defines all togglable features for XML parsers.","Enum do not obtain Source Code","No return type","public ","enum has no extends","com.fasterxml.jackson.core.FormatFeature"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.AUTO_DETECT_XSI_TYPE","Enum Constant","* Feature that enables automatic conversion of incoming ""xsi:type""
         * (where ""type""  is the local name and ""xsi"" prefix is bound to URI
         * {@link XMLConstants#W3C_XML_SCHEMA_INSTANCE_NS_URI}),
         * into Jackson simple Property Name of {@code ""xsi:type""}.
         * This is usually needed to read content written using
         * matching {@code ToXmlGenerator.Feature#AUTO_DETECT_XSI_TYPE} feature,
         * usually used for Polymorphic handling where it is difficult
         * to specify proper XML Namespace for type identifier.
         * 
         * Default setting is {@code false} in Jackson 2.x (for backwards compatibility):
         * will be changed to true in Jackson 3.x
         *
         * @since 2.17","AUTO_DETECT_XSI_TYPE(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL","Enum Constant","* Feature that indicates whether XML Empty elements (ones where there are
         * no separate start and end tags, but just one tag that ends with ""/&gt;"")
         * are exposed as {@link JsonToken#VALUE_NULL}) or not. If they are not
         * returned as `null` tokens, they will be returned as {@link JsonToken#VALUE_STRING}
         * tokens with textual value of """" (empty String).
         *<p>
         * Default setting was {@code true} (for backwards compatibility) from 2.9 to 2.11 (inclusive)
         * but was changed in 2.12 to be {@code false} (see [dataformat-xml#411] for details)
         *
         * @since 2.9","EMPTY_ELEMENT_AS_NULL(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.PROCESS_XSI_NIL","Enum Constant","* Feature that indicates whether XML Schema Instance attribute
         * {@code xsi:nil} will be processed automatically -- to indicate {@code null}
         * values -- or not.
         * If enabled, {@code xsi:nil} attribute on any XML element will mark such
         * elements as ""null values"" and any other attributes or child elements they
         * might have to be ignored. If disabled this attribute will be exposed like
         * any other attribute.
         *<p>
         * Default setting is {@code true} since processing was enabled in 2.12.
         *
         * @since 2.13","PROCESS_XSI_NIL(true)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.collectDefaults()","Method","* Method that calculates bit set (flags) of all features that
         * are enabled by default.","public static int collectDefaults() {
    int flags = 0;
    for (Feature f : values()) {
        if (f.enabledByDefault()) {
            flags |= f.getMask();
        }
    }
    return flags;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.enabledByDefault()","Method","No Comment","@Override
public boolean enabledByDefault() {
    return _defaultState;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.getMask()","Method","No Comment","@Override
public int getMask() {
    return _mask;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.enabledIn(int)","Method","No Comment","@Override
public boolean enabledIn(int flags) {
    return (flags & getMask()) != 0;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.enabledIn(int).flags","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.enabledIn(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.<init>(boolean)","Constructor","No Comment","private Feature(boolean defaultState) {
    _defaultState = defaultState;
    _mask = (1 << ordinal());
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.<init>(boolean).defaultState","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature.<init>(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream","Class","* Simple helper class used on top of STAX {@link XMLStreamReader} to further
 * abstract out all irrelevant details, and to expose equivalent of flat token
 * stream with no ""fluff"" tokens (comments, processing instructions, mixed
 * content) all of which is just to simplify
 * actual higher-level conversion to JSON tokens.
 *<p>
 * Beyond initial idea there are also couple of other detours like ability
 * to ""replay"" some tokens, add virtual wrappers (ironically to support ""unwrapped""
 * array values), and to unroll ""Objects"" into String values in some cases.","Class do not obtain Source Code","No return type","public ","",""
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XML_START_ELEMENT","Field","No Comment","public final static int XML_START_ELEMENT = 1;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XML_END_ELEMENT","Field","No Comment","public final static int XML_END_ELEMENT = 2;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XML_ATTRIBUTE_NAME","Field","No Comment","public final static int XML_ATTRIBUTE_NAME = 3;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XML_ATTRIBUTE_VALUE","Field","No Comment","public final static int XML_ATTRIBUTE_VALUE = 4;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XML_TEXT","Field","No Comment","public final static int XML_TEXT = 5;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XML_ROOT_TEXT","Field","needs some more state management too","public final static int XML_ROOT_TEXT = 7;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XML_END","Field","No Comment","public final static int XML_END = 8;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.REPLAY_START_DUP","Field","No Comment","private final static int REPLAY_START_DUP = 1;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.REPLAY_END","Field","No Comment","private final static int REPLAY_END = 2;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.REPLAY_START_DELAYED","Field","No Comment","private final static int REPLAY_START_DELAYED = 3;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.XSI_NAMESPACE","Field","No Comment","private final static String XSI_NAMESPACE = XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._xmlReader","Field","No Comment","protected final XMLStreamReader2 _xmlReader;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._sourceReference","Field","@since 2.13 (was untyped before)","protected final ContentReference _sourceReference;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._formatFeatures","Field","* Bit flag composed of bits that indicate which
     * {@link FromXmlParser.Feature}s
     * are enabled.","protected int _formatFeatures;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._cfgProcessXsiNil","Field","No Comment","protected boolean _cfgProcessXsiNil;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._cfgProcessXsiType","Field","@since 2.17","protected boolean _cfgProcessXsiType;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nameProcessor","Field","No Comment","protected XmlNameProcessor _nameProcessor;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentState","Field","No Comment","protected int _currentState;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._attributeCount","Field","No Comment","protected int _attributeCount;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._xsiNilFound","Field","* Marker used to indicate presence of `xsi:nil=""true""' in current START_ELEMENT.
     *
     * @since 2.10","protected boolean _xsiNilFound;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._startElementAfterText","Field","* Flag set true if current event is {@code XML_TEXT} and there is START_ELEMENT
     *
     * @since 2.12","protected boolean _startElementAfterText;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextAttributeIndex","Field","* Index of the next attribute of the current START_ELEMENT
     * to return (as field name and value pair), if any; -1
     * when no attributes to return","protected int _nextAttributeIndex;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._localName","Field","No Comment","protected String _localName;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._namespaceURI","Field","No Comment","protected String _namespaceURI;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._textValue","Field","* Current text value for TEXT_VALUE returned","protected String _textValue;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._repeatCurrentToken","Field","* Marker flag set if caller wants to ""push back"" current token so
     * that next call to {@link #next()} should simply be given what was
     * already read.
     *
     * @since 2.12","protected boolean _repeatCurrentToken;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nameToDecode","Field","* Reusable internal value object
     *
     * @since 2.14","protected XmlNameProcessor.XmlName _nameToDecode = new XmlNameProcessor.XmlName();","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._repeatElement","Field","* Flag used to indicate that given element should be ""replayed"".","protected int _repeatElement;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentWrapper","Field","* Wrapping state, if any active (null if none)","protected ElementWrapper _currentWrapper;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextLocalName","Field","* In cases where we need to 'inject' a virtual END_ELEMENT, we may also
     * need to restore START_ELEMENT afterwards; if so, this is where names
     * are held.","protected String _nextLocalName;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._nextNamespaceURI","Field","No Comment","protected String _nextNamespaceURI;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.initialize()","Method","* Second part of initialization, to be called immediately after construction
     *
     * @since 2.12","public int initialize() throws XMLStreamException {
    // Let's ensure we point to START_ELEMENT...
    if (_xmlReader.getEventType() != XMLStreamConstants.START_ELEMENT) {
        throw new IllegalArgumentException(""Invalid XMLStreamReader passed: should be pointing to START_ELEMENT ("" + XMLStreamConstants.START_ELEMENT + ""), instead got "" + _xmlReader.getEventType());
    }
    // sets _attributeCount, _nextAttributeIndex
    _checkXsiAttributes();
    _decodeElementName(_xmlReader.getNamespaceURI(), _xmlReader.getLocalName());
    // 02-Jul-2020, tatu: Two choices: if child elements OR attributes, expose
    //    as Object value; otherwise expose as Text
    // 06-Sep-2022, tatu: Actually expose as Object in almost every situation
    //    as of 2.14: otherwise we have lots of issues with empty POJOs,
    //    Lists, Maps
    if (_xmlReader.isEmptyElement() && FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL.enabledIn(_formatFeatures) && !_xsiNilFound && _attributeCount < 1) {
        // 06-Sep-2022, tatu: In fact the only special case of null conversion
        //    of the root empty element
        _textValue = null;
        _startElementAfterText = false;
        return (_currentState = XML_ROOT_TEXT);
    }
    return (_currentState = XML_START_ELEMENT);
    // 06-Sep-2022, tatu: This code was used in 2.12, 2.13, may be
    //   removed after 2.14 if/when no longer needed
    // copied from START_ELEMENT section of _next():
    /*
        final String text = _collectUntilTag();
        if (text == null) {
            // 30-Nov-2020, tatu: [dataformat-xml#435], this is tricky
            //   situation since we got coerced `null`... but at least for
            //   now will have to report as ""root String"" (... with null contents)
            _textValue = null;
            _startElementAfterText = false;
            return (_currentState = XML_ROOT_TEXT);
        }

        final boolean startElementNext = _xmlReader.getEventType() == XMLStreamReader.START_ELEMENT;
        // If we have no/all-whitespace text followed by START_ELEMENT, ignore text
        if (startElementNext) {
            if (_allWs(text)) {
                _textValue = null;
                return (_currentState = XML_DELAYED_START_ELEMENT);
            }
            _textValue = text;
            return (_currentState = XML_DELAYED_START_ELEMENT);
        }
        _startElementAfterText = false;
        _textValue = text;
        return (_currentState = XML_ROOT_TEXT);
        */
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getXmlReader()","Method","No Comment","public XMLStreamReader2 getXmlReader() {
    return _xmlReader;
}","XMLStreamReader2","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.setFormatFeatures(int)","Method","* @since 2.9","protected void setFormatFeatures(int f) {
    _formatFeatures = f;
    _cfgProcessXsiNil = FromXmlParser.Feature.PROCESS_XSI_NIL.enabledIn(f);
    _cfgProcessXsiType = FromXmlParser.Feature.AUTO_DETECT_XSI_TYPE.enabledIn(f);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.setFormatFeatures(int).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.setFormatFeatures(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.next()","Method","public int next0() throws XMLStreamException","public int next() throws XMLStreamException {
    if (_repeatCurrentToken) {
        _repeatCurrentToken = false;
        return _currentState;
    }
    if (_repeatElement != 0) {
        return (_currentState = _handleRepeatElement());
    }
    return _next();
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipEndElement()","Method","No Comment","public void skipEndElement() throws IOException, XMLStreamException {
    int type = next();
    if (type != XML_END_ELEMENT) {
        throw new IOException(String.format(""Internal error: Expected END_ELEMENT, got event of type %s"", _stateDesc(type)));
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getCurrentToken()","Method","No Comment","public int getCurrentToken() {
    return _currentState;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getText()","Method","No Comment","public String getText() {
    return _textValue;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getLocalName()","Method","* Accessor for local name of current named event (that is,
     * {@code XML_START_ELEMENT} or {@code XML_ATTRIBUTE_NAME}).
     *<p>
     * NOTE: name NOT accessible on {@code XML_END_ELEMENT}","public String getLocalName() {
    return _localName;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getNamespaceURI()","Method","No Comment","public String getNamespaceURI() {
    return _namespaceURI;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.hasXsiNil()","Method","No Comment","public boolean hasXsiNil() {
    return _xsiNilFound;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.closeCompletely()","Method","No Comment","public void closeCompletely() throws XMLStreamException {
    _xmlReader.closeCompletely();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.close()","Method","No Comment","public void close() throws XMLStreamException {
    _xmlReader.close();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getCurrentLocation()","Method","No Comment","public JsonLocation getCurrentLocation() {
    return _extractLocation(_xmlReader.getLocationInfo().getCurrentLocation());
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.getTokenLocation()","Method","No Comment","public JsonLocation getTokenLocation() {
    return _extractLocation(_xmlReader.getLocationInfo().getStartLocation());
}","JsonLocation","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.repeatStartElement()","Method","* Method used to add virtual wrapping, which just duplicates START_ELEMENT
     * stream points to, and its matching closing element.","protected void repeatStartElement() {
    //System.out.println("" XmlTokenStream.repeatStartElement() for <""+_localName+"">, _currentWrapper was: ""+_currentWrapper);
    // sanity check: can only be used when just returned START_ELEMENT:
    if (_currentState != XML_START_ELEMENT) {
        // 14-May-2020, tatu: Looks like we DO end up here with empty Lists; if so,
        //    should NOT actually wrap.
        if (_currentState == XML_END_ELEMENT) {
            return;
        }
        throw new IllegalStateException(""Current state not XML_START_ELEMENT but "" + _currentStateDesc());
    }
    // Important: add wrapper, to keep track...
    if (_currentWrapper == null) {
        _currentWrapper = ElementWrapper.matchingWrapper(null, _localName, _namespaceURI);
    } else {
        _currentWrapper = ElementWrapper.matchingWrapper(_currentWrapper.getParent(), _localName, _namespaceURI);
    }
    //System.out.println("" repeatStartElement for ""+_localName+"", _currentWrapper now: ""+_currentWrapper);
    _repeatElement = REPLAY_START_DUP;
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.pushbackCurrentToken()","Method","* Method that can be called to ask stream to literally just return current token
     * with the next call to {@link #next()}, without more work.
     *
     * @since 2.12","protected void pushbackCurrentToken() {
    _repeatCurrentToken = true;
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.skipAttributes()","Method","* Method called to skip any attributes current START_ELEMENT may have,
     * so that they are not returned as token.
     * 
     * @since 2.1","protected void skipAttributes() {
    //System.out.println("" XmlTokenStream.skipAttributes(), state: ""+_currentStateDesc());
    switch(_currentState) {
        case XML_ATTRIBUTE_NAME:
            _attributeCount = 0;
            _currentState = XML_START_ELEMENT;
            break;
        case XML_START_ELEMENT:
            // 06-Jan-2012, tatu: As per [#47] it looks like we should NOT do anything
            //   in this particular case, because it occurs when original element had
            //   no attributes and we now point to the first child element.
            //              _attributeCount = 0;
            break;
        case XML_TEXT:
            // nothing to do... is it even legal?
            break;
        /*
        case XML_DELAYED_START_ELEMENT:
            // 03-Jul-2020, tatu: and here nothing to do either... ?
            break;
            */
        default:
            throw new IllegalStateException(""Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME but "" + _currentStateDesc());
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._next()","Method","No Comment","private final int _next() throws XMLStreamException {
    //System.out.println("" XmlTokenStream._next(), state: ""+_currentStateDesc());
    switch(_currentState) {
        case XML_ATTRIBUTE_VALUE:
            ++_nextAttributeIndex;
        // fall through
        case // attributes to return?
        XML_START_ELEMENT:
            // 06-Sep-2019, tatu: `xsi:nil` to induce ""real"" null value?
            if (_xsiNilFound) {
                _xsiNilFound = false;
                // 08-Jul-2021, tatu: as per [dataformat-xml#467] just skip anything
                //   element might have, no need to ensure it was empty
                _xmlReader.skipElement();
                return _handleEndElement();
            }
            if (_nextAttributeIndex < _attributeCount) {
                //System.out.println("" XmlTokenStream._next(): Got attr(s)!"");
                _decodeAttributeName(_xmlReader.getAttributeNamespace(_nextAttributeIndex), _xmlReader.getAttributeLocalName(_nextAttributeIndex));
                _textValue = _xmlReader.getAttributeValue(_nextAttributeIndex);
                return (_currentState = XML_ATTRIBUTE_NAME);
            }
            // otherwise need to find START/END_ELEMENT or text
            String text = _collectUntilTag();
            //System.out.println("" XmlTokenStream._next(): _collectUntilTag -> '""+text+""'"");
            final boolean startElementNext = _xmlReader.getEventType() == XMLStreamReader.START_ELEMENT;
            //System.out.println("" XmlTokenStream._next(): startElementNext? ""+startElementNext);
            // If we have no/all-whitespace text followed by START_ELEMENT, ignore text
            if (startElementNext) {
                if (_allWs(text)) {
                    _startElementAfterText = false;
                    return _initStartElement();
                }
                _startElementAfterText = true;
                _textValue = text;
                return (_currentState = XML_TEXT);
            }
            // For END_ELEMENT we will return text, if any
            if (text != null) {
                _startElementAfterText = false;
                _textValue = text;
                return (_currentState = XML_TEXT);
            }
            _startElementAfterText = false;
            return _handleEndElement();
        /*
        case XML_DELAYED_START_ELEMENT: // since 2.12, to support scalar Root Value
            // Two cases: either ""simple"" with not text
           if (_textValue == null) {
               return _initStartElement();
           }
           // or one where there is first text (to translate into """":<text> key/value entry)
           // then followed by start element
           _startElementAfterText = true;
           return (_currentState = XML_TEXT);
           */
        case XML_ATTRIBUTE_NAME:
            // if we just returned name, will need to just send value next
            return (_currentState = XML_ATTRIBUTE_VALUE);
        case XML_TEXT:
            // mixed text with other elements
            if (_startElementAfterText) {
                _startElementAfterText = false;
                return _initStartElement();
            }
            // text followed by END_ELEMENT
            return _handleEndElement();
        case XML_ROOT_TEXT:
            close();
            return (_currentState = XML_END);
        case XML_END:
            return XML_END;
    }
    // Ok: must be END_ELEMENT; see what tag we get (or end)
    switch(_skipAndCollectTextUntilTag()) {
        case XMLStreamConstants.END_DOCUMENT:
            close();
            return (_currentState = XML_END);
        case XMLStreamConstants.END_ELEMENT:
            // 24-May-2020, tatu: Need to see if we have ""mixed content"" to offer
            if (!_allWs(_textValue)) {
                // _textValue already set
                return (_currentState = XML_TEXT);
            }
            return _handleEndElement();
    }
    // 24-May-2020, tatu: Need to see if we have ""mixed content"" to offer
    if (!_allWs(_textValue)) {
        // _textValue already set
        _startElementAfterText = true;
        return (_currentState = XML_TEXT);
    }
    // START_ELEMENT...
    return _initStartElement();
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._collectUntilTag()","Method","* @return Collected text, if any, EXCEPT that if {@code FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL}
     *    AND empty element, returns {@code null}","private final String _collectUntilTag() throws XMLStreamException {
    // 21-Jun-2017, tatu: Whether exposed as `null` or """" is now configurable...
    if (_xmlReader.isEmptyElement()) {
        _xmlReader.next();
        if (FromXmlParser.Feature.EMPTY_ELEMENT_AS_NULL.enabledIn(_formatFeatures)) {
            return null;
        }
        return """";
    }
    CharSequence chars = null;
    main_loop: while (_xmlReader.hasNext()) {
        switch(_xmlReader.next()) {
            case XMLStreamConstants.START_ELEMENT:
                break main_loop;
            case XMLStreamConstants.END_ELEMENT:
            case XMLStreamConstants.END_DOCUMENT:
                break main_loop;
            // note: SPACE is ignorable (and seldom seen), not to be included
            case XMLStreamConstants.CHARACTERS:
            case XMLStreamConstants.CDATA:
                // 17-Jul-2017, tatu: as per [dataformat-xml#236], need to try to...
                {
                    String str = _getText(_xmlReader);
                    if (chars == null) {
                        chars = str;
                    } else {
                        if (chars instanceof String) {
                            chars = new StringBuilder(chars);
                        }
                        ((StringBuilder) chars).append(str);
                    }
                }
                break;
            default:
        }
    }
    return (chars == null) ? """" : chars.toString();
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._skipAndCollectTextUntilTag()","Method","@since 2.12","private final int _skipAndCollectTextUntilTag() throws XMLStreamException {
    CharSequence chars = null;
    while (_xmlReader.hasNext()) {
        int type;
        switch(type = _xmlReader.next()) {
            case XMLStreamConstants.START_ELEMENT:
            case XMLStreamConstants.END_ELEMENT:
            case XMLStreamConstants.END_DOCUMENT:
                _textValue = (chars == null) ? """" : chars.toString();
                return type;
            // note: SPACE is ignorable (and seldom seen), not to be included
            case XMLStreamConstants.CHARACTERS:
            case XMLStreamConstants.CDATA:
                {
                    String str = _getText(_xmlReader);
                    if (chars == null) {
                        chars = str;
                    } else {
                        if (chars instanceof String) {
                            chars = new StringBuilder(chars);
                        }
                        ((StringBuilder) chars).append(str);
                    }
                }
                break;
            default:
        }
    }
    throw new IllegalStateException(""Expected to find a tag, instead reached end of input"");
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._getText(XMLStreamReader2)","Method","No Comment","private final String _getText(XMLStreamReader2 r) throws XMLStreamException {
    try {
        return r.getText();
    } catch (RuntimeException e) {
        Throwable cause = e.getCause();
        if (cause instanceof XMLStreamException) {
            throw (XMLStreamException) cause;
        }
        throw e;
    }
}","String","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._getText(XMLStreamReader2).r","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._getText(XMLStreamReader2)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._initStartElement()","Method","No Comment","private final int _initStartElement() throws XMLStreamException {
    final String ns = _xmlReader.getNamespaceURI();
    final String localName = _xmlReader.getLocalName();
    _checkXsiAttributes();
    // Support for virtual wrapping: in wrapping, may either create a new
    // wrapper scope (if in sub-tree, or matches wrapper element itself),
    // or implicitly close existing scope.
    if (_currentWrapper != null) {
        if (_currentWrapper.matchesWrapper(localName, ns)) {
            _currentWrapper = _currentWrapper.intermediateWrapper();
            //System.out.println("" _initStartElement(): START_ELEMENT (""+localName+"") DOES match [""+_currentWrapper+""]: leave/add intermediate"");
        } else {
            // implicit end is more interesting:
            //System.out.println("" _initStartElement(): START_ELEMENT (""+localName+"") not matching '""+_localName+""'; add extra XML-END-ELEMENT!"");
            _localName = _currentWrapper.getWrapperLocalName();
            _namespaceURI = _currentWrapper.getWrapperNamespace();
            _currentWrapper = _currentWrapper.getParent();
            // Important! We also need to restore the START_ELEMENT, so:
            _nextLocalName = localName;
            _nextNamespaceURI = ns;
            _repeatElement = REPLAY_START_DELAYED;
            return (_currentState = XML_END_ELEMENT);
        }
    }
    _decodeElementName(ns, localName);
    return (_currentState = XML_START_ELEMENT);
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._checkXsiAttributes()","Method","* @since 2.10","private final void _checkXsiAttributes() {
    int count = _xmlReader.getAttributeCount();
    _attributeCount = count;
    // [dataformat-xml#354]: xsi:nul handling; at first only if first attribute
    if (count >= 1) {
        // [dataformat-xml#468]: may disable xsi:nil processing
        if (_cfgProcessXsiNil && ""nil"".equals(_xmlReader.getAttributeLocalName(0))) {
            if (XSI_NAMESPACE.equals(_xmlReader.getAttributeNamespace(0))) {
                // need to skip, regardless of value
                _nextAttributeIndex = 1;
                // but only mark as nil marker if enabled
                _xsiNilFound = ""true"".equals(_xmlReader.getAttributeValue(0));
                return;
            }
        }
    }
    _nextAttributeIndex = 0;
    _xsiNilFound = false;
}","void","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._decodeElementName(String,String)","Method","* @since 2.14","protected void _decodeElementName(String namespaceURI, String localName) {
    // 31-Jan-2024, tatu: [dataformat-xml#634] Need to convert 'xsi:type'?
    //    (not 100% sure if needed for elements but let's do for now)
    if (_cfgProcessXsiType) {
        if (localName.equals(""type"") && XSI_NAMESPACE.equals(namespaceURI)) {
            _localName = ""xsi:type"";
            // or could leave as it was?
            _namespaceURI = """";
            return;
        }
    }
    _nameToDecode.namespace = namespaceURI;
    _nameToDecode.localPart = localName;
    _nameProcessor.decodeName(_nameToDecode);
    _namespaceURI = _nameToDecode.namespace;
    _localName = _nameToDecode.localPart;
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._decodeElementName(String,String).namespaceURI","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._decodeElementName(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._decodeElementName(String,String).localName","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._decodeElementName(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._decodeAttributeName(String,String)","Method","* @since 2.14","protected void _decodeAttributeName(String namespaceURI, String localName) {
    // 31-Jan-2024, tatu: [dataformat-xml#634] Need to convert 'xsi:type'?
    if (_cfgProcessXsiType) {
        if (localName.equals(""type"") && XSI_NAMESPACE.equals(namespaceURI)) {
            _localName = ""xsi:type"";
            // or could leave as it was?
            _namespaceURI = """";
            return;
        }
    }
    _nameToDecode.namespace = namespaceURI;
    _nameToDecode.localPart = localName;
    _nameProcessor.decodeName(_nameToDecode);
    _namespaceURI = _nameToDecode.namespace;
    _localName = _nameToDecode.localPart;
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._decodeAttributeName(String,String).namespaceURI","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._decodeAttributeName(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._decodeAttributeName(String,String).localName","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._decodeAttributeName(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleRepeatElement()","Method","* Method called to handle details of repeating ""virtual""
     * start/end elements, needed for handling 'unwrapped' lists.","protected int _handleRepeatElement() throws XMLStreamException {
    //System.out.println("" XMLTokenStream._handleRepeatElement()"");
    int type = _repeatElement;
    _repeatElement = 0;
    if (type == REPLAY_START_DUP) {
        //System.out.println("" XMLTokenStream._handleRepeatElement() for START_ELEMENT: ""+_localName+"" (""+_xmlReader.getLocalName()+"")"");
        // important: add the virtual element second time, but not with name to match
        // lgtm [java/dereferenced-value-may-be-null]
        _currentWrapper = _currentWrapper.intermediateWrapper();
        return XML_START_ELEMENT;
    }
    if (type == REPLAY_END) {
        //System.out.println("" XMLTokenStream._handleRepeatElement() for END_ELEMENT: ""+_localName+"" (""+_xmlReader.getLocalName()+"")"");
        _decodeElementName(_xmlReader.getNamespaceURI(), _xmlReader.getLocalName());
        if (_currentWrapper != null) {
            _currentWrapper = _currentWrapper.getParent();
        }
        return XML_END_ELEMENT;
    }
    if (type == REPLAY_START_DELAYED) {
        if (_currentWrapper != null) {
            _currentWrapper = _currentWrapper.intermediateWrapper();
        }
        _decodeElementName(_nextNamespaceURI, _nextLocalName);
        _nextLocalName = null;
        _nextNamespaceURI = null;
        //System.out.println("" XMLTokenStream._handleRepeatElement() for START_DELAYED: ""+_localName+"" (""+_xmlReader.getLocalName()+"")"");
        return XML_START_ELEMENT;
    }
    throw new IllegalStateException(""Unrecognized type to repeat: "" + type);
}","int","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._handleEndElement()","Method","No Comment","private final int _handleEndElement() {
    //System.out.println("" XMLTokenStream._handleEndElement()"");
    if (_currentWrapper != null) {
        ElementWrapper w = _currentWrapper;
        // important: if we close the scope, must duplicate END_ELEMENT as well
        if (w.isMatching()) {
            _repeatElement = REPLAY_END;
            // 11-Sep-2022, tatu: I _think_ these are already properly decoded
            _localName = w.getWrapperLocalName();
            _namespaceURI = w.getWrapperNamespace();
            _currentWrapper = _currentWrapper.getParent();
            //System.out.println("" XMLTokenStream._handleEndElement(): IMPLICIT requestRepeat of END_ELEMENT '""+_localName);
        } else {
            _currentWrapper = _currentWrapper.getParent();
            // 23-May-2020, tatu: Let's clear _localName since it's value is unlikely
            //    to be correct and we may or may not be able to get real one (for
            //    END_ELEMENT could) -- FromXmlParser does NOT use this info
            _localName = """";
            _namespaceURI = """";
        }
    } else {
        // Not (necessarily) known, as per above, so:
        _localName = """";
        _namespaceURI = """";
    }
    return (_currentState = XML_END_ELEMENT);
}","int","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._extractLocation(XMLStreamLocation2)","Method","No Comment","private JsonLocation _extractLocation(XMLStreamLocation2 location) {
    if (location == null) {
        // just for impls that might pass null...
        return new JsonLocation(_sourceReference, -1, -1, -1);
    }
    return new JsonLocation(_sourceReference, location.getCharacterOffset(), location.getLineNumber(), location.getColumnNumber());
}","JsonLocation","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._extractLocation(XMLStreamLocation2).location","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._extractLocation(XMLStreamLocation2)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._allWs(String)","Method","No Comment","protected static boolean _allWs(String str) {
    final int len = (str == null) ? 0 : str.length();
    if (len > 0) {
        for (int i = 0; i < len; ++i) {
            if (str.charAt(i) > ' ') {
                return false;
            }
        }
    }
    return true;
}","boolean","protected , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._allWs(String).str","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._allWs(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._currentStateDesc()","Method","No Comment","protected String _currentStateDesc() {
    return _stateDesc(_currentState);
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._stateDesc(int)","Method","No Comment","protected String _stateDesc(int state) {
    switch(state) {
        case XML_START_ELEMENT:
            return ""XML_START_ELEMENT"";
        case XML_END_ELEMENT:
            return ""XML_END_ELEMENT"";
        case XML_ATTRIBUTE_NAME:
            return ""XML_ATTRIBUTE_NAME"";
        case XML_ATTRIBUTE_VALUE:
            return ""XML_ATTRIBUTE_VALUE"";
        case XML_TEXT:
            return ""XML_TEXT"";
        // case XML_DELAYED_START_ELEMENT:
        //    return ""XML_START_ELEMENT_DELAYED"";
        case XML_ROOT_TEXT:
            return ""XML_ROOT_TEXT"";
        case XML_END:
            return ""XML_END"";
    }
    return ""N/A ("" + _currentState + "")"";
}","String","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._stateDesc(int).state","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream._stateDesc(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.<init>(XMLStreamReader,ContentReference,int,XmlNameProcessor)","Constructor","No Comment","public XmlTokenStream(XMLStreamReader xmlReader, ContentReference sourceRef, int formatFeatures, XmlNameProcessor nameProcessor) {
    _sourceReference = sourceRef;
    _formatFeatures = formatFeatures;
    _cfgProcessXsiNil = FromXmlParser.Feature.PROCESS_XSI_NIL.enabledIn(_formatFeatures);
    _cfgProcessXsiType = FromXmlParser.Feature.AUTO_DETECT_XSI_TYPE.enabledIn(_formatFeatures);
    // 04-Dec-2023, tatu: [dataformat-xml#618] Need further customized adapter:
    _xmlReader = Stax2JacksonReaderAdapter.wrapIfNecessary(xmlReader);
    _nameProcessor = nameProcessor;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.<init>(XMLStreamReader,ContentReference,int,XmlNameProcessor).xmlReader","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.<init>(XMLStreamReader,ContentReference,int,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.<init>(XMLStreamReader,ContentReference,int,XmlNameProcessor).sourceRef","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.<init>(XMLStreamReader,ContentReference,int,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.<init>(XMLStreamReader,ContentReference,int,XmlNameProcessor).formatFeatures","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.<init>(XMLStreamReader,ContentReference,int,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.<init>(XMLStreamReader,ContentReference,int,XmlNameProcessor).nameProcessor","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream.<init>(XMLStreamReader,ContentReference,int,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier","Class","* The main reason for a modifier is to support handling of
 * 'wrapped' Collection types.","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.databind.deser.BeanDeserializerModifier","java.io.Serializable"
"com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._cfgNameForTextValue","Field","* Virtual name used for text segments.","protected String _cfgNameForTextValue = """";","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(DeserializationConfig,BeanDescription,List)","Method","No Comment","@Override
public List<BeanPropertyDefinition> updateProperties(DeserializationConfig config, BeanDescription beanDesc, List<BeanPropertyDefinition> propDefs) {
    final AnnotationIntrospector intr = config.getAnnotationIntrospector();
    int changed = 0;
    for (int i = 0, propCount = propDefs.size(); i < propCount; ++i) {
        BeanPropertyDefinition prop = propDefs.get(i);
        AnnotatedMember acc = prop.getPrimaryMember();
        // should not be null, but just in case:
        if (acc == null) {
            continue;
        }
        /* First: handle ""as text""? Such properties
             * are exposed as values of 'unnamed' fields; so one way to
             * map them is to rename property to have name """"... (and
             * hope this does not break other parts...)
             */
        Boolean b = AnnotationUtil.findIsTextAnnotation(config, intr, acc);
        if (b != null && b.booleanValue()) {
            // unwrapped properties will appear as 'unnamed' (empty String)
            BeanPropertyDefinition newProp = prop.withSimpleName(_cfgNameForTextValue);
            if (newProp != prop) {
                propDefs.set(i, newProp);
            }
            continue;
        }
        // second: do we need to handle wrapping (for Lists)?
        PropertyName wrapperName = prop.getWrapperName();
        if (wrapperName != null && wrapperName != PropertyName.NO_NAME) {
            String localName = wrapperName.getSimpleName();
            if ((localName != null && localName.length() > 0) && !localName.equals(prop.getName())) {
                // make copy-on-write as necessary
                if (changed == 0) {
                    propDefs = new ArrayList<BeanPropertyDefinition>(propDefs);
                }
                ++changed;
                propDefs.set(i, prop.withSimpleName(localName));
                continue;
            }
            // otherwise unwrapped; needs handling but later on
        }
    }
    return propDefs;
}","List","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(DeserializationConfig,BeanDescription,List).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(DeserializationConfig,BeanDescription,List)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(DeserializationConfig,BeanDescription,List).beanDesc","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(DeserializationConfig,BeanDescription,List)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(DeserializationConfig,BeanDescription,List).propDefs","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.updateProperties(DeserializationConfig,BeanDescription,List)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(DeserializationConfig,BeanDescription,JsonDeserializer)","Method","No Comment","@Override
public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc, JsonDeserializer<?> deser0) {
    if (!(deser0 instanceof BeanDeserializerBase)) {
        return deser0;
    }
    /* 17-Aug-2013, tatu: One important special case first: if we have one ""XML Text""
         * property, it may be exposed as VALUE_STRING token (depending on whether any attribute
         * values are exposed): and to deserialize from that, we need special handling unless POJO
         * has appropriate single-string creator method.
         */
    BeanDeserializerBase deser = (BeanDeserializerBase) deser0;
    // Heuristics are bit tricky; but for now let's assume that if POJO
    // can already work with VALUE_STRING, it's ok and doesn't need extra support
    ValueInstantiator inst = deser.getValueInstantiator();
    // 03-Aug-2017, tatu: [dataformat-xml#254] suggests we also should
    //    allow passing `int`/`Integer`/`long`/`Long` cases, BUT
    //    unfortunately we can not simply use default handling. Would need
    //    coercion.
    // 30-Apr-2020, tatu: Complication from [dataformat-xml#318] as we now
    //    have a delegate too...
    if (!inst.canCreateFromString()) {
        SettableBeanProperty textProp = _findSoleTextProp(config, deser.properties());
        if (textProp != null) {
            return new XmlTextDeserializer(deser, textProp);
        }
    }
    return new WrapperHandlingDeserializer(deser);
}","JsonDeserializer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(DeserializationConfig,BeanDescription,JsonDeserializer).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(DeserializationConfig,BeanDescription,JsonDeserializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(DeserializationConfig,BeanDescription,JsonDeserializer).beanDesc","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(DeserializationConfig,BeanDescription,JsonDeserializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(DeserializationConfig,BeanDescription,JsonDeserializer).deser0","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.modifyDeserializer(DeserializationConfig,BeanDescription,JsonDeserializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(DeserializationConfig,Iterator)","Method","No Comment","private SettableBeanProperty _findSoleTextProp(DeserializationConfig config, Iterator<SettableBeanProperty> propIt) {
    final AnnotationIntrospector ai = config.getAnnotationIntrospector();
    SettableBeanProperty textProp = null;
    while (propIt.hasNext()) {
        SettableBeanProperty prop = propIt.next();
        AnnotatedMember m = prop.getMember();
        if (m != null) {
            // Ok, let's use a simple check: we should have renamed it earlier so:
            PropertyName n = prop.getFullName();
            if (_cfgNameForTextValue.equals(n.getSimpleName())) {
                // should we verify we only got one?
                textProp = prop;
                continue;
            }
            // as-attribute are ok as well
            Boolean b = AnnotationUtil.findIsAttributeAnnotation(config, ai, m);
            if (b != null && b.booleanValue()) {
                continue;
            }
        }
        // Otherwise, it's something else; no go
        return null;
    }
    return textProp;
}","SettableBeanProperty","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(DeserializationConfig,Iterator).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(DeserializationConfig,Iterator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(DeserializationConfig,Iterator).propIt","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier._findSoleTextProp(DeserializationConfig,Iterator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.<init>(String)","Constructor","No Comment","public XmlBeanDeserializerModifier(String nameForTextValue) {
    _cfgNameForTextValue = nameForTextValue;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.<init>(String).nameForTextValue","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier.<init>(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext","Class","* XML-specific {@link DeserializationContext} needed to override certain
 * handlers.
 *
 * @since 2.12","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",""
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.copy()","Method","No Comment","@Override
public XmlDeserializationContext copy() {
    return new XmlDeserializationContext(this);
}","XmlDeserializationContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.createInstance(DeserializationConfig,JsonParser,InjectableValues)","Method","No Comment","@Override
public DefaultDeserializationContext createInstance(DeserializationConfig config, JsonParser p, InjectableValues values) {
    return new XmlDeserializationContext(this, config, p, values);
}","DefaultDeserializationContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.createInstance(DeserializationConfig,JsonParser,InjectableValues).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.createInstance(DeserializationConfig,JsonParser,InjectableValues)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.createInstance(DeserializationConfig,JsonParser,InjectableValues).p","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.createInstance(DeserializationConfig,JsonParser,InjectableValues)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.createInstance(DeserializationConfig,JsonParser,InjectableValues).values","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.createInstance(DeserializationConfig,JsonParser,InjectableValues)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.createDummyInstance(DeserializationConfig)","Method","No Comment","@Override
public DefaultDeserializationContext createDummyInstance(DeserializationConfig config) {
    // need to be careful to create non-blue-print instance
    return new XmlDeserializationContext(this, config);
}","DefaultDeserializationContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.createDummyInstance(DeserializationConfig).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.createDummyInstance(DeserializationConfig)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.with(DeserializerFactory)","Method","No Comment","@Override
public DefaultDeserializationContext with(DeserializerFactory factory) {
    return new XmlDeserializationContext(this, factory);
}","DefaultDeserializationContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.with(DeserializerFactory).factory","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.with(DeserializerFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.withCaches(CacheProvider)","Method","No Comment","@Override
public DefaultDeserializationContext withCaches(CacheProvider cp) {
    return new XmlDeserializationContext(this, cp);
}","DefaultDeserializationContext","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.withCaches(CacheProvider).cp","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.withCaches(CacheProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.readRootValue(JsonParser,JavaType,JsonDeserializer,Object)","Method","No Comment","// since 2.12
@Override
public Object readRootValue(JsonParser p, JavaType valueType, JsonDeserializer<Object> deser, Object valueToUpdate) throws IOException {
    // 18-Sep-2021, tatu: Complicated mess; with 2.12, had [dataformat-xml#374]
    //    to disable handling. With 2.13, via [dataformat-xml#485] undid this change
    if (_config.useRootWrapping()) {
        return _unwrapAndDeserialize(p, valueType, deser, valueToUpdate);
    }
    if (valueToUpdate == null) {
        return deser.deserialize(p, this);
    }
    return deser.deserialize(p, this, valueToUpdate);
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.readRootValue(JsonParser,JavaType,JsonDeserializer,Object).p","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.readRootValue(JsonParser,JavaType,JsonDeserializer,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.readRootValue(JsonParser,JavaType,JsonDeserializer,Object).valueType","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.readRootValue(JsonParser,JavaType,JsonDeserializer,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.readRootValue(JsonParser,JavaType,JsonDeserializer,Object).deser","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.readRootValue(JsonParser,JavaType,JsonDeserializer,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.readRootValue(JsonParser,JavaType,JsonDeserializer,Object).valueToUpdate","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.readRootValue(JsonParser,JavaType,JsonDeserializer,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.extractScalarFromObject(JsonParser,JsonDeserializer,Class)","Method","to ""extract"" scalar value (CDATA), after the fact","// since 2.12
@Override
public String extractScalarFromObject(JsonParser p, JsonDeserializer<?> deser, Class<?> scalarType) throws IOException {
    // Only called on START_OBJECT, should not need to check, but JsonParser we
    // get may or may not be `FromXmlParser` so traverse using regular means
    String text = """";
    while (p.nextToken() == JsonToken.FIELD_NAME) {
        // Couple of ways to find ""real"" textual content. One is to look for
        // ""XmlText""... but for that would need to know configuration. Alternatively
        // could hold on to last text seen -- but this might be last attribute, for
        // empty element. So for now let's simply hard-code check for empty String
        // as marker and hope for best
        final String propName = p.currentName();
        JsonToken t = p.nextToken();
        if (t == JsonToken.VALUE_STRING) {
            if (propName.equals("""")) {
                text = p.getText();
            }
        } else {
            p.skipChildren();
        }
    }
    return text;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.extractScalarFromObject(JsonParser,JsonDeserializer,Class).p","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.extractScalarFromObject(JsonParser,JsonDeserializer,Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.extractScalarFromObject(JsonParser,JsonDeserializer,Class).deser","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.extractScalarFromObject(JsonParser,JsonDeserializer,Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.extractScalarFromObject(JsonParser,JsonDeserializer,Class).scalarType","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.extractScalarFromObject(JsonParser,JsonDeserializer,Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(DeserializerFactory)","Constructor","* Default constructor for a blueprint object, which will use the standard
     * {@link DeserializerCache}, given factory.","public XmlDeserializationContext(DeserializerFactory df) {
    // 04-Sep-2023, tatu: Not ideal (wrt not going via CacheProvider) but
    //     has to do for backwards compatibility:
    super(df, new DeserializerCache());
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(DeserializerFactory).df","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(DeserializerFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,DeserializationConfig,JsonParser,InjectableValues)","Constructor","No Comment","private XmlDeserializationContext(XmlDeserializationContext src, DeserializationConfig config, JsonParser p, InjectableValues values) {
    super(src, config, p, values);
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,DeserializationConfig,JsonParser,InjectableValues).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,DeserializationConfig,JsonParser,InjectableValues)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,DeserializationConfig,JsonParser,InjectableValues).config","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,DeserializationConfig,JsonParser,InjectableValues)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,DeserializationConfig,JsonParser,InjectableValues).p","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,DeserializationConfig,JsonParser,InjectableValues)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,DeserializationConfig,JsonParser,InjectableValues).values","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,DeserializationConfig,JsonParser,InjectableValues)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext)","Constructor","No Comment","private XmlDeserializationContext(XmlDeserializationContext src) {
    super(src);
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,DeserializerFactory)","Constructor","No Comment","private XmlDeserializationContext(XmlDeserializationContext src, DeserializerFactory factory) {
    super(src, factory);
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,DeserializerFactory).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,DeserializerFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,DeserializerFactory).factory","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,DeserializerFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,DeserializationConfig)","Constructor","No Comment","private XmlDeserializationContext(XmlDeserializationContext src, DeserializationConfig config) {
    super(src, config);
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,DeserializationConfig).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,DeserializationConfig)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,DeserializationConfig).config","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,DeserializationConfig)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,CacheProvider)","Constructor","@since 2.16","private XmlDeserializationContext(XmlDeserializationContext src, CacheProvider cp) {
    super(src, cp);
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,CacheProvider).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,CacheProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,CacheProvider).cp","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.<init>(XmlDeserializationContext,CacheProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer","Class","* Delegating deserializer whose only function is to handle case of
 * ""unwrapped"" List/array deserialization from XML.","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.databind.deser.std.DelegatingDeserializer",""
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._namesToWrap","Field","* (Simple) Names of properties, for which virtual wrapping is needed
     * to compensate: these are so-called 'unwrapped' XML lists where property
     * name is used for elements, and not as List markers.","protected final Set<String> _namesToWrap;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._type","Field","No Comment","protected final JavaType _type;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._caseInsensitive","Field","@since 2.12","protected final boolean _caseInsensitive;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.newDelegatingInstance(JsonDeserializer)","Method","No Comment","@Override
protected JsonDeserializer<?> newDelegatingInstance(JsonDeserializer<?> newDelegatee0) {
    // default not enough, as we may need to create a new wrapping deserializer
    // even if delegatee does not change
    throw new IllegalStateException(""Internal error: should never get called"");
}","JsonDeserializer","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.newDelegatingInstance(JsonDeserializer).newDelegatee0","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.newDelegatingInstance(JsonDeserializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(DeserializationContext,BeanProperty)","Method","No Comment","@Override
public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {
    JavaType vt = _type;
    if (vt == null) {
        vt = ctxt.constructType(_delegatee.handledType());
    }
    JsonDeserializer<?> del = ctxt.handleSecondaryContextualization(_delegatee, property, vt);
    BeanDeserializerBase newDelegatee = _verifyDeserType(del);
    // Let's go through the properties now...
    Iterator<SettableBeanProperty> it = newDelegatee.properties();
    HashSet<String> unwrappedNames = null;
    while (it.hasNext()) {
        SettableBeanProperty prop = it.next();
        // First things first: only consider array/Collection types
        // (not perfect check, but simplest reasonable check)
        JavaType type = prop.getType();
        if (!TypeUtil.isIndexedType(type)) {
            continue;
        }
        PropertyName wrapperName = prop.getWrapperName();
        // skip anything with wrapper (should work as is)
        if ((wrapperName != null) && (wrapperName != PropertyName.NO_NAME)) {
            continue;
        }
        if (unwrappedNames == null) {
            unwrappedNames = new HashSet<String>();
        }
        // not optimal; should be able to use PropertyName...
        unwrappedNames.add(prop.getName());
        for (PropertyName alias : prop.findAliases(ctxt.getConfig())) {
            unwrappedNames.add(alias.getSimpleName());
        }
    }
    // Ok: if nothing to take care of, just return the delegatee...
    if (unwrappedNames == null) {
        return newDelegatee;
    }
    // Otherwise, create the thing that can deal with virtual wrapping
    return new WrapperHandlingDeserializer(newDelegatee, unwrappedNames);
}","JsonDeserializer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(DeserializationContext,BeanProperty).ctxt","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(DeserializationContext,BeanProperty)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(DeserializationContext,BeanProperty).property","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.createContextual(DeserializationContext,BeanProperty)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(JsonParser,DeserializationContext)","Method","No Comment","@Override
public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
    _configureParser(p);
    return _delegatee.deserialize(p, ctxt);
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(JsonParser,DeserializationContext).p","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(JsonParser,DeserializationContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(JsonParser,DeserializationContext).ctxt","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(JsonParser,DeserializationContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(JsonParser,DeserializationContext,Object)","Method","No Comment","@SuppressWarnings(""unchecked"")
@Override
public Object deserialize(JsonParser p, DeserializationContext ctxt, Object intoValue) throws IOException {
    _configureParser(p);
    return ((JsonDeserializer<Object>) _delegatee).deserialize(p, ctxt, intoValue);
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(JsonParser,DeserializationContext,Object).p","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(JsonParser,DeserializationContext,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(JsonParser,DeserializationContext,Object).ctxt","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(JsonParser,DeserializationContext,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(JsonParser,DeserializationContext,Object).intoValue","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserialize(JsonParser,DeserializationContext,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer)","Method","No Comment","@Override
public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {
    _configureParser(p);
    return _delegatee.deserializeWithType(p, ctxt, typeDeserializer);
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer).p","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer).ctxt","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer).typeDeserializer","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._configureParser(JsonParser)","Method","No Comment","@SuppressWarnings(""resource"")
protected final void _configureParser(JsonParser p) throws IOException {
    // 05-Sep-2019, tatu: May get XML parser, except for case where content is
    //   buffered. In that case we may still have access to real parser if we
    //   are lucky (like in [dataformat-xml#242])
    while (p instanceof JsonParserDelegate) {
        p = ((JsonParserDelegate) p).delegate();
    }
    if ((p instanceof ElementWrappable) && (_namesToWrap != null)) {
        // 03-May-2021, tatu: as per [dataformat-xml#469] there are special
        //   cases where we get String token to represent XML empty element.
        //   If so, need to refrain from adding wrapping as that would
        //   override parent settings
        JsonToken t = p.currentToken();
        if (t == JsonToken.START_OBJECT || t == JsonToken.START_ARRAY || // 12-Dec-2021, tatu: [dataformat-xml#490] There seems to be
        //    cases here (similar to regular JSON) where leading START_OBJECT
        //    is consumed during buffering, so need to consider that too
        //    it seems (just hope we are at correct level and not off by one...)
        t == JsonToken.FIELD_NAME) {
            ((ElementWrappable) p).addVirtualWrapping(_namesToWrap, _caseInsensitive);
        }
    }
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._configureParser(JsonParser).p","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._configureParser(JsonParser)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._verifyDeserType(JsonDeserializer)","Method","No Comment","protected BeanDeserializerBase _verifyDeserType(JsonDeserializer<?> deser) {
    if (!(deser instanceof BeanDeserializerBase)) {
        throw new IllegalArgumentException(""Can not change delegate to be of type "" + deser.getClass().getName());
    }
    return (BeanDeserializerBase) deser;
}","BeanDeserializerBase","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._verifyDeserType(JsonDeserializer).deser","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer._verifyDeserType(JsonDeserializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.<init>(BeanDeserializerBase)","Constructor","No Comment","public WrapperHandlingDeserializer(BeanDeserializerBase delegate) {
    this(delegate, null);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.<init>(BeanDeserializerBase).delegate","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.<init>(BeanDeserializerBase)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.<init>(BeanDeserializerBase,Set)","Constructor","No Comment","public WrapperHandlingDeserializer(BeanDeserializerBase delegate, Set<String> namesToWrap) {
    super(delegate);
    _namesToWrap = namesToWrap;
    _type = delegate.getValueType();
    _caseInsensitive = delegate.isCaseInsensitive();
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.<init>(BeanDeserializerBase,Set).delegate","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.<init>(BeanDeserializerBase,Set)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.<init>(BeanDeserializerBase,Set).namesToWrap","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.deser.WrapperHandlingDeserializer.<init>(BeanDeserializerBase,Set)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder","Class","* Sub-class of {@code StdTypeResolverBuilder} specifically used with
 * Default Typing.
 *<p>
 * Composition/sub-classing gets quite tricky here: ideally we would just
 * extend {@link XmlTypeResolverBuilder} but unfortunately inheritance hierarchy
 * does not allow this.
 *
 * @since 2.10","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder","java.io.Serializable"
"com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.init(JsonTypeInfo.Id,TypeIdResolver)","Method","No Comment","@Override
public StdTypeResolverBuilder init(JsonTypeInfo.Id idType, TypeIdResolver idRes) {
    super.init(idType, idRes);
    if (_typeProperty != null) {
        _typeProperty = StaxUtil.sanitizeXmlTypeName(_typeProperty);
    }
    return this;
}","StdTypeResolverBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.init(JsonTypeInfo.Id,TypeIdResolver).idType","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.init(JsonTypeInfo.Id,TypeIdResolver)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.init(JsonTypeInfo.Id,TypeIdResolver).idRes","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.init(JsonTypeInfo.Id,TypeIdResolver)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.typeProperty(String)","Method","No Comment","@Override
public StdTypeResolverBuilder typeProperty(String typeIdPropName) {
    // ok to have null/empty; will restore to use defaults
    if (typeIdPropName == null || typeIdPropName.length() == 0) {
        typeIdPropName = _idType.getDefaultPropertyName();
    }
    _typeProperty = StaxUtil.sanitizeXmlTypeName(typeIdPropName);
    return this;
}","StdTypeResolverBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.typeProperty(String).typeIdPropName","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.typeProperty(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean)","Method","No Comment","@Override
protected TypeIdResolver idResolver(MapperConfig<?> config, JavaType baseType, PolymorphicTypeValidator subtypeValidator, Collection<NamedType> subtypes, boolean forSer, boolean forDeser) {
    if (_customIdResolver != null) {
        return _customIdResolver;
    }
    // Only override handlers of class, minimal class; name is good as is
    switch(_idType) {
        case CLASS:
            return new XmlTypeResolverBuilder.XmlClassNameIdResolver(baseType, config.getTypeFactory(), subTypeValidator(config));
        case MINIMAL_CLASS:
            return new XmlTypeResolverBuilder.XmlMinimalClassNameIdResolver(baseType, config.getTypeFactory(), subTypeValidator(config));
        default:
    }
    return super.idResolver(config, baseType, subtypeValidator, subtypes, forSer, forDeser);
}","TypeIdResolver","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean).baseType","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean).subtypeValidator","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean).subtypes","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean).forSer","Parameter_5","Belong to com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean).forDeser","Parameter_6","Belong to com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.idResolver(MapperConfig,JavaType,PolymorphicTypeValidator,Collection,boolean,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.<init>(DefaultTyping,PolymorphicTypeValidator)","Constructor","No Comment","public DefaultingXmlTypeResolverBuilder(DefaultTyping t, PolymorphicTypeValidator ptv) {
    super(t, ptv);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.<init>(DefaultTyping,PolymorphicTypeValidator).t","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.<init>(DefaultTyping,PolymorphicTypeValidator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.<init>(DefaultTyping,PolymorphicTypeValidator).ptv","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.DefaultingXmlTypeResolverBuilder.<init>(DefaultTyping,PolymorphicTypeValidator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.PackageVersion","Class","* Automatically generated from PackageVersion.java.in during
 * packageVersion-generate execution of maven-replacer-plugin in
 * pom.xml.","Class do not obtain Source Code","No return type","public , final ","","com.fasterxml.jackson.core.Versioned"
"com.fasterxml.jackson.dataformat.xml.PackageVersion.VERSION","Field","No Comment","public final static Version VERSION = VersionUtil.parseVersion(""2.19.0-SNAPSHOT"", ""com.fasterxml.jackson.dataformat"", ""jackson-dataformat-xml"");","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.PackageVersion.version()","Method","No Comment","@Override
public Version version() {
    return VERSION;
}","Version","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector","Class","* Alternative {@link com.fasterxml.jackson.databind.AnnotationIntrospector}
 * implementation that
 * that USED TO build on {@code JaxbAnnotationIntrospector} from
 * {@code jackson-module-jaxb-annotatins} package.
 * But as of Jackson 2.13, SHOULD NOT BE USED as it DOES NOT WORK.
 * Removal was necessary because XML format package does not (and can not)
 * depend on JAXB annotations.
 * Class WILL BE REMOVED from Jackson 2.14 or later on.
 *<p>
 *
 * @deprecated Since 2.12 (as per above notes): broken since 2.13","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector","com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector"
"com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.serialVersionUID","Field","since 2.7","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.findNamespace(MapperConfig,Annotated)","Method","No Comment","@Override
public String findNamespace(MapperConfig<?> config, Annotated ann) {
    return null;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.findNamespace(MapperConfig,Annotated).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.findNamespace(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.findNamespace(MapperConfig,Annotated).ann","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.findNamespace(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsAttribute(MapperConfig,Annotated)","Method","No Comment","@Override
public Boolean isOutputAsAttribute(MapperConfig<?> config, Annotated ann) {
    return null;
}","Boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsAttribute(MapperConfig,Annotated).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsAttribute(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsAttribute(MapperConfig,Annotated).ann","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsAttribute(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsText(MapperConfig,Annotated)","Method","No Comment","@Override
public Boolean isOutputAsText(MapperConfig<?> config, Annotated ann) {
    return null;
}","Boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsText(MapperConfig,Annotated).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsText(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsText(MapperConfig,Annotated).ann","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsText(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsCData(MapperConfig,Annotated)","Method","No Comment","@Override
public Boolean isOutputAsCData(MapperConfig<?> config, Annotated ann) {
    return null;
}","Boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsCData(MapperConfig,Annotated).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsCData(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsCData(MapperConfig,Annotated).ann","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.isOutputAsCData(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.<init>()","Constructor","No Comment","@Deprecated
public XmlJaxbAnnotationIntrospector() {
    super();
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.<init>(TypeFactory)","Constructor","No Comment","public XmlJaxbAnnotationIntrospector(TypeFactory typeFactory) {
    super();
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.<init>(TypeFactory).typeFactory","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector.<init>(TypeFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlModule","Class","* Module that implements most functionality needed to support producing and
 * consuming XML instead of JSON, used by {@link XmlMapper} for registering
 * handlers for XML-specific processing.
 *<p>
 * NOTE: please do NOT register this directly on {@link XmlMapper}: mapper
 * registers an instance (either one explicitly given in constructor, or, if none,
 * one it configures) and attempts to re-register is unlikely to work as
 * you'd expect.","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.databind.module.SimpleModule","java.io.Serializable"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._cfgDefaultUseWrapper","Field","* Determination of whether indexed properties (arrays, Lists) that are not explicitly
     * annotated (with {@link com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper}
     * or equivalent) should default to using implicit wrapper (with same name as property) or not.
     * If enabled, wrapping is used by default; if false, it is not.
     *<p>
     * Note that JAXB annotation introspector always assumes ""do not wrap by default"".
     * Jackson annotations have different default due to backwards compatibility.
     * 
     * @since 2.1","protected boolean _cfgDefaultUseWrapper = JacksonXmlAnnotationIntrospector.DEFAULT_USE_WRAPPER;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._cfgNameForTextElement","Field","* Name used for pseudo-property used for returning XML Text value (which does
     * not have actual element name to use). Defaults to empty String, but
     * may be changed for inter-operability reasons: JAXB, for example, uses
     * ""value"" as name.
     * 
     * @since 2.1","protected String _cfgNameForTextElement = FromXmlParser.DEFAULT_UNNAMED_TEXT_PROPERTY;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._serializerFactoryOverride","Field","* Optional override for {@link SerializerFactory}
     * used by {@link XmlMapper}. Needed to allow proper override and configurability
     * using custom {@SerializerFactory} implementations.
     * 
     * @since 2.18.2","protected SerializerFactory _serializerFactoryOverride;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(SetupContext)","Method","No Comment","@SuppressWarnings(""deprecation"")
@Override
public void setupModule(SetupContext context) {
    // Need to modify BeanDeserializer, BeanSerializer that are used
    context.addBeanSerializerModifier(new XmlBeanSerializerModifier());
    context.addBeanDeserializerModifier(new XmlBeanDeserializerModifier(_cfgNameForTextElement));
    // as well as AnnotationIntrospector
    context.insertAnnotationIntrospector(_constructIntrospector());
    // and finally inform XmlFactory about overrides, if need be:
    if (_cfgNameForTextElement != FromXmlParser.DEFAULT_UNNAMED_TEXT_PROPERTY) {
        XmlMapper m = (XmlMapper) context.getOwner();
        m.setXMLTextElementName(_cfgNameForTextElement);
    }
    // Usually this would be the first call; but here anything added will
    // be stuff user may has added, so do it afterwards instead.
    super.setupModule(context);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(SetupContext).context","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setupModule(SetupContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setDefaultUseWrapper(boolean)","Method","* Method that can be used to define whether {@link AnnotationIntrospector}
     * we register will use wrapper for indexed (List, array) properties or not,
     * if there are no explicit annotations.
     * See {@link com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper}
     * for details.
     *<p>
     * Note that method MUST be called before registering the module; otherwise change
     * will not have any effect.
     * 
     * @param state Whether to enable or disable ""use wrapper for non-annotated List properties""
     * 
     * @since 2.1","public void setDefaultUseWrapper(boolean state) {
    _cfgDefaultUseWrapper = state;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setDefaultUseWrapper(boolean).state","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setDefaultUseWrapper(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setXMLTextElementName(String)","Method","* Method that can be used to define alternate ""virtual name"" to use
     * for XML CDATA segments; that is, text values. Default name is empty String
     * (""""); but some frameworks use other names: JAXB, for example, uses
     * ""value"".
     *<p>
     * Note that method MUST be called before registering the module; otherwise change
     * will not have any effect.
     * 
     * @param name Virtual name to use when exposing XML character data sections
     * 
     * @since 2.1","public void setXMLTextElementName(String name) {
    _cfgNameForTextElement = name;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setXMLTextElementName(String).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.setXMLTextElementName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.overrideSerializerFactory(SerializerFactory)","Method","* Method to use for overriding default {@link SerializerFactory} used
     *
     * @since 2.18.2","public JacksonXmlModule overrideSerializerFactory(SerializerFactory factory) {
    _serializerFactoryOverride = factory;
    return this;
}","JacksonXmlModule","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.overrideSerializerFactory(SerializerFactory).factory","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.overrideSerializerFactory(SerializerFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.serializerFactoryOverride()","Method","* @since 2.18.2","public SerializerFactory serializerFactoryOverride() {
    return _serializerFactoryOverride;
}","SerializerFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlModule._constructIntrospector()","Method","No Comment","protected AnnotationIntrospector _constructIntrospector() {
    return new JacksonXmlAnnotationIntrospector(_cfgDefaultUseWrapper);
}","AnnotationIntrospector","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlModule.<init>()","Constructor","No Comment","public JacksonXmlModule() {
    super(""JacksonXmlModule"", PackageVersion.VERSION);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector","Class","* Extension of {@link JacksonAnnotationIntrospector} that is needed to support
 * additional xml-specific annotation that Jackson provides. Note, however, that
 * there is no JAXB annotation support here; that is provided with
 * separate introspector (see
 * https://github.com/FasterXML/jackson-modules-base/tree/master/jaxb,
 * class {@code com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector}).","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector","com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.ANNOTATIONS_TO_INFER_XML_PROP","Field","@since 2.11.1","@SuppressWarnings(""unchecked"")
private final static Class<? extends Annotation>[] ANNOTATIONS_TO_INFER_XML_PROP = (Class<? extends Annotation>[]) new Class<?>[] { JacksonXmlText.class, JacksonXmlElementWrapper.class };","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.DEFAULT_USE_WRAPPER","Field","* For backwards compatibility with 2.0, the default behavior is
     * to assume use of List wrapper if no annotations are used.","public final static boolean DEFAULT_USE_WRAPPER = true;","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._cfgDefaultUseWrapper","Field","non-final from 2.7 on, to allow mapper to change","protected boolean _cfgDefaultUseWrapper;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.setDefaultUseWrapper(boolean)","Method","No Comment","public void setDefaultUseWrapper(boolean b) {
    _cfgDefaultUseWrapper = b;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.setDefaultUseWrapper(boolean).b","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.setDefaultUseWrapper(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findWrapperName(Annotated)","Method","No Comment","@Override
public PropertyName findWrapperName(Annotated ann) {
    JacksonXmlElementWrapper w = _findAnnotation(ann, JacksonXmlElementWrapper.class);
    if (w != null) {
        // Special case: wrapping explicitly blocked?
        if (!w.useWrapping()) {
            return PropertyName.NO_NAME;
        }
        // also: need to ensure we use marker:
        String localName = w.localName();
        if (localName == null || localName.length() == 0) {
            return PropertyName.USE_DEFAULT;
        }
        return PropertyName.construct(w.localName(), w.namespace());
    }
    // 09-Sep-2012, tatu: In absence of configuration we need to use our
    //   default settings...
    if (_cfgDefaultUseWrapper) {
        return PropertyName.USE_DEFAULT;
    }
    return null;
}","PropertyName","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findWrapperName(Annotated).ann","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findWrapperName(Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findRootName(AnnotatedClass)","Method","No Comment","@Override
public PropertyName findRootName(AnnotatedClass ac) {
    JacksonXmlRootElement root = _findAnnotation(ac, JacksonXmlRootElement.class);
    if (root != null) {
        String local = root.localName();
        String ns = root.namespace();
        if (local.length() == 0 && ns.length() == 0) {
            return PropertyName.USE_DEFAULT;
        }
        return new PropertyName(local, ns);
    }
    return super.findRootName(ac);
}","PropertyName","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findRootName(AnnotatedClass).ac","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findRootName(AnnotatedClass)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNamespace(MapperConfig,Annotated)","Method","No Comment","@Override
public String findNamespace(MapperConfig<?> config, Annotated ann) {
    String ns1 = null;
    JacksonXmlProperty xmlProp = _findAnnotation(ann, JacksonXmlProperty.class);
    if (xmlProp != null) {
        ns1 = xmlProp.namespace();
    }
    // 14-Nov-2020, tatu: 2.12 adds namespace for this too
    JsonProperty jprop = _findAnnotation(ann, JsonProperty.class);
    String ns2 = null;
    if (jprop != null) {
        ns2 = jprop.namespace();
    }
    if (ns1 == null) {
        return ns2;
    }
    if (ns2 == null) {
        return ns1;
    }
    if (ns1.isEmpty()) {
        return ns2;
    }
    return ns1;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNamespace(MapperConfig,Annotated).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNamespace(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNamespace(MapperConfig,Annotated).ann","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNamespace(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findAndAddVirtualProperties(MapperConfig,AnnotatedClass,List)","Method","* Due to issue [dataformat-xml#578] need to suppress calls to this method
     * to avoid duplicate virtual properties from being added. Not elegant
     * but .. works.
     *
     * @since 2.15","@Override
public void findAndAddVirtualProperties(MapperConfig<?> config, AnnotatedClass ac, List<BeanPropertyWriter> properties) {
    return;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findAndAddVirtualProperties(MapperConfig,AnnotatedClass,List).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findAndAddVirtualProperties(MapperConfig,AnnotatedClass,List)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findAndAddVirtualProperties(MapperConfig,AnnotatedClass,List).ac","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findAndAddVirtualProperties(MapperConfig,AnnotatedClass,List)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findAndAddVirtualProperties(MapperConfig,AnnotatedClass,List).properties","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findAndAddVirtualProperties(MapperConfig,AnnotatedClass,List)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsAttribute(MapperConfig,Annotated)","Method","No Comment","@Override
public Boolean isOutputAsAttribute(MapperConfig<?> config, Annotated ann) {
    JacksonXmlProperty prop = _findAnnotation(ann, JacksonXmlProperty.class);
    if (prop != null) {
        return prop.isAttribute() ? Boolean.TRUE : Boolean.FALSE;
    }
    return null;
}","Boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsAttribute(MapperConfig,Annotated).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsAttribute(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsAttribute(MapperConfig,Annotated).ann","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsAttribute(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsText(MapperConfig,Annotated)","Method","No Comment","@Override
public Boolean isOutputAsText(MapperConfig<?> config, Annotated ann) {
    JacksonXmlText prop = _findAnnotation(ann, JacksonXmlText.class);
    if (prop != null) {
        return prop.value() ? Boolean.TRUE : Boolean.FALSE;
    }
    return null;
}","Boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsText(MapperConfig,Annotated).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsText(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsText(MapperConfig,Annotated).ann","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsText(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsCData(MapperConfig,Annotated)","Method","No Comment","@Override
public Boolean isOutputAsCData(MapperConfig<?> config, Annotated ann) {
    JacksonXmlCData prop = ann.getAnnotation(JacksonXmlCData.class);
    if (prop != null) {
        return prop.value() ? Boolean.TRUE : Boolean.FALSE;
    }
    return null;
}","Boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsCData(MapperConfig,Annotated).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsCData(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsCData(MapperConfig,Annotated).ann","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.isOutputAsCData(MapperConfig,Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForSerialization(Annotated)","Method","No Comment","@Override
public PropertyName findNameForSerialization(Annotated a) {
    PropertyName pn = PropertyName.merge(_findXmlName(a), super.findNameForSerialization(a));
    if (pn == null) {
        if (_hasOneOf(a, ANNOTATIONS_TO_INFER_XML_PROP)) {
            return PropertyName.USE_DEFAULT;
        }
    }
    return pn;
}","PropertyName","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForSerialization(Annotated).a","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForSerialization(Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForDeserialization(Annotated)","Method","No Comment","@Override
public PropertyName findNameForDeserialization(Annotated a) {
    PropertyName pn = PropertyName.merge(_findXmlName(a), super.findNameForDeserialization(a));
    if (pn == null) {
        if (_hasOneOf(a, ANNOTATIONS_TO_INFER_XML_PROP)) {
            return PropertyName.USE_DEFAULT;
        }
    }
    return pn;
}","PropertyName","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForDeserialization(Annotated).a","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.findNameForDeserialization(Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._constructStdTypeResolverBuilder()","Method","* We will override this method so that we can return instance
     * that cleans up type id property name to be a valid xml name.","@Override
protected StdTypeResolverBuilder _constructStdTypeResolverBuilder() {
    return new XmlTypeResolverBuilder();
}","StdTypeResolverBuilder","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._constructStdTypeResolverBuilder(MapperConfig,JsonTypeInfo.Value,JavaType)","Method","No Comment","@Override
protected TypeResolverBuilder<?> _constructStdTypeResolverBuilder(MapperConfig<?> config, JsonTypeInfo.Value typeInfo, JavaType baseType) {
    return new XmlTypeResolverBuilder(typeInfo);
}","TypeResolverBuilder","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._constructStdTypeResolverBuilder(MapperConfig,JsonTypeInfo.Value,JavaType).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._constructStdTypeResolverBuilder(MapperConfig,JsonTypeInfo.Value,JavaType)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._constructStdTypeResolverBuilder(MapperConfig,JsonTypeInfo.Value,JavaType).typeInfo","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._constructStdTypeResolverBuilder(MapperConfig,JsonTypeInfo.Value,JavaType)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._constructStdTypeResolverBuilder(MapperConfig,JsonTypeInfo.Value,JavaType).baseType","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._constructStdTypeResolverBuilder(MapperConfig,JsonTypeInfo.Value,JavaType)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._findXmlName(Annotated)","Method","No Comment","protected PropertyName _findXmlName(Annotated a) {
    JacksonXmlProperty pann = _findAnnotation(a, JacksonXmlProperty.class);
    if (pann != null) {
        return PropertyName.construct(pann.localName(), pann.namespace());
    }
    return null;
}","PropertyName","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._findXmlName(Annotated).a","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector._findXmlName(Annotated)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.<init>()","Constructor","No Comment","public JacksonXmlAnnotationIntrospector() {
    this(DEFAULT_USE_WRAPPER);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.<init>(boolean)","Constructor","No Comment","public JacksonXmlAnnotationIntrospector(boolean defaultUseWrapper) {
    _cfgDefaultUseWrapper = defaultUseWrapper;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.<init>(boolean).defaultUseWrapper","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.JacksonXmlAnnotationIntrospector.<init>(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors","Class","* Contains default {@link XmlNameProcessor} implementations.
 * <p>
 * Processors should be set in the {@link XmlMapper#setXmlNameProcessor(XmlNameProcessor)}
 * and/or the {@link XmlMapper.Builder#xmlNameProcessor(XmlNameProcessor)} methods.
 *
 * @since 2.14","Class do not obtain Source Code","No return type","public , final ","",""
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.newPassthroughProcessor()","Method","* Generates a new processor that does nothing and just passes through the
     * names as-is. Using this processor may generate invalid XML.
     * <p>
     * With this processor set, a map with the keys {@code ""123""} and
     * {@code ""$ I am <fancy>! &;""} will be written as:
     *
     * <pre>{@code
     * <DTO>
     *     <badMap>
     *         <$ I am <fancy>! &;>xyz</$ I am <fancy>! &;>
     *         <123>bar</123>
     *     </badMap>
     * </DTO>
     * }</pre>
     * <p>
     * This is the default behavior for backwards compatibility.
     *
     * @since 2.14","public static XmlNameProcessor newPassthroughProcessor() {
    return new PassthroughProcessor();
}","XmlNameProcessor","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.newReplacementProcessor(String)","Method","* Generates a new processor that replaces all characters that are NOT one of:
     *<ul>
     * <li>Lower- or upper-case ASCII letter (a to z, A to Z)
     *   </li>
     * <li>Digit (0 to 9) in position OTHER than the first character
     *   </li>
     * <li>Underscore
     *   </li>
     * <li>Hyphen ({@code -}) in position OTHER than the first character
     *   </li>
     * <li>Colon (only  exposed if underlying parser is in non-namespace-aware mode)
     *   </li>
     * </ul>
     * in an
     * XML name with a replacement string. This is a one-way processor, since
     * there is no way to reverse this replacement step.
     * <p>
     * With this processor set (and {@code ""_""} as the replacement string), a map
     * with the keys {@code ""123""} and {@code ""$ I am <fancy>! &;""} will be written as:
     * <p>
     * NOTE: this processor works for US-ASCII based element and attribute names
     * but is unlikely to work well for many ""international"" use cases.
     *
     * <pre>{@code
     * <DTO>
     *     <badMap>
     *         <__I_am__fancy_____>xyz</__I_am__fancy_____>
     *         <_23>bar</_23>
     *     </badMap>
     * </DTO>
     * }</pre>
     *
     * @param replacement The replacement string to replace invalid characters with
     *
     * @since 2.14","public static XmlNameProcessor newReplacementProcessor(String replacement) {
    return new ReplaceNameProcessor(replacement);
}","XmlNameProcessor","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.newReplacementProcessor(String).replacement","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.newReplacementProcessor(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.newReplacementProcessor()","Method","* Convenience method 
     * equivalent to calling {@link #newReplacementProcessor(String)} with {@code ""_""}
     *
     * @since 2.14","public static XmlNameProcessor newReplacementProcessor() {
    return newReplacementProcessor(""_"");
}","XmlNameProcessor","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.newBase64Processor(String)","Method","* Generates a new processor that escapes all names that contains characters
     * OTHER than following characters:
     *<ul>
     * <li>Lower- or upper-case ASCII letter (a to z, A to Z)
     *   </li>
     * <li>Digit (0 to 9) in position OTHER than the first characters
     *   </li>
     * <li>Underscore
     *   </li>
     * <li>Hyphen ({@code -}) in position OTHER than the first character
     *   </li>
     * <li>Colon (only  exposed if underlying parser is in non-namespace-aware mode)
     *   </li>
     * </ul>
     * with a base64-encoded version. Here the
     * <a href=""https://datatracker.ietf.org/doc/html/rfc4648#section-5"">base64url</a>
     * encoder and decoders are used. The {@code =} padding characters are
     * always omitted.
     * <p>
     * With this processor set, a map with the keys {@code ""123""} and
     * {@code ""$ I am <fancy>! &;""} will be written as:
     *
     * <pre>{@code
     * <DTO>
     *     <badMap>
     *         <base64_tag_JCBJIGFtIDxmYW5jeT4hICY7>xyz</base64_tag_JCBJIGFtIDxmYW5jeT4hICY7>
     *         <base64_tag_MTIz>bar</base64_tag_MTIz>
     *     </badMap>
     * </DTO>
     * }</pre>
     *<p>
     * NOTE: you must ensure that no incoming element or attribute name starts
     * with {@code prefix}, otherwise decoding will not work.
     *
     * @param prefix The prefix to use for name that are escaped
     *
     * @since 2.14","public static XmlNameProcessor newBase64Processor(String prefix) {
    return new Base64NameProcessor(prefix);
}","XmlNameProcessor","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.newBase64Processor(String).prefix","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.newBase64Processor(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.newBase64Processor()","Method","* Convenience method
     * equivalent to calling {@link #newBase64Processor(String)} with {@code ""base64_tag_""}
     *
     * @since 2.14","public static XmlNameProcessor newBase64Processor() {
    return newBase64Processor(""base64_tag_"");
}","XmlNameProcessor","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.newAlwaysOnBase64Processor()","Method","* Similar to {@link #newBase64Processor(String)}, however, names will
     * <b>always</b> be escaped with base64. No magic prefix is required
     * for this case, since adding one would be redundant because all names
     * will be base64 encoded.","public static XmlNameProcessor newAlwaysOnBase64Processor() {
    return new AlwaysOnBase64NameProcessor();
}","XmlNameProcessor","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.<init>()","Constructor","No Comment","private XmlNameProcessors() {
    // Nothing to do here; just to prevent instantiation
}","No return type","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$PassthroughProcessor","Class","No Comment","Class do not obtain Source Code","No return type","static ","","com.fasterxml.jackson.dataformat.xml.XmlNameProcessor"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$PassthroughProcessor.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$PassthroughProcessor.encodeName(XmlName)","Method","No Comment","@Override
public void encodeName(XmlName name) {
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$PassthroughProcessor.encodeName(XmlName).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$PassthroughProcessor.encodeName(XmlName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$PassthroughProcessor.decodeName(XmlName)","Method","No Comment","@Override
public void decodeName(XmlName name) {
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$PassthroughProcessor.decodeName(XmlName).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$PassthroughProcessor.decodeName(XmlName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$PassthroughProcessor.<init>()","Constructor","No Comment","public PassthroughProcessor() {
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$ReplaceNameProcessor","Class","No Comment","Class do not obtain Source Code","No return type","static ","","com.fasterxml.jackson.dataformat.xml.XmlNameProcessor"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$ReplaceNameProcessor.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$ReplaceNameProcessor.BEGIN_MATCHER","Field","No Comment","private static final Pattern BEGIN_MATCHER = Pattern.compile(""^[^a-zA-Z_:]"");","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$ReplaceNameProcessor.MAIN_MATCHER","Field","No Comment","private static final Pattern MAIN_MATCHER = Pattern.compile(""[^a-zA-Z0-9_:-]"");","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$ReplaceNameProcessor._replacement","Field","No Comment","private final String _replacement;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$ReplaceNameProcessor.encodeName(XmlName)","Method","No Comment","@Override
public void encodeName(XmlName name) {
    String newLocalPart = name.localPart;
    newLocalPart = BEGIN_MATCHER.matcher(newLocalPart).replaceAll(_replacement);
    name.localPart = MAIN_MATCHER.matcher(newLocalPart).replaceAll(_replacement);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$ReplaceNameProcessor.encodeName(XmlName).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$ReplaceNameProcessor.encodeName(XmlName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$ReplaceNameProcessor.decodeName(XmlName)","Method","No Comment","@Override
public void decodeName(XmlName name) {
    // One-way transformation; cannot decode
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$ReplaceNameProcessor.decodeName(XmlName).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$ReplaceNameProcessor.decodeName(XmlName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$ReplaceNameProcessor.<init>(String)","Constructor","No Comment","public ReplaceNameProcessor(String replacement) {
    _replacement = replacement;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$ReplaceNameProcessor.<init>(String).replacement","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$ReplaceNameProcessor.<init>(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor","Class","No Comment","Class do not obtain Source Code","No return type","static ","","com.fasterxml.jackson.dataformat.xml.XmlNameProcessor"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor.BASE64_DECODER","Field","No Comment","private static final Base64.Decoder BASE64_DECODER = Base64.getUrlDecoder();","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor.BASE64_ENCODER","Field","No Comment","private static final Base64.Encoder BASE64_ENCODER = Base64.getUrlEncoder().withoutPadding();","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor.VALID_XML_NAME","Field","No Comment","private static final Pattern VALID_XML_NAME = Pattern.compile(""[a-zA-Z_:]([a-zA-Z0-9_:.-])*"");","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor._prefix","Field","No Comment","private final String _prefix;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor.encodeName(XmlName)","Method","No Comment","@Override
public void encodeName(XmlName name) {
    if (!VALID_XML_NAME.matcher(name.localPart).matches()) {
        name.localPart = _prefix + new String(BASE64_ENCODER.encode(name.localPart.getBytes(UTF_8)), UTF_8);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor.encodeName(XmlName).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor.encodeName(XmlName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor.decodeName(XmlName)","Method","No Comment","@Override
public void decodeName(XmlName name) {
    if (name.localPart.startsWith(_prefix)) {
        String localName = name.localPart;
        localName = localName.substring(_prefix.length());
        name.localPart = new String(BASE64_DECODER.decode(localName), UTF_8);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor.decodeName(XmlName).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor.decodeName(XmlName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor.<init>(String)","Constructor","No Comment","public Base64NameProcessor(String prefix) {
    _prefix = prefix;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor.<init>(String).prefix","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$Base64NameProcessor.<init>(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$AlwaysOnBase64NameProcessor","Class","No Comment","Class do not obtain Source Code","No return type","static ","","com.fasterxml.jackson.dataformat.xml.XmlNameProcessor"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$AlwaysOnBase64NameProcessor.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$AlwaysOnBase64NameProcessor.BASE64_DECODER","Field","No Comment","private static final Base64.Decoder BASE64_DECODER = Base64.getUrlDecoder();","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$AlwaysOnBase64NameProcessor.BASE64_ENCODER","Field","No Comment","private static final Base64.Encoder BASE64_ENCODER = Base64.getUrlEncoder().withoutPadding();","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$AlwaysOnBase64NameProcessor.encodeName(XmlName)","Method","No Comment","@Override
public void encodeName(XmlName name) {
    name.localPart = new String(BASE64_ENCODER.encode(name.localPart.getBytes(UTF_8)), UTF_8);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$AlwaysOnBase64NameProcessor.encodeName(XmlName).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$AlwaysOnBase64NameProcessor.encodeName(XmlName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$AlwaysOnBase64NameProcessor.decodeName(XmlName)","Method","No Comment","@Override
public void decodeName(XmlName name) {
    name.localPart = new String(BASE64_DECODER.decode(name.localPart), UTF_8);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$AlwaysOnBase64NameProcessor.decodeName(XmlName).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$AlwaysOnBase64NameProcessor.decodeName(XmlName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors$AlwaysOnBase64NameProcessor.<init>()","Constructor","No Comment","public AlwaysOnBase64NameProcessor() {
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.PassthroughProcessor","Class","No Comment","Class do not obtain Source Code","No return type","static ","","com.fasterxml.jackson.dataformat.xml.XmlNameProcessor"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.PassthroughProcessor.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.PassthroughProcessor.encodeName(XmlName)","Method","No Comment","@Override
public void encodeName(XmlName name) {
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.PassthroughProcessor.encodeName(XmlName).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.PassthroughProcessor.encodeName(XmlName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.PassthroughProcessor.decodeName(XmlName)","Method","No Comment","@Override
public void decodeName(XmlName name) {
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.PassthroughProcessor.decodeName(XmlName).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.PassthroughProcessor.decodeName(XmlName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.PassthroughProcessor.<init>()","Constructor","No Comment","public PassthroughProcessor() {
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.ReplaceNameProcessor","Class","No Comment","Class do not obtain Source Code","No return type","static ","","com.fasterxml.jackson.dataformat.xml.XmlNameProcessor"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.ReplaceNameProcessor.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.ReplaceNameProcessor.BEGIN_MATCHER","Field","No Comment","private static final Pattern BEGIN_MATCHER = Pattern.compile(""^[^a-zA-Z_:]"");","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.ReplaceNameProcessor.MAIN_MATCHER","Field","No Comment","private static final Pattern MAIN_MATCHER = Pattern.compile(""[^a-zA-Z0-9_:-]"");","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.ReplaceNameProcessor._replacement","Field","No Comment","private final String _replacement;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.ReplaceNameProcessor.encodeName(XmlName)","Method","No Comment","@Override
public void encodeName(XmlName name) {
    String newLocalPart = name.localPart;
    newLocalPart = BEGIN_MATCHER.matcher(newLocalPart).replaceAll(_replacement);
    name.localPart = MAIN_MATCHER.matcher(newLocalPart).replaceAll(_replacement);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.ReplaceNameProcessor.encodeName(XmlName).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.ReplaceNameProcessor.encodeName(XmlName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.ReplaceNameProcessor.decodeName(XmlName)","Method","No Comment","@Override
public void decodeName(XmlName name) {
    // One-way transformation; cannot decode
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.ReplaceNameProcessor.decodeName(XmlName).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.ReplaceNameProcessor.decodeName(XmlName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.ReplaceNameProcessor.<init>(String)","Constructor","No Comment","public ReplaceNameProcessor(String replacement) {
    _replacement = replacement;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.ReplaceNameProcessor.<init>(String).replacement","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.ReplaceNameProcessor.<init>(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.Base64NameProcessor","Class","No Comment","Class do not obtain Source Code","No return type","static ","","com.fasterxml.jackson.dataformat.xml.XmlNameProcessor"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.Base64NameProcessor.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.Base64NameProcessor.BASE64_DECODER","Field","No Comment","private static final Base64.Decoder BASE64_DECODER = Base64.getUrlDecoder();","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.Base64NameProcessor.BASE64_ENCODER","Field","No Comment","private static final Base64.Encoder BASE64_ENCODER = Base64.getUrlEncoder().withoutPadding();","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.Base64NameProcessor.VALID_XML_NAME","Field","No Comment","private static final Pattern VALID_XML_NAME = Pattern.compile(""[a-zA-Z_:]([a-zA-Z0-9_:.-])*"");","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.Base64NameProcessor._prefix","Field","No Comment","private final String _prefix;","No return type","private , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.Base64NameProcessor.encodeName(XmlName)","Method","No Comment","@Override
public void encodeName(XmlName name) {
    if (!VALID_XML_NAME.matcher(name.localPart).matches()) {
        name.localPart = _prefix + new String(BASE64_ENCODER.encode(name.localPart.getBytes(UTF_8)), UTF_8);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.Base64NameProcessor.encodeName(XmlName).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.Base64NameProcessor.encodeName(XmlName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.Base64NameProcessor.decodeName(XmlName)","Method","No Comment","@Override
public void decodeName(XmlName name) {
    if (name.localPart.startsWith(_prefix)) {
        String localName = name.localPart;
        localName = localName.substring(_prefix.length());
        name.localPart = new String(BASE64_DECODER.decode(localName), UTF_8);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.Base64NameProcessor.decodeName(XmlName).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.Base64NameProcessor.decodeName(XmlName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.Base64NameProcessor.<init>(String)","Constructor","No Comment","public Base64NameProcessor(String prefix) {
    _prefix = prefix;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.Base64NameProcessor.<init>(String).prefix","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.Base64NameProcessor.<init>(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.AlwaysOnBase64NameProcessor","Class","No Comment","Class do not obtain Source Code","No return type","static ","","com.fasterxml.jackson.dataformat.xml.XmlNameProcessor"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.AlwaysOnBase64NameProcessor.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.AlwaysOnBase64NameProcessor.BASE64_DECODER","Field","No Comment","private static final Base64.Decoder BASE64_DECODER = Base64.getUrlDecoder();","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.AlwaysOnBase64NameProcessor.BASE64_ENCODER","Field","No Comment","private static final Base64.Encoder BASE64_ENCODER = Base64.getUrlEncoder().withoutPadding();","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.AlwaysOnBase64NameProcessor.encodeName(XmlName)","Method","No Comment","@Override
public void encodeName(XmlName name) {
    name.localPart = new String(BASE64_ENCODER.encode(name.localPart.getBytes(UTF_8)), UTF_8);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.AlwaysOnBase64NameProcessor.encodeName(XmlName).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.AlwaysOnBase64NameProcessor.encodeName(XmlName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.AlwaysOnBase64NameProcessor.decodeName(XmlName)","Method","No Comment","@Override
public void decodeName(XmlName name) {
    name.localPart = new String(BASE64_DECODER.decode(name.localPart), UTF_8);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.AlwaysOnBase64NameProcessor.decodeName(XmlName).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.AlwaysOnBase64NameProcessor.decodeName(XmlName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlNameProcessors.AlwaysOnBase64NameProcessor.<init>()","Constructor","No Comment","public AlwaysOnBase64NameProcessor() {
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory","Class","* Factory used for constructing {@link FromXmlParser} and {@link ToXmlGenerator}
* instances.
*<p>
* Implements {@link JsonFactory} since interface for constructing XML backed
* parsers and generators is quite similar to dealing with JSON.
* 
* @author Tatu Saloranta (tatu.saloranta@iki.fi)","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.JsonFactory",""
"com.fasterxml.jackson.dataformat.xml.XmlFactory.serialVersionUID","Field","2.6","private static final long serialVersionUID = 1;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.FORMAT_NAME_XML","Field","* Name used to identify XML format
     * (and returned by {@link #getFormatName()}","public final static String FORMAT_NAME_XML = ""XML"";","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.DEFAULT_XML_PARSER_FEATURE_FLAGS","Field","* Bitfield (set of flags) of all parser features that are enabled
     * by default.","final static int DEFAULT_XML_PARSER_FEATURE_FLAGS = FromXmlParser.Feature.collectDefaults();","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.DEFAULT_XML_GENERATOR_FEATURE_FLAGS","Field","* Bitfield (set of flags) of all generator features that are enabled
     * by default.","final static int DEFAULT_XML_GENERATOR_FEATURE_FLAGS = ToXmlGenerator.Feature.collectDefaults();","No return type","final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlParserFeatures","Field","No Comment","protected int _xmlParserFeatures;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlGeneratorFeatures","Field","No Comment","protected int _xmlGeneratorFeatures;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlInputFactory","Field","non-final for setters (why are they needed again?)","protected transient XMLInputFactory _xmlInputFactory;","No return type","protected , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._xmlOutputFactory","Field","No Comment","protected transient XMLOutputFactory _xmlOutputFactory;","No return type","protected , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._cfgNameForTextElement","Field","No Comment","protected String _cfgNameForTextElement;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._nameProcessor","Field","No Comment","protected XmlNameProcessor _nameProcessor;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._jdkXmlInFactory","Field","* Hiding place for JDK-serialization unthawed factories...","protected transient String _jdkXmlInFactory;","No return type","protected , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._jdkXmlOutFactory","Field","* Hiding place for JDK-serialization unthawed factories...","protected transient String _jdkXmlOutFactory;","No return type","protected , transient ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.UTF8_BOM_1","Field","No Comment","private final static byte UTF8_BOM_1 = (byte) 0xEF;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.UTF8_BOM_2","Field","No Comment","private final static byte UTF8_BOM_2 = (byte) 0xBB;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.UTF8_BOM_3","Field","No Comment","private final static byte UTF8_BOM_3 = (byte) 0xBF;","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_x","Field","No Comment","private final static byte BYTE_x = (byte) 'x';","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_m","Field","No Comment","private final static byte BYTE_m = (byte) 'm';","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_l","Field","No Comment","private final static byte BYTE_l = (byte) 'l';","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_D","Field","No Comment","private final static byte BYTE_D = (byte) 'D';","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_LT","Field","No Comment","private final static byte BYTE_LT = (byte) '<';","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_QMARK","Field","No Comment","private final static byte BYTE_QMARK = (byte) '?';","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_EXCL","Field","No Comment","private final static byte BYTE_EXCL = (byte) '!';","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.BYTE_HYPHEN","Field","No Comment","private final static byte BYTE_HYPHEN = (byte) '-';","No return type","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.builder()","Method","No Comment","public static XmlFactoryBuilder builder() {
    return new XmlFactoryBuilder();
}","XmlFactoryBuilder","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.rebuild()","Method","No Comment","@Override
public XmlFactoryBuilder rebuild() {
    return new XmlFactoryBuilder(this);
}","XmlFactoryBuilder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._initFactories(XMLInputFactory,XMLOutputFactory)","Method","No Comment","protected void _initFactories(XMLInputFactory xmlIn, XMLOutputFactory xmlOut) {
    // [dataformat-xml#326]: Better ensure namespaces get built properly, so:
    xmlOut.setProperty(XMLOutputFactory.IS_REPAIRING_NAMESPACES, Boolean.TRUE);
    // and for parser, force coalescing as well (much simpler to use)
    xmlIn.setProperty(XMLInputFactory.IS_COALESCING, Boolean.TRUE);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._initFactories(XMLInputFactory,XMLOutputFactory).xmlIn","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._initFactories(XMLInputFactory,XMLOutputFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._initFactories(XMLInputFactory,XMLOutputFactory).xmlOut","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._initFactories(XMLInputFactory,XMLOutputFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.copy()","Method","* Note: compared to base implementation by {@link JsonFactory},
     * here the copy will actually share underlying XML input and
     * output factories, as there is no way to make copies of those.","@Override
public XmlFactory copy() {
    _checkInvalidCopy(XmlFactory.class);
    return new XmlFactory(this, null);
}","XmlFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.version()","Method","No Comment","@Override
public Version version() {
    return PackageVersion.VERSION;
}","Version","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.readResolve()","Method","* Method that we need to override to actually make restoration go
     * through constructors etc.","// since JsonFactory already implemented it
@Override
protected Object readResolve() {
    if (_jdkXmlInFactory == null) {
        throw new IllegalStateException(""No XMLInputFactory class name read during JDK deserialization"");
    }
    if (_jdkXmlOutFactory == null) {
        throw new IllegalStateException(""No XMLOutputFactory class name read during JDK deserialization"");
    }
    final XMLInputFactory inf;
    XMLOutputFactory outf;
    try {
        inf = (XMLInputFactory) Class.forName(_jdkXmlInFactory).getDeclaredConstructor().newInstance();
        outf = (XMLOutputFactory) Class.forName(_jdkXmlOutFactory).getDeclaredConstructor().newInstance();
    } catch (Exception e) {
        throw new IllegalArgumentException(e);
    }
    return new XmlFactory(_objectCodec, _xmlParserFeatures, _xmlGeneratorFeatures, inf, outf, _cfgNameForTextElement);
}","Object","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.readObject(ObjectInputStream)","Method","* In addition to default serialization, which mostly works, need
     * to handle case of XML factories, hence override.","private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
    in.defaultReadObject();
    _jdkXmlInFactory = in.readUTF();
    _jdkXmlOutFactory = in.readUTF();
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.readObject(ObjectInputStream).in","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.readObject(ObjectInputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.writeObject(ObjectOutputStream)","Method","* In addition to default serialization, which mostly works, need
     * to handle case of XML factories, hence override.","private void writeObject(ObjectOutputStream out) throws IOException {
    out.defaultWriteObject();
    out.writeUTF(_xmlInputFactory.getClass().getName());
    out.writeUTF(_xmlOutputFactory.getClass().getName());
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.writeObject(ObjectOutputStream).out","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.writeObject(ObjectOutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.setXMLTextElementName(String)","Method","* @since 2.1","public void setXMLTextElementName(String name) {
    _cfgNameForTextElement = name;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.setXMLTextElementName(String).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.setXMLTextElementName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.getXMLTextElementName()","Method","* @since 2.2","public String getXMLTextElementName() {
    return _cfgNameForTextElement;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.configure(FromXmlParser.Feature,boolean)","Method","* Method for enabling or disabling specified XML parser feature.","public final XmlFactory configure(FromXmlParser.Feature f, boolean state) {
    if (state) {
        enable(f);
    } else {
        disable(f);
    }
    return this;
}","XmlFactory","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.configure(FromXmlParser.Feature,boolean).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.configure(FromXmlParser.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.configure(FromXmlParser.Feature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.configure(FromXmlParser.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.enable(FromXmlParser.Feature)","Method","* Method for enabling specified XML parser feature.","public XmlFactory enable(FromXmlParser.Feature f) {
    _xmlParserFeatures |= f.getMask();
    return this;
}","XmlFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.enable(FromXmlParser.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.enable(FromXmlParser.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.disable(FromXmlParser.Feature)","Method","* Method for disabling specified XML parser feature.","public XmlFactory disable(FromXmlParser.Feature f) {
    _xmlParserFeatures &= ~f.getMask();
    return this;
}","XmlFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.disable(FromXmlParser.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.disable(FromXmlParser.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.isEnabled(FromXmlParser.Feature)","Method","* Checked whether specified XML parser feature is enabled.","public final boolean isEnabled(FromXmlParser.Feature f) {
    return (_xmlParserFeatures & f.getMask()) != 0;
}","boolean","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.isEnabled(FromXmlParser.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.isEnabled(FromXmlParser.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.getFormatParserFeatures()","Method","No Comment","@Override
public int getFormatParserFeatures() {
    return _xmlParserFeatures;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.getFormatGeneratorFeatures()","Method","No Comment","@Override
public int getFormatGeneratorFeatures() {
    return _xmlGeneratorFeatures;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.getXmlNameProcessor()","Method","No Comment","public XmlNameProcessor getXmlNameProcessor() {
    return _nameProcessor;
}","XmlNameProcessor","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.setXmlNameProcessor(XmlNameProcessor)","Method","No Comment","public void setXmlNameProcessor(XmlNameProcessor processor) {
    _nameProcessor = processor;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.setXmlNameProcessor(XmlNameProcessor).processor","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.setXmlNameProcessor(XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.configure(ToXmlGenerator.Feature,boolean)","Method","* Method for enabling or disabling specified XML generator feature.","public final XmlFactory configure(ToXmlGenerator.Feature f, boolean state) {
    if (state) {
        enable(f);
    } else {
        disable(f);
    }
    return this;
}","XmlFactory","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.configure(ToXmlGenerator.Feature,boolean).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.configure(ToXmlGenerator.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.configure(ToXmlGenerator.Feature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.configure(ToXmlGenerator.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.enable(ToXmlGenerator.Feature)","Method","* Method for enabling specified XML generator feature.","public XmlFactory enable(ToXmlGenerator.Feature f) {
    _xmlGeneratorFeatures |= f.getMask();
    return this;
}","XmlFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.enable(ToXmlGenerator.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.enable(ToXmlGenerator.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.disable(ToXmlGenerator.Feature)","Method","* Method for disabling specified XML generator feature.","public XmlFactory disable(ToXmlGenerator.Feature f) {
    _xmlGeneratorFeatures &= ~f.getMask();
    return this;
}","XmlFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.disable(ToXmlGenerator.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.disable(ToXmlGenerator.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.isEnabled(ToXmlGenerator.Feature)","Method","* Check whether specified XML generator feature is enabled.","public final boolean isEnabled(ToXmlGenerator.Feature f) {
    return (_xmlGeneratorFeatures & f.getMask()) != 0;
}","boolean","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.isEnabled(ToXmlGenerator.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.isEnabled(ToXmlGenerator.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.getXMLInputFactory()","Method","@since 2.4","public XMLInputFactory getXMLInputFactory() {
    return _xmlInputFactory;
}","XMLInputFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.setXMLInputFactory(XMLInputFactory)","Method","* @deprecated Since 2.12 -- should be set as part of build process
     *   (either in builder, or constructor)","@Deprecated
public void setXMLInputFactory(XMLInputFactory f) {
    _xmlInputFactory = f;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.setXMLInputFactory(XMLInputFactory).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.setXMLInputFactory(XMLInputFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.getXMLOutputFactory()","Method","@since 2.4","public XMLOutputFactory getXMLOutputFactory() {
    return _xmlOutputFactory;
}","XMLOutputFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.setXMLOutputFactory(XMLOutputFactory)","Method","* @deprecated Since 2.12 -- should be set as part of build process
     *   (either in builder, or constructor)","@Deprecated
public void setXMLOutputFactory(XMLOutputFactory f) {
    _xmlOutputFactory = f;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.setXMLOutputFactory(XMLOutputFactory).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.setXMLOutputFactory(XMLOutputFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.getFormatName()","Method","* Method that returns short textual id identifying format
     * this factory supports.
     *<p>
     * Note: sub-classes should override this method; default
     * implementation will return null for all sub-classes","@Override
public String getFormatName() {
    return FORMAT_NAME_XML;
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.hasFormat(InputAccessor)","Method","No Comment","@Override
public MatchStrength hasFormat(InputAccessor acc) throws IOException {
    return hasXMLFormat(acc);
}","MatchStrength","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.hasFormat(InputAccessor).acc","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.hasFormat(InputAccessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.requiresCustomCodec()","Method","* XML format does require support from custom {@link ObjectCodec}
     * (that is, {@link XmlMapper}), so need to return true here.
     * 
     * @return True since XML format does require support from codec","@Override
public boolean requiresCustomCodec() {
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.canUseCharArrays()","Method","* As of 2.4, we do have actual capability for passing char arrays
     * efficiently, but unfortunately
     * have no working mechanism for recycling buffers. So we have to 
     * admit that can not make efficient use.","@Override
public boolean canUseCharArrays() {
    return false;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.getFormatReadFeatureType()","Method","No Comment","// since 2.6
@Override
public Class<FromXmlParser.Feature> getFormatReadFeatureType() {
    return FromXmlParser.Feature.class;
}","Class","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.getFormatWriteFeatureType()","Method","No Comment","// since 2.6
@Override
public Class<ToXmlGenerator.Feature> getFormatWriteFeatureType() {
    return ToXmlGenerator.Feature.class;
}","Class","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(String)","Method","* Overridden just to prevent trying to optimize access via char array;
     * while nice idea, problem is that we don't have proper hooks to ensure
     * that temporary buffer gets recycled; so let's just use StringReader.","@SuppressWarnings(""resource"")
@Override
public JsonParser createParser(String content) throws IOException {
    Reader r = new StringReader(content);
    IOContext ctxt = _createContext(_createContentReference(r), true);
    if (_inputDecorator != null) {
        r = _inputDecorator.decorate(ctxt, r);
    }
    return _createParser(r, ctxt);
}","JsonParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(String).content","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(OutputStream)","Method","No Comment","@Override
public ToXmlGenerator createGenerator(OutputStream out) throws IOException {
    return createGenerator(out, JsonEncoding.UTF8);
}","ToXmlGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(OutputStream).out","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(OutputStream,JsonEncoding)","Method","No Comment","@Override
public ToXmlGenerator createGenerator(OutputStream out, JsonEncoding enc) throws IOException {
    // false -> we won't manage the stream unless explicitly directed to
    final IOContext ctxt = _createContext(_createContentReference(out), false);
    ctxt.setEncoding(enc);
    return new ToXmlGenerator(ctxt, _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, _createXmlWriter(ctxt, out), _nameProcessor);
}","ToXmlGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(OutputStream,JsonEncoding).out","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(OutputStream,JsonEncoding)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(OutputStream,JsonEncoding).enc","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(OutputStream,JsonEncoding)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(Writer)","Method","No Comment","@Override
public ToXmlGenerator createGenerator(Writer out) throws IOException {
    final IOContext ctxt = _createContext(_createContentReference(out), false);
    return new ToXmlGenerator(ctxt, _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, _createXmlWriter(ctxt, out), _nameProcessor);
}","ToXmlGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(Writer).out","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(File,JsonEncoding)","Method","No Comment","@SuppressWarnings(""resource"")
@Override
public ToXmlGenerator createGenerator(File f, JsonEncoding enc) throws IOException {
    OutputStream out = new FileOutputStream(f);
    // true -> yes, we have to manage the stream since we created it
    final IOContext ctxt = _createContext(_createContentReference(out), true);
    ctxt.setEncoding(enc);
    return new ToXmlGenerator(ctxt, _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, _createXmlWriter(ctxt, out), _nameProcessor);
}","ToXmlGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(File,JsonEncoding).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(File,JsonEncoding)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(File,JsonEncoding).enc","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(File,JsonEncoding)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(XMLStreamReader)","Method","* Factory method that wraps given {@link XMLStreamReader}, usually to allow
     * partial data-binding.
     * 
     * @since 2.4","public FromXmlParser createParser(XMLStreamReader sr) throws IOException {
    // note: should NOT move parser if already pointing to START_ELEMENT
    if (sr.getEventType() != XMLStreamConstants.START_ELEMENT) {
        sr = _initializeXmlReader(sr);
    }
    // false -> not managed
    FromXmlParser xp = new FromXmlParser(_createContext(_createContentReference(sr), false), _parserFeatures, _xmlParserFeatures, _objectCodec, sr, _nameProcessor);
    if (_cfgNameForTextElement != null) {
        xp.setXMLTextElementName(_cfgNameForTextElement);
    }
    return xp;
}","FromXmlParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(XMLStreamReader).sr","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.createParser(XMLStreamReader)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(XMLStreamWriter)","Method","* Factory method that wraps given {@link XMLStreamWriter}, usually to allow
     * incremental serialization to compose large output by serializing a sequence
     * of individual objects.
     *
     * @since 2.4","public ToXmlGenerator createGenerator(XMLStreamWriter sw) throws IOException {
    sw = _initializeXmlWriter(sw);
    IOContext ctxt = _createContext(_createContentReference(sw), false);
    return new ToXmlGenerator(ctxt, _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sw, _nameProcessor);
}","ToXmlGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(XMLStreamWriter).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.createGenerator(XMLStreamWriter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(InputStream,IOContext)","Method","No Comment","@Override
protected FromXmlParser _createParser(InputStream in, IOContext ctxt) throws IOException {
    XMLStreamReader sr;
    try {
        sr = _xmlInputFactory.createXMLStreamReader(in);
    } catch (XMLStreamException e) {
        return StaxUtil.throwAsParseException(e, null);
    }
    sr = _initializeXmlReader(sr);
    FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures, _objectCodec, sr, _nameProcessor);
    if (_cfgNameForTextElement != null) {
        xp.setXMLTextElementName(_cfgNameForTextElement);
    }
    return xp;
}","FromXmlParser","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(InputStream,IOContext).in","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(InputStream,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(InputStream,IOContext).ctxt","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(InputStream,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(Reader,IOContext)","Method","No Comment","@Override
protected FromXmlParser _createParser(Reader r, IOContext ctxt) throws IOException {
    XMLStreamReader sr;
    try {
        sr = _xmlInputFactory.createXMLStreamReader(r);
    } catch (XMLStreamException e) {
        return StaxUtil.throwAsParseException(e, null);
    }
    sr = _initializeXmlReader(sr);
    FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures, _objectCodec, sr, _nameProcessor);
    if (_cfgNameForTextElement != null) {
        xp.setXMLTextElementName(_cfgNameForTextElement);
    }
    return xp;
}","FromXmlParser","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(Reader,IOContext).r","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(Reader,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(Reader,IOContext).ctxt","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(Reader,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[],int,int,IOContext,boolean)","Method","No Comment","@Override
protected FromXmlParser _createParser(char[] data, int offset, int len, IOContext ctxt, boolean recycleBuffer) throws IOException {
    // !!! TODO: add proper handling of 'recycleBuffer'; currently its handling
    //    is always same as if 'false' was passed
    XMLStreamReader sr;
    try {
        // 03-Jul-2021, tatu: [dataformat-xml#482] non-Stax2 impls unlikely to
        //    support so avoid:
        if (_xmlInputFactory instanceof XMLInputFactory2) {
            sr = _xmlInputFactory.createXMLStreamReader(new Stax2CharArraySource(data, offset, len));
        } else {
            sr = _xmlInputFactory.createXMLStreamReader(new CharArrayReader(data, offset, len));
        }
    } catch (XMLStreamException e) {
        return StaxUtil.throwAsParseException(e, null);
    }
    sr = _initializeXmlReader(sr);
    FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures, _objectCodec, sr, _nameProcessor);
    if (_cfgNameForTextElement != null) {
        xp.setXMLTextElementName(_cfgNameForTextElement);
    }
    return xp;
}","FromXmlParser","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[],int,int,IOContext,boolean).data","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[],int,int,IOContext,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[],int,int,IOContext,boolean).offset","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[],int,int,IOContext,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[],int,int,IOContext,boolean).len","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[],int,int,IOContext,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[],int,int,IOContext,boolean).ctxt","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[],int,int,IOContext,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[],int,int,IOContext,boolean).recycleBuffer","Parameter_5","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(char[],int,int,IOContext,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[],int,int,IOContext)","Method","No Comment","@Override
protected FromXmlParser _createParser(byte[] data, int offset, int len, IOContext ctxt) throws IOException {
    XMLStreamReader sr;
    try {
        // 03-Jul-2021, tatu: [dataformat-xml#482] non-Stax2 impls unlikely to
        //    support so avoid:
        if (_xmlInputFactory instanceof XMLInputFactory2) {
            sr = _xmlInputFactory.createXMLStreamReader(new Stax2ByteArraySource(data, offset, len));
        } else {
            // 04-Dec-2023, tatu: As per [dataformat-xml#618], JDK's crappy in-built
            //    Stax implementation barfs here. Hence:
            try {
                sr = _xmlInputFactory.createXMLStreamReader(new ByteArrayInputStream(data, offset, len));
            } catch (ArrayIndexOutOfBoundsException e) {
                throw new JsonParseException(null, ""Internal processing error by `XMLInputFactory` of type "" + ClassUtil.classNameOf(_xmlInputFactory) + "" when trying to create a parser ("" + ""consider using Woodstox instead): "" + e.getMessage());
            }
        }
    } catch (XMLStreamException e) {
        return StaxUtil.throwAsParseException(e, null);
    }
    sr = _initializeXmlReader(sr);
    FromXmlParser xp = new FromXmlParser(ctxt, _parserFeatures, _xmlParserFeatures, _objectCodec, sr, _nameProcessor);
    if (_cfgNameForTextElement != null) {
        xp.setXMLTextElementName(_cfgNameForTextElement);
    }
    return xp;
}","FromXmlParser","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[],int,int,IOContext).data","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[],int,int,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[],int,int,IOContext).offset","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[],int,int,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[],int,int,IOContext).len","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[],int,int,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[],int,int,IOContext).ctxt","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._createParser(byte[],int,int,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createGenerator(Writer,IOContext)","Method","No Comment","@Override
protected JsonGenerator _createGenerator(Writer out, IOContext ctxt) throws IOException {
    // this method should never get called here, so:
    VersionUtil.throwInternal();
    return null;
}","JsonGenerator","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createGenerator(Writer,IOContext).out","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._createGenerator(Writer,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createGenerator(Writer,IOContext).ctxt","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._createGenerator(Writer,IOContext)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(IOContext,OutputStream)","Method","No Comment","protected XMLStreamWriter _createXmlWriter(IOContext ctxt, OutputStream out) throws IOException {
    XMLStreamWriter sw;
    try {
        sw = _xmlOutputFactory.createXMLStreamWriter(_decorate(ctxt, out), ""UTF-8"");
    } catch (Exception e) {
        throw new JsonGenerationException(e.getMessage(), e, null);
    }
    return _initializeXmlWriter(sw);
}","XMLStreamWriter","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(IOContext,OutputStream).ctxt","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(IOContext,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(IOContext,OutputStream).out","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(IOContext,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(IOContext,Writer)","Method","No Comment","protected XMLStreamWriter _createXmlWriter(IOContext ctxt, Writer w) throws IOException {
    XMLStreamWriter sw;
    try {
        sw = _xmlOutputFactory.createXMLStreamWriter(_decorate(ctxt, w));
    } catch (Exception e) {
        throw new JsonGenerationException(e.getMessage(), e, null);
    }
    return _initializeXmlWriter(sw);
}","XMLStreamWriter","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(IOContext,Writer).ctxt","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(IOContext,Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(IOContext,Writer).w","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._createXmlWriter(IOContext,Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlWriter(XMLStreamWriter)","Method","No Comment","protected final XMLStreamWriter _initializeXmlWriter(XMLStreamWriter sw) throws IOException {
    // And just for Sun Stax parser (JDK default), seems that we better define default namespace
    // (Woodstox doesn't care) -- otherwise it'll add unnecessary odd declaration
    try {
        sw.setDefaultNamespace("""");
    } catch (Exception e) {
        throw new JsonGenerationException(e.getMessage(), e, null);
    }
    return sw;
}","XMLStreamWriter","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlWriter(XMLStreamWriter).sw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlWriter(XMLStreamWriter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlReader(XMLStreamReader)","Method","No Comment","protected final XMLStreamReader _initializeXmlReader(XMLStreamReader sr) throws IOException {
    try {
        // for now, nothing to do... except let's find the root element
        while (sr.next() != XMLStreamConstants.START_ELEMENT) {
            ;
        }
        // [dataformat-xml#350]: Xerces-backed impl throws non-XMLStreamException so:
    } catch (Exception e) {
        throw new JsonParseException(null, e.getMessage(), e);
    }
    return sr;
}","XMLStreamReader","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlReader(XMLStreamReader).sr","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._initializeXmlReader(XMLStreamReader)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.hasXMLFormat(InputAccessor)","Method","* Method that tries to figure out if content seems to be in some kind
     * of XML format.
     * Note that implementation here is not nearly as robust as what underlying
     * Stax parser will do; the idea is to first support common encodings,
     * then expand as needed (for example, it is not all that hard to support
     * UTF-16; but it is some work and not needed quite yet)","public static MatchStrength hasXMLFormat(InputAccessor acc) throws IOException {
    /* Basically we just need to find ""<!"", ""<?"" or ""<NAME""... but ideally
         * we would actually see the XML declaration
         */
    if (!acc.hasMoreBytes()) {
        return MatchStrength.INCONCLUSIVE;
    }
    byte b = acc.nextByte();
    // Very first thing, a UTF-8 BOM? (later improvements: other BOM's, heuristics)
    if (b == UTF8_BOM_1) {
        // yes, looks like UTF-8 BOM
        if (!acc.hasMoreBytes()) {
            return MatchStrength.INCONCLUSIVE;
        }
        if (acc.nextByte() != UTF8_BOM_2) {
            return MatchStrength.NO_MATCH;
        }
        if (!acc.hasMoreBytes()) {
            return MatchStrength.INCONCLUSIVE;
        }
        if (acc.nextByte() != UTF8_BOM_3) {
            return MatchStrength.NO_MATCH;
        }
        if (!acc.hasMoreBytes()) {
            return MatchStrength.INCONCLUSIVE;
        }
        b = acc.nextByte();
    }
    // otherwise: XML declaration?
    boolean maybeXmlDecl = (b == BYTE_LT);
    if (!maybeXmlDecl) {
        int ch = skipSpace(acc, b);
        if (ch < 0) {
            return MatchStrength.INCONCLUSIVE;
        }
        b = (byte) ch;
        // If we did not get an LT, shouldn't be valid XML (minus encoding issues etc)
        if (b != BYTE_LT) {
            return MatchStrength.NO_MATCH;
        }
    }
    if (!acc.hasMoreBytes()) {
        return MatchStrength.INCONCLUSIVE;
    }
    b = acc.nextByte();
    // Couple of choices here
    if (b == BYTE_QMARK) {
        // <?
        b = acc.nextByte();
        if (b == BYTE_x) {
            if (maybeXmlDecl) {
                if (acc.hasMoreBytes() && acc.nextByte() == BYTE_m) {
                    if (acc.hasMoreBytes() && acc.nextByte() == BYTE_l) {
                        return MatchStrength.FULL_MATCH;
                    }
                }
            }
            // but even with just partial match, we ought to be fine
            return MatchStrength.SOLID_MATCH;
        }
        // Ok to start with some other char too; just not xml declaration
        if (validXmlNameStartChar(acc, b)) {
            return MatchStrength.SOLID_MATCH;
        }
    } else if (b == BYTE_EXCL) {
        /* must be <!-- comment --> or <!DOCTYPE ...>, since
             * <![CDATA[ ]]> can NOT come outside of root
             */
        if (!acc.hasMoreBytes()) {
            return MatchStrength.INCONCLUSIVE;
        }
        b = acc.nextByte();
        if (b == BYTE_HYPHEN) {
            if (!acc.hasMoreBytes()) {
                return MatchStrength.INCONCLUSIVE;
            }
            if (acc.nextByte() == BYTE_HYPHEN) {
                return MatchStrength.SOLID_MATCH;
            }
        } else if (b == BYTE_D) {
            return tryMatch(acc, ""OCTYPE"", MatchStrength.SOLID_MATCH);
        }
    } else {
        // maybe root element? Just needs to match first char.
        if (validXmlNameStartChar(acc, b)) {
            return MatchStrength.SOLID_MATCH;
        }
    }
    return MatchStrength.NO_MATCH;
}","MatchStrength","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.hasXMLFormat(InputAccessor).acc","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.hasXMLFormat(InputAccessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.validXmlNameStartChar(InputAccessor,byte)","Method","No Comment","private final static boolean validXmlNameStartChar(InputAccessor acc, byte b) throws IOException {
    /* Can make it actual real XML check in future; for now we do just crude
         * check for ASCII range
         */
    int ch = (int) b & 0xFF;
    if (ch >= 'A') {
        // in theory, colon could be; in practice it should never be valid (wrt namespace)
        // This is where we'd check for multi-byte UTF-8 chars (or whatever encoding is in use)...
        return true;
    }
    return false;
}","boolean","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.validXmlNameStartChar(InputAccessor,byte).acc","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.validXmlNameStartChar(InputAccessor,byte)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.validXmlNameStartChar(InputAccessor,byte).b","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.validXmlNameStartChar(InputAccessor,byte)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.tryMatch(InputAccessor,String,MatchStrength)","Method","No Comment","private final static MatchStrength tryMatch(InputAccessor acc, String matchStr, MatchStrength fullMatchStrength) throws IOException {
    for (int i = 0, len = matchStr.length(); i < len; ++i) {
        if (!acc.hasMoreBytes()) {
            return MatchStrength.INCONCLUSIVE;
        }
        if (acc.nextByte() != matchStr.charAt(i)) {
            return MatchStrength.NO_MATCH;
        }
    }
    return fullMatchStrength;
}","MatchStrength","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.tryMatch(InputAccessor,String,MatchStrength).acc","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.tryMatch(InputAccessor,String,MatchStrength)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.tryMatch(InputAccessor,String,MatchStrength).matchStr","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.tryMatch(InputAccessor,String,MatchStrength)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.tryMatch(InputAccessor,String,MatchStrength).fullMatchStrength","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.tryMatch(InputAccessor,String,MatchStrength)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.skipSpace(InputAccessor,byte)","Method","No Comment","private final static int skipSpace(InputAccessor acc, byte b) throws IOException {
    while (true) {
        int ch = (int) b & 0xFF;
        if (!(ch == ' ' || ch == '\r' || ch == '\n' || ch == '\t')) {
            return ch;
        }
        if (!acc.hasMoreBytes()) {
            return -1;
        }
        b = acc.nextByte();
        ch = (int) b & 0xFF;
    }
}","int","private , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.skipSpace(InputAccessor,byte).acc","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.skipSpace(InputAccessor,byte)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.skipSpace(InputAccessor,byte).b","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.skipSpace(InputAccessor,byte)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._decorate(IOContext,OutputStream)","Method","No Comment","protected OutputStream _decorate(IOContext ioCtxt, OutputStream out) throws IOException {
    if (_outputDecorator != null) {
        OutputStream out2 = _outputDecorator.decorate(ioCtxt, out);
        if (out2 != null) {
            return out2;
        }
    }
    return out;
}","OutputStream","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._decorate(IOContext,OutputStream).ioCtxt","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._decorate(IOContext,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._decorate(IOContext,OutputStream).out","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._decorate(IOContext,OutputStream)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._decorate(IOContext,Writer)","Method","No Comment","protected Writer _decorate(IOContext ioCtxt, Writer out) throws IOException {
    if (_outputDecorator != null) {
        Writer out2 = _outputDecorator.decorate(ioCtxt, out);
        if (out2 != null) {
            return out2;
        }
    }
    return out;
}","Writer","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._decorate(IOContext,Writer).ioCtxt","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._decorate(IOContext,Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory._decorate(IOContext,Writer).out","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory._decorate(IOContext,Writer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>()","Constructor","* Default constructor used to create factory instances.
     * Creation of a factory instance is a light-weight operation,
     * but it is still a good idea to reuse limited number of
     * factory instances (and quite often just a single instance):
     * factories are used as context for storing some reused
     * processing objects (such as symbol tables parsers use)
     * and this reuse only works within context of a single
     * factory instance.","public XmlFactory() {
    this(null, null, null);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec)","Constructor","No Comment","public XmlFactory(ObjectCodec oc) {
    this(oc, null, null);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec).oc","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(XMLInputFactory)","Constructor","No Comment","public XmlFactory(XMLInputFactory xmlIn) {
    this(null, xmlIn, null);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(XMLInputFactory).xmlIn","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(XMLInputFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(XMLInputFactory,XMLOutputFactory)","Constructor","No Comment","public XmlFactory(XMLInputFactory xmlIn, XMLOutputFactory xmlOut) {
    this(null, xmlIn, xmlOut);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(XMLInputFactory,XMLOutputFactory).xmlIn","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(XMLInputFactory,XMLOutputFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(XMLInputFactory,XMLOutputFactory).xmlOut","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(XMLInputFactory,XMLOutputFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,XMLInputFactory,XMLOutputFactory)","Constructor","No Comment","public XmlFactory(ObjectCodec oc, XMLInputFactory xmlIn, XMLOutputFactory xmlOut) {
    this(oc, DEFAULT_XML_PARSER_FEATURE_FLAGS, DEFAULT_XML_GENERATOR_FEATURE_FLAGS, xmlIn, xmlOut, null);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,XMLInputFactory,XMLOutputFactory).oc","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,XMLInputFactory,XMLOutputFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,XMLInputFactory,XMLOutputFactory).xmlIn","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,XMLInputFactory,XMLOutputFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,XMLInputFactory,XMLOutputFactory).xmlOut","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,XMLInputFactory,XMLOutputFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String)","Constructor","No Comment","public XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures, XMLInputFactory xmlIn, XMLOutputFactory xmlOut, String nameForTextElem) {
    this(oc, xpFeatures, xgFeatures, xmlIn, xmlOut, nameForTextElem, XmlNameProcessors.newPassthroughProcessor());
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String).oc","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String).xpFeatures","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String).xgFeatures","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String).xmlIn","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String).xmlOut","Parameter_5","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String).nameForTextElem","Parameter_6","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String,XmlNameProcessor)","Constructor","No Comment","protected XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures, XMLInputFactory xmlIn, XMLOutputFactory xmlOut, String nameForTextElem, XmlNameProcessor nameProcessor) {
    super(oc);
    _nameProcessor = nameProcessor;
    _xmlParserFeatures = xpFeatures;
    _xmlGeneratorFeatures = xgFeatures;
    _cfgNameForTextElement = nameForTextElem;
    if (xmlIn == null) {
        xmlIn = StaxUtil.defaultInputFactory(getClass().getClassLoader());
        // as per [dataformat-xml#190], disable external entity expansion by default
        xmlIn.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);
        // and ditto wrt [dataformat-xml#211], SUPPORT_DTD
        xmlIn.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);
    }
    if (xmlOut == null) {
        xmlOut = StaxUtil.defaultOutputFactory(getClass().getClassLoader());
        // [dataformat-xml#326]: Better ensure namespaces get built properly:
        xmlOut.setProperty(XMLOutputFactory.IS_REPAIRING_NAMESPACES, Boolean.TRUE);
    }
    _initFactories(xmlIn, xmlOut);
    _xmlInputFactory = xmlIn;
    _xmlOutputFactory = xmlOut;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String,XmlNameProcessor).oc","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String,XmlNameProcessor).xpFeatures","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String,XmlNameProcessor).xgFeatures","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String,XmlNameProcessor).xmlIn","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String,XmlNameProcessor).xmlOut","Parameter_5","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String,XmlNameProcessor).nameForTextElem","Parameter_6","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String,XmlNameProcessor).nameProcessor","Parameter_7","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(XmlFactory,ObjectCodec)","Constructor","* @since 2.2.1","protected XmlFactory(XmlFactory src, ObjectCodec oc) {
    super(src, oc);
    _xmlParserFeatures = src._xmlParserFeatures;
    _xmlGeneratorFeatures = src._xmlGeneratorFeatures;
    _cfgNameForTextElement = src._cfgNameForTextElement;
    _xmlInputFactory = src._xmlInputFactory;
    _xmlOutputFactory = src._xmlOutputFactory;
    _nameProcessor = src._nameProcessor;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(XmlFactory,ObjectCodec).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(XmlFactory,ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(XmlFactory,ObjectCodec).oc","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(XmlFactory,ObjectCodec)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(XmlFactoryBuilder)","Constructor","* Constructors used by {@link JsonFactoryBuilder} for instantiation.
     *
     * @since 2.9","protected XmlFactory(XmlFactoryBuilder b) {
    super(b, false);
    _xmlParserFeatures = b.formatParserFeaturesMask();
    _xmlGeneratorFeatures = b.formatGeneratorFeaturesMask();
    _cfgNameForTextElement = b.nameForTextElement();
    _xmlInputFactory = b.xmlInputFactory();
    _xmlOutputFactory = b.xmlOutputFactory();
    _nameProcessor = b.xmlNameProcessor();
    _initFactories(_xmlInputFactory, _xmlOutputFactory);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(XmlFactoryBuilder).b","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(XmlFactoryBuilder)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier","Class","* We need a {@link BeanSerializerModifier} to replace default <code>BeanSerializer</code>
 * with XML-specific one; mostly to ensure that attribute properties are output
 * before element properties.","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.databind.ser.BeanSerializerModifier","java.io.Serializable"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(SerializationConfig,BeanDescription,List)","Method","* First thing to do is to find annotations regarding XML serialization,
     * and wrap collection serializers.","@Override
public List<BeanPropertyWriter> changeProperties(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyWriter> beanProperties) {
    final AnnotationIntrospector intr = config.getAnnotationIntrospector();
    for (int i = 0, len = beanProperties.size(); i < len; ++i) {
        BeanPropertyWriter bpw = beanProperties.get(i);
        final AnnotatedMember member = bpw.getMember();
        String ns = AnnotationUtil.findNamespaceAnnotation(config, intr, member);
        Boolean isAttribute = AnnotationUtil.findIsAttributeAnnotation(config, intr, member);
        Boolean isText = AnnotationUtil.findIsTextAnnotation(config, intr, member);
        Boolean isCData = AnnotationUtil.findIsCDataAnnotation(config, intr, member);
        bpw.setInternalSetting(XmlBeanSerializerBase.KEY_XML_INFO, new XmlInfo(isAttribute, ns, isText, isCData));
        // Actually: if we have a Collection type, easiest place to add wrapping would be here...
        //  or: let's also allow wrapping of ""untyped"" (Object): assuming it is a dynamically
        //   typed Collection...
        if (!TypeUtil.isIndexedType(bpw.getType())) {
            continue;
        }
        PropertyName wrappedName = PropertyName.construct(bpw.getName(), ns);
        PropertyName wrapperName = bpw.getWrapperName();
        // first things first: no wrapping?
        if (wrapperName == null || wrapperName == PropertyName.NO_NAME) {
            continue;
        }
        // no local name? Just double the wrapped name for wrapper
        String localName = wrapperName.getSimpleName();
        if (localName == null || localName.length() == 0) {
            wrapperName = wrappedName;
        }
        beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));
    }
    return beanProperties;
}","List","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(SerializationConfig,BeanDescription,List).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(SerializationConfig,BeanDescription,List)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(SerializationConfig,BeanDescription,List).beanDesc","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(SerializationConfig,BeanDescription,List)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(SerializationConfig,BeanDescription,List).beanProperties","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.changeProperties(SerializationConfig,BeanDescription,List)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.modifySerializer(SerializationConfig,BeanDescription,JsonSerializer)","Method","No Comment","@Override
public JsonSerializer<?> modifySerializer(SerializationConfig config, BeanDescription beanDesc, JsonSerializer<?> serializer) {
    /* First things first: we can only handle real BeanSerializers; question
         * is, what to do if it's not one: throw exception or bail out?
         * For now let's do latter.
         */
    if (!(serializer instanceof BeanSerializerBase)) {
        return serializer;
    }
    return new XmlBeanSerializer((BeanSerializerBase) serializer);
}","JsonSerializer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.modifySerializer(SerializationConfig,BeanDescription,JsonSerializer).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.modifySerializer(SerializationConfig,BeanDescription,JsonSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.modifySerializer(SerializationConfig,BeanDescription,JsonSerializer).beanDesc","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.modifySerializer(SerializationConfig,BeanDescription,JsonSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.modifySerializer(SerializationConfig,BeanDescription,JsonSerializer).serializer","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.modifySerializer(SerializationConfig,BeanDescription,JsonSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier.<init>()","Constructor","No Comment","public XmlBeanSerializerModifier() {
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase","Abstract Class","* Specific sub-class of {@link BeanSerializerBase} needed to take care
 * of some xml-specific aspects, such as distinction between attributes
 * and elements.","Abstract Class do not obtain Source Code","No return type","public , abstract ","com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",""
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.KEY_XML_INFO","Field","* Marker used for storing associated internal data with {@link BeanPropertyWriter}
     * instances; to mark instances that are to be written out as attributes.
     * Created as separate non-interned String to ensure there are no collisions.","public final static String KEY_XML_INFO = new String(""xmlInfo"");","No return type","public , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._attributeCount","Field","* Number of attributes to write; these will have been ordered to be the first
     * properties to write.","protected final int _attributeCount;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._textPropertyIndex","Field","* Index of ""text value"" property we have, if any; can have at most
     * one such property.","protected final int _textPropertyIndex;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._xmlNames","Field","* Array that contains namespace URIs associated with properties, if any;
     * null if no namespace definitions have been assigned","protected final QName[] _xmlNames;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._cdata","Field","* Optional set of indexes of properties that should be serialized as CDATA,
     * instead of regular XML text segment. Left as null in cases where none of
     * element values are to be written in such a way.","protected final BitSet _cdata;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(Object,JsonGenerator,SerializerProvider)","Method","* Main serialization method needs to be overridden to allow XML-specific
     * extra handling, such as indication of whether to write attributes or
     * elements.","@Override
protected void serializeFields(Object bean, JsonGenerator gen0, SerializerProvider provider) throws IOException {
    // 19-Aug-2013, tatu: During 'convertValue()', need to skip
    if (!(gen0 instanceof ToXmlGenerator)) {
        super.serializeFields(bean, gen0, provider);
        return;
    }
    final ToXmlGenerator xgen = (ToXmlGenerator) gen0;
    final BeanPropertyWriter[] props;
    if (_filteredProps != null && provider.getActiveView() != null) {
        props = _filteredProps;
    } else {
        props = _props;
    }
    final int attrCount = _attributeCount;
    final boolean isAttribute = xgen._nextIsAttribute;
    if (attrCount > 0) {
        xgen.setNextIsAttribute(true);
    }
    final int textIndex = _textPropertyIndex;
    final QName[] xmlNames = _xmlNames;
    int i = 0;
    final BitSet cdata = _cdata;
    try {
        for (final int len = props.length; i < len; ++i) {
            // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer
            // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.
            if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {
                xgen.setNextIsAttribute(false);
            }
            // also: if this is property to write as text (""unwrap""), need to:
            if (i == textIndex) {
                xgen.setNextIsUnwrapped(true);
            }
            xgen.setNextName(xmlNames[i]);
            BeanPropertyWriter prop = props[i];
            if (prop != null) {
                // can have nulls in filtered list
                if ((cdata != null) && cdata.get(i)) {
                    xgen.setNextIsCData(true);
                    prop.serializeAsField(bean, xgen, provider);
                    xgen.setNextIsCData(false);
                } else {
                    prop.serializeAsField(bean, xgen, provider);
                }
            }
            // Reset to avoid next value being written as unwrapped,
            // for example when property is suppressed
            if (i == textIndex) {
                xgen.setNextIsUnwrapped(false);
            }
        }
    } catch (Exception e) {
        String name = (i == props.length) ? ""[anySetter]"" : props[i].getName();
        wrapAndThrow(provider, e, bean, name);
    } catch (StackOverflowError e) {
        // Bit tricky, can't do more calls as stack is full; so:
        JsonMappingException mapE = JsonMappingException.from(gen0, ""Infinite recursion (StackOverflowError)"");
        String name = (i == props.length) ? ""[anySetter]"" : props[i].getName();
        mapE.prependPath(new JsonMappingException.Reference(bean, name));
        throw mapE;
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(Object,JsonGenerator,SerializerProvider).bean","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(Object,JsonGenerator,SerializerProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(Object,JsonGenerator,SerializerProvider).gen0","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(Object,JsonGenerator,SerializerProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(Object,JsonGenerator,SerializerProvider).provider","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFields(Object,JsonGenerator,SerializerProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(Object,JsonGenerator,SerializerProvider)","Method","No Comment","@Override
protected void serializeFieldsFiltered(Object bean, JsonGenerator gen0, SerializerProvider provider) throws IOException {
    // 19-Aug-2013, tatu: During 'convertValue()', need to skip
    if (!(gen0 instanceof ToXmlGenerator)) {
        super.serializeFieldsFiltered(bean, gen0, provider);
        return;
    }
    final ToXmlGenerator xgen = (ToXmlGenerator) gen0;
    final BeanPropertyWriter[] props;
    if (_filteredProps != null && provider.getActiveView() != null) {
        props = _filteredProps;
    } else {
        props = _props;
    }
    final PropertyFilter filter = findPropertyFilter(provider, _propertyFilterId, bean);
    // better also allow missing filter actually..
    if (filter == null) {
        serializeFields(bean, gen0, provider);
        return;
    }
    final boolean isAttribute = xgen._nextIsAttribute;
    final int attrCount = _attributeCount;
    if (attrCount > 0) {
        xgen.setNextIsAttribute(true);
    }
    final int textIndex = _textPropertyIndex;
    final QName[] xmlNames = _xmlNames;
    final BitSet cdata = _cdata;
    int i = 0;
    try {
        for (final int len = props.length; i < len; ++i) {
            // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer
            // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.
            if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {
                xgen.setNextIsAttribute(false);
            }
            // also: if this is property to write as text (""unwrap""), need to:
            if (i == textIndex) {
                xgen.setNextIsUnwrapped(true);
            }
            xgen.setNextName(xmlNames[i]);
            BeanPropertyWriter prop = props[i];
            if (prop != null) {
                // can have nulls in filtered list
                if ((cdata != null) && cdata.get(i)) {
                    xgen.setNextIsCData(true);
                    filter.serializeAsField(bean, xgen, provider, prop);
                    xgen.setNextIsCData(false);
                } else {
                    filter.serializeAsField(bean, xgen, provider, prop);
                }
            }
            // Reset to avoid next value being written as unwrapped,
            // for example when property is suppressed
            if (i == textIndex) {
                xgen.setNextIsUnwrapped(false);
            }
        }
    } catch (Exception e) {
        String name = (i == props.length) ? ""[anySetter]"" : props[i].getName();
        wrapAndThrow(provider, e, bean, name);
    } catch (StackOverflowError e) {
        JsonMappingException mapE = JsonMappingException.from(gen0, ""Infinite recursion (StackOverflowError)"", e);
        String name = (i == props.length) ? ""[anySetter]"" : props[i].getName();
        mapE.prependPath(new JsonMappingException.Reference(bean, name));
        throw mapE;
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(Object,JsonGenerator,SerializerProvider).bean","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(Object,JsonGenerator,SerializerProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(Object,JsonGenerator,SerializerProvider).gen0","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(Object,JsonGenerator,SerializerProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(Object,JsonGenerator,SerializerProvider).provider","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeFieldsFiltered(Object,JsonGenerator,SerializerProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(Object,JsonGenerator,SerializerProvider,TypeSerializer)","Method","No Comment","@Override
public void serializeWithType(Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {
    if (_objectIdWriter != null) {
        _serializeWithObjectId(bean, gen, provider, typeSer);
        return;
    }
    /* Ok: let's serialize type id as attribute, but if (and only if!)
         * we are using AS_PROPERTY
         */
    if (typeSer.getTypeInclusion() == JsonTypeInfo.As.PROPERTY) {
        ToXmlGenerator xgen = (ToXmlGenerator) gen;
        xgen.setNextIsAttribute(true);
        super.serializeWithType(bean, gen, provider, typeSer);
        if (_attributeCount == 0) {
            // if no attributes, need to reset
            xgen.setNextIsAttribute(false);
        }
    } else {
        super.serializeWithType(bean, gen, provider, typeSer);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(Object,JsonGenerator,SerializerProvider,TypeSerializer).bean","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(Object,JsonGenerator,SerializerProvider,TypeSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(Object,JsonGenerator,SerializerProvider,TypeSerializer).gen","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(Object,JsonGenerator,SerializerProvider,TypeSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(Object,JsonGenerator,SerializerProvider,TypeSerializer).provider","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(Object,JsonGenerator,SerializerProvider,TypeSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(Object,JsonGenerator,SerializerProvider,TypeSerializer).typeSer","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.serializeWithType(Object,JsonGenerator,SerializerProvider,TypeSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(Object,JsonGenerator,SerializerProvider,TypeSerializer,WritableObjectId)","Method","No Comment","@Override
protected void _serializeObjectId(Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer, WritableObjectId objectId) throws IOException {
    // Ok: let's serialize type id as attribute, but if (and only if!) we are using AS_PROPERTY
    if (typeSer.getTypeInclusion() == JsonTypeInfo.As.PROPERTY) {
        ToXmlGenerator xgen = (ToXmlGenerator) gen;
        xgen.setNextIsAttribute(true);
        super._serializeObjectId(bean, gen, provider, typeSer, objectId);
        if (_attributeCount == 0) {
            // if no attributes, need to reset
            xgen.setNextIsAttribute(false);
        }
    } else {
        super._serializeObjectId(bean, gen, provider, typeSer, objectId);
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(Object,JsonGenerator,SerializerProvider,TypeSerializer,WritableObjectId).bean","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(Object,JsonGenerator,SerializerProvider,TypeSerializer,WritableObjectId)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(Object,JsonGenerator,SerializerProvider,TypeSerializer,WritableObjectId).gen","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(Object,JsonGenerator,SerializerProvider,TypeSerializer,WritableObjectId)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(Object,JsonGenerator,SerializerProvider,TypeSerializer,WritableObjectId).provider","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(Object,JsonGenerator,SerializerProvider,TypeSerializer,WritableObjectId)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(Object,JsonGenerator,SerializerProvider,TypeSerializer,WritableObjectId).typeSer","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(Object,JsonGenerator,SerializerProvider,TypeSerializer,WritableObjectId)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(Object,JsonGenerator,SerializerProvider,TypeSerializer,WritableObjectId).objectId","Parameter_5","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._serializeObjectId(Object,JsonGenerator,SerializerProvider,TypeSerializer,WritableObjectId)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isAttribute(BeanPropertyWriter)","Method","No Comment","protected static boolean _isAttribute(BeanPropertyWriter bpw) {
    XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);
    return (info != null) && info.isAttribute();
}","boolean","protected , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isAttribute(BeanPropertyWriter).bpw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isAttribute(BeanPropertyWriter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isCData(BeanPropertyWriter)","Method","No Comment","protected static boolean _isCData(BeanPropertyWriter bpw) {
    XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);
    return (info != null) && info.isCData();
}","boolean","protected , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isCData(BeanPropertyWriter).bpw","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._isCData(BeanPropertyWriter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._orderAttributesFirst(BeanPropertyWriter[],BeanPropertyWriter[])","Method","* Method for re-sorting lists of bean properties such that attributes are strictly
     * written before elements.","protected static int _orderAttributesFirst(BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties) {
    int attrCount = 0;
    for (int i = 0, len = properties.length; i < len; ++i) {
        BeanPropertyWriter bpw = properties[i];
        if (!_isAttribute(bpw)) {
            continue;
        }
        // Move attribute a few places down as necessary
        int moveBy = i - attrCount;
        if (moveBy > 0) {
            System.arraycopy(properties, attrCount, properties, attrCount + 1, moveBy);
            properties[attrCount] = bpw;
            if (filteredProperties != null) {
                BeanPropertyWriter fbpw = filteredProperties[i];
                System.arraycopy(filteredProperties, attrCount, filteredProperties, attrCount + 1, moveBy);
                filteredProperties[attrCount] = fbpw;
            }
        }
        ++attrCount;
    }
    return attrCount;
}","int","protected , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._orderAttributesFirst(BeanPropertyWriter[],BeanPropertyWriter[]).properties","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._orderAttributesFirst(BeanPropertyWriter[],BeanPropertyWriter[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._orderAttributesFirst(BeanPropertyWriter[],BeanPropertyWriter[]).filteredProperties","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase._orderAttributesFirst(BeanPropertyWriter[],BeanPropertyWriter[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(BeanSerializerBase)","Constructor","No Comment","public XmlBeanSerializerBase(BeanSerializerBase src) {
    super(src);
    // Then make sure attributes are sorted before elements, keep track
    // of how many there are altogether
    int attrCount = 0;
    for (BeanPropertyWriter bpw : _props) {
        if (_isAttribute(bpw)) {
            // Yup: let's build re-ordered list then
            attrCount = _orderAttributesFirst(_props, _filteredProps);
            break;
        }
    }
    _attributeCount = attrCount;
    // also: pre-compute need, if any, for CDATA handling:
    BitSet cdata = null;
    for (int i = 0, len = _props.length; i < len; ++i) {
        BeanPropertyWriter bpw = _props[i];
        if (_isCData(bpw)) {
            if (cdata == null) {
                cdata = new BitSet(len);
            }
            cdata.set(i);
        }
    }
    _cdata = cdata;
    // And then collect namespace information
    _xmlNames = new QName[_props.length];
    int textIndex = -1;
    for (int i = 0, len = _props.length; i < len; ++i) {
        BeanPropertyWriter bpw = _props[i];
        XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);
        String ns = null;
        if (info != null) {
            ns = info.getNamespace();
            if (textIndex < 0 && info.isText()) {
                textIndex = i;
            }
        }
        _xmlNames[i] = new QName((ns == null) ? """" : ns, bpw.getName());
    }
    _textPropertyIndex = textIndex;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(BeanSerializerBase).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(BeanSerializerBase)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,ObjectIdWriter)","Constructor","No Comment","protected XmlBeanSerializerBase(XmlBeanSerializerBase src, ObjectIdWriter objectIdWriter) {
    super(src, objectIdWriter);
    _attributeCount = src._attributeCount;
    _textPropertyIndex = src._textPropertyIndex;
    _xmlNames = src._xmlNames;
    _cdata = src._cdata;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,ObjectIdWriter).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,ObjectIdWriter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,ObjectIdWriter).objectIdWriter","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,ObjectIdWriter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,ObjectIdWriter,Object)","Constructor","No Comment","protected XmlBeanSerializerBase(XmlBeanSerializerBase src, ObjectIdWriter objectIdWriter, Object filterId) {
    super(src, objectIdWriter, filterId);
    _attributeCount = src._attributeCount;
    _textPropertyIndex = src._textPropertyIndex;
    _xmlNames = src._xmlNames;
    _cdata = src._cdata;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,ObjectIdWriter,Object).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,ObjectIdWriter,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,ObjectIdWriter,Object).objectIdWriter","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,ObjectIdWriter,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,ObjectIdWriter,Object).filterId","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,ObjectIdWriter,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,Set,Set)","Constructor","No Comment","protected XmlBeanSerializerBase(XmlBeanSerializerBase src, Set<String> toIgnore, Set<String> toInclude) {
    super(src, toIgnore, toInclude);
    _attributeCount = src._attributeCount;
    _textPropertyIndex = src._textPropertyIndex;
    _xmlNames = src._xmlNames;
    _cdata = src._cdata;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,Set,Set).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,Set,Set)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,Set,Set).toIgnore","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,Set,Set)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,Set,Set).toInclude","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,Set,Set)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,NameTransformer)","Constructor","No Comment","public XmlBeanSerializerBase(XmlBeanSerializerBase src, NameTransformer transformer) {
    super(src, transformer);
    _attributeCount = src._attributeCount;
    _textPropertyIndex = src._textPropertyIndex;
    _xmlNames = src._xmlNames;
    _cdata = src._cdata;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,NameTransformer).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,NameTransformer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,NameTransformer).transformer","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,NameTransformer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,BeanPropertyWriter[],BeanPropertyWriter[])","Constructor","@since 2.11.1","protected XmlBeanSerializerBase(XmlBeanSerializerBase src, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties) {
    super(src, properties, filteredProperties);
    _attributeCount = src._attributeCount;
    _textPropertyIndex = src._textPropertyIndex;
    _xmlNames = src._xmlNames;
    _cdata = src._cdata;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,BeanPropertyWriter[],BeanPropertyWriter[]).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,BeanPropertyWriter[],BeanPropertyWriter[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,BeanPropertyWriter[],BeanPropertyWriter[]).properties","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,BeanPropertyWriter[],BeanPropertyWriter[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,BeanPropertyWriter[],BeanPropertyWriter[]).filteredProperties","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase.<init>(XmlBeanSerializerBase,BeanPropertyWriter[],BeanPropertyWriter[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider","Class","* We need to override some parts of
 * {@link com.fasterxml.jackson.databind.SerializerProvider}
 * implementation to handle oddities of XML output, like ""extra"" root element.","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",""
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serialVersionUID","Field","As of 2.7","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameLookup","Field","No Comment","protected final XmlRootNameLookup _rootNameLookup;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.copy()","Method","No Comment","@Override
public DefaultSerializerProvider copy() {
    return new XmlSerializerProvider(this);
}","DefaultSerializerProvider","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.withCaches(CacheProvider)","Method","No Comment","@Override
public DefaultSerializerProvider withCaches(CacheProvider cacheProvider) {
    return new XmlSerializerProvider(this, cacheProvider);
}","DefaultSerializerProvider","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.withCaches(CacheProvider).cacheProvider","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.withCaches(CacheProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.createInstance(SerializationConfig,SerializerFactory)","Method","No Comment","@Override
public DefaultSerializerProvider createInstance(SerializationConfig config, SerializerFactory jsf) {
    return new XmlSerializerProvider(this, config, jsf);
}","DefaultSerializerProvider","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.createInstance(SerializationConfig,SerializerFactory).config","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.createInstance(SerializationConfig,SerializerFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.createInstance(SerializationConfig,SerializerFactory).jsf","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.createInstance(SerializationConfig,SerializerFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object)","Method","No Comment","@SuppressWarnings(""resource"")
@Override
public void serializeValue(JsonGenerator gen, Object value) throws IOException {
    _generator = gen;
    if (value == null) {
        _serializeXmlNull(gen);
        return;
    }
    final Class<?> cls = value.getClass();
    final boolean asArray;
    final ToXmlGenerator xgen = _asXmlGenerator(gen);
    if (xgen == null) {
        // called by convertValue()
        asArray = false;
    } else {
        // [dataformat-xml#441]: allow ObjectNode unwrapping
        if (_shouldUnwrapObjectNode(xgen, value)) {
            _serializeUnwrappedObjectNode(xgen, value, null);
            return;
        }
        QName rootName = _rootNameFromConfig();
        if (rootName == null) {
            rootName = _rootNameLookup.findRootName(cls, _config);
        }
        _initWithRootName(xgen, rootName);
        asArray = TypeUtil.isIndexedType(_config.constructType(cls));
        if (asArray) {
            _startRootArray(xgen, rootName);
        }
    }
    // From super-class implementation
    final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);
    try {
        ser.serialize(value, gen, this);
    } catch (Exception e) {
        // but wrap RuntimeExceptions, to get path information
        throw _wrapAsIOE(gen, e);
    }
    // end of super-class implementation
    if (asArray) {
        gen.writeEndObject();
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object).gen","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object).value","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object,JavaType)","Method","No Comment","// since 2.11.1, was missing before
@Override
public void serializeValue(JsonGenerator gen, Object value, JavaType rootType) throws IOException {
    serializeValue(gen, value, rootType, null);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object,JavaType).gen","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object,JavaType)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object,JavaType).value","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object,JavaType)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object,JavaType).rootType","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object,JavaType)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object,JavaType,JsonSerializer)","Method","@since 2.1","@SuppressWarnings(""resource"")
@Override
public void serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser) throws IOException {
    _generator = gen;
    if (value == null) {
        _serializeXmlNull(gen);
        return;
    }
    // Let's ensure types are compatible at this point
    if ((rootType != null) && !rootType.getRawClass().isAssignableFrom(value.getClass())) {
        _reportIncompatibleRootType(value, rootType);
    }
    final boolean asArray;
    final ToXmlGenerator xgen = _asXmlGenerator(gen);
    if (xgen == null) {
        // called by convertValue()
        asArray = false;
    } else {
        // [dataformat-xml#441]: allow ObjectNode unwrapping
        if (_shouldUnwrapObjectNode(xgen, value)) {
            _serializeUnwrappedObjectNode(xgen, value, ser);
            return;
        }
        QName rootName = _rootNameFromConfig();
        if (rootName == null) {
            rootName = (rootType == null) ? _rootNameLookup.findRootName(value.getClass(), _config) : _rootNameLookup.findRootName(rootType, _config);
        }
        _initWithRootName(xgen, rootName);
        asArray = (rootType == null) ? TypeUtil.isIndexedType(_config.constructType(value.getClass())) : TypeUtil.isIndexedType(rootType);
        if (asArray) {
            _startRootArray(xgen, rootName);
        }
    }
    if (ser == null) {
        ser = findTypedValueSerializer(rootType, true, null);
    }
    // From super-class implementation
    try {
        ser.serialize(value, gen, this);
    } catch (Exception e) {
        // but others do need to be, to get path etc
        throw _wrapAsIOE(gen, e);
    }
    // end of super-class implementation
    if (asArray) {
        gen.writeEndObject();
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object,JavaType,JsonSerializer).gen","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object,JavaType,JsonSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object,JavaType,JsonSerializer).value","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object,JavaType,JsonSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object,JavaType,JsonSerializer).rootType","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object,JavaType,JsonSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object,JavaType,JsonSerializer).ser","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializeValue(JsonGenerator,Object,JavaType,JsonSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializePolymorphic(JsonGenerator,Object,JavaType,JsonSerializer,TypeSerializer)","Method","No Comment","@SuppressWarnings(""resource"")
// since 2.11.1, was missing before
@Override
public void serializePolymorphic(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> valueSer, TypeSerializer typeSer) throws IOException {
    _generator = gen;
    if (value == null) {
        _serializeXmlNull(gen);
        return;
    }
    // Let's ensure types are compatible at this point
    if ((rootType != null) && !rootType.getRawClass().isAssignableFrom(value.getClass())) {
        _reportIncompatibleRootType(value, rootType);
    }
    final boolean asArray;
    final ToXmlGenerator xgen = _asXmlGenerator(gen);
    if (xgen == null) {
        // called by convertValue()
        asArray = false;
    } else {
        QName rootName = _rootNameFromConfig();
        if (rootName == null) {
            rootName = (rootType == null) ? _rootNameLookup.findRootName(value.getClass(), _config) : _rootNameLookup.findRootName(rootType, _config);
        }
        _initWithRootName(xgen, rootName);
        asArray = (rootType == null) ? TypeUtil.isIndexedType(_config.constructType(value.getClass())) : TypeUtil.isIndexedType(rootType);
        if (asArray) {
            _startRootArray(xgen, rootName);
        }
    }
    // 21-May-2020: See comments in `jackson-databind/DefaultSerializerProvider`
    if (valueSer == null) {
        if ((rootType != null) && rootType.isContainerType()) {
            valueSer = findValueSerializer(rootType, null);
        } else {
            valueSer = findValueSerializer(value.getClass(), null);
        }
    }
    // From super-class implementation
    try {
        valueSer.serializeWithType(value, gen, this, typeSer);
    } catch (Exception e) {
        // but others do need to be, to get path etc
        throw _wrapAsIOE(gen, e);
    }
    // end of super-class implementation
    if (asArray) {
        gen.writeEndObject();
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializePolymorphic(JsonGenerator,Object,JavaType,JsonSerializer,TypeSerializer).gen","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializePolymorphic(JsonGenerator,Object,JavaType,JsonSerializer,TypeSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializePolymorphic(JsonGenerator,Object,JavaType,JsonSerializer,TypeSerializer).value","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializePolymorphic(JsonGenerator,Object,JavaType,JsonSerializer,TypeSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializePolymorphic(JsonGenerator,Object,JavaType,JsonSerializer,TypeSerializer).rootType","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializePolymorphic(JsonGenerator,Object,JavaType,JsonSerializer,TypeSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializePolymorphic(JsonGenerator,Object,JavaType,JsonSerializer,TypeSerializer).valueSer","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializePolymorphic(JsonGenerator,Object,JavaType,JsonSerializer,TypeSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializePolymorphic(JsonGenerator,Object,JavaType,JsonSerializer,TypeSerializer).typeSer","Parameter_5","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.serializePolymorphic(JsonGenerator,Object,JavaType,JsonSerializer,TypeSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeXmlNull(JsonGenerator)","Method","No Comment","protected void _serializeXmlNull(JsonGenerator gen) throws IOException {
    // 14-Nov-2016, tatu: As per [dataformat-xml#213], we may have explicitly
    //    configured root name...
    QName rootName = _rootNameFromConfig();
    if (rootName == null) {
        rootName = XmlRootNameLookup.ROOT_NAME_FOR_NULL;
    }
    if (gen instanceof ToXmlGenerator) {
        _initWithRootName((ToXmlGenerator) gen, rootName);
    }
    super.serializeValue(gen, null);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeXmlNull(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeXmlNull(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._startRootArray(ToXmlGenerator,QName)","Method","No Comment","protected void _startRootArray(ToXmlGenerator xgen, QName rootName) throws IOException {
    xgen.writeStartObject();
    // Could repeat root name, but what's the point? How to customize?
    xgen.writeFieldName(""item"");
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._startRootArray(ToXmlGenerator,QName).xgen","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._startRootArray(ToXmlGenerator,QName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._startRootArray(ToXmlGenerator,QName).rootName","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._startRootArray(ToXmlGenerator,QName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(ToXmlGenerator,QName)","Method","No Comment","protected void _initWithRootName(ToXmlGenerator xgen, QName rootName) throws IOException {
    // 28-Nov-2012, tatu: We should only initialize the root name if no name has been
    //   set, as per [dataformat-xml#42], to allow for custom serializers to work.
    if (!xgen.setNextNameIfMissing(rootName)) {
        // however, if we are root, we... insist
        if (xgen.inRoot()) {
            xgen.setNextName(rootName);
        }
    }
    xgen.initGenerator();
    String ns = rootName.getNamespaceURI();
    // [dataformat-xml#26] If we just try writing root element with namespace,
    // we will get an explicit prefix. But we'd rather use the default
    // namespace, so let's try to force that.
    if (ns != null && ns.length() > 0) {
        try {
            xgen.getStaxWriter().setDefaultNamespace(ns);
        } catch (XMLStreamException e) {
            StaxUtil.throwAsGenerationException(e, xgen);
        }
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(ToXmlGenerator,QName).xgen","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(ToXmlGenerator,QName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(ToXmlGenerator,QName).rootName","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._initWithRootName(ToXmlGenerator,QName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._rootNameFromConfig()","Method","No Comment","protected QName _rootNameFromConfig() {
    PropertyName name = _config.getFullRootName();
    if (name == null) {
        return null;
    }
    String ns = name.getNamespace();
    if (ns == null || ns.isEmpty()) {
        return new QName(name.getSimpleName());
    }
    return new QName(ns, name.getSimpleName());
}","QName","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._shouldUnwrapObjectNode(ToXmlGenerator,Object)","Method","@since 2.13","protected boolean _shouldUnwrapObjectNode(ToXmlGenerator xgen, Object value) {
    return xgen.isEnabled(ToXmlGenerator.Feature.UNWRAP_ROOT_OBJECT_NODE) && (value instanceof ObjectNode) && (((ObjectNode) value).size() == 1);
}","boolean","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._shouldUnwrapObjectNode(ToXmlGenerator,Object).xgen","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._shouldUnwrapObjectNode(ToXmlGenerator,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._shouldUnwrapObjectNode(ToXmlGenerator,Object).value","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._shouldUnwrapObjectNode(ToXmlGenerator,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeUnwrappedObjectNode(ToXmlGenerator,Object,JsonSerializer)","Method","@since 2.13","protected void _serializeUnwrappedObjectNode(ToXmlGenerator xgen, Object value, JsonSerializer<Object> ser) throws IOException {
    ObjectNode root = (ObjectNode) value;
    Map.Entry<String, JsonNode> entry = root.fields().next();
    final JsonNode newRoot = entry.getValue();
    // No namespace associated with JsonNode:
    _initWithRootName(xgen, new QName(entry.getKey()));
    if (ser == null) {
        ser = findTypedValueSerializer(newRoot.getClass(), true, null);
    }
    // From super-class implementation
    try {
        ser.serialize(newRoot, xgen, this);
    } catch (Exception e) {
        // but others do need to be, to get path etc
        throw _wrapAsIOE(xgen, e);
    }
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeUnwrappedObjectNode(ToXmlGenerator,Object,JsonSerializer).xgen","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeUnwrappedObjectNode(ToXmlGenerator,Object,JsonSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeUnwrappedObjectNode(ToXmlGenerator,Object,JsonSerializer).value","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeUnwrappedObjectNode(ToXmlGenerator,Object,JsonSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeUnwrappedObjectNode(ToXmlGenerator,Object,JsonSerializer).ser","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._serializeUnwrappedObjectNode(ToXmlGenerator,Object,JsonSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._asXmlGenerator(JsonGenerator)","Method","No Comment","protected ToXmlGenerator _asXmlGenerator(JsonGenerator gen) throws JsonMappingException {
    if (!(gen instanceof ToXmlGenerator)) {
        // [dataformat-xml#71]: We sometimes get TokenBuffer, which is fine
        if (gen instanceof TokenBuffer) {
            return null;
        }
        // but verify
        throw JsonMappingException.from(gen, ""XmlMapper does not work with generators of type other than `ToXmlGenerator`; got: `"" + gen.getClass().getName() + ""`"");
    }
    return (ToXmlGenerator) gen;
}","ToXmlGenerator","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._asXmlGenerator(JsonGenerator).gen","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._asXmlGenerator(JsonGenerator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(JsonGenerator,Exception)","Method","No Comment","protected IOException _wrapAsIOE(JsonGenerator g, Exception e) {
    if (e instanceof IOException) {
        return (IOException) e;
    }
    String msg = e.getMessage();
    if (msg == null) {
        msg = ""[no message for "" + e.getClass().getName() + ""]"";
    }
    return new JsonMappingException(g, msg, e);
}","IOException","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(JsonGenerator,Exception).g","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(JsonGenerator,Exception)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(JsonGenerator,Exception).e","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider._wrapAsIOE(JsonGenerator,Exception)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.<init>(XmlRootNameLookup)","Constructor","No Comment","public XmlSerializerProvider(XmlRootNameLookup rootNames) {
    super();
    _rootNameLookup = rootNames;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.<init>(XmlRootNameLookup).rootNames","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.<init>(XmlRootNameLookup)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.<init>(XmlSerializerProvider,SerializationConfig,SerializerFactory)","Constructor","No Comment","public XmlSerializerProvider(XmlSerializerProvider src, SerializationConfig config, SerializerFactory f) {
    super(src, config, f);
    _rootNameLookup = src._rootNameLookup;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.<init>(XmlSerializerProvider,SerializationConfig,SerializerFactory).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.<init>(XmlSerializerProvider,SerializationConfig,SerializerFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.<init>(XmlSerializerProvider,SerializationConfig,SerializerFactory).config","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.<init>(XmlSerializerProvider,SerializationConfig,SerializerFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.<init>(XmlSerializerProvider,SerializationConfig,SerializerFactory).f","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.<init>(XmlSerializerProvider,SerializationConfig,SerializerFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.<init>(XmlSerializerProvider,CacheProvider)","Constructor","* @since 2.16","protected XmlSerializerProvider(XmlSerializerProvider src, CacheProvider cp) {
    super(src, cp);
    _rootNameLookup = src._rootNameLookup;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.<init>(XmlSerializerProvider,CacheProvider).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.<init>(XmlSerializerProvider,CacheProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.<init>(XmlSerializerProvider,CacheProvider).cp","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.<init>(XmlSerializerProvider,CacheProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.<init>(XmlSerializerProvider)","Constructor","* @since 2.8.9","protected XmlSerializerProvider(XmlSerializerProvider src) {
    super(src);
    // 21-May-2018, tatu: As per [dataformat-xml#282], should NOT really copy
    //    root name lookup as that may link back to diff version, configuration
    _rootNameLookup = new XmlRootNameLookup();
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.<init>(XmlSerializerProvider).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider.<init>(XmlSerializerProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer","Class","* Copy of {@link UnwrappingBeanSerializer} required to extend
 * {@link XmlBeanSerializerBase} for XML-specific handling.
 * 
 * @author Pascal Gélinas
 *","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase",""
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer._nameTransformer","Field","* Transformer used to add prefix and/or suffix for properties of unwrapped
     * POJO.","protected final NameTransformer _nameTransformer;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.unwrappingSerializer(NameTransformer)","Method","No Comment","@Override
public JsonSerializer<Object> unwrappingSerializer(NameTransformer transformer) {
    // !!! 23-Jan-2012, tatu: Should we chain transformers?
    return new UnwrappingXmlBeanSerializer(this, transformer);
}","JsonSerializer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.unwrappingSerializer(NameTransformer).transformer","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.unwrappingSerializer(NameTransformer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.isUnwrappingSerializer()","Method","No Comment","@Override
public boolean isUnwrappingSerializer() {
    // sure is
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withObjectIdWriter(ObjectIdWriter)","Method","No Comment","@Override
public BeanSerializerBase withObjectIdWriter(ObjectIdWriter objectIdWriter) {
    return new UnwrappingXmlBeanSerializer(this, objectIdWriter);
}","BeanSerializerBase","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withObjectIdWriter(ObjectIdWriter).objectIdWriter","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withObjectIdWriter(ObjectIdWriter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withFilterId(Object)","Method","No Comment","@Override
public BeanSerializerBase withFilterId(Object filterId) {
    return new UnwrappingXmlBeanSerializer(this, _objectIdWriter, filterId);
}","BeanSerializerBase","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withFilterId(Object).filterId","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withFilterId(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withByNameInclusion(Set,Set)","Method","No Comment","// since 2.12
@Override
protected BeanSerializerBase withByNameInclusion(Set<String> toIgnore, Set<String> toInclude) {
    return new UnwrappingXmlBeanSerializer(this, toIgnore, toInclude);
}","BeanSerializerBase","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withByNameInclusion(Set,Set).toIgnore","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withByNameInclusion(Set,Set)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withByNameInclusion(Set,Set).toInclude","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withByNameInclusion(Set,Set)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withProperties(BeanPropertyWriter[],BeanPropertyWriter[])","Method","No Comment","// since 2.11.1
@Override
protected BeanSerializerBase withProperties(BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties) {
    return new UnwrappingXmlBeanSerializer(this, properties, filteredProperties);
}","BeanSerializerBase","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withProperties(BeanPropertyWriter[],BeanPropertyWriter[]).properties","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withProperties(BeanPropertyWriter[],BeanPropertyWriter[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withProperties(BeanPropertyWriter[],BeanPropertyWriter[]).filteredProperties","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.withProperties(BeanPropertyWriter[],BeanPropertyWriter[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.asArraySerializer()","Method","* JSON Array output can not be done if unwrapping operation is requested;
     * so implementation will simply return 'this'.","@Override
protected BeanSerializerBase asArraySerializer() {
    return this;
}","BeanSerializerBase","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialize(Object,JsonGenerator,SerializerProvider)","Method","* Main serialization method that will delegate actual output to configured
     * {@link BeanPropertyWriter} instances.","@Override
public final void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {
    if (_objectIdWriter != null) {
        _serializeWithObjectId(bean, jgen, provider, false);
        return;
    }
    if (_propertyFilterId != null) {
        serializeFieldsFiltered(bean, jgen, provider);
    } else {
        serializeFields(bean, jgen, provider);
    }
}","void","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialize(Object,JsonGenerator,SerializerProvider).bean","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialize(Object,JsonGenerator,SerializerProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialize(Object,JsonGenerator,SerializerProvider).jgen","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialize(Object,JsonGenerator,SerializerProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialize(Object,JsonGenerator,SerializerProvider).provider","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.serialize(Object,JsonGenerator,SerializerProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.toString()","Method","No Comment","@Override
public String toString() {
    return ""UnwrappingXmlBeanSerializer for "" + handledType().getName();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(XmlBeanSerializerBase,NameTransformer)","Constructor","* Constructor used for creating unwrapping instance of a standard
     * <code>BeanSerializer</code>","public UnwrappingXmlBeanSerializer(XmlBeanSerializerBase src, NameTransformer transformer) {
    super(src, transformer);
    _nameTransformer = transformer;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(XmlBeanSerializerBase,NameTransformer).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(XmlBeanSerializerBase,NameTransformer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(XmlBeanSerializerBase,NameTransformer).transformer","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(XmlBeanSerializerBase,NameTransformer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,ObjectIdWriter)","Constructor","No Comment","public UnwrappingXmlBeanSerializer(UnwrappingXmlBeanSerializer src, ObjectIdWriter objectIdWriter) {
    super(src, objectIdWriter);
    _nameTransformer = src._nameTransformer;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,ObjectIdWriter).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,ObjectIdWriter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,ObjectIdWriter).objectIdWriter","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,ObjectIdWriter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,ObjectIdWriter,Object)","Constructor","No Comment","public UnwrappingXmlBeanSerializer(UnwrappingXmlBeanSerializer src, ObjectIdWriter objectIdWriter, Object filterId) {
    super(src, objectIdWriter, filterId);
    _nameTransformer = src._nameTransformer;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,ObjectIdWriter,Object).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,ObjectIdWriter,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,ObjectIdWriter,Object).objectIdWriter","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,ObjectIdWriter,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,ObjectIdWriter,Object).filterId","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,ObjectIdWriter,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,Set,Set)","Constructor","No Comment","protected UnwrappingXmlBeanSerializer(UnwrappingXmlBeanSerializer src, Set<String> toIgnore, Set<String> toInclude) {
    super(src, toIgnore, toInclude);
    _nameTransformer = src._nameTransformer;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,Set,Set).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,Set,Set)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,Set,Set).toIgnore","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,Set,Set)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,Set,Set).toInclude","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,Set,Set)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,BeanPropertyWriter[],BeanPropertyWriter[])","Constructor","No Comment","protected UnwrappingXmlBeanSerializer(UnwrappingXmlBeanSerializer src, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties) {
    super(src, properties, filteredProperties);
    _nameTransformer = src._nameTransformer;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,BeanPropertyWriter[],BeanPropertyWriter[]).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,BeanPropertyWriter[],BeanPropertyWriter[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,BeanPropertyWriter[],BeanPropertyWriter[]).properties","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,BeanPropertyWriter[],BeanPropertyWriter[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,BeanPropertyWriter[],BeanPropertyWriter[]).filteredProperties","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.UnwrappingXmlBeanSerializer.<init>(UnwrappingXmlBeanSerializer,BeanPropertyWriter[],BeanPropertyWriter[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator","Class","* {@link JsonGenerator} that outputs JAXB-style XML output instead of JSON content.
 * Operation requires calling code (usually either standard Jackson serializers,
 * or in some cases (like <code>BeanSerializer</code>) customized ones) to do
 * additional configuration calls beyond regular {@link JsonGenerator} API,
 * mostly to pass namespace information.","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.core.base.GeneratorBase",""
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.DEFAULT_UNKNOWN_ELEMENT","Field","* If we support optional definition of element names, this is the element
     * name to use...","protected final static String DEFAULT_UNKNOWN_ELEMENT = ""unknown"";","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlWriter","Field","No Comment","protected final XMLStreamWriter2 _xmlWriter;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._originalXmlWriter","Field","No Comment","protected final XMLStreamWriter _originalXmlWriter;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._stax2Emulation","Field","* Marker flag set if the underlying stream writer has to emulate
     * Stax2 API: this is problematic if trying to use {@link #writeRaw} calls.","protected final boolean _stax2Emulation;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._streamWriteConstraints","Field","* @since 2.16","protected final StreamWriteConstraints _streamWriteConstraints;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._formatFeatures","Field","* Bit flag composed of bits that indicate which
     * {@link ToXmlGenerator.Feature}s
     * are enabled.","protected int _formatFeatures;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._xmlPrettyPrinter","Field","* We may need to use XML-specific indentation as well","protected XmlPrettyPrinter _xmlPrettyPrinter;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nameProcessor","Field","* Escapes names with invalid XML characters
     *
     * @since 2.14","protected XmlNameProcessor _nameProcessor;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._initialized","Field","* Marker set when {@link #initGenerator()} has been called or not.
     * 
     * @since 2.2","protected boolean _initialized;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextName","Field","* Element or attribute name to use for next output call.
     * Assigned by either code that initiates serialization
     * or bean serializer.","protected QName _nextName = null;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsAttribute","Field","* Marker flag that indicates whether next name to write
     * implies an attribute (true) or element (false)","protected boolean _nextIsAttribute = false;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsUnwrapped","Field","* Marker flag used to indicate that the next write of a (property)
     * value should be done without using surrounding start/end
     * elements. Flag is to be cleared once unwrapping has been triggered
     * once.","protected boolean _nextIsUnwrapped = false;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nextIsCData","Field","* Marker flag used to indicate that the next write of a (property)
     * value should be as CData","protected boolean _nextIsCData = false;","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._elementNameStack","Field","* To support proper serialization of arrays it is necessary to keep
     * stack of element names, so that we can ""revert"" to earlier","protected LinkedList<QName> _elementNameStack = new LinkedList<QName>();","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._nameToEncode","Field","* Reusable internal value object
     *
     * @since 2.14","protected XmlNameProcessor.XmlName _nameToEncode = new XmlNameProcessor.XmlName();","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.initGenerator()","Method","* Method called before writing any other output, to optionally
     * output XML declaration.","public void initGenerator() throws IOException {
    if (_initialized) {
        return;
    }
    _initialized = true;
    try {
        boolean xmlDeclWritten;
        if (Feature.WRITE_XML_1_1.enabledIn(_formatFeatures)) {
            _xmlWriter.writeStartDocument(""UTF-8"", ""1.1"");
            xmlDeclWritten = true;
        } else if (Feature.WRITE_XML_DECLARATION.enabledIn(_formatFeatures)) {
            _xmlWriter.writeStartDocument(""UTF-8"", ""1.0"");
            xmlDeclWritten = true;
        } else {
            xmlDeclWritten = false;
        }
        // as per [dataformat-xml#172], try adding indentation
        if (xmlDeclWritten && (_xmlPrettyPrinter != null)) {
            // ... but only if it is likely to succeed:
            if (!_stax2Emulation) {
                _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter);
            }
        }
        if (Feature.AUTO_DETECT_XSI_TYPE.enabledIn(_formatFeatures)) {
            _xmlWriter.setPrefix(""xsi"", XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI);
        }
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._constructDefaultPrettyPrinter()","Method","No Comment","@Override
protected PrettyPrinter _constructDefaultPrettyPrinter() {
    return new DefaultXmlPrettyPrinter();
}","PrettyPrinter","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setPrettyPrinter(PrettyPrinter)","Method","No Comment","@Override
public JsonGenerator setPrettyPrinter(PrettyPrinter pp) {
    _cfgPrettyPrinter = pp;
    _xmlPrettyPrinter = (pp instanceof XmlPrettyPrinter) ? (XmlPrettyPrinter) pp : null;
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setPrettyPrinter(PrettyPrinter).pp","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setPrettyPrinter(PrettyPrinter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.getOutputTarget()","Method","No Comment","@Override
public Object getOutputTarget() {
    // Stax2 does not expose underlying target, so best we can do is to return
    // the Stax XMLStreamWriter instance:
    return _originalXmlWriter;
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.getOutputBuffered()","Method","* Stax2 does not expose buffered content amount, so we can only return
     * <code>-1</code> from here","@Override
public int getOutputBuffered() {
    return -1;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.getFormatFeatures()","Method","No Comment","@Override
public int getFormatFeatures() {
    return _formatFeatures;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.overrideFormatFeatures(int,int)","Method","No Comment","// since 2.7
@Override
public JsonGenerator overrideFormatFeatures(int values, int mask) {
    int oldF = _formatFeatures;
    int newF = (_formatFeatures & ~mask) | (values & mask);
    if (oldF != newF) {
        _formatFeatures = newF;
    }
    return this;
}","JsonGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.overrideFormatFeatures(int,int).values","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.overrideFormatFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.overrideFormatFeatures(int,int).mask","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.overrideFormatFeatures(int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.streamWriteConstraints()","Method","No Comment","@Override
public StreamWriteConstraints streamWriteConstraints() {
    return _streamWriteConstraints;
}","StreamWriteConstraints","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.enable(Feature)","Method","No Comment","public ToXmlGenerator enable(Feature f) {
    _formatFeatures |= f.getMask();
    return this;
}","ToXmlGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.enable(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.enable(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.disable(Feature)","Method","No Comment","public ToXmlGenerator disable(Feature f) {
    _formatFeatures &= ~f.getMask();
    return this;
}","ToXmlGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.disable(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.disable(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.isEnabled(Feature)","Method","No Comment","public final boolean isEnabled(Feature f) {
    return (_formatFeatures & f.getMask()) != 0;
}","boolean","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.isEnabled(Feature).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.isEnabled(Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.configure(Feature,boolean)","Method","No Comment","public ToXmlGenerator configure(Feature f, boolean state) {
    if (state) {
        enable(f);
    } else {
        disable(f);
    }
    return this;
}","ToXmlGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.configure(Feature,boolean).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.configure(Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.configure(Feature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.configure(Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.canWriteFormattedNumbers()","Method","No Comment","@Override
public boolean canWriteFormattedNumbers() {
    return true;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.getWriteCapabilities()","Method","No Comment","// @since 2.12
@Override
public JacksonFeatureSet<StreamWriteCapability> getWriteCapabilities() {
    return DEFAULT_TEXTUAL_WRITE_CAPABILITIES;
}","JacksonFeatureSet","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.inRoot()","Method","@since 2.7.5","public boolean inRoot() {
    return _writeContext.inRoot();
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.getStaxWriter()","Method","* Method that allows application direct access to underlying
     * Stax {@link XMLStreamWriter}. Note that use of writer is
     * discouraged, and may interfere with processing of this writer;
     * however, occasionally it may be necessary.
     *<p>
     * Note: writer instance will always be of type
     * {@link org.codehaus.stax2.XMLStreamWriter2} (including
     * Typed Access API) so upcasts are safe.","public XMLStreamWriter getStaxWriter() {
    return _xmlWriter;
}","XMLStreamWriter","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsAttribute(boolean)","Method","No Comment","public void setNextIsAttribute(boolean isAttribute) {
    _nextIsAttribute = isAttribute;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsAttribute(boolean).isAttribute","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsAttribute(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsUnwrapped(boolean)","Method","No Comment","public void setNextIsUnwrapped(boolean isUnwrapped) {
    _nextIsUnwrapped = isUnwrapped;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsUnwrapped(boolean).isUnwrapped","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsUnwrapped(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsCData(boolean)","Method","No Comment","public void setNextIsCData(boolean isCData) {
    _nextIsCData = isCData;
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsCData(boolean).isCData","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextIsCData(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(QName)","Method","No Comment","public final void setNextName(QName name) {
    _nextName = name;
}","void","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(QName).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextName(QName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextNameIfMissing(QName)","Method","* Method that does same as {@link #setNextName}, unless
     * a name has already been set.
     * 
     * @since 2.1.2","public final boolean setNextNameIfMissing(QName name) {
    if (_nextName == null) {
        _nextName = name;
        return true;
    }
    return false;
}","boolean","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextNameIfMissing(QName).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.setNextNameIfMissing(QName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(QName,QName)","Method","* Methdod called when a structured (collection, array, map) is being
     * output.
     * 
     * @param wrapperName Element used as wrapper around elements, if any (null if none)
     * @param wrappedName Element used around individual content items (can not
     *   be null)","public void startWrappedValue(QName wrapperName, QName wrappedName) throws IOException {
    if (wrapperName != null) {
        try {
            if (_xmlPrettyPrinter != null) {
                _xmlPrettyPrinter.writeStartElement(_xmlWriter, wrapperName.getNamespaceURI(), wrapperName.getLocalPart());
            } else {
                _xmlWriter.writeStartElement(wrapperName.getNamespaceURI(), wrapperName.getLocalPart());
            }
        } catch (XMLStreamException e) {
            StaxUtil.throwAsGenerationException(e, this);
        }
    }
    this.setNextName(wrappedName);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(QName,QName).wrapperName","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(QName,QName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(QName,QName).wrappedName","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.startWrappedValue(QName,QName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(QName,QName)","Method","* Method called after a structured collection output has completed","public void finishWrappedValue(QName wrapperName, QName wrappedName) throws IOException {
    // First: wrapper to close?
    if (wrapperName != null) {
        try {
            if (_xmlPrettyPrinter != null) {
                _xmlPrettyPrinter.writeEndElement(_xmlWriter, _writeContext.getEntryCount());
            } else {
                _xmlWriter.writeEndElement();
            }
        } catch (XMLStreamException e) {
            StaxUtil.throwAsGenerationException(e, this);
        }
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(QName,QName).wrapperName","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(QName,QName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(QName,QName).wrappedName","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.finishWrappedValue(QName,QName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRepeatedFieldName()","Method","* Trivial helper method called when to add a replicated wrapper name
     * 
     * @since 2.2","public void writeRepeatedFieldName() throws IOException {
    if (_writeContext.writeFieldName(_nextName.getLocalPart()) == JsonWriteContext.STATUS_EXPECT_VALUE) {
        _reportError(""Can not write a field name, expecting a value"");
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(SerializableString)","Method","No Comment","@Override
public void writeFieldName(SerializableString name) throws IOException {
    writeFieldName(name.getValue());
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(SerializableString).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(String)","Method","No Comment","@Override
public final void writeFieldName(String name) throws IOException {
    if (_writeContext.writeFieldName(name) == JsonWriteContext.STATUS_EXPECT_VALUE) {
        _reportError(""Can not write a field name, expecting a value"");
    }
    String ns;
    // 30-Jan-2024, tatu: Surprise!
    if (Feature.AUTO_DETECT_XSI_TYPE.enabledIn(_formatFeatures) && ""xsi:type"".equals(name)) {
        setNextName(new QName(XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI, ""type"", ""xsi""));
        setNextIsAttribute(true);
    } else {
        // Should this ever get called?
        ns = (_nextName == null) ? """" : _nextName.getNamespaceURI();
        _nameToEncode.namespace = ns;
        _nameToEncode.localPart = name;
        _nameProcessor.encodeName(_nameToEncode);
        setNextName(new QName(_nameToEncode.namespace, _nameToEncode.localPart));
    }
}","void","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(String).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeFieldName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStringField(String,String)","Method","No Comment","@Override
public final void writeStringField(String fieldName, String value) throws IOException {
    writeFieldName(fieldName);
    writeString(value);
}","void","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStringField(String,String).fieldName","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStringField(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStringField(String,String).value","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStringField(String,String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartArray()","Method","No Comment","@Override
public final void writeStartArray() throws IOException {
    _verifyValueWrite(""start an array"");
    _writeContext = _writeContext.createChildArrayContext();
    streamWriteConstraints().validateNestingDepth(_writeContext.getNestingDepth());
    if (_cfgPrettyPrinter != null) {
        _cfgPrettyPrinter.writeStartArray(this);
    } else {
        // nothing to do here; no-operation
    }
}","void","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndArray()","Method","No Comment","@Override
public final void writeEndArray() throws IOException {
    if (!_writeContext.inArray()) {
        _reportError(""Current context not Array but "" + _writeContext.typeDesc());
    }
    if (_cfgPrettyPrinter != null) {
        _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount());
    } else {
        // nothing to do here; no-operation
    }
    _writeContext = _writeContext.getParent();
}","void","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStartObject()","Method","No Comment","@Override
public final void writeStartObject() throws IOException {
    _verifyValueWrite(""start an object"");
    _writeContext = _writeContext.createChildObjectContext();
    streamWriteConstraints().validateNestingDepth(_writeContext.getNestingDepth());
    if (_cfgPrettyPrinter != null) {
        _cfgPrettyPrinter.writeStartObject(this);
    } else {
        _handleStartObject();
    }
}","void","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeEndObject()","Method","No Comment","@Override
public final void writeEndObject() throws IOException {
    if (!_writeContext.inObject()) {
        _reportError(""Current context not Object but "" + _writeContext.typeDesc());
    }
    _writeContext = _writeContext.getParent();
    if (_cfgPrettyPrinter != null) {
        // as per [Issue#45], need to suppress indentation if only attributes written:
        int count = _nextIsAttribute ? 0 : _writeContext.getEntryCount();
        _cfgPrettyPrinter.writeEndObject(this, count);
    } else {
        _handleEndObject();
    }
}","void","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleStartObject()","Method","note: public just because pretty printer needs to make a callback","public final void _handleStartObject() throws IOException {
    if (_nextName == null) {
        handleMissingName();
    }
    // Need to keep track of names to make Lists work correctly
    _elementNameStack.addLast(_nextName);
    try {
        _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
}","void","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._handleEndObject()","Method","note: public just because pretty printer needs to make a callback","public final void _handleEndObject() throws IOException {
    // We may want to repeat same element, so:
    if (_elementNameStack.isEmpty()) {
        throw new JsonGenerationException(""Can not write END_ELEMENT without open START_ELEMENT"", this);
    }
    _nextName = _elementNameStack.removeLast();
    try {
        // note: since attributes don't nest, can only have one attribute active, so:
        _nextIsAttribute = false;
        _xmlWriter.writeEndElement();
        // [databind-xml#172]: possibly also need indentation
        if (_elementNameStack.isEmpty() && (_xmlPrettyPrinter != null)) {
            // ... but only if it is likely to succeed:
            if (!_stax2Emulation) {
                _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter);
            }
        }
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
}","void","public , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(String)","Method","No Comment","@Override
public void writeString(String text) throws IOException {
    if (text == null) {
        // [dataformat-xml#413]
        writeNull();
        return;
    }
    _verifyValueWrite(""write String value"");
    if (_nextName == null) {
        handleMissingName();
    }
    try {
        if (_nextIsAttribute) {
            // must write attribute name and value with one call
            _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text);
        } else if (checkNextIsUnwrapped()) {
            // [dataformat-xml#56] Should figure out how to prevent indentation for end element
            //   but for now, let's just make sure structure is correct
            //if (_xmlPrettyPrinter != null) { ... }
            if (_nextIsCData) {
                _xmlWriter.writeCData(text);
            } else {
                _xmlWriter.writeCharacters(text);
            }
        } else if (_xmlPrettyPrinter != null) {
            _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, _nextIsCData);
        } else {
            _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());
            if (_nextIsCData) {
                _xmlWriter.writeCData(text);
            } else {
                _xmlWriter.writeCharacters(text);
            }
            _xmlWriter.writeEndElement();
        }
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(String).text","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[],int,int)","Method","No Comment","@Override
public void writeString(char[] text, int offset, int len) throws IOException {
    _verifyValueWrite(""write String value"");
    if (_nextName == null) {
        handleMissingName();
    }
    try {
        if (_nextIsAttribute) {
            _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len));
        } else if (checkNextIsUnwrapped()) {
            // should we consider pretty-printing or not?
            if (_nextIsCData) {
                _xmlWriter.writeCData(text, offset, len);
            } else {
                _xmlWriter.writeCharacters(text, offset, len);
            }
        } else if (_xmlPrettyPrinter != null) {
            _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, offset, len, _nextIsCData);
        } else {
            _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());
            if (_nextIsCData) {
                _xmlWriter.writeCData(text, offset, len);
            } else {
                _xmlWriter.writeCharacters(text, offset, len);
            }
            _xmlWriter.writeEndElement();
        }
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(SerializableString)","Method","No Comment","@Override
public void writeString(SerializableString text) throws IOException {
    writeString(text.getValue());
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(SerializableString).text","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeString(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawUTF8String(byte[],int,int)","Method","No Comment","@Override
public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException {
    // could add support for this case if we really want it (and can make Stax2 support it)
    _reportUnsupportedOperation();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawUTF8String(byte[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawUTF8String(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawUTF8String(byte[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeUTF8String(byte[],int,int)","Method","No Comment","@Override
public void writeUTF8String(byte[] text, int offset, int length) throws IOException {
    // could add support for this case if we really want it (and can make Stax2 support it)
    _reportUnsupportedOperation();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeUTF8String(byte[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeUTF8String(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeUTF8String(byte[],int,int).length","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeUTF8String(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(String)","Method","No Comment","@Override
public void writeRawValue(String text) throws IOException {
    // [dataformat-xml#39]
    if (_stax2Emulation) {
        _reportUnimplementedStax2(""writeRawValue"");
    }
    try {
        _verifyValueWrite(""write raw value"");
        if (_nextName == null) {
            handleMissingName();
        }
        if (_nextIsAttribute) {
            _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text);
        } else if (checkNextIsUnwrapped()) {
            _xmlWriter.writeRaw(text);
        } else {
            _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());
            _xmlWriter.writeRaw(text);
            _xmlWriter.writeEndElement();
        }
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(String).text","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(String,int,int)","Method","No Comment","@Override
public void writeRawValue(String text, int offset, int len) throws IOException {
    // [dataformat-xml#39]
    if (_stax2Emulation) {
        _reportUnimplementedStax2(""writeRawValue"");
    }
    try {
        _verifyValueWrite(""write raw value"");
        if (_nextName == null) {
            handleMissingName();
        }
        if (_nextIsAttribute) {
            _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text.substring(offset, offset + len));
        } else if (checkNextIsUnwrapped()) {
            _xmlWriter.writeRaw(text, offset, len);
        } else {
            _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());
            _xmlWriter.writeRaw(text, offset, len);
            _xmlWriter.writeEndElement();
        }
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(String,int,int).text","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(String,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(String,int,int).len","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[],int,int)","Method","No Comment","@Override
public void writeRawValue(char[] text, int offset, int len) throws IOException {
    // [dataformat-xml#39]
    if (_stax2Emulation) {
        _reportUnimplementedStax2(""writeRawValue"");
    }
    _verifyValueWrite(""write raw value"");
    if (_nextName == null) {
        handleMissingName();
    }
    try {
        if (_nextIsAttribute) {
            _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len));
        } else if (checkNextIsUnwrapped()) {
            _xmlWriter.writeRaw(text, offset, len);
        } else {
            _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());
            _xmlWriter.writeRaw(text, offset, len);
            _xmlWriter.writeEndElement();
        }
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(SerializableString)","Method","No Comment","@Override
public void writeRawValue(SerializableString text) throws IOException {
    _reportUnsupportedOperation();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(SerializableString).text","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRawValue(SerializableString)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(String)","Method","No Comment","@Override
public void writeRaw(String text) throws IOException {
    // [dataformat-xml#39]
    if (_stax2Emulation) {
        _reportUnimplementedStax2(""writeRaw"");
    }
    try {
        _xmlWriter.writeRaw(text);
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(String).text","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(String,int,int)","Method","No Comment","@Override
public void writeRaw(String text, int offset, int len) throws IOException {
    // [dataformat-xml#39]
    if (_stax2Emulation) {
        _reportUnimplementedStax2(""writeRaw"");
    }
    try {
        _xmlWriter.writeRaw(text, offset, len);
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(String,int,int).text","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(String,int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(String,int,int).len","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(String,int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char[],int,int)","Method","No Comment","@Override
public void writeRaw(char[] text, int offset, int len) throws IOException {
    // [dataformat-xml#39]
    if (_stax2Emulation) {
        _reportUnimplementedStax2(""writeRaw"");
    }
    try {
        _xmlWriter.writeRaw(text, offset, len);
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char[],int,int).text","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char)","Method","No Comment","@Override
public void writeRaw(char c) throws IOException {
    writeRaw(String.valueOf(c));
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char).c","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeRaw(char)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(Base64Variant,byte[],int,int)","Method","No Comment","@Override
public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException {
    if (data == null) {
        writeNull();
        return;
    }
    _verifyValueWrite(""write Binary value"");
    if (_nextName == null) {
        handleMissingName();
    }
    final org.codehaus.stax2.typed.Base64Variant stax2base64v = StaxUtil.toStax2Base64Variant(b64variant);
    try {
        if (_nextIsAttribute) {
            // Stax2 API only has 'full buffer' write method:
            byte[] fullBuffer = toFullBuffer(data, offset, len);
            _xmlWriter.writeBinaryAttribute(stax2base64v, """", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer);
        } else if (checkNextIsUnwrapped()) {
            // should we consider pretty-printing or not?
            _xmlWriter.writeBinary(stax2base64v, data, offset, len);
        } else {
            if (_xmlPrettyPrinter != null) {
                _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), stax2base64v, data, offset, len);
            } else {
                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());
                _xmlWriter.writeBinary(stax2base64v, data, offset, len);
                _xmlWriter.writeEndElement();
            }
        }
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(Base64Variant,byte[],int,int).b64variant","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(Base64Variant,byte[],int,int).data","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(Base64Variant,byte[],int,int).offset","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(Base64Variant,byte[],int,int).len","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(Base64Variant,byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(Base64Variant,InputStream,int)","Method","No Comment","@Override
public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException {
    if (data == null) {
        writeNull();
        return 0;
    }
    _verifyValueWrite(""write Binary value"");
    if (_nextName == null) {
        handleMissingName();
    }
    final org.codehaus.stax2.typed.Base64Variant stax2base64v = StaxUtil.toStax2Base64Variant(b64variant);
    try {
        if (_nextIsAttribute) {
            // Stax2 API only has 'full buffer' write method:
            byte[] fullBuffer = toFullBuffer(data, dataLength);
            _xmlWriter.writeBinaryAttribute(stax2base64v, """", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer);
        } else if (checkNextIsUnwrapped()) {
            // should we consider pretty-printing or not?
            writeStreamAsBinary(stax2base64v, data, dataLength);
        } else {
            if (_xmlPrettyPrinter != null) {
                _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), stax2base64v, toFullBuffer(data, dataLength), 0, dataLength);
            } else {
                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());
                writeStreamAsBinary(stax2base64v, data, dataLength);
                _xmlWriter.writeEndElement();
            }
        }
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
    return dataLength;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(Base64Variant,InputStream,int).b64variant","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(Base64Variant,InputStream,int).data","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(Base64Variant,InputStream,int).dataLength","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBinary(Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStreamAsBinary(org.codehaus.stax2.typed.Base64Variant,InputStream,int)","Method","No Comment","private void writeStreamAsBinary(org.codehaus.stax2.typed.Base64Variant stax2base64v, InputStream data, int len) throws IOException, XMLStreamException {
    // base64 encodes up to 3 bytes into a 4 bytes string
    byte[] tmp = new byte[3];
    int offset = 0;
    int read;
    while ((read = data.read(tmp, offset, Math.min(3 - offset, len))) != -1) {
        offset += read;
        len -= read;
        if (offset == 3) {
            offset = 0;
            _xmlWriter.writeBinary(stax2base64v, tmp, 0, 3);
        }
        if (len == 0) {
            break;
        }
    }
    // we still have < 3 bytes in the buffer
    if (offset > 0) {
        _xmlWriter.writeBinary(stax2base64v, tmp, 0, offset);
    }
}","void","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStreamAsBinary(org.codehaus.stax2.typed.Base64Variant,InputStream,int).stax2base64v","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStreamAsBinary(org.codehaus.stax2.typed.Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStreamAsBinary(org.codehaus.stax2.typed.Base64Variant,InputStream,int).data","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStreamAsBinary(org.codehaus.stax2.typed.Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStreamAsBinary(org.codehaus.stax2.typed.Base64Variant,InputStream,int).len","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeStreamAsBinary(org.codehaus.stax2.typed.Base64Variant,InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.toFullBuffer(byte[],int,int)","Method","No Comment","private byte[] toFullBuffer(byte[] data, int offset, int len) {
    // might already be ok:
    if (offset == 0 && len == data.length) {
        return data;
    }
    byte[] result = new byte[len];
    if (len > 0) {
        System.arraycopy(data, offset, result, 0, len);
    }
    return result;
}","byte[]","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.toFullBuffer(byte[],int,int).data","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.toFullBuffer(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.toFullBuffer(byte[],int,int).offset","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.toFullBuffer(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.toFullBuffer(byte[],int,int).len","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.toFullBuffer(byte[],int,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.toFullBuffer(InputStream,int)","Method","No Comment","private byte[] toFullBuffer(InputStream data, final int len) throws IOException {
    byte[] result = new byte[len];
    int offset = 0;
    for (; offset < len; ) {
        int count = data.read(result, offset, len - offset);
        if (count < 0) {
            _reportError(""Too few bytes available: missing "" + (len - offset) + "" bytes (out of "" + len + "")"");
        }
        offset += count;
    }
    return result;
}","byte[]","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.toFullBuffer(InputStream,int).data","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.toFullBuffer(InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.toFullBuffer(InputStream,int).len","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.toFullBuffer(InputStream,int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)","Method","No Comment","@Override
public void writeBoolean(boolean value) throws IOException {
    _verifyValueWrite(""write boolean value"");
    if (_nextName == null) {
        handleMissingName();
    }
    try {
        if (_nextIsAttribute) {
            _xmlWriter.writeBooleanAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value);
        } else if (checkNextIsUnwrapped()) {
            // should we consider pretty-printing or not?
            _xmlWriter.writeBoolean(value);
        } else {
            if (_xmlPrettyPrinter != null) {
                _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value);
            } else {
                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());
                _xmlWriter.writeBoolean(value);
                _xmlWriter.writeEndElement();
            }
        }
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean).value","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeBoolean(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNull()","Method","No Comment","@Override
public void writeNull() throws IOException {
    _verifyValueWrite(""write null value"");
    if (_nextName == null) {
        handleMissingName();
    }
    try {
        if (_nextIsAttribute) {
            // With attributes, best just leave it out, right? (since there's no way
            // to use 'xsi:nil')
        } else if (checkNextIsUnwrapped()) {
            // as with above, best left unwritten?
        } else {
            final boolean asXsiNil = isEnabled(Feature.WRITE_NULLS_AS_XSI_NIL);
            if (_xmlPrettyPrinter != null) {
                // 12-Nov-2020, tatu: Not clean, due to backwards-compat challenges..
                //    but has to do
                if (asXsiNil && (_xmlPrettyPrinter instanceof DefaultXmlPrettyPrinter)) {
                    ((DefaultXmlPrettyPrinter) _xmlPrettyPrinter).writeLeafXsiNilElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart());
                } else {
                    _xmlPrettyPrinter.writeLeafNullElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart());
                }
            } else {
                if (asXsiNil) {
                    _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());
                    _xmlWriter.writeAttribute(""xsi"", XMLConstants.W3C_XML_SCHEMA_INSTANCE_NS_URI, ""nil"", ""true"");
                    _xmlWriter.writeEndElement();
                } else {
                    _xmlWriter.writeEmptyElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());
                }
            }
        }
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)","Method","No Comment","@Override
public void writeNumber(int i) throws IOException {
    _verifyValueWrite(""write number"");
    if (_nextName == null) {
        handleMissingName();
    }
    try {
        if (_nextIsAttribute) {
            _xmlWriter.writeIntAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i);
        } else if (checkNextIsUnwrapped()) {
            // should we consider pretty-printing or not?
            _xmlWriter.writeInt(i);
        } else {
            if (_xmlPrettyPrinter != null) {
                _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i);
            } else {
                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());
                _xmlWriter.writeInt(i);
                _xmlWriter.writeEndElement();
            }
        }
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int).i","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)","Method","No Comment","@Override
public void writeNumber(long l) throws IOException {
    _verifyValueWrite(""write number"");
    if (_nextName == null) {
        handleMissingName();
    }
    try {
        if (_nextIsAttribute) {
            _xmlWriter.writeLongAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l);
        } else if (checkNextIsUnwrapped()) {
            _xmlWriter.writeLong(l);
        } else {
            if (_xmlPrettyPrinter != null) {
                _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l);
            } else {
                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());
                _xmlWriter.writeLong(l);
                _xmlWriter.writeEndElement();
            }
        }
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long).l","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(long)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)","Method","No Comment","@Override
public void writeNumber(double d) throws IOException {
    if (Double.isInfinite(d) && isEnabled(Feature.WRITE_XML_SCHEMA_CONFORMING_FLOATS)) {
        writeNumber(d > 0d ? ""INF"" : ""-INF"");
        return;
    }
    _verifyValueWrite(""write number"");
    if (_nextName == null) {
        handleMissingName();
    }
    try {
        if (_nextIsAttribute) {
            _xmlWriter.writeDoubleAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d);
        } else if (checkNextIsUnwrapped()) {
            _xmlWriter.writeDouble(d);
        } else {
            if (_xmlPrettyPrinter != null) {
                _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d);
            } else {
                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());
                _xmlWriter.writeDouble(d);
                _xmlWriter.writeEndElement();
            }
        }
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double).d","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(double)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)","Method","No Comment","@Override
public void writeNumber(float f) throws IOException {
    if (Float.isInfinite(f) && isEnabled(Feature.WRITE_XML_SCHEMA_CONFORMING_FLOATS)) {
        writeNumber(f > 0f ? ""INF"" : ""-INF"");
        return;
    }
    _verifyValueWrite(""write number"");
    if (_nextName == null) {
        handleMissingName();
    }
    try {
        if (_nextIsAttribute) {
            _xmlWriter.writeFloatAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f);
        } else if (checkNextIsUnwrapped()) {
            _xmlWriter.writeFloat(f);
        } else {
            if (_xmlPrettyPrinter != null) {
                _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f);
            } else {
                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());
                _xmlWriter.writeFloat(f);
                _xmlWriter.writeEndElement();
            }
        }
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(float)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(BigDecimal)","Method","No Comment","@Override
public void writeNumber(BigDecimal dec) throws IOException {
    if (dec == null) {
        writeNull();
        return;
    }
    _verifyValueWrite(""write number"");
    if (_nextName == null) {
        handleMissingName();
    }
    boolean usePlain = isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);
    try {
        if (_nextIsAttribute) {
            if (usePlain) {
                _xmlWriter.writeAttribute("""", _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec.toPlainString());
            } else {
                _xmlWriter.writeDecimalAttribute("""", _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec);
            }
        } else if (checkNextIsUnwrapped()) {
            if (usePlain) {
                _xmlWriter.writeCharacters(dec.toPlainString());
            } else {
                _xmlWriter.writeDecimal(dec);
            }
        } else {
            if (_xmlPrettyPrinter != null) {
                if (usePlain) {
                    _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec.toPlainString(), false);
                } else {
                    _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec);
                }
            } else {
                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());
                if (usePlain) {
                    _xmlWriter.writeCharacters(dec.toPlainString());
                } else {
                    _xmlWriter.writeDecimal(dec);
                }
                _xmlWriter.writeEndElement();
            }
        }
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(BigDecimal).dec","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(BigDecimal)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(BigInteger)","Method","No Comment","@Override
public void writeNumber(BigInteger value) throws IOException {
    if (value == null) {
        writeNull();
        return;
    }
    _verifyValueWrite(""write number"");
    if (_nextName == null) {
        handleMissingName();
    }
    try {
        if (_nextIsAttribute) {
            _xmlWriter.writeIntegerAttribute("""", _nextName.getNamespaceURI(), _nextName.getLocalPart(), value);
        } else if (checkNextIsUnwrapped()) {
            _xmlWriter.writeInteger(value);
        } else {
            if (_xmlPrettyPrinter != null) {
                _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value);
            } else {
                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());
                _xmlWriter.writeInteger(value);
                _xmlWriter.writeEndElement();
            }
        }
    } catch (XMLStreamException e) {
        StaxUtil.throwAsGenerationException(e, this);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(BigInteger).value","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(BigInteger)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(String)","Method","No Comment","@Override
public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException {
    writeString(encodedValue);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(String).encodedValue","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.writeNumber(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(String)","Method","No Comment","@Override
protected final void _verifyValueWrite(String typeMsg) throws IOException {
    int status = _writeContext.writeValue();
    if (status == JsonWriteContext.STATUS_EXPECT_NAME) {
        _reportError(""Can not "" + typeMsg + "", expecting field name"");
    }
}","void","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(String).typeMsg","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._verifyValueWrite(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.flush()","Method","No Comment","@Override
public void flush() throws IOException {
    if (isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)) {
        try {
            _xmlWriter.flush();
        } catch (XMLStreamException e) {
            StaxUtil.throwAsGenerationException(e, this);
        }
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.close()","Method","No Comment","@Override
public void close() throws IOException {
    if (!isClosed()) {
        // First: let's see that we still have buffers...
        if (isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)) {
            try {
                while (true) {
                    /* 28-May-2016, tatu: To work around incompatibility introduced by
                         *     `jackson-core` 2.8 where return type of `getOutputContext()`
                         *     changed, let's do direct access here.
                         */
                    //                    JsonStreamContext ctxt = getOutputContext();
                    JsonStreamContext ctxt = _writeContext;
                    if (ctxt.inArray()) {
                        writeEndArray();
                    } else if (ctxt.inObject()) {
                        writeEndObject();
                    } else {
                        break;
                    }
                }
            } catch (ArrayIndexOutOfBoundsException e) {
                /* 29-Nov-2010, tatu: Stupid, stupid SJSXP doesn't do array checks, so we get
                     *   hit by this as a collateral problem in some cases. Yuck.
                     */
                throw new JsonGenerationException(e, this);
            }
        }
        try {
            if (_ioContext.isResourceManaged() || isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)) {
                _xmlWriter.closeCompletely();
            } else {
                _xmlWriter.close();
            }
        } catch (XMLStreamException e) {
            StaxUtil.throwAsGenerationException(e, this);
        }
        super.close();
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._releaseBuffers()","Method","No Comment","@Override
protected void _releaseBuffers() {
    // Nothing to do here, as we have no buffers
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.checkNextIsUnwrapped()","Method","* Method called to see if unwrapping is required; and if so,
     * clear the flag (so further calls will return 'false' unless
     * state is re-set)","protected boolean checkNextIsUnwrapped() {
    if (_nextIsUnwrapped) {
        _nextIsUnwrapped = false;
        return true;
    }
    return false;
}","boolean","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.handleMissingName()","Method","No Comment","protected void handleMissingName() {
    throw new IllegalStateException(""No element/attribute name specified when trying to output element"");
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(String)","Method","* Method called in case access to native Stax2 API implementation is required.","protected void _reportUnimplementedStax2(String missingMethod) throws IOException {
    throw new JsonGenerationException(""Underlying Stax XMLStreamWriter (of type "" + _originalXmlWriter.getClass().getName() + "") does not implement Stax2 API natively and is missing method '"" + missingMethod + ""': this breaks functionality such as indentation that relies on it. "" + ""You need to upgrade to using compliant Stax implementation like Woodstox or Aalto"", this);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(String).missingMethod","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator._reportUnimplementedStax2(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.<init>(IOContext,int,int,ObjectCodec,XMLStreamWriter,XmlNameProcessor)","Constructor","No Comment","public ToXmlGenerator(IOContext ctxt, int stdFeatures, int xmlFeatures, ObjectCodec codec, XMLStreamWriter sw, XmlNameProcessor nameProcessor) {
    super(stdFeatures, codec, ctxt);
    _formatFeatures = xmlFeatures;
    _streamWriteConstraints = ctxt.streamWriteConstraints();
    _originalXmlWriter = sw;
    _xmlWriter = Stax2WriterAdapter.wrapIfNecessary(sw);
    _stax2Emulation = (_xmlWriter != sw);
    _nameProcessor = nameProcessor;
    _xmlPrettyPrinter = (_cfgPrettyPrinter instanceof XmlPrettyPrinter) ? (XmlPrettyPrinter) _cfgPrettyPrinter : null;
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.<init>(IOContext,int,int,ObjectCodec,XMLStreamWriter,XmlNameProcessor).ctxt","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.<init>(IOContext,int,int,ObjectCodec,XMLStreamWriter,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.<init>(IOContext,int,int,ObjectCodec,XMLStreamWriter,XmlNameProcessor).stdFeatures","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.<init>(IOContext,int,int,ObjectCodec,XMLStreamWriter,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.<init>(IOContext,int,int,ObjectCodec,XMLStreamWriter,XmlNameProcessor).xmlFeatures","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.<init>(IOContext,int,int,ObjectCodec,XMLStreamWriter,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.<init>(IOContext,int,int,ObjectCodec,XMLStreamWriter,XmlNameProcessor).codec","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.<init>(IOContext,int,int,ObjectCodec,XMLStreamWriter,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.<init>(IOContext,int,int,ObjectCodec,XMLStreamWriter,XmlNameProcessor).sw","Parameter_5","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.<init>(IOContext,int,int,ObjectCodec,XMLStreamWriter,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.<init>(IOContext,int,int,ObjectCodec,XMLStreamWriter,XmlNameProcessor).nameProcessor","Parameter_6","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.<init>(IOContext,int,int,ObjectCodec,XMLStreamWriter,XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature","Enum","* Enumeration that defines all togglable extra XML-specific features","Enum do not obtain Source Code","No return type","public ","enum has no extends","com.fasterxml.jackson.core.FormatFeature"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature","Enum","* Enumeration that defines all togglable extra XML-specific features","Enum do not obtain Source Code","No return type","public ","enum has no extends","com.fasterxml.jackson.core.FormatFeature"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.WRITE_XML_DECLARATION","Enum Constant","* Feature that controls whether XML declaration should be written before
         * when generator is initialized (true) or not (false)","WRITE_XML_DECLARATION(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.WRITE_XML_1_1","Enum Constant","* Feature that controls whether output should be done as XML 1.1; if so,
         * certain aspects may differ from default (1.0) processing: for example,
         * XML declaration will be automatically added (regardless of setting
         * <code>WRITE_XML_DECLARATION</code>) as this is required for reader to
         * know to use 1.1 compliant handling. XML 1.1 can be used to allow quoted
         * control characters (Ascii codes 0 through 31) as well as additional linefeeds
         * and name characters.","WRITE_XML_1_1(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.WRITE_NULLS_AS_XSI_NIL","Enum Constant","* Feature that controls whether serialization of Java {@code null} values adds
         * XML attribute of `xsi:nil`, as defined by XML Schema (see
         * <a href=""https://www.oreilly.com/library/view/xml-in-a/0596007647/re166.html"">this article</a>
         * for details) or not.
         * If enabled, `xsi:nil` attribute will be added to the empty element; if disabled,
         * it will not.
         *<p>
         * Default setting is {@code disabled} in Jackson 2.x for backwards compatibility:
         * but will be changed in 3.0 to {@code enabled}.
         *
         * @since 2.10","WRITE_NULLS_AS_XSI_NIL(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.UNWRAP_ROOT_OBJECT_NODE","Enum Constant","* Feature that determines writing of root values of type {@code ObjectNode}
         * ({@code JsonNode} subtype that represents Object content values),
         * regarding XML output.
         * If enabled and {@code ObjectNode} has exactly one entry (key/value pair),
         * then key of that entry is used as the root element name (and value
         * is written as contents. Otherwise (if feature disabled, or if root
         * {@code ObjectNode} has any other number of key/value entries,
         * root element name is determined using normal logic (either explicitly
         * configured, or {@code ObjectNode} otherwise).
         *<p>
         * Default setting is {@code disabled} in Jackson 2.x, for backwards compatibility:
         * but will be changed in 3.0 to {@code enabled}.
         *
         * @since 2.13","UNWRAP_ROOT_OBJECT_NODE(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.AUTO_DETECT_XSI_TYPE","Enum Constant","* Feature that enables automatic conversion of logical property
         * name {@code ""xsi:type""} into matching XML name where ""type""
         * is the local name and ""xsi"" prefix is bound to URI
         * {@link XMLConstants#W3C_XML_SCHEMA_INSTANCE_NS_URI},
         * and output is indicated to be done as XML Attribute.
         * This is mostly desirable for Polymorphic handling where it is difficult
         * to specify XML Namespace for type identifier
         *<p>
         * Default setting is {@code disabled} in Jackson 2.x for backwards compatibility:
         * but will be changed in 3.0 to {@code enabled}.
         *
         * @since 2.17","AUTO_DETECT_XSI_TYPE(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.WRITE_XML_SCHEMA_CONFORMING_FLOATS","Enum Constant","* Feature that determines how floating-point infinity values are
         * serialized.
         *<p>
         * By default, {@link Float#POSITIVE_INFINITY} and
         * {@link Double#POSITIVE_INFINITY} are serialized as {@code Infinity},
         * and {@link Float#NEGATIVE_INFINITY} and
         * {@link Double#NEGATIVE_INFINITY} are serialized as
         * {@code -Infinity}. This is the representation that Java normally
         * uses for these values (see {@link Float#toString(float)} and
         * {@link Double#toString(double)}), but JAXB and other XML
         * Schema-conforming readers won't understand it.
         *<p>
         * With this feature enabled, these values are instead serialized as
         * {@code INF} and {@code -INF}, respectively. This is the
         * representation that XML Schema and JAXB use (see the XML Schema
         * primitive types
         * <a href=""https://www.w3.org/TR/xmlschema-2/#float""><code>float</code></a>
         * and
         * <a href=""https://www.w3.org/TR/xmlschema-2/#double""><code>double</code></a>).
         *<p>
         * When deserializing, Jackson always understands both representations,
         * so there is no corresponding
         * {@link com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature}.
         *<p>
         * Feature is {@code disabled} by default in Jackson 2.x for backwards compatibility:
         * but will be changed in 3.0 to {@code enabled}.
         *
         * @since 2.17","WRITE_XML_SCHEMA_CONFORMING_FLOATS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.collectDefaults()","Method","* Method that calculates bit set (flags) of all features that
         * are enabled by default.","public static int collectDefaults() {
    int flags = 0;
    for (Feature f : values()) {
        if (f.enabledByDefault()) {
            flags |= f.getMask();
        }
    }
    return flags;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.enabledByDefault()","Method","No Comment","@Override
public boolean enabledByDefault() {
    return _defaultState;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.getMask()","Method","No Comment","@Override
public int getMask() {
    return _mask;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.enabledIn(int)","Method","No Comment","@Override
public boolean enabledIn(int flags) {
    return (flags & getMask()) != 0;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.enabledIn(int).flags","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.enabledIn(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.<init>(boolean)","Constructor","No Comment","private Feature(boolean defaultState) {
    _defaultState = defaultState;
    _mask = (1 << ordinal());
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.<init>(boolean).defaultState","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator$Feature.<init>(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.Feature","Enum","* Enumeration that defines all togglable extra XML-specific features","Enum do not obtain Source Code","No return type","public ","enum has no extends","com.fasterxml.jackson.core.FormatFeature"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.Feature.WRITE_XML_DECLARATION","Enum Constant","* Feature that controls whether XML declaration should be written before
         * when generator is initialized (true) or not (false)","WRITE_XML_DECLARATION(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.Feature.WRITE_XML_1_1","Enum Constant","* Feature that controls whether output should be done as XML 1.1; if so,
         * certain aspects may differ from default (1.0) processing: for example,
         * XML declaration will be automatically added (regardless of setting
         * <code>WRITE_XML_DECLARATION</code>) as this is required for reader to
         * know to use 1.1 compliant handling. XML 1.1 can be used to allow quoted
         * control characters (Ascii codes 0 through 31) as well as additional linefeeds
         * and name characters.","WRITE_XML_1_1(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.Feature.WRITE_NULLS_AS_XSI_NIL","Enum Constant","* Feature that controls whether serialization of Java {@code null} values adds
         * XML attribute of `xsi:nil`, as defined by XML Schema (see
         * <a href=""https://www.oreilly.com/library/view/xml-in-a/0596007647/re166.html"">this article</a>
         * for details) or not.
         * If enabled, `xsi:nil` attribute will be added to the empty element; if disabled,
         * it will not.
         *<p>
         * Default setting is {@code disabled} in Jackson 2.x for backwards compatibility:
         * but will be changed in 3.0 to {@code enabled}.
         *
         * @since 2.10","WRITE_NULLS_AS_XSI_NIL(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.Feature.UNWRAP_ROOT_OBJECT_NODE","Enum Constant","* Feature that determines writing of root values of type {@code ObjectNode}
         * ({@code JsonNode} subtype that represents Object content values),
         * regarding XML output.
         * If enabled and {@code ObjectNode} has exactly one entry (key/value pair),
         * then key of that entry is used as the root element name (and value
         * is written as contents. Otherwise (if feature disabled, or if root
         * {@code ObjectNode} has any other number of key/value entries,
         * root element name is determined using normal logic (either explicitly
         * configured, or {@code ObjectNode} otherwise).
         *<p>
         * Default setting is {@code disabled} in Jackson 2.x, for backwards compatibility:
         * but will be changed in 3.0 to {@code enabled}.
         *
         * @since 2.13","UNWRAP_ROOT_OBJECT_NODE(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.Feature.AUTO_DETECT_XSI_TYPE","Enum Constant","* Feature that enables automatic conversion of logical property
         * name {@code ""xsi:type""} into matching XML name where ""type""
         * is the local name and ""xsi"" prefix is bound to URI
         * {@link XMLConstants#W3C_XML_SCHEMA_INSTANCE_NS_URI},
         * and output is indicated to be done as XML Attribute.
         * This is mostly desirable for Polymorphic handling where it is difficult
         * to specify XML Namespace for type identifier
         *<p>
         * Default setting is {@code disabled} in Jackson 2.x for backwards compatibility:
         * but will be changed in 3.0 to {@code enabled}.
         *
         * @since 2.17","AUTO_DETECT_XSI_TYPE(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.Feature.WRITE_XML_SCHEMA_CONFORMING_FLOATS","Enum Constant","* Feature that determines how floating-point infinity values are
         * serialized.
         *<p>
         * By default, {@link Float#POSITIVE_INFINITY} and
         * {@link Double#POSITIVE_INFINITY} are serialized as {@code Infinity},
         * and {@link Float#NEGATIVE_INFINITY} and
         * {@link Double#NEGATIVE_INFINITY} are serialized as
         * {@code -Infinity}. This is the representation that Java normally
         * uses for these values (see {@link Float#toString(float)} and
         * {@link Double#toString(double)}), but JAXB and other XML
         * Schema-conforming readers won't understand it.
         *<p>
         * With this feature enabled, these values are instead serialized as
         * {@code INF} and {@code -INF}, respectively. This is the
         * representation that XML Schema and JAXB use (see the XML Schema
         * primitive types
         * <a href=""https://www.w3.org/TR/xmlschema-2/#float""><code>float</code></a>
         * and
         * <a href=""https://www.w3.org/TR/xmlschema-2/#double""><code>double</code></a>).
         *<p>
         * When deserializing, Jackson always understands both representations,
         * so there is no corresponding
         * {@link com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser.Feature}.
         *<p>
         * Feature is {@code disabled} by default in Jackson 2.x for backwards compatibility:
         * but will be changed in 3.0 to {@code enabled}.
         *
         * @since 2.17","WRITE_XML_SCHEMA_CONFORMING_FLOATS(false)","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.Feature.collectDefaults()","Method","* Method that calculates bit set (flags) of all features that
         * are enabled by default.","public static int collectDefaults() {
    int flags = 0;
    for (Feature f : values()) {
        if (f.enabledByDefault()) {
            flags |= f.getMask();
        }
    }
    return flags;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.Feature.enabledByDefault()","Method","No Comment","@Override
public boolean enabledByDefault() {
    return _defaultState;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.Feature.getMask()","Method","No Comment","@Override
public int getMask() {
    return _mask;
}","int","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.Feature.enabledIn(int)","Method","No Comment","@Override
public boolean enabledIn(int flags) {
    return (flags & getMask()) != 0;
}","boolean","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.Feature.enabledIn(int).flags","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.Feature.enabledIn(int)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.Feature.<init>(boolean)","Constructor","No Comment","private Feature(boolean defaultState) {
    _defaultState = defaultState;
    _mask = (1 << ordinal());
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.Feature.<init>(boolean).defaultState","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator.Feature.<init>(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter","Class","* Property writer sub-class used for handling element wrapping needed for serializing
 * collection (array, Collection; possibly Map) types.","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.databind.ser.BeanPropertyWriter",""
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._wrapperQName","Field","* Element name used as wrapper for collection.","protected final QName _wrapperQName;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._wrappedQName","Field","* Element name used for items in the collection","protected final QName _wrappedQName;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._qname(PropertyName)","Method","No Comment","private QName _qname(PropertyName n) {
    String ns = n.getNamespace();
    if (ns == null) {
        ns = """";
    }
    return new QName(ns, n.getSimpleName());
}","QName","private ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._qname(PropertyName).n","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter._qname(PropertyName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(Object,JsonGenerator,SerializerProvider)","Method","* Overridden version so that we can wrap output within wrapper element if
     * and as necessary.","@Override
public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {
    Object value = get(bean);
    /* 13-Feb-2014, tatu: As per [#103], default handling does not really
         *   work here. Rather, we need just a wrapping and should NOT call
         *   null handler, as it does not know what to do...
         *   
         *   Question, however, is what should it be serialized as. We have two main
         *   choices; equivalent empty List, and ""nothing"" (missing). Let's start with
         *   empty List? But producing missing entry is non-trivial...
         */
    if (value == null) {
        // if (_nullSerializer != null) { ... }
        // For Empty List, we'd do this:
        /*
            @SuppressWarnings(""resource"")
            final ToXmlGenerator xmlGen = (jgen instanceof ToXmlGenerator) ? (ToXmlGenerator) jgen : null;
            if (xmlGen != null) {
                xmlGen.startWrappedValue(_wrapperQName, _wrappedQName);
                xmlGen.finishWrappedValue(_wrapperQName, _wrappedQName);
            }
            */
        // but for missing thing, well, just output nothing
        return;
    }
    // then find serializer to use
    JsonSerializer<Object> ser = _serializer;
    if (ser == null) {
        Class<?> cls = value.getClass();
        PropertySerializerMap map = _dynamicSerializers;
        ser = map.serializerFor(cls);
        if (ser == null) {
            ser = _findAndAddDynamic(map, cls, prov);
        }
    }
    // and then see if we must suppress certain values (default, empty)
    if (_suppressableValue != null) {
        if (MARKER_FOR_EMPTY == _suppressableValue) {
            if (ser.isEmpty(prov, value)) {
                return;
            }
        } else if (_suppressableValue.equals(value)) {
            return;
        }
    }
    // For non-nulls: simple check for direct cycles
    if (value == bean) {
        // NOTE: method signature here change 2.3->2.4
        if (_handleSelfReference(bean, jgen, prov, ser)) {
            return;
        }
    }
    final ToXmlGenerator xmlGen = (jgen instanceof ToXmlGenerator) ? (ToXmlGenerator) jgen : null;
    // Ok then; addition we want to do is to add wrapper element, and that's what happens here
    // 19-Aug-2013, tatu: ... except for those nasty 'convertValue()' calls...
    if (xmlGen != null) {
        xmlGen.startWrappedValue(_wrapperQName, _wrappedQName);
    }
    jgen.writeFieldName(_name);
    if (_typeSerializer == null) {
        ser.serialize(value, jgen, prov);
    } else {
        ser.serializeWithType(value, jgen, prov, _typeSerializer);
    }
    if (xmlGen != null) {
        xmlGen.finishWrappedValue(_wrapperQName, _wrappedQName);
    }
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(Object,JsonGenerator,SerializerProvider).bean","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(Object,JsonGenerator,SerializerProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(Object,JsonGenerator,SerializerProvider).jgen","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(Object,JsonGenerator,SerializerProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(Object,JsonGenerator,SerializerProvider).prov","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.serializeAsField(Object,JsonGenerator,SerializerProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.<init>(BeanPropertyWriter,PropertyName,PropertyName)","Constructor","No Comment","public XmlBeanPropertyWriter(BeanPropertyWriter wrapped, PropertyName wrapperName, PropertyName wrappedName) {
    this(wrapped, wrapperName, wrappedName, null);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.<init>(BeanPropertyWriter,PropertyName,PropertyName).wrapped","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.<init>(BeanPropertyWriter,PropertyName,PropertyName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.<init>(BeanPropertyWriter,PropertyName,PropertyName).wrapperName","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.<init>(BeanPropertyWriter,PropertyName,PropertyName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.<init>(BeanPropertyWriter,PropertyName,PropertyName).wrappedName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.<init>(BeanPropertyWriter,PropertyName,PropertyName)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.<init>(BeanPropertyWriter,PropertyName,PropertyName,JsonSerializer)","Constructor","No Comment","public XmlBeanPropertyWriter(BeanPropertyWriter wrapped, PropertyName wrapperName, PropertyName wrappedName, JsonSerializer<Object> serializer) {
    super(wrapped);
    _wrapperQName = _qname(wrapperName);
    _wrappedQName = _qname(wrappedName);
    if (serializer != null) {
        assignSerializer(serializer);
    }
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.<init>(BeanPropertyWriter,PropertyName,PropertyName,JsonSerializer).wrapped","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.<init>(BeanPropertyWriter,PropertyName,PropertyName,JsonSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.<init>(BeanPropertyWriter,PropertyName,PropertyName,JsonSerializer).wrapperName","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.<init>(BeanPropertyWriter,PropertyName,PropertyName,JsonSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.<init>(BeanPropertyWriter,PropertyName,PropertyName,JsonSerializer).wrappedName","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.<init>(BeanPropertyWriter,PropertyName,PropertyName,JsonSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.<init>(BeanPropertyWriter,PropertyName,PropertyName,JsonSerializer).serializer","Parameter_4","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanPropertyWriter.<init>(BeanPropertyWriter,PropertyName,PropertyName,JsonSerializer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer","Class","* Variant of {@link BeanSerializer} for XML handling.
 * 
 * @author Pascal Gélinas","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerBase",""
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialVersionUID","Field","No Comment","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.unwrappingSerializer(NameTransformer)","Method","No Comment","@Override
public JsonSerializer<Object> unwrappingSerializer(NameTransformer unwrapper) {
    return new UnwrappingXmlBeanSerializer(this, unwrapper);
}","JsonSerializer","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.unwrappingSerializer(NameTransformer).unwrapper","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.unwrappingSerializer(NameTransformer)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withObjectIdWriter(ObjectIdWriter)","Method","No Comment","@Override
public BeanSerializerBase withObjectIdWriter(ObjectIdWriter objectIdWriter) {
    return new XmlBeanSerializer(this, objectIdWriter, _propertyFilterId);
}","BeanSerializerBase","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withObjectIdWriter(ObjectIdWriter).objectIdWriter","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withObjectIdWriter(ObjectIdWriter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withFilterId(Object)","Method","No Comment","@Override
public BeanSerializerBase withFilterId(Object filterId) {
    return new XmlBeanSerializer(this, _objectIdWriter, filterId);
}","BeanSerializerBase","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withFilterId(Object).filterId","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withFilterId(Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withByNameInclusion(Set,Set)","Method","No Comment","// since 2.12
@Override
protected BeanSerializerBase withByNameInclusion(Set<String> toIgnore, Set<String> toInclude) {
    return new XmlBeanSerializer(this, toIgnore, toInclude);
}","BeanSerializerBase","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withByNameInclusion(Set,Set).toIgnore","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withByNameInclusion(Set,Set)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withByNameInclusion(Set,Set).toInclude","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withByNameInclusion(Set,Set)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withProperties(BeanPropertyWriter[],BeanPropertyWriter[])","Method","No Comment","// since 2.11.1
@Override
protected BeanSerializerBase withProperties(BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties) {
    return new XmlBeanSerializer(this, properties, filteredProperties);
}","BeanSerializerBase","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withProperties(BeanPropertyWriter[],BeanPropertyWriter[]).properties","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withProperties(BeanPropertyWriter[],BeanPropertyWriter[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withProperties(BeanPropertyWriter[],BeanPropertyWriter[]).filteredProperties","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.withProperties(BeanPropertyWriter[],BeanPropertyWriter[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.asArraySerializer()","Method","* Implementation has to check whether as-array serialization
     * is possible reliably; if (and only if) so, will construct
     * a {@link BeanAsArraySerializer}, otherwise will return this
     * serializer as is.","@Override
protected BeanSerializerBase asArraySerializer() {
    /* Can not:
         * 
         * - have Object Id (may be allowed in future)
         * - have any getter
         */
    if ((_objectIdWriter == null) && (_propertyFilterId == null)) {
        return new BeanAsArraySerializer(this);
    }
    // already is one, so:
    return this;
}","BeanSerializerBase","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialize(Object,JsonGenerator,SerializerProvider)","Method","* Main serialization method that will delegate actual output to configured
     * {@link BeanPropertyWriter} instances.","@Override
public void serialize(Object bean, JsonGenerator g, SerializerProvider provider) throws IOException {
    if (_objectIdWriter != null) {
        _serializeWithObjectId(bean, g, provider, true);
        return;
    }
    g.writeStartObject();
    if (_propertyFilterId != null) {
        serializeFieldsFiltered(bean, g, provider);
    } else {
        serializeFields(bean, g, provider);
    }
    g.writeEndObject();
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialize(Object,JsonGenerator,SerializerProvider).bean","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialize(Object,JsonGenerator,SerializerProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialize(Object,JsonGenerator,SerializerProvider).g","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialize(Object,JsonGenerator,SerializerProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialize(Object,JsonGenerator,SerializerProvider).provider","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.serialize(Object,JsonGenerator,SerializerProvider)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.toString()","Method","No Comment","@Override
public String toString() {
    return ""XmlBeanSerializer for "" + handledType().getName();
}","String","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(BeanSerializerBase)","Constructor","/**********************************************************
    /* Life-cycle: constructors
    /**********************************************************","public XmlBeanSerializer(BeanSerializerBase src) {
    super(src);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(BeanSerializerBase).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(BeanSerializerBase)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,ObjectIdWriter,Object)","Constructor","No Comment","public XmlBeanSerializer(XmlBeanSerializerBase src, ObjectIdWriter objectIdWriter, Object filterId) {
    super(src, objectIdWriter, filterId);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,ObjectIdWriter,Object).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,ObjectIdWriter,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,ObjectIdWriter,Object).objectIdWriter","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,ObjectIdWriter,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,ObjectIdWriter,Object).filterId","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,ObjectIdWriter,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,ObjectIdWriter)","Constructor","No Comment","public XmlBeanSerializer(XmlBeanSerializerBase src, ObjectIdWriter objectIdWriter) {
    super(src, objectIdWriter);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,ObjectIdWriter).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,ObjectIdWriter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,ObjectIdWriter).objectIdWriter","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,ObjectIdWriter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,Set,Set)","Constructor","No Comment","public XmlBeanSerializer(XmlBeanSerializerBase src, Set<String> toIgnore, Set<String> toInclude) {
    super(src, toIgnore, toInclude);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,Set,Set).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,Set,Set)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,Set,Set).toIgnore","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,Set,Set)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,Set,Set).toInclude","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,Set,Set)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,BeanPropertyWriter[],BeanPropertyWriter[])","Constructor","No Comment","protected XmlBeanSerializer(XmlBeanSerializerBase src, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties) {
    super(src, properties, filteredProperties);
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,BeanPropertyWriter[],BeanPropertyWriter[]).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,BeanPropertyWriter[],BeanPropertyWriter[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,BeanPropertyWriter[],BeanPropertyWriter[]).properties","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,BeanPropertyWriter[],BeanPropertyWriter[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,BeanPropertyWriter[],BeanPropertyWriter[]).filteredProperties","Parameter_3","Belong to com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializer.<init>(XmlBeanSerializerBase,BeanPropertyWriter[],BeanPropertyWriter[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper","Class","* Customized {@link ObjectMapper} that will read and write XML instead of JSON,
 * using XML-backed {@link com.fasterxml.jackson.core.JsonFactory}
 * implementation ({@link XmlFactory}).
 *<p>
 * Mapper itself overrides some aspects of functionality to try to handle
 * data binding aspects as similar to JAXB as possible.
 *<p>
 * Note that most of configuration should be done by pre-constructing
 * {@link JacksonXmlModule} explicitly, instead of relying on default settings.","Class do not obtain Source Code","No return type","public ","com.fasterxml.jackson.databind.ObjectMapper",""
"com.fasterxml.jackson.dataformat.xml.XmlMapper.serialVersionUID","Field","as of 2.6","private static final long serialVersionUID = 1L;","No return type","private , static , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.DEFAULT_XML_MODULE","Field","No Comment","protected final static JacksonXmlModule DEFAULT_XML_MODULE = new JacksonXmlModule();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.DEFAULT_XML_PRETTY_PRINTER","Field","No Comment","protected final static DefaultXmlPrettyPrinter DEFAULT_XML_PRETTY_PRINTER = new DefaultXmlPrettyPrinter();","No return type","protected , final , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper._xmlModule","Field","need to hold on to module instance just in case copy() is used","protected final JacksonXmlModule _xmlModule;","No return type","protected , final ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.copy()","Method","No Comment","@Override
public XmlMapper copy() {
    _checkInvalidCopy(XmlMapper.class);
    return new XmlMapper(this);
}","XmlMapper","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.xmlBuilder()","Method","* @since 2.10","public static XmlMapper.Builder xmlBuilder() {
    return new XmlMapper.Builder(new XmlMapper());
}","XmlMapper.Builder","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.builder()","Method","* @since 2.10","public static XmlMapper.Builder builder() {
    return new XmlMapper.Builder(new XmlMapper());
}","XmlMapper.Builder","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.builder(XmlFactory)","Method","* @since 2.10","public static XmlMapper.Builder builder(XmlFactory streamFactory) {
    return new XmlMapper.Builder(new XmlMapper(streamFactory));
}","XmlMapper.Builder","public , static ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.builder(XmlFactory).streamFactory","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.builder(XmlFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.version()","Method","No Comment","@Override
public Version version() {
    return PackageVersion.VERSION;
}","Version","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper._constructDefaultTypeResolverBuilder(DefaultTyping,PolymorphicTypeValidator)","Method","No Comment","// since 2.10
@Override
protected TypeResolverBuilder<?> _constructDefaultTypeResolverBuilder(DefaultTyping applicability, PolymorphicTypeValidator ptv) {
    return new DefaultingXmlTypeResolverBuilder(applicability, ptv);
}","TypeResolverBuilder","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper._constructDefaultTypeResolverBuilder(DefaultTyping,PolymorphicTypeValidator).applicability","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper._constructDefaultTypeResolverBuilder(DefaultTyping,PolymorphicTypeValidator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper._constructDefaultTypeResolverBuilder(DefaultTyping,PolymorphicTypeValidator).ptv","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper._constructDefaultTypeResolverBuilder(DefaultTyping,PolymorphicTypeValidator)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.setXMLTextElementName(String)","Method","* Method called by {@link JacksonXmlModule} to pass configuration
     * information to {@link XmlFactory}, during registration; NOT
     * exposed as public method since configuration should be done
     * via {@link JacksonXmlModule}.
     * 
     * @since 2.1
     *
     * @deprecated Since 2.10 use {@link Builder#nameForTextElement(String)} instead","@Deprecated
protected void setXMLTextElementName(String name) {
    getFactory().setXMLTextElementName(name);
}","void","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.setXMLTextElementName(String).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.setXMLTextElementName(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.setDefaultUseWrapper(boolean)","Method","* Since 2.7
     * 
     * @deprecated Since 2.10 use {@link Builder#defaultUseWrapper(boolean)} instead","@Deprecated
public XmlMapper setDefaultUseWrapper(boolean state) {
    // ser and deser configs should usually have the same introspector, so:
    AnnotationIntrospector ai0 = getDeserializationConfig().getAnnotationIntrospector();
    for (AnnotationIntrospector ai : ai0.allIntrospectors()) {
        if (ai instanceof JacksonXmlAnnotationIntrospector) {
            ((JacksonXmlAnnotationIntrospector) ai).setDefaultUseWrapper(state);
        }
    }
    return this;
}","XmlMapper","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.setDefaultUseWrapper(boolean).state","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.setDefaultUseWrapper(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.setXmlNameProcessor(XmlNameProcessor)","Method","* @since 2.14","public void setXmlNameProcessor(XmlNameProcessor processor) {
    getFactory().setXmlNameProcessor(processor);
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.setXmlNameProcessor(XmlNameProcessor).processor","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.setXmlNameProcessor(XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.getFactory()","Method","No Comment","@Override
public XmlFactory getFactory() {
    return (XmlFactory) _jsonFactory;
}","XmlFactory","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(ToXmlGenerator.Feature,boolean)","Method","No Comment","public ObjectMapper configure(ToXmlGenerator.Feature f, boolean state) {
    ((XmlFactory) _jsonFactory).configure(f, state);
    return this;
}","ObjectMapper","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(ToXmlGenerator.Feature,boolean).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(ToXmlGenerator.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(ToXmlGenerator.Feature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(ToXmlGenerator.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(FromXmlParser.Feature,boolean)","Method","No Comment","public ObjectMapper configure(FromXmlParser.Feature f, boolean state) {
    ((XmlFactory) _jsonFactory).configure(f, state);
    return this;
}","ObjectMapper","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(FromXmlParser.Feature,boolean).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(FromXmlParser.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(FromXmlParser.Feature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.configure(FromXmlParser.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(ToXmlGenerator.Feature)","Method","No Comment","public ObjectMapper enable(ToXmlGenerator.Feature f) {
    ((XmlFactory) _jsonFactory).enable(f);
    return this;
}","ObjectMapper","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(ToXmlGenerator.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(ToXmlGenerator.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(FromXmlParser.Feature)","Method","No Comment","public ObjectMapper enable(FromXmlParser.Feature f) {
    ((XmlFactory) _jsonFactory).enable(f);
    return this;
}","ObjectMapper","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(FromXmlParser.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.enable(FromXmlParser.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(ToXmlGenerator.Feature)","Method","No Comment","public ObjectMapper disable(ToXmlGenerator.Feature f) {
    ((XmlFactory) _jsonFactory).disable(f);
    return this;
}","ObjectMapper","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(ToXmlGenerator.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(ToXmlGenerator.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(FromXmlParser.Feature)","Method","No Comment","public ObjectMapper disable(FromXmlParser.Feature f) {
    ((XmlFactory) _jsonFactory).disable(f);
    return this;
}","ObjectMapper","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(FromXmlParser.Feature).f","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.disable(FromXmlParser.Feature)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.createParser(XMLStreamReader)","Method","* Overloaded variant that allows constructing {@link FromXmlParser}
     * for given Stax {@link XMLStreamReader}.
     *
     * @since 2.17","public FromXmlParser createParser(XMLStreamReader r) throws IOException {
    return getFactory().createParser(r);
}","FromXmlParser","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.createParser(XMLStreamReader).r","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.createParser(XMLStreamReader)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.createGenerator(XMLStreamWriter)","Method","* Overloaded variant that allows constructing {@link ToXmlGenerator}
     * for given Stax {@link XMLStreamWriter}.
     *
     * @since 2.17","public ToXmlGenerator createGenerator(XMLStreamWriter w) throws IOException {
    return getFactory().createGenerator(w);
}","ToXmlGenerator","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.createGenerator(XMLStreamWriter).w","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.createGenerator(XMLStreamWriter)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(XMLStreamReader,Class)","Method","* Method for reading a single XML value from given XML-specific input
     * source; useful for incremental data-binding, combining traversal using
     * basic Stax {@link XMLStreamReader} with data-binding by Jackson.
     * 
     * @since 2.4","public <T> T readValue(XMLStreamReader r, Class<T> valueType) throws IOException {
    return readValue(r, _typeFactory.constructType(valueType));
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(XMLStreamReader,Class).r","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(XMLStreamReader,Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(XMLStreamReader,Class).valueType","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(XMLStreamReader,Class)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(XMLStreamReader,TypeReference)","Method","* Method for reading a single XML value from given XML-specific input
     * source; useful for incremental data-binding, combining traversal using
     * basic Stax {@link XMLStreamReader} with data-binding by Jackson.
     * 
     * @since 2.4","public <T> T readValue(XMLStreamReader r, TypeReference<T> valueTypeRef) throws IOException {
    return readValue(r, _typeFactory.constructType(valueTypeRef));
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(XMLStreamReader,TypeReference).r","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(XMLStreamReader,TypeReference)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(XMLStreamReader,TypeReference).valueTypeRef","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(XMLStreamReader,TypeReference)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(XMLStreamReader,JavaType)","Method","* Method for reading a single XML value from given XML-specific input
     * source; useful for incremental data-binding, combining traversal using
     * basic Stax {@link XMLStreamReader} with data-binding by Jackson.
     * 
     * @since 2.4","@SuppressWarnings(""resource"")
public <T> T readValue(XMLStreamReader r, JavaType valueType) throws IOException {
    FromXmlParser p = createParser(r);
    return super.readValue(p, valueType);
}","Object","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(XMLStreamReader,JavaType).r","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(XMLStreamReader,JavaType)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(XMLStreamReader,JavaType).valueType","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.readValue(XMLStreamReader,JavaType)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValue(XMLStreamWriter,Object)","Method","* Method for serializing given value using specific {@link XMLStreamReader}:
     * useful when building large XML files by binding individual items, one at
     * a time.
     * 
     * @since 2.4","public void writeValue(XMLStreamWriter w, Object value) throws IOException {
    @SuppressWarnings(""resource"")
    ToXmlGenerator g = createGenerator(w);
    super.writeValue(g, value);
    // NOTE: above call should do flush(); and we should NOT close here.
    // Finally, 'g' has no buffers to release.
}","void","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValue(XMLStreamWriter,Object).w","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValue(XMLStreamWriter,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValue(XMLStreamWriter,Object).value","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.writeValue(XMLStreamWriter,Object)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>()","Constructor","No Comment","public XmlMapper() {
    this(new XmlFactory());
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(XMLInputFactory,XMLOutputFactory)","Constructor","* @since 2.4","public XmlMapper(XMLInputFactory inputF, XMLOutputFactory outF) {
    this(new XmlFactory(inputF, outF));
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(XMLInputFactory,XMLOutputFactory).inputF","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(XMLInputFactory,XMLOutputFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(XMLInputFactory,XMLOutputFactory).outF","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(XMLInputFactory,XMLOutputFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(XMLInputFactory)","Constructor","* @since 2.4","public XmlMapper(XMLInputFactory inputF) {
    this(new XmlFactory(inputF));
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(XMLInputFactory).inputF","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(XMLInputFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(XmlFactory)","Constructor","No Comment","public XmlMapper(XmlFactory xmlFactory) {
    this(xmlFactory, DEFAULT_XML_MODULE);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(XmlFactory).xmlFactory","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(XmlFactory)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(JacksonXmlModule)","Constructor","No Comment","public XmlMapper(JacksonXmlModule module) {
    this(new XmlFactory(), module);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(JacksonXmlModule).module","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(JacksonXmlModule)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(XmlFactory,JacksonXmlModule)","Constructor","No Comment","public XmlMapper(XmlFactory xmlFactory, JacksonXmlModule module) {
    // Need to override serializer provider (due to root name handling);
    // deserializer provider fine as is
    super(xmlFactory, new XmlSerializerProvider(new XmlRootNameLookup()), new XmlDeserializationContext(BeanDeserializerFactory.instance));
    _xmlModule = module;
    // but all the rest is done via Module interface!
    if (module != null) {
        // [dataformat-xml#678]: need special handling for SerializerFactory override
        SerializerFactory sfOverride = module.serializerFactoryOverride();
        if (sfOverride != null) {
            setSerializerFactory(sfOverride);
        }
        registerModule(module);
    }
    // 19-May-2015, tatu: Must ensure we use XML-specific indenter
    _serializationConfig = _serializationConfig.withDefaultPrettyPrinter(DEFAULT_XML_PRETTY_PRINTER);
    // 21-Jun-2017, tatu: Seems like there are many cases in XML where ability to coerce empty
    //    String into `null` (where it otherwise is an error) is very useful.
    enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);
    // 13-May-2020, tatu: [dataformat-xml#377] Need to ensure we will keep XML-specific
    //    Base64 default as ""MIME"" (not MIME-NO-LINEFEEDS), to preserve pre-2.12
    //    behavior
    setBase64Variant(Base64Variants.MIME);
    // 04-Jun-2020, tatu: Use new (2.12) ""CoercionConfigs"" to support coercion
    //   from empty and blank Strings to ""empty"" POJOs etc
    coercionConfigDefaults().// To allow indentation without problems, need to accept blank String as empty:
    setAcceptBlankAsEmpty(Boolean.TRUE).// and then coercion from empty String to empty value, in general
    setCoercion(CoercionInputShape.EmptyString, CoercionAction.AsEmpty);
    // 03-May-2021, tatu: ... except make sure to keep ""empty to Null"" for
    //   scalar types...
    coercionConfigFor(LogicalType.Integer).setCoercion(CoercionInputShape.EmptyString, CoercionAction.AsNull);
    coercionConfigFor(LogicalType.Float).setCoercion(CoercionInputShape.EmptyString, CoercionAction.AsNull);
    coercionConfigFor(LogicalType.Boolean).setCoercion(CoercionInputShape.EmptyString, CoercionAction.AsNull);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(XmlFactory,JacksonXmlModule).xmlFactory","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(XmlFactory,JacksonXmlModule)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(XmlFactory,JacksonXmlModule).module","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(XmlFactory,JacksonXmlModule)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(XmlMapper)","Constructor","* @since 2.8.9","protected XmlMapper(XmlMapper src) {
    super(src);
    _xmlModule = src._xmlModule;
}","No return type","protected ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(XmlMapper).src","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.<init>(XmlMapper)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder","Class","* Builder implementation for constructing {@link XmlMapper} instances.
     *
     * @since 2.10","Class do not obtain Source Code","No return type","public , static ","com.fasterxml.jackson.databind.cfg.MapperBuilder",""
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.enable(FromXmlParser.Feature[])","Method","No Comment","public Builder enable(FromXmlParser.Feature... features) {
    for (FromXmlParser.Feature f : features) {
        _mapper.enable(f);
    }
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.enable(FromXmlParser.Feature[]).features","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.enable(FromXmlParser.Feature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.disable(FromXmlParser.Feature[])","Method","No Comment","public Builder disable(FromXmlParser.Feature... features) {
    for (FromXmlParser.Feature f : features) {
        _mapper.disable(f);
    }
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.disable(FromXmlParser.Feature[]).features","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.disable(FromXmlParser.Feature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.configure(FromXmlParser.Feature,boolean)","Method","No Comment","public Builder configure(FromXmlParser.Feature feature, boolean state) {
    if (state) {
        _mapper.enable(feature);
    } else {
        _mapper.disable(feature);
    }
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.configure(FromXmlParser.Feature,boolean).feature","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.configure(FromXmlParser.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.configure(FromXmlParser.Feature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.configure(FromXmlParser.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.enable(ToXmlGenerator.Feature[])","Method","No Comment","public Builder enable(ToXmlGenerator.Feature... features) {
    for (ToXmlGenerator.Feature f : features) {
        _mapper.enable(f);
    }
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.enable(ToXmlGenerator.Feature[]).features","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.enable(ToXmlGenerator.Feature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.disable(ToXmlGenerator.Feature[])","Method","No Comment","public Builder disable(ToXmlGenerator.Feature... features) {
    for (ToXmlGenerator.Feature f : features) {
        _mapper.disable(f);
    }
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.disable(ToXmlGenerator.Feature[]).features","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.disable(ToXmlGenerator.Feature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.configure(ToXmlGenerator.Feature,boolean)","Method","No Comment","public Builder configure(ToXmlGenerator.Feature feature, boolean state) {
    if (state) {
        _mapper.enable(feature);
    } else {
        _mapper.disable(feature);
    }
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.configure(ToXmlGenerator.Feature,boolean).feature","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.configure(ToXmlGenerator.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.configure(ToXmlGenerator.Feature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.configure(ToXmlGenerator.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.nameForTextElement(String)","Method","No Comment","public Builder nameForTextElement(String name) {
    _mapper.setXMLTextElementName(name);
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.nameForTextElement(String).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.nameForTextElement(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.defaultUseWrapper(boolean)","Method","No Comment","public Builder defaultUseWrapper(boolean state) {
    _mapper.setDefaultUseWrapper(state);
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.defaultUseWrapper(boolean).state","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.defaultUseWrapper(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.xmlNameProcessor(XmlNameProcessor)","Method","* @since 2.14","public Builder xmlNameProcessor(XmlNameProcessor processor) {
    _mapper.setXmlNameProcessor(processor);
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.xmlNameProcessor(XmlNameProcessor).processor","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.xmlNameProcessor(XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.<init>(XmlMapper)","Constructor","No Comment","public Builder(XmlMapper m) {
    super(m);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.<init>(XmlMapper).m","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper$Builder.<init>(XmlMapper)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder","Class","* Builder implementation for constructing {@link XmlMapper} instances.
     *
     * @since 2.10","Class do not obtain Source Code","No return type","public , static ","com.fasterxml.jackson.databind.cfg.MapperBuilder",""
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.enable(FromXmlParser.Feature[])","Method","No Comment","public Builder enable(FromXmlParser.Feature... features) {
    for (FromXmlParser.Feature f : features) {
        _mapper.enable(f);
    }
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.enable(FromXmlParser.Feature[]).features","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.enable(FromXmlParser.Feature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.disable(FromXmlParser.Feature[])","Method","No Comment","public Builder disable(FromXmlParser.Feature... features) {
    for (FromXmlParser.Feature f : features) {
        _mapper.disable(f);
    }
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.disable(FromXmlParser.Feature[]).features","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.disable(FromXmlParser.Feature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.configure(FromXmlParser.Feature,boolean)","Method","No Comment","public Builder configure(FromXmlParser.Feature feature, boolean state) {
    if (state) {
        _mapper.enable(feature);
    } else {
        _mapper.disable(feature);
    }
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.configure(FromXmlParser.Feature,boolean).feature","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.configure(FromXmlParser.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.configure(FromXmlParser.Feature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.configure(FromXmlParser.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.enable(ToXmlGenerator.Feature[])","Method","No Comment","public Builder enable(ToXmlGenerator.Feature... features) {
    for (ToXmlGenerator.Feature f : features) {
        _mapper.enable(f);
    }
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.enable(ToXmlGenerator.Feature[]).features","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.enable(ToXmlGenerator.Feature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.disable(ToXmlGenerator.Feature[])","Method","No Comment","public Builder disable(ToXmlGenerator.Feature... features) {
    for (ToXmlGenerator.Feature f : features) {
        _mapper.disable(f);
    }
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.disable(ToXmlGenerator.Feature[]).features","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.disable(ToXmlGenerator.Feature[])","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.configure(ToXmlGenerator.Feature,boolean)","Method","No Comment","public Builder configure(ToXmlGenerator.Feature feature, boolean state) {
    if (state) {
        _mapper.enable(feature);
    } else {
        _mapper.disable(feature);
    }
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.configure(ToXmlGenerator.Feature,boolean).feature","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.configure(ToXmlGenerator.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.configure(ToXmlGenerator.Feature,boolean).state","Parameter_2","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.configure(ToXmlGenerator.Feature,boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.nameForTextElement(String)","Method","No Comment","public Builder nameForTextElement(String name) {
    _mapper.setXMLTextElementName(name);
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.nameForTextElement(String).name","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.nameForTextElement(String)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.defaultUseWrapper(boolean)","Method","No Comment","public Builder defaultUseWrapper(boolean state) {
    _mapper.setDefaultUseWrapper(state);
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.defaultUseWrapper(boolean).state","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.defaultUseWrapper(boolean)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.xmlNameProcessor(XmlNameProcessor)","Method","* @since 2.14","public Builder xmlNameProcessor(XmlNameProcessor processor) {
    _mapper.setXmlNameProcessor(processor);
    return this;
}","Builder","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.xmlNameProcessor(XmlNameProcessor).processor","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.xmlNameProcessor(XmlNameProcessor)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.<init>(XmlMapper)","Constructor","No Comment","public Builder(XmlMapper m) {
    super(m);
}","No return type","public ","method/parameter/variable has no extends","method/parameter/variable has no implements"
"com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.<init>(XmlMapper).m","Parameter_1","Belong to com.fasterxml.jackson.dataformat.xml.XmlMapper.Builder.<init>(XmlMapper)","Parameter has not source code","No return type","No modifier","method/parameter/variable has no extends","method/parameter/variable has no implements"
