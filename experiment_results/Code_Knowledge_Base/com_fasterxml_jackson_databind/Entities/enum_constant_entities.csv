FEN:ID,:LABEL,Comment,Source Code,Signature,Modifiers
com.fasterxml.jackson.databind.JsonNode$OverwriteMode.NONE,Enum Constant,"* Mode in which no values may be overwritten, not even {@code NullNode}s;\n         * only compatible paths may be traversed.",NONE,com.fasterxml.jackson.databind.JsonNode$OverwriteMode NONE,public 
com.fasterxml.jackson.databind.JsonNode$OverwriteMode.NULLS,Enum Constant,* Mode in which explicit {@code NullNode}s may be replaced but no other\n         * node types.,NULLS,com.fasterxml.jackson.databind.JsonNode$OverwriteMode NULLS,public 
com.fasterxml.jackson.databind.JsonNode$OverwriteMode.SCALARS,Enum Constant,"* Mode in which all scalar value nodes may be replaced, but not\n         * Array or Object nodes.",SCALARS,com.fasterxml.jackson.databind.JsonNode$OverwriteMode SCALARS,public 
com.fasterxml.jackson.databind.JsonNode$OverwriteMode.ALL,Enum Constant,"* Mode in which all incompatible node types may be replaced, including\n         * Array and Object nodes where necessary.",ALL,com.fasterxml.jackson.databind.JsonNode$OverwriteMode ALL,public 
com.fasterxml.jackson.databind.util.AccessPattern.ALWAYS_NULL,Enum Constant,* Value that indicates that provider never returns anything other than\n     * Java `null`.,ALWAYS_NULL,com.fasterxml.jackson.databind.util.AccessPattern ALWAYS_NULL,public 
com.fasterxml.jackson.databind.util.AccessPattern.CONSTANT,Enum Constant,"* Value that indicates that provider will always return a constant\n     * value, regardless of when it is called; and also that it never\n     * uses `context` argument (which may then be passed as `null`)",CONSTANT,com.fasterxml.jackson.databind.util.AccessPattern CONSTANT,public 
com.fasterxml.jackson.databind.util.AccessPattern.DYNAMIC,Enum Constant,"* Value that indicates that provider may return different values\n     * at different times (often a freshly constructed empty container),\n     * and thus must be called every time ""null replacement"" value is\n     * needed.",DYNAMIC,com.fasterxml.jackson.databind.util.AccessPattern DYNAMIC,public 
com.fasterxml.jackson.databind.util.NamingStrategyImpls.LOWER_CAMEL_CASE,Enum Constant,* beanName {@code ->} beanName,LOWER_CAMEL_CASE {\n\n    @Override\n    public String translate(String beanName) {\n        // beanName is already in lower camel case\n        return beanName;\n    }\n},com.fasterxml.jackson.databind.util.NamingStrategyImpls LOWER_CAMEL_CASE,public 
com.fasterxml.jackson.databind.util.NamingStrategyImpls.UPPER_CAMEL_CASE,Enum Constant,* beanName {@code ->} BeanName,"UPPER_CAMEL_CASE {\n\n    @Override\n    public String translate(String beanName) {\n        if (beanName == null || beanName.isEmpty()) {\n            // garbage in, garbage out\n            return beanName;\n        }\n        // Replace first lower-case letter with upper-case equivalent\n        char c = beanName.charAt(0);\n        char uc = Character.toUpperCase(c);\n        if (c == uc) {\n            return beanName;\n        }\n        StringBuilder sb = new StringBuilder(beanName);\n        sb.setCharAt(0, uc);\n        return sb.toString();\n    }\n}",com.fasterxml.jackson.databind.util.NamingStrategyImpls UPPER_CAMEL_CASE,public 
com.fasterxml.jackson.databind.util.NamingStrategyImpls.SNAKE_CASE,Enum Constant,* beanName {@code ->} bean_name,"SNAKE_CASE {\n\n    @Override\n    public String translate(String beanName) {\n        // garbage in, garbage out\n        if (beanName == null)\n            return beanName;\n        int length = beanName.length();\n        StringBuilder result = new StringBuilder(length * 2);\n        int resultLength = 0;\n        boolean wasPrevTranslated = false;\n        for (int i = 0; i < length; i++) {\n            char c = beanName.charAt(i);\n            if (// skip first starting underscore\n            i > 0 || c != '_') {\n                if (Character.isUpperCase(c)) {\n                    if (!wasPrevTranslated && resultLength > 0 && result.charAt(resultLength - 1) != '_') {\n                        result.append('_');\n                        resultLength++;\n                    }\n                    c = Character.toLowerCase(c);\n                    wasPrevTranslated = true;\n                } else {\n                    wasPrevTranslated = false;\n                }\n                result.append(c);\n                resultLength++;\n            }\n        }\n        return resultLength > 0 ? result.toString() : beanName;\n    }\n}",com.fasterxml.jackson.databind.util.NamingStrategyImpls SNAKE_CASE,public 
com.fasterxml.jackson.databind.util.NamingStrategyImpls.UPPER_SNAKE_CASE,Enum Constant,* beanName {@code ->} BEAN_NAME,UPPER_SNAKE_CASE {\n\n    @Override\n    public String translate(String beanName) {\n        String output = SNAKE_CASE.translate(beanName);\n        if (output == null) {\n            return null;\n        }\n        return output.toUpperCase();\n    }\n},com.fasterxml.jackson.databind.util.NamingStrategyImpls UPPER_SNAKE_CASE,public 
com.fasterxml.jackson.databind.util.NamingStrategyImpls.LOWER_CASE,Enum Constant,* beanName {@code ->} beanname,LOWER_CASE {\n\n    @Override\n    public String translate(String beanName) {\n        if (beanName == null || beanName.isEmpty()) {\n            return beanName;\n        }\n        return beanName.toLowerCase();\n    }\n},com.fasterxml.jackson.databind.util.NamingStrategyImpls LOWER_CASE,public 
com.fasterxml.jackson.databind.util.NamingStrategyImpls.KEBAB_CASE,Enum Constant,* beanName {@code ->} bean-name,"KEBAB_CASE {\n\n    @Override\n    public String translate(String beanName) {\n        return translateLowerCaseWithSeparator(beanName, '-');\n    }\n}",com.fasterxml.jackson.databind.util.NamingStrategyImpls KEBAB_CASE,public 
com.fasterxml.jackson.databind.util.NamingStrategyImpls.LOWER_DOT_CASE,Enum Constant,* beanName {@code ->} bean.name,"LOWER_DOT_CASE {\n\n    @Override\n    public String translate(String beanName) {\n        return translateLowerCaseWithSeparator(beanName, '.');\n    }\n}",com.fasterxml.jackson.databind.util.NamingStrategyImpls LOWER_DOT_CASE,public 
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$DrainStatus.IDLE,Enum Constant,A drain is not taking place.,IDLE {\n\n    @Override\n    boolean shouldDrainBuffers(boolean delayable) {\n        return !delayable;\n    }\n},com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$DrainStatus IDLE,default
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$DrainStatus.REQUIRED,Enum Constant,A drain is required due to a pending write modification.,REQUIRED {\n\n    @Override\n    boolean shouldDrainBuffers(boolean delayable) {\n        return true;\n    }\n},com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$DrainStatus REQUIRED,default
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$DrainStatus.PROCESSING,Enum Constant,A drain is in progress.,PROCESSING {\n\n    @Override\n    boolean shouldDrainBuffers(boolean delayable) {\n        return false;\n    }\n},com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$DrainStatus PROCESSING,default
com.fasterxml.jackson.databind.SerializationFeature.WRAP_ROOT_VALUE,Enum Constant,"* Feature that can be enabled to make root value (usually JSON\n     * Object but can be any type) wrapped within a single property\n     * JSON object, where key as the ""root name"", as determined by\n     * annotation introspector (esp. for JAXB that uses\n     * <code>@XmlRootElement.name</code>) or fallback (non-qualified\n     * class name).\n     * Feature is mostly intended for JAXB compatibility.\n     *<p>\n     * Feature is disabled by default.",WRAP_ROOT_VALUE(false),com.fasterxml.jackson.databind.SerializationFeature WRAP_ROOT_VALUE,public 
com.fasterxml.jackson.databind.SerializationFeature.INDENT_OUTPUT,Enum Constant,"* Feature that allows enabling (or disabling) indentation\n     * for the underlying generator, using the default pretty\n     * printer configured for {@link ObjectMapper} (and\n     * {@link ObjectWriter}s created from mapper).\n     *<p>\n     * Note that the default pretty printer is only used if\n     * no explicit {@link com.fasterxml.jackson.core.PrettyPrinter} has been configured\n     * for the generator or {@link ObjectWriter}.\n     *<p>\n     * Feature is disabled by default.",INDENT_OUTPUT(false),com.fasterxml.jackson.databind.SerializationFeature INDENT_OUTPUT,public 
com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_EMPTY_BEANS,Enum Constant,"* Feature that determines what happens when no accessors are\n     * found for a type (and there are no annotations to indicate\n     * it is meant to be serialized). If enabled (default), an\n     * exception is thrown to indicate these as non-serializable\n     * types; if disabled, they are serialized as empty Objects,\n     * i.e. without any properties.\n     *<p>\n     * Note that empty types that this feature has only effect on\n     * those ""empty"" beans that do not have any recognized annotations\n     * (like <code>@JsonSerialize</code>): ones that do have annotations\n     * do not result in an exception being thrown.\n     *<p>\n     * Feature is enabled by default.",FAIL_ON_EMPTY_BEANS(true),com.fasterxml.jackson.databind.SerializationFeature FAIL_ON_EMPTY_BEANS,public 
com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_SELF_REFERENCES,Enum Constant,"* Feature that determines what happens when a direct self-reference\n     * is detected by a POJO (and no Object Id handling is enabled for it):\n     * either a {@link JsonMappingException} is\n     * thrown (if true), or reference is normally processed (false).\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.4",FAIL_ON_SELF_REFERENCES(true),com.fasterxml.jackson.databind.SerializationFeature FAIL_ON_SELF_REFERENCES,public 
com.fasterxml.jackson.databind.SerializationFeature.WRAP_EXCEPTIONS,Enum Constant,"* Feature that determines whether Jackson code should catch\n     * and wrap {@link Exception}s (but never {@link Error}s!)\n     * to add additional information about\n     * location (within input) of problem or not. If enabled,\n     * most exceptions will be caught and re-thrown (exception\n     * specifically being that {@link java.io.IOException}s may be passed\n     * as is, since they are declared as throwable); this can be\n     * convenient both in that all exceptions will be checked and\n     * declared, and so there is more contextual information.\n     * However, sometimes calling application may just want ""raw""\n     * unchecked exceptions passed as is.\n     *<p>\n     *<p>\n     * Feature is enabled by default.",WRAP_EXCEPTIONS(true),com.fasterxml.jackson.databind.SerializationFeature WRAP_EXCEPTIONS,public 
com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS,Enum Constant,"* Feature that determines what happens when an object which\n     * normally has type information included by Jackson is used\n     * in conjunction with {@link com.fasterxml.jackson.annotation.JsonUnwrapped}.\n     * In the default (enabled) state, an error will be thrown when\n     * an unwrapped object has type information. When disabled, the\n     * object will be unwrapped and the type information discarded.\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.4",FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS(true),com.fasterxml.jackson.databind.SerializationFeature FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS,public 
com.fasterxml.jackson.databind.SerializationFeature.WRITE_SELF_REFERENCES_AS_NULL,Enum Constant,"* Feature that determines what happens when a direct self-reference is detected\n     * by a POJO (and no Object Id handling is enabled for it):\n     * if enabled write that reference as null; if disabled, default behavior is\n     * used (which will try to serialize usually resulting in exception).\n     * But if {@link SerializationFeature#FAIL_ON_SELF_REFERENCES} is enabled. this property is ignored.\n     * <p>\n     * Feature is disabled by default.\n     *\n     * @since 2.11",WRITE_SELF_REFERENCES_AS_NULL(false),com.fasterxml.jackson.databind.SerializationFeature WRITE_SELF_REFERENCES_AS_NULL,public 
com.fasterxml.jackson.databind.SerializationFeature.CLOSE_CLOSEABLE,Enum Constant,"* Feature that determines whether <code>close</code> method of\n      * serialized <b>root level</b> objects (ones for which <code>ObjectMapper</code>'s\n      * writeValue() (or equivalent) method is called)\n      * that implement {@link java.io.Closeable}\n      * is called after serialization or not. If enabled, <b>close()</b> will\n      * be called after serialization completes (whether succesfully, or\n      * due to an error manifested by an exception being thrown). You can\n      * think of this as sort of ""finally"" processing.\n      *<p>\n      * NOTE: only affects behavior with <b>root</b> objects, and not other\n      * objects reachable from the root object. Put another way, only one\n      * call will be made for each 'writeValue' call.\n     *<p>\n     * Feature is disabled by default.",CLOSE_CLOSEABLE(false),com.fasterxml.jackson.databind.SerializationFeature CLOSE_CLOSEABLE,public 
com.fasterxml.jackson.databind.SerializationFeature.FLUSH_AFTER_WRITE_VALUE,Enum Constant,* Feature that determines whether <code>JsonGenerator.flush()</code> is\n     * called after <code>writeValue()</code> method <b>that takes JsonGenerator\n     * as an argument</b> completes (i.e. does NOT affect methods\n     * that use other destinations); same for methods in {@link ObjectWriter}.\n     * This usually makes sense; but there are cases where flushing\n     * should not be forced: for example when underlying stream is\n     * compressing and flush() causes compression state to be flushed\n     * (which occurs with some compression codecs).\n     *<p>\n     * Feature is enabled by default.,FLUSH_AFTER_WRITE_VALUE(true),com.fasterxml.jackson.databind.SerializationFeature FLUSH_AFTER_WRITE_VALUE,public 
com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,Enum Constant,"* Feature that determines whether Date (and date/time) values\n     * (and Date-based things like {@link java.util.Calendar}s) are to be\n     * serialized as numeric time stamps (true; the default),\n     * or as something else (usually textual representation).\n     * If textual representation is used, the actual format depends on configuration\n     * settings including possible per-property use of {@code @JsonFormat} annotation,\n     * globally configured {@link java.text.DateFormat}.\n     *<p>\n     * For ""classic"" JDK date types ({@link java.util.Date}, {@link java.util.Calendar})\n     * the default formatting is provided by {@link com.fasterxml.jackson.databind.util.StdDateFormat},\n     * and corresponds to format String of ""yyyy-MM-dd'T'HH:mm:ss.SSSX""\n     * (see {@link java.text.DateFormat} for details of format Strings).\n     * Whether this feature affects handling of other date-related\n     * types depend on handlers of those types, although ideally they\n     * should use this feature\n     *<p>\n     * Note: whether {@link java.util.Map} keys are serialized as Strings\n     * or not is controlled using {@link #WRITE_DATE_KEYS_AS_TIMESTAMPS} instead of\n     * this feature.\n     *<p>\n     * Feature is enabled by default, so that date/time are by default\n     * serialized as time stamps.",WRITE_DATES_AS_TIMESTAMPS(true),com.fasterxml.jackson.databind.SerializationFeature WRITE_DATES_AS_TIMESTAMPS,public 
com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS,Enum Constant,"* Feature that determines whether {@link java.util.Date}s\n     * (and sub-types) used as {@link java.util.Map} keys are serialized\n     * as time stamps or not (if not, will be serialized as textual values).\n     *<p>\n     * Default value is 'false', meaning that Date-valued Map keys are serialized\n     * as textual (ISO-8601) values.\n     *<p>\n     * Feature is disabled by default.",WRITE_DATE_KEYS_AS_TIMESTAMPS(false),com.fasterxml.jackson.databind.SerializationFeature WRITE_DATE_KEYS_AS_TIMESTAMPS,public 
com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_WITH_ZONE_ID,Enum Constant,"* Feature that determines whether date/date-time values should be serialized\n     * so that they include timezone id, in cases where type itself contains\n     * timezone information. Including this information may lead to compatibility\n     * issues because ISO-8601 specification does not define formats that include\n     * such information.\n     *<p>\n     * If enabled, Timezone id should be included using format specified\n     * with Java 8 <code>DateTimeFormatter#ISO_ZONED_DATE_TIME</code> definition\n     * (for example, '2011-12-03T10:15:30+01:00[Europe/Paris]').\n     *<p>\n     * Note: setting has no relevance if date/time values are serialized as timestamps.\n     *<p>\n     * Feature is disabled by default, so that zone id is NOT included; rather, timezone\n     * offset is used for ISO-8601 compatibility (if any timezone information is\n     * included in value).\n     *\n     * @since 2.6",WRITE_DATES_WITH_ZONE_ID(false),com.fasterxml.jackson.databind.SerializationFeature WRITE_DATES_WITH_ZONE_ID,public 
com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_WITH_CONTEXT_TIME_ZONE,Enum Constant,"* Feature that determines whether timezone/offset included in zoned date/time\n     * values (note: does NOT {@link java.util.Date} will be overridden if there\n     * is an explicitly set context time zone.\n     * If disabled, timezone/offset value is used-is; if enabled, context time zone\n     * is used instead.\n     *<p>\n     * Note that this setting only affects ""Zoned"" date/time values of\n     * {@code Java 8 date/time} types -- it will have no effect on old\n     * {@link java.util} value handling (of which {@link java.util.Date} has no timezone\n     * information and must use contextual timezone, implicit or explicit; and\n     * {@link java.util.Calendar} which will always use timezone Calendar value has).\n     * Setting is also ignored by Joda date/time values.\n     *<p>\n     * Feature is enabled by default for backwards-compatibility purposes (in\n     * Jackson 2.12 override was always done if there was explicitly defined timezone).\n     *\n     * @since 2.13",WRITE_DATES_WITH_CONTEXT_TIME_ZONE(true),com.fasterxml.jackson.databind.SerializationFeature WRITE_DATES_WITH_CONTEXT_TIME_ZONE,public 
com.fasterxml.jackson.databind.SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS,Enum Constant,"* Feature that determines whether time values that represents time periods\n     * (durations, periods, ranges) are to be serialized by default using\n     * a numeric (true) or textual (false) representations. Note that numeric\n     * representation may mean either simple number, or an array of numbers,\n     * depending on type.\n     *<p>\n     * Feature is enabled by default in Jackson 2.x, so that period/duration values\n     * are by default serialized as timestamps.\n     * It will be disabled by default in Jackson 3.x.\n     *\n     * @since 2.5",WRITE_DURATIONS_AS_TIMESTAMPS(true),com.fasterxml.jackson.databind.SerializationFeature WRITE_DURATIONS_AS_TIMESTAMPS,public 
com.fasterxml.jackson.databind.SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS,Enum Constant,"* Feature that determines how type <code>char[]</code> is serialized:\n     * when enabled, will be serialized as an explict JSON array (with\n     * single-character Strings as values); when disabled, defaults to\n     * serializing them as Strings (which is more compact).\n     *<p>\n     * Feature is disabled by default.",WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS(false),com.fasterxml.jackson.databind.SerializationFeature WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS,public 
com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUMS_USING_TO_STRING,Enum Constant,"* Feature that determines standard serialization mechanism used for\n     * Enum values: if enabled, return value of <code>Enum.toString()</code>\n     * is used; if disabled, return value of <code>Enum.name()</code> is used.\n     *<p>\n     * Note: this feature should usually have same value\n     * as {@link DeserializationFeature#READ_ENUMS_USING_TO_STRING}.\n     *<p>\n     * Feature is disabled by default.",WRITE_ENUMS_USING_TO_STRING(false),com.fasterxml.jackson.databind.SerializationFeature WRITE_ENUMS_USING_TO_STRING,public 
com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUMS_USING_INDEX,Enum Constant,"* Feature that determines whether Java Enum values are serialized\n     * as numbers (true), or textual values (false). If textual values are\n     * used, other settings are also considered.\n     * If this feature is enabled,\n     *  return value of <code>Enum.ordinal()</code>\n     * (an integer) will be used as the serialization.\n     *<p>\n     * Note that this feature has precedence over {@link #WRITE_ENUMS_USING_TO_STRING},\n     * which is only considered if this feature is set to false.\n     *<p>\n     * Note that since 2.10, this does NOT apply to {@link Enum}s written as\n     * keys of {@link java.util.Map} values, which has separate setting,\n     * {@link #WRITE_ENUM_KEYS_USING_INDEX}.\n     *<p>\n     * Feature is disabled by default.",WRITE_ENUMS_USING_INDEX(false),com.fasterxml.jackson.databind.SerializationFeature WRITE_ENUMS_USING_INDEX,public 
com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUM_KEYS_USING_INDEX,Enum Constant,* Feature that determines whether {link Enum}s\n     * used as {@link java.util.Map} keys are serialized\n     * as using {@link Enum#ordinal()} or not.\n     * Similar to {@link #WRITE_ENUMS_USING_INDEX} used when writing\n     * {@link Enum}s as regular values.\n     *<p>\n     * NOTE: counterpart for this settings is\n     * {@link EnumFeature#READ_ENUM_KEYS_USING_INDEX}.\n     *<p>\n     * Feature is disabled by default.\n     *\n     * @since 2.10,WRITE_ENUM_KEYS_USING_INDEX(false),com.fasterxml.jackson.databind.SerializationFeature WRITE_ENUM_KEYS_USING_INDEX,public 
com.fasterxml.jackson.databind.SerializationFeature.WRITE_NULL_MAP_VALUES,Enum Constant,"* Feature that determines whether Map entries with null values are\n     * to be serialized (true) or not (false).\n     *<p>\n     * NOTE: unlike other {@link SerializationFeature}s, this feature <b>cannot</b> be\n     * dynamically changed on per-call basis, because its effect is considered during\n     * construction of serializers and property handlers.\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @deprecated Since 2.9 there are better mechanism for specifying filtering; specifically\n     *   using {@link com.fasterxml.jackson.annotation.JsonInclude} or configuration overrides\n     *   (see {@link ObjectMapper#configOverride(Class)}}).",// since 2.9\n@Deprecated\nWRITE_NULL_MAP_VALUES(true),com.fasterxml.jackson.databind.SerializationFeature WRITE_NULL_MAP_VALUES,public 
com.fasterxml.jackson.databind.SerializationFeature.WRITE_EMPTY_JSON_ARRAYS,Enum Constant,"* Feature that determines whether Container properties (POJO properties\n     * with declared value of Collection or array; i.e. things that produce JSON\n     * arrays) that are empty (have no elements)\n     * will be serialized as empty JSON arrays (true), or suppressed from output (false).\n     *<p>\n     * Note that this does not change behavior of {@link java.util.Map}s, or\n     * ""Collection-like"" types.\n     *<p>\n     * NOTE: unlike other {@link SerializationFeature}s, this feature <b>cannot</b> be\n     * dynamically changed on per-call basis, because its effect is considered during\n     * construction of serializers and property handlers.\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @deprecated Since 2.8 there are better mechanism for specifying filtering; specifically\n     *   using {@link com.fasterxml.jackson.annotation.JsonInclude} or configuration overrides.",// since 2.8\n@Deprecated\nWRITE_EMPTY_JSON_ARRAYS(true),com.fasterxml.jackson.databind.SerializationFeature WRITE_EMPTY_JSON_ARRAYS,public 
com.fasterxml.jackson.databind.SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED,Enum Constant,"* Feature added for interoperability, to work with oddities of\n     * so-called ""BadgerFish"" convention.\n     * Feature determines handling of single element {@link java.util.Collection}s\n     * and arrays: if enabled, {@link java.util.Collection}s and arrays that contain exactly\n     * one element will be serialized as if that element itself was serialized.\n     *<p>\n     * When enabled, a POJO with array that normally looks like this:\n     *<pre>\n     *  { ""arrayProperty"" : [ 1 ] }\n     *</pre>\n     * will instead be serialized as\n     *<pre>\n     *  { ""arrayProperty"" : 1 }\n     *</pre>\n     *<p>\n     * Note that this feature is counterpart to {@link DeserializationFeature#ACCEPT_SINGLE_VALUE_AS_ARRAY}\n     * (that is, usually both are enabled, or neither is).\n     *<p>\n     * Feature is disabled by default, so that no special handling is done.",WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED(false),com.fasterxml.jackson.databind.SerializationFeature WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED,public 
com.fasterxml.jackson.databind.SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN,Enum Constant,* Feature that determines whether {@link java.math.BigDecimal} entries are\n     * serialized using {@link java.math.BigDecimal#toPlainString()} to prevent\n     * values to be written using scientific notation.\n     *<p>\n     * NOTE: since this feature typically requires use of\n     * {@link com.fasterxml.jackson.core.JsonGenerator#writeNumber(String)}\n     * it may cause compatibility problems since not all {@link com.fasterxml.jackson.core.JsonGenerator}\n     * implementations support such mode of output: usually only text-based formats\n     * support it.\n     *<p>\n     * Feature is disabled by default.\n     *\n     * @deprecated Since 2.5: use {@link com.fasterxml.jackson.core.JsonGenerator.Feature#WRITE_BIGDECIMAL_AS_PLAIN} instead\n     *    (using {@link ObjectWriter#with(com.fasterxml.jackson.core.JsonGenerator.Feature)}).,// since 2.5\n@Deprecated\nWRITE_BIGDECIMAL_AS_PLAIN(false),com.fasterxml.jackson.databind.SerializationFeature WRITE_BIGDECIMAL_AS_PLAIN,public 
com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS,Enum Constant,"* Feature that controls whether numeric timestamp values are\n     * to be written using nanosecond timestamps (enabled) or not (disabled);\n     * <b>if and only if</b> datatype supports such resolution.\n     * Only newer datatypes (such as Java8 Date/Time) support such resolution --\n     * older types (pre-Java8 <b>java.util.Date</b> etc) and Joda do not --\n     * and this setting <b>has no effect</b> on such types.\n     *<p>\n     * If disabled, standard millisecond timestamps are assumed.\n     * This is the counterpart to {@link DeserializationFeature#READ_DATE_TIMESTAMPS_AS_NANOSECONDS}.\n     *<p>\n     * Feature is enabled by default, to support most accurate time values possible.\n     *\n     * @since 2.2",WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS(true),com.fasterxml.jackson.databind.SerializationFeature WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS,public 
com.fasterxml.jackson.databind.SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS,Enum Constant,"* Feature that determines whether {@link java.util.Map} entries are first\n     * sorted by key before serialization or not: if enabled, additional sorting\n     * step is performed if necessary (not necessary for {@link java.util.SortedMap}s),\n     * if disabled, no additional sorting is needed.\n     *<p>\n     * Feature is disabled by default.",ORDER_MAP_ENTRIES_BY_KEYS(false),com.fasterxml.jackson.databind.SerializationFeature ORDER_MAP_ENTRIES_BY_KEYS,public 
com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_ORDER_MAP_BY_INCOMPARABLE_KEY,Enum Constant,"* Feature that determines whether to intentionally fail when the mapper attempts to\n     * order map entries with incomparable keys by accessing the first key of the map.\n     * So depending on the Map implementation, this may not be the same key every time.\n     * <p>\n     * If enabled, will simply fail by throwing an exception.\n     * If disabled, will not throw an exception and instead simply return the original map.\n     * <p>\n     * Note that this feature will apply only when configured to order map entries by keys, either\n     * through annotation or enabling {@link #ORDER_MAP_ENTRIES_BY_KEYS}.\n     * <p>\n     * Feature is enabled by default and will default false in Jackson 3 and later.\n     *\n     * @since 2.19",FAIL_ON_ORDER_MAP_BY_INCOMPARABLE_KEY(true),com.fasterxml.jackson.databind.SerializationFeature FAIL_ON_ORDER_MAP_BY_INCOMPARABLE_KEY,public 
com.fasterxml.jackson.databind.SerializationFeature.EAGER_SERIALIZER_FETCH,Enum Constant,* Feature that determines whether {@link ObjectWriter} should\n     * try to eagerly fetch necessary {@link JsonSerializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectWriter} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.1,EAGER_SERIALIZER_FETCH(true),com.fasterxml.jackson.databind.SerializationFeature EAGER_SERIALIZER_FETCH,public 
com.fasterxml.jackson.databind.SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID,Enum Constant,"* Feature that determines whether Object Identity is compared using\n     * true JVM-level identity of Object (false); or, <code>equals()</code> method.\n     * Latter is sometimes useful when dealing with Database-bound objects with\n     * ORM libraries (like Hibernate). Note that Object itself is actually compared,\n     * and NOT Object Id; naming of this feature is somewhat confusing, so it is important\n     * that Object <b>for which identity is to be preserved</b> are considered equal,\n     * above and beyond ids (which are always compared using equality anyway).\n     *<p>\n     * NOTE: due to the way functionality is implemented, it is very important that\n     * in addition to overriding {@link Object#equals} for Objects to match (to be considered\n     * ""same"") it is also necessary to ensure that {@link Object#hashCode()} is overridden\n     * to produce the exact same value for equal instances.\n     *<p>\n     * Feature is disabled by default; meaning that strict identity is used, not\n     * <code>equals()</code>\n     *\n     * @since 2.3",USE_EQUALITY_FOR_OBJECT_ID(false),com.fasterxml.jackson.databind.SerializationFeature USE_EQUALITY_FOR_OBJECT_ID,public 
com.fasterxml.jackson.databind.MapperFeature.USE_ANNOTATIONS,Enum Constant,"* Feature that determines whether annotation introspection\n     * is used for configuration; if enabled, configured\n     * {@link AnnotationIntrospector} will be used: if disabled,\n     * no annotations are considered.\n     *<p>\n     * Feature is enabled by default.",USE_ANNOTATIONS(true),com.fasterxml.jackson.databind.MapperFeature USE_ANNOTATIONS,public 
com.fasterxml.jackson.databind.MapperFeature.USE_GETTERS_AS_SETTERS,Enum Constant,"* Feature that determines whether otherwise regular ""getter""\n     * methods (but only ones that handle Collections and Maps,\n     * not getters of other type)\n     * can be used for purpose of getting a reference to a Collection\n     * and Map to modify the property, without requiring a setter\n     * method.\n     * This is similar to how JAXB framework sets Collections and\n     * Maps: no setter is involved, just getter.\n     *<p>\n     * Note that such getters-as-setters methods have lower\n     * precedence than setters, so they are only used if no\n     * setter is found for the Map/Collection property.\n     *<p>\n     * Feature is enabled by default.",USE_GETTERS_AS_SETTERS(true),com.fasterxml.jackson.databind.MapperFeature USE_GETTERS_AS_SETTERS,public 
com.fasterxml.jackson.databind.MapperFeature.PROPAGATE_TRANSIENT_MARKER,Enum Constant,"* Feature that determines how <code>transient</code> modifier for fields\n     * is handled: if disabled, it is only taken to mean exclusion of the field\n     * as an accessor; if true, it is taken to imply removal of the whole property.\n     *<p>\n     * Feature is disabled by default, meaning that existence of `transient`\n     * for a field does not necessarily lead to ignoral of getters or setters\n     * but just ignoring the use of field for access.\n     *<p>\n     * NOTE! This should have no effect on <b>explicit</b> ignoral annotation\n     * possibly added to {@code transient} fields: those should always have expected\n     * semantics (same as if field was not {@code transient}).\n     *\n     * @since 2.6",PROPAGATE_TRANSIENT_MARKER(false),com.fasterxml.jackson.databind.MapperFeature PROPAGATE_TRANSIENT_MARKER,public 
com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_CREATORS,Enum Constant,"* Feature that determines whether ""creator"" methods are\n     * automatically detected by consider public constructors,\n     * and static single argument methods with name ""valueOf"".\n     * If disabled, only methods explicitly annotated are considered\n     * creator methods (except for the no-arg default constructor which\n     * is always considered a factory method).\n     *<p>\n     * Note that this feature has lower precedence than per-class\n     * annotations, and is only used if there isn't more granular\n     * configuration available.\n     *<P>\n     * Feature is enabled by default.",AUTO_DETECT_CREATORS(true),com.fasterxml.jackson.databind.MapperFeature AUTO_DETECT_CREATORS,public 
com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_FIELDS,Enum Constant,"* Feature that determines whether non-static fields are recognized as\n     * properties.\n     * If yes, then all public member fields\n     * are considered as properties. If disabled, only fields explicitly\n     * annotated are considered property fields.\n     *<p>\n     * Note that this feature has lower precedence than per-class\n     * annotations, and is only used if there isn't more granular\n     * configuration available.\n     *<p>\n     * Feature is enabled by default.",AUTO_DETECT_FIELDS(true),com.fasterxml.jackson.databind.MapperFeature AUTO_DETECT_FIELDS,public 
com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_GETTERS,Enum Constant,"* Feature that determines whether regular ""getter"" methods are\n     * automatically detected based on standard Bean naming convention\n     * or not. If yes, then all public zero-argument methods that\n     * start with prefix ""get""\n     * are considered as getters.\n     * If disabled, only methods explicitly  annotated are considered getters.\n     *<p>\n     * Note that since version 1.3, this does <b>NOT</b> include\n     * ""is getters"" (see {@link #AUTO_DETECT_IS_GETTERS} for details)\n     *<p>\n     * Note that this feature has lower precedence than per-class\n     * annotations, and is only used if there isn't more granular\n     * configuration available.\n     *<p>\n     * Feature is enabled by default.",AUTO_DETECT_GETTERS(true),com.fasterxml.jackson.databind.MapperFeature AUTO_DETECT_GETTERS,public 
com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_IS_GETTERS,Enum Constant,"* Feature that determines whether ""is getter"" methods are\n     * automatically detected based on standard Bean naming convention\n     * or not. If yes, then all public zero-argument methods that\n     * start with prefix ""is"", and whose return type is boolean\n     * are considered as ""is getters"".\n     * If disabled, only methods explicitly annotated are considered getters.\n     *<p>\n     * Note that this feature has lower precedence than per-class\n     * annotations, and is only used if there isn't more granular\n     * configuration available.\n     *<p>\n     * Feature is enabled by default.",AUTO_DETECT_IS_GETTERS(true),com.fasterxml.jackson.databind.MapperFeature AUTO_DETECT_IS_GETTERS,public 
com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_SETTERS,Enum Constant,"* Feature that determines whether ""setter"" methods are\n     * automatically detected based on standard Bean naming convention\n     * or not. If yes, then all public one-argument methods that\n     * start with prefix ""set""\n     * are considered setters. If disabled, only methods explicitly\n     * annotated are considered setters.\n     *<p>\n     * Note that this feature has lower precedence than per-class\n     * annotations, and is only used if there isn't more granular\n     * configuration available.\n     *<P>\n     * Feature is enabled by default.",AUTO_DETECT_SETTERS(true),com.fasterxml.jackson.databind.MapperFeature AUTO_DETECT_SETTERS,public 
com.fasterxml.jackson.databind.MapperFeature.REQUIRE_SETTERS_FOR_GETTERS,Enum Constant,"* Feature that determines whether getters (getter methods)\n     * can be auto-detected if there is no matching mutator (setter,\n     * constructor parameter or field) or not: if set to true,\n     * only getters that match a mutator are auto-discovered; if\n     * false, all auto-detectable getters can be discovered.\n     *<p>\n     * Feature is disabled by default.",REQUIRE_SETTERS_FOR_GETTERS(false),com.fasterxml.jackson.databind.MapperFeature REQUIRE_SETTERS_FOR_GETTERS,public 
com.fasterxml.jackson.databind.MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS,Enum Constant,"* Feature that determines whether member fields declared as 'final' may\n     * be auto-detected to be used mutators (used to change value of the logical\n     * property) or not. If enabled, 'final' access modifier has no effect, and\n     * such fields may be detected according to usual visibility and inference\n     * rules; if disabled, such fields are NOT used as mutators except if\n     * explicitly annotated for such use.\n     *<p>\n     * Feature is enabled by default, for backwards compatibility reasons.\n     *\n     * @since 2.2",ALLOW_FINAL_FIELDS_AS_MUTATORS(true),com.fasterxml.jackson.databind.MapperFeature ALLOW_FINAL_FIELDS_AS_MUTATORS,public 
com.fasterxml.jackson.databind.MapperFeature.INFER_PROPERTY_MUTATORS,Enum Constant,"* Feature that determines whether member mutators (fields and\n     * setters) may be ""pulled in"" even if they are not visible,\n     * as long as there is a visible accessor (getter or field) with same name.\n     * For example: field ""value"" may be inferred as mutator,\n     * if there is visible or explicitly marked getter ""getValue()"".\n     * If enabled, inferring is enabled; otherwise (disabled) only visible and\n     * explicitly annotated accessors are ever used.\n     *<p>\n     * Note that 'getters' are never inferred and need to be either visible (including\n     * bean-style naming) or explicitly annotated.\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.2",INFER_PROPERTY_MUTATORS(true),com.fasterxml.jackson.databind.MapperFeature INFER_PROPERTY_MUTATORS,public 
com.fasterxml.jackson.databind.MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES,Enum Constant,"* Feature that determines handling of {@code java.beans.ConstructorProperties}\n     * annotation: when enabled, it is considered as alias of\n     * {@link com.fasterxml.jackson.annotation.JsonCreator}, to mean that constructor\n     * should be considered a property-based Creator; when disabled, only constructor\n     * parameter name information is used, but constructor is NOT considered an explicit\n     * Creator (although may be discovered as one using other annotations or heuristics).\n     *<p>\n     * Feature is mostly used to help inter-operability with frameworks like Lombok\n     * that may automatically generate {@code ConstructorProperties} annotation\n     * but without necessarily meaning that constructor should be used as Creator\n     * for deserialization.\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.9",INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES(true),com.fasterxml.jackson.databind.MapperFeature INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES,public 
com.fasterxml.jackson.databind.MapperFeature.ALLOW_VOID_VALUED_PROPERTIES,Enum Constant,"* Feature that determines whether nominal property type of {@link Void} is\n     * allowed for Getter methods to indicate {@code null} valued pseudo-property\n     * or not. If enabled, such properties are recognized (see [databind#2675] for\n     * reasons -- mostly things related to frameworks, code generation); if disabled,\n     * such property accessors (or at least getters) are ignored.\n     *<p>\n     * Feature is disabled by default (in 2.12) for backwards compatibility.\n     *\n     * @since 2.12",ALLOW_VOID_VALUED_PROPERTIES(false),com.fasterxml.jackson.databind.MapperFeature ALLOW_VOID_VALUED_PROPERTIES,public 
com.fasterxml.jackson.databind.MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS,Enum Constant,"* Feature that determines whether method and field access\n     * modifier settings can be overridden when accessing\n     * properties. If enabled, method\n     * {@link java.lang.reflect.AccessibleObject#setAccessible}\n     * may be called to enable access to otherwise unaccessible objects.\n     *<p>\n     * Note that this setting may have significant performance implications,\n     * since access override helps remove costly access checks on each\n     * and every Reflection access. If you are considering disabling\n     * this feature, be sure to verify performance consequences if usage\n     * is performance sensitive.\n     * Also note that performance effects vary between Java platforms\n     * (JavaSE vs Android, for example), as well as JDK versions: older\n     * versions seemed to have more significant performance difference.\n     *<p>\n     * Conversely, on some platforms, it may be necessary to disable this feature\n     * as platform does not allow such calls. For example, when developing\n     * Applets (or other Java code that runs on tightly restricted sandbox),\n     * it may be necessary to disable the feature regardless of performance effects.\n     *<p>\n     * Feature is enabled by default.",CAN_OVERRIDE_ACCESS_MODIFIERS(true),com.fasterxml.jackson.databind.MapperFeature CAN_OVERRIDE_ACCESS_MODIFIERS,public 
com.fasterxml.jackson.databind.MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS,Enum Constant,"* Feature that determines that forces call to\n     * {@link java.lang.reflect.AccessibleObject#setAccessible} even for\n     * <code>public</code> accessors -- that is, even if no such call is\n     * needed from functionality perspective -- if call is allowed\n     * (that is, {@link #CAN_OVERRIDE_ACCESS_MODIFIERS} is set to true).\n     * The main reason to enable this feature is possible performance\n     * improvement as JDK does not have to perform access checks; these\n     * checks are otherwise made for all accessors, including public ones,\n     * and may result in slower Reflection calls. Exact impact (if any)\n     * depends on Java platform (Java SE, Android) as well as JDK version.\n     *<p>\n     * Feature is enabled by default, for legacy reasons (it was the behavior\n     * until 2.6)\n     *\n     * @since 2.7",OVERRIDE_PUBLIC_ACCESS_MODIFIERS(true),com.fasterxml.jackson.databind.MapperFeature OVERRIDE_PUBLIC_ACCESS_MODIFIERS,public 
com.fasterxml.jackson.databind.MapperFeature.INVERSE_READ_WRITE_ACCESS,Enum Constant,* Feature that inverse logic in {@link JsonProperty#access}\n     * for <code>READ_ONLY</code> and <code>WRITE_ONLY</code>.\n     *<p>\n     * Feature is disabled by default.\n     *\n     * @since 2.19,INVERSE_READ_WRITE_ACCESS(false),com.fasterxml.jackson.databind.MapperFeature INVERSE_READ_WRITE_ACCESS,public 
com.fasterxml.jackson.databind.MapperFeature.USE_STATIC_TYPING,Enum Constant,"* Feature that determines whether the type detection for\n     * serialization should be using actual dynamic runtime type,\n     * or declared static type.\n     * Note that deserialization always uses declared static types\n     * since no runtime types are available (as we are creating\n     * instances after using type information).\n     *<p>\n     * This global default value can be overridden at class, method\n     * or field level by using {@link JsonSerialize#typing} annotation\n     * property.\n     *<p>\n     * Feature is disabled by default which means that dynamic runtime types\n     * are used (instead of declared static types) for serialization.",USE_STATIC_TYPING(false),com.fasterxml.jackson.databind.MapperFeature USE_STATIC_TYPING,public 
com.fasterxml.jackson.databind.MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL,Enum Constant,"* Feature that specifies whether the declared base type of a polymorphic value\n     * is to be used as the ""default"" implementation, if no explicit default class\n     * is specified via {@code @JsonTypeInfo.defaultImpl} annotation.\n     *<p>\n     * Note that feature only has effect on deserialization of regular polymorphic properties:\n     * it does NOT affect non-polymorphic cases, and is unlikely to work with Default Typing.\n     *<p>\n     * Feature is disabled by default for backwards compatibility.\n     *\n     * @since 2.10",USE_BASE_TYPE_AS_DEFAULT_IMPL(false),com.fasterxml.jackson.databind.MapperFeature USE_BASE_TYPE_AS_DEFAULT_IMPL,public 
com.fasterxml.jackson.databind.MapperFeature.INFER_BUILDER_TYPE_BINDINGS,Enum Constant,"* Feature that enables inferring builder type bindings from the value type\n     * being deserialized. This requires that the generic type declaration on\n     * the value type match that on the builder exactly: mismatched type declarations\n     * are not necessarily detected by databind.\n     *<p>\n     * Feature is enabled by default which means that deserialization does\n     * support deserializing types via builders with type parameters (generic types).\n     *<p>\n     * See: <a href=""https://github.com/FasterXML/jackson-databind/issues/921"">databind#921</a>\n     *\n     * @since 2.12",INFER_BUILDER_TYPE_BINDINGS(true),com.fasterxml.jackson.databind.MapperFeature INFER_BUILDER_TYPE_BINDINGS,public 
com.fasterxml.jackson.databind.MapperFeature.REQUIRE_TYPE_ID_FOR_SUBTYPES,Enum Constant,"* Feature that determines what happens when deserializing to a registered sub-type\n     * (polymorphic deserialization), but no type information has been provided.\n     * If enabled, then an {@code InvalidTypeIdException} will be thrown;\n     * if disabled then the deserialization may proceed without the type information\n     * if sub-type is legit target (non-abstract).\n     *<p>\n     * Feature is enabled by default for backwards-compatibility (same behavior\n     * as in Jackson 2.14 and earlier).\n     *\n     * @since 2.15",REQUIRE_TYPE_ID_FOR_SUBTYPES(true),com.fasterxml.jackson.databind.MapperFeature REQUIRE_TYPE_ID_FOR_SUBTYPES,public 
com.fasterxml.jackson.databind.MapperFeature.DEFAULT_VIEW_INCLUSION,Enum Constant,"* Feature that determines whether properties that have no view\n     * annotations are included in JSON serialization views (see\n     * {@link com.fasterxml.jackson.annotation.JsonView} for more\n     * details on JSON Views).\n     * If enabled, non-annotated properties will be included;\n     * when disabled, they will be excluded. So this feature\n     * changes between ""opt-in"" (feature disabled) and\n     * ""opt-out"" (feature enabled) modes.\n     *<p>\n     * Default value is enabled, meaning that non-annotated\n     * properties are included in all views if there is no\n     * {@link com.fasterxml.jackson.annotation.JsonView} annotation.\n     *<p>\n     * Feature is enabled by default in 2.x: will be disabled in 3.0.",DEFAULT_VIEW_INCLUSION(true),com.fasterxml.jackson.databind.MapperFeature DEFAULT_VIEW_INCLUSION,public 
com.fasterxml.jackson.databind.MapperFeature.SORT_PROPERTIES_ALPHABETICALLY,Enum Constant,"* Feature that defines default property serialization order used\n     * for POJO properties.\n     * If enabled, default ordering is alphabetic (similar to\n     * how {@link com.fasterxml.jackson.annotation.JsonPropertyOrder#alphabetic()}\n     * works); if disabled, order is unspecified (based on what JDK gives\n     * us, which may be declaration order, but is not guaranteed).\n     *<p>\n     * Note that this is just the default behavior and can be overridden by\n     * explicit overrides in classes (for example with\n     * {@link com.fasterxml.jackson.annotation.JsonPropertyOrder} annotation)\n     *<p>\n     * Note: does <b>not</b> apply to {@link java.util.Map} serialization (since\n     * entries are not considered Bean/POJO properties.\n     *<p>\n     * Feature is disabled by default.",SORT_PROPERTIES_ALPHABETICALLY(false),com.fasterxml.jackson.databind.MapperFeature SORT_PROPERTIES_ALPHABETICALLY,public 
com.fasterxml.jackson.databind.MapperFeature.SORT_CREATOR_PROPERTIES_FIRST,Enum Constant,"* Feature that defines whether Creator properties (ones passed through\n     * constructor or static factory method) should be sorted before other properties\n     * for which no explicit order is specified, in case where alphabetic\n     * ordering is to be used for such properties.\n     * Note that in either case explicit order (whether by name or by index)\n     * will have precedence over this setting.\n     *<p>\n     * Note: does <b>not</b> apply to {@link java.util.Map} serialization (since\n     * entries are not considered Bean/POJO properties.\n     * <p>\n     * WARNING: Disabling it may have a negative impact on deserialization performance.\n     * When disabled, all properties before the last creator property in the input need to be buffered,\n     * since all creator properties are required to create the instance.\n     * Enabling this feature ensures that there is as little buffering as possible. \n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.12",SORT_CREATOR_PROPERTIES_FIRST(true),com.fasterxml.jackson.databind.MapperFeature SORT_CREATOR_PROPERTIES_FIRST,public 
com.fasterxml.jackson.databind.MapperFeature.SORT_CREATOR_PROPERTIES_BY_DECLARATION_ORDER,Enum Constant,"* Feature that defines whether Creator properties (ones passed through\n     * constructor or static factory method) should be sorted in their declaration\n     * order if {@link #SORT_CREATOR_PROPERTIES_FIRST} is also enabled.\n     * This is usually used to prevent alphabetic sorting for\n     * Creator properties even if {@link #SORT_PROPERTIES_ALPHABETICALLY} is\n     * enabled for other types of properties.\n     *<p>\n     * NOTE: if {@link #SORT_CREATOR_PROPERTIES_FIRST} is disabled, this feature\n     * has no effect.\n     *<p>\n     * Feature is disabled by default (for backwards compatibility) in 2.x\n     *<p>\n     * <strong>NOTE: This feature will be removed in Jackson 3: the default behavior\n     * will be same as if this feature was enabled.</strong>\n     *\n     * @since 2.18",SORT_CREATOR_PROPERTIES_BY_DECLARATION_ORDER(false),com.fasterxml.jackson.databind.MapperFeature SORT_CREATOR_PROPERTIES_BY_DECLARATION_ORDER,public 
com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES,Enum Constant,"* Feature that will allow for more forgiving deserialization of incoming JSON.\n     * If enabled, the bean properties will be matched using their lower-case equivalents,\n     * meaning that any case-combination (incoming and matching names are canonicalized\n     * by lower-casing) should work.\n     *<p>\n     * Note that there is additional performance overhead since incoming property\n     * names need to be lower-cased before comparison, for cases where there are upper-case\n     * letters. Overhead for names that are already lower-case should be negligible.\n     *<p>\n     * Feature is disabled by default.\n     *\n     * @since 2.5",ACCEPT_CASE_INSENSITIVE_PROPERTIES(false),com.fasterxml.jackson.databind.MapperFeature ACCEPT_CASE_INSENSITIVE_PROPERTIES,public 
com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS,Enum Constant,"* Feature that determines if Enum deserialization should be case sensitive or not.\n     * If enabled, Enum deserialization will ignore case, that is, case of incoming String\n     * value and enum id (depending on other settings, either `name()`, `toString()`, or\n     * explicit override) do not need to match.\n     *<p>\n     * This should allow both Enum-as-value deserialization and Enum-as-Map-key, but latter\n     * only works since Jackson 2.12 (due to incomplete implementation).\n     *<p>\n     * Feature is disabled by default.\n     *\n     * @since 2.9",ACCEPT_CASE_INSENSITIVE_ENUMS(false),com.fasterxml.jackson.databind.MapperFeature ACCEPT_CASE_INSENSITIVE_ENUMS,public 
com.fasterxml.jackson.databind.MapperFeature.ACCEPT_CASE_INSENSITIVE_VALUES,Enum Constant,"* Feature that permits parsing some enumerated text-based value types but ignoring the case\n     * of the values on deserialization: for example, date/time type deserializers.\n     * Support for this feature depends on deserializer implementations using it.\n     *<p>\n     * Note, however, that regular {@code Enum} types follow {@link #ACCEPT_CASE_INSENSITIVE_ENUMS}\n     * setting instead.\n     *<p>\n     * Feature is disabled by default.\n     *\n     * @since 2.10",ACCEPT_CASE_INSENSITIVE_VALUES(false),com.fasterxml.jackson.databind.MapperFeature ACCEPT_CASE_INSENSITIVE_VALUES,public 
com.fasterxml.jackson.databind.MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME,Enum Constant,"* Feature that can be enabled to make property names be\n     * overridden by wrapper name (usually detected with annotations\n     * as defined by {@link AnnotationIntrospector#findWrapperName}.\n     * If enabled, all properties that have associated non-empty Wrapper\n     * name will use that wrapper name instead of property name.\n     * If disabled, wrapper name is only used for wrapping (if anything).\n     *<p>\n     * Feature is disabled by default.\n     *\n     * @since 2.1",USE_WRAPPER_NAME_AS_PROPERTY_NAME(false),com.fasterxml.jackson.databind.MapperFeature USE_WRAPPER_NAME_AS_PROPERTY_NAME,public 
com.fasterxml.jackson.databind.MapperFeature.USE_STD_BEAN_NAMING,Enum Constant,"* Feature that may be enabled to enforce strict compatibility with\n     * Bean name introspection, instead of slightly different mechanism\n     * Jackson defaults to.\n     * Specific difference is that Jackson always lower cases leading upper-case\n     * letters, so ""getURL()"" becomes ""url"" property; whereas standard Bean\n     * naming <b>only</b> lower-cases the first letter if it is NOT followed by\n     * another upper-case letter (so ""getURL()"" would result in ""URL"" property).\n     *<p>\n     * Feature is disabled by default for backwards compatibility purposes: earlier\n     * Jackson versions used Jackson's own mechanism.\n     *\n     * @since 2.5",USE_STD_BEAN_NAMING(false),com.fasterxml.jackson.databind.MapperFeature USE_STD_BEAN_NAMING,public 
com.fasterxml.jackson.databind.MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING,Enum Constant,"* Feature that when enabled will allow explicitly named properties (i.e., fields or methods\n     * annotated with {@link com.fasterxml.jackson.annotation.JsonProperty}(""explicitName"")) to\n     * be re-named by a {@link PropertyNamingStrategy}, if one is configured.\n     * <p>\n     * Feature is disabled by default.\n     *\n     * @since 2.7",ALLOW_EXPLICIT_PROPERTY_RENAMING(false),com.fasterxml.jackson.databind.MapperFeature ALLOW_EXPLICIT_PROPERTY_RENAMING,public 
com.fasterxml.jackson.databind.MapperFeature.ALLOW_IS_GETTERS_FOR_NON_BOOLEAN,Enum Constant,"* Feature that when enabled will allow getters with is-Prefix also for\n     * non-boolean return types; if disabled only methods that return\n     * {@code boolean} or {@code Boolean} qualify as ""is getters"".\n     * <p>\n     * Feature is disabled by default for backwards compatibility.\n     *\n     * @since 2.14",ALLOW_IS_GETTERS_FOR_NON_BOOLEAN(false),com.fasterxml.jackson.databind.MapperFeature ALLOW_IS_GETTERS_FOR_NON_BOOLEAN,public 
com.fasterxml.jackson.databind.MapperFeature.ALLOW_COERCION_OF_SCALARS,Enum Constant,"* Feature that determines whether coercions from secondary representations are allowed\n     * for simple non-textual scalar types: numbers and booleans. This includes `primitive`\n     * types and their wrappers, but excludes `java.lang.String` and date/time types.\n     *<p>\n     * When feature is disabled, only strictly compatible input may be bound: numbers for\n     * numbers, boolean values for booleans. When feature is enabled, conversions from\n     * JSON String are allowed, as long as textual value matches (for example, String\n     * ""true"" is allowed as equivalent of JSON boolean token `true`; or String ""1.0""\n     * for `double`).\n     *<p>\n     * Note that it is possible that other configurability options can override this\n     * in closer scope (like on per-type or per-property basis); this is just the global\n     * default.\n     *<p>\n     * Feature is enabled by default (for backwards compatibility since this was the\n     * default behavior)\n     *\n     * @since 2.9",ALLOW_COERCION_OF_SCALARS(true),com.fasterxml.jackson.databind.MapperFeature ALLOW_COERCION_OF_SCALARS,public 
com.fasterxml.jackson.databind.MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS,Enum Constant,"* Feature that determines whether multiple registrations of same module\n     * should be ignored or not; if enabled, only the first registration call\n     * results in module being called, and possible duplicate calls are silently\n     * ignored; if disabled, no checking is done and all registration calls are\n     * dispatched to module.\n     *<p>\n     * Definition of ""same module"" is based on using {@link Module#getTypeId()};\n     * modules with same non-null <code>type id</code> are considered same for\n     * purposes of duplicate registration. This also avoids having to keep track\n     * of actual module instances; only ids will be kept track of (and only if\n     * this feature is enabled).\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.5",IGNORE_DUPLICATE_MODULE_REGISTRATIONS(true),com.fasterxml.jackson.databind.MapperFeature IGNORE_DUPLICATE_MODULE_REGISTRATIONS,public 
com.fasterxml.jackson.databind.MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE,Enum Constant,"* Setting that determines what happens if an attempt is made to explicitly\n     * ""merge"" value of a property, where value does not support merging; either\n     * merging is skipped and new value is created (<code>true</code>) or\n     * an exception is thrown (false).\n     *<p>\n     * Feature is enabled by default, to allow use of merge defaults even in presence\n     * of some unmergeable properties.\n     *\n     * @since 2.9",IGNORE_MERGE_FOR_UNMERGEABLE(true),com.fasterxml.jackson.databind.MapperFeature IGNORE_MERGE_FOR_UNMERGEABLE,public 
com.fasterxml.jackson.databind.MapperFeature.BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES,Enum Constant,"* Setting that may be enabled to reconfigure <b>default</b>\n     * {@link com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator}\n     * used by legacy {@code ObjectMapper.enableDefaultTyping()} methods as well as default used\n     * for annotation-based polymorphic handling so that it uses\n     * {@link com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator}.\n     * This will block use of a set of ""unsafe"" base types such as {@link java.lang.Object}\n     * through methods that do not require passing of explicit {@link com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator}.\n     * It is still possible to override one used; this only affects default settings.\n     *<p>\n     * Enabling of this setting is <b>strongly recommended</b>.\n     *<p>\n     * Feature is disabled by default in 2.x for backwards compatibility reasons: it will become\n     * default setting (and feature likely removed) in 3.0.\n     *\n     * @since 2.11",BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES(false),com.fasterxml.jackson.databind.MapperFeature BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES,public 
com.fasterxml.jackson.databind.MapperFeature.APPLY_DEFAULT_VALUES,Enum Constant,"* Feature that determines whether {@link ObjectReader} applies default values\n     * defined in class definitions in cases where the input data omits the relevant values.\n     *<p>\n     * Not all modules will respect this feature. Initially, only {@code jackson-module-scala}\n     * will respect this feature but other modules will add support over time.\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.13",APPLY_DEFAULT_VALUES(true),com.fasterxml.jackson.databind.MapperFeature APPLY_DEFAULT_VALUES,public 
com.fasterxml.jackson.databind.MapperFeature.REQUIRE_HANDLERS_FOR_JAVA8_OPTIONALS,Enum Constant,"* Feature that determines what happens if Java 8 {@link java.util.Optional} (and\n     * other related optional types) are to be serialized or deserialized, but there\n     * are no registered handlers for them.\n     * If enabled, an exception is thrown (to indicate problem, a solution for which is\n     * to register {@code jackson-datatype-jdk8} module); if disabled, the value is\n     * serialized and/or deserialized using regular POJO (""Bean"") (de)serialization.\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.19",REQUIRE_HANDLERS_FOR_JAVA8_OPTIONALS(true),com.fasterxml.jackson.databind.MapperFeature REQUIRE_HANDLERS_FOR_JAVA8_OPTIONALS,public 
com.fasterxml.jackson.databind.cfg.ConstructorDetector$SingleArgConstructor.DELEGATING,Enum Constant,"* Assume ""delegating"" mode if not explicitly annotated otherwise",DELEGATING,com.fasterxml.jackson.databind.cfg.ConstructorDetector$SingleArgConstructor DELEGATING,public 
com.fasterxml.jackson.databind.cfg.ConstructorDetector$SingleArgConstructor.PROPERTIES,Enum Constant,"* Assume ""properties"" mode if not explicitly annotated otherwise",PROPERTIES,com.fasterxml.jackson.databind.cfg.ConstructorDetector$SingleArgConstructor PROPERTIES,public 
com.fasterxml.jackson.databind.cfg.ConstructorDetector$SingleArgConstructor.HEURISTIC,Enum Constant,"* Use heuristics to see if ""properties"" mode is to be used (POJO has a\n         * property with the same name as the implicit name [if available] of\n         * the constructor argument).\n         * Note: this is the default choice for Jackson versions before 2.12.",HEURISTIC,com.fasterxml.jackson.databind.cfg.ConstructorDetector$SingleArgConstructor HEURISTIC,public 
com.fasterxml.jackson.databind.cfg.ConstructorDetector$SingleArgConstructor.REQUIRE_MODE,Enum Constant,* Refuse to decide implicit mode and instead throw a\n         * {@link com.fasterxml.jackson.databind.exc.InvalidDefinitionException}\n         * in ambiguous case.,REQUIRE_MODE,com.fasterxml.jackson.databind.cfg.ConstructorDetector$SingleArgConstructor REQUIRE_MODE,public 
com.fasterxml.jackson.databind.cfg.CoercionInputShape.Array,Enum Constant,* Shape of Array values from input (token sequence from\n     * {@link com.fasterxml.jackson.core.JsonToken#START_ARRAY} to\n     * {@link com.fasterxml.jackson.core.JsonToken#END_ARRAY}),Array,com.fasterxml.jackson.databind.cfg.CoercionInputShape Array,public 
com.fasterxml.jackson.databind.cfg.CoercionInputShape.Object,Enum Constant,* Shape of Object values from input (token sequence from\n     * {@link com.fasterxml.jackson.core.JsonToken#START_OBJECT} to\n     * {@link com.fasterxml.jackson.core.JsonToken#END_OBJECT}),Object,com.fasterxml.jackson.databind.cfg.CoercionInputShape Object,public 
com.fasterxml.jackson.databind.cfg.CoercionInputShape.Integer,Enum Constant,* Shape of integral (non-floating point) numeric values from input (token\n     * {@link com.fasterxml.jackson.core.JsonToken#VALUE_NUMBER_INT}),Integer,com.fasterxml.jackson.databind.cfg.CoercionInputShape Integer,public 
com.fasterxml.jackson.databind.cfg.CoercionInputShape.Float,Enum Constant,* Shape of floating point (non-integral) numeric values from input (token\n     * {@link com.fasterxml.jackson.core.JsonToken#VALUE_NUMBER_FLOAT}),Float,com.fasterxml.jackson.databind.cfg.CoercionInputShape Float,public 
com.fasterxml.jackson.databind.cfg.CoercionInputShape.Boolean,Enum Constant,* Shape of boolean values from input (tokens\n     * {@link com.fasterxml.jackson.core.JsonToken#VALUE_TRUE} and\n     * {@link com.fasterxml.jackson.core.JsonToken#VALUE_FALSE}),Boolean,com.fasterxml.jackson.databind.cfg.CoercionInputShape Boolean,public 
com.fasterxml.jackson.databind.cfg.CoercionInputShape.String,Enum Constant,* Shape of string values from input (tokens\n     * {@link com.fasterxml.jackson.core.JsonToken#VALUE_STRING}),String,com.fasterxml.jackson.databind.cfg.CoercionInputShape String,public 
com.fasterxml.jackson.databind.cfg.CoercionInputShape.Binary,Enum Constant,"* Shape of binary data values from input, if expressed natively\n     * by underlying format (many\n     * textual formats, including JSON, do not have such shape); if so\n     * generally seen as {@link com.fasterxml.jackson.core.JsonToken#VALUE_EMBEDDED_OBJECT}.",Binary,com.fasterxml.jackson.databind.cfg.CoercionInputShape Binary,public 
com.fasterxml.jackson.databind.cfg.CoercionInputShape.EmptyArray,Enum Constant,"* Special case of Array values with no actual content (sequence of 2 tokens:\n     * {@link com.fasterxml.jackson.core.JsonToken#START_ARRAY},\n     * {@link com.fasterxml.jackson.core.JsonToken#END_ARRAY}):\n     * usually used to allow special coercion into ""empty"" or {@code null} target type.",EmptyArray,com.fasterxml.jackson.databind.cfg.CoercionInputShape EmptyArray,public 
com.fasterxml.jackson.databind.cfg.CoercionInputShape.EmptyObject,Enum Constant,"* Special case of Object values with no actual content (sequence of 2 tokens:\n     * {@link com.fasterxml.jackson.core.JsonToken#START_OBJECT},\n     * {@link com.fasterxml.jackson.core.JsonToken#END_OBJECT}):\n     * usually used to allow special coercion into ""empty"" or {@code null} target type.",EmptyObject,com.fasterxml.jackson.databind.cfg.CoercionInputShape EmptyObject,public 
com.fasterxml.jackson.databind.cfg.CoercionInputShape.EmptyString,Enum Constant,"* Special case for String values with no content (or, if allowed by format or specific\n     * configuration, also ""blank"" String, that is, all-whitespace content).\n     * usually used to allow special coercion into ""empty"" or {@code null} target type.",EmptyString,com.fasterxml.jackson.databind.cfg.CoercionInputShape EmptyString,public 
com.fasterxml.jackson.databind.cfg.JsonNodeFeature.READ_NULL_PROPERTIES,Enum Constant,* When reading {@link com.fasterxml.jackson.databind.JsonNode}s are null valued properties included as explicit\n     * {@code NullNode}s in resulting {@link com.fasterxml.jackson.databind.node.ObjectNode}\n     * or skipped?\n     *<p>\n     * Default value: {@code true},READ_NULL_PROPERTIES(true),com.fasterxml.jackson.databind.cfg.JsonNodeFeature READ_NULL_PROPERTIES,public 
com.fasterxml.jackson.databind.cfg.JsonNodeFeature.WRITE_NULL_PROPERTIES,Enum Constant,* When writing {@code JsonNode}s are null valued properties written as explicit\n     * JSON {@code null}s or skipped?\n     *<p>\n     * Default value: {@code true},WRITE_NULL_PROPERTIES(true),com.fasterxml.jackson.databind.cfg.JsonNodeFeature WRITE_NULL_PROPERTIES,public 
com.fasterxml.jackson.databind.cfg.JsonNodeFeature.WRITE_PROPERTIES_SORTED,Enum Constant,"* When writing {@code com.fasterxml.jackson.databind.JsonNode}s are Object properties\n     * (for {@code ObjectNode}s) sorted alphabetically (using natural order of\n     * {@link java.lang.String}) or not?\n     * If not sorted, order is the insertion order; when reading this also means retaining\n     * order from the input document.\n     *<p>\n     * Default value: {@code false}\n     *\n     * @since 2.16",WRITE_PROPERTIES_SORTED(false),com.fasterxml.jackson.databind.cfg.JsonNodeFeature WRITE_PROPERTIES_SORTED,public 
com.fasterxml.jackson.databind.cfg.JsonNodeFeature.STRIP_TRAILING_BIGDECIMAL_ZEROES,Enum Constant,"* Feature that determines whether {@link java.math.BigDecimal} values\n     * will be ""normalized"" by stripping trailing zeroes off, when constructing\n     * nodes with {@link com.fasterxml.jackson.databind.node.JsonNodeFactory#numberNode(java.math.BigDecimal)}.\n     * If enabled, {@link java.math.BigDecimal#stripTrailingZeros()} will be called\n     * prior to node creation; if disabled, numeric value will be used as is.\n     *<p>\n     * Default value: {@code true} (for backwards-compatibility).\n     *\n     * @since 2.15",STRIP_TRAILING_BIGDECIMAL_ZEROES(true),com.fasterxml.jackson.databind.cfg.JsonNodeFeature STRIP_TRAILING_BIGDECIMAL_ZEROES,public 
com.fasterxml.jackson.databind.cfg.JsonNodeFeature.FAIL_ON_NAN_TO_BIG_DECIMAL_COERCION,Enum Constant,"* Determines the behavior when coercing `NaN` to {@link java.math.BigDecimal} with\n     * {@link com.fasterxml.jackson.databind.DeserializationFeature#USE_BIG_DECIMAL_FOR_FLOATS} enabled.\n     *\n     * 1. If set to {@code true}, will throw an {@link com.fasterxml.jackson.databind.exc.InvalidFormatException} for\n     * attempting to coerce {@code NaN} into {@link java.math.BigDecimal}.\n     * 2. If set to {@code false}, will simply let coercing {@code NaN} into {@link java.math.BigDecimal} happen,\n     * regardless of how such coercion will behave --as of 2.16, will simply stay as {@code NaN} of original\n     * floating-point type node.\n     *\n     * <p>\n     * Default value is {@code false} for backwards-compatibility, but will most likely be changed to\n     * {@code true} in 3.0.\n     *\n     * @since 2.16",FAIL_ON_NAN_TO_BIG_DECIMAL_COERCION(false),com.fasterxml.jackson.databind.cfg.JsonNodeFeature FAIL_ON_NAN_TO_BIG_DECIMAL_COERCION,public 
com.fasterxml.jackson.databind.cfg.EnumFeature.READ_ENUM_KEYS_USING_INDEX,Enum Constant,"* Feature that determines standard deserialization mechanism used for\n     * Enum values: if enabled, Enums are assumed to have been serialized using\n     * index of <code>Enum</code>;\n     *<p>\n     * Note: this feature should be symmetric to\n     * as {@link SerializationFeature#WRITE_ENUM_KEYS_USING_INDEX}.\n     *<p>\n     * Feature is disabled by default.\n     *\n     * @since 2.15",READ_ENUM_KEYS_USING_INDEX(false),com.fasterxml.jackson.databind.cfg.EnumFeature READ_ENUM_KEYS_USING_INDEX,public 
com.fasterxml.jackson.databind.cfg.EnumFeature.WRITE_ENUMS_TO_LOWERCASE,Enum Constant,"* Feature that determines standard serialization mechanism used for\n     * Enum values: if enabled, return value of <code>Enum.name().toLowerCase()</code>\n     * is used; if disabled, return value of <code>Enum.name()</code> is used.\n     *<p>\n     * NOTE: this feature CAN NOT be changed on per-call basis: it will have to\n     * be set on {@code ObjectMapper} before use\n     *<p>\n     * Feature is disabled by default.\n     *\n     * @since 2.15",WRITE_ENUMS_TO_LOWERCASE(false),com.fasterxml.jackson.databind.cfg.EnumFeature WRITE_ENUMS_TO_LOWERCASE,public 
com.fasterxml.jackson.databind.cfg.CoercionAction.Fail,Enum Constant,* Action to fail coercion attempt with exceptipn,Fail,com.fasterxml.jackson.databind.cfg.CoercionAction Fail,public 
com.fasterxml.jackson.databind.cfg.CoercionAction.TryConvert,Enum Constant,* Action to attempt coercion (which may lead to failure),TryConvert,com.fasterxml.jackson.databind.cfg.CoercionAction TryConvert,public 
com.fasterxml.jackson.databind.cfg.CoercionAction.AsNull,Enum Constant,* Action to convert to {@code null} value,AsNull,com.fasterxml.jackson.databind.cfg.CoercionAction AsNull,public 
com.fasterxml.jackson.databind.cfg.CoercionAction.AsEmpty,Enum Constant,"* Action to convert to ""empty"" value for type, whatever that is: for\n     * primitive types and their wrappers this is ""default"" value (for example,\n     * for {@code int} that would be {@code 0}); for {@link java.util.Collection}s\n     * empty collection; for POJOs instance configured with default constructor\n     * and so on.",AsEmpty,com.fasterxml.jackson.databind.cfg.CoercionAction AsEmpty,public 
com.fasterxml.jackson.databind.type.LogicalType.Array,Enum Constant,* Array types of other values.\n     *<p>\n     * Note: excludes binary type {@code byte[]}.,Array,com.fasterxml.jackson.databind.type.LogicalType Array,public 
com.fasterxml.jackson.databind.type.LogicalType.Collection,Enum Constant,"* {@link java.util.Collection} values (and ""Collection-like"" for JVM\n     * languages and datatype libraries with semantically similar types)",Collection,com.fasterxml.jackson.databind.type.LogicalType Collection,public 
com.fasterxml.jackson.databind.type.LogicalType.Map,Enum Constant,"* {@link java.util.Map} values (and ""Map-like"" for JVM\n     * languages and datatype libraries with semantically similar types)",Map,com.fasterxml.jackson.databind.type.LogicalType Map,public 
com.fasterxml.jackson.databind.type.LogicalType.POJO,Enum Constant,"* Types that are handled by default ""set of key/value pairs"" serialization,\n     * also known as ""Beans"".\n     *<p>\n     * In addition to user-defined types, also includes JDK types like:\n     *<ul>\n     *  <li>{@link java.lang.Throwable}\n     *   </li>\n     * </ul>",POJO,com.fasterxml.jackson.databind.type.LogicalType POJO,public 
com.fasterxml.jackson.databind.type.LogicalType.Untyped,Enum Constant,"* ""Non-type"", Type used to contained untyped, free-form content: maybe\n     * a ""Tree"" (sometimes called ""AST""), or buffer of some kind,\n     * or even just nominal type of {@link java.lang.Object}",Untyped,com.fasterxml.jackson.databind.type.LogicalType Untyped,public 
com.fasterxml.jackson.databind.type.LogicalType.Integer,Enum Constant,"* Basic integral numbers types like {@code short}, {@code int}, {@code long}\n     * and matching wrapper types, {@link java.math.BigInteger}.",Integer,com.fasterxml.jackson.databind.type.LogicalType Integer,public 
com.fasterxml.jackson.databind.type.LogicalType.Float,Enum Constant,"* Basic floating-point numbers types like {@code float}, {@code double},\n     * and matching wrapper types, {@link java.math.BigDecimal}.",Float,com.fasterxml.jackson.databind.type.LogicalType Float,public 
com.fasterxml.jackson.databind.type.LogicalType.Boolean,Enum Constant,"* {@link java.lang.Boolean}, {@code boolean}, {@link java.util.concurrent.atomic.AtomicBoolean}.",Boolean,com.fasterxml.jackson.databind.type.LogicalType Boolean,public 
com.fasterxml.jackson.databind.type.LogicalType.Enum,Enum Constant,* Various {@link java.lang.Enum} types.,Enum,com.fasterxml.jackson.databind.type.LogicalType Enum,public 
com.fasterxml.jackson.databind.type.LogicalType.Textual,Enum Constant,"* Purely textual types, {@link java.lang.String} and similar (but not types that\n     * are generally expressed as Strings in input).",Textual,com.fasterxml.jackson.databind.type.LogicalType Textual,public 
com.fasterxml.jackson.databind.type.LogicalType.Binary,Enum Constant,* Binary data such as {@code byte[]} and {@link java.nio.ByteBuffer}.,Binary,com.fasterxml.jackson.databind.type.LogicalType Binary,public 
com.fasterxml.jackson.databind.type.LogicalType.DateTime,Enum Constant,"* Date/time datatypes such as {@link java.util.Date}, {@link java.util.Calendar}.",DateTime,com.fasterxml.jackson.databind.type.LogicalType DateTime,public 
com.fasterxml.jackson.databind.type.LogicalType.OtherScalar,Enum Constant,* Scalar types other than ones listed above: includes types like {@link java.net.URL}\n     * and {@link java.util.UUID}.,OtherScalar,com.fasterxml.jackson.databind.type.LogicalType OtherScalar,public 
com.fasterxml.jackson.databind.DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS,Enum Constant,"* Feature that determines whether JSON floating point numbers\n     * are to be deserialized into {@link java.math.BigDecimal}s\n     * if only generic type description (either {@link Object} or\n     * {@link Number}, or within untyped {@link java.util.Map}\n     * or {@link java.util.Collection} context) is available.\n     * If enabled such values will be deserialized as {@link java.math.BigDecimal}s;\n     * if disabled, will be deserialized as {@link Double}s.\n     *<p>\n     * NOTE: one aspect of {@link java.math.BigDecimal} handling that may need\n     * configuring is whether trailing zeroes are trimmed:\n     * {@link com.fasterxml.jackson.databind.node.JsonNodeFactory} has\n     * {@link com.fasterxml.jackson.databind.node.JsonNodeFactory#withExactBigDecimals} for\n     * changing default behavior (default is for trailing zeroes to be trimmed).\n     *<p>\n     * Feature is disabled by default, meaning that ""untyped"" floating\n     * point numbers will by default be deserialized as {@link Double}s\n     * (choice is for performance reason -- BigDecimals are slower than\n     * Doubles).",USE_BIG_DECIMAL_FOR_FLOATS(false),com.fasterxml.jackson.databind.DeserializationFeature USE_BIG_DECIMAL_FOR_FLOATS,public 
com.fasterxml.jackson.databind.DeserializationFeature.USE_BIG_INTEGER_FOR_INTS,Enum Constant,"* Feature that determines whether JSON integral (non-floating-point)\n     * numbers are to be deserialized into {@link java.math.BigInteger}s\n     * if only generic type description (either {@link Object} or\n     * {@link Number}, or within untyped {@link java.util.Map}\n     * or {@link java.util.Collection} context) is available.\n     * If enabled such values will be deserialized as\n     * {@link java.math.BigInteger}s;\n     * if disabled, will be deserialized as ""smallest"" available type,\n     * which is either {@link Integer}, {@link Long} or\n     * {@link java.math.BigInteger}, depending on number of digits.\n     * <p>\n     * Feature is disabled by default, meaning that ""untyped"" integral\n     * numbers will by default be deserialized using whatever\n     * is the most compact integral type, to optimize efficiency.",USE_BIG_INTEGER_FOR_INTS(false),com.fasterxml.jackson.databind.DeserializationFeature USE_BIG_INTEGER_FOR_INTS,public 
com.fasterxml.jackson.databind.DeserializationFeature.USE_LONG_FOR_INTS,Enum Constant,"* Feature that determines how ""small"" JSON integral (non-floating-point)\n     * numbers -- ones that fit in 32-bit signed integer (`int`) -- are bound\n     * when target type is loosely typed as {@link Object} or {@link Number}\n     * (or within untyped {@link java.util.Map} or {@link java.util.Collection} context).\n     * If enabled, such values will be deserialized as {@link java.lang.Long};\n     * if disabled, they will be deserialized as ""smallest"" available type,\n     * {@link Integer}.\n     *<p>\n     * Note: if {@link #USE_BIG_INTEGER_FOR_INTS} is enabled, it has precedence\n     * over this setting, forcing use of {@link java.math.BigInteger} for all\n     * integral values.\n     *<p>\n     * Feature is disabled by default, meaning that ""untyped"" integral\n     * numbers will by default be deserialized using {@link java.lang.Integer}\n     * if value fits.\n     *\n     * @since 2.6",USE_LONG_FOR_INTS(false),com.fasterxml.jackson.databind.DeserializationFeature USE_LONG_FOR_INTS,public 
com.fasterxml.jackson.databind.DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY,Enum Constant,"* Feature that determines whether JSON Array is mapped to\n     * <code>Object[]</code> or {@code List<Object>} when binding\n     * ""untyped"" objects (ones with nominal type of <code>java.lang.Object</code>).\n     * If true, binds as <code>Object[]</code>; if false, as {@code List<Object>}.\n     *<p>\n     * Feature is disabled by default, meaning that JSON arrays are bound as\n     * {@link java.util.List}s.",USE_JAVA_ARRAY_FOR_JSON_ARRAY(false),com.fasterxml.jackson.databind.DeserializationFeature USE_JAVA_ARRAY_FOR_JSON_ARRAY,public 
com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,Enum Constant,"* Feature that determines whether encountering of unknown\n     * properties (ones that do not map to a property, and there is\n     * no ""any setter"" or handler that can handle it)\n     * should result in a failure (by throwing a\n     * {@link JsonMappingException}) or not.\n     * This setting only takes effect after all other handling\n     * methods for unknown properties have been tried, and\n     * property remains unhandled.\n     *<p>\n     * Feature is enabled by default (meaning that a\n     * {@link JsonMappingException} will be thrown if an unknown property\n     * is encountered).",FAIL_ON_UNKNOWN_PROPERTIES(true),com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_UNKNOWN_PROPERTIES,public 
com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES,Enum Constant,"* Feature that determines whether encountering of JSON null\n     * is an error when deserializing into Java primitive types\n     * (like 'int' or 'double'). If it is, a {@link InvalidNullException}\n     * is thrown to indicate this; if not, default value is used\n     * (0 for 'int', 0.0 for double, same defaulting as what JVM uses).\n     *<p>\n     * Feature is disabled by default for Jackson 2.x: will be changed\n     * to enabled in 3.0.",FAIL_ON_NULL_FOR_PRIMITIVES(false),com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_NULL_FOR_PRIMITIVES,public 
com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS,Enum Constant,"* Feature that determines whether JSON integer numbers are valid\n     * values to be used for deserializing Java enum values.\n     * If set to 'false' numbers are acceptable and are used to map to\n     * ordinal() of matching enumeration value; if 'true', numbers are\n     * not allowed and a {@link JsonMappingException} will be thrown.\n     * Latter behavior makes sense if there is concern that accidental\n     * mapping from integer values to enums might happen (and when enums\n     * are always serialized as JSON Strings)\n     *<p>\n     * Feature is disabled by default.",FAIL_ON_NUMBERS_FOR_ENUMS(false),com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_NUMBERS_FOR_ENUMS,public 
com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,Enum Constant,"* Feature that determines what happens when type of a polymorphic\n     * value (indicated for example by {@link com.fasterxml.jackson.annotation.JsonTypeInfo})\n     * cannot be found (missing) or resolved (invalid class name, non-mappable id);\n     * if enabled, an exception is thrown; if false, null value is used instead.\n     *<p>\n     * Feature is enabled by default so that exception is thrown for missing or invalid\n     * type information.\n     *\n     * @since 2.2",FAIL_ON_INVALID_SUBTYPE(true),com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_INVALID_SUBTYPE,public 
com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY,Enum Constant,"* Feature that determines what happens when reading JSON content into tree\n     * ({@link com.fasterxml.jackson.core.TreeNode}) and a duplicate key\n     * is encountered (property name that was already seen for the JSON Object).\n     * If enabled, {@link JsonMappingException} will be thrown; if disabled, no exception\n     * is thrown and the new (later) value overwrites the earlier value.\n     *<p>\n     * Note that this property does NOT affect other aspects of data-binding; that is,\n     * no detection is done with respect to POJO properties or {@link java.util.Map}\n     * keys. New features may be added to control additional cases.\n     *<p>\n     * Feature is disabled by default so that no exception is thrown.\n     *\n     * @since 2.3",FAIL_ON_READING_DUP_TREE_KEY(false),com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_READING_DUP_TREE_KEY,public 
com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES,Enum Constant,"* Feature that determines what happens when a property that has been explicitly\n     * marked as ignorable is encountered in input: if feature is enabled,\n     * {@link JsonMappingException} is thrown; if false, property is quietly skipped.\n     *<p>\n     * Feature is disabled by default so that no exception is thrown.\n     *\n     * @since 2.3",FAIL_ON_IGNORED_PROPERTIES(false),com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_IGNORED_PROPERTIES,public 
com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS,Enum Constant,"* Feature that determines what happens if an Object Id reference is encountered\n     * that does not refer to an actual Object with that id (""unresolved Object Id""):\n     * either an exception {@link com.fasterxml.jackson.databind.deser.UnresolvedForwardReference}\n     * containing information about {@link com.fasterxml.jackson.databind.deser.UnresolvedId}\n     * is thrown (<code>true</code>), or a null object is used instead (<code>false</code>).\n     * Note that if this is set to <code>false</code>, no further processing is done;\n     * specifically, if reference is defined via setter method, that method will NOT\n     * be called.\n     *<p>\n     * Feature is enabled by default, so that unknown Object Ids will result in an\n     * exception being thrown, at the end of deserialization.\n     *\n     * @since 2.5",FAIL_ON_UNRESOLVED_OBJECT_IDS(true),com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_UNRESOLVED_OBJECT_IDS,public 
com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES,Enum Constant,"* Feature that determines what happens if one or more Creator properties (properties\n     * bound to parameters of Creator method (constructor or static factory method))\n     * are missing value to bind to from content.\n     * If enabled, such missing values result in a {@link JsonMappingException} being\n     * thrown with information on the first one (by index) of missing properties.\n     * If disabled, and if property is NOT marked as required,\n     * missing Creator properties are filled\n     * with <code>null values</code> provided by deserializer for the type of parameter\n     * (usually null for Object types, and default value for primitives; but redefinable\n     * via custom deserializers).\n     *<p>\n     * Note that having an injectable value counts as ""not missing"".\n     *<p>\n     * Feature is disabled by default, so that no exception is thrown for missing creator\n     * property values, unless they are explicitly marked as `required`.\n     *\n     * @since 2.6",FAIL_ON_MISSING_CREATOR_PROPERTIES(false),com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_MISSING_CREATOR_PROPERTIES,public 
com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES,Enum Constant,"* Feature that determines what happens if one or more Creator properties (properties\n      * bound to parameters of Creator method (constructor or static factory method))\n      * are bound to null values - either from the JSON or as a default value. This\n      * is useful if you want to avoid nulls in your codebase, and particularly useful\n      * if you are using Java or Scala optionals for non-mandatory fields.\n      * Feature is disabled by default, so that no exception is thrown for missing creator\n      * property values, unless they are explicitly marked as `required`.\n      *\n      * @since 2.8",FAIL_ON_NULL_CREATOR_PROPERTIES(false),com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_NULL_CREATOR_PROPERTIES,public 
com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY,Enum Constant,"* Feature that determines what happens when a property annotated with\n     * {@link com.fasterxml.jackson.annotation.JsonTypeInfo.As#EXTERNAL_PROPERTY} is missing,\n     * but associated type id is available. If enabled, {@link JsonMappingException} is always\n     * thrown when property value is missing (if type id does exist);\n     * if disabled, exception is only thrown if property is marked as `required`.\n     *<p>\n     * Feature is enabled by default, so that exception is thrown when a subtype property is\n     * missing.\n     *\n     * @since 2.9",FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY(true),com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY,public 
com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_TRAILING_TOKENS,Enum Constant,"* Feature that determines behaviour for data-binding after binding the root value.\n     * If feature is enabled, one more call to\n     * {@link com.fasterxml.jackson.core.JsonParser#nextToken} is made to ensure that\n     * no more tokens are found (and if any is found,\n     * {@link com.fasterxml.jackson.databind.exc.MismatchedInputException} is thrown); if\n     * disabled, no further checks are made.\n     *<p>\n     * Feature could alternatively be called <code>READ_FULL_STREAM</code>, since it\n     * effectively verifies that input stream contains only as much data as is needed\n     * for binding the full value, and nothing more (except for possible ignorable\n     * white space or comments, if supported by data format).\n     *<p>\n     * Feature is disabled by default (so that no check is made for possible trailing\n     * token(s)) for backwards compatibility reasons.\n     *\n     * @since 2.9",FAIL_ON_TRAILING_TOKENS(false),com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_TRAILING_TOKENS,public 
com.fasterxml.jackson.databind.DeserializationFeature.WRAP_EXCEPTIONS,Enum Constant,"* Feature that determines whether Jackson code should catch\n     * and wrap {@link Exception}s (but never {@link Error}s!)\n     * to add additional information about\n     * location (within input) of problem or not. If enabled,\n     * most exceptions will be caught and re-thrown (exception\n     * specifically being that {@link java.io.IOException}s may be passed\n     * as is, since they are declared as throwable); this can be\n     * convenient both in that all exceptions will be checked and\n     * declared, and so there is more contextual information.\n     * However, sometimes calling application may just want ""raw""\n     * unchecked exceptions passed as is.\n     *<p>\n     * NOTE: most of the time exceptions that may or may not be wrapped are of\n     * type {@link RuntimeException}: as mentioned earlier, various\n     * {@link java.io.IOException}s (and in particular\n     * {@link com.fasterxml.jackson.core.JacksonException}s) will\n     * always be passed as-is.\n     *<p>\n     * Disabling this feature will mean that you will need to adjust your try/catch\n     * blocks to properly handle {@link RuntimeException}s. Failing to do so,\n     * may cause your application to crash due to unhandled exceptions.\n     *<p>\n     * Feature is enabled by default.",WRAP_EXCEPTIONS(true),com.fasterxml.jackson.databind.DeserializationFeature WRAP_EXCEPTIONS,public 
com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNEXPECTED_VIEW_PROPERTIES,Enum Constant,"* Feature that determines the handling of properties not included in the active JSON view\n     * during deserialization.\n     *<p>\n     * When enabled, if a property is encountered during deserialization that is not part of the\n     * active view (as defined by {@link com.fasterxml.jackson.annotation.JsonView}).\n     *<p>\n     * This feature is particularly useful in scenarios where strict adherence to the specified\n     * view is required and any deviation, such as the presence of properties not belonging to\n     * the view, should be reported as an error. It enhances the robustness of data binding\n     * by ensuring that only the properties relevant to the active view are considered during\n     * deserialization, thereby preventing unintended data from being processed.\n     *<p>\n     * In Jackson 2.x, this feature is disabled by default to maintain backward compatibility.\n     * In Jackson 3.x, this feature may be enabled by default.\n     *\n     * @since 2.17",FAIL_ON_UNEXPECTED_VIEW_PROPERTIES(false),com.fasterxml.jackson.databind.DeserializationFeature FAIL_ON_UNEXPECTED_VIEW_PROPERTIES,public 
com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY,Enum Constant,"* Feature that determines whether it is acceptable to coerce non-array\n     * (in JSON) values to work with Java collection (arrays, java.util.Collection)\n     * types. If enabled, collection deserializers will try to handle non-array\n     * values as if they had ""implicit"" surrounding JSON array.\n     * This feature is meant to be used for compatibility/interoperability reasons,\n     * to work with packages (such as XML-to-JSON converters) that leave out JSON\n     * array in cases where there is just a single element in array.\n     *<p>\n     * Feature is disabled by default.",ACCEPT_SINGLE_VALUE_AS_ARRAY(false),com.fasterxml.jackson.databind.DeserializationFeature ACCEPT_SINGLE_VALUE_AS_ARRAY,public 
com.fasterxml.jackson.databind.DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS,Enum Constant,"* Feature that determines whether it is acceptable to coerce single value array (in JSON)\n     * values to the corresponding value type.  This is basically the opposite of the {@link #ACCEPT_SINGLE_VALUE_AS_ARRAY}\n     * feature.  If more than one value is found in the array, a JsonMappingException is thrown.\n     * <p>\n     * NOTE: only <b>single</b> wrapper Array is allowed: if multiple attempted, exception\n     * will be thrown.\n     *\n     * Feature is disabled by default.\n     * @since 2.4",UNWRAP_SINGLE_VALUE_ARRAYS(false),com.fasterxml.jackson.databind.DeserializationFeature UNWRAP_SINGLE_VALUE_ARRAYS,public 
com.fasterxml.jackson.databind.DeserializationFeature.UNWRAP_ROOT_VALUE,Enum Constant,"* Feature to allow ""unwrapping"" root-level JSON value, to match setting of\n     * {@link SerializationFeature#WRAP_ROOT_VALUE} used for serialization.\n     * Will verify that the root JSON value is a JSON Object, and that it has\n     * a single property with expected root name. If not, a\n     * {@link JsonMappingException} is thrown; otherwise value of the wrapped property\n     * will be deserialized as if it was the root value.\n     *<p>\n     * Feature is disabled by default.",UNWRAP_ROOT_VALUE(false),com.fasterxml.jackson.databind.DeserializationFeature UNWRAP_ROOT_VALUE,public 
com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT,Enum Constant,"* Feature that can be enabled to allow JSON empty String\n     * value ({@code """"}) to be bound as {@code null} for POJOs and other structured\n     * values ({@link java.util.Map}s, {@link java.util.Collection}s).\n     * If disabled, standard POJOs can only be bound from JSON {@code null} or\n     * JSON Object (standard meaning that no custom deserializers or\n     * constructors are defined; both of which can add support for other\n     * kinds of JSON values); if enabled, empty JSON String can be taken\n     * to be equivalent of JSON null.\n     *<p>\n     * NOTE: this does NOT apply to scalar values such as Strings, booleans, numbers\n     * and date/time types;\n     * whether these can be coerced depends on\n     * {@link MapperFeature#ALLOW_COERCION_OF_SCALARS}.\n     *<p>\n     * Feature is disabled by default.",ACCEPT_EMPTY_STRING_AS_NULL_OBJECT(false),com.fasterxml.jackson.databind.DeserializationFeature ACCEPT_EMPTY_STRING_AS_NULL_OBJECT,public 
com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT,Enum Constant,"* Feature that can be enabled to allow empty JSON Array\n     * value (that is, {@code[ ]} to be bound to POJOs (and\n     * with 2.9, other values too) as {@code null}.\n     * If disabled, standard POJOs can only be bound from JSON {@code null} or\n     * JSON Object (standard meaning that no custom deserializers or\n     * constructors are defined; both of which can add support for other\n     * kinds of JSON values); if enabled, empty JSON Array will be taken\n     * to be equivalent of JSON {@code null}.\n     *<p>\n     * Feature is disabled by default.\n     *\n     * @since 2.5",ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT(false),com.fasterxml.jackson.databind.DeserializationFeature ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT,public 
com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_FLOAT_AS_INT,Enum Constant,"* Feature that determines whether coercion from JSON floating point\n     * number (anything with command (`.`) or exponent portion (`e` / `E'))\n     * to an expected integral number (`int`, `long`, `java.lang.Integer`, `java.lang.Long`,\n     * `java.math.BigDecimal`) is allowed or not.\n     * If enabled, coercion truncates value; if disabled, a {@link JsonMappingException}\n     * will be thrown.\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.6",ACCEPT_FLOAT_AS_INT(true),com.fasterxml.jackson.databind.DeserializationFeature ACCEPT_FLOAT_AS_INT,public 
com.fasterxml.jackson.databind.DeserializationFeature.READ_ENUMS_USING_TO_STRING,Enum Constant,"* Feature that determines standard deserialization mechanism used for\n     * Enum values: if enabled, Enums are assumed to have been serialized  using\n     * return value of <code>Enum.toString()</code>;\n     * if disabled, return value of <code>Enum.name()</code> is assumed to have been used.\n     *<p>\n     * Note: this feature should usually have same value\n     * as {@link SerializationFeature#WRITE_ENUMS_USING_TO_STRING}.\n     *<p>\n     * Feature is disabled by default.",READ_ENUMS_USING_TO_STRING(false),com.fasterxml.jackson.databind.DeserializationFeature READ_ENUMS_USING_TO_STRING,public 
com.fasterxml.jackson.databind.DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL,Enum Constant,"* Feature that allows unknown Enum values to be parsed as {@code null} values.\n     * If disabled, unknown Enum values will throw exceptions.\n     * <p>\n     * Note that in some cases this will effectively ignore unknown {@code Enum} values,\n     * e.g. when the unknown values are used as keys of {@link java.util.EnumMap}\n     * or values of {@link java.util.EnumSet}: this is because these data structures cannot\n     * store {@code null} values.\n     * <p>\n     * Also note that this feature has lower precedence than\n     * {@link DeserializationFeature#READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE},\n     * meaning this feature will work only if latter feature is disabled.\n     * <p>\n     * Feature is disabled by default.\n     *\n     * @since 2.0",READ_UNKNOWN_ENUM_VALUES_AS_NULL(false),com.fasterxml.jackson.databind.DeserializationFeature READ_UNKNOWN_ENUM_VALUES_AS_NULL,public 
com.fasterxml.jackson.databind.DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE,Enum Constant,"* Feature that allows unknown Enum values to be ignored and replaced by a predefined value specified through\n     * {@link com.fasterxml.jackson.annotation.JsonEnumDefaultValue @JsonEnumDefaultValue} annotation.\n     * If disabled, unknown Enum values will throw exceptions.\n     * If enabled, but no predefined default Enum value is specified, an exception will be thrown as well.\n     * <p>\n     * Note that this feature has higher precedence than {@link DeserializationFeature#READ_UNKNOWN_ENUM_VALUES_AS_NULL}.\n     * <p>\n     * Feature is disabled by default.\n     *\n     * @since 2.8",READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE(false),com.fasterxml.jackson.databind.DeserializationFeature READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE,public 
com.fasterxml.jackson.databind.DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS,Enum Constant,"* Feature that controls whether numeric timestamp values are expected\n     * to be written using nanosecond timestamps (enabled) or not (disabled),\n     * <b>if and only if</b> datatype supports such resolution.\n     * Only newer datatypes (such as Java8 Date/Time) support such resolution --\n     * older types (pre-Java8 <b>java.util.Date</b> etc) and Joda do not --\n     * and this setting <b>has no effect</b> on such types.\n     *<p>\n     * If disabled, standard millisecond timestamps are assumed.\n     * This is the counterpart to {@link SerializationFeature#WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS}.\n     *<p>\n     * Feature is enabled by default, to support most accurate time values possible.\n     *\n     * @since 2.2",READ_DATE_TIMESTAMPS_AS_NANOSECONDS(true),com.fasterxml.jackson.databind.DeserializationFeature READ_DATE_TIMESTAMPS_AS_NANOSECONDS,public 
com.fasterxml.jackson.databind.DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE,Enum Constant,"* Feature that specifies whether context provided {@link java.util.TimeZone}\n     * ({@link DeserializationContext#getTimeZone()} should be used to adjust Date/Time\n     * values on deserialization, even if value itself contains timezone information.\n     * If enabled, contextual <code>TimeZone</code> will essentially override any other\n     * TimeZone information; if disabled, it will only be used if value itself does not\n     * contain any TimeZone information.\n     *<p>\n     * Note that exact behavior depends on date/time types in question; and specifically\n     * JDK type of {@link java.util.Date} does NOT have in-built timezone information\n     * so this setting has no effect.\n     * Further, while {@link java.util.Calendar} does have this information basic\n     * JDK {@link java.text.SimpleDateFormat} is unable to retain parsed zone information,\n     * and as a result, {@link java.util.Calendar} will always get context timezone\n     * adjustment regardless of this setting.\n     *<p>\n     *<p>\n     * Taking above into account, this feature is supported only by extension modules for\n     * Joda and Java 8 date/time datatypes.\n     *\n     * @since 2.2",ADJUST_DATES_TO_CONTEXT_TIME_ZONE(true),com.fasterxml.jackson.databind.DeserializationFeature ADJUST_DATES_TO_CONTEXT_TIME_ZONE,public 
com.fasterxml.jackson.databind.DeserializationFeature.EAGER_DESERIALIZER_FETCH,Enum Constant,* Feature that determines whether {@link ObjectReader} should\n     * try to eagerly fetch necessary {@link JsonDeserializer} when\n     * possible. This improves performance in cases where similarly\n     * configured {@link ObjectReader} instance is used multiple\n     * times; and should not significantly affect single-use cases.\n     *<p>\n     * Note that there should not be any need to normally disable this\n     * feature: only consider that if there are actual perceived problems.\n     *<p>\n     * Feature is enabled by default.\n     *\n     * @since 2.1,EAGER_DESERIALIZER_FETCH(true),com.fasterxml.jackson.databind.DeserializationFeature EAGER_DESERIALIZER_FETCH,public 
com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping.JAVA_LANG_OBJECT,Enum Constant,* This value means that only properties that have\n         * {@link java.lang.Object} as declared type (including\n         * generic types without explicit type) will use default\n         * typing.,JAVA_LANG_OBJECT,com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping JAVA_LANG_OBJECT,public 
com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping.OBJECT_AND_NON_CONCRETE,Enum Constant,"* Value that means that default typing will be used for\n         * properties with declared type of {@link java.lang.Object}\n         * or an abstract type (abstract class or interface).\n         * Note that this does <b>not</b> include array types.\n         *<p>\n         * Since 2.4, this does NOT apply to {@link TreeNode} and its subtypes.",OBJECT_AND_NON_CONCRETE,com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping OBJECT_AND_NON_CONCRETE,public 
com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping.NON_CONCRETE_AND_ARRAYS,Enum Constant,"* Value that means that default typing will be used for\n         * all types covered by {@link #OBJECT_AND_NON_CONCRETE}\n         * plus all array types for them.\n         *<p>\n         * Since 2.4, this does NOT apply to {@link TreeNode} and its subtypes.",NON_CONCRETE_AND_ARRAYS,com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping NON_CONCRETE_AND_ARRAYS,public 
com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping.NON_FINAL,Enum Constant,"* Value that means that default typing will be used for\n         * all non-final types, with exception of small number of\n         * ""natural"" types (String, Boolean, Integer, Double), which\n         * can be correctly inferred from JSON; as well as for\n         * all arrays of non-final types.\n         *<p>\n         * Since 2.4, this does NOT apply to {@link TreeNode} and its subtypes.",NON_FINAL,com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping NON_FINAL,public 
com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping.NON_FINAL_AND_ENUMS,Enum Constant,"* Enables default typing for non-final types as {@link #NON_FINAL},\n         * but also includes Enums.\n         * Designed to allow default typing of Enums without resorting to\n         * {@link #EVERYTHING}, which has security implications.\n         *<p>\n         * @since 2.16",NON_FINAL_AND_ENUMS,com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping NON_FINAL_AND_ENUMS,public 
com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping.EVERYTHING,Enum Constant,"* Value that means that default typing will be used for\n         * all types, with exception of small number of\n         * ""natural"" types (String, Boolean, Integer, Double) that\n         * can be correctly inferred from JSON, and primitives (which\n         * can not be polymorphic either).\n         * Typing is also enabled for all array types.\n         *<p>\n         * WARNING: most of the time this is <b>NOT</b> the setting you want\n         * as it tends to add Type Ids everywhere, even in cases\n         * where type can not be anything other than declared (for example\n         * if declared value type of a property is {@code final} -- for example,\n         * properties of type {@code long} (or wrapper {@code Long}).\n         *<p>\n         * Note that this is rarely the option you should use as it results\n         * in adding type information in many places where it should not be needed:\n         * make sure you understand its behavior.\n         * The only known use case for this setting is for serialization\n         * when passing instances of final class, and base type is not\n         * separately specified.\n         *\n         * @since 2.10\n         * @deprecated Since 2.17 and removed from 3.0 --see {@link #NON_FINAL_AND_ENUMS} for Enum-related usage.",@Deprecated\nEVERYTHING,com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping EVERYTHING,public 
com.fasterxml.jackson.databind.node.JsonNodeType.ARRAY,Enum Constant,No Comment,ARRAY,com.fasterxml.jackson.databind.node.JsonNodeType ARRAY,public 
com.fasterxml.jackson.databind.node.JsonNodeType.BINARY,Enum Constant,No Comment,BINARY,com.fasterxml.jackson.databind.node.JsonNodeType BINARY,public 
com.fasterxml.jackson.databind.node.JsonNodeType.BOOLEAN,Enum Constant,No Comment,BOOLEAN,com.fasterxml.jackson.databind.node.JsonNodeType BOOLEAN,public 
com.fasterxml.jackson.databind.node.JsonNodeType.MISSING,Enum Constant,No Comment,MISSING,com.fasterxml.jackson.databind.node.JsonNodeType MISSING,public 
com.fasterxml.jackson.databind.node.JsonNodeType.NULL,Enum Constant,No Comment,,com.fasterxml.jackson.databind.node.JsonNodeType NULL,public 
com.fasterxml.jackson.databind.node.JsonNodeType.NUMBER,Enum Constant,No Comment,NUMBER,com.fasterxml.jackson.databind.node.JsonNodeType NUMBER,public 
com.fasterxml.jackson.databind.node.JsonNodeType.OBJECT,Enum Constant,No Comment,OBJECT,com.fasterxml.jackson.databind.node.JsonNodeType OBJECT,public 
com.fasterxml.jackson.databind.node.JsonNodeType.POJO,Enum Constant,No Comment,POJO,com.fasterxml.jackson.databind.node.JsonNodeType POJO,public 
com.fasterxml.jackson.databind.node.JsonNodeType.STRING,Enum Constant,No Comment,STRING,com.fasterxml.jackson.databind.node.JsonNodeType STRING,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes.STRING,Enum Constant,No Comment,STRING,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes STRING,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes.NUMBER,Enum Constant,No Comment,NUMBER,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes NUMBER,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes.INTEGER,Enum Constant,No Comment,INTEGER,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes INTEGER,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes.BOOLEAN,Enum Constant,No Comment,BOOLEAN,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes BOOLEAN,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes.OBJECT,Enum Constant,No Comment,OBJECT,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes OBJECT,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes.ARRAY,Enum Constant,No Comment,ARRAY,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes ARRAY,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes.NULL,Enum Constant,No Comment,,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes NULL,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes.ANY,Enum Constant,No Comment,ANY,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes ANY,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat.COLOR,Enum Constant,"* This is a CSS color (like ""#FF0000"" or ""red""), based on CSS\n         2.1 [W3C.CR-CSS21-20070719].","COLOR(""color"")",com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat COLOR,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat.DATE,Enum Constant,"* This SHOULD be a date in the format of YYYY-MM-DD.  It is\n     recommended that you use the ""date-time"" format instead of ""date""\n     unless you need to transfer only the date part.","DATE(""date"")",com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat DATE,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat.DATE_TIME,Enum Constant,* This SHOULD be a date in ISO 8601 format of YYYY-MM-\n      DDThh:mm:ssZ in UTC time.  This is the recommended form of date/\n      timestamp.,"DATE_TIME(""date-time"")",com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat DATE_TIME,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat.EMAIL,Enum Constant,* This SHOULD be an email address.,"EMAIL(""email"")",com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat EMAIL,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat.HOST_NAME,Enum Constant,* This SHOULD be a host-name.,"HOST_NAME(""host-name"")",com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat HOST_NAME,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat.IP_ADDRESS,Enum Constant,* This SHOULD be an ip version 4 address.,"IP_ADDRESS(""ip-address"")",com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat IP_ADDRESS,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat.IPV6,Enum Constant,* This SHOULD be an ip version 6 address.,"IPV6(""ipv6"")",com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat IPV6,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat.PHONE,Enum Constant,* This SHOULD be a phone number (format MAY follow E.123).,"PHONE(""phone"")",com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat PHONE,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat.REGEX,Enum Constant,"* A regular expression, following the regular expression\n     * specification from ECMA 262/Perl 5.","REGEX(""regex"")",com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat REGEX,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat.STYLE,Enum Constant,"* This is a CSS style definition (like ""color: red; background-\n  	* color:#FFF""), based on CSS 2.1 [W3C.CR-CSS21-20070719].","STYLE(""style"")",com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat STYLE,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat.TIME,Enum Constant,"* This SHOULD be a time in the format of hh:mm:ss.  It is\n     * recommended that you use the ""date-time"" format instead of ""time""\n     * unless you need to transfer only the time part.","TIME(""time"")",com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat TIME,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat.URI,Enum Constant,* This value SHOULD be a URI.,"URI(""uri"")",com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat URI,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat.UTC_MILLISEC,Enum Constant,"* This SHOULD be the difference, measured in\n      milliseconds, between the specified time and midnight, 00:00 of\n      January 1, 1970 UTC.  The value SHOULD be a number (integer or\n      float).","UTC_MILLISEC(""utc-millisec"")",com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat UTC_MILLISEC,public 
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat.UUID,Enum Constant,"* Value should be valid <a href=""https://en.wikipedia.org/wiki/Universally_unique_identifier"">UUID</a>\n     *\n     * @since 2.10","UUID(""uuid"")",com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat UUID,public 
com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty$Type.MANAGED_REFERENCE,Enum Constant,"* Reference property that Jackson manages and that is serialized normally (by serializing\n             * reference object), but is used for resolving back references during\n             * deserialization.\n             * Usually this can be defined by using\n             * {@link com.fasterxml.jackson.annotation.JsonManagedReference}",MANAGED_REFERENCE,com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty$Type MANAGED_REFERENCE,public 
com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty$Type.BACK_REFERENCE,Enum Constant,"* Reference property that Jackson manages by suppressing it during serialization,\n             * and reconstructing during deserialization.\n             * Usually this can be defined by using\n             * {@link com.fasterxml.jackson.annotation.JsonBackReference}",BACK_REFERENCE,com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty$Type BACK_REFERENCE,public 
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity.ALLOWED,Enum Constant,* Value that indicates that Class name or Class is allowed for use without further checking,ALLOWED,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity ALLOWED,public 
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity.DENIED,Enum Constant,* Value that indicates that Class name or Class is NOT allowed and no further checks are\n         * needed or allowed,DENIED,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity DENIED,public 
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity.INDETERMINATE,Enum Constant,"* Value that indicates that Class name or Class validity can not be confirmed by validator\n         * and further checks are needed.\n         *<p>\n         * Typically if validator can not establish validity from Type Id or Class (name), eventual\n         * determination will be {@code DENIED}, for safety reasons.",INDETERMINATE,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity INDETERMINATE,public 
