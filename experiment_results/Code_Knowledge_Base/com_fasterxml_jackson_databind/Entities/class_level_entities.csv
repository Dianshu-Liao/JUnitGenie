FEN:ID,:LABEL,Comment,Modifiers,Extends,Implements
com.fasterxml.jackson.databind.DeserializationConfig,Class,"* Object that contains baseline configuration for deserialization\n * process. An instance is owned by {@link ObjectMapper}, which\n * passes an immutable instance to be used for deserialization process.\n *<p>\n * Note that instances are considered immutable and as such no copies\n * should need to be created for sharing; all copying is done with\n * ""fluent factory"" methods.","public , final ",com.fasterxml.jackson.databind.cfg.MapperConfigBase,java.io.Serializable
com.fasterxml.jackson.databind.DatabindException,Abstract Class,"* Intermediate base class for all databind level processing problems, as\n * distinct from stream-level problems or I/O issues below.\n *<p>\n * Added in 2.13 to eventually replace {@link com.fasterxml.jackson.databind.JsonMappingException};\n * for 2.x will allow limited use as target (as catching it will also catch mapping exception)\n * but will not be constructed or thrown directly.\n *\n * @since 2.13","public , abstract ",com.fasterxml.jackson.core.JsonProcessingException,
com.fasterxml.jackson.databind.RuntimeJsonMappingException,Class,* Wrapper used when interface does not allow throwing a checked\n * {@link JsonMappingException},public ,java.lang.RuntimeException,
com.fasterxml.jackson.databind.PropertyNamingStrategies,Abstract Class,"* Container for standard {@link PropertyNamingStrategy} implementations\n * and singleton instances.\n *<p>\n * Added in Jackson 2.12 to resolve issue\n * <a href=""https://github.com/FasterXML/jackson-databind/issues/2715"">databind#2715</a>.\n *\n * @since 2.12","public , abstract ",,java.io.Serializable
com.fasterxml.jackson.databind.PropertyNamingStrategies$SnakeCaseStrategy,Class,"* A {@link PropertyNamingStrategy} that translates typical camel case Java\n     * property names to lower case JSON element names, separated by\n     * underscores.  This implementation is somewhat lenient, in that it\n     * provides some additional translations beyond strictly translating from\n     * camel case only.  In particular, the following translations are applied\n     * by this PropertyNamingStrategy.\n     *\n     * <ul><li>Every upper case letter in the Java property name is translated\n     * into two characters, an underscore and the lower case equivalent of the\n     * target character, with three exceptions.\n     * <ol><li>For contiguous sequences of upper case letters, characters after\n     * the first character are replaced only by their lower case equivalent,\n     * and are not preceded by an underscore.\n     * <ul><li>This provides for reasonable translations of upper case acronyms,\n     * e.g., &quot;theWWW&quot; is translated to &quot;the_www&quot;.</li></ul></li>\n     * <li>An upper case character in the first position of the Java property\n     * name is not preceded by an underscore character, and is translated only\n     * to its lower case equivalent.\n     * <ul><li>For example, &quot;Results&quot; is translated to &quot;results&quot;,\n     * and not to &quot;_results&quot;.</li></ul></li>\n     * <li>An upper case character in the Java property name that is already\n     * preceded by an underscore character is translated only to its lower case\n     * equivalent, and is not preceded by an additional underscore.\n     * <ul><li>For example, &quot;user_Name&quot; is translated to\n     * &quot;user_name&quot;, and not to &quot;user__name&quot; (with two\n     * underscore characters).</li></ul></li></ol></li>\n     * <li>If the Java property name starts with an underscore, then that\n     * underscore is not included in the translated name, unless the Java\n     * property name is just one character in length, i.e., it is the\n     * underscore character.  This applies only to the first character of the\n     * Java property name.</li></ul>\n     *<p>\n     * These rules result in the following additional example translations from\n     * Java property names to JSON element names.\n     * <ul><li>&quot;userName&quot; is translated to &quot;user_name&quot;</li>\n     * <li>&quot;UserName&quot; is translated to &quot;user_name&quot;</li>\n     * <li>&quot;USER_NAME&quot; is translated to &quot;user_name&quot;</li>\n     * <li>&quot;user_name&quot; is translated to &quot;user_name&quot; (unchanged)</li>\n     * <li>&quot;user&quot; is translated to &quot;user&quot; (unchanged)</li>\n     * <li>&quot;User&quot; is translated to &quot;user&quot;</li>\n     * <li>&quot;USER&quot; is translated to &quot;user&quot;</li>\n     * <li>&quot;_user&quot; is translated to &quot;user&quot;</li>\n     * <li>&quot;_User&quot; is translated to &quot;user&quot;</li>\n     * <li>&quot;__user&quot; is translated to &quot;_user&quot;\n     * (the first of two underscores was removed)</li>\n     * <li>&quot;user__name&quot; is translated to &quot;user__name&quot;\n     * (unchanged, with two underscores)</li></ul>","public , static ",com.fasterxml.jackson.databind.PropertyNamingStrategies.NamingBase,
com.fasterxml.jackson.databind.PropertyNamingStrategies$UpperSnakeCaseStrategy,Class,* A {@link PropertyNamingStrategy} that translates an input to the equivalent upper case snake\n     * case. The class extends {@link PropertyNamingStrategies.SnakeCaseStrategy} to retain the\n     * snake case conversion functionality offered by the strategy.\n     *\n     * @since 2.13,"public , static ",com.fasterxml.jackson.databind.PropertyNamingStrategies.SnakeCaseStrategy,
com.fasterxml.jackson.databind.PropertyNamingStrategies$LowerCamelCaseStrategy,Class,"* ""No-operation"" strategy that is equivalent to not specifying any\n     * strategy: will simply return suggested standard bean naming as-is.","public , static ",com.fasterxml.jackson.databind.PropertyNamingStrategies.NamingBase,
com.fasterxml.jackson.databind.PropertyNamingStrategies$UpperCamelCaseStrategy,Class,"* A {@link PropertyNamingStrategy} that translates typical camelCase Java\n     * property names to PascalCase JSON element names (i.e., with a capital\n     * first letter).  In particular, the following translations are applied by\n     * this PropertyNamingStrategy.\n     *\n     * <ul><li>The first lower-case letter in the Java property name is translated\n     * into its equivalent upper-case representation.</li></ul>\n     *\n     * This rules result in the following example translation from\n     * Java property names to JSON element names.\n     * <ul><li>&quot;userName&quot; is translated to &quot;UserName&quot;</li></ul>","public , static ",com.fasterxml.jackson.databind.PropertyNamingStrategies.NamingBase,
com.fasterxml.jackson.databind.PropertyNamingStrategies$LowerCaseStrategy,Class,"* Simple strategy where external name simply only uses lower-case characters,\n     * and no separators.\n     * Conversion from internal name like ""someOtherValue"" would be into external name\n     * if ""someothervalue"".","public , static ",com.fasterxml.jackson.databind.PropertyNamingStrategies.NamingBase,
com.fasterxml.jackson.databind.PropertyNamingStrategies$KebabCaseStrategy,Class,"* Naming strategy similar to {@link PropertyNamingStrategies.SnakeCaseStrategy},\n     * but instead of underscores\n     * as separators, uses hyphens. Naming convention traditionally used for languages\n     * like Lisp.","public , static ",com.fasterxml.jackson.databind.PropertyNamingStrategies.NamingBase,
com.fasterxml.jackson.databind.PropertyNamingStrategies$LowerDotCaseStrategy,Class,"* Naming strategy similar to {@link PropertyNamingStrategies.KebabCaseStrategy},\n     * but instead of hyphens\n     * as separators, uses dots. Naming convention widely used as configuration properties name.","public , static ",com.fasterxml.jackson.databind.PropertyNamingStrategies.NamingBase,
com.fasterxml.jackson.databind.PropertyNamingStrategies$NamingBase,Abstract Class,* Intermediate base class for simple implementations,"public , static , abstract ",com.fasterxml.jackson.databind.PropertyNamingStrategy,
com.fasterxml.jackson.databind.JavaType,Abstract Class,* Base class for type token classes used both to contain information\n * and as keys for deserializers.\n *<p>\n * Instances can (only) be constructed by\n * <code>com.fasterxml.jackson.databind.type.TypeFactory</code>.\n *<p>\n * Since 2.2 this implements {@link java.lang.reflect.Type} to allow\n * it to be pushed through interfaces that only expose that type.,"public , abstract ",com.fasterxml.jackson.core.type.ResolvedType,java.io.Serializable;java.lang.reflect.Type
com.fasterxml.jackson.databind.JsonNode,Abstract Class,"* Base class for all JSON nodes, which form the basis of JSON\n * Tree Model that Jackson implements.\n * One way to think of these nodes is to consider them\n * similar to DOM nodes in XML DOM trees.\n *<p>\n * As a general design rule, most accessors (""getters"") are included\n * in this base class, to allow for traversing structure without\n * type casts. Most mutators, however, need to be accessed through\n * specific sub-classes (such as <code>ObjectNode</code>\n * and <code>ArrayNode</code>).\n * This seems sensible because proper type\n * information is generally available when building or modifying\n * trees, but less often when reading a tree (newly built from\n * parsed JSON content).\n *<p>\n * Actual concrete sub-classes can be found from package\n * {@link com.fasterxml.jackson.databind.node}.\n *<p>\n * Note that it is possible to ""read"" from nodes, using\n * method {@link TreeNode#traverse(ObjectCodec)}, which will result in\n * a {@link JsonParser} being constructed. This can be used for (relatively)\n * efficient conversations between different representations; and it is what\n * core databind uses for methods like {@link ObjectMapper#treeToValue(TreeNode, Class)}\n * and {@link ObjectMapper#treeAsTokens(TreeNode)}","public , abstract ",com.fasterxml.jackson.databind.JsonSerializable.Base,com.fasterxml.jackson.core.TreeNode;java.lang.Iterable
com.fasterxml.jackson.databind.JsonNode$OverwriteMode,Enum,"* Configuration setting used with {@link JsonNode#withObject(JsonPointer)}\n     * method overrides, to indicate which overwrites are acceptable if the\n     * path pointer indicates has incompatible nodes (for example, instead\n     * of Object node a Null node is encountered).\n     * Overwrite means that the existing value is replaced with compatible type,\n     * potentially losing existing values or even sub-trees.\n     *<p>\n     * Default value if {@code NULLS} which only allows Null-value nodes\n     * to be replaced but no other types.\n     *\n     * @since 2.14",public ,enum has no extends,
com.fasterxml.jackson.databind.util.TokenBuffer,Class,"* Utility class used for efficient storage of {@link JsonToken}\n * sequences, needed for temporary buffering.\n * Space efficient for different sequence lengths (especially so for smaller\n * ones; but not significantly less efficient for larger), highly efficient\n * for linear iteration and appending. Implemented as segmented/chunked\n * linked list of tokens; only modifications are via appends.",public ,com.fasterxml.jackson.core.JsonGenerator,
com.fasterxml.jackson.databind.util.TokenBuffer$Parser,Class,No Comment,"protected , final , static ",com.fasterxml.jackson.core.base.ParserMinimalBase,
com.fasterxml.jackson.databind.util.TokenBuffer$Segment,Class,"* Individual segment of TokenBuffer that can store up to 16 tokens\n     * (limited by 4 bits per token type marker requirement).\n     * Current implementation uses fixed length array; could alternatively\n     * use 16 distinct fields and switch statement (slightly more efficient\n     * storage, slightly slower access)","protected , final , static ",,
com.fasterxml.jackson.databind.util.Annotations,Interface,"* Interface that defines interface for accessing contents of a\n * collection of annotations. This is needed when introspecting\n * annotation-based features from different kinds of things, not\n * just objects that Java Reflection interface exposes.\n *<p>\n * Standard mutable implementation is {@link com.fasterxml.jackson.databind.introspect.AnnotationMap}",public ,,
com.fasterxml.jackson.databind.util.AccessPattern,Enum,* Enumeration used to indicate required access pattern for providers:\n * this can sometimes be used to optimize out dynamic calls.\n * The main difference is between constant values (which can be resolved once)\n * and dynamic ones (which must be resolved anew every time).,public ,enum has no extends,
com.fasterxml.jackson.databind.util.TokenBufferReadContext,Class,* Implementation of {@link JsonStreamContext} used by {@link TokenBuffer}\n * to link back to the original context to try to keep location information\n * consistent between source location and buffered content when it's re-read\n * from the buffer.\n *\n * @since 2.9,public ,com.fasterxml.jackson.core.JsonStreamContext,
com.fasterxml.jackson.databind.util.CompactStringObjectMap,Class,"* Specialized lookup class that implements functionality similar to\n * {@link java.util.Map}, but for special case of key always being\n * {@link java.lang.String} and using more compact (and memory-access\n * friendly) hashing scheme. Assumption is also that keys are typically\n * intern()ed.\n *<p>\n * Generics are not used to avoid bridge methods and since these maps\n * are not exposed as part of external API.\n *\n * @since 2.6","public , final ",,java.io.Serializable
com.fasterxml.jackson.databind.util.ExceptionUtil,Class,* Utility methods for dealing with exceptions/throwables\n *\n * @since 2.15,public ,,
com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition,Class,"* Simple immutable {@link BeanPropertyDefinition} implementation that can\n * be wrapped around a {@link AnnotatedMember} that is a simple\n * accessor (getter) or mutator (setter, constructor parameter)\n * (or both, for fields).",public ,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,
com.fasterxml.jackson.databind.util.LinkedNode,Class,* Node of a forward-only linked list.\n *\n * @author tatu,"public , final ",,
com.fasterxml.jackson.databind.util.LookupCache,Interface,"* An interface describing the required API for the Jackson-databind Type cache.\n *<p>\n * Note that while interface itself does not specify synchronization requirements for\n * implementations, specific use cases do. Typically implementations are\n * expected to be thread-safe, that is, to handle synchronization.\n *\n * @since 2.12 (for forwards-compatiblity with 3.0)",public ,,
com.fasterxml.jackson.databind.util.EnumValues,Class,"* Helper class used for storing String serializations of {@code Enum}s,\n * to match to/from external representations.","public , final ",,java.io.Serializable
com.fasterxml.jackson.databind.util.ISO8601Utils,Class,"* Utilities methods for manipulating dates in iso8601 format. This is much much faster and GC friendly than using SimpleDateFormat so\n * highly suitable if you (un)serialize lots of date objects.\n *\n * Supported parse format: [yyyy-MM-dd|yyyyMMdd][T(hh:mm[:ss[.sss]]|hhmm[ss[.sss]])]?[Z|[+-]hh[:]mm]]\n *\n * @see <a href=""http://www.w3.org/TR/NOTE-datetime"">this specification</a>",public ,,
com.fasterxml.jackson.databind.util.BeanUtil,Class,* Helper class that contains functionality needed by both serialization\n * and deserialization side.,public ,,
com.fasterxml.jackson.databind.util.NamingStrategyImpls,Enum,"* Container for standard naming strategy implementations, specifically\n * used by property naming strategies (see {@link com.fasterxml.jackson.databind.PropertyNamingStrategies})\n * and enum naming strategies (see {@link com.fasterxml.jackson.databind.EnumNamingStrategies}).",public ,enum has no extends,
com.fasterxml.jackson.databind.util.ViewMatcher,Class,* Helper class used for checking whether a property is visible\n * in the active view,public ,,java.io.Serializable
com.fasterxml.jackson.databind.util.ViewMatcher$Single,Class,No Comment,"private , final , static ",com.fasterxml.jackson.databind.util.ViewMatcher,
com.fasterxml.jackson.databind.util.ViewMatcher$Multi,Class,No Comment,"private , final , static ",com.fasterxml.jackson.databind.util.ViewMatcher,java.io.Serializable
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap,Class,@ThreadSafe,"public , final ",java.util.AbstractMap,java.util.concurrent.ConcurrentMap;java.io.Serializable
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$AddTask,Class,Adds the node to the page replacement policy.,final ,,java.lang.Runnable
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$RemovalTask,Class,Removes a node from the page replacement policy.,final ,,java.lang.Runnable
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$UpdateTask,Class,Updates the weighted size and evicts an entry on overflow.,final ,,java.lang.Runnable
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$DrainStatus,Enum,The draining status of the buffers.,,enum has no extends,
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$WeightedValue,Class,@Immutable,"static , final ",,
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$Node,Class,"* A node contains the key, the weighted value, and the linkage pointers on\n     * the page-replacement algorithm's data structures.","static , final ",java.util.concurrent.atomic.AtomicReference,com.fasterxml.jackson.databind.util.internal.Linked
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$KeySet,Class,An adapter to safely externalize the keys.,final ,java.util.AbstractSet,
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$KeyIterator,Class,An adapter to safely externalize the key iterator.,final ,,java.util.Iterator
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$Values,Class,An adapter to safely externalize the values.,final ,java.util.AbstractCollection,
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$ValueIterator,Class,An adapter to safely externalize the value iterator.,final ,,java.util.Iterator
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet,Class,An adapter to safely externalize the entries.,final ,java.util.AbstractSet,
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntryIterator,Class,An adapter to safely externalize the entry iterator.,final ,,java.util.Iterator
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$WriteThroughEntry,Class,An entry that allows updates to write through to the map.,final ,java.util.AbstractMap.SimpleEntry,
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$SerializationProxy,Class,* A proxy that is serialized instead of the map. The page-replacement\n     * algorithm's data structures are not serialized so the deserialized\n     * instance contains only the entries. This is acceptable as caches hold\n     * transient data that is recomputable and serialization would tend to be\n     * used as a fast warm-up process.,"static , final ",,java.io.Serializable
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$Builder,Class,"* A builder that creates {@link PrivateMaxEntriesMap} instances. It\n     * provides a flexible approach for constructing customized instances with\n     * a named parameter syntax. It can be used in the following manner:\n     * <pre>{@code\n     * ConcurrentMap<Vertex, Set<Edge>> graph = new Builder<Vertex, Set<Edge>>()\n     *     .maximumCapacity(5000)\n     *     .build();\n     * }</pre>","public , static , final ",,
com.fasterxml.jackson.databind.util.internal.LinkedDeque,Class,"* Linked list implementation of the {@link Deque} interface where the link\n * pointers are tightly integrated with the element. Linked deques have no\n * capacity restrictions; they grow as necessary to support usage. They are not\n * thread-safe; in the absence of external synchronization, they do not support\n * concurrent access by multiple threads. Null elements are prohibited.\n * <p>\n * Most <tt>LinkedDeque</tt> operations run in constant time by assuming that\n * the {@code Linked} parameter is associated with the deque instance. Any usage\n * that violates this assumption will result in non-deterministic behavior.\n * <p>\n * The iterators returned by this class are <em>not</em> <i>fail-fast</i>: If\n * the deque is modified at any time after the iterator is created, the iterator\n * will be in an unknown state. Thus, in the face of concurrent modification,\n * the iterator risks arbitrary, non-deterministic behavior at an undetermined\n * time in the future.\n *\n * @author ben.manes@gmail.com (Ben Manes)\n * @param <E> the type of elements held in this collection\n * @see <a href=""http://code.google.com/p/concurrentlinkedhashmap/"">\n *      http://code.google.com/p/concurrentlinkedhashmap/</a>",final ,java.util.AbstractCollection,java.util.Deque
com.fasterxml.jackson.databind.util.internal.LinkedDeque$AbstractLinkedIterator,Abstract Class,No Comment,abstract ,,java.util.Iterator
com.fasterxml.jackson.databind.util.internal.Linked,Interface,* An element that is linked on the {@link Deque}.,default,,
com.fasterxml.jackson.databind.util.ArrayBuilders,Class,"* Helper class that contains set of distinct builders for different\n * arrays of primitive values. It also provides trivially simple\n * reuse scheme, which assumes that caller knows not to use instances\n * concurrently (which works ok with primitive arrays since they can\n * not contain other non-primitive types).\n * Also note that instances are not thread safe; the intent is that\n * a builder is constructed on per-call (deserialization) basis.","public , final ",,
com.fasterxml.jackson.databind.util.ArrayBuilders$BooleanBuilder,Class,No Comment,"public , final , static ",com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder,
com.fasterxml.jackson.databind.util.ArrayBuilders$ByteBuilder,Class,No Comment,"public , final , static ",com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder,
com.fasterxml.jackson.databind.util.ArrayBuilders$ShortBuilder,Class,No Comment,"public , final , static ",com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder,
com.fasterxml.jackson.databind.util.ArrayBuilders$IntBuilder,Class,No Comment,"public , final , static ",com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder,
com.fasterxml.jackson.databind.util.ArrayBuilders$LongBuilder,Class,No Comment,"public , final , static ",com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder,
com.fasterxml.jackson.databind.util.ArrayBuilders$FloatBuilder,Class,No Comment,"public , final , static ",com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder,
com.fasterxml.jackson.databind.util.ArrayBuilders$DoubleBuilder,Class,No Comment,"public , final , static ",com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder,
com.fasterxml.jackson.databind.util.JSONWrappedObject,Class,* General-purpose wrapper class that can be used to decorate serialized\n * value with arbitrary literal prefix and suffix. This can be used for\n * example to construct arbitrary Javascript values (similar to how basic\n * function name and parenthesis are used with JSONP).\n *\n * @see com.fasterxml.jackson.databind.util.JSONPObject,public ,,com.fasterxml.jackson.databind.JsonSerializable
com.fasterxml.jackson.databind.util.ArrayIterator,Class,* Iterator implementation used to efficiently expose contents of an\n * Array as read-only iterator.,public ,,java.util.Iterator;java.lang.Iterable
com.fasterxml.jackson.databind.util.IgnorePropertiesUtil,Class,* @since 2.12,public ,,
com.fasterxml.jackson.databind.util.IgnorePropertiesUtil$Checker,Class,* Helper class to encapsulate logic from static {@code shouldIgnore} method\n     * of util class.,"public , final , static ",,java.io.Serializable
com.fasterxml.jackson.databind.util.ObjectBuffer,Class,* Helper class to use for constructing Object arrays by appending entries\n * to create arrays of various lengths (length that is not known a priori).,"public , final ",,
com.fasterxml.jackson.databind.util.JSONPObject,Class,"* Container class that can be used to wrap any Object instances (including\n * nulls), and will serialize embedded in\n * <a href=""http://en.wikipedia.org/wiki/JSONP"">JSONP</a> wrapping.\n *\n * @see com.fasterxml.jackson.databind.util.JSONWrappedObject",public ,,com.fasterxml.jackson.databind.JsonSerializable
com.fasterxml.jackson.databind.util.JacksonCollectors,Abstract Class,* Utility class that provides custom {@link Collector} implementations to support Stream operations.\n * <p>\n * This class is not meant to be instantiated and serves only as a utility class.\n * </p>\n *\n * @since 2.18,"public , abstract ",,
com.fasterxml.jackson.databind.util.StdConverter,Abstract Class,"* Standard implementation of {@link Converter} that supports explicit\n * type access, instead of relying type detection of generic type\n * parameters.\n *\n * @since 2.2","public , abstract ",,com.fasterxml.jackson.databind.util.Converter
com.fasterxml.jackson.databind.util.Converter,Interface,"* Helper interface for things that convert Objects of\n * one type to another.\n *<p>\n * NOTE: implementors are strongly encouraged to extend {@link StdConverter}\n * instead of directly implementing {@link Converter}, since that can\n * help with default implementation of typically boiler-plate code.\n *\n * @param <IN> Type of values converter takes\n * @param <OUT> Result type from conversion\n *\n * @see com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer\n * @see com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer\n *\n * @since 2.1",public ,,
com.fasterxml.jackson.databind.util.Converter$None,Abstract Class,"* This marker class is only to be used with annotations, to\n     * indicate that <b>no converter is to be used</b>.\n     *<p>\n     * Specifically, this class is to be used as the marker for\n     * annotation {@link com.fasterxml.jackson.databind.annotation.JsonSerialize},\n     * property <code>converter</code> (and related)\n     *\n     * @since 2.2","public , abstract , static ",,com.fasterxml.jackson.databind.util.Converter
com.fasterxml.jackson.databind.util.RootNameLookup,Class,* Helper class for caching resolved root names.,public ,,java.io.Serializable
com.fasterxml.jackson.databind.util.StdDateFormat,Class,"* Jackson's internal {@link DateFormat} implementation used by standard Date\n * serializers and deserializers to implement default behavior: does <b>NOT</b>\n * fully implement all aspects expected by {@link DateFormat} and as a consequence\n * <b>SHOULD NOT</b> to be used by code outside core Jackson databind functionality.\n * In particular, {@code ParsePosition} argument of {@link #parse(String, ParsePosition)}\n * and {@link #format(Date, StringBuffer, FieldPosition)} methods is fully ignored;\n * Jackson itself never calls these methods.\n *<p>\n * For serialization defaults to using\n * an ISO-8601 compliant format (format String ""yyyy-MM-dd'T'HH:mm:ss.SSSZ"")\n * and for deserialization, both ISO-8601 and RFC-1123.\n *<br>\n * Note that `Z` in format String refers to ISO-8601 time offset notation which produces\n * values like ""-08:00"" -- that is, full minute/hour combo without colon, and not using `Z`\n * as alias for ""+00:00"".\n * Inclusion of colon as separator, as default setting, started in Jackson 2.11:\n * prior versions omitted it.\n * Note that it is possible to enable/disable use of colon in time offset by using method\n * {@link #withColonInTimeZone} for creating new differently configured format instance,\n * and configuring {@code ObjectMapper} with it.\n *<p>\n * TODO: in Jackson 2.14 or later, should change behavior to fail if {@link ParsePosition}\n * is specified by caller (at least with non-0 offset).",public ,java.text.DateFormat,
com.fasterxml.jackson.databind.util.Named,Interface,* Simple tag interface mostly to allow sorting by name.,public ,,
com.fasterxml.jackson.databind.util.ISO8601DateFormat,Class,* Provide a fast thread-safe formatter/parser DateFormat for ISO8601 dates ONLY.\n * It was mainly done to be used with Jackson JSON Processor.\n *<p>\n * Watch out for clone implementation that returns itself.\n *<p>\n * All other methods but parse and format and clone are undefined behavior.\n *\n * @deprecated Use {@link com.fasterxml.jackson.databind.util.StdDateFormat} instead,public ,java.text.DateFormat,
com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream,Class,* Simple {@link InputStream} implementation that exposes currently\n * available content of a {@link ByteBuffer}.,public ,java.io.InputStream,
com.fasterxml.jackson.databind.util.TypeKey,Class,"* Key that offers two ""modes""; one with raw class, as used for\n * cases were raw class type is available (for example, when using\n * runtime type); and one with full generics-including.",public ,,
com.fasterxml.jackson.databind.util.ByteBufferBackedOutputStream,Class,* Simple {@link OutputStream} implementation that appends content\n * written in given {@link ByteBuffer} instance.,public ,java.io.OutputStream,
com.fasterxml.jackson.databind.util.ClassUtil,Class,No Comment,"public , final ",,
com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator,Class,* Inner class used to contain gory details of how we can determine\n     * details of instances of common JDK types like {@link EnumMap}s.,"private , static ",,
com.fasterxml.jackson.databind.util.ClassUtil$Ctor,Class,* Value class used for caching Constructor declarations; used because\n     * caching done by JDK appears to be somewhat inefficient for some use cases.\n     *\n     * @since 2.7,"public , final , static ",,
com.fasterxml.jackson.databind.util.NameTransformer,Abstract Class,"* Helper class used to encapsulate details of name mangling, transforming\n * of names using different strategies (prefixes, suffixes).\n * Default implementation is ""no-operation"" (aka identity transformation).","public , abstract ",,
com.fasterxml.jackson.databind.util.NameTransformer$NopTransformer,Class,No Comment,"protected , final , static ",com.fasterxml.jackson.databind.util.NameTransformer,java.io.Serializable
com.fasterxml.jackson.databind.util.NameTransformer$Chained,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.util.NameTransformer,java.io.Serializable
com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder,Abstract Class,* Base class for specialized primitive array builders.,"public , abstract ",,
com.fasterxml.jackson.databind.util.PrimitiveArrayBuilder$Node,Class,"* For actual buffering beyond the current buffer, we can actually\n     * use shared class which only deals with opaque ""untyped"" chunks.\n     * This works because {@link java.lang.System#arraycopy} does not\n     * take type; hence we can implement some aspects of primitive data\n     * handling in generic fashion.","final , static ",,
com.fasterxml.jackson.databind.util.NativeImageUtil,Class,* Utilities for graal native image support; mostly to improve error message handling\n * in case of missing information for native image.\n *\n * @since 2.14,public ,,
com.fasterxml.jackson.databind.util.LRUMap,Class,"* Helper for simple bounded maps used for reusing lookup values.\n *<p>\n * Note that serialization behavior is such that contents are NOT serialized,\n * on assumption that all use cases are for caching where persistence\n * does not make sense. The only thing serialized is the cache size of Map.\n *<p>\n * Since Jackson 2.12, there has been pluggable {@link LookupCache} interface which\n * allows users, frameworks, provide their own cache implementations.\n *<p>\n * Since Jackson 2.14, the implementation\n *<ul>\n *<li>Evicts the least recently used  entry when max size is reached\n * </li>\n *<li>Is thread-safe and does NOT require external synchronization\n * </li>\n *</ul>",public ,,com.fasterxml.jackson.databind.util.LookupCache;java.io.Serializable
com.fasterxml.jackson.databind.util.EnumResolver,Class,* Helper class used to resolve String values (either JSON Object field\n * names or regular String values) into Java Enum instances.,public ,,java.io.Serializable
com.fasterxml.jackson.databind.util.RawValue,Class,"* Helper class used to encapsulate ""raw values"", pre-encoded textual content\n * that can be output as opaque value with no quoting/escaping, using\n * {@link com.fasterxml.jackson.core.JsonGenerator#writeRawValue(String)}.\n * It may be stored in {@link TokenBuffer}, as well as in Tree Model\n * ({@link com.fasterxml.jackson.databind.JsonNode})\n *\n * @since 2.6",public ,,com.fasterxml.jackson.databind.JsonSerializable
com.fasterxml.jackson.databind.introspect.AnnotatedAndMetadata,Class,"* Silly little ""Pair"" class needed for 2-element tuples (without\n * adding dependency to one of 3rd party packages that has one).\n *\n * @since 2.13",public ,,
com.fasterxml.jackson.databind.introspect.AnnotatedClass,Class,No Comment,"public , final ",com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.TypeResolutionContext
com.fasterxml.jackson.databind.introspect.AnnotatedClass$Creators,Class,No Comment,"public , static , final ",,
com.fasterxml.jackson.databind.introspect.AnnotationCollector,Abstract Class,* Helper class used to collect annotations to be stored as\n * {@link com.fasterxml.jackson.databind.util.Annotations} (like {@link AnnotationMap}).\n *\n * @since 2.9,"public , abstract ",,
com.fasterxml.jackson.databind.introspect.AnnotationCollector$EmptyCollector,Class,No Comment,static ,com.fasterxml.jackson.databind.introspect.AnnotationCollector,
com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneCollector,Class,No Comment,static ,com.fasterxml.jackson.databind.introspect.AnnotationCollector,
com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector,Class,No Comment,static ,com.fasterxml.jackson.databind.introspect.AnnotationCollector,
com.fasterxml.jackson.databind.introspect.AnnotationCollector$NoAnnotations,Class,* Immutable implementation for case where no annotations are associated with\n     * an annotatable entity.\n     *\n     * @since 2.9,"public , static ",,com.fasterxml.jackson.databind.util.Annotations;java.io.Serializable
com.fasterxml.jackson.databind.introspect.AnnotationCollector$OneAnnotation,Class,No Comment,"public , static ",,com.fasterxml.jackson.databind.util.Annotations;java.io.Serializable
com.fasterxml.jackson.databind.introspect.AnnotationCollector$TwoAnnotations,Class,No Comment,"public , static ",,com.fasterxml.jackson.databind.util.Annotations;java.io.Serializable
com.fasterxml.jackson.databind.introspect.AnnotatedMethod,Class,No Comment,"public , final ",com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,java.io.Serializable
com.fasterxml.jackson.databind.introspect.AnnotatedMethod$Serialization,Class,* Helper class that is used as the workaround to persist\n     * Field references. It basically just stores declaring class\n     * and field name.,"private , final , static ",,java.io.Serializable
com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair,Class,"* Helper class that allows using 2 introspectors such that one\n * introspector acts as the primary one to use; and second one\n * as a fallback used if the primary does not provide conclusive\n * or useful result for a method.\n *<p>\n * An obvious consequence of priority is that it is easy to construct\n * longer chains of introspectors by linking multiple pairs.\n * Currently most likely combination is that of using the default\n * Jackson provider, along with JAXB annotation introspector.\n *\n * @since 2.1",public ,com.fasterxml.jackson.databind.AnnotationIntrospector,java.io.Serializable
com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,Abstract Class,* Intermediate base class that encapsulates features that\n * constructors and methods share.,"public , abstract ",com.fasterxml.jackson.databind.introspect.AnnotatedMember,
com.fasterxml.jackson.databind.introspect.Annotated,Abstract Class,* Shared base class used for anything on which annotations (included\n * within a {@link AnnotationMap}).,"public , abstract ",,
com.fasterxml.jackson.databind.introspect.PotentialCreators,Class,No Comment,public ,,
com.fasterxml.jackson.databind.introspect.WithMember,Interface,No Comment,public ,,
com.fasterxml.jackson.databind.introspect.AnnotatedConstructor,Class,No Comment,"public , final ",com.fasterxml.jackson.databind.introspect.AnnotatedWithParams,
com.fasterxml.jackson.databind.introspect.AnnotatedConstructor$Serialization,Class,* Helper class that is used as the workaround to persist\n     * Field references. It basically just stores declaring class\n     * and field name.,"private , final , static ",,java.io.Serializable
com.fasterxml.jackson.databind.introspect.AnnotatedParameter,Class,"* Object that represents method parameters, mostly so that associated\n * annotations can be processed conveniently. Note that many of accessors\n * cannot return meaningful values since parameters do not have stand-alone\n * JDK objects associated; so access should mostly be limited to checking\n * annotation values which are properly aggregated and included.","public , final ",com.fasterxml.jackson.databind.introspect.AnnotatedMember,
com.fasterxml.jackson.databind.introspect.MemberKey,Class,* Helper class needed to be able to efficiently access class\n * member functions ({@link Method}s and {@link Constructor}s)\n * in {@link java.util.Map}s.,"public , final ",,
com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy,Class,"* Default {@link AccessorNamingStrategy} used by Jackson: to be used either as-is,\n * or as base-class with overrides.\n *\n * @since 2.12",public ,com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy,
com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy$BaseNameValidator,Interface,* Definition of a handler API to use for checking whether given base name\n     * (remainder of accessor method name after removing prefix) is acceptable\n     * based on various rules.\n     *\n     * @since 2.12,public ,,
com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy$Provider,Class,"* Provider for {@link DefaultAccessorNamingStrategy}.\n     *<p>\n     * Default instance will use following default prefixes:\n     *<ul>\n     * <li>Setter for regular POJOs: ""set""\n     *  </li>\n     * <li>Builder-mutator: ""with""\n     *  </li>\n     * <li>Regular getter: ""get""\n     *  </li>\n     * <li>Is-getter (for Boolean values): ""is""\n     *  </li>\n     *</ul>\n     * and no additional restrictions on base names accepted (configurable for\n     * limits using {@link BaseNameValidator}), allowing names like\n     * ""get_value()"" and ""getvalue()"".","public , static ",com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy.Provider,java.io.Serializable
com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy$FirstCharBasedValidator,Class,* Simple implementation of {@link BaseNameValidator} that checks the\n     * first character and nothing else.\n     *<p>\n     * Instances are to be constructed using method\n     * {@link FirstCharBasedValidator#forFirstNameRule}.,"public , static ",,com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy.BaseNameValidator
com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy$RecordNaming,Class,"* Implementation used for supporting ""non-prefix"" naming convention of\n     * Java 14 {@code java.lang.Record} types, and in particular find default\n     * accessors for declared record fields.\n     *<p>\n     * Current / initial implementation will also recognize additional ""normal""\n     * getters (""get""-prefix) and is-getters (""is""-prefix and boolean return value)\n     * by name.","public , static ",com.fasterxml.jackson.databind.introspect.DefaultAccessorNamingStrategy,
com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector,Class,No Comment,public ,com.fasterxml.jackson.databind.introspect.CollectorBase,
com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector$MethodBuilder,Class,No Comment,"private , final , static ",,
com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,Abstract Class,"* Simple value classes that contain definitions of properties,\n * used during introspection of properties to use for\n * serialization and deserialization purposes.\n * These instances are created before actual {@link BeanProperty}\n * instances are created, i.e. they are used earlier in the process\n * flow, and are typically used to construct actual\n * {@link BeanProperty} instances.","public , abstract ",,com.fasterxml.jackson.databind.util.Named
com.fasterxml.jackson.databind.introspect.SimpleMixInResolver,Class,"* Simple implementation of {@link ClassIntrospector.MixInResolver}\n * that just uses a {@link java.util.Map} for containing mapping\n * from target to mix-in classes.\n *<p>\n * Implementation is only thread-safe after initialization (that is,\n * when underlying Map is not modified but only read).\n *\n * @since 2.6",public ,,com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;java.io.Serializable
com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase,Abstract Class,* Intermediate {@link BeanProperty} class shared by concrete readable- and\n * writable property implementations for sharing common functionality.\n *\n * @since 2.7,"public , abstract ",,com.fasterxml.jackson.databind.BeanProperty;java.io.Serializable
com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector,Abstract Class,"* Dummy, ""no-operation"" implementation of {@link AnnotationIntrospector}.\n * Can be used as is to suppress handling of annotations; or as a basis\n * for simple configuration overrides (whether based on annotations or not).","public , abstract ",com.fasterxml.jackson.databind.AnnotationIntrospector,java.io.Serializable
com.fasterxml.jackson.databind.introspect.AnnotatedMember,Abstract Class,"* Intermediate base class for annotated entities that are members of\n * a class; fields, methods and constructors. This is a superset\n * of things that can represent logical properties as it contains\n * constructors in addition to fields and methods.","public , abstract ",com.fasterxml.jackson.databind.introspect.Annotated,java.io.Serializable
com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver,Class,* Helper class that contains logic for resolving annotations to construct\n * {@link AnnotatedClass} instances.\n *\n * @since 2.9,public ,,
com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember,Class,* Placeholder used by virtual properties as placeholder for\n * underlying {@link AnnotatedMember}.\n *\n * @since 2.5,public ,com.fasterxml.jackson.databind.introspect.AnnotatedMember,java.io.Serializable
com.fasterxml.jackson.databind.introspect.AnnotationMap,Class,"* Simple helper class used to keep track of collection of\n * Jackson Annotations associated with annotatable things\n * (methods, constructors, classes).\n * Note that only Jackson-owned annotations are tracked (for now?).","public , final ",,com.fasterxml.jackson.databind.util.Annotations
com.fasterxml.jackson.databind.introspect.BasicBeanDescription,Class,"* Default {@link BeanDescription} implementation used by Jackson.\n *<p>\n * Although sub-classing is a theoretical possibility there are no known\n * use cases for that, nor is such usage tested or supported.\n * Separation from API is mostly to isolate some implementation details\n * here and keep API simple.",public ,com.fasterxml.jackson.databind.BeanDescription,
com.fasterxml.jackson.databind.introspect.ObjectIdInfo,Class,* Container object that encapsulates information usually\n * derived from {@link JsonIdentityInfo} annotation or its\n * custom alternatives,public ,,
com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder,Class,* Helper class used for aggregating information about a single\n * potential POJO property.,public ,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.Comparable
com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$WithMember,Interface,No Comment,private ,,
com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$MemberIterator,Class,* @since 2.5,"protected , static ",,java.util.Iterator
com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked,Class,* Node used for creating simple linked lists to efficiently store small sets\n     * of things.,"protected , final , static ",,
com.fasterxml.jackson.databind.introspect.CollectorBase,Class,@since 2.9,default,,
com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap,Class,"* Simple helper class used to keep track of collection of\n * {@link AnnotatedMethod}s, accessible by lookup. Lookup\n * is usually needed for augmenting and overriding annotations.","public , final ",,java.lang.Iterable
com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector,Class,* Helper class used for aggregating information about all possible\n * properties of a POJO.,public ,,
com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector,Class,No Comment,public ,com.fasterxml.jackson.databind.introspect.CollectorBase,
com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector$FieldBuilder,Class,No Comment,"private , final , static ",,
com.fasterxml.jackson.databind.introspect.AnnotatedField,Class,* Object that represents non-static (and usually non-transient/volatile)\n * fields of a class.,"public , final ",com.fasterxml.jackson.databind.introspect.AnnotatedMember,java.io.Serializable
com.fasterxml.jackson.databind.introspect.AnnotatedField$Serialization,Class,* Helper class that is used as the workaround to persist\n     * Field references. It basically just stores declaring class\n     * and field name.,"private , final , static ",,java.io.Serializable
com.fasterxml.jackson.databind.introspect.ClassIntrospector,Abstract Class,"* Helper class used to introspect features of POJO value classes\n * used with Jackson. The main use is for finding out\n * POJO construction (creator) and value access (getters, setters)\n * methods and annotations that define configuration of using\n * those methods.","public , abstract ",,
com.fasterxml.jackson.databind.introspect.ClassIntrospector$MixInResolver,Interface,"* Interface used for decoupling details of how mix-in annotation\n     * definitions are accessed (via this interface), and how\n     * they are stored (defined by classes that implement the interface)",public ,,
com.fasterxml.jackson.databind.introspect.TypeResolutionContext,Interface,* Interface that defines API used by members (like {@link AnnotatedMethod})\n * to dynamically resolve types they have.\n *\n * @since 2.7,public ,,
com.fasterxml.jackson.databind.introspect.TypeResolutionContext$Basic,Class,No Comment,"public , static ",,com.fasterxml.jackson.databind.introspect.TypeResolutionContext
com.fasterxml.jackson.databind.introspect.TypeResolutionContext$Empty,Class,"* Dummy implementation for case where there are no bindings available\n     * (for example, for static methods and fields)\n     *\n     * @since 2.11.3","public , static ",,com.fasterxml.jackson.databind.introspect.TypeResolutionContext
com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy,Abstract Class,"* API for handlers used to ""mangle"" names of ""getter"" and ""setter"" methods to\n * find implicit property names.\n *\n * @since 2.12","public , abstract ",,
com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy$Base,Class,"* Helper class that implements all abstract methods with dummy implementations.\n     * Behavior is as follows:\n     *<ul>\n     * <li>No getter or is-getter methods are recognized: relevant methods return {@code null}\n     *  <li>\n     * <li>No setter methods are recognized: relevant methods return {@code null}\n     *  <li>\n     * <li>Names of fields are returned as-is, without modifications (meaning they may be\n     * discovered if they are otherwise visible\n     *  <li>\n     * </ul>","public , static ",com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy,java.io.Serializable
com.fasterxml.jackson.databind.introspect.AccessorNamingStrategy$Provider,Abstract Class,* Interface for provider (factory) for constructing {@link AccessorNamingStrategy}\n     * for given type of deserialization target,"public , abstract , static ",,java.io.Serializable
com.fasterxml.jackson.databind.introspect.PotentialCreator,Class,"* Information about a single Creator (constructor or factory method),\n * kept during property introspection.\n *\n * @since 2.18",public ,,
com.fasterxml.jackson.databind.introspect.EnumNamingStrategyFactory,Class,* Helper class used for aggregating information about all possible\n * properties of a Enum.\n *\n * @since 2.15,public ,,
com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector,Class,* {@link AnnotationIntrospector} implementation that handles standard\n * Jackson annotations.,public ,com.fasterxml.jackson.databind.AnnotationIntrospector,java.io.Serializable
com.fasterxml.jackson.databind.introspect.BasicClassIntrospector,Class,No Comment,public ,com.fasterxml.jackson.databind.introspect.ClassIntrospector,java.io.Serializable
com.fasterxml.jackson.databind.introspect.VisibilityChecker,Interface,"* Interface for object used for determine which property elements\n * (methods, fields, constructors) can be auto-detected, with respect\n * to their visibility modifiers.\n *<p>\n * Note on type declaration: funky recursive type is necessary to\n * support builder/fluent pattern.",public ,,
com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std,Class,"* Default standard implementation is purely based on visibility\n    * modifier of given class members, and its configured minimum\n    * levels.\n    * Implemented using ""builder"" (or ""Fluent"") pattern, whereas instances\n    * are immutable, and configuration is achieved by chainable factory\n    * methods. As a result, type is declared is funky recursive generic\n    * type, to allow for sub-classing of build methods with property type\n    * co-variance.","public , static ",,com.fasterxml.jackson.databind.introspect.VisibilityChecker;java.io.Serializable
com.fasterxml.jackson.databind.introspect.MethodGenericTypeResolver,Class,* Internal utility functionality to handle type resolution for method type variables\n * based on the requested result type: this is needed to work around the problem of\n * static factory methods not being able to use class type variable bindings\n * (see [databind#2895] for more).\n *\n * @since 2.12,final ,,
com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector,Class,* Helper class used to contain details of how Creators (annotated constructors\n * and static methods) are discovered to be accessed by and via {@link AnnotatedClass}.\n *\n * @since 2.9,final ,com.fasterxml.jackson.databind.introspect.CollectorBase,
com.fasterxml.jackson.databind.JsonSerializable,Interface,"* Interface that can be implemented by objects that know how to\n * serialize themselves to JSON, using {@link JsonGenerator}\n * (and {@link SerializerProvider} if necessary).\n *<p>\n * Note that implementing this interface binds implementing object\n * closely to Jackson API, and that it is often not necessary to do\n * so -- if class is a bean, it can be serialized without\n * implementing this interface.\n *<p>\n * Note that while it is possible to just directly implement {@link JsonSerializable},\n * actual implementations are strongly recommended to instead extend\n * {@link JsonSerializable.Base}.\n *<p>\n * NOTE: in Jackson 3.x this class will be renamed as {@code JacksonSerializable}",public ,,
com.fasterxml.jackson.databind.JsonSerializable$Base,Abstract Class,"* Base class with minimal implementation, as well as couple of extension methods\n     * that core Jackson databinding makes use of.\n     * Use of this base class is strongly recommended over directly implementing\n     * {@link JsonSerializable}.\n     *\n     * @since 2.6","public , abstract , static ",,com.fasterxml.jackson.databind.JsonSerializable
com.fasterxml.jackson.databind.DeserializationContext,Abstract Class,"* Context for the process of deserialization a single root-level value.\n * Used to allow passing in configuration settings and reusable temporary\n * objects (scrap arrays, containers).\n *<p>\n * Instance life-cycle is such that a partially configured ""blueprint"" object\n * is registered with {@link ObjectMapper} (and {@link ObjectReader},\n * and when actual instance is needed for deserialization,\n * a fully configured instance will be created using a method in extended internal\n *  API of sub-class\n * ({@link com.fasterxml.jackson.databind.deser.DefaultDeserializationContext#createInstance}).\n * Each instance is guaranteed to only be used from single-threaded context;\n * instances may be reused if (and only if) no configuration has changed.\n *<p>\n * Defined as abstract class so that implementations must define methods\n * for reconfiguring blueprints and creating instances.","public , abstract ",com.fasterxml.jackson.databind.DatabindContext,java.io.Serializable
com.fasterxml.jackson.databind.Module,Abstract Class,* Simple interface for extensions that can be registered with {@link ObjectMapper}\n * to provide a well-defined set of extensions to default functionality; such as\n * support for new data types.\n *<p>\n * NOTE: in Jackson 3.x this class will be renamed as {@code JacksonModule}\n * to avoid naming conflict with JDK 9's {@code java.lang.module.Module}.,"public , abstract ",,com.fasterxml.jackson.core.Versioned
com.fasterxml.jackson.databind.Module$SetupContext,Interface,"* Interface Jackson exposes to modules for purpose of registering\n     * extended functionality.\n     * Usually implemented by {@link ObjectMapper}, but modules should\n     * NOT rely on this -- if they do require access to mapper instance,\n     * they need to call {@link SetupContext#getOwner} method.","public , static ",,
com.fasterxml.jackson.databind.JsonDeserializer,Abstract Class,"* Abstract class that defines API used by {@link ObjectMapper} (and\n * other chained {@link JsonDeserializer}s too) to deserialize Objects of\n * arbitrary types from JSON, using provided {@link JsonParser}.\n *<p>\n * Custom deserializers should usually not directly extend this class,\n * but instead extend {@link com.fasterxml.jackson.databind.deser.std.StdDeserializer}\n * (or its subtypes like {@link com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer}).\n *<p>\n * If deserializer is an aggregate one -- meaning it delegates handling of some\n * of its contents by using other deserializer(s) -- it typically also needs\n * to implement {@link com.fasterxml.jackson.databind.deser.ResolvableDeserializer},\n * which can locate dependant deserializers. This is important to allow dynamic\n * overrides of deserializers; separate call interface is needed to separate\n * resolution of dependant deserializers (which may have cyclic link back\n * to deserializer itself, directly or indirectly).\n *<p>\n * In addition, to support per-property annotations (to configure aspects\n * of deserialization on per-property basis), deserializers may want\n * to implement\n * {@link com.fasterxml.jackson.databind.deser.ContextualDeserializer},\n * which allows specialization of deserializers: call to\n * {@link com.fasterxml.jackson.databind.deser.ContextualDeserializer#createContextual}\n * is passed information on property, and can create a newly configured\n * deserializer for handling that particular property.\n *<p>\n * If both\n * {@link com.fasterxml.jackson.databind.deser.ResolvableDeserializer} and\n * {@link com.fasterxml.jackson.databind.deser.ContextualDeserializer}\n * are implemented, resolution of deserializers occurs before\n * contextualization.","public , abstract ",,com.fasterxml.jackson.databind.deser.NullValueProvider
com.fasterxml.jackson.databind.JsonDeserializer$None,Abstract Class,"* This marker class is only to be used with annotations, to\n     * indicate that <b>no deserializer is configured</b>.\n     *<p>\n     * Specifically, this class is to be used as the marker for\n     * annotation {@link com.fasterxml.jackson.databind.annotation.JsonDeserialize}","public , abstract , static ",com.fasterxml.jackson.databind.JsonDeserializer,
com.fasterxml.jackson.databind.BeanDescription,Abstract Class,"* Basic container for information gathered by {@link ClassIntrospector} to\n * help in constructing serializers and deserializers.\n * Note that the one implementation type is\n * {@link com.fasterxml.jackson.databind.introspect.BasicBeanDescription},\n * meaning that it is safe to upcast to that type.","public , abstract ",,
com.fasterxml.jackson.databind.SerializationFeature,Enum,"* Enumeration that defines simple on/off features that affect\n * the way Java objects are serialized.\n *<p>\n * Note that features can be set both through\n * {@link ObjectMapper} (as sort of defaults) and through\n * {@link ObjectWriter}.\n * In first case these defaults must follow ""config-then-use"" patterns\n * (i.e. defined once, not changed afterwards); all per-call\n * changes must be done using {@link ObjectWriter}.",public ,enum has no extends,com.fasterxml.jackson.databind.cfg.ConfigFeature
com.fasterxml.jackson.databind.deser.impl.CreatorCandidate,Class,No Comment,"public , final ",,
com.fasterxml.jackson.databind.deser.impl.CreatorCandidate$Param,Class,No Comment,"public , final , static ",,
com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer,Class,"* Simple container used for temporarily buffering a set of\n * <code>PropertyValue</code>s.\n * Using during construction of beans (and Maps) that use Creators,\n * and hence need buffering before instance (that will have properties\n * to assign values to) is constructed.",public ,,
com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators,Abstract Class,"* Container for a set of {@link ValueInstantiator}s used for certain critical\n * JDK value types, either as performance optimization for initialization time observed\n * by profiling, or due to difficulty in otherwise finding constructors.\n *\n * @since 2.10","public , abstract ",,
com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators$ArrayListInstantiator,Class,No Comment,"private , static ",com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators.JDKValueInstantiator,
com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators$LinkedListInstantiator,Class,@since 2.17 [databind#4299] Instantiators for additional container classes,"private , static ",com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators.JDKValueInstantiator,
com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators$HashSetInstantiator,Class,@since 2.17 [databind#4299] Instantiators for additional container classes,"private , static ",com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators.JDKValueInstantiator,
com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators$TreeSetInstantiator,Class,@since 2.17 [databind#4299] Instantiators for additional container classes,"private , static ",com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators.JDKValueInstantiator,
com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators$ConcurrentHashMapInstantiator,Class,@since 2.17 [databind#4299] Instantiators for additional container classes,"private , static ",com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators.JDKValueInstantiator,
com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators$HashMapInstantiator,Class,No Comment,"private , static ",com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators.JDKValueInstantiator,
com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators$LinkedHashMapInstantiator,Class,No Comment,"private , static ",com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators.JDKValueInstantiator,
com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators$TreeMapInstantiator,Class,@since 2.17 [databind#4299] Instantiators for additional container classes,"private , static ",com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators.JDKValueInstantiator,
com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators$ConstantValueInstantiator,Class,No Comment,"private , static ",com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators.JDKValueInstantiator,
com.fasterxml.jackson.databind.deser.impl.JDKValueInstantiators$JDKValueInstantiator,Abstract Class,@since 2.17,"private , abstract , static ",com.fasterxml.jackson.databind.deser.ValueInstantiator.Base,java.io.Serializable
com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap,Class,"* Helper class used for storing mapping from property name to\n * {@link SettableBeanProperty} instances.\n *<p>\n * Note that this class is used instead of generic {@link java.util.HashMap}\n * for bit of performance gain (and some memory savings): although default\n * implementation is very good for generic use cases, it can be streamlined\n * a bit for specific use case we have. Even relatively small improvements\n * matter since this is directly on the critical path during deserialization,\n * as it is done for each and every POJO property deserialized.",public ,,java.lang.Iterable;java.io.Serializable
com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty,Class,* Specialized {@link SettableBeanProperty} implementation used\n * for virtual property that represents Object Id that is used\n * for some POJO types (or properties).,"public , final ",com.fasterxml.jackson.databind.deser.SettableBeanProperty,
com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider,Class,"* Simple {@link NullValueProvider} that will simply return given\n * constant value when a null is encountered; or, with a specially\n * constructed instance (see {@link #skipper}, indicate the need\n * for special behavior of skipping property altogether (not setting\n * as anything OR throwing exception).",public ,,com.fasterxml.jackson.databind.deser.NullValueProvider;java.io.Serializable
com.fasterxml.jackson.databind.deser.impl.ManagedReferenceProperty,Class,"* Wrapper property that is used to handle managed (forward) properties\n * Basically just needs to delegate first to actual forward property, and\n * then to back property.","public , final ",com.fasterxml.jackson.databind.deser.SettableBeanProperty.Delegating,
com.fasterxml.jackson.databind.deser.impl.FieldProperty,Class,* This concrete sub-class implements property that is set\n * directly assigning to a Field.,"public , final ",com.fasterxml.jackson.databind.deser.SettableBeanProperty,
com.fasterxml.jackson.databind.deser.impl.PropertyBasedObjectIdGenerator,Class,Simple placeholder,public ,com.fasterxml.jackson.annotation.ObjectIdGenerators.PropertyGenerator,
com.fasterxml.jackson.databind.deser.impl.BeanAsArrayDeserializer,Class,"* Variant of {@link BeanDeserializer} used for handling deserialization\n * of POJOs when serialized as JSON Arrays, instead of JSON Objects.\n *\n * @since 2.1",public ,com.fasterxml.jackson.databind.deser.BeanDeserializerBase,
com.fasterxml.jackson.databind.deser.impl.ErrorThrowingDeserializer,Class,"* A deserializer that stores an {@link Error} caught during constructing\n * of the deserializer, which needs to be deferred and only during actual\n * attempt to deserialize a value of given type.\n * Note that null and empty values can be deserialized without error.\n *\n * @since 2.9 Note: prior to this version was named <code>NoClassDefFoundDeserializer</code>",public ,com.fasterxml.jackson.databind.JsonDeserializer,
com.fasterxml.jackson.databind.deser.impl.NullsAsEmptyProvider,Class,"* Simple {@link NullValueProvider} that will return ""empty value""\n * specified by {@link JsonDeserializer} provider is constructed with.",public ,,com.fasterxml.jackson.databind.deser.NullValueProvider;java.io.Serializable
com.fasterxml.jackson.databind.deser.impl.ObjectIdReader,Class,* Object that knows how to deserialize Object Ids.,public ,,java.io.Serializable
com.fasterxml.jackson.databind.deser.impl.PropertyValue,Abstract Class,* Base class for property values that need to be buffered during\n * deserialization.,"public , abstract ",,
com.fasterxml.jackson.databind.deser.impl.PropertyValue$Regular,Class,* Property value that used when assigning value to property using\n     * a setter method or direct field access.,"final , static ",com.fasterxml.jackson.databind.deser.impl.PropertyValue,
com.fasterxml.jackson.databind.deser.impl.PropertyValue$Any,Class,"* Property value type used when storing entries to be added\n     * to a POJO using ""any setter"" (method that takes name and\n     * value arguments, allowing setting multiple different\n     * properties using single method).","final , static ",com.fasterxml.jackson.databind.deser.impl.PropertyValue,
com.fasterxml.jackson.databind.deser.impl.PropertyValue$Map,Class,* Property value type used when storing entries to be added\n     * to a Map.,"final , static ",com.fasterxml.jackson.databind.deser.impl.PropertyValue,
com.fasterxml.jackson.databind.deser.impl.PropertyValue$AnyParameter,Class,"* Property value type used when storing entries to be passed\n     * to constructor of POJO using ""any-setter"".\n     *\n     * @since 2.18","final , static ",com.fasterxml.jackson.databind.deser.impl.PropertyValue,
com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler,Class,"* Helper class that is used to flatten JSON structure when using\n * ""external type id"" (see {@link com.fasterxml.jackson.annotation.JsonTypeInfo.As#EXTERNAL_PROPERTY}).\n * This is needed to store temporary state and buffer tokens, as the structure is\n * rearranged a bit so that actual type deserializer can resolve type and\n * finalize deserialization.",public ,,
com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler$Builder,Class,No Comment,"public , static ",,
com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler$ExtTypedProperty,Class,No Comment,"private , final , static ",,
com.fasterxml.jackson.databind.deser.impl.FailingDeserializer,Class,"* Special bogus ""serializer"" that will throw\n * {@link com.fasterxml.jackson.databind.exc.MismatchedInputException} if an attempt is made to deserialize\n * a value. This is used as placeholder to avoid NPEs for uninitialized\n * structured serializers or handlers.",public ,com.fasterxml.jackson.databind.deser.std.StdDeserializer,
com.fasterxml.jackson.databind.deser.impl.ReadableObjectId,Class,* Simple value container for containing information about single Object Id\n * during deserialization,public ,,
com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring,Abstract Class,No Comment,"public , static , abstract ",,
com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer,Class,"* Simple deserializer that will call configured type deserializer, passing\n * in configured data deserializer, and exposing it all as a simple\n * deserializer.\n * This is necessary when there is no ""parent"" deserializer which could handle\n * details of calling a {@link TypeDeserializer}, most commonly used with\n * root values.","public , final ",com.fasterxml.jackson.databind.JsonDeserializer,java.io.Serializable
com.fasterxml.jackson.databind.deser.impl.UnwrappedPropertyHandler,Class,"* Object that is responsible for handling acrobatics related to\n * deserializing ""unwrapped"" values; sets of properties that are\n * embedded (inlined) as properties of parent JSON object.",public ,,
com.fasterxml.jackson.databind.deser.impl.NullsFailProvider,Class,* Simple {@link NullValueProvider} that will always throw a\n * {@link InvalidNullException} when a null is encountered.,public ,,com.fasterxml.jackson.databind.deser.NullValueProvider;java.io.Serializable
com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers,Abstract Class,"* Helper class used to contain logic for deserializing ""special"" containers\n * from {@code java.util.Collections} and {@code java.util.Arrays}. This is needed\n * because they do not have usable no-arguments constructor: however, are easy enough\n * to deserialize using delegating deserializer.\n *\n * @since 2.9.4","public , abstract ",,
com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers$JavaUtilCollectionsConverter,Class,"* Implementation used for converting from various generic container\n     * types ({@link java.util.Set}, {@link java.util.List}, {@link java.util.Map})\n     * into more specific implementations accessible via {@code java.util.Collections}.","private , static ",,com.fasterxml.jackson.databind.util.Converter
com.fasterxml.jackson.databind.deser.impl.ValueInjector,Class,* Class that encapsulates details of value injection that occurs before\n * deserialization of a POJO. Details include information needed to find\n * injectable value (logical id) as well as method used for assigning\n * value (setter or field),public ,com.fasterxml.jackson.databind.BeanProperty.Std,
com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator,Class,"* Object that is used to collect arguments for non-default creator\n * (non-default-constructor, or argument-taking factory method)\n * before creator can be called.\n * Since ordering of JSON properties is not guaranteed, this may\n * require buffering of values other than ones being passed to\n * creator.","public , final ",,
com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator$CaseInsensitiveMap,Class,* Simple override of standard {@link java.util.HashMap} to support\n     * case-insensitive access to creator properties\n     *\n     * @since 2.8.5,static ,java.util.HashMap,
com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty,Class,No Comment,public ,com.fasterxml.jackson.databind.deser.SettableBeanProperty,
com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty$PropertyReferring,Class,No Comment,"public , final , static ",com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring,
com.fasterxml.jackson.databind.deser.impl.BeanAsArrayBuilderDeserializer,Class,No Comment,public ,com.fasterxml.jackson.databind.deser.BeanDeserializerBase,
com.fasterxml.jackson.databind.deser.impl.CreatorCollector,Class,"* Container class for storing information on creators (based on annotations,\n * visibility), to be able to build actual {@code ValueInstantiator} later on.",public ,,
com.fasterxml.jackson.databind.deser.impl.MergingSettableBeanProperty,Class,"* {@link SettableBeanProperty} implementation that will try to access value of\n * the property first, and if non-null value found, pass that for update\n * (using {@link com.fasterxml.jackson.databind.JsonDeserializer#deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, Object)})\n * instead of constructing a new value. This is necessary to support ""merging"" properties.\n *<p>\n * Note that there are many similarities to {@link SetterlessProperty}, which predates\n * this variant; and that one is even used in cases where there is no mutator\n * available.\n *\n * @since 2.9",public ,com.fasterxml.jackson.databind.deser.SettableBeanProperty.Delegating,
com.fasterxml.jackson.databind.deser.impl.UnsupportedTypeDeserializer,Class,"* Special bogus ""serializer"" that will throw\n * {@link com.fasterxml.jackson.databind.exc.MismatchedInputException}\n * if an attempt is made to deserialize a value.\n * This is used for ""known unknown"" types: types that we can recognize\n * but can not support easily (or support known to be added via extension\n * module).\n *<p>\n * NOTE: starting with 2.13, does allow deserialization from\n * {@code JsonToken.VALUE_EMBEDDED_OBJECT} if type matches (or is {@code null}).\n *\n * @since 2.12",public ,com.fasterxml.jackson.databind.deser.std.StdDeserializer,
com.fasterxml.jackson.databind.deser.impl.MethodProperty,Class,"* This concrete sub-class implements property that is set\n * using regular ""setter"" method.","public , final ",com.fasterxml.jackson.databind.deser.SettableBeanProperty,
com.fasterxml.jackson.databind.deser.impl.InnerClassProperty,Class,"* This sub-class is used to handle special case of value being a\n * non-static inner class. If so, we will have to use a special\n * alternative for default constructor; but otherwise can delegate\n * to regular implementation.","public , final ",com.fasterxml.jackson.databind.deser.SettableBeanProperty.Delegating,
com.fasterxml.jackson.databind.deser.impl.SetterlessProperty,Class,* This concrete sub-class implements Collection or Map property that is\n * indirectly by getting the property value and directly modifying it.,"public , final ",com.fasterxml.jackson.databind.deser.SettableBeanProperty,
com.fasterxml.jackson.databind.deser.ValueInstantiators,Interface,"* Interface for providers of {@link ValueInstantiator} instances.\n * Implemented when an object wants to provide custom value instantiators,\n * usually to support custom value types with alternate constructors, or\n * which need specified post-processing after construction but before\n * binding data.",public ,,
com.fasterxml.jackson.databind.deser.ValueInstantiators$Base,Class,"* Basic ""NOP"" implementation that can be used as the base class for custom implementations.\n     * Safer to extend (instead of implementing {@link ValueInstantiators}) in case later\n     * Jackson versions add new methods in base interface.","public , static ",,com.fasterxml.jackson.databind.deser.ValueInstantiators
com.fasterxml.jackson.databind.deser.SettableAnyProperty,Abstract Class,"* Class that represents a ""wildcard"" set method which can be used\n * to generically set values of otherwise unmapped (aka ""unknown"")\n * properties read from JSON content.\n *<p>\n * Note: starting with 2.14, is {@code abstract} class with multiple\n * concrete implementations","public , abstract ",,java.io.Serializable
com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring,Class,No Comment,"private , static ",com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring,
com.fasterxml.jackson.databind.deser.SettableAnyProperty$MethodAnyProperty,Class,* @since 2.14,"protected , static ",com.fasterxml.jackson.databind.deser.SettableAnyProperty,java.io.Serializable
com.fasterxml.jackson.databind.deser.SettableAnyProperty$MapFieldAnyProperty,Class,* @since 2.14,"protected , static ",com.fasterxml.jackson.databind.deser.SettableAnyProperty,java.io.Serializable
com.fasterxml.jackson.databind.deser.SettableAnyProperty$JsonNodeFieldAnyProperty,Class,* @since 2.14,"protected , static ",com.fasterxml.jackson.databind.deser.SettableAnyProperty,java.io.Serializable
com.fasterxml.jackson.databind.deser.SettableAnyProperty$MapParameterAnyProperty,Class,* [databind#562] Allow @JsonAnySetter on Creator constructor\n     *\n     * @since 2.18,"protected , static ",com.fasterxml.jackson.databind.deser.SettableAnyProperty,java.io.Serializable
com.fasterxml.jackson.databind.deser.SettableAnyProperty$JsonNodeParameterAnyProperty,Class,* [databind#562] Allow @JsonAnySetter on Creator constructor\n     *\n     * @since 2.18,"protected , static ",com.fasterxml.jackson.databind.deser.SettableAnyProperty,java.io.Serializable
com.fasterxml.jackson.databind.deser.UnresolvedId,Class,"* Helper class for {@link UnresolvedForwardReference}, to contain information about unresolved ids.\n *\n * @author pgelinas",public ,,
com.fasterxml.jackson.databind.deser.DeserializationProblemHandler,Abstract Class,"* This is the class that can be registered (via\n * {@link DeserializationConfig} object owner by\n * {@link ObjectMapper}) to get called when a potentially\n * recoverable problem is encountered during deserialization\n * process. Handlers can try to resolve the problem, throw\n * an exception or just skip the content.\n *<p>\n * Default implementations for all methods implemented minimal\n * ""do nothing"" functionality, which is roughly equivalent to\n * not having a registered listener at all. This allows for\n * only implemented handler methods one is interested in, without\n * handling other cases.\n *<p>\n * NOTE: it is typically <b>NOT</b> acceptable to simply do nothing,\n * because this will result in unprocessed tokens being left in\n * token stream (read via {@link JsonParser}, in case a structured\n * (JSON Object or JSON Array) value is being pointed to by parser.","public , abstract ",,
com.fasterxml.jackson.databind.deser.CreatorProperty,Class,"* This concrete sub-class implements property that is passed\n * via Creator (constructor or static factory method).\n * It is not a full-featured implementation in that its set method\n * should usually not be called for primary mutation -- instead, value must separately passed --\n * but some aspects are still needed (specifically, injection).\n *<p>\n * Note on injectable values: unlike with other mutators, where\n * deserializer and injecting are separate, here we treat the two as related\n * things. This is necessary to add proper priority, as well as to simplify\n * coordination.",public ,com.fasterxml.jackson.databind.deser.SettableBeanProperty,
com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer,Class,"* Class that handles deserialization using a separate\n * Builder class, which is used for data binding and\n * produces actual deserialized value at the end\n * of data binding.\n *<p>\n * Note on implementation: much of code has been copied from\n * {@link BeanDeserializer}; there may be opportunities to\n * refactor this in future.",public ,com.fasterxml.jackson.databind.deser.BeanDeserializerBase,
com.fasterxml.jackson.databind.deser.ContextualDeserializer,Interface,"* Add-on interface that {@link JsonDeserializer}s can implement to get a callback\n * that can be used to create contextual (context-dependent) instances of\n * deserializer to use for  handling properties of supported type.\n * This can be useful\n * for deserializers that can be configured by annotations, or should otherwise\n * have differing behavior depending on what kind of property is being deserialized.\n *<p>\n * Note that in cases where deserializer needs both contextualization and\n * resolution -- that is, implements both this interface and {@link ResolvableDeserializer}\n * -- resolution via {@link ResolvableDeserializer} occurs first, and contextual\n * resolution (via this interface) later on.",public ,,
com.fasterxml.jackson.databind.deser.Deserializers,Interface,"* Interface that defines API for simple extensions that can provide additional deserializers\n * for various types. Access is by a single callback method; instance is to either return\n * a configured {@link JsonDeserializer} for specified type, or null to indicate that it\n * does not support handling of the type. In latter case, further calls can be made\n * for other providers; in former case returned deserializer is used for handling of\n * instances of specified type.\n *<p>\n * It is <b>strongly recommended</b> that implementations always extend {@link Deserializers.Base}\n * and NOT just implement {@link Deserializers}.",public ,,
com.fasterxml.jackson.databind.deser.Deserializers$Base,Abstract Class,"* Basic {@link Deserializers} implementation that implements all methods but provides\n     * no deserializers. Its main purpose is to serve as a base class so that\n     * sub-classes only need to override methods they need, as most of the time some\n     * of methods are not needed (especially enumeration and array deserializers are\n     * very rarely overridden).","public , abstract , static ",,com.fasterxml.jackson.databind.deser.Deserializers
com.fasterxml.jackson.databind.deser.BeanDeserializerModifier,Abstract Class,"* Abstract class that defines API for objects that can be registered\n * to participate in constructing {@link JsonDeserializer} instances\n * (via {@link DeserializerFactory}).\n * This is typically done by modules that want alter some aspects of deserialization\n * process; and is preferable to sub-classing of {@link BeanDeserializerFactory}.\n *<p>\n * Note that Jackson 2.2 adds more methods for customization; with earlier versions\n * only {@link BeanDeserializer} instances could be modified, but with 2.2 all types\n * of deserializers can be changed.\n *<p>\n * Sequence in which callback methods are called for {@link BeanDeserializer} is:\n * <ol>\n *  <li>{@link #updateProperties} is called once all property definitions are\n *    collected, and initial filtering (by ignorable type and explicit ignoral-by-bean)\n *    has been performed.\n *   </li>\n *  <li>{@link #updateBuilder} is called once all initial pieces for building deserializer\n *    have been collected\n *   </li>\n *  <li>{@link #modifyDeserializer} is called after deserializer has been built\n *    by {@link BeanDeserializerBuilder}\n *    but before it is returned to be used\n *   </li>\n * </ol>\n *<p>\n * For other types of deserializers, methods called depend on type of values for\n * which deserializer is being constructed; and only a single method is called\n * since the process does not involve builders (unlike that of {@link BeanDeserializer}.\n *<p>\n * Default method implementations are ""no-op""s, meaning that methods are implemented\n * but have no effect; this is mostly so that new methods can be added in later\n * versions.\n *<p>\n * NOTE: in Jackson 3.x this class will be renamed as {@code ValueDeserializerModifier}","public , abstract ",,java.io.Serializable
com.fasterxml.jackson.databind.deser.AbstractDeserializer,Class,"* Deserializer only used for abstract types used as placeholders during polymorphic\n * type handling deserialization. If so, there is no real deserializer associated\n * with nominal type, just {@link TypeDeserializer}; and any calls that do not\n * pass such resolver will result in an error.",public ,com.fasterxml.jackson.databind.JsonDeserializer,com.fasterxml.jackson.databind.deser.ContextualDeserializer;java.io.Serializable
com.fasterxml.jackson.databind.deser.NullValueProvider,Interface,"* Helper interface implemented by classes that are to be used as\n * null providers during deserialization. Most importantly implemented by\n * {@link com.fasterxml.jackson.databind.JsonDeserializer} (as a mix-in\n * interface), but also by converters used to support more configurable\n * null replacement.\n *\n * @since 2.9",public ,,
com.fasterxml.jackson.databind.deser.BeanDeserializer,Class,"* Deserializer class that can deserialize instances of\n * arbitrary bean objects, usually from JSON Object structs,",public ,com.fasterxml.jackson.databind.deser.BeanDeserializerBase,java.io.Serializable
com.fasterxml.jackson.databind.deser.BeanDeserializer$BeanReferring,Class,* @since 2.8,static ,com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring,
com.fasterxml.jackson.databind.deser.UnresolvedForwardReference,Class,* Exception thrown during deserialization when there are object id that can't\n * be resolved.\n *\n * @author pgelinas,public ,com.fasterxml.jackson.databind.JsonMappingException,
com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer,Class,* Deserializer that builds on basic {@link BeanDeserializer} but\n * override some aspects like instance construction.,public ,com.fasterxml.jackson.databind.deser.BeanDeserializer,
com.fasterxml.jackson.databind.deser.std.StackTraceElementDeserializer,Class,No Comment,public ,com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer,
com.fasterxml.jackson.databind.deser.std.StackTraceElementDeserializer$Adapter,Class,* Intermediate class used both for convenience of binding and\n     * to support {@code PropertyNamingStrategy}.\n     *\n     * @since 2.14,"public , final , static ",,
com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer,Class,* Separate implementation for serializing String arrays (instead of\n * using {@link ObjectArrayDeserializer}.\n * Used if (and only if) no custom value deserializers are used.,"public , final ",com.fasterxml.jackson.databind.deser.std.StdDeserializer,com.fasterxml.jackson.databind.deser.ContextualDeserializer
com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers,Abstract Class,"* Container for deserializers used for instantiating ""primitive arrays"",\n * arrays that contain non-object java primitive types.","public , abstract ",com.fasterxml.jackson.databind.deser.std.StdDeserializer,com.fasterxml.jackson.databind.deser.ContextualDeserializer
com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser,Class,No Comment,"final , static ",com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers,
com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$BooleanDeser,Class,No Comment,"final , static ",com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers,
com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$ByteDeser,Class,* When dealing with byte arrays we have one more alternative (compared\n     * to int/long/shorts): base64 encoded data.,"final , static ",com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers,
com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$ShortDeser,Class,No Comment,"final , static ",com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers,
com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$IntDeser,Class,No Comment,"final , static ",com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers,
com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$LongDeser,Class,No Comment,"final , static ",com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers,
com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser,Class,No Comment,"final , static ",com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers,
com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$DoubleDeser,Class,No Comment,"final , static ",com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers,
com.fasterxml.jackson.databind.deser.std.MapEntryDeserializer,Class,"* Basic serializer that can take JSON ""Object"" structure and\n * construct a {@link java.util.Map} instance, with typed contents.\n *<p>\n * Note: for untyped content (one indicated by passing Object.class\n * as the type), {@link UntypedObjectDeserializer} is used instead.\n * It can also construct {@link java.util.Map}s, but not with specific\n * POJO types, only other containers and primitives/wrappers.",public ,com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase,com.fasterxml.jackson.databind.deser.ContextualDeserializer
com.fasterxml.jackson.databind.deser.std.NumberDeserializers,Class,"* Container class for deserializers that handle core JDK primitive\n * (and matching wrapper) types, as well as standard ""big"" numeric types.\n * Note that this includes types such as {@link java.lang.Boolean}\n * and {@link java.lang.Character} which are not strictly numeric,\n * but are part of primitive/wrapper types.",public ,,
com.fasterxml.jackson.databind.deser.std.NumberDeserializers$BooleanDeserializer,Class,No Comment,"public , final , static ",com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer,
com.fasterxml.jackson.databind.deser.std.NumberDeserializers$ByteDeserializer,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer,
com.fasterxml.jackson.databind.deser.std.NumberDeserializers$ShortDeserializer,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer,
com.fasterxml.jackson.databind.deser.std.NumberDeserializers$CharacterDeserializer,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer,
com.fasterxml.jackson.databind.deser.std.NumberDeserializers$IntegerDeserializer,Class,No Comment,"public , final , static ",com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer,
com.fasterxml.jackson.databind.deser.std.NumberDeserializers$LongDeserializer,Class,No Comment,"public , final , static ",com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer,
com.fasterxml.jackson.databind.deser.std.NumberDeserializers$FloatDeserializer,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer,
com.fasterxml.jackson.databind.deser.std.NumberDeserializers$DoubleDeserializer,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer,
com.fasterxml.jackson.databind.deser.std.NumberDeserializers$NumberDeserializer,Class,"* For type <code>Number.class</code>, we can just rely on type\n     * mappings that plain {@link JsonParser#getNumberValue} returns.\n     *<p>\n     * There is one additional complication: some numeric\n     * types (specifically, int/Integer and double/Double) are ""non-typed"";\n     * meaning that they will NEVER be output with type information.\n     * But other numeric types may need such type information.\n     * This is why {@link #deserializeWithType} must be overridden.","public , static ",com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer,
com.fasterxml.jackson.databind.deser.std.NumberDeserializers$BigIntegerDeserializer,Class,"* This is bit trickier to implement efficiently, while avoiding\n     * overflow problems.","public , static ",com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer,
com.fasterxml.jackson.databind.deser.std.NumberDeserializers$BigDecimalDeserializer,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer,
com.fasterxml.jackson.databind.deser.std.NumberDeserializers$PrimitiveOrWrapperDeserializer,Abstract Class,No Comment,"protected , abstract , static ",com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer,
com.fasterxml.jackson.databind.deser.std.ObjectArrayDeserializer,Class,* Serializer that can serialize non-primitive arrays.,public ,com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase,com.fasterxml.jackson.databind.deser.ContextualDeserializer
com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers,Class,"* Helper class used to contain simple/well-known key deserializers.\n * Following kinds of Objects can be handled currently:\n *<ul>\n * <li>Primitive wrappers (Boolean, Byte, Char, Short, Integer, Float, Long, Double)</li>\n * <li>Enums (usually not needed, since EnumMap doesn't call us)</li>\n * <li>{@link java.util.Date}</li>\n * <li>{@link java.util.Calendar}</li>\n * <li>{@link java.util.UUID}</li>\n * <li>{@link java.util.Locale}</li>\n * <li>Anything with constructor that takes a single String arg\n *   (if not explicitly @JsonIgnore'd)</li>\n * <li>Anything with {@code static T valueOf(String)} factory method\n *   (if not explicitly @JsonIgnore'd)</li>\n *</ul>",public ,,com.fasterxml.jackson.databind.deser.KeyDeserializers;java.io.Serializable
com.fasterxml.jackson.databind.deser.std.StdNodeBasedDeserializer,Abstract Class,"* Convenience deserializer that may be used to deserialize values given an\n * intermediate tree representation ({@link JsonNode}).\n * Note that this is a slightly simplified alternative to {@link StdDelegatingDeserializer}).\n *\n * @param <T> Target type of this deserializer; that is, type of values that\n *   input data is deserialized into.\n *\n * @since 2.5","public , abstract ",com.fasterxml.jackson.databind.deser.std.StdDeserializer,com.fasterxml.jackson.databind.deser.ResolvableDeserializer
com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer,Class,"* Deserializer implementation that is used if it is necessary to bind content of\n * ""unknown"" type; something declared as basic {@link java.lang.Object}\n * (either explicitly, or due to type erasure).\n * If so, ""natural"" mapping is used to convert JSON values to their natural\n * Java object matches: JSON arrays to Java {@link java.util.List}s (or, if configured,\n * Object[]), JSON objects to {@link java.util.Map}s, numbers to\n * {@link java.lang.Number}s, booleans to {@link java.lang.Boolean}s and\n * strings to {@link java.lang.String} (and nulls to nulls).",public ,com.fasterxml.jackson.databind.deser.std.StdDeserializer,com.fasterxml.jackson.databind.deser.ResolvableDeserializer;com.fasterxml.jackson.databind.deser.ContextualDeserializer
com.fasterxml.jackson.databind.deser.std.AtomicIntegerDeserializer,Class,@since 2.12,public ,com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer,
com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializerNR,Class,* @since 2.14,final ,com.fasterxml.jackson.databind.deser.std.StdDeserializer,
com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializerNR$Scope,Class,* Helper class used for building Maps and Lists/Arrays.,"private , final , static ",,
com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer,Class,"* Deserializer that can build instances of {@link JsonNode} from any\n * JSON content, using appropriate {@link JsonNode} type.\n *<p>\n * Rewritten in Jackson 2.13 to avoid recursion and allow handling of\n * very deeply nested structures.",public ,com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer,
com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer$ObjectDeserializer,Class,* Implementation used when declared type is specifically {@link ObjectNode}.,"final , static ",com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer,
com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer$ArrayDeserializer,Class,* Implementation used when declared type is specifically {@link ArrayNode}.,"final , static ",com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer,
com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer,Abstract Class,* Base class for all actual {@link JsonNode} deserializer implementations.\n *<p>\n * Starting with Jackson 2.13 uses iteration instead of recursion: this allows\n * handling of very deeply nested input structures.,abstract ,com.fasterxml.jackson.databind.deser.std.StdDeserializer,com.fasterxml.jackson.databind.deser.ContextualDeserializer
com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer$ContainerStack,Class,* Optimized variant similar in functionality to (a subset of)\n     * {@link java.util.ArrayDeque}; used to hold enclosing Array/Object\n     * nodes during recursion-as-iteration.,"final , static ",,
com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer,Abstract Class,"* Base class for deserializers that handle types that are serialized\n * as JSON scalars (non-structured, i.e. non-Object, non-Array, values).","public , abstract ",com.fasterxml.jackson.databind.deser.std.StdDeserializer,
com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer,Class,* Bogus deserializer that will simply skip all content there is to map\n * and returns Java null reference.\n *\n * @since 2.2,public ,com.fasterxml.jackson.databind.deser.std.StdDeserializer,
com.fasterxml.jackson.databind.deser.std.CollectionDeserializer,Class,"* Basic serializer that can take JSON ""Array"" structure and\n * construct a {@link java.util.Collection} instance, with typed contents.\n *<p>\n * Note: for untyped content (one indicated by passing Object.class\n * as the type), {@link UntypedObjectDeserializer} is used instead.\n * It can also construct {@link java.util.List}s, but not with specific\n * POJO types, only other containers and primitives/wrappers.",public ,com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase,com.fasterxml.jackson.databind.deser.ContextualDeserializer
com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferringAccumulator,Class,* Helper class for dealing with Object Id references for values contained in\n     * collections being deserialized.,"public , static ",,
com.fasterxml.jackson.databind.deser.std.CollectionDeserializer$CollectionReferring,Class,"* Helper class to maintain processing order of value. The resolved\n     * object associated with {@code #id} parameter from {@link #handleResolvedForwardReference(Object, Object)} \n     * comes before the values in {@link #next}.","private , final , static ",com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring,
com.fasterxml.jackson.databind.deser.std.EnumDeserializer,Class,* Deserializer class that can deserialize instances of\n * specified Enum class from Strings and Integers.,public ,com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer,com.fasterxml.jackson.databind.deser.ContextualDeserializer
com.fasterxml.jackson.databind.deser.std.AtomicLongDeserializer,Class,@since 2.12,public ,com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer,
com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer,Class,"* Standard deserializer for {@link EnumSet}s.\n * <p>\n * Note: casting within this class is all messed up -- just could not figure out a way\n * to properly deal with recursive definition of ""EnumSet&lt;K extends Enum&lt;K&gt;, V&gt;",public ,com.fasterxml.jackson.databind.deser.std.StdDeserializer,com.fasterxml.jackson.databind.deser.ContextualDeserializer
com.fasterxml.jackson.databind.deser.std.ByteBufferDeserializer,Class,No Comment,public ,com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer,
com.fasterxml.jackson.databind.deser.std.UUIDDeserializer,Class,No Comment,public ,com.fasterxml.jackson.databind.deser.std.FromStringDeserializer,
com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer,Class,"* Default {@link KeyDeserializer} implementation used for most {@link java.util.Map}\n * types Jackson supports.\n * Implemented as ""chameleon"" (or swiss pocket knife) class; not particularly elegant,\n * but helps reduce number of classes and jar size (class metadata adds significant\n * per-class overhead; much more than bytecode).",public ,com.fasterxml.jackson.databind.KeyDeserializer,java.io.Serializable
com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringKD,Class,No Comment,"final , static ",com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer,
com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$DelegatingKD,Class,"* Key deserializer that wraps a ""regular"" deserializer (but one\n     * that must recognize FIELD_NAMEs as text!) to reuse existing\n     * handlers as key handlers.","final , static ",com.fasterxml.jackson.databind.KeyDeserializer,java.io.Serializable
com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$EnumKD,Class,No Comment,"final , static ",com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer,
com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringCtorKeyDeserializer,Class,* Key deserializer that calls a single-string-arg constructor\n     * to instantiate desired key type.,"final , static ",com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer,
com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer,Class,* Key deserializer that calls a static no-args factory method\n     * to instantiate desired key type.,"final , static ",com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer,
com.fasterxml.jackson.databind.deser.std.StringDeserializer,Class,No Comment,public ,com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer,
com.fasterxml.jackson.databind.deser.std.AtomicBooleanDeserializer,Class,No Comment,public ,com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer,
com.fasterxml.jackson.databind.deser.std.ReferenceTypeDeserializer,Abstract Class,"* Base deserializer implementation for properties {@link ReferenceType} values.\n * Implements most of functionality, only leaving couple of abstract\n * methods for sub-classes to implement\n *\n * @since 2.8","public , abstract ",com.fasterxml.jackson.databind.deser.std.StdDeserializer,com.fasterxml.jackson.databind.deser.ContextualDeserializer
com.fasterxml.jackson.databind.deser.std.MapDeserializer,Class,"* Basic deserializer that can take JSON ""Object"" structure and\n * construct a {@link java.util.Map} instance, with typed contents.\n *<p>\n * Note: for untyped content (one indicated by passing Object.class\n * as the type), {@link UntypedObjectDeserializer} is used instead.\n * It can also construct {@link java.util.Map}s, but not with specific\n * POJO types, only other containers and primitives/wrappers.",public ,com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase,com.fasterxml.jackson.databind.deser.ContextualDeserializer;com.fasterxml.jackson.databind.deser.ResolvableDeserializer
com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator,Class,No Comment,"private , final , static ",,
com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferring,Class,* Helper class to maintain processing order of value.\n     * The resolved object associated with {@link #key} comes before the values in\n     * {@link #next}.,static ,com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring,
com.fasterxml.jackson.databind.deser.std.JdkDeserializers,Class,* Container class that contains serializers for JDK types that\n * require special handling for some reason.,public ,,
com.fasterxml.jackson.databind.deser.std.StdDeserializer,Abstract Class,"* Base class for common deserializers. Contains shared\n * base functionality for dealing with primitive values, such\n * as (re)parsing from String.","public , abstract ",com.fasterxml.jackson.databind.JsonDeserializer,java.io.Serializable;com.fasterxml.jackson.databind.deser.ValueInstantiator.Gettable
com.fasterxml.jackson.databind.deser.std.DelegatingDeserializer,Abstract Class,* Base class that simplifies implementations of {@link JsonDeserializer}s\n * that mostly delegate functionality to another deserializer implementation\n * (possibly forming a chaining of deserializers delegating functionality\n * in some cases)\n *\n * @since 2.1,"public , abstract ",com.fasterxml.jackson.databind.deser.std.StdDeserializer,com.fasterxml.jackson.databind.deser.ContextualDeserializer;com.fasterxml.jackson.databind.deser.ResolvableDeserializer
com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer,Class,"* Deserializer implementation where given Java type is first deserialized\n * by a standard Jackson deserializer into a delegate type; and then\n * this delegate type is converted using a configured\n * {@link Converter} into desired target type.\n * Common delegate types to use are {@link java.util.Map}\n * and {@link com.fasterxml.jackson.databind.JsonNode}.\n *<p>\n * Note that although types (delegate, target) may be related, they must not be same; trying\n * to do this will result in an exception.\n *<p>\n * Since 2.5 There is {@link StdNodeBasedDeserializer} that is a simplified version\n * for cases where intermediate type is {@link JsonNode}\n *<p>\n * NOTE: in Jackson 3.0 this class will be renamed as {@code StdConvertingDeserializer}.\n *\n * @param <T> Target type to convert to, from delegate type\n *\n * @since 2.1\n *\n * @see StdNodeBasedDeserializer\n * @see Converter",public ,com.fasterxml.jackson.databind.deser.std.StdDeserializer,com.fasterxml.jackson.databind.deser.ContextualDeserializer;com.fasterxml.jackson.databind.deser.ResolvableDeserializer
com.fasterxml.jackson.databind.deser.std.ArrayBlockingQueueDeserializer,Class,* We need a custom deserializer both because {@link ArrayBlockingQueue} has no\n * default constructor AND because it has size limit used for constructing\n * underlying storage automatically.,public ,com.fasterxml.jackson.databind.deser.std.CollectionDeserializer,
com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase,Abstract Class,* Intermediate base deserializer class that adds more shared accessor\n * so that other classes can access information about contained (value) types,"public , abstract ",com.fasterxml.jackson.databind.deser.std.StdDeserializer,com.fasterxml.jackson.databind.deser.ValueInstantiator.Gettable
com.fasterxml.jackson.databind.deser.std.EnumMapDeserializer,Class,"* Deserializer for {@link EnumMap} values.\n * <p>\n * Note: casting within this class is all messed up -- just could not figure out a way\n * to properly deal with recursive definition of {@code EnumMap<K extends Enum<K>, V>}",public ,com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase,com.fasterxml.jackson.databind.deser.ContextualDeserializer;com.fasterxml.jackson.databind.deser.ResolvableDeserializer
com.fasterxml.jackson.databind.deser.std.TokenBufferDeserializer,Class,"* We also want to directly support deserialization of {@link TokenBuffer}.\n *<p>\n * Note that we use scalar deserializer base just because we claim\n * to be of scalar for type information inclusion purposes; actual\n * underlying content can be of any (Object, Array, scalar) type.\n *<p>\n * Since 2.3, another important thing is that possible native ids\n * (type id, object id) should be properly copied even when converting\n * with {@link TokenBuffer}. Such ids are supported if (and only if!)\n * source {@link JsonParser} supports them.",public ,com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer,
com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer,Class,* Specifically optimized version for {@link java.util.Collection}s\n * that contain String values; reason is that this is a very common\n * type and we can make use of the fact that Strings are final.,"public , final ",com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase,com.fasterxml.jackson.databind.deser.ContextualDeserializer
com.fasterxml.jackson.databind.deser.std.FromStringDeserializer,Abstract Class,"* Base class for simple deserializers that serialize values from String\n * representation: this includes JSON Strings and other Scalar values that\n * can be coerced into text, like Numbers and Booleans).\n * Simple JSON String values are trimmed using {@link java.lang.String#trim}.\n * Partial deserializer implementation will try to first access current token as\n * a String, calls {@code _deserialize(String,DeserializationContext)} and\n * returns return value.\n * If this does not work (current token not a simple scalar type), attempts\n * are made so that:\n *<ul>\n * <li>Embedded values ({@link JsonToken#VALUE_EMBEDDED_OBJECT}) are returned as-is\n *    if they are of compatible type\n *  </li>\n * <li>Arrays may be ""unwrapped"" if (and only if) {@link DeserializationFeature#UNWRAP_SINGLE_VALUE_ARRAYS}\n *    is enabled, and array contains just a single scalar value that can be deserialized\n *    (for example, JSON Array with single JSON String element).\n *  </li>\n * </ul>\n *<p>\n * Special handling includes:\n * <ul>\n * <li>Null values ({@link JsonToken#VALUE_NULL}) are handled by returning value\n *   returned by {@link JsonDeserializer#getNullValue(DeserializationContext)}: default\n *   implementation simply returns Java `null` but this may be overridden.\n *  </li>\n * <li>Empty String (after trimming) will result in {@link #_deserializeFromEmptyString}\n *   getting called, and return value being returned as deserialization: default implementation\n *   simply returns `null`.\n *  </li>\n * </ul>","public , abstract ",com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer,
com.fasterxml.jackson.databind.deser.std.FromStringDeserializer$Std,Class,"* ""Chameleon"" deserializer that works on simple types that are deserialized\n     * from a simple String.\n     *\n     * @since 2.4","public , static ",com.fasterxml.jackson.databind.deser.std.FromStringDeserializer,
com.fasterxml.jackson.databind.deser.std.FromStringDeserializer$StringBuilderDeserializer,Class,@since 2.12 to simplify logic a bit: should not use coercions when reading,static ,com.fasterxml.jackson.databind.deser.std.FromStringDeserializer,
com.fasterxml.jackson.databind.deser.std.FromStringDeserializer$StringBufferDeserializer,Class,@since 2.13.3: duplicated code but for only 2 impls base class seems unnecessary,static ,com.fasterxml.jackson.databind.deser.std.FromStringDeserializer,
com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator,Class,"* For {@link JsonLocation}, we should be able to just implement\n * {@link ValueInstantiator} (not that explicit one would be very\n * hard but...)",public ,com.fasterxml.jackson.databind.deser.ValueInstantiator.Base,
com.fasterxml.jackson.databind.deser.std.StdValueInstantiator,Class,"* Default {@link ValueInstantiator} implementation, which supports\n * Creator methods that can be indicated by standard Jackson\n * annotations.",public ,com.fasterxml.jackson.databind.deser.ValueInstantiator,java.io.Serializable
com.fasterxml.jackson.databind.deser.std.DateDeserializers,Class,* Container class for core JDK date/time type deserializers.,public ,,
com.fasterxml.jackson.databind.deser.std.DateDeserializers$CalendarDeserializer,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer,
com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateDeserializer,Class,* Simple deserializer for handling {@link java.util.Date} values.\n     *<p>\n     * One way to customize Date formats accepted is to override method\n     * {@link DeserializationContext#parseDate} that this basic\n     * deserializer calls.,"public , static ",com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer,
com.fasterxml.jackson.databind.deser.std.DateDeserializers$SqlDateDeserializer,Class,"* Compared to plain old {@link java.util.Date}, SQL version is easier\n     * to deal with: mostly because it is more limited.","public , static ",com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer,
com.fasterxml.jackson.databind.deser.std.DateDeserializers$TimestampDeserializer,Class,* Simple deserializer for handling {@link java.sql.Timestamp} values.\n     *<p>\n     * One way to customize Timestamp formats accepted is to override method\n     * {@link DeserializationContext#parseDate} that this basic\n     * deserializer calls.,"public , static ",com.fasterxml.jackson.databind.deser.std.DateDeserializers.DateBasedDeserializer,
com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateBasedDeserializer,Abstract Class,No Comment,"protected , abstract , static ",com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer,com.fasterxml.jackson.databind.deser.ContextualDeserializer
com.fasterxml.jackson.databind.deser.std.AtomicReferenceDeserializer,Class,No Comment,public ,com.fasterxml.jackson.databind.deser.std.ReferenceTypeDeserializer,
com.fasterxml.jackson.databind.deser.std.ThreadGroupDeserializer,Class,"* Deserializer for the {@link java.lang.ThreadGroup} class: due to limited access,\n * will only try to extract {@code ""name""} property and ignores everything else.\n * This to match automatic serialization by Jackson which does write out\n * all accessible properties.\n *\n * @since 2.19",public ,com.fasterxml.jackson.databind.deser.std.StdNodeBasedDeserializer,
com.fasterxml.jackson.databind.deser.std.FactoryBasedEnumDeserializer,Class,* Deserializer that uses a single-String static factory method\n * for locating Enum values by String id.\n *\n * @since 2.8 (as stand-alone class; was static inner class of {@link EnumDeserializer},default,com.fasterxml.jackson.databind.deser.std.StdDeserializer,com.fasterxml.jackson.databind.deser.ContextualDeserializer
com.fasterxml.jackson.databind.deser.BeanDeserializerBase,Abstract Class,* Base class for <code>BeanDeserializer</code>.,"public , abstract ",com.fasterxml.jackson.databind.deser.std.StdDeserializer,com.fasterxml.jackson.databind.deser.ContextualDeserializer;com.fasterxml.jackson.databind.deser.ResolvableDeserializer;com.fasterxml.jackson.databind.deser.ValueInstantiator.Gettable;java.io.Serializable
com.fasterxml.jackson.databind.deser.ResolvableDeserializer,Interface,"* Interface used to indicate deserializers that want to do post-processing\n * after construction but before being returned to caller (and possibly cached)\n * and used.\n * This is typically used to resolve references\n * to other contained types; for example, bean deserializers use this callback\n * to locate deserializers for contained field types.\n * Main reason for using a callback (instead of trying to resolve dependencies\n * immediately) is to make it possible to cleanly handle self-references;\n * otherwise it would be easy to get into infinite recursion.\n *<p>\n * Note that {@link #resolve} method does NOT allow returning anything\n * (specifically, a new deserializer instance): reason for this is that\n * allowing this would not work with proper handling of cyclic dependencies,\n * which are resolved by two-phase processing, where initially constructed\n * deserializer is added as known deserializer, and only after this\n * resolution is done. Resolution is the part that results in lookups for\n * dependant deserializers, which may include handling references to\n * deserializer itself.\n *<p>\n * Note that in cases where deserializer needs both contextualization and\n * resolution -- that is, implements both this interface and {@link ContextualDeserializer}\n * -- resolution via this interface occurs first, and contextual\n * resolution (using {@link ContextualDeserializer}) later on.",public ,,
com.fasterxml.jackson.databind.deser.BasicDeserializerFactory,Abstract Class,"* Abstract factory base class that can provide deserializers for standard\n * JDK classes, including collection classes and simple heuristics for\n * ""upcasting"" common collection interface types\n * (such as {@link java.util.Collection}).\n *<p>\n * Since all simple deserializers are eagerly instantiated, and there is\n * no additional introspection or customizability of these types,\n * this factory is stateless.","public , abstract ",com.fasterxml.jackson.databind.deser.DeserializerFactory,java.io.Serializable
com.fasterxml.jackson.databind.deser.BasicDeserializerFactory$ContainerDefaultMappings,Class,* Helper class to contain default mappings for abstract JDK {@link java.util.Collection}\n     * and {@link java.util.Map} types. Separated out here to defer cost of creating lookups\n     * until mappings are actually needed.\n     *\n     * @since 2.10,"protected , static ",,
com.fasterxml.jackson.databind.deser.DefaultDeserializationContext,Abstract Class,"* Complete {@link DeserializationContext} implementation that adds\n * extended API for {@link ObjectMapper} (and {@link ObjectReader})\n * to call, as well as implements certain parts that base class\n * has left abstract.\n * The remaining abstract methods ({@link #createInstance}, {@link #with})\n * are left so that custom implementations will properly implement them\n * to return intended subtype.","public , abstract ",com.fasterxml.jackson.databind.DeserializationContext,java.io.Serializable
com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl,Class,* Actual full concrete implementation,"public , final , static ",com.fasterxml.jackson.databind.deser.DefaultDeserializationContext,
com.fasterxml.jackson.databind.deser.KeyDeserializers,Interface,"* Interface that defines API for simple extensions that can provide additional deserializers\n * for deserializer Map keys of various types, from JSON property names.\n * Access is by a single callback method; instance is to either return\n * a configured {@link KeyDeserializer} for specified type, or null to indicate that it\n * does not support handling of the type. In latter case, further calls can be made\n * for other providers; in former case returned key deserializer is used for handling of\n * key instances of specified type.",public ,,
com.fasterxml.jackson.databind.deser.BeanDeserializerFactory,Class,"* Concrete deserializer factory class that adds full Bean deserializer\n * construction logic using class introspection.\n * Note that factories specifically do not implement any form of caching:\n * aside from configuration they are stateless; caching is implemented\n * by other components.\n *<p>\n * Instances of this class are fully immutable as all configuration is\n * done by using ""fluent factories"" (methods that construct new factory\n * instances with different configuration, instead of modifying instance).",public ,com.fasterxml.jackson.databind.deser.BasicDeserializerFactory,java.io.Serializable
com.fasterxml.jackson.databind.deser.SettableBeanProperty,Abstract Class,"* Base class for deserializable properties of a bean: contains\n * both type and name definitions, and reflection-based set functionality.\n * Concrete sub-classes implement details, so that field- and\n * setter-backed properties, as well as a few more esoteric variations,\n * can be handled.","public , abstract ",com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase,java.io.Serializable
com.fasterxml.jackson.databind.deser.SettableBeanProperty$Delegating,Abstract Class,"* Helper class that is designed to both make it easier to sub-class\n     * delegating subtypes and to reduce likelihood of breakage when\n     * new methods are added.\n     *<p>\n     * Class was specifically added to help with {@code Afterburner}\n     * module, but its use is not limited to only support it.\n     *\n     * @since 2.9","public , static , abstract ",com.fasterxml.jackson.databind.deser.SettableBeanProperty,
com.fasterxml.jackson.databind.deser.DeserializerFactory,Abstract Class,"* Abstract class that defines API used by {@link DeserializationContext}\n * to construct actual\n * {@link JsonDeserializer} instances (which are then cached by\n * context and/or dedicated cache).\n *<p>\n * Since there are multiple broad categories of deserializers, there are\n * multiple factory methods:\n *<ul>\n * <li>For JSON ""Array"" type, we need 2 methods: one to deal with expected\n *   Java arrays ({@link #createArrayDeserializer})\n *   and the other for other Java containers like {@link java.util.List}s\n *   and {@link java.util.Set}s ({@link #createCollectionDeserializer}).\n *   Actually there is also a third method for ""Collection-like"" types;\n *   things like Scala collections that act like JDK collections but do not\n *   implement same interfaces.\n *  </li>\n * <li>For JSON ""Object"" type, we need 2 methods: one to deal with\n *   expected Java {@link java.util.Map}s\n *   ({@link #createMapDeserializer}), and another for POJOs\n *   ({@link #createBeanDeserializer}.\n *   As an additional twist there is also a callback for ""Map-like"" types,\n *   mostly to make it possible to support Scala Maps (which are NOT JDK\n *   Map compatible).\n *  </li>\n * <li>For Tree Model ({@link com.fasterxml.jackson.databind.JsonNode}) properties there is\n *    {@link #createTreeDeserializer}\n * <li>For enumerated types ({@link java.lang.Enum}) there is\n *    {@link #createEnumDeserializer}\n *  </li>\n * <li>For all other types, {@link #createBeanDeserializer} is used.\n * </ul>","public , abstract ",,
com.fasterxml.jackson.databind.deser.DataFormatReaders,Class,* Alternative to {@link DataFormatDetector} that needs to be used when\n * using data-binding.\n *\n * @since 2.1,public ,,
com.fasterxml.jackson.databind.deser.DataFormatReaders$AccessorForReader,Class,"* We need sub-class here as well, to be able to access efficiently.","protected , static ",com.fasterxml.jackson.core.format.InputAccessor.Std,
com.fasterxml.jackson.databind.deser.DataFormatReaders$Match,Class,"* Result class, similar to {@link DataFormatMatcher}","public , static ",,
com.fasterxml.jackson.databind.deser.DeserializerCache,Class,"* Class that defines caching layer between callers (like\n * {@link ObjectMapper},\n * {@link com.fasterxml.jackson.databind.DeserializationContext})\n * and classes that construct deserializers\n * ({@link com.fasterxml.jackson.databind.deser.DeserializerFactory}).","public , final ",,java.io.Serializable
com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder,Class,"* Builder class used for aggregating deserialization information about\n * a POJO, in order to build a {@link JsonDeserializer} for deserializing\n * instances.",public ,,
com.fasterxml.jackson.databind.deser.ContextualKeyDeserializer,Interface,"* Add-on interface that {@link KeyDeserializer}s can implement to get a callback\n * that can be used to create contextual instances of key deserializer to use for\n * handling Map keys of supported type. This can be useful\n * for key deserializers that can be configured by annotations, or should otherwise\n * have differing behavior depending on what kind of Map property keys are being deserialized.",public ,,
com.fasterxml.jackson.databind.deser.ValueInstantiator,Abstract Class,"* Class that defines simple API implemented by objects that create value\n * instances.  Some or all of properties of value instances may\n * be initialized by instantiator, rest being populated by deserializer,\n * to which value instance is passed.\n * Since different kinds of JSON values (structured and scalar)\n * may be bound to Java values, in some cases instantiator\n * fully defines resulting value; this is the case when JSON value\n * is a scalar value (String, number, boolean).\n *<p>\n * Note that this type is not parameterized (even though it would seemingly\n * make sense), because such type information cannot be use effectively\n * during runtime: access is always using either wildcard type, or just\n * basic {@link java.lang.Object}; and so adding type parameter seems\n * like unnecessary extra work.\n *<p>\n * Actual implementations are strongly recommended to be based on\n * {@link com.fasterxml.jackson.databind.deser.std.StdValueInstantiator}\n * which implements all methods, and as such will be compatible\n * across versions even if new methods were added to this interface.","public , abstract ",,
com.fasterxml.jackson.databind.deser.ValueInstantiator$Gettable,Interface,* @since 2.9,public ,,
com.fasterxml.jackson.databind.deser.ValueInstantiator$Base,Class,* Partial {@link ValueInstantiator} implementation that is strongly recommended\n     * to be used instead of directly extending {@link ValueInstantiator} itself.,"public , static ",com.fasterxml.jackson.databind.deser.ValueInstantiator,java.io.Serializable
com.fasterxml.jackson.databind.deser.ValueInstantiator$Delegating,Class,* Delegating {@link ValueInstantiator} implementation meant as a base type\n     * that by default delegates methods to specified fallback instantiator.\n     *\n     * @since 2.12,"public , static ",com.fasterxml.jackson.databind.deser.ValueInstantiator,java.io.Serializable
com.fasterxml.jackson.databind.module.SimpleSerializers,Class,"* Simple implementation {@link Serializers} which allows registration of\n * serializers based on raw (type erased class).\n * It can work well for basic bean and scalar type serializers, but is not\n * a good fit for handling generic types (like {@link Map}s and {@link Collection}s).\n *<p>\n * Type registrations are assumed to be general; meaning that registration of serializer\n * for a super type will also be used for handling subtypes, unless an exact match\n * is found first. As an example, handler for {@link CharSequence} would also be used\n * serializing {@link StringBuilder} instances, unless a direct mapping was found.",public ,com.fasterxml.jackson.databind.ser.Serializers.Base,java.io.Serializable
com.fasterxml.jackson.databind.module.SimpleDeserializers,Class,"* Simple implementation {@link Deserializers} which allows registration of\n * deserializers based on raw (type erased class).\n * It can work well for basic bean and scalar type deserializers, but is not\n * a good fit for handling generic types (like {@link Map}s and {@link Collection}s\n * or array types).\n *<p>\n * Unlike {@link SimpleSerializers}, this class does not currently support generic mappings;\n * all mappings must be to exact declared deserialization type.",public ,com.fasterxml.jackson.databind.deser.Deserializers.Base,java.io.Serializable
com.fasterxml.jackson.databind.module.SimpleKeyDeserializers,Class,"* Simple implementation {@link KeyDeserializers} which allows registration of\n * deserializers based on raw (type erased class).\n * It can work well for basic bean and scalar type deserializers, but is not\n * a good fit for handling generic types (like {@link Map}s and {@link Collection}s\n * or array types).\n *<p>\n * Unlike {@link SimpleSerializers}, this class does not currently support generic mappings;\n * all mappings must be to exact declared deserialization type.",public ,,com.fasterxml.jackson.databind.deser.KeyDeserializers;java.io.Serializable
com.fasterxml.jackson.databind.module.SimpleModule,Class,"* Vanilla {@link com.fasterxml.jackson.databind.Module} implementation that allows registration\n * of serializers and deserializers, bean serializer\n * and deserializer modifiers, registration of subtypes and mix-ins\n * as well as some other commonly\n * needed aspects (addition of custom {@link AbstractTypeResolver}s,\n * {@link com.fasterxml.jackson.databind.deser.ValueInstantiator}s).\n * <p>\n * NOTE: that [de]serializers are registered as ""default"" [de]serializers. \n * As a result, they will have lower priority than the ones indicated through annotations on \n * both Class and property-associated annotations -- for example, \n * {@link com.fasterxml.jackson.databind.annotation.JsonDeserialize}.<br>\n * In cases where both module-based [de]serializers and annotation-based [de]serializers are registered, \n * the [de]serializer specified by the annotation will take precedence.\n *<p>\n * NOTE: although it is not expected that sub-types should need to\n * override {@link #setupModule(SetupContext)} method, if they choose\n * to do so they MUST call {@code super.setupModule(context);}\n * to ensure that registration works as expected.\n *<p>\n * WARNING: when registering {@link JsonSerializer}s and {@link JsonDeserializer}s,\n * only type erased {@code Class} is compared: this means that usually you should\n * NOT use this implementation for registering structured types such as\n * {@link java.util.Collection}s or {@link java.util.Map}s: this because parametric\n * type information will not be considered and you may end up having ""wrong"" handler\n * for your type.\n * What you need to do, instead, is to implement {@link com.fasterxml.jackson.databind.deser.Deserializers}\n * and/or {@link com.fasterxml.jackson.databind.ser.Serializers} callbacks to match full type\n * signatures (with {@link JavaType}).",public ,com.fasterxml.jackson.databind.Module,java.io.Serializable
com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver,Class,"* Simple {@link AbstractTypeResolver} implementation, which is\n * based on static mapping from abstract super types into\n * sub types (concrete or abstract), but retaining generic\n * parameterization.\n * Can be used for things like specifying which implementation of\n * {@link java.util.Collection} to use:\n *<pre>\n *  SimpleAbstractTypeResolver resolver = new SimpleAbstractTypeResolver();\n *  // To make all properties declared as Collection, List, to LinkedList\n *  resolver.addMapping(Collection.class, LinkedList.class);\n *  resolver.addMapping(List.class, LinkedList.class);\n *</pre>\n * Can also be used as an alternative to per-class annotations when defining\n * concrete implementations; however, only works with abstract types (since\n * this is only called for abstract types)",public ,com.fasterxml.jackson.databind.AbstractTypeResolver,java.io.Serializable
com.fasterxml.jackson.databind.module.SimpleValueInstantiators,Class,No Comment,public ,com.fasterxml.jackson.databind.deser.ValueInstantiators.Base,java.io.Serializable
com.fasterxml.jackson.databind.ext.DOMDeserializer,Abstract Class,* Base for serializers that allows parsing DOM Documents from JSON Strings.\n * Nominal type can be either {@link org.w3c.dom.Node} or\n * {@link org.w3c.dom.Document}.,"public , abstract ",com.fasterxml.jackson.databind.deser.std.FromStringDeserializer,
com.fasterxml.jackson.databind.ext.DOMDeserializer$NodeDeserializer,Class,No Comment,"public , static ",DOMDeserializer<Node>,
com.fasterxml.jackson.databind.ext.DOMDeserializer$DocumentDeserializer,Class,No Comment,"public , static ",DOMDeserializer<Document>,
com.fasterxml.jackson.databind.ext.DOMSerializer,Class,No Comment,public ,StdSerializer<Node>,
com.fasterxml.jackson.databind.ext.Java7Support,Abstract Class,"* To support Java7-incomplete platforms, we will offer support for JDK 7\n * annotations through this class, loaded dynamically; if loading fails,\n * support will be missing. This class is the non-JDK-7-dependent API,\n * and {@link Java7SupportImpl} is JDK7-dependent implementation of\n * functionality.","public , abstract ",,
com.fasterxml.jackson.databind.ext.SqlBlobSerializer,Class,"* Serializer implementation for {@link java.sql.Blob} to write as binary\n * (for JSON and other formats Base64-encoded String, for binary formats as\n * true binary).\n *\n * @see com.fasterxml.jackson.databind.ser.std.ByteArraySerializer\n *\n * @since 2.12",public ,com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,
com.fasterxml.jackson.databind.ext.OptionalHandlerFactory,Class,"* Helper class used for isolating details of handling optional+external types\n * (javax.xml classes) from standard factories that offer them.\n *<p>\n * Note that 2.7 changed handling to slightly less dynamic, to avoid having to\n * traverse class hierarchy, which turned to be a performance issue in\n * certain cases. Since DOM classes are assumed to exist on all Java 1.6\n * environments (yes, even on Android/GAE), this part could be simplified by\n * slightly less dynamic lookups.\n *<p>\n * Also with 2.7 we are supporting JDK 1.7/Java 7 type(s).",public ,,java.io.Serializable
com.fasterxml.jackson.databind.ext.Java7SupportImpl,Class,* @since 2.8,public ,com.fasterxml.jackson.databind.ext.Java7Support,
com.fasterxml.jackson.databind.ext.CoreXMLSerializers,Class,"* Provider for serializers of XML types that are part of full JDK 1.5, but\n * that some alleged 1.5 platforms are missing (Android, GAE).\n * And for this reason these are added using more dynamic mechanism.\n *<p>\n * Note: since many of classes defined are abstract, caller must take\n * care not to just use straight equivalency check but rather consider\n * subclassing as well.",public ,com.fasterxml.jackson.databind.ser.Serializers.Base,
com.fasterxml.jackson.databind.ext.CoreXMLSerializers$XMLGregorianCalendarSerializer,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.ser.std.StdSerializer,com.fasterxml.jackson.databind.ser.ContextualSerializer
com.fasterxml.jackson.databind.ext.CoreXMLSerializers$QNameSerializer,Class,* @since 2.19,"public , static ",com.fasterxml.jackson.databind.ser.std.StdSerializer,com.fasterxml.jackson.databind.ser.ContextualSerializer
com.fasterxml.jackson.databind.ext.NioPathSerializer,Class,* @since 2.8,public ,com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,
com.fasterxml.jackson.databind.ext.CoreXMLDeserializers,Class,"* Container deserializers that handle ""core"" XML types: ones included in standard\n * JDK 1.5. Types are directly needed by JAXB, but may be unavailable on some\n * limited platforms; hence separate out from basic deserializer factory.",public ,com.fasterxml.jackson.databind.deser.Deserializers.Base,
com.fasterxml.jackson.databind.ext.CoreXMLDeserializers$Std,Class,"* Combo-deserializer that supports deserialization of somewhat optional\n     * javax.xml types {@link QName}, {@link Duration} and {@link XMLGregorianCalendar}.\n     * Combined into a single class to eliminate bunch of one-off implementation\n     * classes, to reduce resulting jar size (mostly).\n     *\n     * @since 2.4","public , static ",com.fasterxml.jackson.databind.deser.std.FromStringDeserializer,
com.fasterxml.jackson.databind.ext.Java7Handlers,Abstract Class,"* Since v2.15, {@link Java7HandlersImpl} is no longer loaded via reflection.\n * <p>\n *     Prior to v2.15, this class supported Java7-incomplete platforms, specifically\n *     platforms that do not support {@link java.nio.file.Path}.\n * </p>\n *\n * @since 2.10 (cleaved off of {@link Java7Support})","public , abstract ",,
com.fasterxml.jackson.databind.ext.NioPathDeserializer,Class,* @since 2.8,public ,com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer,
com.fasterxml.jackson.databind.ext.Java7HandlersImpl,Class,"* Since v2.15, this is no longer loaded via reflection.\n *\n * @since 2.10",public ,com.fasterxml.jackson.databind.ext.Java7Handlers,
com.fasterxml.jackson.databind.EnumNamingStrategies,Class,* A container class for implementations of the {@link EnumNamingStrategy} interface.\n *\n * @since 2.15,public ,,
com.fasterxml.jackson.databind.EnumNamingStrategies$CamelCaseStrategy,Class,* @since 2.15\n     * @deprecated Since 2.19 use {@link LowerCamelCaseStrategy} instead.,"public , static ",com.fasterxml.jackson.databind.EnumNamingStrategies.DelegatingEnumNamingStrategy,
com.fasterxml.jackson.databind.EnumNamingStrategies$LowerCamelCaseStrategy,Class,"* <p>\n     * An implementation of {@link EnumNamingStrategy} that converts enum names in the typical upper\n     * snake case format to lower camel case format. This implementation follows three rules\n     * described below.\n     *\n     * <ol>\n     * <li>converts any character preceded by an underscore into upper case character,\n     * regardless of its original case (upper or lower).</li>\n     * <li>converts any character NOT preceded by an underscore into a lower case character,\n     * regardless of its original case (upper or lower).</li>\n     * <li>removes all underscores.</li>\n     * </ol>\n     * <p>\n     * WARNING: Naming conversion conflicts caused by underscore usage should be handled by client.\n     * e.g. Both <code>PEANUT_BUTTER</code>, <code>PEANUT__BUTTER</code> are converted into ""peanutButter"".\n     * And ""peanutButter"" will be deserialized into enum with smaller <code>Enum.ordinal()</code> value.\n     *\n     * <p>\n     * This results in the following example conversions:\n     * <ul>\n     * <li>""USER_NAME"" is converted into ""userName""</li>\n     * <li>""USER______NAME"" is converted into ""userName""</li>\n     * <li>""USERNAME"" is converted into ""username""</li>\n     * <li>""User__Name"" is converted into ""userName""</li>\n     * <li>""_user_name"" is converted into ""UserName""</li>\n     * <li>""_user_name_s"" is converted into ""UserNameS""</li>\n     * <li>""__Username"" is converted into ""Username""</li>\n     * <li>""__username"" is converted into ""Username""</li>\n     * <li>""username"" is converted into ""username""</li>\n     * <li>""Username"" is converted into ""username""</li>\n     * </ul>\n     *\n     * @since 2.19","public , static ",com.fasterxml.jackson.databind.EnumNamingStrategies.DelegatingEnumNamingStrategy,
com.fasterxml.jackson.databind.EnumNamingStrategies$UpperCamelCaseStrategy,Class,"* <p>\n     * An implementation of {@link EnumNamingStrategy} that converts enum names in the typical upper\n     * snake case format to upper camel case format.\n     * This implementation first normalizes to lower camel case using (see {@link LowerCamelCaseStrategy} for details)\n     * and then uses {@link PropertyNamingStrategies.UpperCamelCaseStrategy} to finish converting the name.\n     * <p>\n     * WARNING: Naming conversion conflicts caused by underscore usage should be handled by client.\n     * e.g. Both <code>PEANUT_BUTTER</code>, <code>PEANUT__BUTTER</code> are converted into ""PeanutButter"".\n     * And ""PeanutButter"" will be deserialized into enum with smaller <code>Enum.ordinal()</code> value.\n     *\n     * <p>\n     * This results in the following example conversions:\n     * <ul>\n     * <li>""USER_NAME"" is converted into ""UserName""</li>\n     * <li>""USER______NAME"" is converted into ""UserName""</li>\n     * <li>""USERNAME"" is converted into ""Username""</li>\n     * <li>""User__Name"" is converted into ""UserName""</li>\n     * <li>""_user_name"" is converted into ""UserName""</li>\n     * <li>""_user_name_s"" is converted into ""UserNameS""</li>\n     * <li>""__Username"" is converted into ""Username""</li>\n     * <li>""__username"" is converted into ""Username""</li>\n     * <li>""username"" is converted into ""Username""</li>\n     * <li>""Username"" is converted into ""Username""</li>\n     * </ul>\n     *\n     * @since 2.19","public , static ",com.fasterxml.jackson.databind.EnumNamingStrategies.DelegatingEnumNamingStrategy,
com.fasterxml.jackson.databind.EnumNamingStrategies$SnakeCaseStrategy,Class,"* <p>\n     * An implementation of {@link EnumNamingStrategy} that converts enum names in the typical upper\n     * snake case format to upper camel case format.\n     * This implementation first normalizes to lower camel case using (see {@link LowerCamelCaseStrategy} for details)\n     * and then uses {@link PropertyNamingStrategies.SnakeCaseStrategy} to finish converting the name.\n     * <p>\n     * WARNING: Naming conversion conflicts caused by underscore usage should be handled by client.\n     * e.g. Both <code>PEANUT_BUTTER</code>, <code>PEANUT__BUTTER</code> are converted into ""peanut_butter"".\n     * And ""peanut_butter"" will be deserialized into enum with smaller <code>Enum.ordinal()</code> value.\n     *\n     * <p>\n     * This results in the following example conversions:\n     * <ul>\n     * <li>""USER_NAME"" is converted into ""user_name""</li>\n     * <li>""USER______NAME"" is converted into ""user_name""</li>\n     * <li>""USERNAME"" is converted into ""username""</li>\n     * <li>""User__Name"" is converted into ""user_name""</li>\n     * <li>""_user_name"" is converted into ""user_name""</li>\n     * <li>""_user_name_s"" is converted into ""user_name_s""</li>\n     * <li>""__Username"" is converted into ""username""</li>\n     * <li>""__username"" is converted into ""username""</li>\n     * <li>""username"" is converted into ""username""</li>\n     * <li>""Username"" is converted into ""username""</li>\n     * </ul>\n     *\n     * @since 2.19","public , static ",com.fasterxml.jackson.databind.EnumNamingStrategies.DelegatingEnumNamingStrategy,
com.fasterxml.jackson.databind.EnumNamingStrategies$UpperSnakeCaseStrategy,Class,"* <p>\n     * An implementation of {@link EnumNamingStrategy} that converts enum names in the typical upper\n     * snake case format to upper camel case format.\n     * This implementation first normalizes to lower camel case using (see {@link LowerCamelCaseStrategy} for details)\n     * and then uses {@link PropertyNamingStrategies.UpperSnakeCaseStrategy} to finish converting the name.\n     * <p>\n     * WARNING: Naming conversion conflicts caused by underscore usage should be handled by client.\n     * e.g. Both <code>PEANUT_BUTTER</code>, <code>PEANUT__BUTTER</code> are converted into ""PEANUT_BUTTER"".\n     * And ""PEANUT_BUTTER"" will be deserialized into enum with smaller <code>Enum.ordinal()</code> value.\n     *\n     * <p>\n     * This results in the following example conversions:\n     * <ul>\n     * <li>""USER_NAME"" is converted into ""USER_NAME""</li>\n     * <li>""USER______NAME"" is converted into ""USER_NAME""</li>\n     * <li>""USERNAME"" is converted into ""USERNAME""</li>\n     * <li>""User__Name"" is converted into ""USER_NAME""</li>\n     * <li>""_user_name"" is converted into ""USER_NAME""</li>\n     * <li>""_user_name_s"" is converted into ""USER_NAME_S""</li>\n     * <li>""__Username"" is converted into ""USERNAME""</li>\n     * <li>""__username"" is converted into ""USERNAME""</li>\n     * <li>""username"" is converted into ""USERNAME""</li>\n     * <li>""Username"" is converted into ""USERNAME""</li>\n     * </ul>\n     *\n     * @since 2.19","public , static ",com.fasterxml.jackson.databind.EnumNamingStrategies.DelegatingEnumNamingStrategy,
com.fasterxml.jackson.databind.EnumNamingStrategies$LowerCaseStrategy,Class,"* <p>\n     * An implementation of {@link EnumNamingStrategy} that converts enum names in the typical upper\n     * snake case format to upper camel case format.\n     * This implementation first normalizes to lower camel case using (see {@link LowerCamelCaseStrategy} for details)\n     * and then uses {@link PropertyNamingStrategies.LowerCaseStrategy} to finish converting the name.\n     * <p>\n     * WARNING: Naming conversion conflicts caused by underscore usage should be handled by client.\n     * e.g. Both <code>PEANUT_BUTTER</code>, <code>PEANUT__BUTTER</code> are converted into ""peanutbutter"".\n     * And ""peanutbutter"" will be deserialized into enum with smaller <code>Enum.ordinal()</code> value.\n     *\n     * <p>\n     * This results in the following example conversions:\n     * <ul>\n     * <li>""USER_NAME"" is converted into ""username""</li>\n     * <li>""USER______NAME"" is converted into ""username""</li>\n     * <li>""USERNAME"" is converted into ""username""</li>\n     * <li>""User__Name"" is converted into ""username""</li>\n     * <li>""_user_name"" is converted into ""username""</li>\n     * <li>""_user_name_s"" is converted into ""usernames""</li>\n     * <li>""__Username"" is converted into ""username""</li>\n     * <li>""__username"" is converted into ""username""</li>\n     * <li>""username"" is converted into ""username""</li>\n     * <li>""Username"" is converted into ""username""</li>\n     * </ul>\n     *\n     * @since 2.19","public , static ",com.fasterxml.jackson.databind.EnumNamingStrategies.DelegatingEnumNamingStrategy,
com.fasterxml.jackson.databind.EnumNamingStrategies$KebabCaseStrategy,Class,"* <p>\n     * An implementation of {@link EnumNamingStrategy} that converts enum names in the typical upper\n     * snake case format to upper camel case format.\n     * This implementation first normalizes to lower camel case using (see {@link LowerCamelCaseStrategy} for details)\n     * and then uses {@link PropertyNamingStrategies.KebabCaseStrategy} to finish converting the name.\n     * <p>\n     * WARNING: Naming conversion conflicts caused by underscore usage should be handled by client.\n     * e.g. Both <code>PEANUT_BUTTER</code>, <code>PEANUT__BUTTER</code> are converted into ""peanut-butter"".\n     * And ""peanut-butter"" will be deserialized into enum with smaller <code>Enum.ordinal()</code> value.\n     *\n     * <p>\n     * This results in the following example conversions:\n     * <ul>\n     * <li>""USER_NAME"" is converted into ""user-name""</li>\n     * <li>""USER______NAME"" is converted into ""user-name""</li>\n     * <li>""USERNAME"" is converted into ""username""</li>\n     * <li>""User__Name"" is converted into ""user-name""</li>\n     * <li>""_user_name"" is converted into ""user-name""</li>\n     * <li>""_user_name_s"" is converted into ""user-name-s""</li>\n     * <li>""__Username"" is converted into ""username""</li>\n     * <li>""__username"" is converted into ""username""</li>\n     * <li>""username"" is converted into ""username""</li>\n     * <li>""Username"" is converted into ""username""</li>\n     * </ul>\n     *\n     * @since 2.19","public , static ",com.fasterxml.jackson.databind.EnumNamingStrategies.DelegatingEnumNamingStrategy,
com.fasterxml.jackson.databind.EnumNamingStrategies$LowerDotCaseStrategy,Class,"* <p>\n     * An implementation of {@link EnumNamingStrategy} that converts enum names in the typical upper\n     * snake case format to lower dot case format.\n     * This implementation first normalizes to lower camel case using (see {@link LowerCamelCaseStrategy} for details)\n     * and then uses {@link PropertyNamingStrategies.LowerDotCaseStrategy} to finish converting the name.\n     * <p>\n     * WARNING: Naming conversion conflicts caused by underscore usage should be handled by client.\n     * e.g. Both <code>PEANUT_BUTTER</code>, <code>PEANUT__BUTTER</code> are converted into ""peanut.butter"".\n     * And ""peanut.butter"" will be deserialized into enum with smaller <code>Enum.ordinal()</code> value.\n     *\n     * <p>\n     * This results in the following example conversions:\n     * <ul>\n     * <li>""USER_NAME"" is converted into ""user.name""</li>\n     * <li>""USER______NAME"" is converted into ""user.name""</li>\n     * <li>""USERNAME"" is converted into ""username""</li>\n     * <li>""User__Name"" is converted into ""user.name""</li>\n     * <li>""_user_name"" is converted into ""user.name""</li>\n     * <li>""_user_name_s"" is converted into ""user.name.s""</li>\n     * <li>""__Username"" is converted into ""username""</li>\n     * <li>""__username"" is converted into ""username""</li>\n     * <li>""username"" is converted into ""username""</li>\n     * <li>""Username"" is converted into ""username""</li>\n     * </ul>\n     *\n     * @since 2.19","public , static ",com.fasterxml.jackson.databind.EnumNamingStrategies.DelegatingEnumNamingStrategy,
com.fasterxml.jackson.databind.EnumNamingStrategies$DelegatingEnumNamingStrategy,Abstract Class,No Comment,"public , abstract , static ",,com.fasterxml.jackson.databind.EnumNamingStrategy
com.fasterxml.jackson.databind.SerializerProvider,Abstract Class,"* Class that defines API used by {@link ObjectMapper} and\n * {@link JsonSerializer}s to obtain serializers capable of serializing\n * instances of specific types; as well as the default implementation\n * of the functionality.\n *<p>\n * Provider handles caching aspects of serializer handling; all construction\n * details are delegated to {@link SerializerFactory} instance.\n *<p>\n * Object life-cycle is such that an initial instance (""blueprint"") is created\n * and referenced by {@link ObjectMapper} and {@link ObjectWriter} instances;\n * but for actual usage, a configured instance is created by using\n * a create method in sub-class\n * {@link com.fasterxml.jackson.databind.ser.DefaultSerializerProvider}.\n * Only this instance can be used for actual serialization calls; blueprint\n * object is only to be used for creating instances.\n *<p>\n * NOTE: in Jackson 3.x this class will be renamed as {@code SerializationContext}\n * to align with {@link DeserializationContext}.\n *","public , abstract ",com.fasterxml.jackson.databind.DatabindContext,
com.fasterxml.jackson.databind.KeyDeserializer,Abstract Class,* Abstract class that defines API used for deserializing JSON content\n * field names into Java Map keys. These deserializers are only used\n * if the Map key class is not <code>String</code> or <code>Object</code>.,"public , abstract ",,
com.fasterxml.jackson.databind.KeyDeserializer$None,Abstract Class,"* This marker class is only to be used with annotations, to\n     * indicate that <b>no deserializer is configured</b>.\n     *<p>\n     * Specifically, this class is to be used as the marker for\n     * annotation {@link com.fasterxml.jackson.databind.annotation.JsonDeserialize}.","public , abstract , static ",com.fasterxml.jackson.databind.KeyDeserializer,
com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value,Class,* Simple value container for containing values read from\n     * {@link JsonPOJOBuilder} annotation instance.,public ,,
com.fasterxml.jackson.databind.annotation.NoClass,Class,"* Marker class used with annotations to indicate ""no class"". This is\n * a silly but necessary work-around -- annotations cannot take nulls\n * as either default or explicit values. Hence for class values we must\n * explicitly use a bogus placeholder to denote equivalent of\n * ""no class"" (for which 'null' is usually the natural choice).\n *<p>\n * Note that since 2.4, most (but not all!\n * {@link com.fasterxml.jackson.annotation.JsonTypeInfo#defaultImpl} is\n * a notable exception}) usage should start using\n * {@link java.lang.Void} instead as the ""not defined"" marker.","public , final ",,
com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion,Enum,* Enumeration used with {@link JsonSerialize#include} property\n     * to define which properties\n     * of Java Beans are to be included in serialization,public ,enum has no extends,
com.fasterxml.jackson.databind.annotation.JsonSerialize.Typing,Enum,* Enumeration used with {@link JsonSerialize#typing} property\n     * to define whether type detection is based on dynamic runtime\n     * type (DYNAMIC) or declared type (STATIC).,public ,enum has no extends,
com.fasterxml.jackson.databind.PropertyName,Class,* Simple value class used for containing names of properties as defined\n * by annotations (and possibly other configuration sources).\n *\n * @since 2.1,public ,,java.io.Serializable
com.fasterxml.jackson.databind.JsonMappingException,Class,"* Checked exception used to signal fatal problems with mapping of\n * content, distinct from low-level I/O problems (signaled using\n * simple {@link java.io.IOException}s) or data encoding/decoding\n * problems (signaled with {@link com.fasterxml.jackson.core.exc.StreamReadException},\n * {@link com.fasterxml.jackson.core.exc.StreamWriteException}).\n *<p>\n * One additional feature is the ability to denote relevant path\n * of references (during serialization/deserialization) to help in\n * troubleshooting.",public ,com.fasterxml.jackson.databind.DatabindException,
com.fasterxml.jackson.databind.JsonMappingException$Reference,Class,* Simple bean class used to contain references. References\n     * can be added to indicate execution/reference path that\n     * lead to the problem that caused this exception to be\n     * thrown.,"public , static ",,java.io.Serializable
com.fasterxml.jackson.databind.MapperFeature,Enum,"* Enumeration that defines simple on/off features to set\n * for {@link ObjectMapper}, and accessible (but not changeable)\n * via {@link ObjectReader} and {@link ObjectWriter} (as well as\n * through various convenience methods through context objects).\n *<p>\n * Note that in addition to being only mutable via {@link ObjectMapper},\n * changes only take effect when done <b>before any serialization or\n * deserialization</b> calls -- that is, caller must follow\n * ""configure-then-use"" pattern.",public ,enum has no extends,com.fasterxml.jackson.databind.cfg.ConfigFeature
com.fasterxml.jackson.databind.cfg.CacheProvider,Interface,* Interface that defines API Jackson uses for constructing various internal\n * caches. This allows configuring custom caches and cache configurations.\n * A {@link CacheProvider} instance will be configured through a builder such as\n * {@link com.fasterxml.jackson.databind.json.JsonMapper.Builder#cacheProvider(CacheProvider)}\n *\n * @since 2.16,public ,java.io.Serializable,
com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig,Class,* Configuration settings container class for {@link DeserializerFactory}.,public ,,java.io.Serializable
com.fasterxml.jackson.databind.cfg.DatatypeFeatures,Class,* Immutable value class that contains settings for multiple\n * {@link DatatypeFeature} enumerations.\n *\n * @since 2.14,public ,,java.io.Serializable
com.fasterxml.jackson.databind.cfg.DatatypeFeatures$DefaultHolder,Class,* Helper class to avoid cyclic dependencies when initializing default\n     * instance for {@link DatatypeFeatures}.,"private , static ",,
com.fasterxml.jackson.databind.cfg.CoercionConfigs,Class,* @since 2.12,public ,,java.io.Serializable
com.fasterxml.jackson.databind.cfg.ConstructorDetector,Class,"* Configurable handler used to select aspects of selecting\n * constructor to use as ""Creator"" for POJOs.\n * Defines the API for handlers, a pre-defined set of standard instances\n * and methods for constructing alternative configurations.\n *\n * @since 2.12","public , final ",,java.io.Serializable
com.fasterxml.jackson.databind.cfg.ConstructorDetector$SingleArgConstructor,Enum,"* Definition of alternate handling modes of single-argument constructors\n     * that are annotated with {@link com.fasterxml.jackson.annotation.JsonCreator}\n     * but without ""mode"" definition (or explicit name for the argument):\n     * this is the case where two interpretations\n     * are possible -- ""properties"" (in which case the argument is named parameter\n     * of a JSON Object) and ""delegating (in which case the argument maps to the\n     * whole JSON value).\n     *<p>\n     * Default choice is {@code HEURISTIC} (which is Jackson pre-2.12 always uses)\n     *<p>\n     * NOTE: does NOT have any effect if explicit {@code @JsonCreator} annotation\n     * is required.\n     *\n     * @since 2.12",public ,enum has no extends,
com.fasterxml.jackson.databind.cfg.ConfigOverrides,Class,* Container for individual {@link ConfigOverride} values.\n *\n * @since 2.8,public ,,java.io.Serializable
com.fasterxml.jackson.databind.cfg.CoercionInputShape,Enum,"* Set of input types (which mostly match one of\n * {@link com.fasterxml.jackson.core.JsonToken} types) used for\n * configuring {@link CoercionAction}s to take when reading\n * input into target types (specific type or {@link LogicalType}).\n * Contains both physical input shapes (which match one of\n * {@link com.fasterxml.jackson.core.JsonToken} types) and a few\n * logical input shapes (""empty"" variants).\n *<p>\n * Note that {@code null} input shape is explicitly not included as\n * its configuration is distinct from other types.\n *\n * @since 2.12",public ,enum has no extends,
com.fasterxml.jackson.databind.cfg.ContextAttributes,Abstract Class,"* Helper class used for storing and accessing per-call attributes.\n * Storage is two-layered: at higher precedence, we have actual per-call\n * attributes; and at lower precedence, default attributes that may be\n * defined for Object readers and writers.\n *<p>\n * Note that the way mutability is implemented differs between kinds\n * of attributes, to account for thread-safety: per-call attributes\n * are handled assuming that instances are never shared, whereas\n * changes to per-reader/per-writer attributes are made assuming\n * sharing, by creating new copies instead of modifying state.\n * This allows sharing of default values without per-call copying, but\n * requires two-level lookup on access.\n *\n * @since 2.3","public , abstract ",,
com.fasterxml.jackson.databind.cfg.ContextAttributes$Impl,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.cfg.ContextAttributes,java.io.Serializable
com.fasterxml.jackson.databind.cfg.BaseSettings,Class,"* Immutable container class used to store simple configuration\n * settings for both serialization and deserialization.\n * Since instances are fully immutable, instances can\n * be freely shared and used without synchronization.","public , final ",,java.io.Serializable
com.fasterxml.jackson.databind.cfg.MapperConfigBase,Abstract Class,No Comment,"public , abstract ",com.fasterxml.jackson.databind.cfg.MapperConfig,java.io.Serializable
com.fasterxml.jackson.databind.cfg.HandlerInstantiator,Abstract Class,"* Helper class used for handling details of creating handler instances (things\n * like {@link JsonSerializer}s, {@link JsonDeserializer}s, various type\n * handlers) of specific types. Actual handler type has been resolved at this\n * point, so instantiator is strictly responsible for providing a configured\n * instance by constructing and configuring a new instance, or possibly by\n * recycling a shared instance. One use case is that of allowing\n * dependency injection, which would otherwise be difficult to do.\n *<p>\n * Custom instances are allowed to return null to indicate that caller should\n * use the default instantiation handling (which just means calling no-argument\n * constructor via reflection).\n *<p>\n * Care has to be taken to ensure that if instance returned is shared, it will\n * be thread-safe; caller will not synchronize access to returned instances.","public , abstract ",,
com.fasterxml.jackson.databind.cfg.CoercionConfig,Class,* @since 2.12,public ,,java.io.Serializable
com.fasterxml.jackson.databind.cfg.MutableCoercionConfig,Class,"* Mutable version of {@link CoercionConfig} (or rather, extended API)\n * exposed during configuration phase of {@link com.fasterxml.jackson.databind.ObjectMapper}\n * construction (via {@link JsonMapper#builder()}).\n *\n * @since 2.12",public ,com.fasterxml.jackson.databind.cfg.CoercionConfig,java.io.Serializable
com.fasterxml.jackson.databind.cfg.PackageVersion,Class,* Automatically generated from PackageVersion.java.in during\n * packageVersion-generate execution of maven-replacer-plugin in\n * pom.xml.,"public , final ",,com.fasterxml.jackson.core.Versioned
com.fasterxml.jackson.databind.cfg.JsonNodeFeature,Enum,* New Datatype-specific configuration options related to handling of\n * {@link com.fasterxml.jackson.databind.JsonNode} types.\n *\n * @since 2.14,public ,enum has no extends,com.fasterxml.jackson.databind.cfg.DatatypeFeature
com.fasterxml.jackson.databind.cfg.MutableConfigOverride,Class,"* Extension of {@link ConfigOverride} that allows changing of\n * contained configuration settings. Exposed to\n * {@link com.fasterxml.jackson.databind.Module}s that want to set\n * overrides, but not exposed to functionality that wants to apply\n * overrides.\n *\n * @since 2.8",public ,com.fasterxml.jackson.databind.cfg.ConfigOverride,java.io.Serializable
com.fasterxml.jackson.databind.cfg.ConfigOverride,Abstract Class,"* Configuration object that is accessed by databinding functionality\n * to find overrides to configuration of properties, based on declared\n * type of the property. Such overrides have precedence over annotations\n * attached to actual type ({@link java.lang.Class}), but can be further\n * overridden by annotations attached to the property itself.\n *\n * @since 2.8","public , abstract ",,
com.fasterxml.jackson.databind.cfg.ConfigOverride$Empty,Class,"* Implementation used solely for ""empty"" instance; has no mutators\n     * and is not changed by core functionality.\n     *\n     * @since 2.9","final , static ",com.fasterxml.jackson.databind.cfg.ConfigOverride,
com.fasterxml.jackson.databind.cfg.MapperBuilder,Abstract Class,"* Jackson 3 will introduce fully immutable, builder-based system for constructing\n * {@link ObjectMapper}s. Same can not be done with 2.10 for backwards-compatibility\n * reasons; but we can offer sort of ""fake"" builder, which simply encapsulates\n * configuration calls. The main (and only) point is to allow gradual upgrade.\n *\n * @since 2.10","public , abstract ",,
com.fasterxml.jackson.databind.cfg.DefaultCacheProvider,Class,* The default implementation of {@link CacheProvider}.\n * Configuration is builder-based via {@link DefaultCacheProvider.Builder}.\n * <p>\n * Users can either use this class or create their own {@link CacheProvider} implementation.\n *\n * @since 2.16,public ,,com.fasterxml.jackson.databind.cfg.CacheProvider
com.fasterxml.jackson.databind.cfg.DefaultCacheProvider$Builder,Class,"* Builder offering fluent factory methods to configure {@link DefaultCacheProvider}, keeping it immutable.","public , static ",,
com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig,Class,* Configuration settings container class for\n * {@link SerializerFactory} implementations.,"public , final ",,java.io.Serializable
com.fasterxml.jackson.databind.cfg.DatatypeFeature,Interface,* Interface that defines interaction with data type specific configuration\n * features.\n *\n * @since 2.14,public ,com.fasterxml.jackson.core.util.JacksonFeature,
com.fasterxml.jackson.databind.cfg.EnumFeature,Enum,* New Datatype-specific configuration options related to handling of\n * {@link java.lang.Enum} types.\n *\n * @since 2.14,public ,enum has no extends,com.fasterxml.jackson.databind.cfg.DatatypeFeature
com.fasterxml.jackson.databind.cfg.MapperConfig,Abstract Class,"* Interface that defines functionality accessible through both\n * serialization and deserialization configuration objects;\n * accessors to mode-independent configuration settings\n * and such.\n * In addition, shared features are defined\n * in {@link MapperFeature}.\n *<p>\n * Small part of implementation is included here by aggregating\n * {@link BaseSettings} instance that contains configuration\n * that is shared between different types of instances.","public , abstract ",,com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;java.io.Serializable
com.fasterxml.jackson.databind.cfg.CoercionAction,Enum,* Set of possible actions for requested coercion from an\n * input shape {@link CoercionInputShape}\n * that does not directly or naturally match target type\n * ({@link LogicalType}).\n * This action is suggestion for deserializers to use in cases\n * where alternate actions could be appropriate: it is up to deserializer\n * to check configured action and take it into consideration.\n *\n * @since 2.12,public ,enum has no extends,
com.fasterxml.jackson.databind.cfg.ConfigFeature,Interface,"* Interface that actual SerializationFeature enumerations used by\n * {@link MapperConfig} implementations must implement.\n * Necessary since enums cannot be extended using normal\n * inheritance, but can implement interfaces",public ,,
com.fasterxml.jackson.databind.DatabindContext,Abstract Class,"* Shared base class for {@link DeserializationContext} and\n * {@link SerializerProvider}, context objects passed through data-binding\n * process. Designed so that some of implementations can rely on shared\n * aspects like access to secondary contextual objects like type factories\n * or handler instantiators.\n *\n * @since 2.2","public , abstract ",,
com.fasterxml.jackson.databind.JsonSerializer,Abstract Class,"* Abstract class that defines API used by {@link ObjectMapper} (and\n * other chained {@link JsonSerializer}s too) to serialize Objects of\n * arbitrary types into JSON, using provided {@link JsonGenerator}.\n * {@link com.fasterxml.jackson.databind.ser.std.StdSerializer} instead\n * of this class, since it will implement many of optional\n * methods of this class.\n *<p>\n * NOTE: various <code>serialize</code> methods are never (to be) called\n * with null values -- caller <b>must</b> handle null values, usually\n * by calling {@link SerializerProvider#findNullValueSerializer} to obtain\n * serializer to use.\n * This also means that custom serializers cannot be directly used to change\n * the output to produce when serializing null values.\n *<p>\n * If serializer is an aggregate one -- meaning it delegates handling of some\n * of its contents by using other serializer(s) -- it typically also needs\n * to implement {@link com.fasterxml.jackson.databind.ser.ResolvableSerializer},\n * which can locate secondary serializers needed. This is important to allow dynamic\n * overrides of serializers; separate call interface is needed to separate\n * resolution of secondary serializers (which may have cyclic link back\n * to serializer itself, directly or indirectly).\n *<p>\n * In addition, to support per-property annotations (to configure aspects\n * of serialization on per-property basis), serializers may want\n * to implement\n * {@link com.fasterxml.jackson.databind.ser.ContextualSerializer},\n * which allows specialization of serializers: call to\n * {@link com.fasterxml.jackson.databind.ser.ContextualSerializer#createContextual}\n * is passed information on property, and can create a newly configured\n * serializer for handling that particular property.\n *<p>\n * If both\n * {@link com.fasterxml.jackson.databind.ser.ResolvableSerializer} and\n * {@link com.fasterxml.jackson.databind.ser.ContextualSerializer}\n * are implemented, resolution of serializers occurs before\n * contextualization.","public , abstract ",,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable
com.fasterxml.jackson.databind.JsonSerializer$None,Abstract Class,"* This marker class is only to be used with annotations, to\n     * indicate that <b>no serializer is configured</b>.\n     *<p>\n     * Specifically, this class is to be used as the marker for\n     * annotation {@link com.fasterxml.jackson.databind.annotation.JsonSerialize}.","public , abstract , static ",com.fasterxml.jackson.databind.JsonSerializer,
com.fasterxml.jackson.databind.json.JsonMapper,Class,* JSON-format specific {@link ObjectMapper} implementation.\n *\n * @since 2.10,public ,com.fasterxml.jackson.databind.ObjectMapper,
com.fasterxml.jackson.databind.json.JsonMapper$Builder,Class,"* Base implementation for ""Vanilla"" {@link ObjectMapper}, used with\n     * JSON dataformat backend.\n     *\n     * @since 2.10","public , static ",com.fasterxml.jackson.databind.cfg.MapperBuilder,
com.fasterxml.jackson.databind.type.LogicalType,Enum,"* Set of logical types (or type categories, classes of classes), used\n * for defining applicability of configuration like coercion configuration.\n * Used instead to allow easier targeting of types than having to enumerate\n * physical types ({@link java.lang.Class} or {@link com.fasterxml.jackson.databind.JavaType}).\n *\n * @since 2.12",public ,enum has no extends,
com.fasterxml.jackson.databind.type.IterationType,Class,* Specialized {@link SimpleType} for types that are allow iteration\n * over Collection(-like) types: this includes types like\n * {@link java.util.Iterator}.\n * Iterated (content) type is accessible using {@link #getContentType()}.\n *\n * @since 2.16,public ,com.fasterxml.jackson.databind.type.SimpleType,
com.fasterxml.jackson.databind.type.TypeFactory,Class,"* Class used for creating concrete {@link JavaType} instances,\n * given various inputs.\n *<p>\n * Instances of this class are accessible using {@link com.fasterxml.jackson.databind.ObjectMapper}\n * as well as many objects it constructs (like\n* {@link com.fasterxml.jackson.databind.DeserializationConfig} and\n * {@link com.fasterxml.jackson.databind.SerializationConfig})),\n * but usually those objects also\n * expose convenience methods (<code>constructType</code>).\n * So, you can do for example:\n *<pre>\n *   JavaType stringType = mapper.constructType(String.class);\n *</pre>\n * However, more advanced methods are only exposed by factory so that you\n * may need to use:\n *<pre>\n *   JavaType stringCollection = mapper.getTypeFactory().constructCollectionType(List.class, String.class);\n *</pre>\n *<p>\n * Note on optimizations: generic type parameters are resolved for all types, with following\n * exceptions:\n *<ul>\n *  <li>For optimization purposes, type resolution is skipped for following commonly seen\n * types that do have type parameters, but ones that are rarely needed:\n *     <ul>\n *       <li>{@link java.lang.Enum}: Self-referential type reference is simply dropped and\n *       Class is exposed as a simple, non-parameterized {@link SimpleType}\n *        </li>\n *       <li>{@link java.lang.Comparable}: Type parameter is simply dropped and and\n *       interface is exposed as a simple, non-parameterized {@link SimpleType}\n *        </li>\n *       <li>Up until Jackson 2.13, {@link java.lang.Class} type parameter was dropped; resolution\n *         was added back in Jackson 2.14.\n *        </li>\n *     </ul>\n *   </li>\n *  <li>For {@link java.util.Collection} subtypes, resolved type is ALWAYS the parameter for\n *     {link java.util.Collection} and not that of actually resolved subtype.\n *     This is usually (but not always) same parameter.\n *   </li>\n *  <li>For {@link java.util.Map} subtypes, resolved type is ALWAYS the parameter for\n *     {link java.util.Map} and not that of actually resolved subtype.\n *     These are usually (but not always) same parameters.\n *   </li>\n *</ul>",public ,,java.io.Serializable
com.fasterxml.jackson.databind.type.IdentityEqualityType,Abstract Class,* Internal abstract type representing {@link TypeBase} implementations which use reference equality.\n *\n * @since 2.15,abstract ,com.fasterxml.jackson.databind.type.TypeBase,
com.fasterxml.jackson.databind.type.MapLikeType,Class,"* Type that represents Map-like types; things that consist of key/value pairs\n * but that do not necessarily implement {@link java.util.Map}, but that do not\n * have enough introspection functionality to allow for some level of generic\n * handling. This specifically allows framework to check for configuration and\n * annotation settings used for Map types, and pass these to custom handlers\n * that may be more familiar with actual type.",public ,com.fasterxml.jackson.databind.type.TypeBase,
com.fasterxml.jackson.databind.type.TypeBindings,Class,* Helper class used for resolving type parameters for given class,public ,,java.io.Serializable
com.fasterxml.jackson.databind.type.TypeBindings$TypeParamStash,Class,"* Helper class that contains simple logic for avoiding repeated lookups via\n     * {@link Class#getTypeParameters()} as that can be a performance issue for\n     * some use cases (wasteful, usually one-off or not reusing mapper).\n     * Partly isolated to avoid initialization for cases where no generic types are\n     * used.",static ,,
com.fasterxml.jackson.databind.type.TypeBindings$AsKey,Class,* Helper type used to allow caching of generic types\n     *\n     * @since 2.8,"final , static ",,
com.fasterxml.jackson.databind.type.ClassKey,Class,"* Key class, used as an efficient and accurate key\n * for locating per-class values, such as\n * {@link com.fasterxml.jackson.databind.JsonSerializer}s.\n *<p>\n * The reason for having a separate key class instead of\n * directly using {@link Class} as key is mostly\n * to allow for redefining <code>hashCode</code> method --\n * for some strange reason, {@link Class} does not\n * redefine {@link Object#hashCode} and thus uses identity\n * hash, which is pretty slow. This makes key access using\n * {@link Class} unnecessarily slow.\n *<p>\n * Note: since class is not strictly immutable, caller must\n * know what it is doing, if changing field values.","public , final ",,java.lang.Comparable;java.io.Serializable
com.fasterxml.jackson.databind.type.MapType,Class,"* Type that represents ""true"" Java Map types.","public , final ",com.fasterxml.jackson.databind.type.MapLikeType,
com.fasterxml.jackson.databind.type.ReferenceType,Class,"* Specialized {@link SimpleType} for types that are referential types,\n * that is, values that can be dereferenced to another value (or null),\n * of different type.\n * Referenced type is accessible using {@link #getContentType()}.\n *\n * @since 2.6",public ,com.fasterxml.jackson.databind.type.SimpleType,
com.fasterxml.jackson.databind.type.PlaceholderForType,Class,"* Helper type used when introspecting bindings for already resolved types,\n * needed for specialization.\n *\n * @since 2.8.11",public ,com.fasterxml.jackson.databind.type.IdentityEqualityType,
com.fasterxml.jackson.databind.type.TypeBase,Abstract Class,No Comment,"public , abstract ",com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializable
com.fasterxml.jackson.databind.type.TypeModifier,Abstract Class,"* Class that defines API that can be used to modify details of\n * {@link JavaType} instances constructed using {@link TypeFactory}.\n * Registered modifiers are called in order, to let them modify (or\n * replace) basic type instance factory constructs.\n * This is typically needed to support creation of\n * {@link MapLikeType} and {@link CollectionLikeType} instances,\n * as those cannot be constructed in generic fashion.","public , abstract ",,
com.fasterxml.jackson.databind.type.ClassStack,Class,* Simple helper class used to keep track of 'call stack' for classes being referenced\n * (as well as unbound variables)\n *\n * @since 2.7,"public , final ",,
com.fasterxml.jackson.databind.type.ResolvedRecursiveType,Class,* Internal placeholder type used for self-references.\n *\n * @since 2.7,public ,com.fasterxml.jackson.databind.type.IdentityEqualityType,
com.fasterxml.jackson.databind.type.TypeParser,Class,* Simple recursive-descent parser for parsing canonical {@link JavaType}\n * representations and constructing type instances.,public ,,java.io.Serializable
com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer,Class,No Comment,"final , protected , static ",java.util.StringTokenizer,
com.fasterxml.jackson.databind.type.SimpleType,Class,"* Simple types are defined as anything other than one of recognized\n * container types (arrays, Collections, Maps). For our needs we\n * need not know anything further, since we have no way of dealing\n * with generic types other than Collections and Maps.",public ,com.fasterxml.jackson.databind.type.TypeBase,
com.fasterxml.jackson.databind.type.ArrayType,Class,"* Array types represent Java arrays, both primitive and object valued.\n * Further, Object-valued arrays can have element type of any other\n * legal {@link JavaType}.","public , final ",com.fasterxml.jackson.databind.type.TypeBase,
com.fasterxml.jackson.databind.type.CollectionLikeType,Class,"* Type that represents things that act similar to {@link java.util.Collection};\n * but may or may not be instances of that interface.\n * This specifically allows framework to check for configuration and annotation\n * settings used for Map types, and pass these to custom handlers that may be more\n * familiar with actual type.",public ,com.fasterxml.jackson.databind.type.TypeBase,
com.fasterxml.jackson.databind.type.CollectionType,Class,"* Type that represents Java Collection types (Lists, Sets).","public , final ",com.fasterxml.jackson.databind.type.CollectionLikeType,
com.fasterxml.jackson.databind.jdk14.JDK14Util,Class,"* Helper class to support some of JDK 14 (and later) features\n * without Jackson itself being run on (or even built with) Java 14.\n * In particular allows better support of {@code java.lang.Record}\n * types (see <a href=""https://openjdk.java.net/jeps/359"">JEP 359</a>).\n *\n * @since 2.12",public ,,
com.fasterxml.jackson.databind.jdk14.JDK14Util$RecordAccessor,Class,No Comment,static ,,
com.fasterxml.jackson.databind.jdk14.JDK14Util$RawTypeName,Class,No Comment,static ,,
com.fasterxml.jackson.databind.jdk14.JDK14Util$CreatorLocator,Class,No Comment,static ,,
com.fasterxml.jackson.databind.DeserializationFeature,Enum,"* Enumeration that defines simple on/off features that affect\n * the way Java objects are deserialized from JSON\n *<p>\n * Note that features can be set both through\n * {@link ObjectMapper} (as sort of defaults) and through\n * {@link ObjectReader}.\n * In first case these defaults must follow ""config-then-use"" patterns\n * (i.e. defined once, not changed afterwards); all per-call\n * changes must be done using {@link ObjectReader}.\n *<p>\n * Note that features that do not indicate version of inclusion\n * were available in Jackson 2.0 (or earlier); only later additions\n * indicate version of inclusion.",public ,enum has no extends,com.fasterxml.jackson.databind.cfg.ConfigFeature
com.fasterxml.jackson.databind.jsonschema.SchemaAware,Interface,"* Marker interface for schema-aware serializers.\n *\n * @deprecated Since 2.15, we recommend use of external\n * <a href=""https://github.com/FasterXML/jackson-module-jsonSchema"">JSON Schema generator module</a>",public ,,
com.fasterxml.jackson.databind.jsonschema.JsonSchema,Class,"* Container for a logical JSON Schema instance.\n * Internally schema data is stored as a JSON Tree\n * (instance of {@link JsonNode} is the root\n * of schema document)\n *\n * @author Ryan Heaton\n * @see <a href=""http://json-schema.org/"">JSON Schema</a>\n *\n * @deprecated Since 2.2, we recommend use of external\n *   <a href=""https://github.com/FasterXML/jackson-module-jsonSchema"">JSON Schema generator module</a>",public ,,
com.fasterxml.jackson.databind.ObjectMapper,Class,"* ObjectMapper provides functionality for reading and writing JSON,\n * either to and from basic POJOs (Plain Old Java Objects), or to and from\n * a general-purpose JSON Tree Model ({@link JsonNode}), as well as\n * related functionality for performing conversions.\n * It is also highly customizable to work both with different styles of JSON\n * content, and to support more advanced Object concepts such as\n * polymorphism and Object identity.\n * {@code ObjectMapper} also acts as a factory for more advanced {@link ObjectReader}\n * and {@link ObjectWriter} classes.\n * Mapper (and {@link ObjectReader}s, {@link ObjectWriter}s it constructs) will\n * use instances of {@link JsonParser} and {@link JsonGenerator}\n * for implementing actual reading/writing of JSON.\n * Note that although most read and write methods are exposed through this class,\n * some of the functionality is only exposed via {@link ObjectReader} and\n * {@link ObjectWriter}: specifically, reading/writing of longer sequences of\n * values is only available through {@link ObjectReader#readValues(InputStream)}\n * and {@link ObjectWriter#writeValues(OutputStream)}.\n *<p>\nSimplest usage is of form:\n<pre>\n  final ObjectMapper mapper = new ObjectMapper(); // can use static singleton, inject: just make sure to reuse!\n  MyValue value = new MyValue();\n  // ... and configure\n  File newState = new File(""my-stuff.json"");\n  mapper.writeValue(newState, value); // writes JSON serialization of MyValue instance\n  // or, read\n  MyValue older = mapper.readValue(new File(""my-older-stuff.json""), MyValue.class);\n\n  // Or if you prefer JSON Tree representation:\n  JsonNode root = mapper.readTree(newState);\n  // and find values by, for example, using a {@link com.fasterxml.jackson.core.JsonPointer} expression:\n  int age = root.at(""/personal/age"").getValueAsInt();\n</pre>\n *<p>\n * The main conversion API is defined in {@link ObjectCodec}, so that\n * implementation details of this class need not be exposed to\n * streaming parser and generator classes. Usage via {@link ObjectCodec} is,\n * however, usually only for cases where dependency to {@link ObjectMapper} is\n * either not possible (from Streaming API), or undesireable (when only relying\n * on Streaming API).\n *<p>\n * Mapper instances are fully thread-safe provided that ALL configuration of the\n * instance occurs before ANY read or write calls. If configuration of a mapper instance\n * is modified after first usage, changes may or may not take effect, and configuration\n * calls themselves may fail.\n * If you need to use different configuration, you have two main possibilities:\n *<ul>\n * <li>Construct and use {@link ObjectReader} for reading, {@link ObjectWriter} for writing.\n *    Both types are fully immutable and you can freely create new instances with different\n *    configuration using either factory methods of {@link ObjectMapper}, or readers/writers\n *    themselves. Construction of new {@link ObjectReader}s and {@link ObjectWriter}s is\n *    a very light-weight operation so it is usually appropriate to create these on per-call\n *    basis, as needed, for configuring things like optional indentation of JSON.\n *  </li>\n * <li>If the specific kind of configurability is not available via {@link ObjectReader} and\n *   {@link ObjectWriter}, you may need to use multiple {@link ObjectMapper} instead (for example:\n *   you cannot change mix-in annotations on-the-fly; or, set of custom (de)serializers).\n *   To help with this usage, you may want to use method {@link #copy()} which creates a clone\n *   of the mapper with specific configuration, and allows configuration of the copied instance\n *   before it gets used. Note that {@link #copy} operation is as expensive as constructing\n *   a new {@link ObjectMapper} instance: if possible, you should still pool and reuse mappers\n *   if you intend to use them for multiple operations.\n *  </li>\n * </ul>\n *<p>\n * Note on caching: root-level deserializers are always cached, and accessed\n * using full (generics-aware) type information. This is different from\n * caching of referenced types, which is more limited and is done only\n * for a subset of all deserializer types. The main reason for difference\n * is that at root-level there is no incoming reference (and hence no\n * referencing property, no referral information or annotations to\n * produce differing deserializers), and that the performance impact\n * greatest at root level (since it'll essentially cache the full\n * graph of deserializers involved).\n *<p>\n * Notes on security: use of ""default typing"" feature (see {@link #enableDefaultTyping()})\n * is a potential security risk, if used with untrusted content (content generated by\n * untrusted external parties). If so, you may want to construct a custom\n * {@link TypeResolverBuilder} implementation to limit possible types to instantiate,\n * (using {@link #setDefaultTyping}).",public ,com.fasterxml.jackson.core.ObjectCodec,com.fasterxml.jackson.core.Versioned;java.io.Serializable
com.fasterxml.jackson.databind.ObjectMapper$DefaultTyping,Enum,"* Enumeration used with {@link ObjectMapper#activateDefaultTyping(PolymorphicTypeValidator)}\n     * to specify what kind of types (classes) default typing should\n     * be used for. It will only be used if no explicit type information\n     * is found, but this enumeration further limits subset of those types.\n     *<p>\n     * Since 2.4 there are special exceptions for JSON Tree model\n     * types (sub-types of {@link TreeNode}: default typing is never\n     * applied to them.\n     * Since 2.8(.4) additional checks are made to avoid attempts at default\n     * typing primitive-valued properties.\n     *<p>\n     * NOTE: use of Default Typing can be a potential security risk if incoming\n     * content comes from untrusted sources, and it is recommended that this\n     * is either not done, or, if enabled, make sure to {@code activateDefaultTyping(...)}\n     * methods that take {@link PolymorphicTypeValidator} that limits applicability\n     * to known trusted types.",public ,enum has no extends,
com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder,Class,"* Customized {@link TypeResolverBuilder} that provides type resolver builders\n     * used with so-called ""default typing""\n     * (see {@link ObjectMapper#activateDefaultTyping(PolymorphicTypeValidator)} for details).\n     *<p>\n     * Type resolver construction is based on configuration: implementation takes care\n     * of only providing builders in cases where type information should be applied.\n     * This is important since build calls may be sent for any and all types, and\n     * type information should NOT be applied to all of them.","public , static ",com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder,java.io.Serializable
com.fasterxml.jackson.databind.PropertyMetadata,Class,"* Simple container class used for storing ""additional"" metadata about\n * properties. Carved out to reduce number of distinct properties that\n * actual property implementations and place holders need to store;\n * since instances are immutable, they can be freely shared.\n *\n * @since 2.3",public ,,java.io.Serializable
com.fasterxml.jackson.databind.PropertyMetadata$MergeInfo,Class,"* Helper class used for containing information about expected merge\n     * information for this property, if merging is expected.\n     *\n     * @since 2.9","public , final , static ",,
com.fasterxml.jackson.databind.SerializationConfig,Class,"* Object that contains baseline configuration for serialization\n * process. An instance is owned by {@link ObjectMapper}, which\n * passes an immutable instance for serialization process to\n * {@link SerializerProvider} and {@link SerializerFactory}\n * (either directly, or through {@link ObjectWriter}.\n *<p>\n * Note that instances are considered immutable and as such no copies\n * should need to be created for sharing; all copying is done with\n * ""fluent factory"" methods.","public , final ",com.fasterxml.jackson.databind.cfg.MapperConfigBase,java.io.Serializable
com.fasterxml.jackson.databind.BeanProperty,Interface,"* Bean properties are logical entities that represent data\n * that Java objects (POJOs (Plain Old Java Objects), sometimes also called ""beans"")\n * contain; and that are accessed using accessors (methods like getters\n * and setters, fields, constructor parameters).\n * Instances allow access to annotations directly associated\n * to property (via field or method), as well as contextual\n * annotations (annotations for class that contains properties).\n *<p>\n * Instances are not typically passed when constructing serializers\n * and deserializers, but rather only passed when context\n * is known when\n * {@link com.fasterxml.jackson.databind.ser.ContextualSerializer} and\n * {@link com.fasterxml.jackson.databind.deser.ContextualDeserializer}\n * resolution occurs (<code>createContextual(...)</code> method is called).\n * References may (need to) be retained by serializers and deserializers,\n * especially when further resolving dependent handlers like value\n * serializers/deserializers or structured types.",public ,com.fasterxml.jackson.databind.util.Named,
com.fasterxml.jackson.databind.BeanProperty$Std,Class,"* Simple stand-alone implementation, useful as a placeholder\n     * or base class for more complex implementations.","public , static ",,com.fasterxml.jackson.databind.BeanProperty;java.io.Serializable
com.fasterxml.jackson.databind.BeanProperty$Bogus,Class,"* Alternative ""Null"" implementation that can be used in cases where a non-null\n     * {@link BeanProperty} is needed\n     *\n     * @since 2.9","public , static ",,com.fasterxml.jackson.databind.BeanProperty
com.fasterxml.jackson.databind.exc.MismatchedInputException,Class,"* General exception type used as the base class for all {@link JsonMappingException}s\n * that are due to input not mapping to target definition; these are typically\n * considered ""client errors"" since target type definition itself is not the root cause\n * but mismatching input. This is in contrast to {@link InvalidDefinitionException} which\n * signals a problem with target type definition and not input.\n *<p>\n * This type is used as-is for some input problems, but in most cases there should be\n * more explicit subtypes to use.\n *<p>\n * NOTE: name chosen to differ from `java.util.InputMismatchException` since while that\n * would have been better name, use of same overlapping name causes nasty issues\n * with IDE auto-completion, so slightly less optimal chosen.\n *\n * @since 2.9",public ,com.fasterxml.jackson.databind.JsonMappingException,
com.fasterxml.jackson.databind.exc.IgnoredPropertyException,Class,"* Specialized {@link JsonMappingException} sub-class used to indicate\n * case where an explicitly ignored property is encountered, and mapper\n * is configured to consider this an error.\n *\n * @since 2.3",public ,com.fasterxml.jackson.databind.exc.PropertyBindingException,
com.fasterxml.jackson.databind.exc.InvalidFormatException,Class,* Specialized sub-class of {@link MismatchedInputException}\n * that is used when the underlying problem appears to be that\n * of bad formatting of a value to deserialize.\n *\n * @since 2.1,public ,com.fasterxml.jackson.databind.exc.MismatchedInputException,
com.fasterxml.jackson.databind.exc.InvalidDefinitionException,Class,* Intermediate exception type used as the base class for all {@link JsonMappingException}s\n * that are due to problems with target type definition; usually a problem with\n * annotations used on a class or its properties.\n * This is in contrast to {@link MismatchedInputException} which\n * signals a problem with input to map.\n *\n * @since 2.9,public ,com.fasterxml.jackson.databind.JsonMappingException,
com.fasterxml.jackson.databind.exc.InvalidTypeIdException,Class,* Exception thrown when resolution of a type id fails.\n *\n * @since 2.8,public ,com.fasterxml.jackson.databind.exc.MismatchedInputException,
com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException,Class,"* Specialized {@link JsonMappingException} sub-class specifically used\n * to indicate problems due to encountering a JSON property that could\n * not be mapped to an Object property (via getter, constructor argument\n * or field).",public ,com.fasterxml.jackson.databind.exc.PropertyBindingException,
com.fasterxml.jackson.databind.exc.InvalidNullException,Class,"* Exception thrown if a `null` value is being encountered for a property\n * designed as ""fail on null"" property (see {@link com.fasterxml.jackson.annotation.JsonSetter}).\n *\n * @since 2.9",public ,com.fasterxml.jackson.databind.exc.MismatchedInputException,
com.fasterxml.jackson.databind.exc.ValueInstantiationException,Class,"* Exception type used for generic failures during processing by\n * {@link com.fasterxml.jackson.databind.deser.ValueInstantiator}:\n * commonly used to wrap exceptions thrown by constructor or factory\n * method.\n *<p>\n * Note that this type is sibling of {@link MismatchedInputException} and\n * {@link InvalidDefinitionException} since it is not clear if problem is\n * with input, or type definition (or possibly neither).\n * It is recommended that if either specific input, or type definition problem\n * is known, a more accurate exception is used instead.\n *\n * @since 2.10",public ,com.fasterxml.jackson.databind.JsonMappingException,
com.fasterxml.jackson.databind.exc.PropertyBindingException,Abstract Class,* Base class for {@link JsonMappingException}s that are specifically related\n * to problems related to binding an individual property.\n *\n * @since 2.3,"public , abstract ",com.fasterxml.jackson.databind.exc.MismatchedInputException,
com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer,Class,"* Simple serializer that will call configured type serializer, passing\n * in configured data serializer, and exposing it all as a simple\n * serializer.","public , final ",com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.ser.ContextualSerializer
com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter,Class,"* Variant of {@link BeanPropertyWriter} which will handle unwrapping\n * of JSON Object (including of properties of Object within surrounding\n * JSON object, and not as sub-object).",public ,com.fasterxml.jackson.databind.ser.BeanPropertyWriter,java.io.Serializable
com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider,Class,"* Simple {@link FilterProvider} implementation that just stores\n * direct id-to-filter mapping. It also allows specifying a\n * ""default"" filter to return if no registered instance matches\n * given filter id.\n *<p>\n * Note that version 2.3 was a partial rewrite, now that\n * {@link PropertyFilter} is set to replace <code>BeanPropertyFilter</code>.",public ,com.fasterxml.jackson.databind.ser.FilterProvider,java.io.Serializable
com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator,Class,No Comment,public ,com.fasterxml.jackson.annotation.ObjectIdGenerators.PropertyGenerator,
com.fasterxml.jackson.databind.ser.impl.MapEntrySerializer,Class,* @since 2.5,public ,com.fasterxml.jackson.databind.ser.ContainerSerializer,com.fasterxml.jackson.databind.ser.ContextualSerializer
com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,Abstract Class,"* Helper container used for resolving serializers for dynamic (possibly but not\n * necessarily polymorphic) properties: properties whose type is not forced\n * to use dynamic (declared) type and that are not final.\n * If so, serializer to use can only be established once actual value type is known.\n * Since this happens a lot unless static typing is forced (or types are final)\n * this implementation is optimized for efficiency.\n * Instances are immutable; new instances are created with factory methods: this\n * is important to ensure correct multi-threaded access.","public , abstract ",,
com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$SerializerAndMapResult,Class,* Value class used for returning tuple that has both serializer\n     * that was retrieved and new map instance,"public , final , static ",,
com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$TypeAndSerializer,Class,* Trivial container for bundling type + serializer entries.,"private , final , static ",,
com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$Empty,Class,* Bogus instance that contains no serializers; used as the default\n     * map with new serializers.,"private , final , static ",com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,
com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$Single,Class,* Map that contains a single serializer; although seemingly silly\n     * this is probably the most commonly used variant because many\n     * theoretically dynamic or polymorphic types just have single\n     * actual type.,"private , final , static ",com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,
com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$Double,Class,No Comment,"private , final , static ",com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,
com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap$Multi,Class,No Comment,"private , final , static ",com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,
com.fasterxml.jackson.databind.ser.impl.StringArraySerializer,Class,* Standard serializer used for <code>String[]</code> values.,public ,com.fasterxml.jackson.databind.ser.std.ArraySerializerBase,com.fasterxml.jackson.databind.ser.ContextualSerializer
com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter,Class,* Object that knows how to serialize Object Ids.,"public , final ",,
com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer,Class,"* Efficient implement for serializing {@link Collection}s that contain Strings.\n * The only complexity is due to possibility that serializer for {@link String}\n * may be overridde; because of this, logic is needed to ensure that the default\n * serializer is in use to use fastest mode, or if not, to defer to custom\n * String serializer.",public ,com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase,
com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter,Class,"* {@link VirtualBeanPropertyWriter} implementation used for\n * {@link com.fasterxml.jackson.databind.annotation.JsonAppend},\n * to serialize properties backed-by dynamically assignable attribute\n * values.\n *\n * @since 2.5",public ,com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter,
com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer,Class,No Comment,public ,com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,java.io.Serializable
com.fasterxml.jackson.databind.ser.impl.MapEntryAsPOJOSerializer,Class,"* Serializer used to serialize Map.Entry as POJOs: that is, as if\n * introspected as POJOs so that there's intermediate ""key"" and ""value""\n * properties.\n *<p>\n * TODO: does not fully handle contextualization, type resolution and so on.\n *\n * @since 2.19",public ,com.fasterxml.jackson.databind.ser.std.StdSerializer,
com.fasterxml.jackson.databind.ser.impl.BeanAsArraySerializer,Class,"* Specialized POJO serializer that differs from\n * {@link com.fasterxml.jackson.databind.ser.BeanSerializer}\n * in that instead of producing a JSON Object it will output\n * a JSON Array, omitting field names, and serializing values in\n * specified serialization order.\n * This behavior is usually triggered by using annotation\n * {@link com.fasterxml.jackson.annotation.JsonFormat} or its\n * equivalents.\n *<p>\n * This serializer can be used for ""simple"" instances; and will NOT\n * be used if one of following is true:\n *<ul>\n * <li>Unwrapping is used (no way to expand out array in JSON Object)\n *  </li>\n * <li>Type information (""type id"") is to be used: while this could work\n *   for some embedding methods, it would likely cause conflicts.\n *  </li>\n * <li>Object Identity (""object id"") is used: while references would work,\n *    the problem is inclusion of id itself.\n *  </li>\n *</ul>\n * Note that it is theoretically possible that last 2 issues could be addressed\n * (by reserving room in array, for example); and if so, support improved.\n *<p>\n * In cases where array-based output is not feasible, this serializer\n * can instead delegate to the original Object-based serializer; this\n * is why a reference is retained to the original serializer.\n *\n * @since 2.1",public ,com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,
com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer,Class,"* Efficient implement for serializing {@link List}s that contains Strings and are random-accessible.\n * The only complexity is due to possibility that serializer for {@link String}\n * may be overridde; because of this, logic is needed to ensure that the default\n * serializer is in use to use fastest mode, or if not, to defer to custom\n * String serializer.","public , final ",com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase,
com.fasterxml.jackson.databind.ser.impl.FailingSerializer,Class,"* Special bogus ""serializer"" that will throw\n * {@link JsonMappingException} if its {@link #serialize}\n * gets invoked. Most commonly registered as handler for unknown types,\n * as well as for catching unintended usage (like trying to use null\n * as Map/Object key).",public ,com.fasterxml.jackson.databind.ser.std.StdSerializer,
com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer,Class,"* This is an optimized serializer for Lists that can be efficiently\n * traversed by index (as opposed to others, such as {@link LinkedList}\n * that cannot}.","public , final ",com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase,
com.fasterxml.jackson.databind.ser.impl.WritableObjectId,Class,* Simple value container used to keep track of Object Ids during\n * serialization.,"public , final ",,
com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer,Class,"* Special bogus ""serializer"" that will throw\n * {@link com.fasterxml.jackson.databind.exc.InvalidDefinitionException} if its {@link #serialize}\n * gets invoked. Most commonly registered as handler for unknown types,\n * as well as for catching unintended usage (like trying to use null\n * as Map/Object key).",public ,com.fasterxml.jackson.databind.ser.std.StdSerializer,
com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap,Class,"* Optimized lookup table for accessing two types of serializers; typed\n * and non-typed. Only accessed from a single thread, so no synchronization\n * needed for accessors.\n *<p>\n * Note that before 2.6 this class was much smaller, and referred most\n * operations to separate <code>JsonSerializerMap</code>, but in 2.6\n * functions were combined.","public , final ",,
com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap$Bucket,Class,No Comment,"private , final , static ",,
com.fasterxml.jackson.databind.ser.impl.IteratorSerializer,Class,No Comment,public ,com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase,
com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter,Class,"* Simple {@link PropertyFilter} implementation that only uses property name\n * to determine whether to serialize property as is, or to filter it out.\n *<p>\n * Use of this class as the base implementation for any custom\n * {@link PropertyFilter} implementations is strongly encouraged,\n * because it can provide default implementation for any methods that may\n * be added in {@link PropertyFilter} (as unfortunate as additions may be).",public ,,com.fasterxml.jackson.databind.ser.BeanPropertyFilter;com.fasterxml.jackson.databind.ser.PropertyFilter
com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter$FilterExceptFilter,Class,* Filter implementation which defaults to filtering out unknown\n     * properties and only serializes ones explicitly listed.,"public , static ",com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter,java.io.Serializable
com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter$SerializeExceptFilter,Class,"* Filter implementation which defaults to serializing all\n     * properties, except for ones explicitly listed to be filtered out.","public , static ",com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter,java.io.Serializable
com.fasterxml.jackson.databind.ser.impl.UnknownSerializer,Class,No Comment,public ,com.fasterxml.jackson.databind.ser.std.ToEmptyObjectSerializer,
com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter,Abstract Class,* Decorated {@link BeanPropertyWriter} that will filter out properties\n * that are not to be included in currently active JsonView.,"public , abstract ",,
com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter$SingleView,Class,No Comment,"private , final , static ",com.fasterxml.jackson.databind.ser.BeanPropertyWriter,java.io.Serializable
com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter$MultiView,Class,No Comment,"private , final , static ",com.fasterxml.jackson.databind.ser.BeanPropertyWriter,java.io.Serializable
com.fasterxml.jackson.databind.ser.DefaultSerializerProvider,Abstract Class,"* Standard implementation used by {@link ObjectMapper}:\n * adds methods only exposed to {@link ObjectMapper},\n * as well as constructors.\n *<p>\n * Note that class is abstract just because it does not\n * define {@link #createInstance} method.\n *<p>\n * Also note that all custom {@link SerializerProvider}\n * implementations must sub-class this class: {@link ObjectMapper}\n * requires this type, not basic provider type.","public , abstract ",com.fasterxml.jackson.databind.SerializerProvider,java.io.Serializable
com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl,Class,"* Concrete implementation that defines factory method(s),\n     * defined as final.","public , final , static ",com.fasterxml.jackson.databind.ser.DefaultSerializerProvider,
com.fasterxml.jackson.databind.ser.Serializers,Interface,"* Interface that defines API for simple extensions that can provide additional serializers\n * for various types. Access is by a single callback method; instance is to either return\n * a configured {@link JsonSerializer} for specified type, or null to indicate that it\n * does not support handling of the type. In latter case, further calls can be made\n * for other providers; in former case returned serializer is used for handling of\n * instances of specified type.",public ,,
com.fasterxml.jackson.databind.ser.Serializers$Base,Class,* Basic {@link Serializers} implementation that implements all methods but provides\n     * no serializers. Its main purpose is to serve as a base class so that\n     * sub-classes only need to override methods they need.,"public , static ",,com.fasterxml.jackson.databind.ser.Serializers
com.fasterxml.jackson.databind.ser.BeanSerializerBuilder,Class,"* Builder class used for aggregating deserialization information about\n * a POJO, in order to build a {@link JsonSerializer} for serializing\n * instances.\n * Main reason for using separate builder class is that this makes it easier\n * to make actual serializer class fully immutable.",public ,,
com.fasterxml.jackson.databind.ser.PropertyFilter,Interface,"* Interface that defines API for filter objects use (as configured\n * using {@link com.fasterxml.jackson.annotation.JsonFilter})\n * for filtering bean properties to serialize.\n *<p>\n * Note that this is the replacement for <code>BeanPropertyFilter</code>,\n * which is replaced because it was too closely bound to Bean properties\n * and would not work with {@link java.util.Map}s or ""any getters"".\n *<p>\n * Note that since this is an interface, it is\n * strongly recommended that custom implementations extend\n * {@link com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter},\n * to avoid backwards compatibility issues in case interface needs to change.\n *\n * @since 2.3",public ,,
com.fasterxml.jackson.databind.ser.AnyGetterWriter,Class,"* Class similar to {@link BeanPropertyWriter}, but that will be used\n * for serializing {@link com.fasterxml.jackson.annotation.JsonAnyGetter} annotated\n * (Map) properties",public ,com.fasterxml.jackson.databind.ser.BeanPropertyWriter,java.io.Serializable
com.fasterxml.jackson.databind.ser.VirtualBeanPropertyWriter,Abstract Class,"* {@link BeanPropertyWriter} implementation used with\n * {@link com.fasterxml.jackson.databind.annotation.JsonAppend}\n * to add ""virtual"" properties in addition to regular ones.\n *\n * @since 2.5\n *\n * @see com.fasterxml.jackson.databind.ser.impl.AttributePropertyWriter","public , abstract ",com.fasterxml.jackson.databind.ser.BeanPropertyWriter,java.io.Serializable
com.fasterxml.jackson.databind.ser.SerializerCache,Class,"* Simple cache object that allows for doing 2-level lookups: first level is\n * by ""local"" read-only lookup Map (used without locking)\n * and second backup level is by a shared modifiable HashMap.\n * The idea is that after a while, most serializers are found from the\n * local Map (to optimize performance, reduce lock contention),\n * but that during buildup we can use a shared map to reduce both\n * number of distinct read-only maps constructed, and number of\n * serializers constructed.\n *<p>\n * Cache contains three kinds of entries,\n * based on combination of class pair key. First class in key is for the\n * type to serialize, and second one is type used for determining how\n * to resolve value type. One (but not both) of entries can be null.","public , final ",,
com.fasterxml.jackson.databind.ser.ResolvableSerializer,Interface,"* Interface used to indicate serializers that want to do post-processing\n * after construction and being added to {@link SerializerProvider},\n * but before being used. This is typically used to resolve references\n * to other contained types; for example, bean serializers use this\n * to eagerly find serializers for contained field types.\n *<p>\n * Note that in cases where serializer needs both contextualization and\n * resolution -- that is, implements both this interface and {@link ContextualSerializer}\n * -- resolution via this interface occurs first, and contextual\n * resolution (using {@link ContextualSerializer}) later on.",public ,,
com.fasterxml.jackson.databind.ser.FilterProvider,Abstract Class,"* Interface for objects that providers instances of {@link PropertyFilter}\n * that match given ids. A provider is configured to be used during serialization,\n * to find filter to used based on id specified by {@link com.fasterxml.jackson.annotation.JsonFilter}\n * annotation on bean class.","public , abstract ",,
com.fasterxml.jackson.databind.ser.BeanPropertyFilter,Interface,* Interface that defines API for filter objects use (as configured\n * using {@link com.fasterxml.jackson.annotation.JsonFilter})\n * for filtering bean properties to serialize.\n *<p>\n * Starting with version 2.3 this class is deprecated; use\n * {@link PropertyFilter} instead.\n *\n * @deprecated Since 2.3: use {@link PropertyFilter} instead.,public ,,
com.fasterxml.jackson.databind.ser.BeanSerializerFactory,Class,"* Factory class that can provide serializers for any regular Java beans\n * (as defined by ""having at least one get method recognizable as bean\n * accessor"" -- where {@link Object#getClass} does not count);\n * as well as for ""standard"" JDK types. Latter is achieved\n * by delegating calls to {@link BasicSerializerFactory}\n * to find serializers both for ""standard"" JDK types (and in some cases,\n * sub-classes as is the case for collection classes like\n * {@link java.util.List}s and {@link java.util.Map}s) and bean (value)\n * classes.\n *<p>\n * Note about delegating calls to {@link BasicSerializerFactory}:\n * although it would be nicer to use linear delegation\n * for construction (to essentially dispatch all calls first to the\n * underlying {@link BasicSerializerFactory}; or alternatively after\n * failing to provide bean-based serializer}, there is a problem:\n * priority levels for detecting standard types are mixed. That is,\n * we want to check if a type is a bean after some of ""standard"" JDK\n * types, but before the rest.\n * As a result, ""mixed"" delegation used, and calls are NOT done using\n * regular {@link SerializerFactory} interface but rather via\n * direct calls to {@link BasicSerializerFactory}.\n *<p>\n * Finally, since all caching is handled by the serializer provider\n * (not factory) and there is no configurability, this\n * factory is stateless.\n * This means that a global singleton instance can be used.",public ,com.fasterxml.jackson.databind.ser.BasicSerializerFactory,java.io.Serializable
com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,Abstract Class,"* Base class both for the standard bean serializer, and couple\n * of variants that only differ in small details.\n * Can be used for custom bean serializers as well, although that\n * is not the primary design goal.","public , abstract ",com.fasterxml.jackson.databind.ser.std.StdSerializer,com.fasterxml.jackson.databind.ser.ContextualSerializer;com.fasterxml.jackson.databind.ser.ResolvableSerializer;com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable
com.fasterxml.jackson.databind.ser.std.BooleanSerializer,Class,"* Serializer used for primitive boolean, as well as java.util.Boolean\n * wrapper type.\n *<p>\n * Since this is one of ""natural"" (aka ""native"") types, no type information is ever\n * included on serialization (unlike for most other scalar types)","public , final ",com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,com.fasterxml.jackson.databind.ser.ContextualSerializer
com.fasterxml.jackson.databind.ser.std.BooleanSerializer$AsNumber,Class,* Alternate implementation that is used when values are to be serialized\n     * as numbers <code>0</code> (false) or <code>1</code> (true).\n     *\n     * @since 2.9,"final , static ",com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,com.fasterxml.jackson.databind.ser.ContextualSerializer
com.fasterxml.jackson.databind.ser.std.ByteArraySerializer,Class,"* Unlike other integral number array serializers, we do not just print out byte values\n * as numbers. Instead, we assume that it would make more sense to output content\n * as base64 encoded bytes (using default base64 encoding).\n *<p>\n * NOTE: since it is NOT serialized as an array, cannot use AsArraySerializer as base\n *<p>\n * NOTE: since 2.6, has been a main-level class; earlier was embedded in\n * {@link StdArraySerializers}.",public ,com.fasterxml.jackson.databind.ser.std.StdSerializer,
com.fasterxml.jackson.databind.ser.std.JsonValueSerializer,Class,"* Serializer class that can serialize Object that have a\n * {@link com.fasterxml.jackson.annotation.JsonValue} annotation to\n * indicate that serialization should be done by calling the method\n * annotated, and serializing result it returns.\n *<p>\n * Implementation note: we will post-process resulting serializer\n * (much like what is done with {@link BeanSerializer})\n * to figure out actual serializers for final types.\n *  This must be done from {@link #createContextual} method, and NOT from constructor;\n * otherwise we could end up with an infinite loop.",public ,com.fasterxml.jackson.databind.ser.std.StdSerializer,com.fasterxml.jackson.databind.ser.ContextualSerializer;com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable
com.fasterxml.jackson.databind.ser.std.JsonValueSerializer$TypeSerializerRerouter,Class,* Silly little wrapper class we need to re-route type serialization so that we can\n     * override Object to use for type id (logical type) even when asking serialization\n     * of something else (delegate type),static ,com.fasterxml.jackson.databind.jsontype.TypeSerializer,
com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer,Class,* Simple serializer for {@link InetSocketAddress}.,public ,com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,
com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer,Class,* Generic serializer for Object arrays (<code>Object[]</code>).,public ,com.fasterxml.jackson.databind.ser.std.ArraySerializerBase,com.fasterxml.jackson.databind.ser.ContextualSerializer
com.fasterxml.jackson.databind.ser.std.SqlTimeSerializer,Class,No Comment,public ,com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,
com.fasterxml.jackson.databind.ser.std.IterableSerializer,Class,No Comment,public ,com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase,
com.fasterxml.jackson.databind.ser.std.MapProperty,Class,"* Helper class needed to support flexible filtering of Map properties\n * with generic JSON Filter functionality. Since {@link java.util.Map}s\n * are not handled as a collection of properties by Jackson (unlike POJOs),\n * bit more wrapping is required.",public ,com.fasterxml.jackson.databind.ser.PropertyWriter,
com.fasterxml.jackson.databind.ser.std.UUIDSerializer,Class,"* Specialized {@link JsonSerializer} to output {@link java.util.UUID}s.\n * Beyond optimized access and writing of textual representation (which\n * is the default handling in most cases), it will alternatively\n * allow serialization using raw binary output (as 16-byte block)\n * if underlying data format has efficient means to access that.",public ,com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,com.fasterxml.jackson.databind.ser.ContextualSerializer
com.fasterxml.jackson.databind.ser.std.StdKeySerializers,Abstract Class,No Comment,"public , abstract ",,
com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Default,Class,"* This is a ""chameleon"" style multi-type key serializer for simple\n     * standard JDK types.\n     *<p>\n     * TODO: Should (but does not yet) support re-configuring format used for\n     * {@link java.util.Date} and {@link java.util.Calendar} key serializers,\n     * as well as alternative configuration of Enum key serializers.","public , static ",com.fasterxml.jackson.databind.ser.std.StdSerializer,
com.fasterxml.jackson.databind.ser.std.StdKeySerializers$Dynamic,Class,"* Key serializer used when key type is not known statically, and actual key\n     * serializer needs to be dynamically located.","public , static ",com.fasterxml.jackson.databind.ser.std.StdSerializer,
com.fasterxml.jackson.databind.ser.std.StdKeySerializers$StringKeySerializer,Class,* Simple and fast key serializer when keys are Strings.,"public , static ",com.fasterxml.jackson.databind.ser.std.StdSerializer,
com.fasterxml.jackson.databind.ser.std.StdKeySerializers$EnumKeySerializer,Class,"* Specialized instance to use for Enum keys, as per [databind#1322]\n     *\n     * @since 2.8","public , static ",com.fasterxml.jackson.databind.ser.std.StdSerializer,
com.fasterxml.jackson.databind.ser.std.ToStringSerializerBase,Abstract Class,* Intermediate base class that serves as base for standard {@link ToStringSerializer}\n * as well as for custom subtypes that want to add processing for converting from\n * value to output into its {@code String} representation (whereas standard version\n * simply calls value object's {@code toString()} method).\n *\n * @since 2.10,"public , abstract ",com.fasterxml.jackson.databind.ser.std.StdSerializer,
com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer,Class,"* Serializer implementation where given Java type is first converted\n * to an intermediate ""delegate type"" (using a configured\n * {@link Converter}, and then this delegate value is serialized by Jackson.\n *<p>\n * Note that although types may be related, they must not be same; trying\n * to do this will result in an exception.\n *\n * @since 2.1",public ,com.fasterxml.jackson.databind.ser.std.StdSerializer,com.fasterxml.jackson.databind.ser.ContextualSerializer;com.fasterxml.jackson.databind.ser.ResolvableSerializer;com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable
com.fasterxml.jackson.databind.ser.std.NumberSerializers,Class,* Container class for serializers used for handling standard JDK-provided\n * primitve number types and their wrapper counterparts (like {@link java.lang.Integer}).,public ,,
com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base,
com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntegerSerializer,Class,"* This is the special serializer for regular {@link java.lang.Integer}s\n     * (and primitive ints)\n     * <p>\n     * Since this is one of ""natural"" types, no type information is ever included\n     * on serialization (unlike for most scalar types, except for {@code double}).\n     * <p>\n     * NOTE: as of 2.6, generic signature changed to Object, to avoid generation\n     * of bridge methods.","public , static ",com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base,
com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntLikeSerializer,Class,"* Similar to {@link IntegerSerializer}, but will not cast to Integer:\n     * instead, cast is to {@link java.lang.Number}, and conversion is by\n     * calling {@link java.lang.Number#intValue}.","public , static ",com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base,
com.fasterxml.jackson.databind.ser.std.NumberSerializers$LongSerializer,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base,
com.fasterxml.jackson.databind.ser.std.NumberSerializers$FloatSerializer,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base,
com.fasterxml.jackson.databind.ser.std.NumberSerializers$DoubleSerializer,Class,"* This is the special serializer for regular {@link java.lang.Double}s (and\n     * primitive doubles)\n     * <p>\n     * Since this is one of ""native"" types, no type information is ever included\n     * on serialization (unlike for most scalar types other than {@code long}).","public , static ",com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base,
com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base,Abstract Class,* Shared base class for actual primitive/wrapper number serializers.\n     * Note that this class is not meant as general-purpose base class nor\n     * is it part of public API: you may extend it with the caveat that not\n     * being part of public API its implementation and interfaces may change\n     * in minor releases; however deprecation markers will be used to allow\n     * code evolution.\n     *<p>\n     * NOTE: {@code public} since 2.10: previously had {@code protected} access.,"public , abstract , static ",com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,com.fasterxml.jackson.databind.ser.ContextualSerializer
com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase,Abstract Class,* Base class for serializers that will output contents as JSON\n * arrays; typically serializers used for {@link java.util.Collection}\n * and array types.,"public , abstract ",com.fasterxml.jackson.databind.ser.ContainerSerializer,com.fasterxml.jackson.databind.ser.ContextualSerializer
com.fasterxml.jackson.databind.ser.std.EnumSetSerializer,Class,No Comment,public ,com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase,
com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase,Abstract Class,No Comment,"public , abstract ",com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,com.fasterxml.jackson.databind.ser.ContextualSerializer
com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase,Abstract Class,"* Intermediate base class for Lists, Collections and Arrays\n * that contain static (non-dynamic) value types.","public , abstract ",com.fasterxml.jackson.databind.ser.std.StdSerializer,com.fasterxml.jackson.databind.ser.ContextualSerializer
com.fasterxml.jackson.databind.ser.std.ByteBufferSerializer,Class,No Comment,public ,com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,
com.fasterxml.jackson.databind.ser.std.ClassSerializer,Class,* Also: default bean access will not do much good with Class.class. But\n * we can just serialize the class name and that should be enough.,public ,com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,
com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,Abstract Class,No Comment,"public , abstract ",com.fasterxml.jackson.databind.ser.std.StdSerializer,
com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer,Abstract Class,"* Base implementation for values of {@link ReferenceType}.\n * Implements most of functionality, only leaving couple of abstract\n * methods for sub-classes to implement.\n *\n * @since 2.8","public , abstract ",com.fasterxml.jackson.databind.ser.std.StdSerializer,com.fasterxml.jackson.databind.ser.ContextualSerializer
com.fasterxml.jackson.databind.ser.std.NumberSerializer,Class,"* As a fallback, we may need to use this serializer for other\n * types of {@link Number}s: both custom types and ""big"" numbers\n * like {@link BigInteger} and {@link BigDecimal}.",public ,com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,com.fasterxml.jackson.databind.ser.ContextualSerializer
com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer,Class,No Comment,"final , static ",com.fasterxml.jackson.databind.ser.std.ToStringSerializerBase,
com.fasterxml.jackson.databind.ser.std.ToStringSerializer,Class,"* Simple general purpose serializer, useful for any\n * type for which {@link Object#toString} returns the desired JSON\n * value.\n *<p>\n * Since 2.10 extends {@link ToStringSerializerBase}",public ,com.fasterxml.jackson.databind.ser.std.ToStringSerializerBase,
com.fasterxml.jackson.databind.ser.std.StdJdkSerializers,Class,"* Class that providers access to serializers user for non-structured JDK types that\n * are serializer as scalars; some using basic {@link ToStringSerializer},\n * others explicit serializers.",public ,,
com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicBooleanSerializer,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,
com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicIntegerSerializer,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,
com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicLongSerializer,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,
com.fasterxml.jackson.databind.ser.std.MapSerializer,Class,* Standard serializer implementation for serializing {link java.util.Map} types.\n *<p>\n * Note: about the only configurable setting currently is ability to filter out\n * entries with specified names.,public ,com.fasterxml.jackson.databind.ser.ContainerSerializer,com.fasterxml.jackson.databind.ser.ContextualSerializer
com.fasterxml.jackson.databind.ser.std.RawSerializer,Class,* This is a simple dummy serializer that will just output raw values by calling\n * toString() on value to serialize.,public ,com.fasterxml.jackson.databind.ser.std.StdSerializer,
com.fasterxml.jackson.databind.ser.std.CalendarSerializer,Class,"* Standard serializer for {@link java.util.Calendar}.\n * As with other time/date types, is configurable to produce timestamps\n * (standard Java 64-bit timestamp) or textual formats (usually ISO-8601).",public ,com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase,
com.fasterxml.jackson.databind.ser.std.CollectionSerializer,Class,"* Fallback serializer for cases where Collection is not known to be\n * of type for which more specializer serializer exists (such as\n * index-accessible List).\n * If so, we will just construct an {@link java.util.Iterator}\n * to iterate over elements.",public ,com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase,
com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer,Class,No Comment,public ,com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer,
com.fasterxml.jackson.databind.ser.std.InetAddressSerializer,Class,"* Simple serializer for {@link java.net.InetAddress}. Main complexity is\n * with registration, since same serializer is to be used for sub-classes.\n *<p>\n * Since 2.9 allows use of {@link JsonFormat} configuration (annotation,\n * per-type defaulting) so that if <code>JsonFormat.Shape.NUMBER</code>\n * (or <code>ARRAY</code>) is used, will serialize as ""host address""\n * (dotted numbers) instead of simple conversion.",public ,com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,com.fasterxml.jackson.databind.ser.ContextualSerializer
com.fasterxml.jackson.databind.ser.std.SerializableSerializer,Class,"* Generic handler for types that implement {@link JsonSerializable}.\n *<p>\n * Note: given that this is used for anything that implements\n * interface, cannot be checked for direct class equivalence.",public ,com.fasterxml.jackson.databind.ser.std.StdSerializer,
com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer,Class,No Comment,public ,com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,
com.fasterxml.jackson.databind.ser.std.StringSerializer,Class,"* This is the special serializer for regular {@link java.lang.String}s.\n *<p>\n * Since this is one of ""native"" types, no type information is ever\n * included on serialization (unlike for most scalar types as of 1.5)","public , final ",com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,
com.fasterxml.jackson.databind.ser.std.NonTypedScalarSerializerBase,Abstract Class,"* Intermediate base class for limited number of scalar types\n * that should never include type information. These are ""native""\n * types that are default mappings for corresponding JSON scalar\n * types: {@link java.lang.String}, {@link java.lang.Integer},\n * {@link java.lang.Double} and {@link java.lang.Boolean}.","public , abstract ",com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,
com.fasterxml.jackson.databind.ser.std.ArraySerializerBase,Abstract Class,* Intermediate base class for serializers used for various\n * Java arrays.\n *\n * @param <T> Type of arrays serializer handles,"public , abstract ",com.fasterxml.jackson.databind.ser.ContainerSerializer,com.fasterxml.jackson.databind.ser.ContextualSerializer
com.fasterxml.jackson.databind.ser.std.DateSerializer,Class,"* For efficiency, we will serialize Dates as longs, instead of\n * potentially more readable Strings.",public ,com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase,
com.fasterxml.jackson.databind.ser.std.NullSerializer,Class,"* This is a simple dummy serializer that will just output literal\n * JSON null value whenever serialization is requested.\n * Used as the default ""null serializer"" (which is used for serializing\n * null object references unless overridden), as well as for some\n * more exotic types (java.lang.Void).",public ,com.fasterxml.jackson.databind.ser.std.StdSerializer,
com.fasterxml.jackson.databind.ser.std.SqlDateSerializer,Class,"* Compared to regular {@link java.util.Date} serialization, we do use String\n * representation here. Why? Basically to truncate of time part, since\n * that should not be used by plain SQL date.",public ,com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase,
com.fasterxml.jackson.databind.ser.std.TokenBufferSerializer,Class,"* We also want to directly support serialization of {@link TokenBuffer};\n * and since it is part of core package, it cannot implement\n * {@link com.fasterxml.jackson.databind.JsonSerializable}\n * (which is only included in the mapper package)",public ,com.fasterxml.jackson.databind.ser.std.StdSerializer,
com.fasterxml.jackson.databind.ser.std.StdKeySerializer,Class,"* Specialized serializer that can be used as the generic key serializer,\n * when serializing {@link java.util.Map}s to JSON Objects.\n *\n * @deprecated Since 2.8, use {@link StdKeySerializers.Default} instead.",public ,com.fasterxml.jackson.databind.ser.std.StdSerializer,
com.fasterxml.jackson.databind.ser.std.StdSerializer,Abstract Class,"* Base class used by all standard serializers, and can also\n * be used for custom serializers (in fact, this is the recommended\n * base class to use).","public , abstract ",com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;com.fasterxml.jackson.databind.jsonschema.SchemaAware;java.io.Serializable
com.fasterxml.jackson.databind.ser.std.EnumSerializer,Class,* Standard serializer used for {@link java.lang.Enum} types.\n *<p>\n * Based on {@link StdScalarSerializer} since the JSON value is\n * scalar (String).,public ,com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,com.fasterxml.jackson.databind.ser.ContextualSerializer
com.fasterxml.jackson.databind.ser.std.FileSerializer,Class,"* For now, File objects get serialized by just outputting\n * absolute (but not canonical) name as String value",public ,com.fasterxml.jackson.databind.ser.std.StdScalarSerializer,
com.fasterxml.jackson.databind.ser.std.ToEmptyObjectSerializer,Class,"* Simple ""bogus"" serializer that will just serialize an empty\n * Object for any given value.\n * Quite similar to {@code UnknownSerializer} with the exception that\n * serialization never fails.\n *\n * @since 2.13",public ,com.fasterxml.jackson.databind.ser.std.StdSerializer,
com.fasterxml.jackson.databind.ser.std.StdArraySerializers,Class,* Dummy container class to group standard homogenous array serializer implementations\n * (primitive arrays and String array).,public ,,
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.ser.std.ArraySerializerBase,
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.ser.std.StdArraySerializers.TypedPrimitiveArraySerializer,
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer,Class,"* Character arrays are different from other integral number arrays in that\n     * they are most likely to be textual data, and should be written as\n     * Strings, not arrays of entries.\n     *<p>\n     * NOTE: since it is NOT serialized as an array, cannot use AsArraySerializer as base","public , static ",com.fasterxml.jackson.databind.ser.std.StdSerializer,
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.ser.std.ArraySerializerBase,
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$LongArraySerializer,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.ser.std.StdArraySerializers.TypedPrimitiveArraySerializer,
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.ser.std.StdArraySerializers.TypedPrimitiveArraySerializer,
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$DoubleArraySerializer,Class,No Comment,"public , static ",com.fasterxml.jackson.databind.ser.std.ArraySerializerBase,
com.fasterxml.jackson.databind.ser.std.StdArraySerializers$TypedPrimitiveArraySerializer,Abstract Class,* Intermediate base class used for cases where we may add\n     * type information (excludes boolean/int/double arrays).,"protected , abstract , static ",com.fasterxml.jackson.databind.ser.std.ArraySerializerBase,
com.fasterxml.jackson.databind.ser.PropertyWriter,Abstract Class,"* Base class for writers used to output property values (name-value pairs)\n * as key/value pairs via streaming API. This is the most generic abstraction\n * implemented by both POJO and {@link java.util.Map} serializers, and invoked\n * by filtering functionality.\n *\n * @since 2.3","public , abstract ",com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase,java.io.Serializable
com.fasterxml.jackson.databind.ser.BeanSerializerModifier,Abstract Class,"* Abstract class that defines API for objects that can be registered (for {@link BeanSerializerFactory}\n * to participate in constructing {@link BeanSerializer} instances.\n * This is typically done by modules that want alter some aspects of serialization\n * process; and is preferable to sub-classing of {@link BeanSerializerFactory}.\n *<p>\n * Sequence in which callback methods are called is as follows:\n * <ol>\n *  <li>After factory has collected tentative set of properties (instances of\n *     <code>BeanPropertyWriter</code>) is sent for modification via\n *     {@link #changeProperties}. Changes can include removal, addition and\n *     replacement of suggested properties.\n *  <li>Resulting set of properties are ordered (sorted) by factory, as per\n *     configuration, and then {@link #orderProperties} is called to allow\n *     modifiers to alter ordering.\n *  <li>After all bean properties and related information is accumulated,\n *     {@link #updateBuilder} is called with builder, to allow builder state\n *     to be modified (including possibly replacing builder itself if necessary)\n *  <li>Once all bean information has been determined,\n *     factory creates default {@link BeanSerializer} instance and passes\n *     it to modifiers using {@link #modifySerializer}, for possible\n *     modification or replacement (by any {@link com.fasterxml.jackson.databind.JsonSerializer} instance)\n * </ol>\n *<p>\n * Default method implementations are ""no-op""s, meaning that methods are implemented\n * but have no effect.\n *<p>\n * NOTE: in Jackson 3.x this class will be renamed as {@code ValueSerializerModifier}","public , abstract ",,java.io.Serializable
com.fasterxml.jackson.databind.ser.BasicSerializerFactory,Abstract Class,"* Factory class that can provide serializers for standard JDK classes,\n * as well as custom classes that extend standard classes or implement\n * one of ""well-known"" interfaces (such as {@link java.util.Collection}).\n *<p>\n * Since all the serializers are eagerly instantiated, and there is\n * no additional introspection or customizability of these types,\n * this factory is essentially stateless.","public , abstract ",com.fasterxml.jackson.databind.ser.SerializerFactory,java.io.Serializable
com.fasterxml.jackson.databind.ser.ContextualSerializer,Interface,"* Add-on interface that {@link JsonSerializer}s can implement to get a callback\n * that can be used to create contextual instances of serializer to use for\n * handling properties of supported type. This can be useful\n * for serializers that can be configured by annotations, or should otherwise\n * have differing behavior depending on what kind of property is being serialized.\n *<p>\n * Note that in cases where serializer needs both contextualization and\n * resolution -- that is, implements both this interface and {@link ResolvableSerializer}\n * -- resolution via {@link ResolvableSerializer} occurs first, and contextual\n * resolution (via this interface) later on.",public ,,
com.fasterxml.jackson.databind.ser.BeanSerializer,Class,"* Serializer class that can serialize Java objects that map\n * to JSON Object output. Internally handling is mostly dealt with\n * by a sequence of {@link BeanPropertyWriter}s that will handle\n * access value to serialize and call appropriate serializers to\n * write out JSON.\n *<p>\n * Implementation note: we will post-process resulting serializer,\n * to figure out actual serializers for final types. This must be\n * done from {@link #resolve} method, and NOT from constructor;\n * otherwise we could end up with an infinite loop.",public ,com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,
com.fasterxml.jackson.databind.ser.ContainerSerializer,Abstract Class,"* Intermediate base class for serializers used for serializing\n * types that contain element(s) of other types, such as arrays,\n * {@link java.util.Collection}s (<code>Lists</code>, <code>Sets</code>\n * etc) and {@link java.util.Map}s and iterable things\n * ({@link java.util.Iterator}s).","public , abstract ",com.fasterxml.jackson.databind.ser.std.StdSerializer,
com.fasterxml.jackson.databind.ser.SerializerFactory,Abstract Class,* Abstract class that defines API used by {@link SerializerProvider}\n * to obtain actual\n * {@link JsonSerializer} instances from multiple distinct factories.,"public , abstract ",,
com.fasterxml.jackson.databind.ser.PropertyBuilder,Class,* Helper class for {@link BeanSerializerFactory} that is used to\n * construct {@link BeanPropertyWriter} instances. Can be sub-classed\n * to change behavior.,public ,,
com.fasterxml.jackson.databind.ser.BeanPropertyWriter,Class,"* Base bean property handler class, which implements common parts of\n * reflection-based functionality for accessing a property value and serializing\n * it.\n * <p>\n * Note that current design tries to keep instances immutable (semi-functional\n * style); mostly because these instances are exposed to application code and\n * this is to reduce likelihood of data corruption and synchronization issues.",public ,com.fasterxml.jackson.databind.ser.PropertyWriter,java.io.Serializable
com.fasterxml.jackson.databind.ObjectReader,Class,"* Builder object that can be used for per-serialization configuration of\n * deserialization parameters, such as root type to use or object\n * to update (instead of constructing new instance).\n *<p>\n * Uses ""mutant factory"" pattern so that instances are immutable\n * (and thus fully thread-safe with no external synchronization);\n * new instances are constructed for different configurations.\n * Instances are initially constructed by {@link ObjectMapper} and can be\n * reused, shared, cached; both because of thread-safety and because\n * instances are relatively light-weight.\n *<p>\n * NOTE: this class is NOT meant as sub-classable (with Jackson 2.8 and\n * above) by users. It is left as non-final mostly to allow frameworks\n * that require bytecode generation for proxying and similar use cases,\n * but there is no expecation that functionality should be extended\n * by sub-classing.",public ,com.fasterxml.jackson.core.ObjectCodec,com.fasterxml.jackson.core.Versioned;java.io.Serializable
com.fasterxml.jackson.databind.SequenceWriter,Class,"* Writer class similar to {@link ObjectWriter}, except that it can be used\n * for writing sequences of values, not just a single value.\n * The main use case is in writing very long sequences, or sequences where\n * values are incrementally produced; cases where it would be impractical\n * or at least inconvenient to construct a wrapper container around values\n * (or where no JSON array is desired around values).\n *<p>\n * Differences from {@link ObjectWriter} include:\n *<ul>\n *  <li>Instances of {@link SequenceWriter} are stateful, and not thread-safe:\n *    if sharing, external synchronization must be used.\n *  <li>Explicit {@link #close} is needed after all values have been written\n *     ({@link ObjectWriter} can auto-close after individual value writes)\n *</ul>\n *\n * @since 2.5",public ,,com.fasterxml.jackson.core.Versioned;java.io.Closeable;java.io.Flushable
com.fasterxml.jackson.databind.node.NullNode,Class,* This singleton value class is used to contain explicit JSON null\n * value.,public ,com.fasterxml.jackson.databind.node.ValueNode,
com.fasterxml.jackson.databind.node.JsonNodeFactory,Class,"* Base class that specifies methods for getting access to\n * Node instances (newly constructed, or shared, depending\n * on type), as well as basic implementation of the methods.\n * Designed to be sub-classed if extended functionality (additions\n * to behavior of node types, mostly) is needed.\n *<p>\n * One configuration option in the default implementation is that\n * of whether\n * {@link DecimalNode} instances must be built with exact representations of\n * {@link BigDecimal} instances; or to use ""normalized"" instance.\n * This has quite an influence since, for instance, a {@link BigDecimal} (and,\n * therefore, a {@code DecimalNode}) constructed from input string {@code ""1.0""} and\n * another constructed with input string {@code ""1.00""} <b>will not</b> be\n * equal unless normalized since their scale differs (1 in the first case,\n * 2 in the second case).\n * Normalization, if enabled, means simply calling {@link BigDecimal#stripTrailingZeros()}.\n *<p>\n * Note that configuration of ""normalization"" changed in 2.15:\n * while {@code JsonNodeFactory} still has a default setting,\n * the intent is to deprecate and remove this, to be replaced by\n * new {@link com.fasterxml.jackson.databind.cfg.JsonNodeFeature#STRIP_TRAILING_BIGDECIMAL_ZEROES}\n * setting.\n * Default setting in 2.15 is to ENABLE normalization: this will likely\n * change at latest in Jackson 3.0 (to leave {@code BigDecimal} values as\n * they are).\n * Note, too, that this factory will no longer handle this normalization\n * (if enabled): caller (like {@link com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer})\n * is expected to handle it.",public ,,java.io.Serializable;com.fasterxml.jackson.databind.node.JsonNodeCreator
com.fasterxml.jackson.databind.node.ShortNode,Class,* Numeric node that contains simple 16-bit integer values.,public ,com.fasterxml.jackson.databind.node.NumericNode,
com.fasterxml.jackson.databind.node.BigIntegerNode,Class,* Numeric node that contains simple 64-bit integer values.,public ,com.fasterxml.jackson.databind.node.NumericNode,
com.fasterxml.jackson.databind.node.NodeSerialization,Class,* Helper value class only used during JDK serialization: contains JSON as `byte[]`\n *\n * @since 2.10,default,,java.io.Serializable;java.io.Externalizable
com.fasterxml.jackson.databind.node.BinaryNode,Class,"* Value node that contains Base64 encoded binary value, which will be\n * output and stored as Json String value.",public ,com.fasterxml.jackson.databind.node.ValueNode,
com.fasterxml.jackson.databind.node.DecimalNode,Class,"* Numeric node that contains values that do not fit in simple\n * integer (int, long) or floating point (double) values.",public ,com.fasterxml.jackson.databind.node.NumericNode,
com.fasterxml.jackson.databind.node.InternalNodeMapper,Class,"* Helper class used to implement {@code toString()} method for\n * {@link BaseJsonNode}, by embedding a private instance of\n * {@link JsonMapper}, only to be used for node serialization.\n *\n * @since 2.10 (but not to be included in 3.0)",final ,,
com.fasterxml.jackson.databind.node.InternalNodeMapper$WrapperForSerializer,Class,* Intermediate serializer we need to implement non-recursive serialization of\n     * {@link BaseJsonNode}.\n     *<p>\n     * NOTE: not designed as thread-safe; instances must NOT be shared or reused.\n     *\n     * @since 2.14,"protected , static ",com.fasterxml.jackson.databind.JsonSerializable.Base,
com.fasterxml.jackson.databind.node.InternalNodeMapper$IteratorStack,Class,* Optimized variant similar in functionality to (a subset of)\n     * {@link java.util.ArrayDeque}; used to hold enclosing Array/Object\n     * nodes during recursion-as-iteration.,"final , static ",,
com.fasterxml.jackson.databind.node.MissingNode,Class,"* This singleton node class is generated to denote ""missing nodes""\n * along paths that do not exist. For example, if a path via\n * element of an array is requested for an element outside range\n * of elements in the array; or for a non-array value, result\n * will be reference to this node.\n *<p>\n * In most respects this placeholder node will act as {@link NullNode};\n * for example, for purposes of value conversions, value is considered\n * to be null and represented as value zero when used for numeric\n * conversions.","public , final ",com.fasterxml.jackson.databind.node.ValueNode,
com.fasterxml.jackson.databind.node.DoubleNode,Class,"* Numeric node that contains 64-bit (""double precision"")\n * floating point values simple 32-bit integer values.",public ,com.fasterxml.jackson.databind.node.NumericNode,
com.fasterxml.jackson.databind.node.ObjectNode,Class,* Node that maps to JSON Object structures in JSON content.\n *<p>\n * Note: class was <code>final</code> temporarily for Jackson 2.2.,public ,com.fasterxml.jackson.databind.node.ContainerNode,java.io.Serializable
com.fasterxml.jackson.databind.node.BaseJsonNode,Abstract Class,"* Abstract base class common to all standard {@link JsonNode}\n * implementations.\n * The main addition here is that we declare that sub-classes must\n * implement {@link JsonSerializable}.\n * This simplifies object mapping aspects a bit, as no external serializers are needed.\n *<p>\n * Since 2.10, all implements have been {@link java.io.Serializable}.","public , abstract ",com.fasterxml.jackson.databind.JsonNode,java.io.Serializable
com.fasterxml.jackson.databind.node.JsonNodeCreator,Interface,"* Interface that defines common ""creator"" functionality implemented\n * both by {@link JsonNodeFactory} and {@link ContainerNode} (that is,\n * JSON Object and Array nodes).\n *\n * @since 2.3",public ,,
com.fasterxml.jackson.databind.node.IntNode,Class,* Numeric node that contains simple 32-bit integer values.,public ,com.fasterxml.jackson.databind.node.NumericNode,
com.fasterxml.jackson.databind.node.JsonNodeType,Enum,"* Enumeration of JSON types.\n * Covers all JSON types defined by <a\n * href=""http://tools.ietf.org/html/rfc4627"">RFC 4627</a> (array, boolean,\n * null, number, object and string) but also Jackson-specific types: binary,\n * missing and POJO; although does not distinguish between more granular\n * types.\n *\n * @see BinaryNode\n * @see MissingNode\n * @see POJONode\n *\n * @since 2.2",public ,enum has no extends,
com.fasterxml.jackson.databind.node.POJONode,Class,"* Value node that contains a wrapped POJO, to be serialized as\n * a JSON constructed through data mapping (usually done by\n * calling {@link com.fasterxml.jackson.databind.ObjectMapper}).",public ,com.fasterxml.jackson.databind.node.ValueNode,
com.fasterxml.jackson.databind.node.ValueNode,Abstract Class,"* This intermediate base class is used for all leaf nodes, that is,\n * all non-container (array or object) nodes, except for the\n * ""missing node"".","public , abstract ",com.fasterxml.jackson.databind.node.BaseJsonNode,
com.fasterxml.jackson.databind.node.TextNode,Class,* Value node that contains a text value.,public ,com.fasterxml.jackson.databind.node.ValueNode,
com.fasterxml.jackson.databind.node.NodeCursor,Abstract Class,* Helper class used by {@link TreeTraversingParser} to keep track\n * of current location within traversed JSON tree.,abstract ,com.fasterxml.jackson.core.JsonStreamContext,
com.fasterxml.jackson.databind.node.NodeCursor$RootCursor,Class,* Context for all root-level value nodes (including Arrays and Objects):\n     * only context for scalar values.,"protected , final , static ",com.fasterxml.jackson.databind.node.NodeCursor,
com.fasterxml.jackson.databind.node.NodeCursor$ArrayCursor,Class,Cursor used for traversing JSON Array nodes,"protected , final , static ",com.fasterxml.jackson.databind.node.NodeCursor,
com.fasterxml.jackson.databind.node.NodeCursor$ObjectCursor,Class,Cursor used for traversing JSON Object nodes,"protected , final , static ",com.fasterxml.jackson.databind.node.NodeCursor,
com.fasterxml.jackson.databind.node.NumericNode,Abstract Class,* Intermediate value node used for numeric nodes.,"public , abstract ",com.fasterxml.jackson.databind.node.ValueNode,
com.fasterxml.jackson.databind.node.TreeTraversingParser,Class,"* Facade over {@link JsonNode} that implements {@link JsonParser} to allow\n * accessing contents of JSON tree in alternate form (stream of tokens).\n * Useful when a streaming source is expected by code, such as data binding\n * functionality.",public ,com.fasterxml.jackson.core.base.ParserMinimalBase,
com.fasterxml.jackson.databind.node.ArrayNode,Class,* Node class that represents Arrays mapped from JSON content.\n *<p>\n * Note: class was <code>final</code> temporarily for Jackson 2.2.,public ,com.fasterxml.jackson.databind.node.ContainerNode,java.io.Serializable
com.fasterxml.jackson.databind.node.LongNode,Class,* Numeric node that contains simple 64-bit integer values.,public ,com.fasterxml.jackson.databind.node.NumericNode,
com.fasterxml.jackson.databind.node.ContainerNode,Abstract Class,"* This intermediate base class is used for all container nodes,\n * specifically, array and object nodes.","public , abstract ",com.fasterxml.jackson.databind.node.BaseJsonNode,com.fasterxml.jackson.databind.node.JsonNodeCreator
com.fasterxml.jackson.databind.node.FloatNode,Class,* <code>JsonNode</code> implementation for efficiently containing 32-bit\n * `float` values.\n *\n * @since 2.2,public ,com.fasterxml.jackson.databind.node.NumericNode,
com.fasterxml.jackson.databind.node.BooleanNode,Class,"* This concrete value class is used to contain boolean (true / false)\n * values. Only two instances are ever created, to minimize memory\n * usage.",public ,com.fasterxml.jackson.databind.node.ValueNode,
com.fasterxml.jackson.databind.InjectableValues,Abstract Class,"* Abstract class that defines API for objects that provide value to\n * ""inject"" during deserialization. An instance of this object","public , abstract ",,
com.fasterxml.jackson.databind.InjectableValues$Std,Class,"* Simple standard implementation which uses a simple Map to\n     * store values to inject, identified by simple String keys.","public , static ",com.fasterxml.jackson.databind.InjectableValues,java.io.Serializable
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor,Interface,No Comment,public ,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWithSerializerProvider,
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor$Base,Class,"* Default ""empty"" implementation, useful as the base to start on;\n     * especially as it is guaranteed to implement all the method\n     * of the interface, even if new methods are getting added.","public , static ",,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor,Interface,No Comment,public ,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor,
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor$Base,Class,"* Default ""empty"" implementation, useful as the base to start on;\n     * especially as it is guaranteed to implement all the method\n     * of the interface, even if new methods are getting added.","public , static ",com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor.Base,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable,Interface,* Interface {@link com.fasterxml.jackson.databind.JsonSerializer} implements\n * to allow for visiting type hierarchy.,public ,,
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor,Interface,"* Visitor called when properties of a type that maps to JSON Object\n * are being visited: this usually means POJOs, but sometimes other\n * types use it too (like {@link java.util.EnumMap}).",public ,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWithSerializerProvider,
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor$Base,Class,"* Default ""empty"" implementation, useful as the base to start on;\n     * especially as it is guaranteed to implement all the method\n     * of the interface, even if new methods are getting added.","public , static ",,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes,Enum,No Comment,public ,enum has no extends,
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor,Interface,No Comment,public ,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor,
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor$Base,Class,"* Default ""empty"" implementation, useful as the base to start on;\n     * especially as it is guaranteed to implement all the method\n     * of the interface, even if new methods are getting added.","public , static ",com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor.Base,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat,Enum,* This enum represents the encoded format for a jsonSchema value type\n * @author jphelan\n *,public ,enum has no extends,
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor,Interface,No Comment,public ,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWithSerializerProvider,
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor$Base,Class,"* Default ""empty"" implementation, useful as the base to start on;\n     * especially as it is guaranteed to implement all the method\n     * of the interface, even if new methods are getting added.","public , static ",,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonMapFormatVisitor
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNullFormatVisitor,Interface,No Comment,public ,,
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNullFormatVisitor$Base,Class,"* Default ""empty"" implementation, useful as the base to start on;\n     * especially as it is guaranteed to implement all the method\n     * of the interface, even if new methods are getting added.","public , static ",,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNullFormatVisitor
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor,Interface,No Comment,public ,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor,
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor$Base,Class,"* Default ""empty"" implementation, useful as the base to start on;\n     * especially as it is guaranteed to implement all the method\n     * of the interface, even if new methods are getting added.","public , static ",com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor.Base,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor,Interface,No Comment,public ,,
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor$Base,Class,"* Default ""empty"" implementation, useful as the base to start on;\n     * especially as it is guaranteed to implement all the method\n     * of the interface, even if new methods are getting added.","public , static ",,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWithSerializerProvider,Interface,* @author jphelan,public ,,
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor,Interface,No Comment,public ,,
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor$Base,Class,"* Default ""empty"" implementation, useful as the base to start on;\n     * especially as it is guaranteed to implement all the method\n     * of the interface, even if new methods are getting added.","public , static ",,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,Interface,"* Interface for visitor callbacks, when type in question can be any of\n * legal JSON types.\n *<p>\n * In most cases it will make more sense to extend {@link JsonFormatVisitorWrapper.Base}\n * instead of directly implementing this interface.",public ,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWithSerializerProvider,
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper$Base,Class,"* Empty ""no-op"" implementation of {@link JsonFormatVisitorWrapper}, suitable for\n     * sub-classing. Does implement {@link #setProvider(SerializerProvider)} and\n     * {@link #getProvider()} as expected; other methods simply return null\n     * and do nothing.\n     *\n     * @since 2.5","public , static ",,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonBooleanFormatVisitor,Interface,No Comment,public ,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor,
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonBooleanFormatVisitor$Base,Class,"* Default ""empty"" implementation, useful as the base to start on;\n     * especially as it is guaranteed to implement all the method\n     * of the interface, even if new methods are getting added.","public , static ",com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormatVisitor.Base,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonBooleanFormatVisitor
com.fasterxml.jackson.databind.MappingJsonFactory,Class,* Sub-class of {@link JsonFactory} that will create a proper\n * {@link ObjectCodec} to allow seam-less conversions between\n * JSON content and Java objects (POJOs).\n * The only addition to regular {@link JsonFactory} currently\n * is that {@link ObjectMapper} is constructed and passed as\n * the codec to use.,public ,com.fasterxml.jackson.core.JsonFactory,
com.fasterxml.jackson.databind.PropertyNamingStrategy,Class,"* Class that defines how names of JSON properties (""external names"")\n * are derived from names of POJO methods and fields (""internal names""),\n * in cases where no explicit annotations exist for naming.\n * Methods are passed information about POJO member for which name is needed,\n * as well as default name that would be used if no custom strategy was used.\n *<p>\n * Default (empty) implementation returns suggested (""implicit"" or ""default"") name unmodified\n *<p>\n * Note that the strategy is guaranteed to be called once per logical property\n * (which may be represented by multiple members; such as pair of a getter and\n * a setter), but may be called for each: implementations should not count on\n * exact number of times, and should work for any member that represent a\n * property.\n * Also note that calls are made during construction of serializers and deserializers\n * which are typically cached, and not for every time serializer or deserializer\n * is called.\n *<p>\n * In absence of a registered custom strategy, the default Java property naming strategy\n * is used, which leaves field names as is, and removes set/get/is prefix\n * from methods (as well as lower-cases initial sequence of capitalized\n * characters).\n *<p>\n * NOTE! Since 2.12 sub-classes defined here (as well as static singleton instances thereof)\n * are deprecated due to\n * <a href=""https://github.com/FasterXML/jackson-databind/issues/2715"">databind#2715</a>.\n * Please use constants and classes in {@link PropertyNamingStrategies} instead.\n *",public ,,java.io.Serializable
com.fasterxml.jackson.databind.PropertyNamingStrategy$SnakeCaseStrategy,Class,"* @deprecated Since 2.12 use {@link PropertyNamingStrategies.SnakeCaseStrategy} instead\n     * (see\n     * <a href=""https://github.com/FasterXML/jackson-databind/issues/2715"">databind#2715</a>\n     * for reason for deprecation)","public , static ",com.fasterxml.jackson.databind.PropertyNamingStrategy.PropertyNamingStrategyBase,
com.fasterxml.jackson.databind.PropertyNamingStrategy$UpperCamelCaseStrategy,Class,"* @deprecated Since 2.12 use {@link PropertyNamingStrategies.UpperCamelCaseStrategy} instead\n     * (see\n     * <a href=""https://github.com/FasterXML/jackson-databind/issues/2715"">databind#2715</a>\n     * for reason for deprecation)","public , static ",com.fasterxml.jackson.databind.PropertyNamingStrategy.PropertyNamingStrategyBase,
com.fasterxml.jackson.databind.PropertyNamingStrategy$LowerCaseStrategy,Class,"* @deprecated Since 2.12 use {@link PropertyNamingStrategies.LowerCaseStrategy} instead\n     * (see\n     * <a href=""https://github.com/FasterXML/jackson-databind/issues/2715"">databind#2715</a>\n     * for reason for deprecation)","public , static ",com.fasterxml.jackson.databind.PropertyNamingStrategy.PropertyNamingStrategyBase,
com.fasterxml.jackson.databind.PropertyNamingStrategy$KebabCaseStrategy,Class,"* @deprecated Since 2.12 use {@link PropertyNamingStrategies.KebabCaseStrategy} instead\n     * (see\n     * <a href=""https://github.com/FasterXML/jackson-databind/issues/2715"">databind#2715</a>\n     * for reason for deprecation)","public , static ",com.fasterxml.jackson.databind.PropertyNamingStrategy.PropertyNamingStrategyBase,
com.fasterxml.jackson.databind.PropertyNamingStrategy$LowerDotCaseStrategy,Class,"* @deprecated Since 2.12 use {@link PropertyNamingStrategies.LowerDotCaseStrategy} instead\n     * (see\n     * <a href=""https://github.com/FasterXML/jackson-databind/issues/2715"">databind#2715</a>\n     * for reason for deprecation)","public , static ",com.fasterxml.jackson.databind.PropertyNamingStrategy.PropertyNamingStrategyBase,
com.fasterxml.jackson.databind.PropertyNamingStrategy$PropertyNamingStrategyBase,Abstract Class,"* @deprecated Since 2.12 deprecated. See\n     * <a href=""https://github.com/FasterXML/jackson-databind/issues/2715"">databind#2715</a>\n     * for reasons for deprecation.","public , static , abstract ",com.fasterxml.jackson.databind.PropertyNamingStrategy,
com.fasterxml.jackson.databind.AnnotationIntrospector,Abstract Class,"* Abstract class that defines API used for introspecting annotation-based\n * configuration for serialization and deserialization. Separated\n * so that different sets of annotations can be supported, and support\n * plugged-in dynamically.\n *<p>\n * Although default implementations are based on using annotations as the only\n * (or at least main) information source, custom implementations are not limited\n * in such a way, and in fact there is no expectation they should be. So the name\n * is bit of misnomer; this is a general configuration introspection facility.\n *<p>\n * NOTE: due to rapid addition of new methods (and changes to existing methods),\n * it is <b>strongly</b> recommended that custom implementations should not directly\n * extend this class, but rather extend {@link NopAnnotationIntrospector}.\n * This way added methods will not break backwards compatibility of custom annotation\n * introspectors.","public , abstract ",,com.fasterxml.jackson.core.Versioned;java.io.Serializable
com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty,Class,"* Value type used with managed and back references; contains type and\n     * logic name, used to link related references","public , static ",,
com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty$Type,Enum,No Comment,public ,enum has no extends,
com.fasterxml.jackson.databind.AnnotationIntrospector$XmlExtensions,Interface,"* Add-on extension used for XML-specific configuration, needed to decouple\n     * format module functionality from pluggable introspection functionality\n     * (especially JAXB-annotation related one).\n     *\n     * @since 2.13",public ,,
com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty.Type,Enum,No Comment,public ,enum has no extends,
com.fasterxml.jackson.databind.EnumNamingStrategy,Interface,* Defines how the string representation of an enum is converted into an external property name for mapping\n * during deserialization.\n *\n * @since 2.15,public ,,
com.fasterxml.jackson.databind.ObjectWriter,Class,"* Builder object that can be used for per-serialization configuration of\n * serialization parameters, such as JSON View and root type to use.\n * (and thus fully thread-safe with no external synchronization);\n * new instances are constructed for different configurations.\n * Instances are initially constructed by {@link ObjectMapper} and can be\n * reused in completely thread-safe manner with no explicit synchronization",public ,,com.fasterxml.jackson.core.Versioned;java.io.Serializable
com.fasterxml.jackson.databind.ObjectWriter$GeneratorSettings,Class,* Helper class used for containing settings specifically related\n     * to (re)configuring {@link JsonGenerator} constructed for\n     * writing output.\n     *\n     * @since 2.5,"public , final , static ",,java.io.Serializable
com.fasterxml.jackson.databind.ObjectWriter$Prefetch,Class,"* As a minor optimization, we will make an effort to pre-fetch a serializer,\n     * or at least relevant <code>TypeSerializer</code>, if given enough\n     * information.\n     *\n     * @since 2.5","public , final , static ",,java.io.Serializable
com.fasterxml.jackson.databind.MappingIterator,Class,* Iterator exposed by {@link ObjectMapper} when binding sequence of\n * objects. Extension is done to allow more convenient exposing of\n * {@link IOException} (which basic {@link Iterator} does not expose),public ,,java.util.Iterator;java.io.Closeable
com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder,Interface,"* Interface that defines builders that are configured based on\n * annotations (like {@link com.fasterxml.jackson.annotation.JsonTypeInfo} or JAXB annotations),\n * and produce type serializers and deserializers used for\n * handling type information embedded in JSON to allow for safe\n * polymorphic type handling.\n *<p>\n * Builder is first initialized by calling {@link #init} method, and then\n * configured using 'set' methods like {@link #inclusion}.\n * Finally, after calling all configuration methods,\n * {@link #buildTypeSerializer} or {@link #buildTypeDeserializer}\n * will be called to get actual type resolver constructed\n * and used for resolving types for configured base type and its\n * subtypes.\n *<p>\n * Note that instances are used for two related but distinct use cases:\n *<ul>\n * <li>To create builders to use with explicit type information\n *    inclusion (usually via <code>@JsonTypeInfo</code> annotation)\n *   </li>\n * <li>To create builders when ""default typing"" is used; if so, type information\n *   is automatically included for certain kind of types, regardless of annotations\n *   </li>\n *</ul>\n * Important distinction between the cases is that in first case, calls to\n * create builders are only made when builders are certainly needed; whereas\n * in second case builder has to first verify whether type information is\n * applicable for given type, and if not, just return null to indicate this.",public ,,
com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer,Class,"* Type serializer that preferably embeds type information as an additional\n * JSON Object property, if possible (when resulting serialization would\n * use JSON Object). If this is not possible (for JSON Arrays, scalars),\n * uses a JSON Array wrapper (similar to how\n * {@link As#WRAPPER_ARRAY} always works) as a fallback.",public ,com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer,
com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase,Abstract Class,No Comment,"public , abstract ",com.fasterxml.jackson.databind.jsontype.TypeSerializer,
com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer,Class,* Type serializer used with {@link As#EXISTING_PROPERTY} inclusion mechanism.\n * Expects type information to be a well-defined property on all sub-classes.,public ,com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer,
com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver,Class,"* Specialization of {@link ClassNameIdResolver} that instead uses a\n * ""minimal"" derivation of {@link Class} name, using relative reference\n * from the base type (base class) that polymorphic value has.",public ,com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver,
com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer,Class,"* Type serializer that will embed type information in an array,\n * as the first element, and actual value as the second element.",public ,com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase,
com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer,Class,"* Type serializer that preferably embeds type information as an ""external""\n * type property; embedded in enclosing JSON object.\n * Note that this serializer should only be used when value is being output\n * at JSON Object context; otherwise it cannot work reliably, and will have\n * to revert operation similar to {@link AsPropertyTypeSerializer}.\n *<p>\n * Note that implementation of serialization is bit cumbersome as we must\n * serialized external type id AFTER object; this because callback only\n * occurs after field name has been written.\n *<p>\n * Also note that this type of type id inclusion will NOT try to make use\n * of native Type Ids, even if those exist.",public ,com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase,
com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase,Abstract Class,"* Partial base implementation of {@link TypeIdResolver}: all custom implementations\n * are <b>strongly</b> recommended to extend this class, instead of directly\n * implementing {@link TypeIdResolver}.\n * Note that ALL sub-class need to re-implement\n * {@link #typeFromId(DatabindContext, String)} method; otherwise implementation\n * will not work.\n *<p>\n * Note that instances created to be constructed from annotations\n * ({@link com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver})\n * are always created using no-arguments constructor; protected constructor\n * is only used sub-classes.","public , abstract ",,com.fasterxml.jackson.databind.jsontype.TypeIdResolver
com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer,Class,"* Type deserializer used with {@link As#WRAPPER_OBJECT}\n * inclusion mechanism. Simple since JSON structure used is always\n * the same, regardless of structure used for actual value: wrapping\n * is done using a single-element JSON Object where type id is the key,\n * and actual object data as the value.",public ,com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase,java.io.Serializable
com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer,Class,"* Type deserializer used with {@link As#EXTERNAL_PROPERTY} inclusion mechanism.\n * Actual implementation may look bit strange since it depends on comprehensive\n * pre-processing done by {@link com.fasterxml.jackson.databind.deser.BeanDeserializer}\n * to basically transform external type id into structure that looks more like\n * ""wrapper-array"" style inclusion. This intermediate form is chosen to allow\n * supporting all possible JSON structures.",public ,com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer,
com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver,Class,* Standard {@link SubtypeResolver} implementation.,public ,com.fasterxml.jackson.databind.jsontype.SubtypeResolver,java.io.Serializable
com.fasterxml.jackson.databind.jsontype.impl.AsDeductionTypeDeserializer,Class,"* A {@link TypeDeserializer} capable of deducing polymorphic types based on the\n * fields available. Deduction is limited to the <i>names</i> of child properties\n * (not their values or, consequently, any nested descendants).\n * Exceptions will be thrown if not enough unique information is present\n * to select a single subtype.\n * <p>\n * The current deduction process <b>does not</b> support pojo-hierarchies such that\n * the absence of child fields infers a parent type. That is, every deducible subtype\n * MUST have some unique fields and the input data MUST contain said unique fields\n * to provide a <i>positive match</i>.\n *\n * @since 2.12",public ,com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer,
com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator,Class,"* Default {@link PolymorphicTypeValidator} used unless explicit one is constructed\n * (and, in 2.11, {@link com.fasterxml.jackson.databind.MapperFeature#BLOCK_UNSAFE_POLYMORPHIC_BASE_TYPES}\n * not enabled).\n * Does not do any validation, allows all subtypes. Only used for backwards-compatibility\n * reasons: users should usually NOT use such a permissive implementation but use\n * allow-list/criteria - based implementation.\n *\n * @since 2.10","public , final ",com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Base,
com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase,Abstract Class,* Base class for all standard Jackson {@link TypeDeserializer}s.,"public , abstract ",com.fasterxml.jackson.databind.jsontype.TypeDeserializer,java.io.Serializable
com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer,Class,"* Type deserializer used with {@link As#WRAPPER_ARRAY}\n * inclusion mechanism. Simple since JSON structure used is always\n * the same, regardless of structure used for actual value: wrapping\n * is done using a 2-element JSON Array where type id is the first\n * element, and actual object data as second element.",public ,com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase,java.io.Serializable
com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator,Class,"* Helper class used to encapsulate rules that determine subtypes that\n * are invalid to use, even with default typing, mostly due to security\n * concerns.\n * Used by <code>BeanDeserializerFactory</code>\n *\n * @since 2.8.11",public ,,
com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer,Class,"* Type wrapper that tries to use an extra JSON Object, with a single\n * entry that has type name as key, to serialize type information.\n * If this is not possible (value is serialize as array or primitive),\n * will use {@link As#WRAPPER_ARRAY} mechanism as fallback: that is,\n * just use a wrapping array with type information as the first element\n * and value as second.",public ,com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase,
com.fasterxml.jackson.databind.jsontype.impl.SimpleNameIdResolver,Class,"* {@link com.fasterxml.jackson.databind.jsontype.TypeIdResolver} implementation\n * that converts using explicitly (annotation-) specified type names\n * and maps to implementation classes; or, in absence of annotated type name,\n * defaults to simple {@link Class} names (obtained with {@link Class#getSimpleName()}.\n * Basically same as {@link TypeNameIdResolver} except for default to ""simple""\n * and not ""full"" class name.\n *\n * @since 2.16",public ,com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase,java.io.Serializable
com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver,Class,* {@link com.fasterxml.jackson.databind.jsontype.TypeIdResolver} implementation\n * that converts between fully-qualified\n * Java class names and (JSON) Strings.,public ,com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase,java.io.Serializable
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder,Class,* Default {@link TypeResolverBuilder} implementation.,public ,,com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder
com.fasterxml.jackson.databind.jsontype.impl.AsDeductionTypeSerializer,Class,* @since 2.14.2,public ,com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase,
com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver,Class,"* {@link com.fasterxml.jackson.databind.jsontype.TypeIdResolver} implementation\n * that converts using explicitly (annotation-) specified type names\n * and maps to implementation classes; or, in absence of annotated type name,\n * defaults to fully-qualified {@link Class} names (obtained with {@link Class#getName()}",public ,com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase,java.io.Serializable
com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer,Class,* Type deserializer used with {@link As#PROPERTY}\n * inclusion mechanism.\n * Uses regular form (additional key/value entry before actual data)\n * when typed object is expressed as JSON Object; otherwise behaves similar to how\n * {@link As#WRAPPER_ARRAY} works.\n * Latter is used if JSON representation is polymorphic,public ,com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer,
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,Abstract Class,"* Interface for classes that handle validation of class-name - based subtypes used\n * with Polymorphic Deserialization: both via ""default typing"" and explicit\n * {@code @JsonTypeInfo} when using Java Class name as Type Identifier.\n * The main purpose, initially, is to allow pluggable allow lists to avoid\n * security problems that occur with unlimited class names\n * (See <a href=""https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"">\n * this article</a> for full explanation).\n *<p>\n * Calls to methods are done as follows:\n * <ol>\n *  <li>When a deserializer is needed for a polymorphic property (including root values) -- either\n *     for explicitly annotated polymorphic type, or ""default typing"" -- {@link #validateBaseType}\n *     is called to see if validity can be determined for all possible types: if\n *     {@link Validity#ALLOWED} is returned no futher checks are made for any subtypes; of\n *     {@link Validity#DENIED} is returned, an exception will be thrown to indicate invalid polymorphic\n *     property\n *   </li>\n *  <li>If neither deny nor allowed was returned for property with specific base type, first time\n *     specific Type Id (Class Name) is encountered, method {@link #validateSubClassName} is called\n *     with resolved class name: it may indicate allowed/denied, resulting in either allowed use or\n *     denial with exception\n *   </li>\n *  <li>If no denial/allowance indicated, class name is resolved to actual {@link Class}, and\n *  {@link #validateSubType(MapperConfig, JavaType, JavaType)} is called: if\n *  {@link Validity#ALLOWED} is returned, usage is accepted; otherwise (denied or indeterminate)\n *  usage is not allowed and exception is thrown\n *   </li>\n * </ol>\n *<p>\n * Notes on implementations: implementations must be thread-safe and shareable (usually meaning they\n * are stateless). Determinations for validity are usually effectively cached on per-property\n * basis (by virtue of subtype deserializers being cached by polymorphic deserializers) so\n * caching at validator level is usually not needed. If caching is used, however, it must be done\n * in thread-safe manner as validators are shared within {@link ObjectMapper} as well as possible\n * across mappers (in case of default/standard validator).\n *<p>\n * Also note that it is strongly recommended that all implementations are based on provided\n * abstract base class, {@link PolymorphicTypeValidator.Base} which contains helper methods\n * and default implementations for returning {@link Validity#INDETERMINATE} for validation\n * methods (to allow only overriding relevant methods implementation cares about)\n *\n * @since 2.10","public , abstract ",,java.io.Serializable
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity,Enum,* Definition of return values to indicate determination regarding validity.,public ,enum has no extends,
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Base,Abstract Class,* Shared base class with partial implementation (with all validation calls returning\n     * {@link Validity#INDETERMINATE}) and convenience methods for indicating failure reasons.\n     * Use of this base class is strongly recommended over directly implement,"public , abstract , static ",com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,java.io.Serializable
com.fasterxml.jackson.databind.jsontype.TypeIdResolver,Interface,"* Interface that defines standard API for converting types\n * to type identifiers and vice versa. Used by type resolvers\n * ({@link com.fasterxml.jackson.databind.jsontype.TypeSerializer},\n * {@link com.fasterxml.jackson.databind.jsontype.TypeDeserializer}) for converting\n * between type and matching id; id is stored in JSON and needed for\n * creating instances of proper subtypes when deserializing values.\n *<p>\n * NOTE: it is <b>strongly</b> recommended that developers always extend\n * abstract base class {@link com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase}\n * instead of directly implementing this interface; this helps prevent\n * breakage in case new methds need to be added in this interface (something\n * we try to avoid doing; but which may be necessary in some cases).",public ,,
com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator,Class,"* {@link PolymorphicTypeValidator} that will only allow polymorphic handling if\n * the base type is NOT one of potential dangerous base types (see {@link #isUnsafeBaseType}\n * for specific list of such base types). No further validation is performed on subtype.\n *<p>\n * Note that when using potentially unsafe base type like {@link java.lang.Object} a custom\n * implementation (or subtype with override) is needed. Most commonly subclasses would\n * override both {@link #isUnsafeBaseType} and {@link #isSafeSubType}: former to allow\n * all (or just more) base types, and latter to add actual validation of subtype.\n *\n * @since 2.11",public ,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,java.io.Serializable
com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator$UnsafeBaseTypes,Class,No Comment,"private , final , static ",,
com.fasterxml.jackson.databind.jsontype.TypeSerializer,Abstract Class,"* Interface for serializing type information regarding instances of specified\n * base type (super class), so that exact subtype can be properly deserialized\n * later on. These instances are to be called by regular\n * {@link com.fasterxml.jackson.databind.JsonSerializer}s using proper contextual\n * calls, to add type information using mechanism type serializer was\n * configured with.\n *<p>\n * NOTE: version 2.9 contains significant attempt at simplifying interface,\n * as well as giving format implementation (via {@link JsonGenerator}) more\n * control over actual serialization details. Minor changes are required to change\n * call pattern so that return value of ""prefix"" write needs to be passed to ""suffix""\n * write.","public , abstract ",,
com.fasterxml.jackson.databind.jsontype.TypeDeserializer,Abstract Class,"* Interface for deserializing type information from JSON content, to\n * type-safely deserialize data into correct polymorphic instance\n * (when type inclusion has been enabled for type handled).\n *<p>\n * Separate deserialization methods are needed because serialized\n * form for inclusion mechanism {@link As#PROPERTY}\n * is slighty different if value is not expressed as JSON Object:\n * and as such both type deserializer and serializer need to\n * JSON Object form (array, object or other (== scalar)) being used.","public , abstract ",,
com.fasterxml.jackson.databind.jsontype.SubtypeResolver,Abstract Class,* Helper object used for handling registration on resolving of super-types\n * to sub-types.,"public , abstract ",,
com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator,Class,* Standard {@link BasicPolymorphicTypeValidator} implementation that users may want\n * to use for constructing validators based on simple class hierarchy and/or name patterns\n * to allow and/or deny certain subtypes.\n *<p>\n * Most commonly this is used to allow known safe subtypes based on common super type\n * or Java package name.\n *<br>\n * For example:\n *<pre>\n *  [ADD EXAMPLE HERE]\n *</pre>\n *\n * @since 2.10,public ,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Base,java.io.Serializable
com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder,Class,"* Builder class for configuring and constructing immutable\n     * {@link BasicPolymorphicTypeValidator} instances. Criteria for allowing\n     * polymorphic subtypes is specified by adding rules in priority order, starting\n     * with the rules to evaluate first: when a matching rule is found, its status\n     * ({@link PolymorphicTypeValidator.Validity#ALLOWED} or {@link PolymorphicTypeValidator.Validity#DENIED}) is used and no further\n     * rules are checked.","public , static ",,
com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$TypeMatcher,Abstract Class,* General matcher interface (predicate) for validating class values\n     * (base type or resolved subtype),"public , abstract , static ",,
com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$NameMatcher,Abstract Class,* General matcher interface (predicate) for validating unresolved\n     * subclass class name.,"public , abstract , static ",,
com.fasterxml.jackson.databind.jsontype.NamedType,Class,"* Simple container class for types with optional logical name, used\n * as external identifier","public , final ",,java.io.Serializable
com.fasterxml.jackson.databind.AbstractTypeResolver,Abstract Class,"* Defines interface for resolvers that can resolve abstract types into concrete\n * ones; either by using static mappings, or possibly by materializing\n * implementations dynamically.","public , abstract ",,
