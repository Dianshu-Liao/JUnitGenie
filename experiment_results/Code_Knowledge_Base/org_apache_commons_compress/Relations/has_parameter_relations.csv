:START_ID,:END_ID,:TYPE
"org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.writeOut(byte[],int,int)","org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.writeOut(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.writeOut(byte[],int,int)","org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.writeOut(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.writeOut(byte[],int,int)","org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.writeOut(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.<init>(File),org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.<init>(File).target,Has_Parameter
org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.<init>(Path),org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.<init>(Path).target,Has_Parameter
"org.apache.commons.compress.parallel.ScatterGatherBackingStore.writeOut(byte[],int,int)","org.apache.commons.compress.parallel.ScatterGatherBackingStore.writeOut(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.parallel.ScatterGatherBackingStore.writeOut(byte[],int,int)","org.apache.commons.compress.parallel.ScatterGatherBackingStore.writeOut(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.parallel.ScatterGatherBackingStore.writeOut(byte[],int,int)","org.apache.commons.compress.parallel.ScatterGatherBackingStore.writeOut(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.changes.Change.<init>(ArchiveEntry,InputStream,boolean)","org.apache.commons.compress.changes.Change.<init>(ArchiveEntry,InputStream,boolean).archiveEntry",Has_Parameter
"org.apache.commons.compress.changes.Change.<init>(ArchiveEntry,InputStream,boolean)","org.apache.commons.compress.changes.Change.<init>(ArchiveEntry,InputStream,boolean).inputStream",Has_Parameter
"org.apache.commons.compress.changes.Change.<init>(ArchiveEntry,InputStream,boolean)","org.apache.commons.compress.changes.Change.<init>(ArchiveEntry,InputStream,boolean).replace",Has_Parameter
"org.apache.commons.compress.changes.Change.<init>(String,ChangeType)","org.apache.commons.compress.changes.Change.<init>(String,ChangeType).fileName",Has_Parameter
"org.apache.commons.compress.changes.Change.<init>(String,ChangeType)","org.apache.commons.compress.changes.Change.<init>(String,ChangeType).type",Has_Parameter
"org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream)","org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream).entry",Has_Parameter
"org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream)","org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream).input",Has_Parameter
"org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream,boolean)","org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream,boolean).entry",Has_Parameter
"org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream,boolean)","org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream,boolean).input",Has_Parameter
"org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream,boolean)","org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream,boolean).replace",Has_Parameter
org.apache.commons.compress.changes.ChangeSet.addAddition(Change),org.apache.commons.compress.changes.ChangeSet.addAddition(Change).addChange,Has_Parameter
org.apache.commons.compress.changes.ChangeSet.addDeletion(Change),org.apache.commons.compress.changes.ChangeSet.addDeletion(Change).deleteChange,Has_Parameter
org.apache.commons.compress.changes.ChangeSet.delete(String),org.apache.commons.compress.changes.ChangeSet.delete(String).fileName,Has_Parameter
org.apache.commons.compress.changes.ChangeSet.deleteDir(String),org.apache.commons.compress.changes.ChangeSet.deleteDir(String).dirName,Has_Parameter
"org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(InputStream,ArchiveOutputStream,ArchiveEntry)","org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(InputStream,ArchiveOutputStream,ArchiveEntry).inputStream",Has_Parameter
"org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(InputStream,ArchiveOutputStream,ArchiveEntry)","org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(InputStream,ArchiveOutputStream,ArchiveEntry).outputStream",Has_Parameter
"org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(InputStream,ArchiveOutputStream,ArchiveEntry)","org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(InputStream,ArchiveOutputStream,ArchiveEntry).archiveEntry",Has_Parameter
"org.apache.commons.compress.changes.ChangeSetPerformer.isDeletedLater(Set,ArchiveEntry)","org.apache.commons.compress.changes.ChangeSetPerformer.isDeletedLater(Set,ArchiveEntry).workingSet",Has_Parameter
"org.apache.commons.compress.changes.ChangeSetPerformer.isDeletedLater(Set,ArchiveEntry)","org.apache.commons.compress.changes.ChangeSetPerformer.isDeletedLater(Set,ArchiveEntry).entry",Has_Parameter
"org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveEntryIterator,ArchiveOutputStream)","org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveEntryIterator,ArchiveOutputStream).entryIterator",Has_Parameter
"org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveEntryIterator,ArchiveOutputStream)","org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveEntryIterator,ArchiveOutputStream).outputStream",Has_Parameter
"org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveInputStream,ArchiveOutputStream)","org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveInputStream,ArchiveOutputStream).inputStream",Has_Parameter
"org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveInputStream,ArchiveOutputStream)","org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveInputStream,ArchiveOutputStream).outputStream",Has_Parameter
"org.apache.commons.compress.changes.ChangeSetPerformer.perform(ZipFile,ArchiveOutputStream)","org.apache.commons.compress.changes.ChangeSetPerformer.perform(ZipFile,ArchiveOutputStream).zipFile",Has_Parameter
"org.apache.commons.compress.changes.ChangeSetPerformer.perform(ZipFile,ArchiveOutputStream)","org.apache.commons.compress.changes.ChangeSetPerformer.perform(ZipFile,ArchiveOutputStream).outputStream",Has_Parameter
org.apache.commons.compress.changes.ChangeSetPerformer.<init>(ChangeSet),org.apache.commons.compress.changes.ChangeSetPerformer.<init>(ChangeSet).changeSet,Has_Parameter
org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator.<init>(ArchiveInputStream),org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator.<init>(ArchiveInputStream).inputStream,Has_Parameter
org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator.<init>(ZipFile),org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator.<init>(ZipFile).zipFile,Has_Parameter
org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet(String),org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet(String).fileName,Has_Parameter
org.apache.commons.compress.changes.ChangeSetResults.addedFromStream(String),org.apache.commons.compress.changes.ChangeSetResults.addedFromStream(String).fileName,Has_Parameter
org.apache.commons.compress.changes.ChangeSetResults.deleted(String),org.apache.commons.compress.changes.ChangeSetResults.deleted(String).fileName,Has_Parameter
org.apache.commons.compress.changes.ChangeSetResults.hasBeenAdded(String),org.apache.commons.compress.changes.ChangeSetResults.hasBeenAdded(String).fileName,Has_Parameter
org.apache.commons.compress.harmony.unpack200.IcTuple.equals(Object),org.apache.commons.compress.harmony.unpack200.IcTuple.equals(Object).object,Has_Parameter
org.apache.commons.compress.harmony.unpack200.IcTuple.innerBreakAtDollar(String),org.apache.commons.compress.harmony.unpack200.IcTuple.innerBreakAtDollar(String).className,Has_Parameter
org.apache.commons.compress.harmony.unpack200.IcTuple.isAllDigits(String),org.apache.commons.compress.harmony.unpack200.IcTuple.isAllDigits(String).nameString,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.IcTuple.nullSafeEquals(String,String)","org.apache.commons.compress.harmony.unpack200.IcTuple.nullSafeEquals(String,String).stringOne",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.IcTuple.nullSafeEquals(String,String)","org.apache.commons.compress.harmony.unpack200.IcTuple.nullSafeEquals(String,String).stringTwo",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int)","org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int).C",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int)","org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int).F",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int)","org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int).C2",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int)","org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int).N",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int)","org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int).cIndex",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int)","org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int).c2Index",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int)","org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int).nIndex",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int)","org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int).tIndex",Has_Parameter
org.apache.commons.compress.harmony.unpack200.BcBands.endsWithLoad(int),org.apache.commons.compress.harmony.unpack200.BcBands.endsWithLoad(int).codePacked,Has_Parameter
org.apache.commons.compress.harmony.unpack200.BcBands.endsWithStore(int),org.apache.commons.compress.harmony.unpack200.BcBands.endsWithStore(int).codePacked,Has_Parameter
org.apache.commons.compress.harmony.unpack200.BcBands.read(InputStream),org.apache.commons.compress.harmony.unpack200.BcBands.read(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.BcBands.startsWithIf(int),org.apache.commons.compress.harmony.unpack200.BcBands.startsWithIf(int).codePacked,Has_Parameter
org.apache.commons.compress.harmony.unpack200.BcBands.<init>(Segment),org.apache.commons.compress.harmony.unpack200.BcBands.<init>(Segment).segment,Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentOptions.<init>(int),org.apache.commons.compress.harmony.unpack200.SegmentOptions.<init>(int).options,Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.arrayIsCached(String[]),org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.arrayIsCached(String[]).array,Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.cacheArray(String[]),org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.cacheArray(String[]).array,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.indexesForArrayKey(String[],String)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.indexesForArrayKey(String[],String).array",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.indexesForArrayKey(String[],String)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.indexesForArrayKey(String[],String).key",Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache$CachedArray.indexesForKey(String),org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache$CachedArray.indexesForKey(String).key,Has_Parameter
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRiaAttributeName(CPUTF8),org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRiaAttributeName(CPUTF8).cpUTF8Value,Has_Parameter
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRipaAttributeName(CPUTF8),org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRipaAttributeName(CPUTF8).cpUTF8Value,Has_Parameter
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRvaAttributeName(CPUTF8),org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRvaAttributeName(CPUTF8).cpUTF8Value,Has_Parameter
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRvpaAttributeName(CPUTF8),org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRvpaAttributeName(CPUTF8).cpUTF8Value,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAnnotation(CPUTF8,int,Iterator)","org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAnnotation(CPUTF8,int,Iterator).type",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAnnotation(CPUTF8,int,Iterator)","org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAnnotation(CPUTF8,int,Iterator).pairCount",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAnnotation(CPUTF8,int,Iterator)","org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAnnotation(CPUTF8,int,Iterator).namesIterator",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAttribute(int,CPUTF8[],int[],Iterator)","org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAttribute(int,CPUTF8[],int[],Iterator).numAnnotations",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAttribute(int,CPUTF8[],int[],Iterator)","org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAttribute(int,CPUTF8[],int[],Iterator).types",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAttribute(int,CPUTF8[],int[],Iterator)","org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAttribute(int,CPUTF8[],int[],Iterator).pairCounts",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAttribute(int,CPUTF8[],int[],Iterator)","org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAttribute(int,CPUTF8[],int[],Iterator).namesIterator",Has_Parameter
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getNextValue(int),org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getNextValue(int).t,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getParameterAttribute(int,Iterator)","org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getParameterAttribute(int,Iterator).numParameters",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getParameterAttribute(int,Iterator)","org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getParameterAttribute(int,Iterator).namesIterator",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.<init>(String,CpBands)","org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.<init>(String,CpBands).type",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.<init>(String,CpBands)","org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.<init>(String,CpBands).cpBands",Has_Parameter
org.apache.commons.compress.harmony.unpack200.Segment.buildClassFile(int),org.apache.commons.compress.harmony.unpack200.Segment.buildClassFile(int).classNum,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.Segment.computeIcStored(IcTuple[],IcTuple[])","org.apache.commons.compress.harmony.unpack200.Segment.computeIcStored(IcTuple[],IcTuple[]).icLocal",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.Segment.computeIcStored(IcTuple[],IcTuple[])","org.apache.commons.compress.harmony.unpack200.Segment.computeIcStored(IcTuple[],IcTuple[]).icRelevant",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.Segment.log(int,String)","org.apache.commons.compress.harmony.unpack200.Segment.log(int,String).messageLevel",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.Segment.log(int,String)","org.apache.commons.compress.harmony.unpack200.Segment.log(int,String).message",Has_Parameter
org.apache.commons.compress.harmony.unpack200.Segment.overrideDeflateHint(boolean),org.apache.commons.compress.harmony.unpack200.Segment.overrideDeflateHint(boolean).deflateHint,Has_Parameter
org.apache.commons.compress.harmony.unpack200.Segment.readSegment(InputStream),org.apache.commons.compress.harmony.unpack200.Segment.readSegment(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.Segment.setLogLevel(int),org.apache.commons.compress.harmony.unpack200.Segment.setLogLevel(int).logLevel,Has_Parameter
org.apache.commons.compress.harmony.unpack200.Segment.setLogStream(OutputStream),org.apache.commons.compress.harmony.unpack200.Segment.setLogStream(OutputStream).logStream,Has_Parameter
org.apache.commons.compress.harmony.unpack200.Segment.setPreRead(boolean),org.apache.commons.compress.harmony.unpack200.Segment.setPreRead(boolean).value,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.Segment.unpack(InputStream,JarOutputStream)","org.apache.commons.compress.harmony.unpack200.Segment.unpack(InputStream,JarOutputStream).inputStream",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.Segment.unpack(InputStream,JarOutputStream)","org.apache.commons.compress.harmony.unpack200.Segment.unpack(InputStream,JarOutputStream).out",Has_Parameter
org.apache.commons.compress.harmony.unpack200.Segment.unpackRead(InputStream),org.apache.commons.compress.harmony.unpack200.Segment.unpackRead(InputStream).inputStream,Has_Parameter
org.apache.commons.compress.harmony.unpack200.Segment.unpackWrite(JarOutputStream),org.apache.commons.compress.harmony.unpack200.Segment.unpackWrite(JarOutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.unpack200.Segment.writeJar(JarOutputStream),org.apache.commons.compress.harmony.unpack200.Segment.writeJar(JarOutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(File),org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(File).file,Has_Parameter
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(FileInputStream),org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(FileInputStream).fileInputStream,Has_Parameter
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(InputStream),org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(InputStream).inputStream,Has_Parameter
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(Path),org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(Path).path,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(String,String[])","org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(String,String[]).first",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(String,String[])","org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(String,String[]).more",Has_Parameter
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(URL),org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(URL).url,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.readField(Object,String)","org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.readField(Object,String).object",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.readField(Object,String)","org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.readField(Object,String).fieldName",Has_Parameter
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.readPathString(FileInputStream),org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.readPathString(FileInputStream).fis,Has_Parameter
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unwrap(FilterInputStream),org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unwrap(FilterInputStream).filterInputStream,Has_Parameter
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unwrap(InputStream),org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unwrap(InputStream).inputStream,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unpack(File,JarOutputStream)","org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unpack(File,JarOutputStream).file",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unpack(File,JarOutputStream)","org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unpack(File,JarOutputStream).out",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unpack(InputStream,JarOutputStream)","org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unpack(InputStream,JarOutputStream).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unpack(InputStream,JarOutputStream)","org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unpack(InputStream,JarOutputStream).out",Has_Parameter
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.add(AttributeLayout),org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.add(AttributeLayout).layout,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.add(AttributeLayout,NewAttributeBands)","org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.add(AttributeLayout,NewAttributeBands).layout",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.add(AttributeLayout,NewAttributeBands)","org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.add(AttributeLayout,NewAttributeBands).newBands",Has_Parameter
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeBands(AttributeLayout),org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeBands(AttributeLayout).layout,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeLayout(int,int)","org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeLayout(int,int).index",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeLayout(int,int)","org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeLayout(int,int).context",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeLayout(String,int)","org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeLayout(String,int).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeLayout(String,int)","org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeLayout(String,int).context",Has_Parameter
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getLayout(int),org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getLayout(int).context,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec)","org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec)","org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec)","org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec,int).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec,int).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec,int).n",Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentHeader.parseArchiveFileCounts(InputStream),org.apache.commons.compress.harmony.unpack200.SegmentHeader.parseArchiveFileCounts(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentHeader.parseArchiveSpecialCounts(InputStream),org.apache.commons.compress.harmony.unpack200.SegmentHeader.parseArchiveSpecialCounts(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentHeader.parseClassCounts(InputStream),org.apache.commons.compress.harmony.unpack200.SegmentHeader.parseClassCounts(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentHeader.parseCpCounts(InputStream),org.apache.commons.compress.harmony.unpack200.SegmentHeader.parseCpCounts(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentHeader.read(InputStream),org.apache.commons.compress.harmony.unpack200.SegmentHeader.read(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentHeader.setArchiveMajorVersion(int),org.apache.commons.compress.harmony.unpack200.SegmentHeader.setArchiveMajorVersion(int).version,Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentHeader.setArchiveMinorVersion(int),org.apache.commons.compress.harmony.unpack200.SegmentHeader.setArchiveMinorVersion(int).version,Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentHeader.setArchiveModtime(long),org.apache.commons.compress.harmony.unpack200.SegmentHeader.setArchiveModtime(long).archiveModtime,Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentHeader.setArchiveSize(long),org.apache.commons.compress.harmony.unpack200.SegmentHeader.setArchiveSize(long).archiveSize,Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentHeader.setAttributeDefinitionCount(long),org.apache.commons.compress.harmony.unpack200.SegmentHeader.setAttributeDefinitionCount(long).valuie,Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentHeader.setBandHeadersData(byte[]),org.apache.commons.compress.harmony.unpack200.SegmentHeader.setBandHeadersData(byte[]).bandHeaders,Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentHeader.setSegmentsRemaining(long),org.apache.commons.compress.harmony.unpack200.SegmentHeader.setSegmentsRemaining(long).value,Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentHeader.<init>(Segment),org.apache.commons.compress.harmony.unpack200.SegmentHeader.<init>(Segment).segment,Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentUtils.countArgs(String),org.apache.commons.compress.harmony.unpack200.SegmentUtils.countArgs(String).descriptor,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentUtils.countArgs(String,int)","org.apache.commons.compress.harmony.unpack200.SegmentUtils.countArgs(String,int).descriptor",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentUtils.countArgs(String,int)","org.apache.commons.compress.harmony.unpack200.SegmentUtils.countArgs(String,int).widthOfLongsAndDoubles",Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentUtils.countBit16(int[]),org.apache.commons.compress.harmony.unpack200.SegmentUtils.countBit16(int[]).flags,Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentUtils.countBit16(long[]),org.apache.commons.compress.harmony.unpack200.SegmentUtils.countBit16(long[]).flags,Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentUtils.countBit16(long[][]),org.apache.commons.compress.harmony.unpack200.SegmentUtils.countBit16(long[][]).flags,Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentUtils.countInvokeInterfaceArgs(String),org.apache.commons.compress.harmony.unpack200.SegmentUtils.countInvokeInterfaceArgs(String).descriptor,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[],IMatcher)","org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[],IMatcher).flags",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[],IMatcher)","org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[],IMatcher).matcher",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[][],IMatcher)","org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[][],IMatcher).flags",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[][],IMatcher)","org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[][],IMatcher).matcher",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(String,long,SegmentConstantPool)","org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(String,long,SegmentConstantPool).layout",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(String,long,SegmentConstantPool)","org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(String,long,SegmentConstantPool).longIndex",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(String,long,SegmentConstantPool)","org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(String,long,SegmentConstantPool).pool",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(long,SegmentConstantPool)","org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(long,SegmentConstantPool).longIndex",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(long,SegmentConstantPool)","org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(long,SegmentConstantPool).pool",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(long,String,SegmentConstantPool)","org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(long,String,SegmentConstantPool).longIndex",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(long,String,SegmentConstantPool)","org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(long,String,SegmentConstantPool).type",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(long,String,SegmentConstantPool)","org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(long,String,SegmentConstantPool).pool",Has_Parameter
org.apache.commons.compress.harmony.unpack200.AttributeLayout.matches(long),org.apache.commons.compress.harmony.unpack200.AttributeLayout.matches(long).value,Has_Parameter
org.apache.commons.compress.harmony.unpack200.AttributeLayout.setBackwardsCallCount(int),org.apache.commons.compress.harmony.unpack200.AttributeLayout.setBackwardsCallCount(int).backwardsCallCount,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int)","org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int)","org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int).context",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int)","org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int).layout",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int)","org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int).index",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int,boolean)","org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int,boolean).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int,boolean)","org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int,boolean).context",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int,boolean)","org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int,boolean).layout",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int,boolean)","org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int,boolean).index",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int,boolean)","org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int,boolean).isDefault",Has_Parameter
org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.read(InputStream),org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.read(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.<init>(Segment),org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.<init>(Segment).segment,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.cpClassValue(int),org.apache.commons.compress.harmony.unpack200.CpBands.cpClassValue(int).index,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.cpClassValue(String),org.apache.commons.compress.harmony.unpack200.CpBands.cpClassValue(String).string,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.cpDoubleValue(int),org.apache.commons.compress.harmony.unpack200.CpBands.cpDoubleValue(int).index,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.cpFieldValue(int),org.apache.commons.compress.harmony.unpack200.CpBands.cpFieldValue(int).index,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.cpFloatValue(int),org.apache.commons.compress.harmony.unpack200.CpBands.cpFloatValue(int).index,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.cpIMethodValue(int),org.apache.commons.compress.harmony.unpack200.CpBands.cpIMethodValue(int).index,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.cpIntegerValue(int),org.apache.commons.compress.harmony.unpack200.CpBands.cpIntegerValue(int).index,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.cpLongValue(int),org.apache.commons.compress.harmony.unpack200.CpBands.cpLongValue(int).index,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.cpMethodValue(int),org.apache.commons.compress.harmony.unpack200.CpBands.cpMethodValue(int).index,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.cpNameAndTypeValue(int),org.apache.commons.compress.harmony.unpack200.CpBands.cpNameAndTypeValue(int).index,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.cpNameAndTypeValue(String),org.apache.commons.compress.harmony.unpack200.CpBands.cpNameAndTypeValue(String).descriptor,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.cpSignatureValue(int),org.apache.commons.compress.harmony.unpack200.CpBands.cpSignatureValue(int).index,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.cpStringValue(int),org.apache.commons.compress.harmony.unpack200.CpBands.cpStringValue(int).index,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.cpUTF8Value(int),org.apache.commons.compress.harmony.unpack200.CpBands.cpUTF8Value(int).index,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.cpUTF8Value(String),org.apache.commons.compress.harmony.unpack200.CpBands.cpUTF8Value(String).string,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.CpBands.cpUTF8Value(String,boolean)","org.apache.commons.compress.harmony.unpack200.CpBands.cpUTF8Value(String,boolean).string",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.CpBands.cpUTF8Value(String,boolean)","org.apache.commons.compress.harmony.unpack200.CpBands.cpUTF8Value(String,boolean).searchForIndex",Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpClass(InputStream),org.apache.commons.compress.harmony.unpack200.CpBands.parseCpClass(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpDescriptor(InputStream),org.apache.commons.compress.harmony.unpack200.CpBands.parseCpDescriptor(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpDouble(InputStream),org.apache.commons.compress.harmony.unpack200.CpBands.parseCpDouble(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpField(InputStream),org.apache.commons.compress.harmony.unpack200.CpBands.parseCpField(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpFloat(InputStream),org.apache.commons.compress.harmony.unpack200.CpBands.parseCpFloat(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpIMethod(InputStream),org.apache.commons.compress.harmony.unpack200.CpBands.parseCpIMethod(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpInt(InputStream),org.apache.commons.compress.harmony.unpack200.CpBands.parseCpInt(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpLong(InputStream),org.apache.commons.compress.harmony.unpack200.CpBands.parseCpLong(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpMethod(InputStream),org.apache.commons.compress.harmony.unpack200.CpBands.parseCpMethod(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpSignature(InputStream),org.apache.commons.compress.harmony.unpack200.CpBands.parseCpSignature(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpString(InputStream),org.apache.commons.compress.harmony.unpack200.CpBands.parseCpString(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.parseCpUtf8(InputStream),org.apache.commons.compress.harmony.unpack200.CpBands.parseCpUtf8(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.read(InputStream),org.apache.commons.compress.harmony.unpack200.CpBands.read(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.CpBands.<init>(Segment),org.apache.commons.compress.harmony.unpack200.CpBands.<init>(Segment).segment,Has_Parameter
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.getCodec(String),org.apache.commons.compress.harmony.unpack200.NewAttributeBands.getCodec(String).layoutElement,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.getOneAttribute(int,List)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands.getOneAttribute(int,List).index",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.getOneAttribute(int,List)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands.getOneAttribute(int,List).elements",Has_Parameter
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.getStreamUpToMatchingBracket(StringReader),org.apache.commons.compress.harmony.unpack200.NewAttributeBands.getStreamUpToMatchingBracket(StringReader).stream,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.parseAttributes(InputStream,int)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands.parseAttributes(InputStream,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.parseAttributes(InputStream,int)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands.parseAttributes(InputStream,int).occurrenceCount",Has_Parameter
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.read(InputStream),org.apache.commons.compress.harmony.unpack200.NewAttributeBands.read(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readBody(StringReader),org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readBody(StringReader).stream,Has_Parameter
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readNextAttributeElement(StringReader),org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readNextAttributeElement(StringReader).stream,Has_Parameter
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readNextLayoutElement(StringReader),org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readNextLayoutElement(StringReader).stream,Has_Parameter
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readNextUnionCase(StringReader),org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readNextUnionCase(StringReader).stream,Has_Parameter
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readNumber(StringReader),org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readNumber(StringReader).stream,Has_Parameter
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readUpToMatchingBracket(StringReader),org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readUpToMatchingBracket(StringReader).stream,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement).i",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement).currentCallable",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement).layoutElement",Has_Parameter
org.apache.commons.compress.harmony.unpack200.NewAttributeBands.setBackwardsCalls(int[]),org.apache.commons.compress.harmony.unpack200.NewAttributeBands.setBackwardsCalls(int[]).backwardsCalls,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.<init>(Segment,AttributeLayout)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands.<init>(Segment,AttributeLayout).segment",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.<init>(Segment,AttributeLayout)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands.<init>(Segment,AttributeLayout).attributeLayout",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$AttributeLayoutElement.addToAttribute(int,NewAttribute)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$AttributeLayoutElement.addToAttribute(int,NewAttribute).index",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$AttributeLayoutElement.addToAttribute(int,NewAttribute)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$AttributeLayoutElement.addToAttribute(int,NewAttribute).attribute",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$AttributeLayoutElement.readBands(InputStream,int)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$AttributeLayoutElement.readBands(InputStream,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$AttributeLayoutElement.readBands(InputStream,int)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$AttributeLayoutElement.readBands(InputStream,int).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.addToAttribute(int,NewAttribute)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.addToAttribute(int,NewAttribute).n",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.addToAttribute(int,NewAttribute)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.addToAttribute(int,NewAttribute).attribute",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.readBands(InputStream,int)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.readBands(InputStream,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.readBands(InputStream,int)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.readBands(InputStream,int).count",Has_Parameter
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.setCallable(Callable),org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.setCallable(Callable).callable,Has_Parameter
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.addCount(int),org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.addCount(int).count,Has_Parameter
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.addNextToAttribute(NewAttribute),org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.addNextToAttribute(NewAttribute).attribute,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.addToAttribute(int,NewAttribute)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.addToAttribute(int,NewAttribute).n",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.addToAttribute(int,NewAttribute)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.addToAttribute(int,NewAttribute).attribute",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.readBands(InputStream,int)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.readBands(InputStream,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.readBands(InputStream,int)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.readBands(InputStream,int).count",Has_Parameter
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.setFirstCallable(boolean),org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.setFirstCallable(boolean).isFirstCallable,Has_Parameter
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.<init>(List),org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.<init>(List).body,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.addToAttribute(int,NewAttribute)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.addToAttribute(int,NewAttribute).n",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.addToAttribute(int,NewAttribute)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.addToAttribute(int,NewAttribute).attribute",Has_Parameter
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.getValue(int),org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.getValue(int).index,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.readBands(InputStream,int)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.readBands(InputStream,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.readBands(InputStream,int)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.readBands(InputStream,int).count",Has_Parameter
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$LayoutElement.getLength(char),org.apache.commons.compress.harmony.unpack200.NewAttributeBands$LayoutElement.getLength(char).uintType,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.addToAttribute(int,NewAttribute)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.addToAttribute(int,NewAttribute).n",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.addToAttribute(int,NewAttribute)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.addToAttribute(int,NewAttribute).attribute",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.readBands(InputStream,int)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.readBands(InputStream,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.readBands(InputStream,int)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.readBands(InputStream,int).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.addToAttribute(int,NewAttribute)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.addToAttribute(int,NewAttribute).index",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.addToAttribute(int,NewAttribute)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.addToAttribute(int,NewAttribute).attribute",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.readBands(InputStream,int)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.readBands(InputStream,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.readBands(InputStream,int)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.readBands(InputStream,int).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.addToAttribute(int,NewAttribute)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.addToAttribute(int,NewAttribute).n",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.addToAttribute(int,NewAttribute)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.addToAttribute(int,NewAttribute).attribute",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.readBands(InputStream,int)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.readBands(InputStream,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.readBands(InputStream,int)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.readBands(InputStream,int).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.addToAttribute(int,NewAttribute)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.addToAttribute(int,NewAttribute).index",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.addToAttribute(int,NewAttribute)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.addToAttribute(int,NewAttribute).attribute",Has_Parameter
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.hasTag(int),org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.hasTag(int).i,Has_Parameter
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.hasTag(long),org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.hasTag(long).l,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.readBands(InputStream,int)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.readBands(InputStream,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.readBands(InputStream,int)","org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.readBands(InputStream,int).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.regexMatches(String,String)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.regexMatches(String,String).regexString",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.regexMatches(String,String)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.regexMatches(String,String).compareString",Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getClassPoolEntry(String),org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getClassPoolEntry(String).name,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getClassSpecificPoolEntry(int,long,String)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getClassSpecificPoolEntry(int,long,String).cp",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getClassSpecificPoolEntry(int,long,String)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getClassSpecificPoolEntry(int,long,String).desiredIndex",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getClassSpecificPoolEntry(int,long,String)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getClassSpecificPoolEntry(int,long,String).desiredClassName",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getConstantPoolEntry(int,long)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getConstantPoolEntry(int,long).cp",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getConstantPoolEntry(int,long)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getConstantPoolEntry(int,long).value",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getInitMethodPoolEntry(int,long,String)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getInitMethodPoolEntry(int,long,String).cp",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getInitMethodPoolEntry(int,long,String)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getInitMethodPoolEntry(int,long,String).value",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getInitMethodPoolEntry(int,long,String)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getInitMethodPoolEntry(int,long,String).desiredClassName",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getValue(int,long)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getValue(int,long).cp",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getValue(int,long)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getValue(int,long).longIndex",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String,int)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String,int).nameArray",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String,int)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String,int).compareString",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String,int)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String,int).desiredIndex",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String[],String,String,int)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String[],String,String,int).primaryArray",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String[],String,String,int)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String[],String,String,int).secondaryArray",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String[],String,String,int)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String[],String,String,int).primaryCompareString",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String[],String,String,int)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String[],String,String,int).secondaryCompareRegex",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String[],String,String,int)","org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String[],String,String,int).desiredIndex",Has_Parameter
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<init>(CpBands),org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<init>(CpBands).bands,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.equals(Object),org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.equals(Object).obj,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.writeBody(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.<init>(CPUTF8,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.<init>(CPUTF8,int).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.<init>(CPUTF8,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.<init>(CPUTF8,int).globalIndex",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.equals(Object),org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.equals(Object).obj,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.writeBody(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.<init>(byte,CPClass,CPNameAndType,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.<init>(byte,CPClass,CPNameAndType,int).type",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.<init>(byte,CPClass,CPNameAndType,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.<init>(byte,CPClass,CPNameAndType,int).className",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.<init>(byte,CPClass,CPNameAndType,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.<init>(byte,CPClass,CPNameAndType,int).descriptor",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.<init>(byte,CPClass,CPNameAndType,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.<init>(byte,CPClass,CPNameAndType,int).globalIndex",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.doWrite(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.doWrite(DataOutputStream).dos,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.equals(Object),org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.equals(Object).obj,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.resolve(ClassConstantPool).pool,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.<init>(CPUTF8,CPUTF8,long,List)","org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.<init>(CPUTF8,CPUTF8,long,List).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.<init>(CPUTF8,CPUTF8,long,List)","org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.<init>(CPUTF8,CPUTF8,long,List).descriptor",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.<init>(CPUTF8,CPUTF8,long,List)","org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.<init>(CPUTF8,CPUTF8,long,List).flags",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.<init>(CPUTF8,CPUTF8,long,List)","org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.<init>(CPUTF8,CPUTF8,long,List).attributes",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.renumber(List),org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.renumber(List).byteCodeOffsets,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.write(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.write(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.<init>(int,int,int,CPClass)","org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.<init>(int,int,int,CPClass).startPC",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.<init>(int,int,int,CPClass)","org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.<init>(int,int,int,CPClass).endPC",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.<init>(int,int,int,CPClass)","org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.<init>(int,int,int,CPClass).handlerPC",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.<init>(int,int,int,CPClass)","org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.<init>(int,int,int,CPClass).catchType",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat.writeBody(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat.<init>(Float,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat.<init>(Float,int).value",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat.<init>(Float,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat.<init>(Float,int).globalIndex",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble.writeBody(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble.<init>(Double,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble.<init>(Double,int).value",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble.<init>(Double,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble.<init>(Double,int).globalIndex",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.doWrite(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.doWrite(DataOutputStream).dos,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.equals(Object),org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.equals(Object).obj,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.writeBody(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<init>(byte,int)","org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<init>(byte,int).tag",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<init>(byte,int)","org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<init>(byte,int).globalIndex",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm.getOffset(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm.getOffset(OperandManager).operandManager,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm.<init>(int,String,int[]).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.<init>(int,String,int[]).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite2Bytes(int,int,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite2Bytes(int,int,int[]).operand",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite2Bytes(int,int,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite2Bytes(int,int,int[]).absPosition",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite2Bytes(int,int,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite2Bytes(int,int,int[]).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite4Bytes(int,int,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite4Bytes(int,int,int[]).operand",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite4Bytes(int,int,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite4Bytes(int,int,int[]).absPosition",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite4Bytes(int,int,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite4Bytes(int,int,int[]).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite4Bytes(int,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite4Bytes(int,int[]).operand",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite4Bytes(int,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite4Bytes(int,int[]).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.<init>(int,String)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.<init>(int,String).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.<init>(int,String)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.<init>(int,String).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm.fixUpByteCodeTargets(ByteCode,CodeAttribute)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm.fixUpByteCodeTargets(ByteCode,CodeAttribute).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm.fixUpByteCodeTargets(ByteCode,CodeAttribute)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm.fixUpByteCodeTargets(ByteCode,CodeAttribute).codeAttribute",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm.<init>(int,String)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm.<init>(int,String).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm.<init>(int,String)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm.<init>(int,String).name",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.getOffset(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.getOffset(OperandManager).operandManager,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[]).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[],boolean).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[],boolean).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[],boolean).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[],boolean).widened",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.getOffset(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.getOffset(OperandManager).operandManager,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.setNestedEntries(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.setNestedEntries(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.setNestedEntries(ByteCode,OperandManager,int).offset",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.<init>(int,String,int[]).rewrite",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.context(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.context(OperandManager).operandManager,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.getOffset(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.getOffset(OperandManager).operandManager,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.setNestedEntries(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.setNestedEntries(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.setNestedEntries(ByteCode,OperandManager,int).offset",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.<init>(int,String,int[]).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.<init>(int,String,int[]).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.<init>(int,String,int[]).rewrite",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.context(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.context(OperandManager).operandManager,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.getOffset(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.getOffset(OperandManager).operandManager,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.<init>(int,String,int[]).rewrite",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.getOffset(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.getOffset(OperandManager).operandManager,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.setNestedEntries(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.setNestedEntries(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.setNestedEntries(ByteCode,OperandManager,int).offset",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[]).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[],boolean).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[],boolean).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[],boolean).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[],boolean).widened",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.context(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.context(OperandManager).operandManager,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.setNestedEntries(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.setNestedEntries(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.setNestedEntries(ByteCode,OperandManager,int).offset",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.<init>(int,String,int[]).rewrite",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm.context(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm.context(OperandManager).operandManager,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm.<init>(int,String,int[]).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat1(int,ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat1(int,ByteCode,OperandManager,int).instruction",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat1(int,ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat1(int,ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat1(int,ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat1(int,ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat1(int,ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat1(int,ByteCode,OperandManager,int).codeLength",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat2(int,ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat2(int,ByteCode,OperandManager,int).instruction",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat2(int,ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat2(int,ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat2(int,ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat2(int,ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat2(int,ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat2(int,ByteCode,OperandManager,int).codeLength",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.<init>(int,String)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.<init>(int,String).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.<init>(int,String)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.<init>(int,String).name",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.getOffset(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.getOffset(OperandManager).operandManager,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[]).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[],boolean).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[],boolean).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[],boolean).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[],boolean).widened",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm.<init>(int,String)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm.<init>(int,String).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm.<init>(int,String)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm.<init>(int,String).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.<init>(int,String,int[]).rewrite",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.context(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.context(OperandManager).operandManager,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.getOffset(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.getOffset(OperandManager).operandManager,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.<init>(int,String,int[]).rewrite",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.get(int),org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.get(int).opcode,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.fixUpByteCodeTargets(ByteCode,CodeAttribute)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.fixUpByteCodeTargets(ByteCode,CodeAttribute).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.fixUpByteCodeTargets(ByteCode,CodeAttribute)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.fixUpByteCodeTargets(ByteCode,CodeAttribute).codeAttribute",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<init>(int,String)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<init>(int,String).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<init>(int,String)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<init>(int,String).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<init>(int,String,int[]).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.setNestedEntries(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.setNestedEntries(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.setNestedEntries(ByteCode,OperandManager,int).offset",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[]).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[],boolean).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[],boolean).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[],boolean).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[],boolean).widened",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm.getOffset(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm.getOffset(OperandManager).operandManager,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm.<init>(int,String,int[]).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.<init>(int,String,int[]).rewrite",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.getOffset(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.getOffset(OperandManager).operandManager,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.<init>(int,String,int[]).rewrite",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm.getOffset(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm.getOffset(OperandManager).operandManager,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm.<init>(int,String,int[]).rewrite",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.context(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.context(OperandManager).operandManager,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.getOffset(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.getOffset(OperandManager).operandManager,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.<init>(int,String,int[]).rewrite",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.context(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.context(OperandManager).operandManager,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.getOffset(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.getOffset(OperandManager).operandManager,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.setNestedEntries(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.setNestedEntries(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.setNestedEntries(ByteCode,OperandManager,int).offset",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.<init>(int,String,int[]).rewrite",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.getOffset(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.getOffset(OperandManager).operandManager,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setNestedEntries(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setNestedEntries(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setNestedEntries(ByteCode,OperandManager,int).offset",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.<init>(int,String,int[]).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.<init>(int,String)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.<init>(int,String).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.<init>(int,String)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.<init>(int,String).name",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm.getOffset(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm.getOffset(OperandManager).operandManager,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm.<init>(int,String,int[]).rewrite",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.context(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.context(OperandManager).operandManager,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.getOffset(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.getOffset(OperandManager).operandManager,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.<init>(int,String,int[]).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.<init>(int,String,int[]).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.<init>(int,String)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.<init>(int,String).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.<init>(int,String)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.<init>(int,String).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm.<init>(int,String,int[]).rewrite",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.getOffset(OperandManager),org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.getOffset(OperandManager).operandManager,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.setNestedEntries(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.setNestedEntries(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.setNestedEntries(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.setNestedEntries(ByteCode,OperandManager,int).offset",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[]).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[],boolean).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[],boolean).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[],boolean).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[],boolean).widened",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.fixUpByteCodeTargets(ByteCode,CodeAttribute)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.fixUpByteCodeTargets(ByteCode,CodeAttribute).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.fixUpByteCodeTargets(ByteCode,CodeAttribute)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.fixUpByteCodeTargets(ByteCode,CodeAttribute).codeAttribute",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.setByteCodeOperands(ByteCode,OperandManager,int).byteCode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.setByteCodeOperands(ByteCode,OperandManager,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.setByteCodeOperands(ByteCode,OperandManager,int)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.setByteCodeOperands(ByteCode,OperandManager,int).codeLength",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[])","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[]).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[],boolean).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[],boolean).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[],boolean).rewrite",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[],boolean)","org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[],boolean).widened",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.setAttributeName(CPUTF8),org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.setAttributeName(CPUTF8).cpUTF8Value,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.writeBody(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.<init>(CPClass,CPNameAndType)","org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.<init>(CPClass,CPNameAndType).cpClass",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.<init>(CPClass,CPNameAndType)","org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.<init>(CPClass,CPNameAndType).method",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.setAttributeName(CPUTF8),org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.setAttributeName(CPUTF8).cpUTF8Value,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.renumber(List),org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.renumber(List).byteCodeOffsets,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.setCodeLength(int),org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.setCodeLength(int).length,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.writeBody(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).localVariableTypeTableLength",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).startPcs",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).lengths",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).names",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).signatures",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).indexes",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.add(ClassFileEntry),org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.add(ClassFileEntry).entry,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.addWithNestedEntries(ClassFileEntry),org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.addWithNestedEntries(ClassFileEntry).entry,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.get(int),org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.get(int).i,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.indexOf(ClassFileEntry),org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.indexOf(ClassFileEntry).entry,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.resolve(Segment),org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.resolve(Segment).segment,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.writeBody(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.<init>(CPUTF8,Annotation[])","org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.<init>(CPUTF8,Annotation[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.<init>(CPUTF8,Annotation[])","org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.<init>(CPUTF8,Annotation[]).annotations",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile.write(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile.write(DataOutputStream).dos,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.renumber(List),org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.renumber(List).byteCodeOffsets,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.writeBody(DataOutputStream).dos,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.<init>(CPUTF8),org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.<init>(CPUTF8).attributeName,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.setAttributeName(CPUTF8),org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.setAttributeName(CPUTF8).cpUTF8Value,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.writeBody(DataOutputStream).dos,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPLong.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.CPLong.writeBody(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPLong.<init>(Long,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPLong.<init>(Long,int).value",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPLong.<init>(Long,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPLong.<init>(Long,int).globalIndex",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.setAttributeName(CPUTF8),org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.setAttributeName(CPUTF8).cpUTF8Value,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.renumber(List),org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.renumber(List).byteCodeOffsets,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.setCodeLength(int),org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.setCodeLength(int).length,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.writeBody(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).localVariableTableLength",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).startPcs",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).lengths",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).names",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).descriptors",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[]).indexes",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.setAttributeName(CPUTF8),org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.setAttributeName(CPUTF8).cpUTF8Value,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.equals(Object),org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.equals(Object).obj,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.writeBody(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.<init>(int,int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.<init>(int,int[],int[]).lineNumberTableLength",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.<init>(int,int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.<init>(int,int[],int[]).startPcs",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.<init>(int,int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.<init>(int,int[],int[]).lineNumbers",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.equals(Object),org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.equals(Object).obj,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.setGlobalIndex(int),org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.setGlobalIndex(int).index,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.writeBody(DataOutputStream).dos,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.<init>(String),org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.<init>(String).string,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.<init>(String,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.<init>(String,int).utf8",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.<init>(String,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.<init>(String,int).globalIndex",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.doWrite(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.doWrite(DataOutputStream).dos,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.equals(Object),org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.equals(Object).arg0,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.write(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.write(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber.<init>(byte,Object,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber.<init>(byte,Object,int).tag",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber.<init>(byte,Object,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber.<init>(byte,Object,int).value",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber.<init>(byte,Object,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber.<init>(byte,Object,int).globalIndex",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.equals(Object),org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.equals(Object).obj,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.<init>(byte,Object,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.<init>(byte,Object,int).tag",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.<init>(byte,Object,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.<init>(byte,Object,int).value",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.<init>(byte,Object,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.<init>(byte,Object,int).globalIndex",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.setAttributeName(CPUTF8),org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.setAttributeName(CPUTF8).cpUTF8Value,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.equals(Object),org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.equals(Object).obj,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.writeBody(DataOutputStream).dos,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.<init>(ElementValue),org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.<init>(ElementValue).elementValue,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef.<init>(CPClass,CPNameAndType,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef.<init>(CPClass,CPNameAndType,int).className",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef.<init>(CPClass,CPNameAndType,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef.<init>(CPClass,CPNameAndType,int).descriptor",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef.<init>(CPClass,CPNameAndType,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef.<init>(CPClass,CPNameAndType,int).globalIndex",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.setAttributeName(CPUTF8),org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.setAttributeName(CPUTF8).cpUTF8Value,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.addInnerClassesEntry(CPClass,CPClass,CPUTF8,int)","org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.addInnerClassesEntry(CPClass,CPClass,CPUTF8,int).innerClass",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.addInnerClassesEntry(CPClass,CPClass,CPUTF8,int)","org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.addInnerClassesEntry(CPClass,CPClass,CPUTF8,int).outerClass",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.addInnerClassesEntry(CPClass,CPClass,CPUTF8,int)","org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.addInnerClassesEntry(CPClass,CPClass,CPUTF8,int).innerName",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.addInnerClassesEntry(CPClass,CPClass,CPUTF8,int)","org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.addInnerClassesEntry(CPClass,CPClass,CPUTF8,int).flags",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.addInnerClassesEntry(InnerClassesEntry),org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.addInnerClassesEntry(InnerClassesEntry).innerClassesEntry,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.equals(Object),org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.equals(Object).obj,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.writeBody(DataOutputStream).dos,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.<init>(String),org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.<init>(String).name,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.write(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.write(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.<init>(CPClass,CPClass,CPUTF8,int)","org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.<init>(CPClass,CPClass,CPUTF8,int).innerClass",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.<init>(CPClass,CPClass,CPUTF8,int)","org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.<init>(CPClass,CPClass,CPUTF8,int).outerClass",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.<init>(CPClass,CPClass,CPUTF8,int)","org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.<init>(CPClass,CPClass,CPUTF8,int).innerName",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.<init>(CPClass,CPClass,CPUTF8,int)","org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.<init>(CPClass,CPClass,CPUTF8,int).flags",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.writeBody(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.<init>(CPUTF8,ParameterAnnotation[])","org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.<init>(CPUTF8,ParameterAnnotation[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.<init>(CPUTF8,ParameterAnnotation[])","org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.<init>(CPUTF8,ParameterAnnotation[]).parameterAnnotations",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.writeBody(DataOutputStream).dos,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.<init>(Annotation[]),org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.<init>(Annotation[]).annotations,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.<init>(CPUTF8),org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.<init>(CPUTF8).attributeName,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.writeBody(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.<init>(int,CPUTF8,CPUTF8[],ElementValue[])","org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.<init>(int,CPUTF8,CPUTF8[],ElementValue[]).numPairs",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.<init>(int,CPUTF8,CPUTF8[],ElementValue[])","org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.<init>(int,CPUTF8,CPUTF8[],ElementValue[]).type",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.<init>(int,CPUTF8,CPUTF8[],ElementValue[])","org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.<init>(int,CPUTF8,CPUTF8[],ElementValue[]).elementNames",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.<init>(int,CPUTF8,CPUTF8[],ElementValue[])","org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.<init>(int,CPUTF8,CPUTF8[],ElementValue[]).elementValues",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.writeBody(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.<init>(int,Object)","org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.<init>(int,Object).tag",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.<init>(int,Object)","org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.<init>(int,Object).value",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.<init>(CPUTF8,CPUTF8,long,List)","org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.<init>(CPUTF8,CPUTF8,long,List).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.<init>(CPUTF8,CPUTF8,long,List)","org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.<init>(CPUTF8,CPUTF8,long,List).descriptor",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.<init>(CPUTF8,CPUTF8,long,List)","org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.<init>(CPUTF8,CPUTF8,long,List).flags",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.<init>(CPUTF8,CPUTF8,long,List)","org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.<init>(CPUTF8,CPUTF8,long,List).attributes",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.equals(Object),org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.equals(Object).obj,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.writeBody(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.<init>(CPUTF8,CPUTF8,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.<init>(CPUTF8,CPUTF8,int).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.<init>(CPUTF8,CPUTF8,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.<init>(CPUTF8,CPUTF8,int).descriptor",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.<init>(CPUTF8,CPUTF8,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.<init>(CPUTF8,CPUTF8,int).globalIndex",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef.<init>(CPClass,CPNameAndType,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef.<init>(CPClass,CPNameAndType,int).className",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef.<init>(CPClass,CPNameAndType,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef.<init>(CPClass,CPNameAndType,int).descriptor",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef.<init>(CPClass,CPNameAndType,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef.<init>(CPClass,CPNameAndType,int).globalIndex",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger.writeBody(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger.<init>(Integer,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger.<init>(Integer,int).value",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger.<init>(Integer,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger.<init>(Integer,int).globalIndex",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCIndex(int,int)","org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCIndex(int,int).length",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCIndex(int,int)","org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCIndex(int,int).value",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCLength(int,int)","org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCLength(int,int).length",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCLength(int,int)","org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCLength(int,int).value",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCOffset(int,int)","org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCOffset(int,int).length",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCOffset(int,int)","org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCOffset(int,int).value",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addInteger(int,long)","org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addInteger(int,long).length",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addInteger(int,long)","org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addInteger(int,long).value",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addToBody(int,Object)","org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addToBody(int,Object).length",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addToBody(int,Object)","org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addToBody(int,Object).value",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.renumber(List),org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.renumber(List).byteCodeOffsets,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.writeBody(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.<init>(CPUTF8,int)","org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.<init>(CPUTF8,int).attributeName",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.<init>(CPUTF8,int)","org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.<init>(CPUTF8,int).layoutIndex",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$AbstractBcValue.setActualValue(int),org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$AbstractBcValue.setActualValue(int).value,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCIndex.<init>(int),org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCIndex.<init>(int).index,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCLength.<init>(int),org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCLength.<init>(int).length,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCOffset.setIndex(int),org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCOffset.setIndex(int).index,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCOffset.<init>(int),org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCOffset.<init>(int).offset,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.setAttributeName(CPUTF8),org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.setAttributeName(CPUTF8).cpUTF8Value,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.equals(Object),org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.equals(Object).obj,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.writeBody(DataOutputStream).dos,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.<init>(ClassFileEntry),org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.<init>(ClassFileEntry).entry,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPField.<init>(CPUTF8,CPUTF8,long,List)","org.apache.commons.compress.harmony.unpack200.bytecode.CPField.<init>(CPUTF8,CPUTF8,long,List).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPField.<init>(CPUTF8,CPUTF8,long,List)","org.apache.commons.compress.harmony.unpack200.bytecode.CPField.<init>(CPUTF8,CPUTF8,long,List).descriptor",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPField.<init>(CPUTF8,CPUTF8,long,List)","org.apache.commons.compress.harmony.unpack200.bytecode.CPField.<init>(CPUTF8,CPUTF8,long,List).flags",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPField.<init>(CPUTF8,CPUTF8,long,List)","org.apache.commons.compress.harmony.unpack200.bytecode.CPField.<init>(CPUTF8,CPUTF8,long,List).attributes",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.equals(Object),org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.equals(Object).obj,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.writeBody(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.<init>(CPClass,CPNameAndType,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.<init>(CPClass,CPNameAndType,int).className",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.<init>(CPClass,CPNameAndType,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.<init>(CPClass,CPNameAndType,int).descriptor",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.<init>(CPClass,CPNameAndType,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.<init>(CPClass,CPNameAndType,int).globalIndex",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPString.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.CPString.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CPString.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.CPString.writeBody(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPString.<init>(CPUTF8,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPString.<init>(CPUTF8,int).value",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CPString.<init>(CPUTF8,int)","org.apache.commons.compress.harmony.unpack200.bytecode.CPString.<init>(CPUTF8,int).globalIndex",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.doWrite(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.doWrite(DataOutputStream).dos,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.equals(Object),org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.equals(Object).obj,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.writeBody(DataOutputStream).dos,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.<init>(CPUTF8),org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.<init>(CPUTF8).attributeName,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.setAttributeName(CPUTF8),org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.setAttributeName(CPUTF8).cpUTF8Value,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.writeBody(DataOutputStream).dos,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.<init>(CPUTF8),org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.<init>(CPUTF8).value,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.setAttributeName(CPUTF8),org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.setAttributeName(CPUTF8).cpUTF8Value,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.equals(Object),org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.equals(Object).obj,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.writeBody(DataOutputStream).dos,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.<init>(CPUTF8),org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.<init>(CPUTF8).name,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.setCurrentClass(String),org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.setCurrentClass(String).string,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.setNewClass(String),org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.setNewClass(String).string,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.setSegment(Segment),org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.setSegment(Segment).segment,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.setSuperClass(String),org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.setSuperClass(String).string,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcCaseCount",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcCaseValue",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcByte",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcShort",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcLocal",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcLabel",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcIntRef",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcFloatRef",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcLongRef",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcDoubleRef",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcStringRef",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcClassRef",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcFieldRef",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcMethodRef",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcIMethodRef",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcThisField",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcSuperField",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcThisMethod",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcSuperMethod",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).bcInitRef",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])","org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[]).wideByteCodes",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.setAttributeName(CPUTF8),org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.setAttributeName(CPUTF8).attributeName,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.addAttribute(Attribute),org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.addAttribute(Attribute).attribute,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.renumber(List),org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.renumber(List).byteCodeOffsets,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.writeBody(DataOutputStream).dos,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>(int,int,byte[],Segment,OperandManager,List)","org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>(int,int,byte[],Segment,OperandManager,List).maxStack",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>(int,int,byte[],Segment,OperandManager,List)","org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>(int,int,byte[],Segment,OperandManager,List).maxLocals",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>(int,int,byte[],Segment,OperandManager,List)","org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>(int,int,byte[],Segment,OperandManager,List).codePacked",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>(int,int,byte[],Segment,OperandManager,List)","org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>(int,int,byte[],Segment,OperandManager,List).segment",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>(int,int,byte[],Segment,OperandManager,List)","org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>(int,int,byte[],Segment,OperandManager,List).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>(int,int,byte[],Segment,OperandManager,List)","org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>(int,int,byte[],Segment,OperandManager,List).exceptionTable",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getByteCode(int),org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getByteCode(int).opcode,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.applyByteCodeTargetFixup(CodeAttribute),org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.applyByteCodeTargetFixup(CodeAttribute).codeAttribute,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.doWrite(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.doWrite(DataOutputStream).dos,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.equals(Object),org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.equals(Object).obj,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.extractOperands(OperandManager,Segment,int)","org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.extractOperands(OperandManager,Segment,int).operandManager",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.extractOperands(OperandManager,Segment,int)","org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.extractOperands(OperandManager,Segment,int).segment",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.extractOperands(OperandManager,Segment,int)","org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.extractOperands(OperandManager,Segment,int).codeLength",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getNestedPosition(int),org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getNestedPosition(int).index,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setByteCodeIndex(int),org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setByteCodeIndex(int).byteCodeOffset,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setByteCodeTargets(int[]),org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setByteCodeTargets(int[]).byteCodeTargets,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setNested(ClassFileEntry[]),org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setNested(ClassFileEntry[]).nested,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setNestedPositions(int[][]),org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setNestedPositions(int[][]).nestedPositions,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperand2Bytes(int,int)","org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperand2Bytes(int,int).operand",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperand2Bytes(int,int)","org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperand2Bytes(int,int).position",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandByte(int,int)","org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandByte(int,int).operand",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandByte(int,int)","org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandByte(int,int).position",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandBytes(int[]),org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandBytes(int[]).operands,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandSigned2Bytes(int,int)","org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandSigned2Bytes(int,int).operand",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandSigned2Bytes(int,int)","org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandSigned2Bytes(int,int).position",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setRewrite(int[]),org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setRewrite(int[]).rewrite,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.<init>(int),org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.<init>(int).opcode,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.<init>(int,ClassFileEntry[])","org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.<init>(int,ClassFileEntry[]).opcode",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.<init>(int,ClassFileEntry[])","org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.<init>(int,ClassFileEntry[]).nested",Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.hashCode(Object[]),org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.hashCode(Object[]).array,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.setAttributeName(CPUTF8),org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.setAttributeName(CPUTF8).cpUTF8Value,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.equals(Object),org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.equals(Object).obj,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.resolve(ClassConstantPool),org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.resolve(ClassConstantPool).pool,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.writeBody(DataOutputStream),org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.writeBody(DataOutputStream).dos,Has_Parameter
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.<init>(CPClass[]),org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.<init>(CPClass[]).exceptions,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.IcBands.getRelevantIcTuples(String,ClassConstantPool)","org.apache.commons.compress.harmony.unpack200.IcBands.getRelevantIcTuples(String,ClassConstantPool).className",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.IcBands.getRelevantIcTuples(String,ClassConstantPool)","org.apache.commons.compress.harmony.unpack200.IcBands.getRelevantIcTuples(String,ClassConstantPool).cp",Has_Parameter
org.apache.commons.compress.harmony.unpack200.IcBands.read(InputStream),org.apache.commons.compress.harmony.unpack200.IcBands.read(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.IcBands.<init>(Segment),org.apache.commons.compress.harmony.unpack200.IcBands.<init>(Segment).segment,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.ClassBands.getCallCount(int[][],long[][],int)","org.apache.commons.compress.harmony.unpack200.ClassBands.getCallCount(int[][],long[][],int).methodAttrIndexes",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.ClassBands.getCallCount(int[][],long[][],int)","org.apache.commons.compress.harmony.unpack200.ClassBands.getCallCount(int[][],long[][],int).flags",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.ClassBands.getCallCount(int[][],long[][],int)","org.apache.commons.compress.harmony.unpack200.ClassBands.getCallCount(int[][],long[][],int).context",Has_Parameter
org.apache.commons.compress.harmony.unpack200.ClassBands.parseClassAttrBands(InputStream),org.apache.commons.compress.harmony.unpack200.ClassBands.parseClassAttrBands(InputStream).in,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseClassMetadataBands(InputStream,int[])","org.apache.commons.compress.harmony.unpack200.ClassBands.parseClassMetadataBands(InputStream,int[]).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseClassMetadataBands(InputStream,int[])","org.apache.commons.compress.harmony.unpack200.ClassBands.parseClassMetadataBands(InputStream,int[]).classAttrCalls",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseCodeAttrBands(InputStream,int)","org.apache.commons.compress.harmony.unpack200.ClassBands.parseCodeAttrBands(InputStream,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseCodeAttrBands(InputStream,int)","org.apache.commons.compress.harmony.unpack200.ClassBands.parseCodeAttrBands(InputStream,int).codeFlagsCount",Has_Parameter
org.apache.commons.compress.harmony.unpack200.ClassBands.parseCodeBands(InputStream),org.apache.commons.compress.harmony.unpack200.ClassBands.parseCodeBands(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.ClassBands.parseFieldAttrBands(InputStream),org.apache.commons.compress.harmony.unpack200.ClassBands.parseFieldAttrBands(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.ClassBands.parseFieldBands(InputStream),org.apache.commons.compress.harmony.unpack200.ClassBands.parseFieldBands(InputStream).in,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseFieldMetadataBands(InputStream,int[])","org.apache.commons.compress.harmony.unpack200.ClassBands.parseFieldMetadataBands(InputStream,int[]).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseFieldMetadataBands(InputStream,int[])","org.apache.commons.compress.harmony.unpack200.ClassBands.parseFieldMetadataBands(InputStream,int[]).fieldAttrCalls",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseMetadata(InputStream,String[],int[],int[],String)","org.apache.commons.compress.harmony.unpack200.ClassBands.parseMetadata(InputStream,String[],int[],int[],String).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseMetadata(InputStream,String[],int[],int[],String)","org.apache.commons.compress.harmony.unpack200.ClassBands.parseMetadata(InputStream,String[],int[],int[],String).RxA",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseMetadata(InputStream,String[],int[],int[],String)","org.apache.commons.compress.harmony.unpack200.ClassBands.parseMetadata(InputStream,String[],int[],int[],String).RxACount",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseMetadata(InputStream,String[],int[],int[],String)","org.apache.commons.compress.harmony.unpack200.ClassBands.parseMetadata(InputStream,String[],int[],int[],String).backwardsCallCounts",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseMetadata(InputStream,String[],int[],int[],String)","org.apache.commons.compress.harmony.unpack200.ClassBands.parseMetadata(InputStream,String[],int[],int[],String).contextName",Has_Parameter
org.apache.commons.compress.harmony.unpack200.ClassBands.parseMethodAttrBands(InputStream),org.apache.commons.compress.harmony.unpack200.ClassBands.parseMethodAttrBands(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.ClassBands.parseMethodBands(InputStream),org.apache.commons.compress.harmony.unpack200.ClassBands.parseMethodBands(InputStream).in,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseMethodMetadataBands(InputStream,int[])","org.apache.commons.compress.harmony.unpack200.ClassBands.parseMethodMetadataBands(InputStream,int[]).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.ClassBands.parseMethodMetadataBands(InputStream,int[])","org.apache.commons.compress.harmony.unpack200.ClassBands.parseMethodMetadataBands(InputStream,int[]).methodAttrCalls",Has_Parameter
org.apache.commons.compress.harmony.unpack200.ClassBands.read(InputStream),org.apache.commons.compress.harmony.unpack200.ClassBands.read(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.ClassBands.<init>(Segment),org.apache.commons.compress.harmony.unpack200.ClassBands.<init>(Segment).segment,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int[])","org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int[])","org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int[]).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int[])","org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int[]).defaultCodec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int[])","org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int[]).counts",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.getReferences(int[],String[])","org.apache.commons.compress.harmony.unpack200.BandSet.getReferences(int[],String[]).ints",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.getReferences(int[],String[])","org.apache.commons.compress.harmony.unpack200.BandSet.getReferences(int[],String[]).reference",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.getReferences(int[][],String[])","org.apache.commons.compress.harmony.unpack200.BandSet.getReferences(int[][],String[]).ints",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.getReferences(int[][],String[])","org.apache.commons.compress.harmony.unpack200.BandSet.getReferences(int[][],String[]).reference",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPClassReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPClassReferences(String,InputStream,BHSDCodec,int).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPClassReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPClassReferences(String,InputStream,BHSDCodec,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPClassReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPClassReferences(String,InputStream,BHSDCodec,int).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPClassReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPClassReferences(String,InputStream,BHSDCodec,int).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDescriptorReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDescriptorReferences(String,InputStream,BHSDCodec,int).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDescriptorReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDescriptorReferences(String,InputStream,BHSDCodec,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDescriptorReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDescriptorReferences(String,InputStream,BHSDCodec,int).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDescriptorReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDescriptorReferences(String,InputStream,BHSDCodec,int).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDoubleReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDoubleReferences(String,InputStream,BHSDCodec,int).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDoubleReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDoubleReferences(String,InputStream,BHSDCodec,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDoubleReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDoubleReferences(String,InputStream,BHSDCodec,int).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDoubleReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDoubleReferences(String,InputStream,BHSDCodec,int).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFieldRefReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFieldRefReferences(String,InputStream,BHSDCodec,int).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFieldRefReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFieldRefReferences(String,InputStream,BHSDCodec,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFieldRefReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFieldRefReferences(String,InputStream,BHSDCodec,int).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFieldRefReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFieldRefReferences(String,InputStream,BHSDCodec,int).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFloatReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFloatReferences(String,InputStream,BHSDCodec,int).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFloatReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFloatReferences(String,InputStream,BHSDCodec,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFloatReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFloatReferences(String,InputStream,BHSDCodec,int).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFloatReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFloatReferences(String,InputStream,BHSDCodec,int).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPInterfaceMethodRefReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPInterfaceMethodRefReferences(String,InputStream,BHSDCodec,int).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPInterfaceMethodRefReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPInterfaceMethodRefReferences(String,InputStream,BHSDCodec,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPInterfaceMethodRefReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPInterfaceMethodRefReferences(String,InputStream,BHSDCodec,int).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPInterfaceMethodRefReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPInterfaceMethodRefReferences(String,InputStream,BHSDCodec,int).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPIntReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPIntReferences(String,InputStream,BHSDCodec,int).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPIntReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPIntReferences(String,InputStream,BHSDCodec,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPIntReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPIntReferences(String,InputStream,BHSDCodec,int).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPIntReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPIntReferences(String,InputStream,BHSDCodec,int).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPLongReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPLongReferences(String,InputStream,BHSDCodec,int).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPLongReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPLongReferences(String,InputStream,BHSDCodec,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPLongReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPLongReferences(String,InputStream,BHSDCodec,int).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPLongReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPLongReferences(String,InputStream,BHSDCodec,int).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPMethodRefReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPMethodRefReferences(String,InputStream,BHSDCodec,int).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPMethodRefReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPMethodRefReferences(String,InputStream,BHSDCodec,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPMethodRefReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPMethodRefReferences(String,InputStream,BHSDCodec,int).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPMethodRefReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPMethodRefReferences(String,InputStream,BHSDCodec,int).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int[])","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int[])","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int[]).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int[])","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int[]).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int[])","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int[]).counts",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPStringReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPStringReferences(String,InputStream,BHSDCodec,int).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPStringReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPStringReferences(String,InputStream,BHSDCodec,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPStringReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPStringReferences(String,InputStream,BHSDCodec,int).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPStringReferences(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPStringReferences(String,InputStream,BHSDCodec,int).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int)","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int[])","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int[])","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int[]).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int[])","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int[]).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int[])","org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int[]).counts",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec)","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec)","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec)","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec)","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec).hiCodec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec)","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec).loCodec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,boolean)","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,boolean).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,boolean)","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,boolean).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,boolean)","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,boolean).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,boolean)","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,boolean).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,boolean)","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,boolean).hasHi",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec)","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec)","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec)","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec).counts",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec)","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec).hiCodec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec)","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec).loCodec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,boolean)","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,boolean).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,boolean)","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,boolean).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,boolean)","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,boolean).counts",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,boolean)","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,boolean).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,boolean)","org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,boolean).hasHi",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int,String[])","org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int,String[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int,String[])","org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int,String[]).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int,String[])","org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int,String[]).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int,String[])","org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int,String[]).count",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int,String[])","org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int,String[]).reference",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int[],String[])","org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int[],String[]).name",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int[],String[])","org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int[],String[]).in",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int[],String[])","org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int[],String[]).codec",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int[],String[])","org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int[],String[]).counts",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int[],String[])","org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int[],String[]).reference",Has_Parameter
org.apache.commons.compress.harmony.unpack200.BandSet.read(InputStream),org.apache.commons.compress.harmony.unpack200.BandSet.read(InputStream).inputStream,Has_Parameter
org.apache.commons.compress.harmony.unpack200.BandSet.unpack(InputStream),org.apache.commons.compress.harmony.unpack200.BandSet.unpack(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.BandSet.<init>(Segment),org.apache.commons.compress.harmony.unpack200.BandSet.<init>(Segment).segment,Has_Parameter
org.apache.commons.compress.harmony.unpack200.FileBands.read(InputStream),org.apache.commons.compress.harmony.unpack200.FileBands.read(InputStream).in,Has_Parameter
org.apache.commons.compress.harmony.unpack200.FileBands.<init>(Segment),org.apache.commons.compress.harmony.unpack200.FileBands.<init>(Segment).segment,Has_Parameter
org.apache.commons.compress.harmony.unpack200.Archive.available(InputStream),org.apache.commons.compress.harmony.unpack200.Archive.available(InputStream).inputStream,Has_Parameter
org.apache.commons.compress.harmony.unpack200.Archive.setDeflateHint(boolean),org.apache.commons.compress.harmony.unpack200.Archive.setDeflateHint(boolean).deflateHint,Has_Parameter
org.apache.commons.compress.harmony.unpack200.Archive.setLogFile(String),org.apache.commons.compress.harmony.unpack200.Archive.setLogFile(String).logFileName,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.Archive.setLogFile(String,boolean)","org.apache.commons.compress.harmony.unpack200.Archive.setLogFile(String,boolean).logFileName",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.Archive.setLogFile(String,boolean)","org.apache.commons.compress.harmony.unpack200.Archive.setLogFile(String,boolean).append",Has_Parameter
org.apache.commons.compress.harmony.unpack200.Archive.setQuiet(boolean),org.apache.commons.compress.harmony.unpack200.Archive.setQuiet(boolean).quiet,Has_Parameter
org.apache.commons.compress.harmony.unpack200.Archive.setRemovePackFile(boolean),org.apache.commons.compress.harmony.unpack200.Archive.setRemovePackFile(boolean).removePackFile,Has_Parameter
org.apache.commons.compress.harmony.unpack200.Archive.setVerbose(boolean),org.apache.commons.compress.harmony.unpack200.Archive.setVerbose(boolean).verbose,Has_Parameter
"org.apache.commons.compress.harmony.unpack200.Archive.<init>(InputStream,JarOutputStream)","org.apache.commons.compress.harmony.unpack200.Archive.<init>(InputStream,JarOutputStream).inputStream",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.Archive.<init>(InputStream,JarOutputStream)","org.apache.commons.compress.harmony.unpack200.Archive.<init>(InputStream,JarOutputStream).outputStream",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.Archive.<init>(String,String)","org.apache.commons.compress.harmony.unpack200.Archive.<init>(String,String).inputFileName",Has_Parameter
"org.apache.commons.compress.harmony.unpack200.Archive.<init>(String,String)","org.apache.commons.compress.harmony.unpack200.Archive.<init>(String,String).outputFileName",Has_Parameter
org.apache.commons.compress.harmony.unpack200.IMatcher.matches(long),org.apache.commons.compress.harmony.unpack200.IMatcher.matches(long).value,Has_Parameter
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.format(String,Object[])","org.apache.commons.compress.harmony.archive.internal.nls.Messages.format(String,Object[]).format",Has_Parameter
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.format(String,Object[])","org.apache.commons.compress.harmony.archive.internal.nls.Messages.format(String,Object[]).args",Has_Parameter
org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String),org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String).msg,Has_Parameter
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,char)","org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,char).msg",Has_Parameter
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,char)","org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,char).arg",Has_Parameter
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,int)","org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,int).msg",Has_Parameter
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,int)","org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,int).arg",Has_Parameter
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object)","org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object).msg",Has_Parameter
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object)","org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object).arg",Has_Parameter
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object,Object)","org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object,Object).msg",Has_Parameter
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object,Object)","org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object,Object).arg1",Has_Parameter
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object,Object)","org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object,Object).arg2",Has_Parameter
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object[])","org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object[]).msg",Has_Parameter
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object[])","org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object[]).args",Has_Parameter
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.setLocale(Locale,String)","org.apache.commons.compress.harmony.archive.internal.nls.Messages.setLocale(Locale,String).locale",Has_Parameter
"org.apache.commons.compress.harmony.archive.internal.nls.Messages.setLocale(Locale,String)","org.apache.commons.compress.harmony.archive.internal.nls.Messages.setLocale(Locale,String).resource",Has_Parameter
org.apache.commons.compress.harmony.pack200.CPClass.compareTo(CPClass),org.apache.commons.compress.harmony.pack200.CPClass.compareTo(CPClass).arg0,Has_Parameter
org.apache.commons.compress.harmony.pack200.CPClass.<init>(CPUTF8),org.apache.commons.compress.harmony.pack200.CPClass.<init>(CPUTF8).utf8,Has_Parameter
org.apache.commons.compress.harmony.pack200.BcBands.getIndexInClass(List),org.apache.commons.compress.harmony.pack200.BcBands.getIndexInClass(List).cPMethodOrFieldList,Has_Parameter
org.apache.commons.compress.harmony.pack200.BcBands.getIndexInClassForConstructor(List),org.apache.commons.compress.harmony.pack200.BcBands.getIndexInClassForConstructor(List).cPMethodList,Has_Parameter
org.apache.commons.compress.harmony.pack200.BcBands.pack(OutputStream),org.apache.commons.compress.harmony.pack200.BcBands.pack(OutputStream).out,Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.setCurrentClass(String,String)","org.apache.commons.compress.harmony.pack200.BcBands.setCurrentClass(String,String).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.setCurrentClass(String,String)","org.apache.commons.compress.harmony.pack200.BcBands.setCurrentClass(String,String).superName",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitFieldInsn(int,String,String,String)","org.apache.commons.compress.harmony.pack200.BcBands.visitFieldInsn(int,String,String,String).opcode",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitFieldInsn(int,String,String,String)","org.apache.commons.compress.harmony.pack200.BcBands.visitFieldInsn(int,String,String,String).owner",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitFieldInsn(int,String,String,String)","org.apache.commons.compress.harmony.pack200.BcBands.visitFieldInsn(int,String,String,String).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitFieldInsn(int,String,String,String)","org.apache.commons.compress.harmony.pack200.BcBands.visitFieldInsn(int,String,String,String).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitIincInsn(int,int)","org.apache.commons.compress.harmony.pack200.BcBands.visitIincInsn(int,int).var",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitIincInsn(int,int)","org.apache.commons.compress.harmony.pack200.BcBands.visitIincInsn(int,int).increment",Has_Parameter
org.apache.commons.compress.harmony.pack200.BcBands.visitInsn(int),org.apache.commons.compress.harmony.pack200.BcBands.visitInsn(int).opcode,Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitIntInsn(int,int)","org.apache.commons.compress.harmony.pack200.BcBands.visitIntInsn(int,int).opcode",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitIntInsn(int,int)","org.apache.commons.compress.harmony.pack200.BcBands.visitIntInsn(int,int).operand",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitJumpInsn(int,Label)","org.apache.commons.compress.harmony.pack200.BcBands.visitJumpInsn(int,Label).opcode",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitJumpInsn(int,Label)","org.apache.commons.compress.harmony.pack200.BcBands.visitJumpInsn(int,Label).label",Has_Parameter
org.apache.commons.compress.harmony.pack200.BcBands.visitLabel(Label),org.apache.commons.compress.harmony.pack200.BcBands.visitLabel(Label).label,Has_Parameter
org.apache.commons.compress.harmony.pack200.BcBands.visitLdcInsn(Object),org.apache.commons.compress.harmony.pack200.BcBands.visitLdcInsn(Object).cst,Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitLookupSwitchInsn(Label,int[],Label[])","org.apache.commons.compress.harmony.pack200.BcBands.visitLookupSwitchInsn(Label,int[],Label[]).dflt",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitLookupSwitchInsn(Label,int[],Label[])","org.apache.commons.compress.harmony.pack200.BcBands.visitLookupSwitchInsn(Label,int[],Label[]).keys",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitLookupSwitchInsn(Label,int[],Label[])","org.apache.commons.compress.harmony.pack200.BcBands.visitLookupSwitchInsn(Label,int[],Label[]).labels",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitMethodInsn(int,String,String,String)","org.apache.commons.compress.harmony.pack200.BcBands.visitMethodInsn(int,String,String,String).opcode",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitMethodInsn(int,String,String,String)","org.apache.commons.compress.harmony.pack200.BcBands.visitMethodInsn(int,String,String,String).owner",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitMethodInsn(int,String,String,String)","org.apache.commons.compress.harmony.pack200.BcBands.visitMethodInsn(int,String,String,String).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitMethodInsn(int,String,String,String)","org.apache.commons.compress.harmony.pack200.BcBands.visitMethodInsn(int,String,String,String).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitMultiANewArrayInsn(String,int)","org.apache.commons.compress.harmony.pack200.BcBands.visitMultiANewArrayInsn(String,int).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitMultiANewArrayInsn(String,int)","org.apache.commons.compress.harmony.pack200.BcBands.visitMultiANewArrayInsn(String,int).dimensions",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitTableSwitchInsn(int,int,Label,Label[])","org.apache.commons.compress.harmony.pack200.BcBands.visitTableSwitchInsn(int,int,Label,Label[]).min",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitTableSwitchInsn(int,int,Label,Label[])","org.apache.commons.compress.harmony.pack200.BcBands.visitTableSwitchInsn(int,int,Label,Label[]).max",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitTableSwitchInsn(int,int,Label,Label[])","org.apache.commons.compress.harmony.pack200.BcBands.visitTableSwitchInsn(int,int,Label,Label[]).dflt",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitTableSwitchInsn(int,int,Label,Label[])","org.apache.commons.compress.harmony.pack200.BcBands.visitTableSwitchInsn(int,int,Label,Label[]).labels",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitTypeInsn(int,String)","org.apache.commons.compress.harmony.pack200.BcBands.visitTypeInsn(int,String).opcode",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitTypeInsn(int,String)","org.apache.commons.compress.harmony.pack200.BcBands.visitTypeInsn(int,String).type",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitVarInsn(int,int)","org.apache.commons.compress.harmony.pack200.BcBands.visitVarInsn(int,int).opcode",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.visitVarInsn(int,int)","org.apache.commons.compress.harmony.pack200.BcBands.visitVarInsn(int,int).var",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.<init>(CpBands,Segment,int)","org.apache.commons.compress.harmony.pack200.BcBands.<init>(CpBands,Segment,int).cpBands",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.<init>(CpBands,Segment,int)","org.apache.commons.compress.harmony.pack200.BcBands.<init>(CpBands,Segment,int).segment",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BcBands.<init>(CpBands,Segment,int)","org.apache.commons.compress.harmony.pack200.BcBands.<init>(CpBands,Segment,int).effort",Has_Parameter
org.apache.commons.compress.harmony.pack200.CPFloat.compareTo(CPFloat),org.apache.commons.compress.harmony.pack200.CPFloat.compareTo(CPFloat).obj,Has_Parameter
org.apache.commons.compress.harmony.pack200.CPFloat.<init>(float),org.apache.commons.compress.harmony.pack200.CPFloat.<init>(float).theFloat,Has_Parameter
org.apache.commons.compress.harmony.pack200.CPDouble.compareTo(CPDouble),org.apache.commons.compress.harmony.pack200.CPDouble.compareTo(CPDouble).obj,Has_Parameter
org.apache.commons.compress.harmony.pack200.CPDouble.<init>(double),org.apache.commons.compress.harmony.pack200.CPDouble.<init>(double).theDouble,Has_Parameter
org.apache.commons.compress.harmony.pack200.ConstantPoolEntry.setIndex(int),org.apache.commons.compress.harmony.pack200.ConstantPoolEntry.setIndex(int).index,Has_Parameter
org.apache.commons.compress.harmony.pack200.CPMethodOrField.compareTo(Object),org.apache.commons.compress.harmony.pack200.CPMethodOrField.compareTo(Object).obj,Has_Parameter
org.apache.commons.compress.harmony.pack200.CPMethodOrField.setIndexInClass(int),org.apache.commons.compress.harmony.pack200.CPMethodOrField.setIndexInClass(int).index,Has_Parameter
org.apache.commons.compress.harmony.pack200.CPMethodOrField.setIndexInClassForConstructor(int),org.apache.commons.compress.harmony.pack200.CPMethodOrField.setIndexInClassForConstructor(int).index,Has_Parameter
"org.apache.commons.compress.harmony.pack200.CPMethodOrField.<init>(CPClass,CPNameAndType)","org.apache.commons.compress.harmony.pack200.CPMethodOrField.<init>(CPClass,CPNameAndType).className",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CPMethodOrField.<init>(CPClass,CPNameAndType)","org.apache.commons.compress.harmony.pack200.CPMethodOrField.<init>(CPClass,CPNameAndType).nameAndType",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List).nameRU",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List).tags",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List).values",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List).caseArrayN",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List).nestTypeRS",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List).nestNameRU",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List).nestPairN",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).numParams",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).annoN",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).pairN",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).typeRS",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).nameRU",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).tags",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).values",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).caseArrayN",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).nestTypeRS",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).nestNameRU",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List).nestPairN",Has_Parameter
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.nextString(Iterator),org.apache.commons.compress.harmony.pack200.MetadataBandGroup.nextString(Iterator).valuesIterator,Has_Parameter
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.pack(OutputStream),org.apache.commons.compress.harmony.pack200.MetadataBandGroup.pack(OutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.pack200.MetadataBandGroup.tagListToArray(List),org.apache.commons.compress.harmony.pack200.MetadataBandGroup.tagListToArray(List).list,Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<init>(String,int,CpBands,SegmentHeader,int)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<init>(String,int,CpBands,SegmentHeader,int).type",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<init>(String,int,CpBands,SegmentHeader,int)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<init>(String,int,CpBands,SegmentHeader,int).context",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<init>(String,int,CpBands,SegmentHeader,int)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<init>(String,int,CpBands,SegmentHeader,int).cpBands",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<init>(String,int,CpBands,SegmentHeader,int)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<init>(String,int,CpBands,SegmentHeader,int).segmentHeader",Has_Parameter
"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<init>(String,int,CpBands,SegmentHeader,int)","org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<init>(String,int,CpBands,SegmentHeader,int).effort",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.addValueAndTag(Object,List,List)","org.apache.commons.compress.harmony.pack200.Segment.addValueAndTag(Object,List,List).value",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.addValueAndTag(Object,List,List)","org.apache.commons.compress.harmony.pack200.Segment.addValueAndTag(Object,List,List).tags",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.addValueAndTag(Object,List,List)","org.apache.commons.compress.harmony.pack200.Segment.addValueAndTag(Object,List,List).values",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.pack(SegmentUnit,OutputStream,PackingOptions)","org.apache.commons.compress.harmony.pack200.Segment.pack(SegmentUnit,OutputStream,PackingOptions).segmentUnit",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.pack(SegmentUnit,OutputStream,PackingOptions)","org.apache.commons.compress.harmony.pack200.Segment.pack(SegmentUnit,OutputStream,PackingOptions).out",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.pack(SegmentUnit,OutputStream,PackingOptions)","org.apache.commons.compress.harmony.pack200.Segment.pack(SegmentUnit,OutputStream,PackingOptions).options",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.processClasses(SegmentUnit,Attribute[])","org.apache.commons.compress.harmony.pack200.Segment.processClasses(SegmentUnit,Attribute[]).segmentUnit",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.processClasses(SegmentUnit,Attribute[])","org.apache.commons.compress.harmony.pack200.Segment.processClasses(SegmentUnit,Attribute[]).attributes",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visit(int,int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.Segment.visit(int,int,String,String,String,String[]).version",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visit(int,int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.Segment.visit(int,int,String,String,String,String[]).access",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visit(int,int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.Segment.visit(int,int,String,String,String,String[]).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visit(int,int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.Segment.visit(int,int,String,String,String,String[]).signature",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visit(int,int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.Segment.visit(int,int,String,String,String,String[]).superName",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visit(int,int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.Segment.visit(int,int,String,String,String,String[]).interfaces",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitAnnotation(String,boolean)","org.apache.commons.compress.harmony.pack200.Segment.visitAnnotation(String,boolean).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitAnnotation(String,boolean)","org.apache.commons.compress.harmony.pack200.Segment.visitAnnotation(String,boolean).visible",Has_Parameter
org.apache.commons.compress.harmony.pack200.Segment.visitAttribute(Attribute),org.apache.commons.compress.harmony.pack200.Segment.visitAttribute(Attribute).attribute,Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitField(int,String,String,String,Object)","org.apache.commons.compress.harmony.pack200.Segment.visitField(int,String,String,String,Object).flags",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitField(int,String,String,String,Object)","org.apache.commons.compress.harmony.pack200.Segment.visitField(int,String,String,String,Object).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitField(int,String,String,String,Object)","org.apache.commons.compress.harmony.pack200.Segment.visitField(int,String,String,String,Object).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitField(int,String,String,String,Object)","org.apache.commons.compress.harmony.pack200.Segment.visitField(int,String,String,String,Object).signature",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitField(int,String,String,String,Object)","org.apache.commons.compress.harmony.pack200.Segment.visitField(int,String,String,String,Object).value",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitInnerClass(String,String,String,int)","org.apache.commons.compress.harmony.pack200.Segment.visitInnerClass(String,String,String,int).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitInnerClass(String,String,String,int)","org.apache.commons.compress.harmony.pack200.Segment.visitInnerClass(String,String,String,int).outerName",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitInnerClass(String,String,String,int)","org.apache.commons.compress.harmony.pack200.Segment.visitInnerClass(String,String,String,int).innerName",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitInnerClass(String,String,String,int)","org.apache.commons.compress.harmony.pack200.Segment.visitInnerClass(String,String,String,int).flags",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitMethod(int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.Segment.visitMethod(int,String,String,String,String[]).flags",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitMethod(int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.Segment.visitMethod(int,String,String,String,String[]).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitMethod(int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.Segment.visitMethod(int,String,String,String,String[]).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitMethod(int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.Segment.visitMethod(int,String,String,String,String[]).signature",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitMethod(int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.Segment.visitMethod(int,String,String,String,String[]).exceptions",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitOuterClass(String,String,String)","org.apache.commons.compress.harmony.pack200.Segment.visitOuterClass(String,String,String).owner",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitOuterClass(String,String,String)","org.apache.commons.compress.harmony.pack200.Segment.visitOuterClass(String,String,String).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitOuterClass(String,String,String)","org.apache.commons.compress.harmony.pack200.Segment.visitOuterClass(String,String,String).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitSource(String,String)","org.apache.commons.compress.harmony.pack200.Segment.visitSource(String,String).source",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment.visitSource(String,String)","org.apache.commons.compress.harmony.pack200.Segment.visitSource(String,String).debug",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visit(String,Object)","org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visit(String,Object).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visit(String,Object)","org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visit(String,Object).value",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitAnnotation(String,String)","org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitAnnotation(String,String).arg0",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitAnnotation(String,String)","org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitAnnotation(String,String).arg1",Has_Parameter
org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitArray(String),org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitArray(String).name,Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitEnum(String,String,String)","org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitEnum(String,String,String).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitEnum(String,String,String)","org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitEnum(String,String,String).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitEnum(String,String,String)","org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitEnum(String,String,String).value",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visit(String,Object)","org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visit(String,Object).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visit(String,Object)","org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visit(String,Object).value",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitAnnotation(String,String)","org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitAnnotation(String,String).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitAnnotation(String,String)","org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitAnnotation(String,String).desc",Has_Parameter
org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitArray(String),org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitArray(String).name,Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitEnum(String,String,String)","org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitEnum(String,String,String).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitEnum(String,String,String)","org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitEnum(String,String,String).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitEnum(String,String,String)","org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitEnum(String,String,String).value",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor.visitAnnotation(String,boolean)","org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor.visitAnnotation(String,boolean).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor.visitAnnotation(String,boolean)","org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor.visitAnnotation(String,boolean).visible",Has_Parameter
org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor.visitAttribute(Attribute),org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor.visitAttribute(Attribute).attribute,Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitAnnotation(String,boolean)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitAnnotation(String,boolean).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitAnnotation(String,boolean)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitAnnotation(String,boolean).visible",Has_Parameter
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitAttribute(Attribute),org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitAttribute(Attribute).attribute,Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFieldInsn(int,String,String,String)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFieldInsn(int,String,String,String).opcode",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFieldInsn(int,String,String,String)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFieldInsn(int,String,String,String).owner",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFieldInsn(int,String,String,String)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFieldInsn(int,String,String,String).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFieldInsn(int,String,String,String)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFieldInsn(int,String,String,String).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFrame(int,int,Object[],int,Object[])","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFrame(int,int,Object[],int,Object[]).arg0",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFrame(int,int,Object[],int,Object[])","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFrame(int,int,Object[],int,Object[]).arg1",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFrame(int,int,Object[],int,Object[])","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFrame(int,int,Object[],int,Object[]).arg2",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFrame(int,int,Object[],int,Object[])","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFrame(int,int,Object[],int,Object[]).arg3",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFrame(int,int,Object[],int,Object[])","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFrame(int,int,Object[],int,Object[]).arg4",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitIincInsn(int,int)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitIincInsn(int,int).var",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitIincInsn(int,int)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitIincInsn(int,int).increment",Has_Parameter
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitInsn(int),org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitInsn(int).opcode,Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitIntInsn(int,int)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitIntInsn(int,int).opcode",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitIntInsn(int,int)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitIntInsn(int,int).operand",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitJumpInsn(int,Label)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitJumpInsn(int,Label).opcode",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitJumpInsn(int,Label)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitJumpInsn(int,Label).label",Has_Parameter
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLabel(Label),org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLabel(Label).label,Has_Parameter
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLdcInsn(Object),org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLdcInsn(Object).cst,Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLineNumber(int,Label)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLineNumber(int,Label).line",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLineNumber(int,Label)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLineNumber(int,Label).start",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLocalVariable(String,String,String,Label,Label,int)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLocalVariable(String,String,String,Label,Label,int).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLocalVariable(String,String,String,Label,Label,int)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLocalVariable(String,String,String,Label,Label,int).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLocalVariable(String,String,String,Label,Label,int)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLocalVariable(String,String,String,Label,Label,int).signature",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLocalVariable(String,String,String,Label,Label,int)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLocalVariable(String,String,String,Label,Label,int).start",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLocalVariable(String,String,String,Label,Label,int)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLocalVariable(String,String,String,Label,Label,int).end",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLocalVariable(String,String,String,Label,Label,int)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLocalVariable(String,String,String,Label,Label,int).index",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLookupSwitchInsn(Label,int[],Label[])","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLookupSwitchInsn(Label,int[],Label[]).dflt",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLookupSwitchInsn(Label,int[],Label[])","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLookupSwitchInsn(Label,int[],Label[]).keys",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLookupSwitchInsn(Label,int[],Label[])","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLookupSwitchInsn(Label,int[],Label[]).labels",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMaxs(int,int)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMaxs(int,int).maxStack",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMaxs(int,int)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMaxs(int,int).maxLocals",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMethodInsn(int,String,String,String)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMethodInsn(int,String,String,String).opcode",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMethodInsn(int,String,String,String)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMethodInsn(int,String,String,String).owner",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMethodInsn(int,String,String,String)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMethodInsn(int,String,String,String).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMethodInsn(int,String,String,String)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMethodInsn(int,String,String,String).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMultiANewArrayInsn(String,int)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMultiANewArrayInsn(String,int).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMultiANewArrayInsn(String,int)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMultiANewArrayInsn(String,int).dimensions",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitParameterAnnotation(int,String,boolean)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitParameterAnnotation(int,String,boolean).parameter",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitParameterAnnotation(int,String,boolean)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitParameterAnnotation(int,String,boolean).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitParameterAnnotation(int,String,boolean)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitParameterAnnotation(int,String,boolean).visible",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTableSwitchInsn(int,int,Label,Label[])","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTableSwitchInsn(int,int,Label,Label[]).min",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTableSwitchInsn(int,int,Label,Label[])","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTableSwitchInsn(int,int,Label,Label[]).max",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTableSwitchInsn(int,int,Label,Label[])","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTableSwitchInsn(int,int,Label,Label[]).dflt",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTableSwitchInsn(int,int,Label,Label[])","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTableSwitchInsn(int,int,Label,Label[]).labels",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTryCatchBlock(Label,Label,Label,String)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTryCatchBlock(Label,Label,Label,String).start",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTryCatchBlock(Label,Label,Label,String)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTryCatchBlock(Label,Label,Label,String).end",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTryCatchBlock(Label,Label,Label,String)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTryCatchBlock(Label,Label,Label,String).handler",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTryCatchBlock(Label,Label,Label,String)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTryCatchBlock(Label,Label,Label,String).type",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTypeInsn(int,String)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTypeInsn(int,String).opcode",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTypeInsn(int,String)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTypeInsn(int,String).type",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitVarInsn(int,int)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitVarInsn(int,int).opcode",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitVarInsn(int,int)","org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitVarInsn(int,int).var",Has_Parameter
org.apache.commons.compress.harmony.pack200.CPInt.compareTo(CPInt),org.apache.commons.compress.harmony.pack200.CPInt.compareTo(CPInt).obj,Has_Parameter
org.apache.commons.compress.harmony.pack200.CPInt.<init>(int),org.apache.commons.compress.harmony.pack200.CPInt.<init>(int).theInt,Has_Parameter
"org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.firePropertyChange(String,Object,Object)","org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.firePropertyChange(String,Object,Object).propertyName",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.firePropertyChange(String,Object,Object)","org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.firePropertyChange(String,Object,Object).oldValue",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.firePropertyChange(String,Object,Object)","org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.firePropertyChange(String,Object,Object).newValue",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.pack(JarFile,OutputStream)","org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.pack(JarFile,OutputStream).file",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.pack(JarFile,OutputStream)","org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.pack(JarFile,OutputStream).out",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.pack(JarInputStream,OutputStream)","org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.pack(JarInputStream,OutputStream).in",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.pack(JarInputStream,OutputStream)","org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.pack(JarInputStream,OutputStream).out",Has_Parameter
org.apache.commons.compress.harmony.pack200.Pack200Exception.<init>(String),org.apache.commons.compress.harmony.pack200.Pack200Exception.<init>(String).message,Has_Parameter
org.apache.commons.compress.harmony.pack200.CPLong.compareTo(CPLong),org.apache.commons.compress.harmony.pack200.CPLong.compareTo(CPLong).obj,Has_Parameter
org.apache.commons.compress.harmony.pack200.CPLong.<init>(long),org.apache.commons.compress.harmony.pack200.CPLong.<init>(long).theLong,Has_Parameter
"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.addAttributeDefinitions(Map,int[],int)","org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.addAttributeDefinitions(Map,int[],int).layoutMap",Has_Parameter
"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.addAttributeDefinitions(Map,int[],int)","org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.addAttributeDefinitions(Map,int[],int).availableIndices",Has_Parameter
"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.addAttributeDefinitions(Map,int[],int)","org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.addAttributeDefinitions(Map,int[],int).contextType",Has_Parameter
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.addHighIndices(int[]),org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.addHighIndices(int[]).availableIndices,Has_Parameter
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.pack(OutputStream),org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.pack(OutputStream).out,Has_Parameter
"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<init>(Segment,int,Attribute[])","org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<init>(Segment,int,Attribute[]).segment",Has_Parameter
"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<init>(Segment,int,Attribute[])","org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<init>(Segment,int,Attribute[]).effort",Has_Parameter
"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<init>(Segment,int,Attribute[])","org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<init>(Segment,int,Attribute[]).attributePrototypes",Has_Parameter
"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition.<init>(int,int,CPUTF8,CPUTF8)","org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition.<init>(int,int,CPUTF8,CPUTF8).index",Has_Parameter
"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition.<init>(int,int,CPUTF8,CPUTF8)","org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition.<init>(int,int,CPUTF8,CPUTF8).contextType",Has_Parameter
"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition.<init>(int,int,CPUTF8,CPUTF8)","org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition.<init>(int,int,CPUTF8,CPUTF8).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition.<init>(int,int,CPUTF8,CPUTF8)","org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition.<init>(int,int,CPUTF8,CPUTF8).layout",Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.addMajorVersion(int),org.apache.commons.compress.harmony.pack200.SegmentHeader.addMajorVersion(int).major,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.appendBandCodingSpecifier(int),org.apache.commons.compress.harmony.pack200.SegmentHeader.appendBandCodingSpecifier(int).specifier,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.pack(OutputStream),org.apache.commons.compress.harmony.pack200.SegmentHeader.pack(OutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setAttribute_definition_count(int),org.apache.commons.compress.harmony.pack200.SegmentHeader.setAttribute_definition_count(int).attribute_definition_count,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setClass_count(int),org.apache.commons.compress.harmony.pack200.SegmentHeader.setClass_count(int).class_count,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Class_count(int),org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Class_count(int).count,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Descr_count(int),org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Descr_count(int).count,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Double_count(int),org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Double_count(int).count,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Field_count(int),org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Field_count(int).count,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Float_count(int),org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Float_count(int).count,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Imethod_count(int),org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Imethod_count(int).count,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Int_count(int),org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Int_count(int).count,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Long_count(int),org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Long_count(int).count,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Method_count(int),org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Method_count(int).count,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Signature_count(int),org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Signature_count(int).count,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_String_count(int),org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_String_count(int).count,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Utf8_count(int),org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Utf8_count(int).count,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setDeflate_hint(boolean),org.apache.commons.compress.harmony.pack200.SegmentHeader.setDeflate_hint(boolean).deflate_hint,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setFile_count(int),org.apache.commons.compress.harmony.pack200.SegmentHeader.setFile_count(int).file_count,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_all_code_flags(boolean),org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_all_code_flags(boolean).have_all_code_flags,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_class_flags_hi(boolean),org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_class_flags_hi(boolean).have_class_flags_hi,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_code_flags_hi(boolean),org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_code_flags_hi(boolean).have_code_flags_hi,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_field_flags_hi(boolean),org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_field_flags_hi(boolean).have_field_flags_hi,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_method_flags_hi(boolean),org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_method_flags_hi(boolean).have_method_flags_hi,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.setIc_count(int),org.apache.commons.compress.harmony.pack200.SegmentHeader.setIc_count(int).ic_count,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.writeArchiveFileCounts(OutputStream),org.apache.commons.compress.harmony.pack200.SegmentHeader.writeArchiveFileCounts(OutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.writeArchiveSpecialCounts(OutputStream),org.apache.commons.compress.harmony.pack200.SegmentHeader.writeArchiveSpecialCounts(OutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.writeClassCounts(OutputStream),org.apache.commons.compress.harmony.pack200.SegmentHeader.writeClassCounts(OutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader.writeCpCounts(OutputStream),org.apache.commons.compress.harmony.pack200.SegmentHeader.writeCpCounts(OutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.pack200.SegmentHeader$Counter.add(int),org.apache.commons.compress.harmony.pack200.SegmentHeader$Counter.add(int).obj,Has_Parameter
org.apache.commons.compress.harmony.pack200.CPSignature.compareTo(Object),org.apache.commons.compress.harmony.pack200.CPSignature.compareTo(Object).arg0,Has_Parameter
"org.apache.commons.compress.harmony.pack200.CPSignature.<init>(String,CPUTF8,List)","org.apache.commons.compress.harmony.pack200.CPSignature.<init>(String,CPUTF8,List).signature",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CPSignature.<init>(String,CPUTF8,List)","org.apache.commons.compress.harmony.pack200.CPSignature.<init>(String,CPUTF8,List).signatureForm",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CPSignature.<init>(String,CPUTF8,List)","org.apache.commons.compress.harmony.pack200.CPSignature.<init>(String,CPUTF8,List).classes",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingOptions.addClassAttributeAction(String,String)","org.apache.commons.compress.harmony.pack200.PackingOptions.addClassAttributeAction(String,String).attributeName",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingOptions.addClassAttributeAction(String,String)","org.apache.commons.compress.harmony.pack200.PackingOptions.addClassAttributeAction(String,String).action",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingOptions.addCodeAttributeAction(String,String)","org.apache.commons.compress.harmony.pack200.PackingOptions.addCodeAttributeAction(String,String).attributeName",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingOptions.addCodeAttributeAction(String,String)","org.apache.commons.compress.harmony.pack200.PackingOptions.addCodeAttributeAction(String,String).action",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingOptions.addFieldAttributeAction(String,String)","org.apache.commons.compress.harmony.pack200.PackingOptions.addFieldAttributeAction(String,String).attributeName",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingOptions.addFieldAttributeAction(String,String)","org.apache.commons.compress.harmony.pack200.PackingOptions.addFieldAttributeAction(String,String).action",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingOptions.addMethodAttributeAction(String,String)","org.apache.commons.compress.harmony.pack200.PackingOptions.addMethodAttributeAction(String,String).attributeName",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingOptions.addMethodAttributeAction(String,String)","org.apache.commons.compress.harmony.pack200.PackingOptions.addMethodAttributeAction(String,String).action",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingOptions.addOrUpdateAttributeActions(List,Map,int)","org.apache.commons.compress.harmony.pack200.PackingOptions.addOrUpdateAttributeActions(List,Map,int).prototypes",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingOptions.addOrUpdateAttributeActions(List,Map,int)","org.apache.commons.compress.harmony.pack200.PackingOptions.addOrUpdateAttributeActions(List,Map,int).attributeActions",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingOptions.addOrUpdateAttributeActions(List,Map,int)","org.apache.commons.compress.harmony.pack200.PackingOptions.addOrUpdateAttributeActions(List,Map,int).tag",Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingOptions.addPassFile(String),org.apache.commons.compress.harmony.pack200.PackingOptions.addPassFile(String).passFileName,Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingOptions.getOrDefault(Map,String,String)","org.apache.commons.compress.harmony.pack200.PackingOptions.getOrDefault(Map,String,String).map",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingOptions.getOrDefault(Map,String,String)","org.apache.commons.compress.harmony.pack200.PackingOptions.getOrDefault(Map,String,String).type",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingOptions.getOrDefault(Map,String,String)","org.apache.commons.compress.harmony.pack200.PackingOptions.getOrDefault(Map,String,String).defaultValue",Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownClassAttributeAction(String),org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownClassAttributeAction(String).type,Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownCodeAttributeAction(String),org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownCodeAttributeAction(String).type,Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownFieldAttributeAction(String),org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownFieldAttributeAction(String).type,Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownMethodAttributeAction(String),org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownMethodAttributeAction(String).type,Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingOptions.isPassFile(String),org.apache.commons.compress.harmony.pack200.PackingOptions.isPassFile(String).passFileName,Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingOptions.removePassFile(String),org.apache.commons.compress.harmony.pack200.PackingOptions.removePassFile(String).passFileName,Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingOptions.setDeflateHint(String),org.apache.commons.compress.harmony.pack200.PackingOptions.setDeflateHint(String).deflateHint,Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingOptions.setEffort(int),org.apache.commons.compress.harmony.pack200.PackingOptions.setEffort(int).effort,Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingOptions.setGzip(boolean),org.apache.commons.compress.harmony.pack200.PackingOptions.setGzip(boolean).gzip,Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingOptions.setKeepFileOrder(boolean),org.apache.commons.compress.harmony.pack200.PackingOptions.setKeepFileOrder(boolean).keepFileOrder,Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingOptions.setLogFile(String),org.apache.commons.compress.harmony.pack200.PackingOptions.setLogFile(String).logFile,Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingOptions.setModificationTime(String),org.apache.commons.compress.harmony.pack200.PackingOptions.setModificationTime(String).modificationTime,Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingOptions.setQuiet(boolean),org.apache.commons.compress.harmony.pack200.PackingOptions.setQuiet(boolean).quiet,Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingOptions.setSegmentLimit(long),org.apache.commons.compress.harmony.pack200.PackingOptions.setSegmentLimit(long).segmentLimit,Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingOptions.setStripDebug(boolean),org.apache.commons.compress.harmony.pack200.PackingOptions.setStripDebug(boolean).stripDebug,Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingOptions.setUnknownAttributeAction(String),org.apache.commons.compress.harmony.pack200.PackingOptions.setUnknownAttributeAction(String).unknownAttributeAction,Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingOptions.setVerbose(boolean),org.apache.commons.compress.harmony.pack200.PackingOptions.setVerbose(boolean).verbose,Has_Parameter
org.apache.commons.compress.harmony.pack200.BHSDCodec.decode(InputStream),org.apache.commons.compress.harmony.pack200.BHSDCodec.decode(InputStream).in,Has_Parameter
"org.apache.commons.compress.harmony.pack200.BHSDCodec.decode(InputStream,long)","org.apache.commons.compress.harmony.pack200.BHSDCodec.decode(InputStream,long).in",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BHSDCodec.decode(InputStream,long)","org.apache.commons.compress.harmony.pack200.BHSDCodec.decode(InputStream,long).last",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BHSDCodec.decodeInts(int,InputStream)","org.apache.commons.compress.harmony.pack200.BHSDCodec.decodeInts(int,InputStream).n",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BHSDCodec.decodeInts(int,InputStream)","org.apache.commons.compress.harmony.pack200.BHSDCodec.decodeInts(int,InputStream).in",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BHSDCodec.decodeInts(int,InputStream,int)","org.apache.commons.compress.harmony.pack200.BHSDCodec.decodeInts(int,InputStream,int).n",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BHSDCodec.decodeInts(int,InputStream,int)","org.apache.commons.compress.harmony.pack200.BHSDCodec.decodeInts(int,InputStream,int).in",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BHSDCodec.decodeInts(int,InputStream,int)","org.apache.commons.compress.harmony.pack200.BHSDCodec.decodeInts(int,InputStream,int).firstValue",Has_Parameter
org.apache.commons.compress.harmony.pack200.BHSDCodec.encode(int),org.apache.commons.compress.harmony.pack200.BHSDCodec.encode(int).value,Has_Parameter
"org.apache.commons.compress.harmony.pack200.BHSDCodec.encode(int,int)","org.apache.commons.compress.harmony.pack200.BHSDCodec.encode(int,int).value",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BHSDCodec.encode(int,int)","org.apache.commons.compress.harmony.pack200.BHSDCodec.encode(int,int).last",Has_Parameter
org.apache.commons.compress.harmony.pack200.BHSDCodec.encodes(long),org.apache.commons.compress.harmony.pack200.BHSDCodec.encodes(long).value,Has_Parameter
org.apache.commons.compress.harmony.pack200.BHSDCodec.equals(Object),org.apache.commons.compress.harmony.pack200.BHSDCodec.equals(Object).o,Has_Parameter
"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int)","org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int).b",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int)","org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int).h",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int)","org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int).b",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int)","org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int).h",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int)","org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int).s",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int,int)","org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int,int).b",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int,int)","org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int,int).h",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int,int)","org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int,int).s",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int,int)","org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int,int).d",Has_Parameter
org.apache.commons.compress.harmony.pack200.CPUTF8.compareTo(Object),org.apache.commons.compress.harmony.pack200.CPUTF8.compareTo(Object).arg0,Has_Parameter
org.apache.commons.compress.harmony.pack200.CPUTF8.<init>(String),org.apache.commons.compress.harmony.pack200.CPUTF8.<init>(String).string,Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.addCharacters(List,char[])","org.apache.commons.compress.harmony.pack200.CpBands.addCharacters(List,char[]).chars",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.addCharacters(List,char[])","org.apache.commons.compress.harmony.pack200.CpBands.addCharacters(List,char[]).charArray",Has_Parameter
org.apache.commons.compress.harmony.pack200.CpBands.addCPClass(String),org.apache.commons.compress.harmony.pack200.CpBands.addCPClass(String).className,Has_Parameter
org.apache.commons.compress.harmony.pack200.CpBands.addCPUtf8(String),org.apache.commons.compress.harmony.pack200.CpBands.addCPUtf8(String).utf8,Has_Parameter
org.apache.commons.compress.harmony.pack200.CpBands.existsCpClass(String),org.apache.commons.compress.harmony.pack200.CpBands.existsCpClass(String).className,Has_Parameter
org.apache.commons.compress.harmony.pack200.CpBands.getConstant(Object),org.apache.commons.compress.harmony.pack200.CpBands.getConstant(Object).value,Has_Parameter
org.apache.commons.compress.harmony.pack200.CpBands.getCPClass(String),org.apache.commons.compress.harmony.pack200.CpBands.getCPClass(String).className,Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.getCPField(CPClass,String,String)","org.apache.commons.compress.harmony.pack200.CpBands.getCPField(CPClass,String,String).cpClass",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.getCPField(CPClass,String,String)","org.apache.commons.compress.harmony.pack200.CpBands.getCPField(CPClass,String,String).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.getCPField(CPClass,String,String)","org.apache.commons.compress.harmony.pack200.CpBands.getCPField(CPClass,String,String).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.getCPField(String,String,String)","org.apache.commons.compress.harmony.pack200.CpBands.getCPField(String,String,String).owner",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.getCPField(String,String,String)","org.apache.commons.compress.harmony.pack200.CpBands.getCPField(String,String,String).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.getCPField(String,String,String)","org.apache.commons.compress.harmony.pack200.CpBands.getCPField(String,String,String).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(CPClass,String,String)","org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(CPClass,String,String).cpClass",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(CPClass,String,String)","org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(CPClass,String,String).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(CPClass,String,String)","org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(CPClass,String,String).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(String,String,String)","org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(String,String,String).owner",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(String,String,String)","org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(String,String,String).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(String,String,String)","org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(String,String,String).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(CPClass,String,String)","org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(CPClass,String,String).cpClass",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(CPClass,String,String)","org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(CPClass,String,String).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(CPClass,String,String)","org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(CPClass,String,String).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(String,String,String)","org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(String,String,String).owner",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(String,String,String)","org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(String,String,String).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(String,String,String)","org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(String,String,String).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.getCPNameAndType(String,String)","org.apache.commons.compress.harmony.pack200.CpBands.getCPNameAndType(String,String).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.getCPNameAndType(String,String)","org.apache.commons.compress.harmony.pack200.CpBands.getCPNameAndType(String,String).signature",Has_Parameter
org.apache.commons.compress.harmony.pack200.CpBands.getCPSignature(String),org.apache.commons.compress.harmony.pack200.CpBands.getCPSignature(String).signature,Has_Parameter
org.apache.commons.compress.harmony.pack200.CpBands.getCPUtf8(String),org.apache.commons.compress.harmony.pack200.CpBands.getCPUtf8(String).utf8,Has_Parameter
org.apache.commons.compress.harmony.pack200.CpBands.pack(OutputStream),org.apache.commons.compress.harmony.pack200.CpBands.pack(OutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.pack200.CpBands.removeCpUtf8(String),org.apache.commons.compress.harmony.pack200.CpBands.removeCpUtf8(String).string,Has_Parameter
org.apache.commons.compress.harmony.pack200.CpBands.writeCpClass(OutputStream),org.apache.commons.compress.harmony.pack200.CpBands.writeCpClass(OutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.pack200.CpBands.writeCpDescr(OutputStream),org.apache.commons.compress.harmony.pack200.CpBands.writeCpDescr(OutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.pack200.CpBands.writeCpDouble(OutputStream),org.apache.commons.compress.harmony.pack200.CpBands.writeCpDouble(OutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.pack200.CpBands.writeCpFloat(OutputStream),org.apache.commons.compress.harmony.pack200.CpBands.writeCpFloat(OutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.pack200.CpBands.writeCpInt(OutputStream),org.apache.commons.compress.harmony.pack200.CpBands.writeCpInt(OutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.pack200.CpBands.writeCpLong(OutputStream),org.apache.commons.compress.harmony.pack200.CpBands.writeCpLong(OutputStream).out,Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.writeCpMethodOrField(Set,OutputStream,String)","org.apache.commons.compress.harmony.pack200.CpBands.writeCpMethodOrField(Set,OutputStream,String).cp",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.writeCpMethodOrField(Set,OutputStream,String)","org.apache.commons.compress.harmony.pack200.CpBands.writeCpMethodOrField(Set,OutputStream,String).out",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.writeCpMethodOrField(Set,OutputStream,String)","org.apache.commons.compress.harmony.pack200.CpBands.writeCpMethodOrField(Set,OutputStream,String).name",Has_Parameter
org.apache.commons.compress.harmony.pack200.CpBands.writeCpSignature(OutputStream),org.apache.commons.compress.harmony.pack200.CpBands.writeCpSignature(OutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.pack200.CpBands.writeCpString(OutputStream),org.apache.commons.compress.harmony.pack200.CpBands.writeCpString(OutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.pack200.CpBands.writeCpUtf8(OutputStream),org.apache.commons.compress.harmony.pack200.CpBands.writeCpUtf8(OutputStream).out,Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.<init>(Segment,int)","org.apache.commons.compress.harmony.pack200.CpBands.<init>(Segment,int).segment",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CpBands.<init>(Segment,int)","org.apache.commons.compress.harmony.pack200.CpBands.<init>(Segment,int).effort",Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands.addAttribute(NewAttribute),org.apache.commons.compress.harmony.pack200.NewAttributeBands.addAttribute(NewAttribute).attribute,Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands.getCodec(String),org.apache.commons.compress.harmony.pack200.NewAttributeBands.getCodec(String).layoutElement,Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands.getStreamUpToMatchingBracket(StringReader),org.apache.commons.compress.harmony.pack200.NewAttributeBands.getStreamUpToMatchingBracket(StringReader).reader,Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands.pack(OutputStream),org.apache.commons.compress.harmony.pack200.NewAttributeBands.pack(OutputStream).outputStream,Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands.readBody(StringReader),org.apache.commons.compress.harmony.pack200.NewAttributeBands.readBody(StringReader).reader,Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.readInteger(int,InputStream)","org.apache.commons.compress.harmony.pack200.NewAttributeBands.readInteger(int,InputStream).i",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.readInteger(int,InputStream)","org.apache.commons.compress.harmony.pack200.NewAttributeBands.readInteger(int,InputStream).inputStream",Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands.readNextAttributeElement(StringReader),org.apache.commons.compress.harmony.pack200.NewAttributeBands.readNextAttributeElement(StringReader).reader,Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands.readNextLayoutElement(StringReader),org.apache.commons.compress.harmony.pack200.NewAttributeBands.readNextLayoutElement(StringReader).reader,Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands.readNextUnionCase(StringReader),org.apache.commons.compress.harmony.pack200.NewAttributeBands.readNextUnionCase(StringReader).reader,Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands.readNumber(StringReader),org.apache.commons.compress.harmony.pack200.NewAttributeBands.readNumber(StringReader).stream,Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands.readUpToMatchingBracket(StringReader),org.apache.commons.compress.harmony.pack200.NewAttributeBands.readUpToMatchingBracket(StringReader).reader,Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.renumberBci(IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands.renumberBci(IntList,Map).bciRenumbering",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.renumberBci(IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands.renumberBci(IntList,Map).labelsToOffsets",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement)","org.apache.commons.compress.harmony.pack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement).i",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement)","org.apache.commons.compress.harmony.pack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement).currentCallable",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement)","org.apache.commons.compress.harmony.pack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement).layoutElement",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.<init>(int,CpBands,SegmentHeader,AttributeDefinition)","org.apache.commons.compress.harmony.pack200.NewAttributeBands.<init>(int,CpBands,SegmentHeader,AttributeDefinition).effort",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.<init>(int,CpBands,SegmentHeader,AttributeDefinition)","org.apache.commons.compress.harmony.pack200.NewAttributeBands.<init>(int,CpBands,SegmentHeader,AttributeDefinition).cpBands",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.<init>(int,CpBands,SegmentHeader,AttributeDefinition)","org.apache.commons.compress.harmony.pack200.NewAttributeBands.<init>(int,CpBands,SegmentHeader,AttributeDefinition).header",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands.<init>(int,CpBands,SegmentHeader,AttributeDefinition)","org.apache.commons.compress.harmony.pack200.NewAttributeBands.<init>(int,CpBands,SegmentHeader,AttributeDefinition).def",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement.addAttributeToBand(NewAttribute,InputStream)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement.addAttributeToBand(NewAttribute,InputStream).attribute",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement.addAttributeToBand(NewAttribute,InputStream)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement.addAttributeToBand(NewAttribute,InputStream).inputStream",Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement.pack(OutputStream),org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement.pack(OutputStream).ouputStream,Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement.renumberBci(IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement.renumberBci(IntList,Map).bciRenumbering",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement.renumberBci(IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement.renumberBci(IntList,Map).labelsToOffsets",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.addAttributeToBand(NewAttribute,InputStream)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.addAttributeToBand(NewAttribute,InputStream).attribute",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.addAttributeToBand(NewAttribute,InputStream)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.addAttributeToBand(NewAttribute,InputStream).inputStream",Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.pack(OutputStream),org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.pack(OutputStream).outputStream,Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.renumberBci(IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.renumberBci(IntList,Map).bciRenumbering",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.renumberBci(IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.renumberBci(IntList,Map).labelsToOffsets",Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.setCallable(Callable),org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.setCallable(Callable).callable,Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.addAttributeToBand(NewAttribute,InputStream)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.addAttributeToBand(NewAttribute,InputStream).attribute",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.addAttributeToBand(NewAttribute,InputStream)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.addAttributeToBand(NewAttribute,InputStream).inputStream",Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.pack(OutputStream),org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.pack(OutputStream).outputStream,Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.renumberBci(IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.renumberBci(IntList,Map).bciRenumbering",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.renumberBci(IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.renumberBci(IntList,Map).labelsToOffsets",Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.setBackwardsCallableIndex(int),org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.setBackwardsCallableIndex(int).backwardsCallableIndex,Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.addAttributeToBand(NewAttribute,InputStream)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.addAttributeToBand(NewAttribute,InputStream).attribute",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.addAttributeToBand(NewAttribute,InputStream)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.addAttributeToBand(NewAttribute,InputStream).inputStream",Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.pack(OutputStream),org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.pack(OutputStream).outputStream,Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.renumberBci(IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.renumberBci(IntList,Map).bciRenumbering",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.renumberBci(IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.renumberBci(IntList,Map).labelsToOffsets",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.renumberOffsetBci(List,IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.renumberOffsetBci(List,IntList,Map).relative",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.renumberOffsetBci(List,IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.renumberOffsetBci(List,IntList,Map).bciRenumbering",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.renumberOffsetBci(List,IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.renumberOffsetBci(List,IntList,Map).labelsToOffsets",Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands$LayoutElement.getLength(char),org.apache.commons.compress.harmony.pack200.NewAttributeBands$LayoutElement.getLength(char).uint_type,Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.addAttributeToBand(NewAttribute,InputStream)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.addAttributeToBand(NewAttribute,InputStream).attribute",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.addAttributeToBand(NewAttribute,InputStream)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.addAttributeToBand(NewAttribute,InputStream).inputStream",Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.pack(OutputStream),org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.pack(OutputStream).outputStream,Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.renumberBci(IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.renumberBci(IntList,Map).bciRenumbering",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.renumberBci(IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.renumberBci(IntList,Map).labelsToOffsets",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.addAttributeToBand(NewAttribute,InputStream)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.addAttributeToBand(NewAttribute,InputStream).attribute",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.addAttributeToBand(NewAttribute,InputStream)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.addAttributeToBand(NewAttribute,InputStream).inputStream",Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.pack(OutputStream),org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.pack(OutputStream).out,Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.renumberBci(IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.renumberBci(IntList,Map).bciRenumbering",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.renumberBci(IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.renumberBci(IntList,Map).labelsToOffsets",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.addAttributeToBand(NewAttribute,InputStream)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.addAttributeToBand(NewAttribute,InputStream).attribute",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.addAttributeToBand(NewAttribute,InputStream)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.addAttributeToBand(NewAttribute,InputStream).inputStream",Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.pack(OutputStream),org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.pack(OutputStream).outputStream,Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.renumberBci(IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.renumberBci(IntList,Map).bciRenumbering",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.renumberBci(IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.renumberBci(IntList,Map).labelsToOffsets",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.addAttributeToBand(NewAttribute,InputStream)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.addAttributeToBand(NewAttribute,InputStream).attribute",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.addAttributeToBand(NewAttribute,InputStream)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.addAttributeToBand(NewAttribute,InputStream).inputStream",Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.hasTag(long),org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.hasTag(long).l,Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.pack(OutputStream),org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.pack(OutputStream).outputStream,Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.renumberBci(IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.renumberBci(IntList,Map).bciRenumbering",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.renumberBci(IntList,Map)","org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.renumberBci(IntList,Map).labelsToOffsets",Has_Parameter
org.apache.commons.compress.harmony.pack200.CPNameAndType.compareTo(Object),org.apache.commons.compress.harmony.pack200.CPNameAndType.compareTo(Object).obj,Has_Parameter
"org.apache.commons.compress.harmony.pack200.CPNameAndType.<init>(CPUTF8,CPSignature)","org.apache.commons.compress.harmony.pack200.CPNameAndType.<init>(CPUTF8,CPSignature).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CPNameAndType.<init>(CPUTF8,CPSignature)","org.apache.commons.compress.harmony.pack200.CPNameAndType.<init>(CPUTF8,CPSignature).signature",Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingUtils.config(PackingOptions),org.apache.commons.compress.harmony.pack200.PackingUtils.config(PackingOptions).options,Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingUtils.copyThroughJar(JarFile,OutputStream)","org.apache.commons.compress.harmony.pack200.PackingUtils.copyThroughJar(JarFile,OutputStream).jarFile",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingUtils.copyThroughJar(JarFile,OutputStream)","org.apache.commons.compress.harmony.pack200.PackingUtils.copyThroughJar(JarFile,OutputStream).outputStream",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingUtils.copyThroughJar(JarInputStream,OutputStream)","org.apache.commons.compress.harmony.pack200.PackingUtils.copyThroughJar(JarInputStream,OutputStream).jarInputStream",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingUtils.copyThroughJar(JarInputStream,OutputStream)","org.apache.commons.compress.harmony.pack200.PackingUtils.copyThroughJar(JarInputStream,OutputStream).outputStream",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingUtils.getPackingFileListFromJar(JarFile,boolean)","org.apache.commons.compress.harmony.pack200.PackingUtils.getPackingFileListFromJar(JarFile,boolean).jarFile",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingUtils.getPackingFileListFromJar(JarFile,boolean)","org.apache.commons.compress.harmony.pack200.PackingUtils.getPackingFileListFromJar(JarFile,boolean).keepFileOrder",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingUtils.getPackingFileListFromJar(JarInputStream,boolean)","org.apache.commons.compress.harmony.pack200.PackingUtils.getPackingFileListFromJar(JarInputStream,boolean).jarInputStream",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingUtils.getPackingFileListFromJar(JarInputStream,boolean)","org.apache.commons.compress.harmony.pack200.PackingUtils.getPackingFileListFromJar(JarInputStream,boolean).keepFileOrder",Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingUtils.log(String),org.apache.commons.compress.harmony.pack200.PackingUtils.log(String).message,Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingUtils.readJarEntry(JarEntry,InputStream)","org.apache.commons.compress.harmony.pack200.PackingUtils.readJarEntry(JarEntry,InputStream).jarEntry",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingUtils.readJarEntry(JarEntry,InputStream)","org.apache.commons.compress.harmony.pack200.PackingUtils.readJarEntry(JarEntry,InputStream).inputStream",Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingUtils.reorderPackingFiles(List),org.apache.commons.compress.harmony.pack200.PackingUtils.reorderPackingFiles(List).packingFileList,Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger.log(LogRecord),org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger.log(LogRecord).logRecord,Has_Parameter
org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger.setVerbose(boolean),org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger.setVerbose(boolean).isVerbose,Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger.<init>(String,String)","org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger.<init>(String,String).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger.<init>(String,String)","org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger.<init>(String,String).resourceBundleName",Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttribute.addContext(int),org.apache.commons.compress.harmony.pack200.NewAttribute.addContext(int).context,Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttribute.getLabel(int),org.apache.commons.compress.harmony.pack200.NewAttribute.getLabel(int).index,Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttribute.isUnknown(int),org.apache.commons.compress.harmony.pack200.NewAttribute.isUnknown(int).context,Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute.read(ClassReader,int,int,char[],int,Label[]).cr",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute.read(ClassReader,int,int,char[],int,Label[]).off",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute.read(ClassReader,int,int,char[],int,Label[]).len",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute.read(ClassReader,int,int,char[],int,Label[]).buf",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute.read(ClassReader,int,int,char[],int,Label[]).codeOff",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute.read(ClassReader,int,int,char[],int,Label[]).labels",Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttribute.readClass(int),org.apache.commons.compress.harmony.pack200.NewAttribute.readClass(int).index,Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttribute.readConst(int),org.apache.commons.compress.harmony.pack200.NewAttribute.readConst(int).index,Has_Parameter
org.apache.commons.compress.harmony.pack200.NewAttribute.readUTF8(int),org.apache.commons.compress.harmony.pack200.NewAttribute.readUTF8(int).index,Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[]).classReader",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[]).type",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[]).layout",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[]).contents",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[]).buf",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[]).codeOff",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[]).labels",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(String,String,int)","org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(String,String,int).type",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(String,String,int)","org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(String,String,int).layout",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(String,String,int)","org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(String,String,int).context",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.read(ClassReader,int,int,char[],int,Label[]).cr",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.read(ClassReader,int,int,char[],int,Label[]).off",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.read(ClassReader,int,int,char[],int,Label[]).len",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.read(ClassReader,int,int,char[],int,Label[]).buf",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.read(ClassReader,int,int,char[],int,Label[]).codeOff",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.read(ClassReader,int,int,char[],int,Label[]).labels",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.<init>(String,int)","org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.<init>(String,int).type",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.<init>(String,int)","org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.<init>(String,int).context",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.read(ClassReader,int,int,char[],int,Label[]).cr",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.read(ClassReader,int,int,char[],int,Label[]).off",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.read(ClassReader,int,int,char[],int,Label[]).len",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.read(ClassReader,int,int,char[],int,Label[]).buf",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.read(ClassReader,int,int,char[],int,Label[]).codeOff",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.read(ClassReader,int,int,char[],int,Label[]).labels",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.<init>(String,int)","org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.<init>(String,int).type",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.<init>(String,int)","org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.<init>(String,int).context",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.read(ClassReader,int,int,char[],int,Label[]).cr",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.read(ClassReader,int,int,char[],int,Label[]).off",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.read(ClassReader,int,int,char[],int,Label[]).len",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.read(ClassReader,int,int,char[],int,Label[]).buf",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.read(ClassReader,int,int,char[],int,Label[]).codeOff",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.read(ClassReader,int,int,char[],int,Label[])","org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.read(ClassReader,int,int,char[],int,Label[]).labels",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.<init>(String,int)","org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.<init>(String,int).type",Has_Parameter
"org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.<init>(String,int)","org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.<init>(String,int).context",Has_Parameter
org.apache.commons.compress.harmony.pack200.Pack200Adapter.addPropertyChangeListener(PropertyChangeListener),org.apache.commons.compress.harmony.pack200.Pack200Adapter.addPropertyChangeListener(PropertyChangeListener).listener,Has_Parameter
org.apache.commons.compress.harmony.pack200.Pack200Adapter.completed(double),org.apache.commons.compress.harmony.pack200.Pack200Adapter.completed(double).value,Has_Parameter
"org.apache.commons.compress.harmony.pack200.Pack200Adapter.firePropertyChange(String,Object,Object)","org.apache.commons.compress.harmony.pack200.Pack200Adapter.firePropertyChange(String,Object,Object).propertyName",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Pack200Adapter.firePropertyChange(String,Object,Object)","org.apache.commons.compress.harmony.pack200.Pack200Adapter.firePropertyChange(String,Object,Object).oldValue",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Pack200Adapter.firePropertyChange(String,Object,Object)","org.apache.commons.compress.harmony.pack200.Pack200Adapter.firePropertyChange(String,Object,Object).newValue",Has_Parameter
org.apache.commons.compress.harmony.pack200.Pack200Adapter.removePropertyChangeListener(PropertyChangeListener),org.apache.commons.compress.harmony.pack200.Pack200Adapter.removePropertyChangeListener(PropertyChangeListener).listener,Has_Parameter
org.apache.commons.compress.harmony.pack200.CPString.compareTo(CPString),org.apache.commons.compress.harmony.pack200.CPString.compareTo(CPString).arg0,Has_Parameter
org.apache.commons.compress.harmony.pack200.CPString.<init>(CPUTF8),org.apache.commons.compress.harmony.pack200.CPString.<init>(CPUTF8).utf8,Has_Parameter
"org.apache.commons.compress.harmony.pack200.IcBands.addInnerClass(String,String,String,int)","org.apache.commons.compress.harmony.pack200.IcBands.addInnerClass(String,String,String,int).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.IcBands.addInnerClass(String,String,String,int)","org.apache.commons.compress.harmony.pack200.IcBands.addInnerClass(String,String,String,int).outerName",Has_Parameter
"org.apache.commons.compress.harmony.pack200.IcBands.addInnerClass(String,String,String,int)","org.apache.commons.compress.harmony.pack200.IcBands.addInnerClass(String,String,String,int).innerName",Has_Parameter
"org.apache.commons.compress.harmony.pack200.IcBands.addInnerClass(String,String,String,int)","org.apache.commons.compress.harmony.pack200.IcBands.addInnerClass(String,String,String,int).flags",Has_Parameter
"org.apache.commons.compress.harmony.pack200.IcBands.addToMap(String,IcTuple)","org.apache.commons.compress.harmony.pack200.IcBands.addToMap(String,IcTuple).outerName",Has_Parameter
"org.apache.commons.compress.harmony.pack200.IcBands.addToMap(String,IcTuple)","org.apache.commons.compress.harmony.pack200.IcBands.addToMap(String,IcTuple).icTuple",Has_Parameter
org.apache.commons.compress.harmony.pack200.IcBands.getIcTuple(CPClass),org.apache.commons.compress.harmony.pack200.IcBands.getIcTuple(CPClass).inner,Has_Parameter
org.apache.commons.compress.harmony.pack200.IcBands.getInnerClassesForOuter(String),org.apache.commons.compress.harmony.pack200.IcBands.getInnerClassesForOuter(String).outerClassName,Has_Parameter
org.apache.commons.compress.harmony.pack200.IcBands.getOuter(String),org.apache.commons.compress.harmony.pack200.IcBands.getOuter(String).name,Has_Parameter
"org.apache.commons.compress.harmony.pack200.IcBands.namesArePredictable(String,String,String)","org.apache.commons.compress.harmony.pack200.IcBands.namesArePredictable(String,String,String).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.IcBands.namesArePredictable(String,String,String)","org.apache.commons.compress.harmony.pack200.IcBands.namesArePredictable(String,String,String).outerName",Has_Parameter
"org.apache.commons.compress.harmony.pack200.IcBands.namesArePredictable(String,String,String)","org.apache.commons.compress.harmony.pack200.IcBands.namesArePredictable(String,String,String).innerName",Has_Parameter
org.apache.commons.compress.harmony.pack200.IcBands.pack(OutputStream),org.apache.commons.compress.harmony.pack200.IcBands.pack(OutputStream).outputStream,Has_Parameter
"org.apache.commons.compress.harmony.pack200.IcBands.<init>(SegmentHeader,CpBands,int)","org.apache.commons.compress.harmony.pack200.IcBands.<init>(SegmentHeader,CpBands,int).segmentHeader",Has_Parameter
"org.apache.commons.compress.harmony.pack200.IcBands.<init>(SegmentHeader,CpBands,int)","org.apache.commons.compress.harmony.pack200.IcBands.<init>(SegmentHeader,CpBands,int).cpBands",Has_Parameter
"org.apache.commons.compress.harmony.pack200.IcBands.<init>(SegmentHeader,CpBands,int)","org.apache.commons.compress.harmony.pack200.IcBands.<init>(SegmentHeader,CpBands,int).effort",Has_Parameter
org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.equals(Object),org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.equals(Object).o,Has_Parameter
"org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.<init>(CPClass,int,CPClass,CPUTF8)","org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.<init>(CPClass,int,CPClass,CPUTF8).C",Has_Parameter
"org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.<init>(CPClass,int,CPClass,CPUTF8)","org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.<init>(CPClass,int,CPClass,CPUTF8).F",Has_Parameter
"org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.<init>(CPClass,int,CPClass,CPUTF8)","org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.<init>(CPClass,int,CPClass,CPUTF8).C2",Has_Parameter
"org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.<init>(CPClass,int,CPClass,CPUTF8)","org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.<init>(CPClass,int,CPClass,CPUTF8).N",Has_Parameter
org.apache.commons.compress.harmony.pack200.IntList.add(int),org.apache.commons.compress.harmony.pack200.IntList.add(int).object,Has_Parameter
"org.apache.commons.compress.harmony.pack200.IntList.add(int,int)","org.apache.commons.compress.harmony.pack200.IntList.add(int,int).location",Has_Parameter
"org.apache.commons.compress.harmony.pack200.IntList.add(int,int)","org.apache.commons.compress.harmony.pack200.IntList.add(int,int).object",Has_Parameter
org.apache.commons.compress.harmony.pack200.IntList.addAll(IntList),org.apache.commons.compress.harmony.pack200.IntList.addAll(IntList).list,Has_Parameter
org.apache.commons.compress.harmony.pack200.IntList.get(int),org.apache.commons.compress.harmony.pack200.IntList.get(int).location,Has_Parameter
org.apache.commons.compress.harmony.pack200.IntList.growAtEnd(int),org.apache.commons.compress.harmony.pack200.IntList.growAtEnd(int).required,Has_Parameter
org.apache.commons.compress.harmony.pack200.IntList.growAtFront(int),org.apache.commons.compress.harmony.pack200.IntList.growAtFront(int).required,Has_Parameter
"org.apache.commons.compress.harmony.pack200.IntList.growForInsert(int,int)","org.apache.commons.compress.harmony.pack200.IntList.growForInsert(int,int).location",Has_Parameter
"org.apache.commons.compress.harmony.pack200.IntList.growForInsert(int,int)","org.apache.commons.compress.harmony.pack200.IntList.growForInsert(int,int).required",Has_Parameter
org.apache.commons.compress.harmony.pack200.IntList.increment(int),org.apache.commons.compress.harmony.pack200.IntList.increment(int).location,Has_Parameter
org.apache.commons.compress.harmony.pack200.IntList.remove(int),org.apache.commons.compress.harmony.pack200.IntList.remove(int).location,Has_Parameter
org.apache.commons.compress.harmony.pack200.IntList.<init>(int),org.apache.commons.compress.harmony.pack200.IntList.<init>(int).capacity,Has_Parameter
org.apache.commons.compress.harmony.pack200.ClassBands.countArgs(String),org.apache.commons.compress.harmony.pack200.ClassBands.countArgs(String).descriptor,Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List).context",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List).visible",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List).nameRU",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List).tags",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List).values",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List).caseArrayN",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List).nestTypeRS",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List).nestNameRU",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List).nestPairN",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List).nameRU",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List).tags",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List).values",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List).caseArrayN",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List).nestTypeRS",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List).nestNameRU",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List).nestPairN",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addClass(int,int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.ClassBands.addClass(int,int,String,String,String,String[]).major",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addClass(int,int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.ClassBands.addClass(int,int,String,String,String,String[]).flags",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addClass(int,int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.ClassBands.addClass(int,int,String,String,String,String[]).className",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addClass(int,int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.ClassBands.addClass(int,int,String,String,String,String[]).signature",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addClass(int,int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.ClassBands.addClass(int,int,String,String,String,String[]).superName",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addClass(int,int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.ClassBands.addClass(int,int,String,String,String,String[]).interfaces",Has_Parameter
org.apache.commons.compress.harmony.pack200.ClassBands.addClassAttribute(NewAttribute),org.apache.commons.compress.harmony.pack200.ClassBands.addClassAttribute(NewAttribute).attribute,Has_Parameter
org.apache.commons.compress.harmony.pack200.ClassBands.addCodeAttribute(NewAttribute),org.apache.commons.compress.harmony.pack200.ClassBands.addCodeAttribute(NewAttribute).attribute,Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addEnclosingMethod(String,String,String)","org.apache.commons.compress.harmony.pack200.ClassBands.addEnclosingMethod(String,String,String).owner",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addEnclosingMethod(String,String,String)","org.apache.commons.compress.harmony.pack200.ClassBands.addEnclosingMethod(String,String,String).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addEnclosingMethod(String,String,String)","org.apache.commons.compress.harmony.pack200.ClassBands.addEnclosingMethod(String,String,String).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addField(int,String,String,String,Object)","org.apache.commons.compress.harmony.pack200.ClassBands.addField(int,String,String,String,Object).flags",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addField(int,String,String,String,Object)","org.apache.commons.compress.harmony.pack200.ClassBands.addField(int,String,String,String,Object).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addField(int,String,String,String,Object)","org.apache.commons.compress.harmony.pack200.ClassBands.addField(int,String,String,String,Object).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addField(int,String,String,String,Object)","org.apache.commons.compress.harmony.pack200.ClassBands.addField(int,String,String,String,Object).signature",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addField(int,String,String,String,Object)","org.apache.commons.compress.harmony.pack200.ClassBands.addField(int,String,String,String,Object).value",Has_Parameter
org.apache.commons.compress.harmony.pack200.ClassBands.addFieldAttribute(NewAttribute),org.apache.commons.compress.harmony.pack200.ClassBands.addFieldAttribute(NewAttribute).attribute,Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addHandler(Label,Label,Label,String)","org.apache.commons.compress.harmony.pack200.ClassBands.addHandler(Label,Label,Label,String).start",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addHandler(Label,Label,Label,String)","org.apache.commons.compress.harmony.pack200.ClassBands.addHandler(Label,Label,Label,String).end",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addHandler(Label,Label,Label,String)","org.apache.commons.compress.harmony.pack200.ClassBands.addHandler(Label,Label,Label,String).handler",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addHandler(Label,Label,Label,String)","org.apache.commons.compress.harmony.pack200.ClassBands.addHandler(Label,Label,Label,String).type",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addLineNumber(int,Label)","org.apache.commons.compress.harmony.pack200.ClassBands.addLineNumber(int,Label).line",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addLineNumber(int,Label)","org.apache.commons.compress.harmony.pack200.ClassBands.addLineNumber(int,Label).start",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addLocalVariable(String,String,String,Label,Label,int)","org.apache.commons.compress.harmony.pack200.ClassBands.addLocalVariable(String,String,String,Label,Label,int).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addLocalVariable(String,String,String,Label,Label,int)","org.apache.commons.compress.harmony.pack200.ClassBands.addLocalVariable(String,String,String,Label,Label,int).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addLocalVariable(String,String,String,Label,Label,int)","org.apache.commons.compress.harmony.pack200.ClassBands.addLocalVariable(String,String,String,Label,Label,int).signature",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addLocalVariable(String,String,String,Label,Label,int)","org.apache.commons.compress.harmony.pack200.ClassBands.addLocalVariable(String,String,String,Label,Label,int).start",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addLocalVariable(String,String,String,Label,Label,int)","org.apache.commons.compress.harmony.pack200.ClassBands.addLocalVariable(String,String,String,Label,Label,int).end",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addLocalVariable(String,String,String,Label,Label,int)","org.apache.commons.compress.harmony.pack200.ClassBands.addLocalVariable(String,String,String,Label,Label,int).indx",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addMaxStack(int,int)","org.apache.commons.compress.harmony.pack200.ClassBands.addMaxStack(int,int).maxStack",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addMaxStack(int,int)","org.apache.commons.compress.harmony.pack200.ClassBands.addMaxStack(int,int).maxLocals",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addMethod(int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.ClassBands.addMethod(int,String,String,String,String[]).flags",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addMethod(int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.ClassBands.addMethod(int,String,String,String,String[]).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addMethod(int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.ClassBands.addMethod(int,String,String,String,String[]).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addMethod(int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.ClassBands.addMethod(int,String,String,String,String[]).signature",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addMethod(int,String,String,String,String[])","org.apache.commons.compress.harmony.pack200.ClassBands.addMethod(int,String,String,String,String[]).exceptions",Has_Parameter
org.apache.commons.compress.harmony.pack200.ClassBands.addMethodAttribute(NewAttribute),org.apache.commons.compress.harmony.pack200.ClassBands.addMethodAttribute(NewAttribute).attribute,Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List).parameter",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List).visible",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List).nameRU",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List).tags",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List).values",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List).caseArrayN",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List).nestTypeRS",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List).nestNameRU",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List).nestPairN",Has_Parameter
org.apache.commons.compress.harmony.pack200.ClassBands.addSourceFile(String),org.apache.commons.compress.harmony.pack200.ClassBands.addSourceFile(String).source,Has_Parameter
org.apache.commons.compress.harmony.pack200.ClassBands.currentClassReferencesInnerClass(CPClass),org.apache.commons.compress.harmony.pack200.ClassBands.currentClassReferencesInnerClass(CPClass).inner,Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.doBciRenumbering(IntList,Map)","org.apache.commons.compress.harmony.pack200.ClassBands.doBciRenumbering(IntList,Map).bciRenumbering",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.doBciRenumbering(IntList,Map)","org.apache.commons.compress.harmony.pack200.ClassBands.doBciRenumbering(IntList,Map).labelsToOffsets",Has_Parameter
org.apache.commons.compress.harmony.pack200.ClassBands.getInts(CPClass[]),org.apache.commons.compress.harmony.pack200.ClassBands.getInts(CPClass[]).cpClasses,Has_Parameter
org.apache.commons.compress.harmony.pack200.ClassBands.isInnerClass(String),org.apache.commons.compress.harmony.pack200.ClassBands.isInnerClass(String).possibleInner,Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.isInnerClassOf(String,CPClass)","org.apache.commons.compress.harmony.pack200.ClassBands.isInnerClassOf(String,CPClass).possibleInner",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.isInnerClassOf(String,CPClass)","org.apache.commons.compress.harmony.pack200.ClassBands.isInnerClassOf(String,CPClass).possibleOuter",Has_Parameter
org.apache.commons.compress.harmony.pack200.ClassBands.pack(OutputStream),org.apache.commons.compress.harmony.pack200.ClassBands.pack(OutputStream).out,Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberBci(List,IntList,Map)","org.apache.commons.compress.harmony.pack200.ClassBands.renumberBci(List,IntList,Map).list",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberBci(List,IntList,Map)","org.apache.commons.compress.harmony.pack200.ClassBands.renumberBci(List,IntList,Map).bciRenumbering",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberBci(List,IntList,Map)","org.apache.commons.compress.harmony.pack200.ClassBands.renumberBci(List,IntList,Map).labelsToOffsets",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberDoubleOffsetBci(List,List,List,IntList,Map)","org.apache.commons.compress.harmony.pack200.ClassBands.renumberDoubleOffsetBci(List,List,List,IntList,Map).relative",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberDoubleOffsetBci(List,List,List,IntList,Map)","org.apache.commons.compress.harmony.pack200.ClassBands.renumberDoubleOffsetBci(List,List,List,IntList,Map).firstOffset",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberDoubleOffsetBci(List,List,List,IntList,Map)","org.apache.commons.compress.harmony.pack200.ClassBands.renumberDoubleOffsetBci(List,List,List,IntList,Map).list",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberDoubleOffsetBci(List,List,List,IntList,Map)","org.apache.commons.compress.harmony.pack200.ClassBands.renumberDoubleOffsetBci(List,List,List,IntList,Map).bciRenumbering",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberDoubleOffsetBci(List,List,List,IntList,Map)","org.apache.commons.compress.harmony.pack200.ClassBands.renumberDoubleOffsetBci(List,List,List,IntList,Map).labelsToOffsets",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberOffsetBci(List,List,IntList,Map)","org.apache.commons.compress.harmony.pack200.ClassBands.renumberOffsetBci(List,List,IntList,Map).relative",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberOffsetBci(List,List,IntList,Map)","org.apache.commons.compress.harmony.pack200.ClassBands.renumberOffsetBci(List,List,IntList,Map).list",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberOffsetBci(List,List,IntList,Map)","org.apache.commons.compress.harmony.pack200.ClassBands.renumberOffsetBci(List,List,IntList,Map).bciRenumbering",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.renumberOffsetBci(List,List,IntList,Map)","org.apache.commons.compress.harmony.pack200.ClassBands.renumberOffsetBci(List,List,IntList,Map).labelsToOffsets",Has_Parameter
org.apache.commons.compress.harmony.pack200.ClassBands.sum(int[]),org.apache.commons.compress.harmony.pack200.ClassBands.sum(int[]).ints,Has_Parameter
org.apache.commons.compress.harmony.pack200.ClassBands.writeClassAttributeBands(OutputStream),org.apache.commons.compress.harmony.pack200.ClassBands.writeClassAttributeBands(OutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.pack200.ClassBands.writeCodeAttributeBands(OutputStream),org.apache.commons.compress.harmony.pack200.ClassBands.writeCodeAttributeBands(OutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.pack200.ClassBands.writeCodeBands(OutputStream),org.apache.commons.compress.harmony.pack200.ClassBands.writeCodeBands(OutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.pack200.ClassBands.writeFieldAttributeBands(OutputStream),org.apache.commons.compress.harmony.pack200.ClassBands.writeFieldAttributeBands(OutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.pack200.ClassBands.writeMethodAttributeBands(OutputStream),org.apache.commons.compress.harmony.pack200.ClassBands.writeMethodAttributeBands(OutputStream).out,Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.<init>(Segment,int,int,boolean)","org.apache.commons.compress.harmony.pack200.ClassBands.<init>(Segment,int,int,boolean).segment",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.<init>(Segment,int,int,boolean)","org.apache.commons.compress.harmony.pack200.ClassBands.<init>(Segment,int,int,boolean).numClasses",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.<init>(Segment,int,int,boolean)","org.apache.commons.compress.harmony.pack200.ClassBands.<init>(Segment,int,int,boolean).effort",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands.<init>(Segment,int,int,boolean)","org.apache.commons.compress.harmony.pack200.ClassBands.<init>(Segment,int,int,boolean).stripDebug",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List).parameter",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List).desc",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List).nameRU",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List).tags",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List).values",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List).caseArrayN",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List).nestTypeRS",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List).nestNameRU",Has_Parameter
"org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List)","org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List).nestPairN",Has_Parameter
org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.<init>(int),org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.<init>(int).numParams,Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.analyseBand(String,int[],BHSDCodec)","org.apache.commons.compress.harmony.pack200.BandSet.analyseBand(String,int[],BHSDCodec).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.analyseBand(String,int[],BHSDCodec)","org.apache.commons.compress.harmony.pack200.BandSet.analyseBand(String,int[],BHSDCodec).band",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.analyseBand(String,int[],BHSDCodec)","org.apache.commons.compress.harmony.pack200.BandSet.analyseBand(String,int[],BHSDCodec).defaultCodec",Has_Parameter
org.apache.commons.compress.harmony.pack200.BandSet.cpEntryListToArray(List),org.apache.commons.compress.harmony.pack200.BandSet.cpEntryListToArray(List).list,Has_Parameter
org.apache.commons.compress.harmony.pack200.BandSet.cpEntryOrNullListToArray(List),org.apache.commons.compress.harmony.pack200.BandSet.cpEntryOrNullListToArray(List).list,Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeBandInt(String,int[],BHSDCodec)","org.apache.commons.compress.harmony.pack200.BandSet.encodeBandInt(String,int[],BHSDCodec).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeBandInt(String,int[],BHSDCodec)","org.apache.commons.compress.harmony.pack200.BandSet.encodeBandInt(String,int[],BHSDCodec).ints",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeBandInt(String,int[],BHSDCodec)","org.apache.commons.compress.harmony.pack200.BandSet.encodeBandInt(String,int[],BHSDCodec).defaultCodec",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean)","org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean)","org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean).flags",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean)","org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean).loCodec",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean)","org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean).hiCodec",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean)","org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean).haveHiFlags",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[][],BHSDCodec,BHSDCodec,boolean)","org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[][],BHSDCodec,BHSDCodec,boolean).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[][],BHSDCodec,BHSDCodec,boolean)","org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[][],BHSDCodec,BHSDCodec,boolean).flags",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[][],BHSDCodec,BHSDCodec,boolean)","org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[][],BHSDCodec,BHSDCodec,boolean).loCodec",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[][],BHSDCodec,BHSDCodec,boolean)","org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[][],BHSDCodec,BHSDCodec,boolean).hiCodec",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[][],BHSDCodec,BHSDCodec,boolean)","org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[][],BHSDCodec,BHSDCodec,boolean).haveHiFlags",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeScalar(int,BHSDCodec)","org.apache.commons.compress.harmony.pack200.BandSet.encodeScalar(int,BHSDCodec).value",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeScalar(int,BHSDCodec)","org.apache.commons.compress.harmony.pack200.BandSet.encodeScalar(int,BHSDCodec).codec",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeScalar(int[],BHSDCodec)","org.apache.commons.compress.harmony.pack200.BandSet.encodeScalar(int[],BHSDCodec).band",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeScalar(int[],BHSDCodec)","org.apache.commons.compress.harmony.pack200.BandSet.encodeScalar(int[],BHSDCodec).codec",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeWithPopulationCodec(int[],BHSDCodec,BandData,BandAnalysisResults)","org.apache.commons.compress.harmony.pack200.BandSet.encodeWithPopulationCodec(int[],BHSDCodec,BandData,BandAnalysisResults).band",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeWithPopulationCodec(int[],BHSDCodec,BandData,BandAnalysisResults)","org.apache.commons.compress.harmony.pack200.BandSet.encodeWithPopulationCodec(int[],BHSDCodec,BandData,BandAnalysisResults).defaultCodec",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeWithPopulationCodec(int[],BHSDCodec,BandData,BandAnalysisResults)","org.apache.commons.compress.harmony.pack200.BandSet.encodeWithPopulationCodec(int[],BHSDCodec,BandData,BandAnalysisResults).bandData",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.encodeWithPopulationCodec(int[],BHSDCodec,BandData,BandAnalysisResults)","org.apache.commons.compress.harmony.pack200.BandSet.encodeWithPopulationCodec(int[],BHSDCodec,BandData,BandAnalysisResults).results",Has_Parameter
org.apache.commons.compress.harmony.pack200.BandSet.flatten(long[][]),org.apache.commons.compress.harmony.pack200.BandSet.flatten(long[][]).flags,Has_Parameter
org.apache.commons.compress.harmony.pack200.BandSet.integerListToArray(List),org.apache.commons.compress.harmony.pack200.BandSet.integerListToArray(List).integerList,Has_Parameter
org.apache.commons.compress.harmony.pack200.BandSet.longListToArray(List),org.apache.commons.compress.harmony.pack200.BandSet.longListToArray(List).longList,Has_Parameter
org.apache.commons.compress.harmony.pack200.BandSet.pack(OutputStream),org.apache.commons.compress.harmony.pack200.BandSet.pack(OutputStream).out,Has_Parameter
org.apache.commons.compress.harmony.pack200.BandSet.timeToStop(BandAnalysisResults),org.apache.commons.compress.harmony.pack200.BandSet.timeToStop(BandAnalysisResults).results,Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.tryCodecs(int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[])","org.apache.commons.compress.harmony.pack200.BandSet.tryCodecs(int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[]).band",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.tryCodecs(int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[])","org.apache.commons.compress.harmony.pack200.BandSet.tryCodecs(int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[]).defaultCodec",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.tryCodecs(int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[])","org.apache.commons.compress.harmony.pack200.BandSet.tryCodecs(int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[]).bandData",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.tryCodecs(int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[])","org.apache.commons.compress.harmony.pack200.BandSet.tryCodecs(int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[]).results",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.tryCodecs(int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[])","org.apache.commons.compress.harmony.pack200.BandSet.tryCodecs(int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[]).encoded",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.tryCodecs(int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[])","org.apache.commons.compress.harmony.pack200.BandSet.tryCodecs(int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[]).potentialCodecs",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.<init>(int,SegmentHeader)","org.apache.commons.compress.harmony.pack200.BandSet.<init>(int,SegmentHeader).effort",Has_Parameter
"org.apache.commons.compress.harmony.pack200.BandSet.<init>(int,SegmentHeader)","org.apache.commons.compress.harmony.pack200.BandSet.<init>(int,SegmentHeader).header",Has_Parameter
org.apache.commons.compress.harmony.pack200.FileBands.flatten(byte[][]),org.apache.commons.compress.harmony.pack200.FileBands.flatten(byte[][]).bytes,Has_Parameter
org.apache.commons.compress.harmony.pack200.FileBands.pack(OutputStream),org.apache.commons.compress.harmony.pack200.FileBands.pack(OutputStream).out,Has_Parameter
"org.apache.commons.compress.harmony.pack200.FileBands.<init>(CpBands,SegmentHeader,PackingOptions,SegmentUnit,int)","org.apache.commons.compress.harmony.pack200.FileBands.<init>(CpBands,SegmentHeader,PackingOptions,SegmentUnit,int).cpBands",Has_Parameter
"org.apache.commons.compress.harmony.pack200.FileBands.<init>(CpBands,SegmentHeader,PackingOptions,SegmentUnit,int)","org.apache.commons.compress.harmony.pack200.FileBands.<init>(CpBands,SegmentHeader,PackingOptions,SegmentUnit,int).segmentHeader",Has_Parameter
"org.apache.commons.compress.harmony.pack200.FileBands.<init>(CpBands,SegmentHeader,PackingOptions,SegmentUnit,int)","org.apache.commons.compress.harmony.pack200.FileBands.<init>(CpBands,SegmentHeader,PackingOptions,SegmentUnit,int).options",Has_Parameter
"org.apache.commons.compress.harmony.pack200.FileBands.<init>(CpBands,SegmentHeader,PackingOptions,SegmentUnit,int)","org.apache.commons.compress.harmony.pack200.FileBands.<init>(CpBands,SegmentHeader,PackingOptions,SegmentUnit,int).segmentUnit",Has_Parameter
"org.apache.commons.compress.harmony.pack200.FileBands.<init>(CpBands,SegmentHeader,PackingOptions,SegmentUnit,int)","org.apache.commons.compress.harmony.pack200.FileBands.<init>(CpBands,SegmentHeader,PackingOptions,SegmentUnit,int).effort",Has_Parameter
org.apache.commons.compress.harmony.pack200.RunCodec.decode(InputStream),org.apache.commons.compress.harmony.pack200.RunCodec.decode(InputStream).in,Has_Parameter
"org.apache.commons.compress.harmony.pack200.RunCodec.decode(InputStream,long)","org.apache.commons.compress.harmony.pack200.RunCodec.decode(InputStream,long).in",Has_Parameter
"org.apache.commons.compress.harmony.pack200.RunCodec.decode(InputStream,long)","org.apache.commons.compress.harmony.pack200.RunCodec.decode(InputStream,long).last",Has_Parameter
"org.apache.commons.compress.harmony.pack200.RunCodec.decodeInts(int,InputStream)","org.apache.commons.compress.harmony.pack200.RunCodec.decodeInts(int,InputStream).n",Has_Parameter
"org.apache.commons.compress.harmony.pack200.RunCodec.decodeInts(int,InputStream)","org.apache.commons.compress.harmony.pack200.RunCodec.decodeInts(int,InputStream).in",Has_Parameter
org.apache.commons.compress.harmony.pack200.RunCodec.encode(int),org.apache.commons.compress.harmony.pack200.RunCodec.encode(int).value,Has_Parameter
"org.apache.commons.compress.harmony.pack200.RunCodec.encode(int,int)","org.apache.commons.compress.harmony.pack200.RunCodec.encode(int,int).value",Has_Parameter
"org.apache.commons.compress.harmony.pack200.RunCodec.encode(int,int)","org.apache.commons.compress.harmony.pack200.RunCodec.encode(int,int).last",Has_Parameter
"org.apache.commons.compress.harmony.pack200.RunCodec.normalise(int,Codec)","org.apache.commons.compress.harmony.pack200.RunCodec.normalise(int,Codec).value",Has_Parameter
"org.apache.commons.compress.harmony.pack200.RunCodec.normalise(int,Codec)","org.apache.commons.compress.harmony.pack200.RunCodec.normalise(int,Codec).codecUsed",Has_Parameter
"org.apache.commons.compress.harmony.pack200.RunCodec.normalise(int[],Codec)","org.apache.commons.compress.harmony.pack200.RunCodec.normalise(int[],Codec).band",Has_Parameter
"org.apache.commons.compress.harmony.pack200.RunCodec.normalise(int[],Codec)","org.apache.commons.compress.harmony.pack200.RunCodec.normalise(int[],Codec).codecUsed",Has_Parameter
"org.apache.commons.compress.harmony.pack200.RunCodec.<init>(int,Codec,Codec)","org.apache.commons.compress.harmony.pack200.RunCodec.<init>(int,Codec,Codec).k",Has_Parameter
"org.apache.commons.compress.harmony.pack200.RunCodec.<init>(int,Codec,Codec)","org.apache.commons.compress.harmony.pack200.RunCodec.<init>(int,Codec,Codec).aCodec",Has_Parameter
"org.apache.commons.compress.harmony.pack200.RunCodec.<init>(int,Codec,Codec)","org.apache.commons.compress.harmony.pack200.RunCodec.<init>(int,Codec,Codec).bCodec",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Codec.check(int,InputStream)","org.apache.commons.compress.harmony.pack200.Codec.check(int,InputStream).n",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Codec.check(int,InputStream)","org.apache.commons.compress.harmony.pack200.Codec.check(int,InputStream).in",Has_Parameter
org.apache.commons.compress.harmony.pack200.Codec.decode(InputStream),org.apache.commons.compress.harmony.pack200.Codec.decode(InputStream).in,Has_Parameter
"org.apache.commons.compress.harmony.pack200.Codec.decode(InputStream,long)","org.apache.commons.compress.harmony.pack200.Codec.decode(InputStream,long).in",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Codec.decode(InputStream,long)","org.apache.commons.compress.harmony.pack200.Codec.decode(InputStream,long).last",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Codec.decodeInts(int,InputStream)","org.apache.commons.compress.harmony.pack200.Codec.decodeInts(int,InputStream).n",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Codec.decodeInts(int,InputStream)","org.apache.commons.compress.harmony.pack200.Codec.decodeInts(int,InputStream).in",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Codec.decodeInts(int,InputStream,int)","org.apache.commons.compress.harmony.pack200.Codec.decodeInts(int,InputStream,int).n",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Codec.decodeInts(int,InputStream,int)","org.apache.commons.compress.harmony.pack200.Codec.decodeInts(int,InputStream,int).in",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Codec.decodeInts(int,InputStream,int)","org.apache.commons.compress.harmony.pack200.Codec.decodeInts(int,InputStream,int).firstValue",Has_Parameter
org.apache.commons.compress.harmony.pack200.Codec.encode(int),org.apache.commons.compress.harmony.pack200.Codec.encode(int).value,Has_Parameter
"org.apache.commons.compress.harmony.pack200.Codec.encode(int,int)","org.apache.commons.compress.harmony.pack200.Codec.encode(int,int).value",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Codec.encode(int,int)","org.apache.commons.compress.harmony.pack200.Codec.encode(int,int).last",Has_Parameter
org.apache.commons.compress.harmony.pack200.Codec.encode(int[]),org.apache.commons.compress.harmony.pack200.Codec.encode(int[]).ints,Has_Parameter
org.apache.commons.compress.harmony.pack200.PopulationCodec.decode(InputStream),org.apache.commons.compress.harmony.pack200.PopulationCodec.decode(InputStream).in,Has_Parameter
"org.apache.commons.compress.harmony.pack200.PopulationCodec.decode(InputStream,long)","org.apache.commons.compress.harmony.pack200.PopulationCodec.decode(InputStream,long).in",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PopulationCodec.decode(InputStream,long)","org.apache.commons.compress.harmony.pack200.PopulationCodec.decode(InputStream,long).last",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PopulationCodec.decodeInts(int,InputStream)","org.apache.commons.compress.harmony.pack200.PopulationCodec.decodeInts(int,InputStream).n",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PopulationCodec.decodeInts(int,InputStream)","org.apache.commons.compress.harmony.pack200.PopulationCodec.decodeInts(int,InputStream).in",Has_Parameter
org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int),org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int).value,Has_Parameter
"org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int,int)","org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int,int).value",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int,int)","org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int,int).last",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int[],int[],int[])","org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int[],int[],int[]).favoured",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int[],int[],int[])","org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int[],int[],int[]).tokens",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int[],int[],int[])","org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int[],int[],int[]).unfavoured",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,Codec,Codec)","org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,Codec,Codec).favouredCodec",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,Codec,Codec)","org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,Codec,Codec).tokenCodec",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,Codec,Codec)","org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,Codec,Codec).unvafouredCodec",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,int,Codec)","org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,int,Codec).favouredCodec",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,int,Codec)","org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,int,Codec).l",Has_Parameter
"org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,int,Codec)","org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,int,Codec).unfavouredCodec",Has_Parameter
org.apache.commons.compress.harmony.pack200.CodecEncoding.getCanonicalCodec(int),org.apache.commons.compress.harmony.pack200.CodecEncoding.getCanonicalCodec(int).i,Has_Parameter
"org.apache.commons.compress.harmony.pack200.CodecEncoding.getCodec(int,InputStream,Codec)","org.apache.commons.compress.harmony.pack200.CodecEncoding.getCodec(int,InputStream,Codec).value",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CodecEncoding.getCodec(int,InputStream,Codec)","org.apache.commons.compress.harmony.pack200.CodecEncoding.getCodec(int,InputStream,Codec).in",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CodecEncoding.getCodec(int,InputStream,Codec)","org.apache.commons.compress.harmony.pack200.CodecEncoding.getCodec(int,InputStream,Codec).defaultCodec",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifier(Codec,Codec)","org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifier(Codec,Codec).codec",Has_Parameter
"org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifier(Codec,Codec)","org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifier(Codec,Codec).defaultForBand",Has_Parameter
org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifierForDefaultCodec(BHSDCodec),org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifierForDefaultCodec(BHSDCodec).defaultCodec,Has_Parameter
"org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readConst(int,char[])","org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readConst(int,char[]).item",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readConst(int,char[])","org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readConst(int,char[]).buf",Has_Parameter
org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readUnsignedShort(int),org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readUnsignedShort(int).index,Has_Parameter
"org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readUTF8(int,char[])","org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readUTF8(int,char[]).arg0",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readUTF8(int,char[])","org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readUTF8(int,char[]).arg1",Has_Parameter
org.apache.commons.compress.harmony.pack200.Pack200ClassReader.setFileName(String),org.apache.commons.compress.harmony.pack200.Pack200ClassReader.setFileName(String).name,Has_Parameter
org.apache.commons.compress.harmony.pack200.Pack200ClassReader.<init>(byte[]),org.apache.commons.compress.harmony.pack200.Pack200ClassReader.<init>(byte[]).b,Has_Parameter
"org.apache.commons.compress.harmony.pack200.Archive.addJarEntry(PackingFile,List,List)","org.apache.commons.compress.harmony.pack200.Archive.addJarEntry(PackingFile,List,List).packingFile",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Archive.addJarEntry(PackingFile,List,List)","org.apache.commons.compress.harmony.pack200.Archive.addJarEntry(PackingFile,List,List).javaClasses",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Archive.addJarEntry(PackingFile,List,List)","org.apache.commons.compress.harmony.pack200.Archive.addJarEntry(PackingFile,List,List).files",Has_Parameter
org.apache.commons.compress.harmony.pack200.Archive.estimateSize(PackingFile),org.apache.commons.compress.harmony.pack200.Archive.estimateSize(PackingFile).packingFile,Has_Parameter
org.apache.commons.compress.harmony.pack200.Archive.splitIntoSegments(List),org.apache.commons.compress.harmony.pack200.Archive.splitIntoSegments(List).packingFileList,Has_Parameter
"org.apache.commons.compress.harmony.pack200.Archive.<init>(JarFile,OutputStream,PackingOptions)","org.apache.commons.compress.harmony.pack200.Archive.<init>(JarFile,OutputStream,PackingOptions).jarFile",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Archive.<init>(JarFile,OutputStream,PackingOptions)","org.apache.commons.compress.harmony.pack200.Archive.<init>(JarFile,OutputStream,PackingOptions).outputStream",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Archive.<init>(JarFile,OutputStream,PackingOptions)","org.apache.commons.compress.harmony.pack200.Archive.<init>(JarFile,OutputStream,PackingOptions).options",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Archive.<init>(JarInputStream,OutputStream,PackingOptions)","org.apache.commons.compress.harmony.pack200.Archive.<init>(JarInputStream,OutputStream,PackingOptions).inputStream",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Archive.<init>(JarInputStream,OutputStream,PackingOptions)","org.apache.commons.compress.harmony.pack200.Archive.<init>(JarInputStream,OutputStream,PackingOptions).outputStream",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Archive.<init>(JarInputStream,OutputStream,PackingOptions)","org.apache.commons.compress.harmony.pack200.Archive.<init>(JarInputStream,OutputStream,PackingOptions).options",Has_Parameter
org.apache.commons.compress.harmony.pack200.Archive$PackingFile.setContents(byte[]),org.apache.commons.compress.harmony.pack200.Archive$PackingFile.setContents(byte[]).contents,Has_Parameter
"org.apache.commons.compress.harmony.pack200.Archive$PackingFile.<init>(byte[],JarEntry)","org.apache.commons.compress.harmony.pack200.Archive$PackingFile.<init>(byte[],JarEntry).bytes",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Archive$PackingFile.<init>(byte[],JarEntry)","org.apache.commons.compress.harmony.pack200.Archive$PackingFile.<init>(byte[],JarEntry).jarEntry",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Archive$PackingFile.<init>(String,byte[],long)","org.apache.commons.compress.harmony.pack200.Archive$PackingFile.<init>(String,byte[],long).name",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Archive$PackingFile.<init>(String,byte[],long)","org.apache.commons.compress.harmony.pack200.Archive$PackingFile.<init>(String,byte[],long).contents",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Archive$PackingFile.<init>(String,byte[],long)","org.apache.commons.compress.harmony.pack200.Archive$PackingFile.<init>(String,byte[],long).modtime",Has_Parameter
org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.addPackedByteAmount(int),org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.addPackedByteAmount(int).amount,Has_Parameter
"org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.<init>(List,List)","org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.<init>(List,List).classes",Has_Parameter
"org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.<init>(List,List)","org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.<init>(List,List).files",Has_Parameter
org.apache.commons.compress.archivers.StreamingNotSupportedException.<init>(String),org.apache.commons.compress.archivers.StreamingNotSupportedException.<init>(String).format,Has_Parameter
org.apache.commons.compress.archivers.ArchiveStreamFactory.detect(InputStream),org.apache.commons.compress.archivers.ArchiveStreamFactory.detect(InputStream).in,Has_Parameter
"org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(Set,ArchiveStreamProvider,TreeMap)","org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(Set,ArchiveStreamProvider,TreeMap).names",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(Set,ArchiveStreamProvider,TreeMap)","org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(Set,ArchiveStreamProvider,TreeMap).provider",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(Set,ArchiveStreamProvider,TreeMap)","org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(Set,ArchiveStreamProvider,TreeMap).map",Has_Parameter
org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(String),org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(String).name,Has_Parameter
org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream),org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream).in,Has_Parameter
"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream)","org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream).archiverName",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream)","org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream).in",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream,String)","org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream,String).archiverName",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream,String)","org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream,String).in",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream,String)","org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream,String).actualEncoding",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream)","org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream).archiverName",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream)","org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream).out",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream,String)","org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream,String).archiverName",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream,String)","org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream,String).out",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream,String)","org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream,String).actualEncoding",Has_Parameter
org.apache.commons.compress.archivers.ArchiveStreamFactory.setEntryEncoding(String),org.apache.commons.compress.archivers.ArchiveStreamFactory.setEntryEncoding(String).entryEncoding,Has_Parameter
org.apache.commons.compress.archivers.ArchiveStreamFactory.<init>(String),org.apache.commons.compress.archivers.ArchiveStreamFactory.<init>(String).entryEncoding,Has_Parameter
org.apache.commons.compress.archivers.ArchiveException.<init>(String),org.apache.commons.compress.archivers.ArchiveException.<init>(String).message,Has_Parameter
"org.apache.commons.compress.archivers.ArchiveException.<init>(String,Exception)","org.apache.commons.compress.archivers.ArchiveException.<init>(String,Exception).message",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveException.<init>(String,Exception)","org.apache.commons.compress.archivers.ArchiveException.<init>(String,Exception).cause",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byte[],int)","org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byte[],int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byte[],int)","org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byte[],int).length",Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(DumpArchiveEntry),org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(DumpArchiveEntry).entry,Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(byte[],int,int).buf",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(DumpArchiveEntry),org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(DumpArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.<init>(InputStream),org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.<init>(InputStream).is,Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.<init>(InputStream,String)","org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.<init>(InputStream,String).is",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.<init>(InputStream,String)","org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.<init>(InputStream,String).encoding",Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>(String),org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>(String).msg,Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>(String,Throwable)","org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>(String,Throwable).msg",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>(String,Throwable)","org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>(String,Throwable).cause",Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>(Throwable),org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>(Throwable).cause,Has_Parameter
"org.apache.commons.compress.archivers.dump.Dirent.<init>(int,int,int,String)","org.apache.commons.compress.archivers.dump.Dirent.<init>(int,int,int,String).ino",Has_Parameter
"org.apache.commons.compress.archivers.dump.Dirent.<init>(int,int,int,String)","org.apache.commons.compress.archivers.dump.Dirent.<init>(int,int,int,String).parentIno",Has_Parameter
"org.apache.commons.compress.archivers.dump.Dirent.<init>(int,int,int,String)","org.apache.commons.compress.archivers.dump.Dirent.<init>(int,int,int,String).type",Has_Parameter
"org.apache.commons.compress.archivers.dump.Dirent.<init>(int,int,int,String)","org.apache.commons.compress.archivers.dump.Dirent.<init>(int,int,int,String).name",Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.equals(Object),org.apache.commons.compress.archivers.dump.DumpArchiveSummary.equals(Object).obj,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setDevname(String),org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setDevname(String).devname,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setDumpDate(Date),org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setDumpDate(Date).dumpDate,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFilesystem(String),org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFilesystem(String).fileSystem,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFirstRecord(int),org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFirstRecord(int).firstrec,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFlags(int),org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFlags(int).flags,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setHostname(String),org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setHostname(String).hostname,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setLabel(String),org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setLabel(String).label,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setLevel(int),org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setLevel(int).level,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setNTRec(int),org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setNTRec(int).ntrec,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setPreviousDumpDate(Date),org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setPreviousDumpDate(Date).previousDumpDate,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setVolume(int),org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setVolume(int).volume,Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveSummary.<init>(byte[],ZipEncoding)","org.apache.commons.compress.archivers.dump.DumpArchiveSummary.<init>(byte[],ZipEncoding).buffer",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveSummary.<init>(byte[],ZipEncoding)","org.apache.commons.compress.archivers.dump.DumpArchiveSummary.<init>(byte[],ZipEncoding).encoding",Has_Parameter
org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.<init>(String),org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.<init>(String).alg,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveUtil.calculateChecksum(byte[]),org.apache.commons.compress.archivers.dump.DumpArchiveUtil.calculateChecksum(byte[]).buffer,Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert16(byte[],int)","org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert16(byte[],int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert16(byte[],int)","org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert16(byte[],int).offset",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int)","org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int)","org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int).offset",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert64(byte[],int)","org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert64(byte[],int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert64(byte[],int)","org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert64(byte[],int).offset",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int)","org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int).encoding",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int)","org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int)","org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int)","org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int).len",Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveUtil.getIno(byte[]),org.apache.commons.compress.archivers.dump.DumpArchiveUtil.getIno(byte[]).buffer,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(byte[]),org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(byte[]).buffer,Has_Parameter
org.apache.commons.compress.archivers.dump.InvalidFormatException.<init>(long),org.apache.commons.compress.archivers.dump.InvalidFormatException.<init>(long).offset,Has_Parameter
"org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(boolean),org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(boolean).decompress,Has_Parameter
"org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(byte[],int,int)","org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(byte[],int,int)","org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(byte[],int,int)","org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.archivers.dump.TapeInputStream.readRange(int),org.apache.commons.compress.archivers.dump.TapeInputStream.readRange(int).len,Has_Parameter
"org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(int,boolean)","org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(int,boolean).recsPerBlock",Has_Parameter
"org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(int,boolean)","org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(int,boolean).isCompressed",Has_Parameter
org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long),org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long).len,Has_Parameter
org.apache.commons.compress.archivers.dump.TapeInputStream.<init>(InputStream),org.apache.commons.compress.archivers.dump.TapeInputStream.<init>(InputStream).in,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(byte[]),org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(byte[]).buffer,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.equals(Object),org.apache.commons.compress.archivers.dump.DumpArchiveEntry.equals(Object).o,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSparseRecord(int),org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSparseRecord(int).idx,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setAccessTime(Date),org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setAccessTime(Date).atime,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setCreationTime(Date),org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setCreationTime(Date).ctime,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setDeleted(boolean),org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setDeleted(boolean).isDeleted,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGeneration(int),org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGeneration(int).generation,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGroupId(int),org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGroupId(int).gid,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setLastModifiedDate(Date),org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setLastModifiedDate(Date).mtime,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setMode(int),org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setMode(int).mode,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setName(String),org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setName(String).name,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setNlink(int),org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setNlink(int).nlink,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setOffset(long),org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setOffset(long).offset,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSimpleName(String),org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSimpleName(String).simpleName,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSize(long),org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSize(long).size,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setType(TYPE),org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setType(TYPE).type,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setUserId(int),org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setUserId(int).uid,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setVolume(int),org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setVolume(int).volume,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry.update(byte[]),org.apache.commons.compress.archivers.dump.DumpArchiveEntry.update(byte[]).buffer,Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String)","org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String).name",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String)","org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String).simpleName",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String,int,TYPE)","org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String,int,TYPE).name",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String,int,TYPE)","org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String,int,TYPE).simpleName",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String,int,TYPE)","org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String,int,TYPE).ino",Has_Parameter
"org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String,int,TYPE)","org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String,int,TYPE).type",Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$PERMISSION.find(int),org.apache.commons.compress.archivers.dump.DumpArchiveEntry$PERMISSION.find(int).code,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.getCdata(int),org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.getCdata(int).idx,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.setIno(int),org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.setIno(int).ino,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE.find(int),org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE.find(int).code,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE.find(int),org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE.find(int).code,Has_Parameter
org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE.find(int),org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE.find(int).code,Has_Parameter
"org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveInputStream(String,InputStream,String)","org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveInputStream(String,InputStream,String).archiverName",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveInputStream(String,InputStream,String)","org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveInputStream(String,InputStream,String).inputStream",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveInputStream(String,InputStream,String)","org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveInputStream(String,InputStream,String).encoding",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveOutputStream(String,OutputStream,String)","org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveOutputStream(String,OutputStream,String).archiverName",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveOutputStream(String,OutputStream,String)","org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveOutputStream(String,OutputStream,String).outputStream",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveOutputStream(String,OutputStream,String)","org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveOutputStream(String,OutputStream,String).encoding",Has_Parameter
org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.putArchiveEntry(ZipArchiveEntry),org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.putArchiveEntry(ZipArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.<init>(OutputStream),org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.<init>(OutputStream).out,Has_Parameter
"org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.<init>(OutputStream,String)","org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.<init>(OutputStream,String).out",Has_Parameter
"org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.<init>(OutputStream,String)","org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.<init>(OutputStream,String).encoding",Has_Parameter
org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>(JarEntry),org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>(JarEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>(String),org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>(String).name,Has_Parameter
org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>(ZipArchiveEntry),org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>(ZipArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>(ZipEntry),org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>(ZipEntry).entry,Has_Parameter
"org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byte[],int)","org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byte[],int).signature",Has_Parameter
"org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byte[],int)","org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byte[],int).length",Has_Parameter
org.apache.commons.compress.archivers.jar.JarArchiveInputStream.<init>(InputStream),org.apache.commons.compress.archivers.jar.JarArchiveInputStream.<init>(InputStream).inputStream,Has_Parameter
"org.apache.commons.compress.archivers.jar.JarArchiveInputStream.<init>(InputStream,String)","org.apache.commons.compress.archivers.jar.JarArchiveInputStream.<init>(InputStream,String).inputStream",Has_Parameter
"org.apache.commons.compress.archivers.jar.JarArchiveInputStream.<init>(InputStream,String)","org.apache.commons.compress.archivers.jar.JarArchiveInputStream.<init>(InputStream,String).encoding",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.StreamMap.<init>(int[],long[],int[],int[])","org.apache.commons.compress.archivers.sevenz.StreamMap.<init>(int[],long[],int[],int[]).folderFirstPackStreamIndex",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.StreamMap.<init>(int[],long[],int[],int[])","org.apache.commons.compress.archivers.sevenz.StreamMap.<init>(int[],long[],int[],int[]).packStreamOffsets",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.StreamMap.<init>(int[],long[],int[],int[])","org.apache.commons.compress.archivers.sevenz.StreamMap.<init>(int[],long[],int[],int[]).folderFirstFileIndex",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.StreamMap.<init>(int[],long[],int[],int[])","org.apache.commons.compress.archivers.sevenz.StreamMap.<init>(int[],long[],int[],int[]).fileFolderIndex",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.StartHeader.<init>(long,long,long)","org.apache.commons.compress.archivers.sevenz.StartHeader.<init>(long,long,long).nextHeaderOffset",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.StartHeader.<init>(long,long,long)","org.apache.commons.compress.archivers.sevenz.StartHeader.<init>(long,long,long).nextHeaderSize",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.StartHeader.<init>(long,long,long)","org.apache.commons.compress.archivers.sevenz.StartHeader.<init>(long,long,long).nextHeaderCrc",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.javaTimeToNtfsTime(Date),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.javaTimeToNtfsTime(Date).date,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.ntfsTimeToJavaTime(long),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.ntfsTimeToJavaTime(long).ntfsTime,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.equals(Object),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.equals(Object).obj,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.equalSevenZMethods(Iterable,Iterable)","org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.equalSevenZMethods(Iterable,Iterable).c1",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.equalSevenZMethods(Iterable,Iterable)","org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.equalSevenZMethods(Iterable,Iterable).c2",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(Date),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(Date).accessDate,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(long),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(long).ntfsAccessDate,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessTime(FileTime),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessTime(FileTime).time,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAntiItem(boolean),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAntiItem(boolean).isAntiItem,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrc(int),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrc(int).crc,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrcValue(long),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrcValue(long).crc,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedSize(long),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedSize(long).size,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(Iterable),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(Iterable).methods,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(SevenZMethodConfiguration[]),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(SevenZMethodConfiguration[]).methods,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrc(int),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrc(int).crc,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrcValue(long),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrcValue(long).crc,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(Date),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(Date).creationDate,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(long),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(long).ntfsCreationDate,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationTime(FileTime),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationTime(FileTime).time,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setDirectory(boolean),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setDirectory(boolean).isDirectory,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasAccessDate(boolean),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasAccessDate(boolean).hasAcessDate,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCrc(boolean),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCrc(boolean).hasCrc,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCreationDate(boolean),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCreationDate(boolean).hasCreationDate,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasLastModifiedDate(boolean),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasLastModifiedDate(boolean).hasLastModifiedDate,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasStream(boolean),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasStream(boolean).hasStream,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasWindowsAttributes(boolean),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasWindowsAttributes(boolean).hasWindowsAttributes,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(Date),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(Date).lastModifiedDate,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(long),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(long).ntfsLastModifiedDate,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedTime(FileTime),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedTime(FileTime).time,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setName(String),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setName(String).name,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setSize(long),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setSize(long).size,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setWindowsAttributes(int),org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setWindowsAttributes(int).windowsAttributes,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.reverse(Iterable),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.reverse(Iterable).i,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(File,String)","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(File,String).inputFile",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(File,String)","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(File,String).entryName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(Path,String,LinkOption[])","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(Path,String,LinkOption[]).inputPath",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(Path,String,LinkOption[])","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(Path,String,LinkOption[]).entryName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(Path,String,LinkOption[])","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(Path,String,LinkOption[]).options",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.fillDates(Path,SevenZArchiveEntry,LinkOption[])","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.fillDates(Path,SevenZArchiveEntry,LinkOption[]).inputPath",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.fillDates(Path,SevenZArchiveEntry,LinkOption[])","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.fillDates(Path,SevenZArchiveEntry,LinkOption[]).entry",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.fillDates(Path,SevenZArchiveEntry,LinkOption[])","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.fillDates(Path,SevenZArchiveEntry,LinkOption[]).options",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getContentMethods(SevenZArchiveEntry),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getContentMethods(SevenZArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(ArchiveEntry),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(ArchiveEntry).archiveEntry,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(SevenZArchiveEntry),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(SevenZArchiveEntry).archiveEntry,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentCompression(SevenZMethod),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentCompression(SevenZMethod).method,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentMethods(Iterable),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentMethods(Iterable).methods,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[]),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[]).b,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(InputStream),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(InputStream).inputStream,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(int),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(int).b,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(Path,OpenOption[])","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(Path,OpenOption[]).path",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(Path,OpenOption[])","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(Path,OpenOption[]).options",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(DataOutput,BitSet,int)","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(DataOutput,BitSet,int).header",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(DataOutput,BitSet,int)","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(DataOutput,BitSet,int).bits",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(DataOutput,BitSet,int)","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(DataOutput,BitSet,int).length",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileAntiItems(DataOutput),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileAntiItems(DataOutput).header,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileATimes(DataOutput),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileATimes(DataOutput).header,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileCTimes(DataOutput),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileCTimes(DataOutput).header,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyFiles(DataOutput),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyFiles(DataOutput).header,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyStreams(DataOutput),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyStreams(DataOutput).header,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileMTimes(DataOutput),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileMTimes(DataOutput).header,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileNames(DataOutput),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileNames(DataOutput).header,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(DataOutput),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(DataOutput).header,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileWindowsAttributes(DataOutput),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileWindowsAttributes(DataOutput).header,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(DataOutput,SevenZArchiveEntry)","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(DataOutput,SevenZArchiveEntry).header",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(DataOutput,SevenZArchiveEntry)","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(DataOutput,SevenZArchiveEntry).entry",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeHeader(DataOutput),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeHeader(DataOutput).header,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writePackInfo(DataOutput),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writePackInfo(DataOutput).header,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSingleCodec(SevenZMethodConfiguration,OutputStream)","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSingleCodec(SevenZMethodConfiguration,OutputStream).m",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSingleCodec(SevenZMethodConfiguration,OutputStream)","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSingleCodec(SevenZMethodConfiguration,OutputStream).bos",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeStreamsInfo(DataOutput),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeStreamsInfo(DataOutput).header,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSubStreamsInfo(DataOutput),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSubStreamsInfo(DataOutput).header,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(DataOutput,long)","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(DataOutput,long).header",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(DataOutput,long)","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(DataOutput,long).value",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUnpackInfo(DataOutput),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUnpackInfo(DataOutput).header,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(File),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(File).fileName,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(File,char[])","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(File,char[]).fileName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(File,char[])","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(File,char[]).password",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(SeekableByteChannel),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(SeekableByteChannel).channel,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(SeekableByteChannel,char[])","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(SeekableByteChannel,char[]).channel",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(SeekableByteChannel,char[])","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(SeekableByteChannel,char[]).password",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(byte[]),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(byte[]).b,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(int),org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(int).b,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<init>(int,boolean,boolean)","org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<init>(int,boolean,boolean).maxMemoryLimitKb",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<init>(int,boolean,boolean)","org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<init>(int,boolean,boolean).useDefaultNameForUnnamedEntries",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<init>(int,boolean,boolean)","org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<init>(int,boolean,boolean).tryToRecoverBrokenArchives",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.withMaxMemoryLimitInKb(int),org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.withMaxMemoryLimitInKb(int).maxMemoryLimitKiB,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.withTryToRecoverBrokenArchives(boolean),org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.withTryToRecoverBrokenArchives(boolean).tryToRecoverBrokenArchives,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.withUseDefaultNameForUnnamedEntries(boolean),org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.withUseDefaultNameForUnnamedEntries(boolean).useDefaultNameForUnnamedEntries,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coder.<init>(byte[],long,long,byte[])","org.apache.commons.compress.archivers.sevenz.Coder.<init>(byte[],long,long,byte[]).decompressionMethodId",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coder.<init>(byte[],long,long,byte[])","org.apache.commons.compress.archivers.sevenz.Coder.<init>(byte[],long,long,byte[]).numInStreams",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coder.<init>(byte[],long,long,byte[])","org.apache.commons.compress.archivers.sevenz.Coder.<init>(byte[],long,long,byte[]).numOutStreams",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coder.<init>(byte[],long,long,byte[])","org.apache.commons.compress.archivers.sevenz.Coder.<init>(byte[],long,long,byte[]).properties",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(byte[],int,byte[])","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(byte[],int,byte[]).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(byte[],int,byte[])","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(byte[],int,byte[]).numCyclesPower",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(byte[],int,byte[])","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(byte[],int,byte[]).salt",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(char[],int,byte[])","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(char[],int,byte[]).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(char[],int,byte[])","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(char[],int,byte[]).numCyclesPower",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(char[],int,byte[])","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(char[],int,byte[]).salt",Has_Parameter
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.utf16Decode(char[]),org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.utf16Decode(char[]).chars,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[],int).archiveName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[],int).in",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[],int).uncompressedLength",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[],int).coder",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[],int).passwordBytes",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.encode(OutputStream,Object)","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.encode(OutputStream,Object).out",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.encode(OutputStream,Object)","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.encode(OutputStream,Object).options",Has_Parameter
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.getOptionsAsProperties(Object),org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.getOptionsAsProperties(Object).options,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.read(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.<init>(InputStream,Coder,String,byte[])","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.<init>(InputStream,Coder,String,byte[]).in",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.<init>(InputStream,Coder,String,byte[])","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.<init>(InputStream,Coder,String,byte[]).coder",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.<init>(InputStream,Coder,String,byte[])","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.<init>(InputStream,Coder,String,byte[]).archiveName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.<init>(InputStream,Coder,String,byte[])","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.<init>(InputStream,Coder,String,byte[]).passwordBytes",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.write(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.write(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.write(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.write(int),org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.write(int).b,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.<init>(AES256Options,OutputStream)","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.<init>(AES256Options,OutputStream).opts",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.<init>(AES256Options,OutputStream)","org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.<init>(AES256Options,OutputStream).out",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int).archiveName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int).is",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int).uncompressedLength",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int).coder",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(OutputStream,SevenZMethod,Object)","org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(OutputStream,SevenZMethod,Object).out",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(OutputStream,SevenZMethod,Object)","org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(OutputStream,SevenZMethod,Object).method",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(OutputStream,SevenZMethod,Object)","org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(OutputStream,SevenZMethod,Object).options",Has_Parameter
org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(SevenZMethod),org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(SevenZMethod).method,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.decode(String,InputStream,long,Coder,byte[],int).archiveName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.decode(String,InputStream,long,Coder,byte[],int).in",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.decode(String,InputStream,long,Coder,byte[],int).uncompressedLength",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.decode(String,InputStream,long,Coder,byte[],int).coder",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.decode(String,InputStream,long,Coder,byte[],int).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.decode(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.encode(OutputStream,Object)","org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.encode(OutputStream,Object).out",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.encode(OutputStream,Object)","org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.encode(OutputStream,Object).options",Has_Parameter
org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.<init>(FilterOptions),org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.<init>(FilterOptions).opts,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.decode(String,InputStream,long,Coder,byte[],int).archiveName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.decode(String,InputStream,long,Coder,byte[],int).in",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.decode(String,InputStream,long,Coder,byte[],int).uncompressedLength",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.decode(String,InputStream,long,Coder,byte[],int).coder",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.decode(String,InputStream,long,Coder,byte[],int).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.decode(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.encode(OutputStream,Object)","org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.encode(OutputStream,Object).out",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.encode(OutputStream,Object)","org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.encode(OutputStream,Object).options",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.decode(String,InputStream,long,Coder,byte[],int).archiveName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.decode(String,InputStream,long,Coder,byte[],int).in",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.decode(String,InputStream,long,Coder,byte[],int).uncompressedLength",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.decode(String,InputStream,long,Coder,byte[],int).coder",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.decode(String,InputStream,long,Coder,byte[],int).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.decode(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.encode(OutputStream,Object)","org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.encode(OutputStream,Object).out",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.encode(OutputStream,Object)","org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.encode(OutputStream,Object).options",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.decode(String,InputStream,long,Coder,byte[],int).archiveName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.decode(String,InputStream,long,Coder,byte[],int).in",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.decode(String,InputStream,long,Coder,byte[],int).uncompressedLength",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.decode(String,InputStream,long,Coder,byte[],int).coder",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.decode(String,InputStream,long,Coder,byte[],int).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.decode(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.decode(String,InputStream,long,Coder,byte[],int).archiveName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.decode(String,InputStream,long,Coder,byte[],int).in",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.decode(String,InputStream,long,Coder,byte[],int).uncompressedLength",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.decode(String,InputStream,long,Coder,byte[],int).coder",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.decode(String,InputStream,long,Coder,byte[],int).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.decode(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.encode(OutputStream,Object)","org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.encode(OutputStream,Object).out",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.encode(OutputStream,Object)","org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.encode(OutputStream,Object).options",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderInputStream.<init>(InflaterInputStream,Inflater)","org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderInputStream.<init>(InflaterInputStream,Inflater).inflaterInputStream",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderInputStream.<init>(InflaterInputStream,Inflater)","org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderInputStream.<init>(InflaterInputStream,Inflater).inflater",Has_Parameter
org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(byte[]),org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(byte[]).b,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(int),org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(int).b,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.<init>(DeflaterOutputStream,Deflater)","org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.<init>(DeflaterOutputStream,Deflater).deflaterOutputStream",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.<init>(DeflaterOutputStream,Deflater)","org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.<init>(DeflaterOutputStream,Deflater).deflater",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.equals(Object),org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.equals(Object).obj,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.<init>(SevenZMethod),org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.<init>(SevenZMethod).method,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.<init>(SevenZMethod,Object)","org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.<init>(SevenZMethod,Object).method",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.<init>(SevenZMethod,Object)","org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.<init>(SevenZMethod,Object).options",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[],int).archiveName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[],int).in",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[],int).uncompressedLength",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[],int).coder",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[],int).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.encode(OutputStream,Object)","org.apache.commons.compress.archivers.sevenz.DeltaDecoder.encode(OutputStream,Object).out",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.encode(OutputStream,Object)","org.apache.commons.compress.archivers.sevenz.DeltaDecoder.encode(OutputStream,Object).options",Has_Parameter
org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsAsProperties(Object),org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsAsProperties(Object).options,Has_Parameter
org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder),org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder).coder,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder,InputStream)","org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder,InputStream).coder",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder,InputStream)","org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder,InputStream).in",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.BindPair.<init>(long,long)","org.apache.commons.compress.archivers.sevenz.BindPair.<init>(long,long).inIndex",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.BindPair.<init>(long,long)","org.apache.commons.compress.archivers.sevenz.BindPair.<init>(long,long).outIndex",Has_Parameter
org.apache.commons.compress.archivers.sevenz.CLI.grabMode(String[]),org.apache.commons.compress.archivers.sevenz.CLI.grabMode(String[]).args,Has_Parameter
org.apache.commons.compress.archivers.sevenz.CLI.main(String[]),org.apache.commons.compress.archivers.sevenz.CLI.main(String[]).args,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.CLI$Mode.takeAction(SevenZFile,SevenZArchiveEntry)","org.apache.commons.compress.archivers.sevenz.CLI$Mode.takeAction(SevenZFile,SevenZArchiveEntry).archive",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.CLI$Mode.takeAction(SevenZFile,SevenZArchiveEntry)","org.apache.commons.compress.archivers.sevenz.CLI$Mode.takeAction(SevenZFile,SevenZArchiveEntry).entry",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.toInt(Object,int)","org.apache.commons.compress.archivers.sevenz.AbstractCoder.toInt(Object,int).options",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.toInt(Object,int)","org.apache.commons.compress.archivers.sevenz.AbstractCoder.toInt(Object,int).defaultValue",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.AbstractCoder.decode(String,InputStream,long,Coder,byte[],int).archiveName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.AbstractCoder.decode(String,InputStream,long,Coder,byte[],int).in",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.AbstractCoder.decode(String,InputStream,long,Coder,byte[],int).uncompressedLength",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.AbstractCoder.decode(String,InputStream,long,Coder,byte[],int).coder",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.AbstractCoder.decode(String,InputStream,long,Coder,byte[],int).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.AbstractCoder.decode(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.encode(OutputStream,Object)","org.apache.commons.compress.archivers.sevenz.AbstractCoder.encode(OutputStream,Object).out",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.encode(OutputStream,Object)","org.apache.commons.compress.archivers.sevenz.AbstractCoder.encode(OutputStream,Object).options",Has_Parameter
org.apache.commons.compress.archivers.sevenz.AbstractCoder.getOptionsAsProperties(Object),org.apache.commons.compress.archivers.sevenz.AbstractCoder.getOptionsAsProperties(Object).options,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.getOptionsFromCoder(Coder,InputStream)","org.apache.commons.compress.archivers.sevenz.AbstractCoder.getOptionsFromCoder(Coder,InputStream).coder",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AbstractCoder.getOptionsFromCoder(Coder,InputStream)","org.apache.commons.compress.archivers.sevenz.AbstractCoder.getOptionsFromCoder(Coder,InputStream).in",Has_Parameter
org.apache.commons.compress.archivers.sevenz.AbstractCoder.isOptionInstance(Object),org.apache.commons.compress.archivers.sevenz.AbstractCoder.isOptionInstance(Object).opts,Has_Parameter
org.apache.commons.compress.archivers.sevenz.AbstractCoder.<init>(Class[]),org.apache.commons.compress.archivers.sevenz.AbstractCoder.<init>(Class[]).optionClasses,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[],int).archiveName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[],int).in",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[],int).uncompressedLength",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[],int).coder",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[],int).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(OutputStream,Object)","org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(OutputStream,Object).out",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(OutputStream,Object)","org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(OutputStream,Object).opts",Has_Parameter
org.apache.commons.compress.archivers.sevenz.LZMADecoder.getDictionarySize(Coder),org.apache.commons.compress.archivers.sevenz.LZMADecoder.getDictionarySize(Coder).coder,Has_Parameter
org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(Object),org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(Object).opts,Has_Parameter
org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(Object),org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(Object).opts,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(Coder,InputStream)","org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(Coder,InputStream).coder",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(Coder,InputStream)","org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(Coder,InputStream).in",Has_Parameter
org.apache.commons.compress.archivers.sevenz.LZMADecoder.numberOptionOrDefault(Object),org.apache.commons.compress.archivers.sevenz.LZMADecoder.numberOptionOrDefault(Object).opts,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[],int).archiveName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[],int).in",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[],int).uncompressedLength",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[],int).coder",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[],int).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[],int)","org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[],int).maxMemoryLimitKiB",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.encode(OutputStream,Object)","org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.encode(OutputStream,Object).out",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.encode(OutputStream,Object)","org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.encode(OutputStream,Object).opts",Has_Parameter
org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictionarySize(Coder),org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictionarySize(Coder).coder,Has_Parameter
org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictSize(Object),org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictSize(Object).opts,Has_Parameter
org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptions(Object),org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptions(Object).opts,Has_Parameter
org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsAsProperties(Object),org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsAsProperties(Object).opts,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsFromCoder(Coder,InputStream)","org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsFromCoder(Coder,InputStream).coder",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsFromCoder(Coder,InputStream)","org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsFromCoder(Coder,InputStream).in",Has_Parameter
org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.numberOptionOrDefault(Object),org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.numberOptionOrDefault(Object).opts,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.assertFitsIntoNonNegativeInt(String,long)","org.apache.commons.compress.archivers.sevenz.SevenZFile.assertFitsIntoNonNegativeInt(String,long).what",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.assertFitsIntoNonNegativeInt(String,long)","org.apache.commons.compress.archivers.sevenz.SevenZFile.assertFitsIntoNonNegativeInt(String,long).value",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.checkEndOfFile(ByteBuffer,int)","org.apache.commons.compress.archivers.sevenz.SevenZFile.checkEndOfFile(ByteBuffer,int).buf",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.checkEndOfFile(ByteBuffer,int)","org.apache.commons.compress.archivers.sevenz.SevenZFile.checkEndOfFile(ByteBuffer,int).expectRemaining",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.get(ByteBuffer,byte[])","org.apache.commons.compress.archivers.sevenz.SevenZFile.get(ByteBuffer,byte[]).buf",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.get(ByteBuffer,byte[])","org.apache.commons.compress.archivers.sevenz.SevenZFile.get(ByteBuffer,byte[]).to",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile.getChar(ByteBuffer),org.apache.commons.compress.archivers.sevenz.SevenZFile.getChar(ByteBuffer).buf,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile.getInt(ByteBuffer),org.apache.commons.compress.archivers.sevenz.SevenZFile.getInt(ByteBuffer).buf,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile.getLong(ByteBuffer),org.apache.commons.compress.archivers.sevenz.SevenZFile.getLong(ByteBuffer).buf,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer),org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer).buf,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(byte[],int)","org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(byte[],int).signature",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(byte[],int)","org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(byte[],int).length",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile.newByteChannel(File),org.apache.commons.compress.archivers.sevenz.SevenZFile.newByteChannel(File).file,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer),org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer).in,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long)","org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long).input",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long)","org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long).bytesToSkip",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry)","org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry).folder",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry)","org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry).folderOffset",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry)","org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry).firstPackStreamIndex",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry)","org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry).entry",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(int,boolean)","org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(int,boolean).entryIndex",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(int,boolean)","org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(int,boolean).isRandomAccess",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(Archive),org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(Archive).archive,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.checkEntryIsInitialized(Map,int)","org.apache.commons.compress.archivers.sevenz.SevenZFile.checkEntryIsInitialized(Map,int).archiveEntries",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.checkEntryIsInitialized(Map,int)","org.apache.commons.compress.archivers.sevenz.SevenZFile.checkEntryIsInitialized(Map,int).index",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile.getInputStream(SevenZArchiveEntry),org.apache.commons.compress.archivers.sevenz.SevenZFile.getInputStream(SevenZArchiveEntry).entry,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.initializeArchive(StartHeader,byte[],boolean)","org.apache.commons.compress.archivers.sevenz.SevenZFile.initializeArchive(StartHeader,byte[],boolean).startHeader",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.initializeArchive(StartHeader,byte[],boolean)","org.apache.commons.compress.archivers.sevenz.SevenZFile.initializeArchive(StartHeader,byte[],boolean).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.initializeArchive(StartHeader,byte[],boolean)","org.apache.commons.compress.archivers.sevenz.SevenZFile.initializeArchive(StartHeader,byte[],boolean).verifyCrc",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[]),org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[]).b,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(ByteBuffer,int)","org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(ByteBuffer,int).header",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(ByteBuffer,int)","org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(ByteBuffer,int).size",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile.readArchiveProperties(ByteBuffer),org.apache.commons.compress.archivers.sevenz.SevenZFile.readArchiveProperties(ByteBuffer).input,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(ByteBuffer,int)","org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(ByteBuffer,int).header",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(ByteBuffer,int)","org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(ByteBuffer,int).size",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(ByteBuffer,Archive,byte[])","org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(ByteBuffer,Archive,byte[]).header",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(ByteBuffer,Archive,byte[])","org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(ByteBuffer,Archive,byte[]).archive",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(ByteBuffer,Archive,byte[])","org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(ByteBuffer,Archive,byte[]).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(ByteBuffer,Archive)","org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(ByteBuffer,Archive).header",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(ByteBuffer,Archive)","org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(ByteBuffer,Archive).archive",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(ByteBuffer),org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(ByteBuffer).header,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(ByteBuffer),org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(ByteBuffer).buf,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(ByteBuffer,Archive)","org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(ByteBuffer,Archive).header",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(ByteBuffer,Archive)","org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(ByteBuffer,Archive).archive",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[]),org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[]).password,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(ByteBuffer,Archive)","org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(ByteBuffer,Archive).header",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(ByteBuffer,Archive)","org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(ByteBuffer,Archive).archive",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long),org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long).startHeaderCrc,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(ByteBuffer,Archive)","org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(ByteBuffer,Archive).header",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(ByteBuffer,Archive)","org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(ByteBuffer,Archive).archive",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(ByteBuffer,Archive)","org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(ByteBuffer,Archive).header",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(ByteBuffer,Archive)","org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(ByteBuffer,Archive).archive",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(ByteBuffer,Archive)","org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(ByteBuffer,Archive).header",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(ByteBuffer,Archive)","org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(ByteBuffer,Archive).archive",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.reopenFolderInputStream(int,SevenZArchiveEntry)","org.apache.commons.compress.archivers.sevenz.SevenZFile.reopenFolderInputStream(int,SevenZArchiveEntry).folderIndex",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.reopenFolderInputStream(int,SevenZArchiveEntry)","org.apache.commons.compress.archivers.sevenz.SevenZFile.reopenFolderInputStream(int,SevenZArchiveEntry).file",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckAndCollectStatistics(ByteBuffer),org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckAndCollectStatistics(ByteBuffer).header,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckArchiveProperties(ByteBuffer),org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckArchiveProperties(ByteBuffer).header,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckFilesInfo(ByteBuffer,ArchiveStatistics)","org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckFilesInfo(ByteBuffer,ArchiveStatistics).header",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckFilesInfo(ByteBuffer,ArchiveStatistics)","org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckFilesInfo(ByteBuffer,ArchiveStatistics).stats",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckFolder(ByteBuffer,ArchiveStatistics)","org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckFolder(ByteBuffer,ArchiveStatistics).header",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckFolder(ByteBuffer,ArchiveStatistics)","org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckFolder(ByteBuffer,ArchiveStatistics).stats",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckPackInfo(ByteBuffer,ArchiveStatistics)","org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckPackInfo(ByteBuffer,ArchiveStatistics).header",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckPackInfo(ByteBuffer,ArchiveStatistics)","org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckPackInfo(ByteBuffer,ArchiveStatistics).stats",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckStreamsInfo(ByteBuffer,ArchiveStatistics)","org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckStreamsInfo(ByteBuffer,ArchiveStatistics).header",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckStreamsInfo(ByteBuffer,ArchiveStatistics)","org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckStreamsInfo(ByteBuffer,ArchiveStatistics).stats",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckSubStreamsInfo(ByteBuffer,ArchiveStatistics)","org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckSubStreamsInfo(ByteBuffer,ArchiveStatistics).header",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckSubStreamsInfo(ByteBuffer,ArchiveStatistics)","org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckSubStreamsInfo(ByteBuffer,ArchiveStatistics).stats",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckUnpackInfo(ByteBuffer,ArchiveStatistics)","org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckUnpackInfo(ByteBuffer,ArchiveStatistics).header",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckUnpackInfo(ByteBuffer,ArchiveStatistics)","org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckUnpackInfo(ByteBuffer,ArchiveStatistics).stats",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.skipEntriesWhenNeeded(int,boolean,int)","org.apache.commons.compress.archivers.sevenz.SevenZFile.skipEntriesWhenNeeded(int,boolean,int).entryIndex",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.skipEntriesWhenNeeded(int,boolean,int)","org.apache.commons.compress.archivers.sevenz.SevenZFile.skipEntriesWhenNeeded(int,boolean,int).isInSameFolder",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.skipEntriesWhenNeeded(int,boolean,int)","org.apache.commons.compress.archivers.sevenz.SevenZFile.skipEntriesWhenNeeded(int,boolean,int).folderIndex",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile.tryToLocateEndHeader(byte[]),org.apache.commons.compress.archivers.sevenz.SevenZFile.tryToLocateEndHeader(byte[]).password,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File),org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File).fileName,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,byte[])","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,byte[]).file",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,byte[])","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,byte[]).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,char[])","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,char[]).file",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,char[])","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,char[]).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,char[],SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,char[],SevenZFileOptions).file",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,char[],SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,char[],SevenZFileOptions).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,char[],SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,char[],SevenZFileOptions).options",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,SevenZFileOptions).file",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,SevenZFileOptions).options",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel),org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel).channel,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,byte[])","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,byte[]).channel",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,byte[])","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,byte[]).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,char[])","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,char[]).channel",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,char[])","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,char[]).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,char[],SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,char[],SevenZFileOptions).channel",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,char[],SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,char[],SevenZFileOptions).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,char[],SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,char[],SevenZFileOptions).options",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,SevenZFileOptions).channel",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,SevenZFileOptions).options",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String).channel",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String).fileName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[])","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[]).channel",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[])","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[]).fileName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[])","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[]).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean).channel",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean).fileName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean).closeOnError",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean).maxMemoryLimitKiB",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean).useDefaultNameForUnnamedEntries",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean).tryToRecoverBrokenArchives",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions).channel",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions).fileName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions).closeOnError",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions).options",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[])","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[]).channel",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[])","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[]).fileName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[])","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[]).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[],SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[],SevenZFileOptions).channel",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[],SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[],SevenZFileOptions).fileName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[],SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[],SevenZFileOptions).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[],SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[],SevenZFileOptions).options",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,SevenZFileOptions).channel",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,SevenZFileOptions).fileName",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,SevenZFileOptions)","org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,SevenZFileOptions).options",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.assertValidity(int),org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.assertValidity(int).maxMemoryLimitKiB,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setDefaultName(String),org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setDefaultName(String).defaultName,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setMaxMemoryLimitKb(int),org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setMaxMemoryLimitKb(int).maxMemoryLimitKiB,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setMaxMemoryLimitKiB(int),org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setMaxMemoryLimitKiB(int).maxMemoryLimitKiB,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setPassword(byte[]),org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setPassword(byte[]).password,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setPassword(char[]),org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setPassword(char[]).password,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setPassword(String),org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setPassword(String).password,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setSeekableByteChannel(SeekableByteChannel),org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setSeekableByteChannel(SeekableByteChannel).seekableByteChannel,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setTryToRecoverBrokenArchives(boolean),org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setTryToRecoverBrokenArchives(boolean).tryToRecoverBrokenArchives,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setUseDefaultNameForUnnamedEntries(boolean),org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setUseDefaultNameForUnnamedEntries(boolean).useDefaultNameForUnnamedEntries,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(int),org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(int).len,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.<init>(SeekableByteChannel,long)","org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.<init>(SeekableByteChannel,long).channel",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.<init>(SeekableByteChannel,long)","org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.<init>(SeekableByteChannel,long).size",Has_Parameter
org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForInStream(int),org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForInStream(int).index,Has_Parameter
org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForOutStream(int),org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForOutStream(int).index,Has_Parameter
org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSizeForCoder(Coder),org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSizeForCoder(Coder).coder,Has_Parameter
org.apache.commons.compress.archivers.sevenz.Archive.lengthOf(long[]),org.apache.commons.compress.archivers.sevenz.Archive.lengthOf(long[]).a,Has_Parameter
org.apache.commons.compress.archivers.sevenz.Archive.lengthOf(Object[]),org.apache.commons.compress.archivers.sevenz.Archive.lengthOf(Object[]).a,Has_Parameter
org.apache.commons.compress.archivers.sevenz.SevenZMethod.byId(byte[]),org.apache.commons.compress.archivers.sevenz.SevenZMethod.byId(byte[]).id,Has_Parameter
org.apache.commons.compress.archivers.sevenz.AES256Options.newSecretKeySpec(byte[]),org.apache.commons.compress.archivers.sevenz.AES256Options.newSecretKeySpec(byte[]).bytes,Has_Parameter
org.apache.commons.compress.archivers.sevenz.AES256Options.randomBytes(int),org.apache.commons.compress.archivers.sevenz.AES256Options.randomBytes(int).size,Has_Parameter
org.apache.commons.compress.archivers.sevenz.AES256Options.<init>(char[]),org.apache.commons.compress.archivers.sevenz.AES256Options.<init>(char[]).password,Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256Options.<init>(char[],byte[],byte[],int)","org.apache.commons.compress.archivers.sevenz.AES256Options.<init>(char[],byte[],byte[],int).password",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256Options.<init>(char[],byte[],byte[],int)","org.apache.commons.compress.archivers.sevenz.AES256Options.<init>(char[],byte[],byte[],int).salt",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256Options.<init>(char[],byte[],byte[],int)","org.apache.commons.compress.archivers.sevenz.AES256Options.<init>(char[],byte[],byte[],int).iv",Has_Parameter
"org.apache.commons.compress.archivers.sevenz.AES256Options.<init>(char[],byte[],byte[],int)","org.apache.commons.compress.archivers.sevenz.AES256Options.<init>(char[],byte[],byte[],int).numCyclesPower",Has_Parameter
org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.<init>(int),org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.<init>(int).totalUnpackStreams,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipUtil.adjustToLong(int),org.apache.commons.compress.archivers.zip.ZipUtil.adjustToLong(int).i,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(ZipArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(ZipArchiveEntry).ze,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[]),org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[]).from,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[],byte[],int)","org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[],byte[],int).from",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[],byte[],int)","org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[],byte[],int).to",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[],byte[],int)","org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[],byte[],int).offset",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaDate(long),org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaDate(long).dosTime,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(long),org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(long).dosTime,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipUtil.fromDosTime(ZipLong),org.apache.commons.compress.archivers.zip.ZipUtil.fromDosTime(ZipLong).zipDosTime,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField,byte[])","org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField,byte[]).f",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField,byte[])","org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField,byte[]).orig",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipUtil.isDosTime(long),org.apache.commons.compress.archivers.zip.ZipUtil.isDosTime(long).time,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipUtil.javaEpochToLocalDateTime(long),org.apache.commons.compress.archivers.zip.ZipUtil.javaEpochToLocalDateTime(long).time,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipUtil.javaToDosTime(long),org.apache.commons.compress.archivers.zip.ZipUtil.javaToDosTime(long).t,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipUtil.longToBig(long),org.apache.commons.compress.archivers.zip.ZipUtil.longToBig(long).l,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipUtil.newZipException(String,Throwable)","org.apache.commons.compress.archivers.zip.ZipUtil.newZipException(String,Throwable).message",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipUtil.newZipException(String,Throwable)","org.apache.commons.compress.archivers.zip.ZipUtil.newZipException(String,Throwable).cause",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byte[]),org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byte[]).array,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(ZipArchiveEntry,byte[],byte[])","org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(ZipArchiveEntry,byte[],byte[]).ze",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(ZipArchiveEntry,byte[],byte[])","org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(ZipArchiveEntry,byte[],byte[]).originalNameBytes",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(ZipArchiveEntry,byte[],byte[])","org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(ZipArchiveEntry,byte[],byte[]).commentBytes",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipUtil.signedByteToUnsignedInt(byte),org.apache.commons.compress.archivers.zip.ZipUtil.signedByteToUnsignedInt(byte).b,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipUtil.supportsEncryptionOf(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipUtil.supportsEncryptionOf(ZipArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(ZipArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(Date),org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(Date).time,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long),org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long).t,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long,byte[],int)","org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long,byte[],int).t",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long,byte[],int)","org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long,byte[],int).buf",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long,byte[],int)","org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long,byte[],int).offset",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipUtil.toLong(BigInteger),org.apache.commons.compress.archivers.zip.ZipUtil.toLong(BigInteger).big,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte(int),org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte(int).i,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(Charset),org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(Charset).charset,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(String),org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(String).name,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipEncodingHelper.growBufferBy(ByteBuffer,int)","org.apache.commons.compress.archivers.zip.ZipEncodingHelper.growBufferBy(ByteBuffer,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipEncodingHelper.growBufferBy(ByteBuffer,int)","org.apache.commons.compress.archivers.zip.ZipEncodingHelper.growBufferBy(ByteBuffer,int).increment",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(Charset),org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(Charset).charset,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(String),org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(String).charsetName,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8Alias(String),org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8Alias(String).actual,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipEncodingHelper.toSafeCharset(String),org.apache.commons.compress.archivers.zip.ZipEncodingHelper.toSafeCharset(String).name,Has_Parameter
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromCentralDirectoryData(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromCentralDirectoryData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromCentralDirectoryData(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.setNameCRC32(long),org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.setNameCRC32(long).nameCRC32,Has_Parameter
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.setUnicodeName(byte[]),org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.setUnicodeName(byte[]).unicodeName,Has_Parameter
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[])","org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[]).text",Has_Parameter
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[])","org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[]).bytes",Has_Parameter
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[],int,int)","org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[],int,int).text",Has_Parameter
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[],int,int)","org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[],int,int).bytes",Has_Parameter
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[],int,int)","org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[],int,int)","org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier)","org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier).zipArchiveEntry",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier)","org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier).payloadSupplier",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.<init>(ZipArchiveEntry,InputStreamSupplier)","org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.<init>(ZipArchiveEntry,InputStreamSupplier).zipArchiveEntry",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.<init>(ZipArchiveEntry,InputStreamSupplier)","org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.<init>(ZipArchiveEntry,InputStreamSupplier).payloadSupplier",Has_Parameter
"org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.read(byte[],int,int)","org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.read(byte[],int,int)","org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.read(byte[],int,int)","org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.read(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream),org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream).in,Has_Parameter
"org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream,Inflater)","org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream,Inflater).in",Has_Parameter
"org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream,Inflater)","org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream,Inflater).inf",Has_Parameter
"org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream,Inflater,int)","org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream,Inflater,int).in",Has_Parameter
"org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream,Inflater,int)","org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream,Inflater,int).inf",Has_Parameter
"org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream,Inflater,int)","org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream,Inflater,int).size",Has_Parameter
org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(int),org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(int).mode,Has_Parameter
"org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromCentralDirectoryData(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromCentralDirectoryData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromCentralDirectoryData(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(boolean),org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(boolean).dirFlag,Has_Parameter
org.apache.commons.compress.archivers.zip.AsiExtraField.setGroupId(int),org.apache.commons.compress.archivers.zip.AsiExtraField.setGroupId(int).gid,Has_Parameter
org.apache.commons.compress.archivers.zip.AsiExtraField.setLinkedFile(String),org.apache.commons.compress.archivers.zip.AsiExtraField.setLinkedFile(String).name,Has_Parameter
org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(int),org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(int).mode,Has_Parameter
org.apache.commons.compress.archivers.zip.AsiExtraField.setUserId(int),org.apache.commons.compress.archivers.zip.AsiExtraField.setUserId(int).uid,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(ZipArchiveEntry,InputStream)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(ZipArchiveEntry,InputStream).entry",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(ZipArchiveEntry,InputStream)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(ZipArchiveEntry,InputStream).rawStream",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer).ze",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer).encodable",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer).name",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(ArchiveEntry),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(ArchiveEntry).ae,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Zip64Mode),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Zip64Mode).effectiveMode,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(boolean),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(boolean).phased,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(boolean,boolean).actuallyNeedsZip64",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(boolean,boolean).phased",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(InputStream,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(InputStream,boolean).src",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(InputStream,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(InputStream,boolean).phased",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(File,String)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(File,String).inputFile",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(File,String)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(File,String).entryName",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).inputPath",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).entryName",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).options",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry).ze,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean).ze",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean).name",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean).entryMetaData",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean).needsZip64Extra",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long).ze",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long).name",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long).encodable",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long).phased",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long).archiveOffset",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(ZipArchiveEntry).ze,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(ZipArchiveEntry).ze,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(boolean,boolean).utfFallback",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(boolean,boolean).usesDataDescriptor",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(ZipArchiveEntry).ze,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(ZipArchiveEntry).ze,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode).bytesWritten",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode).crc",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode).effectiveMode",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(ZipArchiveEntry,long,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(ZipArchiveEntry,long,boolean).ze",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(ZipArchiveEntry,long,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(ZipArchiveEntry,long,boolean).lfhOffset",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(ZipArchiveEntry,long,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(ZipArchiveEntry,long,boolean).needsZip64Extra",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(ZipArchiveEntry).ze,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLargeForZip32(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLargeForZip32(ZipArchiveEntry).zipArchiveEntry,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(ZipArchiveEntry,Zip64Mode)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(ZipArchiveEntry,Zip64Mode).entry1",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(ZipArchiveEntry,Zip64Mode)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(ZipArchiveEntry,Zip64Mode).requestedMode",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ZipArchiveEntry).archiveEntry,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ZipArchiveEntry,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ZipArchiveEntry,boolean).archiveEntry",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ZipArchiveEntry,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ZipArchiveEntry,boolean).phased",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(boolean),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(boolean).actuallyNeedsZip64,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setComment(String),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setComment(String).comment,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setCreateUnicodeExtraFields(UnicodeExtraFieldPolicy),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setCreateUnicodeExtraFields(UnicodeExtraFieldPolicy).b,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(ZipArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Charset),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Charset).encoding,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(String),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(String).encoding,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setFallbackToUTF8(boolean),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setFallbackToUTF8(boolean).fallbackToUTF8,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(int),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(int).level,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setMethod(int),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setMethod(int).method,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(boolean),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(boolean).b,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(Zip64Mode),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(Zip64Mode).mode,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode).entry",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode).mode",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(int,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(int,boolean).zipMethod",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(int,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(int,boolean).phased",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Zip64Mode),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Zip64Mode).effectiveMode,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(int,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(int,boolean,boolean).zipMethod",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(int,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(int,boolean,boolean).zip64",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(int,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(int,boolean,boolean).usedDataDescriptor",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtractMethod(int),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtractMethod(int).zipMethod,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(ZipArchiveEntry).ze,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted(byte[]),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted(byte[]).data,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(ZipArchiveEntry).ze,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(ZipArchiveEntry).ze,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(ZipArchiveEntry,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(ZipArchiveEntry,boolean).ze",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(ZipArchiveEntry,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(ZipArchiveEntry,boolean).phased",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(byte[]),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(byte[]).data,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writePreamble(byte[]),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writePreamble(byte[]).preamble,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writePreamble(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writePreamble(byte[],int,int).preamble",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writePreamble(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writePreamble(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writePreamble(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writePreamble(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(File),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(File).file,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(File,long)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(File,long).file",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(File,long)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(File,long).zipSplitSize",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(OutputStream),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(OutputStream).out,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Path,long)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Path,long).path",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Path,long)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Path,long).zipSplitSize",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Path,OpenOption[])","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Path,OpenOption[]).file",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Path,OpenOption[])","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Path,OpenOption[]).options",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(SeekableByteChannel),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(SeekableByteChannel).channel,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(ZipArchiveEntry).entry,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(long,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(long,boolean).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(long,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(long,boolean).usesDataDescriptor",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.<init>(String),org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.<init>(String).name,Has_Parameter
"org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.write(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.write(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.write(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.writeAll(byte[],int,int,long)","org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.writeAll(byte[],int,int,long).b",Has_Parameter
"org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.writeAll(byte[],int,int,long)","org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.writeAll(byte[],int,int,long).off",Has_Parameter
"org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.writeAll(byte[],int,int,long)","org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.writeAll(byte[],int,int,long).len",Has_Parameter
"org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.writeAll(byte[],int,int,long)","org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.writeAll(byte[],int,int,long).position",Has_Parameter
org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.<init>(SeekableByteChannel),org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.<init>(SeekableByteChannel).channel,Has_Parameter
org.apache.commons.compress.archivers.zip.X7875_NewUnix.trimLeadingZeroesForceMinLength(byte[]),org.apache.commons.compress.archivers.zip.X7875_NewUnix.trimLeadingZeroesForceMinLength(byte[]).array,Has_Parameter
org.apache.commons.compress.archivers.zip.X7875_NewUnix.equals(Object),org.apache.commons.compress.archivers.zip.X7875_NewUnix.equals(Object).o,Has_Parameter
"org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromCentralDirectoryData(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromCentralDirectoryData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromCentralDirectoryData(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.archivers.zip.X7875_NewUnix.setGID(long),org.apache.commons.compress.archivers.zip.X7875_NewUnix.setGID(long).l,Has_Parameter
org.apache.commons.compress.archivers.zip.X7875_NewUnix.setUID(long),org.apache.commons.compress.archivers.zip.X7875_NewUnix.setUID(long).l,Has_Parameter
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.addSizes(byte[]),org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.addSizes(byte[]).data,Has_Parameter
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(boolean,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(boolean,boolean,boolean,boolean).hasUncompressedSize",Has_Parameter
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(boolean,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(boolean,boolean,boolean,boolean).hasCompressedSize",Has_Parameter
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(boolean,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(boolean,boolean,boolean,boolean).hasRelativeHeaderOffset",Has_Parameter
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(boolean,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(boolean,boolean,boolean,boolean).hasDiskStart",Has_Parameter
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setCompressedSize(ZipEightByteInteger),org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setCompressedSize(ZipEightByteInteger).compressedSize,Has_Parameter
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setDiskStartNumber(ZipLong),org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setDiskStartNumber(ZipLong).ds,Has_Parameter
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setRelativeHeaderOffset(ZipEightByteInteger),org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setRelativeHeaderOffset(ZipEightByteInteger).rho,Has_Parameter
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setSize(ZipEightByteInteger),org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setSize(ZipEightByteInteger).size,Has_Parameter
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger)","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger).size",Has_Parameter
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger)","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger).compressedSize",Has_Parameter
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger,ZipEightByteInteger,ZipLong)","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger,ZipEightByteInteger,ZipLong).size",Has_Parameter
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger,ZipEightByteInteger,ZipLong)","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger,ZipEightByteInteger,ZipLong).compressedSize",Has_Parameter
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger,ZipEightByteInteger,ZipLong)","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger,ZipEightByteInteger,ZipLong).relativeHeaderOffset",Has_Parameter
"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger,ZipEightByteInteger,ZipLong)","org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger,ZipEightByteInteger,ZipLong).diskStart",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipLong.getBytes(long),org.apache.commons.compress.archivers.zip.ZipLong.getBytes(long).value,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[]),org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[]).bytes,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int)","org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int).bytes",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int)","org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int)","org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int).value",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int)","org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int).buf",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int)","org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int).offset",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipLong.equals(Object),org.apache.commons.compress.archivers.zip.ZipLong.equals(Object).o,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipLong.putLong(byte[],int)","org.apache.commons.compress.archivers.zip.ZipLong.putLong(byte[],int).buf",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipLong.putLong(byte[],int)","org.apache.commons.compress.archivers.zip.ZipLong.putLong(byte[],int).offset",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipLong.<init>(byte[]),org.apache.commons.compress.archivers.zip.ZipLong.<init>(byte[]).bytes,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipLong.<init>(byte[],int)","org.apache.commons.compress.archivers.zip.ZipLong.<init>(byte[],int).bytes",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipLong.<init>(byte[],int)","org.apache.commons.compress.archivers.zip.ZipLong.<init>(byte[],int).offset",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipLong.<init>(int),org.apache.commons.compress.archivers.zip.ZipLong.<init>(int).value,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipLong.<init>(long),org.apache.commons.compress.archivers.zip.ZipLong.<init>(long).value,Has_Parameter
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromCentralDirectoryData(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromCentralDirectoryData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromCentralDirectoryData(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromLocalFileData(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromLocalFileData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromLocalFileData(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int),org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int).alignment,Has_Parameter
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int,boolean)","org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int,boolean).alignment",Has_Parameter
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int,boolean)","org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int,boolean).allowMethodChange",Has_Parameter
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int,boolean,int)","org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int,boolean,int).alignment",Has_Parameter
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int,boolean,int)","org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int,boolean,int).allowMethodChange",Has_Parameter
"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int,boolean,int)","org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int,boolean,int).padding",Has_Parameter
"org.apache.commons.compress.archivers.zip.BinaryTree.decode(InputStream,int)","org.apache.commons.compress.archivers.zip.BinaryTree.decode(InputStream,int).inputStream",Has_Parameter
"org.apache.commons.compress.archivers.zip.BinaryTree.decode(InputStream,int)","org.apache.commons.compress.archivers.zip.BinaryTree.decode(InputStream,int).totalNumberOfValues",Has_Parameter
"org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(int,int,int,int)","org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(int,int,int,int).node",Has_Parameter
"org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(int,int,int,int)","org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(int,int,int,int).path",Has_Parameter
"org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(int,int,int,int)","org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(int,int,int,int).depth",Has_Parameter
"org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(int,int,int,int)","org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(int,int,int,int).value",Has_Parameter
org.apache.commons.compress.archivers.zip.BinaryTree.read(BitStream),org.apache.commons.compress.archivers.zip.BinaryTree.read(BitStream).stream,Has_Parameter
org.apache.commons.compress.archivers.zip.BinaryTree.<init>(int),org.apache.commons.compress.archivers.zip.BinaryTree.<init>(int).depth,Has_Parameter
"org.apache.commons.compress.archivers.zip.JarMarker.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.JarMarker.parseFromCentralDirectoryData(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.JarMarker.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.JarMarker.parseFromCentralDirectoryData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.JarMarker.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.JarMarker.parseFromCentralDirectoryData(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.JarMarker.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.JarMarker.parseFromLocalFileData(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.JarMarker.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.JarMarker.parseFromLocalFileData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.JarMarker.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.JarMarker.parseFromLocalFileData(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.ScatterStatistics.<init>(long,long)","org.apache.commons.compress.archivers.zip.ScatterStatistics.<init>(long,long).compressionElapsed",Has_Parameter
"org.apache.commons.compress.archivers.zip.ScatterStatistics.<init>(long,long)","org.apache.commons.compress.archivers.zip.ScatterStatistics.<init>(long,long).mergingElapsed",Has_Parameter
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.assertDynamicLengthFits(String,int,int,int)","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.assertDynamicLengthFits(String,int,int,int).what",Has_Parameter
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.assertDynamicLengthFits(String,int,int,int)","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.assertDynamicLengthFits(String,int,int,int).dynamicLength",Has_Parameter
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.assertDynamicLengthFits(String,int,int,int)","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.assertDynamicLengthFits(String,int,int,int).prefixLength",Has_Parameter
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.assertDynamicLengthFits(String,int,int,int)","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.assertDynamicLengthFits(String,int,int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(byte[],int,int)","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(byte[],int,int)","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(byte[],int,int)","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(byte[],int,int)","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(byte[],int,int)","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(byte[],int,int)","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromCentralDirectoryData(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromCentralDirectoryData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromCentralDirectoryData(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromLocalFileData(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromLocalFileData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromLocalFileData(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.archivers.zip.X000A_NTFS.dateToZip(Date),org.apache.commons.compress.archivers.zip.X000A_NTFS.dateToZip(Date).d,Has_Parameter
org.apache.commons.compress.archivers.zip.X000A_NTFS.fileTimeToZip(FileTime),org.apache.commons.compress.archivers.zip.X000A_NTFS.fileTimeToZip(FileTime).time,Has_Parameter
org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(ZipEightByteInteger),org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(ZipEightByteInteger).z,Has_Parameter
org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToFileTime(ZipEightByteInteger),org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToFileTime(ZipEightByteInteger).z,Has_Parameter
org.apache.commons.compress.archivers.zip.X000A_NTFS.equals(Object),org.apache.commons.compress.archivers.zip.X000A_NTFS.equals(Object).o,Has_Parameter
"org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromCentralDirectoryData(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromCentralDirectoryData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromCentralDirectoryData(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(byte[],int,int)","org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(byte[],int,int)","org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(byte[],int,int)","org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessFileTime(FileTime),org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessFileTime(FileTime).time,Has_Parameter
org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessJavaTime(Date),org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessJavaTime(Date).d,Has_Parameter
org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessTime(ZipEightByteInteger),org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessTime(ZipEightByteInteger).t,Has_Parameter
org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateFileTime(FileTime),org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateFileTime(FileTime).time,Has_Parameter
org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateJavaTime(Date),org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateJavaTime(Date).d,Has_Parameter
org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateTime(ZipEightByteInteger),org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateTime(ZipEightByteInteger).t,Has_Parameter
org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyFileTime(FileTime),org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyFileTime(FileTime).time,Has_Parameter
org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyJavaTime(Date),org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyJavaTime(Date).d,Has_Parameter
org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyTime(ZipEightByteInteger),org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyTime(ZipEightByteInteger).t,Has_Parameter
"org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.parseFromCentralDirectoryData(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.parseFromCentralDirectoryData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.parseFromCentralDirectoryData(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.calculateDiskPosition(long,long)","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.calculateDiskPosition(long,long).disk",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.calculateDiskPosition(long,long)","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.calculateDiskPosition(long,long).localOffset",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.createNewSplitSegmentFile(Integer),org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.createNewSplitSegmentFile(Integer).zipSplitSegmentSuffixIndex,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.getSplitSegmentFileName(Integer),org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.getSplitSegmentFileName(Integer).zipSplitSegmentSuffixIndex,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.prepareToWriteUnsplittableContent(long),org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.prepareToWriteUnsplittableContent(long).unsplittableContentSize,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(byte[]),org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(byte[]).b,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(int),org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(int).i,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeAll(byte[],int,int,long)","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeAll(byte[],int,int,long).b",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeAll(byte[],int,int,long)","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeAll(byte[],int,int,long).off",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeAll(byte[],int,int,long)","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeAll(byte[],int,int,long).len",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeAll(byte[],int,int,long)","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeAll(byte[],int,int,long).atPosition",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeToSegment(Path,long,byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeToSegment(Path,long,byte[],int,int).segment",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeToSegment(Path,long,byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeToSegment(Path,long,byte[],int,int).position",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeToSegment(Path,long,byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeToSegment(Path,long,byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeToSegment(Path,long,byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeToSegment(Path,long,byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeToSegment(Path,long,byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeToSegment(Path,long,byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.<init>(File,long)","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.<init>(File,long).zipFile",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.<init>(File,long)","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.<init>(File,long).splitSize",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.<init>(Path,long)","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.<init>(Path,long).zipFile",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.<init>(Path,long)","org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.<init>(Path,long).splitSize",Has_Parameter
org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(ZipShort),org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(ZipShort).headerId,Has_Parameter
org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraFieldNoDefault(ZipShort),org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraFieldNoDefault(ZipShort).headerId,Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean)","org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean).ze",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean)","org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean)","org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean).off",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean)","org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean).len",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean)","org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean).local",Has_Parameter
org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(ZipExtraField[]),org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(ZipExtraField[]).data,Has_Parameter
org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(ZipExtraField[]),org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(ZipExtraField[]).data,Has_Parameter
org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[]),org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[]).data,Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean)","org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean)","org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean).local",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,ExtraFieldParsingBehavior)","org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,ExtraFieldParsingBehavior).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,ExtraFieldParsingBehavior)","org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,ExtraFieldParsingBehavior).local",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,ExtraFieldParsingBehavior)","org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,ExtraFieldParsingBehavior).parsingBehavior",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField)","org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField)","org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField).local",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField)","org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField).onUnparseableData",Has_Parameter
org.apache.commons.compress.archivers.zip.ExtraFieldUtils.register(Class),org.apache.commons.compress.archivers.zip.ExtraFieldUtils.register(Class).clazz,Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.onUnparseableExtraField(byte[],int,int,boolean,int)","org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.onUnparseableExtraField(byte[],int,int,boolean,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.onUnparseableExtraField(byte[],int,int,boolean,int)","org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.onUnparseableExtraField(byte[],int,int,boolean,int).off",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.onUnparseableExtraField(byte[],int,int,boolean,int)","org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.onUnparseableExtraField(byte[],int,int,boolean,int).len",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.onUnparseableExtraField(byte[],int,int,boolean,int)","org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.onUnparseableExtraField(byte[],int,int,boolean,int).local",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.onUnparseableExtraField(byte[],int,int,boolean,int)","org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.onUnparseableExtraField(byte[],int,int,boolean,int).claimedLength",Has_Parameter
org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.<init>(int),org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.<init>(int).k,Has_Parameter
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior.onUnparseableExtraField(byte[],int,int,boolean,int)","org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior.onUnparseableExtraField(byte[],int,int,boolean,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior.onUnparseableExtraField(byte[],int,int,boolean,int)","org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior.onUnparseableExtraField(byte[],int,int,boolean,int).off",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior.onUnparseableExtraField(byte[],int,int,boolean,int)","org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior.onUnparseableExtraField(byte[],int,int,boolean,int).len",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior.onUnparseableExtraField(byte[],int,int,boolean,int)","org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior.onUnparseableExtraField(byte[],int,int,boolean,int).local",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior.onUnparseableExtraField(byte[],int,int,boolean,int)","org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior.onUnparseableExtraField(byte[],int,int,boolean,int).claimedLength",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromCentralDirectoryData(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromCentralDirectoryData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromCentralDirectoryData(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromLocalFileData(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromLocalFileData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromLocalFileData(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setCentralDirectoryData(byte[]),org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setCentralDirectoryData(byte[]).data,Has_Parameter
org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setHeaderId(ZipShort),org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setHeaderId(ZipShort).headerId,Has_Parameter
org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setLocalFileDataData(byte[]),org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setLocalFileDataData(byte[]).data,Has_Parameter
"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.write(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.write(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.write(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.writeAll(byte[],int,int,long)","org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.writeAll(byte[],int,int,long).b",Has_Parameter
"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.writeAll(byte[],int,int,long)","org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.writeAll(byte[],int,int,long).off",Has_Parameter
"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.writeAll(byte[],int,int,long)","org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.writeAll(byte[],int,int,long).len",Has_Parameter
"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.writeAll(byte[],int,int,long)","org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.writeAll(byte[],int,int,long).pos",Has_Parameter
org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.<init>(FileChannel),org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.<init>(FileChannel).channel,Has_Parameter
org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.<init>(Path),org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.<init>(Path).file,Has_Parameter
"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.<init>(Path,OpenOption[])","org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.<init>(Path,OpenOption[]).file",Has_Parameter
"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.<init>(Path,OpenOption[])","org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.<init>(Path,OpenOption[]).options",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate.test(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate.test(ZipArchiveEntry).zipArchiveEntry,Has_Parameter
"org.apache.commons.compress.archivers.zip.ExplodingInputStream.<init>(int,int,InputStream)","org.apache.commons.compress.archivers.zip.ExplodingInputStream.<init>(int,int,InputStream).dictionarySize",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExplodingInputStream.<init>(int,int,InputStream)","org.apache.commons.compress.archivers.zip.ExplodingInputStream.<init>(int,int,InputStream).numberOfTrees",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExplodingInputStream.<init>(int,int,InputStream)","org.apache.commons.compress.archivers.zip.ExplodingInputStream.<init>(int,int,InputStream).in",Has_Parameter
"org.apache.commons.compress.archivers.zip.CircularBuffer.copy(int,int)","org.apache.commons.compress.archivers.zip.CircularBuffer.copy(int,int).distance",Has_Parameter
"org.apache.commons.compress.archivers.zip.CircularBuffer.copy(int,int)","org.apache.commons.compress.archivers.zip.CircularBuffer.copy(int,int).length",Has_Parameter
org.apache.commons.compress.archivers.zip.CircularBuffer.put(int),org.apache.commons.compress.archivers.zip.CircularBuffer.put(int).value,Has_Parameter
org.apache.commons.compress.archivers.zip.CircularBuffer.<init>(int),org.apache.commons.compress.archivers.zip.CircularBuffer.<init>(int).size,Has_Parameter
"org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(int,byte)","org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(int,byte).previousCode",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(int,byte)","org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(int,byte).character",Has_Parameter
org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.<init>(InputStream),org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.<init>(InputStream).inputStream,Has_Parameter
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.dateToZipLong(Date),org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.dateToZipLong(Date).d,Has_Parameter
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.fileTimeToZipLong(FileTime),org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.fileTimeToZipLong(FileTime).time,Has_Parameter
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.unixTimeToFileTime(ZipLong),org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.unixTimeToFileTime(ZipLong).unixTime,Has_Parameter
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.unixTimeToZipLong(long),org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.unixTimeToZipLong(long).unixTime,Has_Parameter
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.zipLongToDate(ZipLong),org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.zipLongToDate(ZipLong).unixTime,Has_Parameter
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.equals(Object),org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.equals(Object).o,Has_Parameter
"org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromCentralDirectoryData(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromCentralDirectoryData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromCentralDirectoryData(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessFileTime(FileTime),org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessFileTime(FileTime).time,Has_Parameter
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessJavaTime(Date),org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessJavaTime(Date).d,Has_Parameter
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessTime(ZipLong),org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessTime(ZipLong).l,Has_Parameter
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateFileTime(FileTime),org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateFileTime(FileTime).time,Has_Parameter
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateJavaTime(Date),org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateJavaTime(Date).d,Has_Parameter
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateTime(ZipLong),org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateTime(ZipLong).l,Has_Parameter
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(byte),org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(byte).flags,Has_Parameter
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyFileTime(FileTime),org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyFileTime(FileTime).time,Has_Parameter
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyJavaTime(Date),org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyJavaTime(Date).d,Has_Parameter
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyTime(ZipLong),org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyTime(ZipLong).l,Has_Parameter
"org.apache.commons.compress.archivers.zip.PKWareExtraHeader.assertMinimalLength(int,int)","org.apache.commons.compress.archivers.zip.PKWareExtraHeader.assertMinimalLength(int,int).minimum",Has_Parameter
"org.apache.commons.compress.archivers.zip.PKWareExtraHeader.assertMinimalLength(int,int)","org.apache.commons.compress.archivers.zip.PKWareExtraHeader.assertMinimalLength(int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromCentralDirectoryData(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromCentralDirectoryData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromCentralDirectoryData(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromLocalFileData(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromLocalFileData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromLocalFileData(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setCentralDirectoryData(byte[]),org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setCentralDirectoryData(byte[]).data,Has_Parameter
org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setLocalFileDataData(byte[]),org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setLocalFileDataData(byte[]).data,Has_Parameter
org.apache.commons.compress.archivers.zip.PKWareExtraHeader.<init>(ZipShort),org.apache.commons.compress.archivers.zip.PKWareExtraHeader.<init>(ZipShort).headerId,Has_Parameter
org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode(int),org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode(int).code,Has_Parameter
org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode(int),org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode(int).code,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(ZipFile),org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(ZipFile).zipFile,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.newReadByteChannel(Path),org.apache.commons.compress.archivers.zip.ZipFile.newReadByteChannel(Path).path,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.openZipChannel(Path,long,OpenOption[])","org.apache.commons.compress.archivers.zip.ZipFile.openZipChannel(Path,long,OpenOption[]).path",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.openZipChannel(Path,long,OpenOption[])","org.apache.commons.compress.archivers.zip.ZipFile.openZipChannel(Path,long,OpenOption[]).maxNumberOfDisks",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.openZipChannel(Path,long,OpenOption[])","org.apache.commons.compress.archivers.zip.ZipFile.openZipChannel(Path,long,OpenOption[]).openOptions",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.positionAtEndOfCentralDirectoryRecord(SeekableByteChannel),org.apache.commons.compress.archivers.zip.ZipFile.positionAtEndOfCentralDirectoryRecord(SeekableByteChannel).channel,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.toPlatform(int),org.apache.commons.compress.archivers.zip.ZipFile.toPlatform(int).versionMadeBy,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(SeekableByteChannel,long,long,byte[])","org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(SeekableByteChannel,long,long,byte[]).channel",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(SeekableByteChannel,long,long,byte[])","org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(SeekableByteChannel,long,long,byte[]).minDistanceFromEnd",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(SeekableByteChannel,long,long,byte[])","org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(SeekableByteChannel,long,long,byte[]).maxDistanceFromEnd",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(SeekableByteChannel,long,long,byte[])","org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(SeekableByteChannel,long,long,byte[]).sig",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.canReadEntryData(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipFile.canReadEntryData(ZipArchiveEntry).entry,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.copyRawEntries(ZipArchiveOutputStream,ZipArchiveEntryPredicate)","org.apache.commons.compress.archivers.zip.ZipFile.copyRawEntries(ZipArchiveOutputStream,ZipArchiveEntryPredicate).target",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.copyRawEntries(ZipArchiveOutputStream,ZipArchiveEntryPredicate)","org.apache.commons.compress.archivers.zip.ZipFile.copyRawEntries(ZipArchiveOutputStream,ZipArchiveEntryPredicate).predicate",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.createBoundedInputStream(long,long)","org.apache.commons.compress.archivers.zip.ZipFile.createBoundedInputStream(long,long).start",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.createBoundedInputStream(long,long)","org.apache.commons.compress.archivers.zip.ZipFile.createBoundedInputStream(long,long).remaining",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.getDataOffset(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipFile.getDataOffset(ZipArchiveEntry).ze,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.getEntries(String),org.apache.commons.compress.archivers.zip.ZipFile.getEntries(String).name,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(String),org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(String).name,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.getEntry(String),org.apache.commons.compress.archivers.zip.ZipFile.getEntry(String).name,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(ZipArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.getRawInputStream(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipFile.getRawInputStream(ZipArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map),org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map).noUTF8Flag,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map),org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map).entriesWithoutUTF8Flag,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.sanityCheckLFHOffset(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipFile.sanityCheckLFHOffset(ZipArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.setDataOffset(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipFile.setDataOffset(ZipArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(ZipArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(int),org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(int).count,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.sortByOffset(ZipArchiveEntry[]),org.apache.commons.compress.archivers.zip.ZipFile.sortByOffset(ZipArchiveEntry[]).allEntries,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.<init>(File),org.apache.commons.compress.archivers.zip.ZipFile.<init>(File).file,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String).file",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String).encoding",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean).file",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean).encoding",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean).useUnicodeExtraFields",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean,boolean).file",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean,boolean).encoding",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean,boolean).useUnicodeExtraFields",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean,boolean).ignoreLocalFileHeader",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path),org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path).path,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String).path",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String).encoding",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean).path",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean).encoding",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean).useUnicodeExtraFields",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean,boolean).path",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean,boolean).encoding",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean,boolean).useUnicodeExtraFields",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean,boolean).ignoreLocalFileHeader",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel),org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel).channel,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String).channel",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String).encoding",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,Charset,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,Charset,boolean,boolean,boolean).channel",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,Charset,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,Charset,boolean,boolean,boolean).channelDescription",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,Charset,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,Charset,boolean,boolean,boolean).encoding",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,Charset,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,Charset,boolean,boolean,boolean).useUnicodeExtraFields",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,Charset,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,Charset,boolean,boolean,boolean).closeOnError",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,Charset,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,Charset,boolean,boolean,boolean).ignoreLocalFileHeader",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean).channel",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean).channelDescription",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean).encoding",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean).useUnicodeExtraFields",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean).channel",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean).channelDescription",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean).encoding",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean).useUnicodeExtraFields",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean).ignoreLocalFileHeader",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean,boolean).channel",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean,boolean).channelDescription",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean,boolean).encoding",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean,boolean).useUnicodeExtraFields",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean,boolean).closeOnError",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean,boolean).ignoreLocalFileHeader",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile.<init>(String),org.apache.commons.compress.archivers.zip.ZipFile.<init>(String).name,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(String,String)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(String,String).name",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile.<init>(String,String)","org.apache.commons.compress.archivers.zip.ZipFile.<init>(String,String).encoding",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream.read(long,ByteBuffer)","org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream.read(long,ByteBuffer).pos",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream.read(long,ByteBuffer)","org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream.read(long,ByteBuffer).buf",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream.<init>(long,long,FileChannel)","org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream.<init>(long,long,FileChannel).start",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream.<init>(long,long,FileChannel)","org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream.<init>(long,long,FileChannel).remaining",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream.<init>(long,long,FileChannel)","org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream.<init>(long,long,FileChannel).archive",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile$Builder.setIgnoreLocalFileHeader(boolean),org.apache.commons.compress.archivers.zip.ZipFile$Builder.setIgnoreLocalFileHeader(boolean).ignoreLocalFileHeader,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile$Builder.setMaxNumberOfDisks(long),org.apache.commons.compress.archivers.zip.ZipFile$Builder.setMaxNumberOfDisks(long).maxNumberOfDisks,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile$Builder.setSeekableByteChannel(SeekableByteChannel),org.apache.commons.compress.archivers.zip.ZipFile$Builder.setSeekableByteChannel(SeekableByteChannel).seekableByteChannel,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile$Builder.setUseUnicodeExtraFields(boolean),org.apache.commons.compress.archivers.zip.ZipFile$Builder.setUseUnicodeExtraFields(boolean).useUnicodeExtraFields,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile$Entry.equals(Object),org.apache.commons.compress.archivers.zip.ZipFile$Entry.equals(Object).other,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment.<init>(byte[],byte[])","org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment.<init>(byte[],byte[]).name",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment.<init>(byte[],byte[])","org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment.<init>(byte[],byte[]).comment",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipFile$StoredStatisticsStream.<init>(InputStream),org.apache.commons.compress.archivers.zip.ZipFile$StoredStatisticsStream.<init>(InputStream).in,Has_Parameter
"org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(byte[],int)","org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(byte[],int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(byte[],int)","org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(byte[],int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(byte[],int)","org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(byte[],int).buf",Has_Parameter
"org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(byte[],int)","org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(byte[],int).offset",Has_Parameter
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.equals(Object),org.apache.commons.compress.archivers.zip.GeneralPurposeBit.equals(Object).o,Has_Parameter
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useDataDescriptor(boolean),org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useDataDescriptor(boolean).b,Has_Parameter
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useEncryption(boolean),org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useEncryption(boolean).b,Has_Parameter
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useStrongEncryption(boolean),org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useStrongEncryption(boolean).b,Has_Parameter
org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useUTF8ForNames(boolean),org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useUTF8ForNames(boolean).b,Has_Parameter
"org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.parseFromCentralDirectoryData(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.parseFromCentralDirectoryData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.parseFromCentralDirectoryData(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipShort.getBytes(int),org.apache.commons.compress.archivers.zip.ZipShort.getBytes(int).value,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[]),org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[]).bytes,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int)","org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int).bytes",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int)","org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int)","org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int).value",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int)","org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int).buf",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int)","org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int).offset",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipShort.equals(Object),org.apache.commons.compress.archivers.zip.ZipShort.equals(Object).o,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipShort.<init>(byte[]),org.apache.commons.compress.archivers.zip.ZipShort.<init>(byte[]).bytes,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipShort.<init>(byte[],int)","org.apache.commons.compress.archivers.zip.ZipShort.<init>(byte[],int).bytes",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipShort.<init>(byte[],int)","org.apache.commons.compress.archivers.zip.ZipShort.<init>(byte[],int).offset",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipShort.<init>(int),org.apache.commons.compress.archivers.zip.ZipShort.<init>(int).value,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromCentralDirectoryData(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromCentralDirectoryData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromCentralDirectoryData(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromLocalFileData(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromLocalFileData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromLocalFileData(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipIoUtil.writeAll(FileChannel,ByteBuffer,long)","org.apache.commons.compress.archivers.zip.ZipIoUtil.writeAll(FileChannel,ByteBuffer,long).channel",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipIoUtil.writeAll(FileChannel,ByteBuffer,long)","org.apache.commons.compress.archivers.zip.ZipIoUtil.writeAll(FileChannel,ByteBuffer,long).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipIoUtil.writeAll(FileChannel,ByteBuffer,long)","org.apache.commons.compress.archivers.zip.ZipIoUtil.writeAll(FileChannel,ByteBuffer,long).position",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipIoUtil.writeAll(WritableByteChannel,ByteBuffer)","org.apache.commons.compress.archivers.zip.ZipIoUtil.writeAll(WritableByteChannel,ByteBuffer).channel",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipIoUtil.writeAll(WritableByteChannel,ByteBuffer)","org.apache.commons.compress.archivers.zip.ZipIoUtil.writeAll(WritableByteChannel,ByteBuffer).buffer",Has_Parameter
org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.write(int),org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.write(int).b,Has_Parameter
"org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],int,int,long)","org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],int,int,long).bytes",Has_Parameter
"org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],int,int,long)","org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],int,int,long).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],int,int,long)","org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],int,int,long).len",Has_Parameter
"org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],int,int,long)","org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],int,int,long).position",Has_Parameter
"org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],long)","org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],long).bytes",Has_Parameter
"org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],long)","org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],long).position",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[])","org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[]).name",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[])","org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[]).bytes",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[],int,int)","org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[],int,int).text",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[],int,int)","org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[],int,int).bytes",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[],int,int)","org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[],int,int)","org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[],int,int).len",Has_Parameter
org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior.createExtraField(ZipShort),org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior.createExtraField(ZipShort).headerId,Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior.fill(ZipExtraField,byte[],int,int,boolean)","org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior.fill(ZipExtraField,byte[],int,int,boolean).field",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior.fill(ZipExtraField,byte[],int,int,boolean)","org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior.fill(ZipExtraField,byte[],int,int,boolean).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior.fill(ZipExtraField,byte[],int,int,boolean)","org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior.fill(ZipExtraField,byte[],int,int,boolean).off",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior.fill(ZipExtraField,byte[],int,int,boolean)","org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior.fill(ZipExtraField,byte[],int,int,boolean).len",Has_Parameter
"org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior.fill(ZipExtraField,byte[],int,int,boolean)","org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior.fill(ZipExtraField,byte[],int,int,boolean).local",Has_Parameter
"org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeFully(CharsetEncoder,CharBuffer,ByteBuffer)","org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeFully(CharsetEncoder,CharBuffer,ByteBuffer).enc",Has_Parameter
"org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeFully(CharsetEncoder,CharBuffer,ByteBuffer)","org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeFully(CharsetEncoder,CharBuffer,ByteBuffer).cb",Has_Parameter
"org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeFully(CharsetEncoder,CharBuffer,ByteBuffer)","org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeFully(CharsetEncoder,CharBuffer,ByteBuffer).out",Has_Parameter
"org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeSurrogate(CharBuffer,char)","org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeSurrogate(CharBuffer,char).cb",Has_Parameter
"org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeSurrogate(CharBuffer,char)","org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeSurrogate(CharBuffer,char).c",Has_Parameter
"org.apache.commons.compress.archivers.zip.NioZipEncoding.estimateIncrementalEncodingSize(CharsetEncoder,int)","org.apache.commons.compress.archivers.zip.NioZipEncoding.estimateIncrementalEncodingSize(CharsetEncoder,int).enc",Has_Parameter
"org.apache.commons.compress.archivers.zip.NioZipEncoding.estimateIncrementalEncodingSize(CharsetEncoder,int)","org.apache.commons.compress.archivers.zip.NioZipEncoding.estimateIncrementalEncodingSize(CharsetEncoder,int).charCount",Has_Parameter
"org.apache.commons.compress.archivers.zip.NioZipEncoding.estimateInitialBufferSize(CharsetEncoder,int)","org.apache.commons.compress.archivers.zip.NioZipEncoding.estimateInitialBufferSize(CharsetEncoder,int).enc",Has_Parameter
"org.apache.commons.compress.archivers.zip.NioZipEncoding.estimateInitialBufferSize(CharsetEncoder,int)","org.apache.commons.compress.archivers.zip.NioZipEncoding.estimateInitialBufferSize(CharsetEncoder,int).charChount",Has_Parameter
org.apache.commons.compress.archivers.zip.NioZipEncoding.canEncode(String),org.apache.commons.compress.archivers.zip.NioZipEncoding.canEncode(String).name,Has_Parameter
org.apache.commons.compress.archivers.zip.NioZipEncoding.decode(byte[]),org.apache.commons.compress.archivers.zip.NioZipEncoding.decode(byte[]).data,Has_Parameter
org.apache.commons.compress.archivers.zip.NioZipEncoding.encode(String),org.apache.commons.compress.archivers.zip.NioZipEncoding.encode(String).name,Has_Parameter
"org.apache.commons.compress.archivers.zip.NioZipEncoding.<init>(Charset,boolean)","org.apache.commons.compress.archivers.zip.NioZipEncoding.<init>(Charset,boolean).charset",Has_Parameter
"org.apache.commons.compress.archivers.zip.NioZipEncoding.<init>(Charset,boolean)","org.apache.commons.compress.archivers.zip.NioZipEncoding.<init>(Charset,boolean).useReplacement",Has_Parameter
"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntry,InputStreamSupplier)","org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntry,InputStreamSupplier).zipArchiveEntry",Has_Parameter
"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntry,InputStreamSupplier)","org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntry,InputStreamSupplier).source",Has_Parameter
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntryRequestSupplier),org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntryRequestSupplier).zipArchiveEntryRequestSupplier,Has_Parameter
"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntry,InputStreamSupplier)","org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntry,InputStreamSupplier).zipArchiveEntry",Has_Parameter
"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntry,InputStreamSupplier)","org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntry,InputStreamSupplier).source",Has_Parameter
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntryRequestSupplier),org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntryRequestSupplier).zipArchiveEntryRequestSupplier,Has_Parameter
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createDeferred(ScatterGatherBackingStoreSupplier),org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createDeferred(ScatterGatherBackingStoreSupplier).scatterGatherBackingStoreSupplier,Has_Parameter
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submit(Callable),org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submit(Callable).callable,Has_Parameter
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submitStreamAwareCallable(Callable),org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submitStreamAwareCallable(Callable).callable,Has_Parameter
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(ZipArchiveOutputStream),org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(ZipArchiveOutputStream).targetStream,Has_Parameter
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService),org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService).executorService,Has_Parameter
"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService,ScatterGatherBackingStoreSupplier)","org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService,ScatterGatherBackingStoreSupplier).executorService",Has_Parameter
"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService,ScatterGatherBackingStoreSupplier)","org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService,ScatterGatherBackingStoreSupplier).backingStoreSupplier",Has_Parameter
"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService,ScatterGatherBackingStoreSupplier,int)","org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService,ScatterGatherBackingStoreSupplier,int).executorService",Has_Parameter
"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService,ScatterGatherBackingStoreSupplier,int)","org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService,ScatterGatherBackingStoreSupplier,int).backingStoreSupplier",Has_Parameter
"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService,ScatterGatherBackingStoreSupplier,int)","org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService,ScatterGatherBackingStoreSupplier,int).compressionLevel",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.canConvertToInfoZipExtendedTimestamp(FileTime,FileTime,FileTime)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.canConvertToInfoZipExtendedTimestamp(FileTime,FileTime,FileTime).lastModifiedTime",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.canConvertToInfoZipExtendedTimestamp(FileTime,FileTime,FileTime)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.canConvertToInfoZipExtendedTimestamp(FileTime,FileTime,FileTime).lastAccessTime",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.canConvertToInfoZipExtendedTimestamp(FileTime,FileTime,FileTime)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.canConvertToInfoZipExtendedTimestamp(FileTime,FileTime,FileTime).creationTime",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectoryEntryName(String),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectoryEntryName(String).entryName,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toDirectoryEntryName(String),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toDirectoryEntryName(String).entryName,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(File,String)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(File,String).inputFile",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(File,String)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(File,String).entryName",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(Path,String,LinkOption[])","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(Path,String,LinkOption[]).inputPath",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(Path,String,LinkOption[])","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(Path,String,LinkOption[]).entryName",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(Path,String,LinkOption[])","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(Path,String,LinkOption[]).options",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addAsFirstExtraField(ZipExtraField),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addAsFirstExtraField(ZipExtraField).ze,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(ZipExtraField),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(ZipExtraField).ze,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addInfoZipExtendedTimestamp(FileTime,FileTime,FileTime)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addInfoZipExtendedTimestamp(FileTime,FileTime,FileTime).lastModifiedTime",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addInfoZipExtendedTimestamp(FileTime,FileTime,FileTime)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addInfoZipExtendedTimestamp(FileTime,FileTime,FileTime).lastAccessTime",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addInfoZipExtendedTimestamp(FileTime,FileTime,FileTime)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addInfoZipExtendedTimestamp(FileTime,FileTime,FileTime).creationTime",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addNTFSTimestamp(FileTime,FileTime,FileTime)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addNTFSTimestamp(FileTime,FileTime,FileTime).lastModifiedTime",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addNTFSTimestamp(FileTime,FileTime,FileTime)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addNTFSTimestamp(FileTime,FileTime,FileTime).lastAccessTime",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addNTFSTimestamp(FileTime,FileTime,FileTime)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addNTFSTimestamp(FileTime,FileTime,FileTime).creationTime",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(ZipExtraField[],int)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(ZipExtraField[],int).src",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(ZipExtraField[],int)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(ZipExtraField[],int).length",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(Object),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(Object).obj,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.findMatching(ZipShort,List)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.findMatching(ZipShort,List).headerId",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.findMatching(ZipShort,List)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.findMatching(ZipShort,List).fs",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.findUnparseable(List),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.findUnparseable(List).fs,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(ZipShort),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(ZipShort).type,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(boolean),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(boolean).includeUnparseable,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(ExtraFieldParsingBehavior),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(ExtraFieldParsingBehavior).parsingBehavior,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAddExtraField(ZipExtraField),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAddExtraField(ZipExtraField).ze,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalRemoveExtraField(ZipShort),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalRemoveExtraField(ZipShort).type,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalSetLastModifiedTime(FileTime),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalSetLastModifiedTime(FileTime).time,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(ZipExtraField[],boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(ZipExtraField[],boolean).f",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(ZipExtraField[],boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(ZipExtraField[],boolean).local",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior).local",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior).parsingBehavior",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(ZipShort),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(ZipShort).type,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setAlignment(int),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setAlignment(int).alignment,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setAttributes(Path,LinkOption[])","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setAttributes(Path,LinkOption[]).inputPath",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setAttributes(Path,LinkOption[])","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setAttributes(Path,LinkOption[]).options",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCentralDirectoryExtra(byte[]),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCentralDirectoryExtra(byte[]).b,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCommentSource(CommentSource),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCommentSource(CommentSource).commentSource,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCreationTime(FileTime),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCreationTime(FileTime).time,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setDataOffset(long),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setDataOffset(long).dataOffset,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setDiskNumberStart(long),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setDiskNumberStart(long).diskNumberStart,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExternalAttributes(long),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExternalAttributes(long).value,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(byte[]),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(byte[]).extra,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(ZipExtraField[]),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(ZipExtraField[]).fields,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setGeneralPurposeBit(GeneralPurposeBit),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setGeneralPurposeBit(GeneralPurposeBit).generalPurposeBit,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setInternalAttributes(int),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setInternalAttributes(int).internalAttributes,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setLastAccessTime(FileTime),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setLastAccessTime(FileTime).fileTime,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setLastModifiedTime(FileTime),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setLastModifiedTime(FileTime).fileTime,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setLocalHeaderOffset(long),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setLocalHeaderOffset(long).localHeaderOffset,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(int),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(int).method,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String).name,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String,byte[])","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String,byte[]).name",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String,byte[])","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String,byte[]).rawName",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setNameSource(NameSource),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setNameSource(NameSource).nameSource,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setPlatform(int),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setPlatform(int).platform,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setRawFlag(int),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setRawFlag(int).rawFlag,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(long),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(long).size,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setStreamContiguous(boolean),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setStreamContiguous(boolean).isStreamContiguous,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setTime(FileTime),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setTime(FileTime).fileTime,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setTime(long),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setTime(long).timeEpochMillis,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setUnixMode(int),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setUnixMode(int).mode,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionMadeBy(int),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionMadeBy(int).versionMadeBy,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionRequired(int),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionRequired(int).versionRequired,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(File,String)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(File,String).inputFile",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(File,String)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(File,String).entryName",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,File,String)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,File,String).extraFieldFactory",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,File,String)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,File,String).inputFile",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,File,String)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,File,String).entryName",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,Path,String,LinkOption[])","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,Path,String,LinkOption[]).extraFieldFactory",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,Path,String,LinkOption[])","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,Path,String,LinkOption[]).inputPath",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,Path,String,LinkOption[])","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,Path,String,LinkOption[]).entryName",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,Path,String,LinkOption[])","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,Path,String,LinkOption[]).options",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,String)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,String).extraFieldFactory",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,String)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,String).name",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,ZipEntry)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,ZipEntry).extraFieldFactory",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,ZipEntry)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,ZipEntry).entry",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Path,String,LinkOption[])","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Path,String,LinkOption[]).inputPath",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Path,String,LinkOption[])","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Path,String,LinkOption[]).entryName",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Path,String,LinkOption[])","org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Path,String,LinkOption[]).options",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(String),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(String).name,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(ZipArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(ZipEntry),org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(ZipEntry).entry,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fillAndMakeUnrecognizedOnError(ZipExtraField,byte[],int,int,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fillAndMakeUnrecognizedOnError(ZipExtraField,byte[],int,int,boolean).field",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fillAndMakeUnrecognizedOnError(ZipExtraField,byte[],int,int,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fillAndMakeUnrecognizedOnError(ZipExtraField,byte[],int,int,boolean).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fillAndMakeUnrecognizedOnError(ZipExtraField,byte[],int,int,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fillAndMakeUnrecognizedOnError(ZipExtraField,byte[],int,int,boolean).off",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fillAndMakeUnrecognizedOnError(ZipExtraField,byte[],int,int,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fillAndMakeUnrecognizedOnError(ZipExtraField,byte[],int,int,boolean).len",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fillAndMakeUnrecognizedOnError(ZipExtraField,byte[],int,int,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fillAndMakeUnrecognizedOnError(ZipExtraField,byte[],int,int,boolean).local",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.createExtraField(ZipShort),org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.createExtraField(ZipShort).headerId,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fill(ZipExtraField,byte[],int,int,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fill(ZipExtraField,byte[],int,int,boolean).field",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fill(ZipExtraField,byte[],int,int,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fill(ZipExtraField,byte[],int,int,boolean).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fill(ZipExtraField,byte[],int,int,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fill(ZipExtraField,byte[],int,int,boolean).off",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fill(ZipExtraField,byte[],int,int,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fill(ZipExtraField,byte[],int,int,boolean).len",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fill(ZipExtraField,byte[],int,int,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fill(ZipExtraField,byte[],int,int,boolean).local",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.onUnparseableExtraField(byte[],int,int,boolean,int)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.onUnparseableExtraField(byte[],int,int,boolean,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.onUnparseableExtraField(byte[],int,int,boolean,int)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.onUnparseableExtraField(byte[],int,int,boolean,int).off",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.onUnparseableExtraField(byte[],int,int,boolean,int)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.onUnparseableExtraField(byte[],int,int,boolean,int).len",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.onUnparseableExtraField(byte[],int,int,boolean,int)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.onUnparseableExtraField(byte[],int,int,boolean,int).local",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.onUnparseableExtraField(byte[],int,int,boolean,int)","org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.onUnparseableExtraField(byte[],int,int,boolean,int).claimedLength",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipEncoding.canEncode(String),org.apache.commons.compress.archivers.zip.ZipEncoding.canEncode(String).name,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipEncoding.decode(byte[]),org.apache.commons.compress.archivers.zip.ZipEncoding.decode(byte[]).data,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipEncoding.encode(String),org.apache.commons.compress.archivers.zip.ZipEncoding.encode(String).name,Has_Parameter
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(Feature),org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(Feature).reason,Has_Parameter
"org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(Feature,ZipArchiveEntry)","org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(Feature,ZipArchiveEntry).reason",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(Feature,ZipArchiveEntry)","org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(Feature,ZipArchiveEntry).entry",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(ZipMethod,ZipArchiveEntry)","org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(ZipMethod,ZipArchiveEntry).method",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(ZipMethod,ZipArchiveEntry)","org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(ZipMethod,ZipArchiveEntry).entry",Has_Parameter
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature.<init>(String),org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature.<init>(String).name,Has_Parameter
"org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[])","org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[]).comment",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[])","org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[]).bytes",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[],int,int)","org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[],int,int).text",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[],int,int)","org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[],int,int).bytes",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[],int,int)","org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[],int,int)","org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[],int,int).len",Has_Parameter
org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier.<init>(Path),org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier.<init>(Path).dir,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(int),org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(int).code,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipMethod.isZstd(int),org.apache.commons.compress.archivers.zip.ZipMethod.isZstd(int).method,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.checkSig(byte[],byte[])","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.checkSig(byte[],byte[]).expected",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.checkSig(byte[],byte[])","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.checkSig(byte[],byte[]).signature",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byte[],int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byte[],int).signature",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byte[],int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byte[],int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(ByteArrayOutputStream,int,int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(ByteArrayOutputStream,int,int,int).bos",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(ByteArrayOutputStream,int,int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(ByteArrayOutputStream,int,int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(ByteArrayOutputStream,int,int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(ByteArrayOutputStream,int,int,int).lastRead",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(ByteArrayOutputStream,int,int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(ByteArrayOutputStream,int,int,int).expectedDDLen",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(ByteArrayOutputStream,int,int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(ByteArrayOutputStream,int,int,int).bos",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(ByteArrayOutputStream,int,int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(ByteArrayOutputStream,int,int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(ByteArrayOutputStream,int,int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(ByteArrayOutputStream,int,int,int).lastRead",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(ByteArrayOutputStream,int,int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(ByteArrayOutputStream,int,int,int).expectedDDLen",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.canReadEntryData(ArchiveEntry),org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.canReadEntryData(ArchiveEntry).ae,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isApkSigningBlock(byte[]),org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isApkSigningBlock(byte[]).suspectLocalFileHeader,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(int),org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(int).b,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(ZipLong,ZipLong)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(ZipLong,ZipLong).size",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(ZipLong,ZipLong)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(ZipLong,ZipLong).cSize",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(byte[],int,int).buf",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(byte[]),org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(byte[]).b,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(byte[],int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(byte[],int).b",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(byte[],int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(byte[],int).off",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readRange(int),org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readRange(int).len,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(long),org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(long).value,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.setExtraFieldSupport(Function),org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.setExtraFieldSupport(Function).extraFieldSupport,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(long),org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(long).value,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsCompressedSizeFor(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsCompressedSizeFor(ZipArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsDataDescriptorFor(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsDataDescriptorFor(ZipArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream),org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream).inputStream,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String).inputStream",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String).encoding",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean).inputStream",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean).encoding",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean).useUnicodeExtraFields",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean).inputStream",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean).encoding",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean).useUnicodeExtraFields",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean).allowStoredEntriesWithDataDescriptor",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean,boolean).inputStream",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean,boolean).encoding",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean,boolean).useUnicodeExtraFields",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean,boolean).allowStoredEntriesWithDataDescriptor",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean,boolean)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean,boolean).skipSplitSig",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.read(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.readCount(int),org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.readCount(int).bytesRead,Has_Parameter
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File),org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File).file,Has_Parameter
"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File,int)","org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File,int).file",Has_Parameter
"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File,int)","org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File,int).compressionLevel",Has_Parameter
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(Path),org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(Path).path,Has_Parameter
"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(Path,int)","org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(Path,int).path",Has_Parameter
"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(Path,int)","org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(Path,int).compressionLevel",Has_Parameter
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(ZipArchiveEntryRequest),org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(ZipArchiveEntryRequest).zipArchiveEntryRequest,Has_Parameter
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(ZipArchiveOutputStream),org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(ZipArchiveOutputStream).target,Has_Parameter
"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.<init>(ScatterGatherBackingStore,StreamCompressor)","org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.<init>(ScatterGatherBackingStore,StreamCompressor).backingStore",Has_Parameter
"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.<init>(ScatterGatherBackingStore,StreamCompressor)","org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.<init>(ScatterGatherBackingStore,StreamCompressor).streamCompressor",Has_Parameter
"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry.<init>(ZipArchiveEntryRequest,long,long,long)","org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry.<init>(ZipArchiveEntryRequest,long,long,long).zipArchiveEntryRequest",Has_Parameter
"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry.<init>(ZipArchiveEntryRequest,long,long,long)","org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry.<init>(ZipArchiveEntryRequest,long,long,long).crc",Has_Parameter
"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry.<init>(ZipArchiveEntryRequest,long,long,long)","org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry.<init>(ZipArchiveEntryRequest,long,long,long).compressedSize",Has_Parameter
"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry.<init>(ZipArchiveEntryRequest,long,long,long)","org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry.<init>(ZipArchiveEntryRequest,long,long,long).size",Has_Parameter
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$ZipEntryWriter.writeNextZipEntry(ZipArchiveOutputStream),org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$ZipEntryWriter.writeNextZipEntry(ZipArchiveOutputStream).target,Has_Parameter
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$ZipEntryWriter.<init>(ScatterZipOutputStream),org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$ZipEntryWriter.<init>(ScatterZipOutputStream).scatter,Has_Parameter
org.apache.commons.compress.archivers.zip.Zip64RequiredException.getEntryTooBigMessage(ZipArchiveEntry),org.apache.commons.compress.archivers.zip.Zip64RequiredException.getEntryTooBigMessage(ZipArchiveEntry).ze,Has_Parameter
org.apache.commons.compress.archivers.zip.Zip64RequiredException.<init>(String),org.apache.commons.compress.archivers.zip.Zip64RequiredException.<init>(String).reason,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(BigInteger),org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(BigInteger).value,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(long),org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(long).value,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[]),org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[]).bytes,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[],int)","org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[],int).bytes",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[],int)","org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[],int).offset",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[]),org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[]).bytes,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[],int)","org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[],int).bytes",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[],int)","org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[],int).offset",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.toUnsignedBigInteger(long),org.apache.commons.compress.archivers.zip.ZipEightByteInteger.toUnsignedBigInteger(long).value,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.equals(Object),org.apache.commons.compress.archivers.zip.ZipEightByteInteger.equals(Object).o,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(BigInteger),org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(BigInteger).value,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(byte[]),org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(byte[]).bytes,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(byte[],int)","org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(byte[],int).bytes",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(byte[],int)","org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(byte[],int).offset",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(long),org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(long).value,Has_Parameter
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromCentralDirectoryData(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromCentralDirectoryData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromCentralDirectoryData(byte[],int,int)","org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromCentralDirectoryData(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromLocalFileData(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromLocalFileData(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromLocalFileData(byte[],int,int)","org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromLocalFileData(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.create(DataOutput,Deflater)","org.apache.commons.compress.archivers.zip.StreamCompressor.create(DataOutput,Deflater).os",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.create(DataOutput,Deflater)","org.apache.commons.compress.archivers.zip.StreamCompressor.create(DataOutput,Deflater).deflater",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.create(int,ScatterGatherBackingStore)","org.apache.commons.compress.archivers.zip.StreamCompressor.create(int,ScatterGatherBackingStore).compressionLevel",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.create(int,ScatterGatherBackingStore)","org.apache.commons.compress.archivers.zip.StreamCompressor.create(int,ScatterGatherBackingStore).bs",Has_Parameter
org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream),org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream).os,Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream,Deflater)","org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream,Deflater).os",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream,Deflater)","org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream,Deflater).deflater",Has_Parameter
org.apache.commons.compress.archivers.zip.StreamCompressor.create(ScatterGatherBackingStore),org.apache.commons.compress.archivers.zip.StreamCompressor.create(ScatterGatherBackingStore).bs,Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.create(SeekableByteChannel,Deflater)","org.apache.commons.compress.archivers.zip.StreamCompressor.create(SeekableByteChannel,Deflater).os",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.create(SeekableByteChannel,Deflater)","org.apache.commons.compress.archivers.zip.StreamCompressor.create(SeekableByteChannel,Deflater).deflater",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(InputStream,int)","org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(InputStream,int).source",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(InputStream,int)","org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(InputStream,int).method",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.write(byte[],int,int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor.write(byte[],int,int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.write(byte[],int,int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor.write(byte[],int,int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.write(byte[],int,int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor.write(byte[],int,int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.write(byte[],int,int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor.write(byte[],int,int,int).method",Has_Parameter
org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[]),org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[]).data,Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.writeDeflated(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor.writeDeflated(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.writeDeflated(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor.writeDeflated(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.writeDeflated(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor.writeDeflated(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.writeOut(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor.writeOut(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.writeOut(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor.writeOut(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor.writeOut(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor.writeOut(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.archivers.zip.StreamCompressor.<init>(Deflater),org.apache.commons.compress.archivers.zip.StreamCompressor.<init>(Deflater).deflater,Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor.writeOut(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor.writeOut(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor.writeOut(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor.writeOut(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor.writeOut(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor.writeOut(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor.<init>(Deflater,DataOutput)","org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor.<init>(Deflater,DataOutput).deflater",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor.<init>(Deflater,DataOutput)","org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor.<init>(Deflater,DataOutput).raf",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor.writeOut(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor.writeOut(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor.writeOut(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor.writeOut(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor.writeOut(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor.writeOut(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor.<init>(Deflater,OutputStream)","org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor.<init>(Deflater,OutputStream).deflater",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor.<init>(Deflater,OutputStream)","org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor.<init>(Deflater,OutputStream).os",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor.writeOut(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor.writeOut(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor.writeOut(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor.writeOut(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor.writeOut(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor.writeOut(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor.<init>(Deflater,ScatterGatherBackingStore)","org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor.<init>(Deflater,ScatterGatherBackingStore).deflater",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor.<init>(Deflater,ScatterGatherBackingStore)","org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor.<init>(Deflater,ScatterGatherBackingStore).bs",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor.writeOut(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor.writeOut(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor.writeOut(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor.writeOut(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor.writeOut(byte[],int,int)","org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor.writeOut(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor.<init>(Deflater,SeekableByteChannel)","org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor.<init>(Deflater,SeekableByteChannel).deflater",Has_Parameter
"org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor.<init>(Deflater,SeekableByteChannel)","org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor.<init>(Deflater,SeekableByteChannel).channel",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(File),org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(File).lastSegmentFile,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(Path),org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(Path).lastSegmentPath,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forFiles(File[]),org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forFiles(File[]).files,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forFiles(File,Iterable)","org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forFiles(File,Iterable).lastSegmentFile",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forFiles(File,Iterable)","org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forFiles(File,Iterable).files",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(SeekableByteChannel[]),org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(SeekableByteChannel[]).channels,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(SeekableByteChannel,Iterable)","org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(SeekableByteChannel,Iterable).lastSegmentChannel",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(SeekableByteChannel,Iterable)","org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(SeekableByteChannel,Iterable).channels",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(List,OpenOption[])","org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(List,OpenOption[]).paths",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(List,OpenOption[])","org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(List,OpenOption[]).openOptions",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(Path[]),org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(Path[]).paths,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(Path,Iterable)","org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(Path,Iterable).lastSegmentPath",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(Path,Iterable)","org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(Path,Iterable).paths",Has_Parameter
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.assertSplitSignature(List),org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.assertSplitSignature(List).channels,Has_Parameter
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.<init>(List),org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.<init>(List).channels,Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator.compare(Path,Path)","org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator.compare(Path,Path).file1",Has_Parameter
"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator.compare(Path,Path)","org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator.compare(Path,Path).file2",Has_Parameter
org.apache.commons.compress.archivers.zip.BitStream.nextBits(int),org.apache.commons.compress.archivers.zip.BitStream.nextBits(int).n,Has_Parameter
org.apache.commons.compress.archivers.zip.BitStream.<init>(InputStream),org.apache.commons.compress.archivers.zip.BitStream.<init>(InputStream).in,Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveEntrySupplier,ArchiveEntryBiConsumer,Path)","org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveEntrySupplier,ArchiveEntryBiConsumer,Path).supplier",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveEntrySupplier,ArchiveEntryBiConsumer,Path)","org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveEntrySupplier,ArchiveEntryBiConsumer,Path).writer",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveEntrySupplier,ArchiveEntryBiConsumer,Path)","org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveEntrySupplier,ArchiveEntryBiConsumer,Path).targetDirectory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveInputStream,File)","org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveInputStream,File).archive",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveInputStream,File)","org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveInputStream,File).targetDirectory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveInputStream,Path)","org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveInputStream,Path).archive",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveInputStream,Path)","org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveInputStream,Path).targetDirectory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(File,File)","org.apache.commons.compress.archivers.examples.Expander.expand(File,File).archive",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(File,File)","org.apache.commons.compress.archivers.examples.Expander.expand(File,File).targetDirectory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(InputStream,File)","org.apache.commons.compress.archivers.examples.Expander.expand(InputStream,File).archive",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(InputStream,File)","org.apache.commons.compress.archivers.examples.Expander.expand(InputStream,File).targetDirectory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(InputStream,File,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Expander.expand(InputStream,File,CloseableConsumer).archive",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(InputStream,File,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Expander.expand(InputStream,File,CloseableConsumer).targetDirectory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(InputStream,File,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Expander.expand(InputStream,File,CloseableConsumer).closeableConsumer",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(Path,Path)","org.apache.commons.compress.archivers.examples.Expander.expand(Path,Path).archive",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(Path,Path)","org.apache.commons.compress.archivers.examples.Expander.expand(Path,Path).targetDirectory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(SevenZFile,File)","org.apache.commons.compress.archivers.examples.Expander.expand(SevenZFile,File).archive",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(SevenZFile,File)","org.apache.commons.compress.archivers.examples.Expander.expand(SevenZFile,File).targetDirectory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(SevenZFile,Path)","org.apache.commons.compress.archivers.examples.Expander.expand(SevenZFile,Path).archive",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(SevenZFile,Path)","org.apache.commons.compress.archivers.examples.Expander.expand(SevenZFile,Path).targetDirectory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,File,File)","org.apache.commons.compress.archivers.examples.Expander.expand(String,File,File).format",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,File,File)","org.apache.commons.compress.archivers.examples.Expander.expand(String,File,File).archive",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,File,File)","org.apache.commons.compress.archivers.examples.Expander.expand(String,File,File).targetDirectory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File)","org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File).format",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File)","org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File).archive",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File)","org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File).targetDirectory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File,CloseableConsumer).format",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File,CloseableConsumer).archive",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File,CloseableConsumer).targetDirectory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File,CloseableConsumer).closeableConsumer",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,Path,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,Path,CloseableConsumer).format",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,Path,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,Path,CloseableConsumer).archive",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,Path,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,Path,CloseableConsumer).targetDirectory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,Path,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,Path,CloseableConsumer).closeableConsumer",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,Path,Path)","org.apache.commons.compress.archivers.examples.Expander.expand(String,Path,Path).format",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,Path,Path)","org.apache.commons.compress.archivers.examples.Expander.expand(String,Path,Path).archive",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,Path,Path)","org.apache.commons.compress.archivers.examples.Expander.expand(String,Path,Path).targetDirectory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File)","org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File).format",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File)","org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File).archive",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File)","org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File).targetDirectory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File,CloseableConsumer).format",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File,CloseableConsumer).archive",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File,CloseableConsumer).targetDirectory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File,CloseableConsumer).closeableConsumer",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,Path,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,Path,CloseableConsumer).format",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,Path,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,Path,CloseableConsumer).archive",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,Path,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,Path,CloseableConsumer).targetDirectory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,Path,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,Path,CloseableConsumer).closeableConsumer",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(TarFile,File)","org.apache.commons.compress.archivers.examples.Expander.expand(TarFile,File).archive",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(TarFile,File)","org.apache.commons.compress.archivers.examples.Expander.expand(TarFile,File).targetDirectory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(TarFile,Path)","org.apache.commons.compress.archivers.examples.Expander.expand(TarFile,Path).archive",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(TarFile,Path)","org.apache.commons.compress.archivers.examples.Expander.expand(TarFile,Path).targetDirectory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(ZipFile,File)","org.apache.commons.compress.archivers.examples.Expander.expand(ZipFile,File).archive",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(ZipFile,File)","org.apache.commons.compress.archivers.examples.Expander.expand(ZipFile,File).targetDirectory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(ZipFile,Path)","org.apache.commons.compress.archivers.examples.Expander.expand(ZipFile,Path).archive",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander.expand(ZipFile,Path)","org.apache.commons.compress.archivers.examples.Expander.expand(ZipFile,Path).targetDirectory",Has_Parameter
org.apache.commons.compress.archivers.examples.Expander.prefersSeekableByteChannel(String),org.apache.commons.compress.archivers.examples.Expander.prefersSeekableByteChannel(String).format,Has_Parameter
org.apache.commons.compress.archivers.examples.Expander.toPath(File),org.apache.commons.compress.archivers.examples.Expander.toPath(File).targetDirectory,Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander$ArchiveEntryBiConsumer.accept(ArchiveEntry,OutputStream)","org.apache.commons.compress.archivers.examples.Expander$ArchiveEntryBiConsumer.accept(ArchiveEntry,OutputStream).entry",Has_Parameter
"org.apache.commons.compress.archivers.examples.Expander$ArchiveEntryBiConsumer.accept(ArchiveEntry,OutputStream)","org.apache.commons.compress.archivers.examples.Expander$ArchiveEntryBiConsumer.accept(ArchiveEntry,OutputStream).out",Has_Parameter
org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter.track(Closeable),org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter.track(Closeable).closeable,Has_Parameter
org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter.<init>(CloseableConsumer),org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter.<init>(CloseableConsumer).consumer,Has_Parameter
org.apache.commons.compress.archivers.examples.CloseableConsumer.accept(Closeable),org.apache.commons.compress.archivers.examples.CloseableConsumer.accept(Closeable).c,Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,File)","org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,File).target",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,File)","org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,File).directory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path)","org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path).target",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path)","org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path).directory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path,EnumSet,LinkOption[])","org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path,EnumSet,LinkOption[]).target",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path,EnumSet,LinkOption[])","org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path,EnumSet,LinkOption[]).directory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path,EnumSet,LinkOption[])","org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path,EnumSet,LinkOption[]).fileVisitOptions",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path,EnumSet,LinkOption[])","org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path,EnumSet,LinkOption[]).linkOptions",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(SevenZOutputFile,File)","org.apache.commons.compress.archivers.examples.Archiver.create(SevenZOutputFile,File).target",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(SevenZOutputFile,File)","org.apache.commons.compress.archivers.examples.Archiver.create(SevenZOutputFile,File).directory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(SevenZOutputFile,Path)","org.apache.commons.compress.archivers.examples.Archiver.create(SevenZOutputFile,Path).target",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(SevenZOutputFile,Path)","org.apache.commons.compress.archivers.examples.Archiver.create(SevenZOutputFile,Path).directory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,File,File)","org.apache.commons.compress.archivers.examples.Archiver.create(String,File,File).format",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,File,File)","org.apache.commons.compress.archivers.examples.Archiver.create(String,File,File).target",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,File,File)","org.apache.commons.compress.archivers.examples.Archiver.create(String,File,File).directory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File)","org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File).format",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File)","org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File).target",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File)","org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File).directory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File,CloseableConsumer).format",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File,CloseableConsumer).target",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File,CloseableConsumer).directory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File,CloseableConsumer).closeableConsumer",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,Path,Path)","org.apache.commons.compress.archivers.examples.Archiver.create(String,Path,Path).format",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,Path,Path)","org.apache.commons.compress.archivers.examples.Archiver.create(String,Path,Path).target",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,Path,Path)","org.apache.commons.compress.archivers.examples.Archiver.create(String,Path,Path).directory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File)","org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File).format",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File)","org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File).target",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File)","org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File).directory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File,CloseableConsumer).format",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File,CloseableConsumer).target",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File,CloseableConsumer).directory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File,CloseableConsumer)","org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File,CloseableConsumer).closeableConsumer",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,Path)","org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,Path).format",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,Path)","org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,Path).target",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,Path)","org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,Path).directory",Has_Parameter
org.apache.commons.compress.archivers.examples.Archiver.prefersSeekableByteChannel(String),org.apache.commons.compress.archivers.examples.Archiver.prefersSeekableByteChannel(String).format,Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.preVisitDirectory(Path,BasicFileAttributes)","org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.preVisitDirectory(Path,BasicFileAttributes).dir",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.preVisitDirectory(Path,BasicFileAttributes)","org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.preVisitDirectory(Path,BasicFileAttributes).attrs",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.visit(Path,BasicFileAttributes,boolean)","org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.visit(Path,BasicFileAttributes,boolean).path",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.visit(Path,BasicFileAttributes,boolean)","org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.visit(Path,BasicFileAttributes,boolean).attrs",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.visit(Path,BasicFileAttributes,boolean)","org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.visit(Path,BasicFileAttributes,boolean).isFile",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.visitFile(Path,BasicFileAttributes)","org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.visitFile(Path,BasicFileAttributes).file",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.visitFile(Path,BasicFileAttributes)","org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.visitFile(Path,BasicFileAttributes).attrs",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.<init>(ArchiveOutputStream,Path,LinkOption[])","org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.<init>(ArchiveOutputStream,Path,LinkOption[]).target",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.<init>(ArchiveOutputStream,Path,LinkOption[])","org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.<init>(ArchiveOutputStream,Path,LinkOption[]).directory",Has_Parameter
"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.<init>(ArchiveOutputStream,Path,LinkOption[])","org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.<init>(ArchiveOutputStream,Path,LinkOption[]).linkOptions",Has_Parameter
org.apache.commons.compress.archivers.ar.ArArchiveEntry.equals(Object),org.apache.commons.compress.archivers.ar.ArArchiveEntry.equals(Object).obj,Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(File,String)","org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(File,String).inputFile",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(File,String)","org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(File,String).entryName",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(Path,String,LinkOption[])","org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(Path,String,LinkOption[]).inputPath",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(Path,String,LinkOption[])","org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(Path,String,LinkOption[]).entryName",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(Path,String,LinkOption[])","org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(Path,String,LinkOption[]).options",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long)","org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long).name",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long)","org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long).length",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long,int,int,int,long)","org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long,int,int,int,long).name",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long,int,int,int,long)","org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long,int,int,int,long).length",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long,int,int,int,long)","org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long,int,int,int,long).userId",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long,int,int,int,long)","org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long,int,int,int,long).groupId",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long,int,int,int,long)","org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long,int,int,int,long).mode",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long,int,int,int,long)","org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long,int,int,int,long).lastModified",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.checkLength(String,int,String)","org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.checkLength(String,int,String).value",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.checkLength(String,int,String)","org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.checkLength(String,int,String).max",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.checkLength(String,int,String)","org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.checkLength(String,int,String).name",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(File,String)","org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(File,String).inputFile",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(File,String)","org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(File,String).entryName",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])","org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).inputPath",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])","org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).entryName",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])","org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).options",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.pad(int,int,char)","org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.pad(int,int,char).offset",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.pad(int,int,char)","org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.pad(int,int,char).newOffset",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.pad(int,int,char)","org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.pad(int,int,char).fill",Has_Parameter
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(ArArchiveEntry),org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(ArArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.setLongFileMode(int),org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.setLongFileMode(int).longFileMode,Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(String),org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(String).data,Has_Parameter
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(ArArchiveEntry),org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(ArArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.<init>(OutputStream),org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.<init>(OutputStream).out,Has_Parameter
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isBSDLongName(String),org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isBSDLongName(String).name,Has_Parameter
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNUStringTable(String),org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNUStringTable(String).name,Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byte[],int)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byte[],int).signature",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byte[],int)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byte[],int).length",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int).byteArray",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,boolean)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,boolean).byteArray",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,boolean)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,boolean).offset",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,boolean)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,boolean).len",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,boolean)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,boolean).treatBlankAsZero",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int).byteArray",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int).len",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int).base",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int,boolean)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int,boolean).byteArray",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int,boolean)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int,boolean).offset",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int,boolean)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int,boolean).len",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int,boolean)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int,boolean).base",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int,boolean)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int,boolean).treatBlankAsZero",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[],int,int)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[],int,int).byteArray",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[],int,int)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[],int,int)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getBSDLongName(String),org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getBSDLongName(String).bsdLongName,Has_Parameter
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getExtendedName(int),org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getExtendedName(int).offset,Has_Parameter
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNULongName(String),org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNULongName(String).name,Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(byte[],int,int)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(byte[],int,int)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(byte[],int,int)","org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.trackReadBytes(long),org.apache.commons.compress.archivers.ar.ArArchiveInputStream.trackReadBytes(long).read,Has_Parameter
org.apache.commons.compress.archivers.ar.ArArchiveInputStream.<init>(InputStream),org.apache.commons.compress.archivers.ar.ArArchiveInputStream.<init>(InputStream).inputStream,Has_Parameter
"org.apache.commons.compress.archivers.Lister.createArchiveInputStream(String[],InputStream)","org.apache.commons.compress.archivers.Lister.createArchiveInputStream(String[],InputStream).args",Has_Parameter
"org.apache.commons.compress.archivers.Lister.createArchiveInputStream(String[],InputStream)","org.apache.commons.compress.archivers.Lister.createArchiveInputStream(String[],InputStream).inputStream",Has_Parameter
org.apache.commons.compress.archivers.Lister.detectFormat(Path),org.apache.commons.compress.archivers.Lister.detectFormat(Path).file,Has_Parameter
org.apache.commons.compress.archivers.Lister.main(String[]),org.apache.commons.compress.archivers.Lister.main(String[]).args,Has_Parameter
"org.apache.commons.compress.archivers.Lister.list(Path,String[])","org.apache.commons.compress.archivers.Lister.list(Path,String[]).file",Has_Parameter
"org.apache.commons.compress.archivers.Lister.list(Path,String[])","org.apache.commons.compress.archivers.Lister.list(Path,String[]).args",Has_Parameter
org.apache.commons.compress.archivers.Lister.list7z(Path),org.apache.commons.compress.archivers.Lister.list7z(Path).file,Has_Parameter
"org.apache.commons.compress.archivers.Lister.listStream(Path,String[])","org.apache.commons.compress.archivers.Lister.listStream(Path,String[]).file",Has_Parameter
"org.apache.commons.compress.archivers.Lister.listStream(Path,String[])","org.apache.commons.compress.archivers.Lister.listStream(Path,String[]).args",Has_Parameter
org.apache.commons.compress.archivers.Lister.listZipUsingTarFile(Path),org.apache.commons.compress.archivers.Lister.listZipUsingTarFile(Path).file,Has_Parameter
org.apache.commons.compress.archivers.Lister.listZipUsingZipFile(Path),org.apache.commons.compress.archivers.Lister.listZipUsingZipFile(Path).file,Has_Parameter
org.apache.commons.compress.archivers.Lister.println(ArchiveEntry),org.apache.commons.compress.archivers.Lister.println(ArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.Lister.println(String),org.apache.commons.compress.archivers.Lister.println(String).line,Has_Parameter
"org.apache.commons.compress.archivers.Lister.<init>(boolean,String[])","org.apache.commons.compress.archivers.Lister.<init>(boolean,String[]).quiet",Has_Parameter
"org.apache.commons.compress.archivers.Lister.<init>(boolean,String[])","org.apache.commons.compress.archivers.Lister.<init>(boolean,String[]).args",Has_Parameter
org.apache.commons.compress.archivers.arj.ArjArchiveEntry.equals(Object),org.apache.commons.compress.archivers.arj.ArjArchiveEntry.equals(Object).obj,Has_Parameter
org.apache.commons.compress.archivers.arj.ArjArchiveEntry.<init>(LocalFileHeader),org.apache.commons.compress.archivers.arj.ArjArchiveEntry.<init>(LocalFileHeader).localFileHeader,Has_Parameter
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.matches(byte[],int)","org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.matches(byte[],int).signature",Has_Parameter
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.matches(byte[],int)","org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.matches(byte[],int).length",Has_Parameter
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.canReadEntryData(ArchiveEntry),org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.canReadEntryData(ArchiveEntry).ae,Has_Parameter
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read16(DataInputStream),org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read16(DataInputStream).dataIn,Has_Parameter
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read32(DataInputStream),org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read32(DataInputStream).dataIn,Has_Parameter
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read8(DataInputStream),org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read8(DataInputStream).dataIn,Has_Parameter
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(int,DataInputStream,LocalFileHeader)","org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(int,DataInputStream,LocalFileHeader).firstHeaderSize",Has_Parameter
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(int,DataInputStream,LocalFileHeader)","org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(int,DataInputStream,LocalFileHeader).firstHeader",Has_Parameter
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(int,DataInputStream,LocalFileHeader)","org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(int,DataInputStream,LocalFileHeader).localFileHeader",Has_Parameter
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readRange(InputStream,int)","org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readRange(InputStream,int).in",Has_Parameter
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readRange(InputStream,int)","org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readRange(InputStream,int).len",Has_Parameter
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readString(DataInputStream),org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readString(DataInputStream).dataIn,Has_Parameter
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.<init>(InputStream),org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.<init>(InputStream).inputStream,Has_Parameter
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.<init>(InputStream,String)","org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.<init>(InputStream,String).inputStream",Has_Parameter
"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.<init>(InputStream,String)","org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.<init>(InputStream,String).charsetName",Has_Parameter
org.apache.commons.compress.archivers.arj.LocalFileHeader.equals(Object),org.apache.commons.compress.archivers.arj.LocalFileHeader.equals(Object).obj,Has_Parameter
org.apache.commons.compress.archivers.ArchiveEntry.resolveIn(Path),org.apache.commons.compress.archivers.ArchiveEntry.resolveIn(Path).parentPath,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byte[],int)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byte[],int).signature",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byte[],int)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byte[],int).length",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(Map,List)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(Map,List).headers",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(Map,List)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(Map,List).sparseHeaders",Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.canReadEntryData(ArchiveEntry),org.apache.commons.compress.archivers.tar.TarArchiveInputStream.canReadEntryData(ArchiveEntry).archiveEntry,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getActuallySkipped(long,long,long)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getActuallySkipped(long,long,long).available",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getActuallySkipped(long,long,long)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getActuallySkipped(long,long,long).skipped",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getActuallySkipped(long,long,long)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getActuallySkipped(long,long,long).expected",Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isEOFRecord(byte[]),org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isEOFRecord(byte[]).record,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.mark(int),org.apache.commons.compress.archivers.tar.TarArchiveInputStream.mark(int).markLimit,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(byte[],int,int).buf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(byte[],int,int).numToRead",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readSparse(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readSparse(byte[],int,int).buf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readSparse(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readSparse(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readSparse(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readSparse(byte[],int,int).numToRead",Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.setAtEOF(boolean),org.apache.commons.compress.archivers.tar.TarArchiveInputStream.setAtEOF(boolean).atEof,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.setCurrentEntry(TarArchiveEntry),org.apache.commons.compress.archivers.tar.TarArchiveInputStream.setCurrentEntry(TarArchiveEntry).currEntry,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skip(long),org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skip(long).n,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipSparse(long),org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipSparse(long).n,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream),org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream).inputStream,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,boolean).inputStream",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,boolean).lenient",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int).inputStream",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int).blockSize",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int).inputStream",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int).blockSize",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int).recordSize",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String).inputStream",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String).blockSize",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String).recordSize",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String).encoding",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String,boolean).inputStream",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String,boolean).blockSize",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String,boolean).recordSize",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String,boolean).encoding",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String,boolean).lenient",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,String)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,String).inputStream",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,String)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,String).blockSize",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,String)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,String).encoding",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,String)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,String).inputStream",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,String)","org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,String).encoding",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeader(Map,String,FileTime)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeader(Map,String,FileTime).paxHeaders",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeader(Map,String,FileTime)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeader(Map,String,FileTime).header",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeader(Map,String,FileTime)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeader(Map,String,FileTime).value",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeaderForBigNumber(Map,String,FileTime,long)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeaderForBigNumber(Map,String,FileTime,long).paxHeaders",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeaderForBigNumber(Map,String,FileTime,long)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeaderForBigNumber(Map,String,FileTime,long).header",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeaderForBigNumber(Map,String,FileTime,long)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeaderForBigNumber(Map,String,FileTime,long).value",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeaderForBigNumber(Map,String,FileTime,long)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeaderForBigNumber(Map,String,FileTime,long).maxValue",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addInstantPaxHeader(Map,String,long,int)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addInstantPaxHeader(Map,String,long,int).paxHeaders",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addInstantPaxHeader(Map,String,long,int)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addInstantPaxHeader(Map,String,long,int).header",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addInstantPaxHeader(Map,String,long,int)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addInstantPaxHeader(Map,String,long,int).seconds",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addInstantPaxHeader(Map,String,long,int)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addInstantPaxHeader(Map,String,long,int).nanos",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(Map,String,long,long)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(Map,String,long,long).paxHeaders",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(Map,String,long,long)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(Map,String,long,long).header",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(Map,String,long,long)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(Map,String,long,long).value",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(Map,String,long,long)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(Map,String,long,long).maxValue",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(Map,TarArchiveEntry)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(Map,TarArchiveEntry).paxHeaders",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(Map,TarArchiveEntry)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(Map,TarArchiveEntry).entry",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(File,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(File,String).inputFile",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(File,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(File,String).entryName",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).inputPath",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).entryName",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).options",Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.encodeExtendedPaxHeadersContents(Map),org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.encodeExtendedPaxHeadersContents(Map).headers,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long).field",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long).value",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long).maxValue",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long,String).field",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long,String).value",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long,String).maxValue",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long,String).additionalMsg",Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(TarArchiveEntry),org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(TarArchiveEntry).entry,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumberWithPosixMessage(String,long,long)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumberWithPosixMessage(String,long,long).field",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumberWithPosixMessage(String,long,long)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumberWithPosixMessage(String,long,long).value",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumberWithPosixMessage(String,long,long)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumberWithPosixMessage(String,long,long).maxValue",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String).entry",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String).name",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String).paxHeaders",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String).paxHeaderName",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String).linkType",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String).fieldName",Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(TarArchiveEntry),org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(TarArchiveEntry).archiveEntry,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setAddPaxHeadersForNonAsciiNames(boolean),org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setAddPaxHeadersForNonAsciiNames(boolean).b,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setBigNumberMode(int),org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setBigNumberMode(int).bigNumberMode,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(int),org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(int).longFileMode,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.shouldBeReplaced(char),org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.shouldBeReplaced(char).c,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.stripTo7Bits(String),org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.stripTo7Bits(String).name,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.transferModTime(TarArchiveEntry,TarArchiveEntry)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.transferModTime(TarArchiveEntry,TarArchiveEntry).from",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.transferModTime(TarArchiveEntry,TarArchiveEntry)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.transferModTime(TarArchiveEntry,TarArchiveEntry).to",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(byte[],int,int).wBuf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(byte[],int,int).wOffset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(byte[],int,int).numToWrite",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(TarArchiveEntry,String,Map)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(TarArchiveEntry,String,Map).entry",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(TarArchiveEntry,String,Map)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(TarArchiveEntry,String,Map).entryName",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(TarArchiveEntry,String,Map)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(TarArchiveEntry,String,Map).headers",Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(byte[]),org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(byte[]).record,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream),org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream).os,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int).os",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int).blockSize",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int).os",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int).blockSize",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int).recordSize",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int,String).os",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int,String).blockSize",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int,String).recordSize",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int,String).encoding",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,String).os",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,String).blockSize",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,String).charset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,String).os",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,String)","org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,String).charset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile.applyPaxHeadersToCurrentEntry(Map,List)","org.apache.commons.compress.archivers.tar.TarFile.applyPaxHeadersToCurrentEntry(Map,List).headers",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile.applyPaxHeadersToCurrentEntry(Map,List)","org.apache.commons.compress.archivers.tar.TarFile.applyPaxHeadersToCurrentEntry(Map,List).sparseHeaders",Has_Parameter
org.apache.commons.compress.archivers.tar.TarFile.getInputStream(TarArchiveEntry),org.apache.commons.compress.archivers.tar.TarFile.getInputStream(TarArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.tar.TarFile.isEOFRecord(ByteBuffer),org.apache.commons.compress.archivers.tar.TarFile.isEOFRecord(ByteBuffer).headerBuf,Has_Parameter
org.apache.commons.compress.archivers.tar.TarFile.repositionForwardBy(long),org.apache.commons.compress.archivers.tar.TarFile.repositionForwardBy(long).offset,Has_Parameter
org.apache.commons.compress.archivers.tar.TarFile.repositionForwardTo(long),org.apache.commons.compress.archivers.tar.TarFile.repositionForwardTo(long).newPosition,Has_Parameter
org.apache.commons.compress.archivers.tar.TarFile.setAtEOF(boolean),org.apache.commons.compress.archivers.tar.TarFile.setAtEOF(boolean).b,Has_Parameter
org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[]),org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[]).content,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[],boolean)","org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[],boolean).content",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[],boolean)","org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[],boolean).lenient",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[],String)","org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[],String).content",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[],String)","org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[],String).encoding",Has_Parameter
org.apache.commons.compress.archivers.tar.TarFile.<init>(File),org.apache.commons.compress.archivers.tar.TarFile.<init>(File).archive,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile.<init>(File,boolean)","org.apache.commons.compress.archivers.tar.TarFile.<init>(File,boolean).archive",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile.<init>(File,boolean)","org.apache.commons.compress.archivers.tar.TarFile.<init>(File,boolean).lenient",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile.<init>(File,String)","org.apache.commons.compress.archivers.tar.TarFile.<init>(File,String).archive",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile.<init>(File,String)","org.apache.commons.compress.archivers.tar.TarFile.<init>(File,String).encoding",Has_Parameter
org.apache.commons.compress.archivers.tar.TarFile.<init>(Path),org.apache.commons.compress.archivers.tar.TarFile.<init>(Path).archivePath,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile.<init>(Path,boolean)","org.apache.commons.compress.archivers.tar.TarFile.<init>(Path,boolean).archivePath",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile.<init>(Path,boolean)","org.apache.commons.compress.archivers.tar.TarFile.<init>(Path,boolean).lenient",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile.<init>(Path,String)","org.apache.commons.compress.archivers.tar.TarFile.<init>(Path,String).archivePath",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile.<init>(Path,String)","org.apache.commons.compress.archivers.tar.TarFile.<init>(Path,String).encoding",Has_Parameter
org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel),org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel).content,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel,int,int,String,boolean)","org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel,int,int,String,boolean).archive",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel,int,int,String,boolean)","org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel,int,int,String,boolean).blockSize",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel,int,int,String,boolean)","org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel,int,int,String,boolean).recordSize",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel,int,int,String,boolean)","org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel,int,int,String,boolean).encoding",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel,int,int,String,boolean)","org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel,int,int,String,boolean).lenient",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.read(long,ByteBuffer)","org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.read(long,ByteBuffer).pos",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.read(long,ByteBuffer)","org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.read(long,ByteBuffer).buf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.readArchive(long,ByteBuffer)","org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.readArchive(long,ByteBuffer).pos",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.readArchive(long,ByteBuffer)","org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.readArchive(long,ByteBuffer).buf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.readSparse(long,ByteBuffer,int)","org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.readSparse(long,ByteBuffer,int).pos",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.readSparse(long,ByteBuffer,int)","org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.readSparse(long,ByteBuffer,int).buf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.readSparse(long,ByteBuffer,int)","org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.readSparse(long,ByteBuffer,int).numToRead",Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream.skip(long),org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream.skip(long).n,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.<init>(byte[]),org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.<init>(byte[]).headerBuf,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.equals(Object),org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.equals(Object).o,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.<init>(long,long)","org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.<init>(long,long).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.<init>(long,long)","org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.<init>(long,long).numbytes",Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.fileTimeFromOptionalSeconds(long),org.apache.commons.compress.archivers.tar.TarArchiveEntry.fileTimeFromOptionalSeconds(long).seconds,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(String,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(String,boolean).fileName",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(String,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(String,boolean).preserveAbsolutePath",Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseInstantFromDecimalSeconds(String),org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseInstantFromDecimalSeconds(String).value,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.addPaxHeader(String,String)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.addPaxHeader(String,String).name",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.addPaxHeader(String,String)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.addPaxHeader(String,String).value",Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(Object),org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(Object).it,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(TarArchiveEntry),org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(TarArchiveEntry).it,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.evaluateType(Map,byte[])","org.apache.commons.compress.archivers.tar.TarArchiveEntry.evaluateType(Map,byte[]).globalPaxHeaders",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.evaluateType(Map,byte[])","org.apache.commons.compress.archivers.tar.TarArchiveEntry.evaluateType(Map,byte[]).header",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(byte,int,byte[],int)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(byte,int,byte[],int).value",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(byte,int,byte[],int)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(byte,int,byte[],int).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(byte,int,byte[],int)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(byte,int,byte[],int).outbuf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(byte,int,byte[],int)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(byte,int,byte[],int).length",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(int,int,byte[],int)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(int,int,byte[],int).value",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(int,int,byte[],int)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(int,int,byte[],int).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(int,int,byte[],int)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(int,int,byte[],int).outbuf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(int,int,byte[],int)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(int,int,byte[],int).length",Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse0xData(Map),org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse0xData(Map).headers,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse1xData(Map),org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse1xData(Map).headers,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillStarSparseData(Map),org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillStarSparseData(Map).headers,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.getExtraPaxHeader(String),org.apache.commons.compress.archivers.tar.TarArchiveEntry.getExtraPaxHeader(String).name,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDescendent(TarArchiveEntry),org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDescendent(TarArchiveEntry).desc,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.isInvalidPrefix(byte[]),org.apache.commons.compress.archivers.tar.TarArchiveEntry.isInvalidPrefix(byte[]).header,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.isInvalidXtarTime(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.isInvalidXtarTime(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.isInvalidXtarTime(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.isInvalidXtarTime(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.isInvalidXtarTime(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.isInvalidXtarTime(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.isXstar(Map,byte[])","org.apache.commons.compress.archivers.tar.TarArchiveEntry.isXstar(Map,byte[]).globalPaxHeaders",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.isXstar(Map,byte[])","org.apache.commons.compress.archivers.tar.TarArchiveEntry.isXstar(Map,byte[]).header",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseOctalOrBinary(byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseOctalOrBinary(byte[],int,int,boolean).header",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseOctalOrBinary(byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseOctalOrBinary(byte[],int,int,boolean).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseOctalOrBinary(byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseOctalOrBinary(byte[],int,int,boolean).length",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseOctalOrBinary(byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseOctalOrBinary(byte[],int,int,boolean).lenient",Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[]),org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[]).header,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding).header",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding).encoding",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding,boolean,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding,boolean,boolean).header",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding,boolean,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding,boolean,boolean).encoding",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding,boolean,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding,boolean,boolean).oldStyle",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding,boolean,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding,boolean,boolean).lenient",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(Map,byte[],ZipEncoding,boolean,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(Map,byte[],ZipEncoding,boolean,boolean).globalPaxHeaders",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(Map,byte[],ZipEncoding,boolean,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(Map,byte[],ZipEncoding,boolean,boolean).header",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(Map,byte[],ZipEncoding,boolean,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(Map,byte[],ZipEncoding,boolean,boolean).encoding",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(Map,byte[],ZipEncoding,boolean,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(Map,byte[],ZipEncoding,boolean,boolean).oldStyle",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(Map,byte[],ZipEncoding,boolean,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(Map,byte[],ZipEncoding,boolean,boolean).lenient",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeaderUnwrapped(Map,byte[],ZipEncoding,boolean,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeaderUnwrapped(Map,byte[],ZipEncoding,boolean,boolean).globalPaxHeaders",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeaderUnwrapped(Map,byte[],ZipEncoding,boolean,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeaderUnwrapped(Map,byte[],ZipEncoding,boolean,boolean).header",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeaderUnwrapped(Map,byte[],ZipEncoding,boolean,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeaderUnwrapped(Map,byte[],ZipEncoding,boolean,boolean).encoding",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeaderUnwrapped(Map,byte[],ZipEncoding,boolean,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeaderUnwrapped(Map,byte[],ZipEncoding,boolean,boolean).oldStyle",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeaderUnwrapped(Map,byte[],ZipEncoding,boolean,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeaderUnwrapped(Map,byte[],ZipEncoding,boolean,boolean).lenient",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.processPaxHeader(String,String)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.processPaxHeader(String,String).key",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.processPaxHeader(String,String)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.processPaxHeader(String,String).val",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.processPaxHeader(String,String,Map)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.processPaxHeader(String,String,Map).key",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.processPaxHeader(String,String,Map)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.processPaxHeader(String,String,Map).val",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.processPaxHeader(String,String,Map)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.processPaxHeader(String,String,Map).headers",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.readFileMode(Path,String,LinkOption[])","org.apache.commons.compress.archivers.tar.TarArchiveEntry.readFileMode(Path,String,LinkOption[]).file",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.readFileMode(Path,String,LinkOption[])","org.apache.commons.compress.archivers.tar.TarArchiveEntry.readFileMode(Path,String,LinkOption[]).normalizedName",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.readFileMode(Path,String,LinkOption[])","org.apache.commons.compress.archivers.tar.TarArchiveEntry.readFileMode(Path,String,LinkOption[]).options",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.readOsSpecificProperties(Path,LinkOption[])","org.apache.commons.compress.archivers.tar.TarArchiveEntry.readOsSpecificProperties(Path,LinkOption[]).file",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.readOsSpecificProperties(Path,LinkOption[])","org.apache.commons.compress.archivers.tar.TarArchiveEntry.readOsSpecificProperties(Path,LinkOption[]).options",Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setCreationTime(FileTime),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setCreationTime(FileTime).time,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDataOffset(long),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDataOffset(long).dataOffset,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMajor(int),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMajor(int).devNo,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMinor(int),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMinor(int).devNo,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(int),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(int).groupId,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(long),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(long).groupId,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupName(String),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupName(String).groupName,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.setIds(int,int)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.setIds(int,int).userId",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.setIds(int,int)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.setIds(int,int).groupId",Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLastAccessTime(FileTime),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLastAccessTime(FileTime).time,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLastModifiedTime(FileTime),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLastModifiedTime(FileTime).time,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLinkName(String),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLinkName(String).link,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setMode(int),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setMode(int).mode,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(Date),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(Date).time,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(FileTime),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(FileTime).time,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(long),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(long).time,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setName(String),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setName(String).name,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.setNames(String,String)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.setNames(String,String).userName",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.setNames(String,String)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.setNames(String,String).groupName",Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(long),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(long).size,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSparseHeaders(List),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSparseHeaders(List).sparseHeaders,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setStatusChangeTime(FileTime),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setStatusChangeTime(FileTime).time,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(int),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(int).userId,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(long),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(long).userId,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserName(String),org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserName(String).userName,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.updateEntryFromPaxHeaders(Map),org.apache.commons.compress.archivers.tar.TarArchiveEntry.updateEntryFromPaxHeaders(Map).headers,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[]),org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[]).outbuf,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[],ZipEncoding,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[],ZipEncoding,boolean).outbuf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[],ZipEncoding,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[],ZipEncoding,boolean).encoding",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[],ZipEncoding,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[],ZipEncoding,boolean).starMode",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean).value",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean).outbuf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean).length",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean).starMode",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderOptionalTimeField(FileTime,int,byte[],int)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderOptionalTimeField(FileTime,int,byte[],int).time",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderOptionalTimeField(FileTime,int,byte[],int)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderOptionalTimeField(FileTime,int,byte[],int).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderOptionalTimeField(FileTime,int,byte[],int)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderOptionalTimeField(FileTime,int,byte[],int).outbuf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderOptionalTimeField(FileTime,int,byte[],int)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderOptionalTimeField(FileTime,int,byte[],int).fieldLength",Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(boolean),org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(boolean).preserveAbsolutePath,Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[]),org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[]).headerBuf,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding).headerBuf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding).encoding",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean).headerBuf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean).encoding",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean).lenient",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean,long)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean,long).headerBuf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean,long)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean,long).encoding",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean,long)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean,long).lenient",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean,long)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean,long).dataOffset",Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(File),org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(File).file,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(File,String)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(File,String).file",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(File,String)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(File,String).fileName",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean).globalPaxHeaders",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean).headerBuf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean).encoding",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean).lenient",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean,long)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean,long).globalPaxHeaders",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean,long)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean,long).headerBuf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean,long)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean,long).encoding",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean,long)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean,long).lenient",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean,long)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean,long).dataOffset",Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Path),org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Path).file,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Path,String,LinkOption[])","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Path,String,LinkOption[]).file",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Path,String,LinkOption[])","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Path,String,LinkOption[]).fileName",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Path,String,LinkOption[])","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Path,String,LinkOption[]).linkOptions",Has_Parameter
org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String),org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String).name,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,boolean).name",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,boolean).preserveAbsolutePath",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,byte)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,byte).name",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,byte)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,byte).linkFlag",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,byte,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,byte,boolean).name",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,byte,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,byte,boolean).linkFlag",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,byte,boolean)","org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,byte,boolean).preserveAbsolutePath",Has_Parameter
org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byte[]),org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byte[]).buf,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte)","org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte).buffer",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte)","org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte)","org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte).length",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte)","org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte).current",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte)","org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte).currentByte",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean).value",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean).buf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean).length",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean).negative",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(long,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(long,byte[],int,int).value",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(long,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(long,byte[],int,int).buf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(long,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(long,byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(long,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(long,byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean).value",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean).buf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean).length",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean).negative",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int).value",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int).buf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int).value",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int).buf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int).name",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int).buf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding)","org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding).name",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding)","org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding).buf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding)","org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding)","org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding).length",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding)","org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding).encoding",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(long,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(long,byte[],int,int).value",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(long,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(long,byte[],int,int).buf",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(long,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(long,byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(long,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(long,byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int).value",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(byte[],int,int,boolean).buffer",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(byte[],int,int,boolean).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(byte[],int,int,boolean).length",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(byte[],int,int,boolean).negative",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean).buffer",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean).length",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean)","org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean).negative",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byte[],int)","org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byte[],int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byte[],int)","org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byte[],int).offset",Has_Parameter
org.apache.commons.compress.archivers.tar.TarUtils.parseFromPAX01SparseHeaders(String),org.apache.commons.compress.archivers.tar.TarUtils.parseFromPAX01SparseHeaders(String).sparseMap,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding)","org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding).buffer",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding)","org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding)","org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding).length",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding)","org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding).encoding",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.archivers.tar.TarUtils.parsePAX01SparseHeaders(String),org.apache.commons.compress.archivers.tar.TarUtils.parsePAX01SparseHeaders(String).sparseMap,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parsePAX1XSparseHeaders(InputStream,int)","org.apache.commons.compress.archivers.tar.TarUtils.parsePAX1XSparseHeaders(InputStream,int).inputStream",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parsePAX1XSparseHeaders(InputStream,int)","org.apache.commons.compress.archivers.tar.TarUtils.parsePAX1XSparseHeaders(InputStream,int).recordSize",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map)","org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map).inputStream",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map)","org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map).sparseHeaders",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map)","org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map).globalPaxHeaders",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map,long)","org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map,long).inputStream",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map,long)","org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map,long).sparseHeaders",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map,long)","org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map,long).globalPaxHeaders",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map,long)","org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map,long).headerSize",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseSparse(byte[],int)","org.apache.commons.compress.archivers.tar.TarUtils.parseSparse(byte[],int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.parseSparse(byte[],int)","org.apache.commons.compress.archivers.tar.TarUtils.parseSparse(byte[],int).offset",Has_Parameter
org.apache.commons.compress.archivers.tar.TarUtils.readLineOfNumberForPax1X(InputStream),org.apache.commons.compress.archivers.tar.TarUtils.readLineOfNumberForPax1X(InputStream).inputStream,Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.readSparseStructs(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.readSparseStructs(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.readSparseStructs(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.readSparseStructs(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.archivers.tar.TarUtils.readSparseStructs(byte[],int,int)","org.apache.commons.compress.archivers.tar.TarUtils.readSparseStructs(byte[],int,int).entries",Has_Parameter
org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byte[]),org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byte[]).header,Has_Parameter
org.apache.commons.compress.archivers.ArchiveOutputStream.canWriteEntryData(ArchiveEntry),org.apache.commons.compress.archivers.ArchiveOutputStream.canWriteEntryData(ArchiveEntry).archiveEntry,Has_Parameter
org.apache.commons.compress.archivers.ArchiveOutputStream.count(int),org.apache.commons.compress.archivers.ArchiveOutputStream.count(int).written,Has_Parameter
org.apache.commons.compress.archivers.ArchiveOutputStream.count(long),org.apache.commons.compress.archivers.ArchiveOutputStream.count(long).written,Has_Parameter
"org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(File,String)","org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(File,String).inputFile",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(File,String)","org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(File,String).entryName",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])","org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).inputPath",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])","org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).entryName",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])","org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).options",Has_Parameter
org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(ArchiveEntry),org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(ArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.ArchiveOutputStream.write(int),org.apache.commons.compress.archivers.ArchiveOutputStream.write(int).b,Has_Parameter
org.apache.commons.compress.archivers.ArchiveOutputStream.<init>(OutputStream),org.apache.commons.compress.archivers.ArchiveOutputStream.<init>(OutputStream).out,Has_Parameter
org.apache.commons.compress.archivers.ArchiveInputStream.canReadEntryData(ArchiveEntry),org.apache.commons.compress.archivers.ArchiveInputStream.canReadEntryData(ArchiveEntry).archiveEntry,Has_Parameter
org.apache.commons.compress.archivers.ArchiveInputStream.count(int),org.apache.commons.compress.archivers.ArchiveInputStream.count(int).read,Has_Parameter
org.apache.commons.compress.archivers.ArchiveInputStream.count(long),org.apache.commons.compress.archivers.ArchiveInputStream.count(long).read,Has_Parameter
org.apache.commons.compress.archivers.ArchiveInputStream.forEach(IOConsumer),org.apache.commons.compress.archivers.ArchiveInputStream.forEach(IOConsumer).action,Has_Parameter
org.apache.commons.compress.archivers.ArchiveInputStream.mark(int),org.apache.commons.compress.archivers.ArchiveInputStream.mark(int).readlimit,Has_Parameter
org.apache.commons.compress.archivers.ArchiveInputStream.pushedBackBytes(long),org.apache.commons.compress.archivers.ArchiveInputStream.pushedBackBytes(long).pushedBack,Has_Parameter
"org.apache.commons.compress.archivers.ArchiveInputStream.<init>(InputStream,Charset)","org.apache.commons.compress.archivers.ArchiveInputStream.<init>(InputStream,Charset).inputStream",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveInputStream.<init>(InputStream,Charset)","org.apache.commons.compress.archivers.ArchiveInputStream.<init>(InputStream,Charset).charset",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveInputStream.<init>(InputStream,String)","org.apache.commons.compress.archivers.ArchiveInputStream.<init>(InputStream,String).inputStream",Has_Parameter
"org.apache.commons.compress.archivers.ArchiveInputStream.<init>(InputStream,String)","org.apache.commons.compress.archivers.ArchiveInputStream.<init>(InputStream,String).charsetName",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(File,String)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(File,String).inputFile",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(File,String)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(File,String).entryName",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).inputPath",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).entryName",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[]).options",Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.encode(String),org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.encode(String).str,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.pad(int),org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.pad(int).count,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(CpioArchiveEntry),org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(CpioArchiveEntry).entry,Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(byte[],int,int)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int).number",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int).radix",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(long,int,boolean)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(long,int,boolean).number",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(long,int,boolean)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(long,int,boolean).length",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(long,int,boolean)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(long,int,boolean).swapHalfWord",Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeCString(byte[]),org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeCString(byte[]).str,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(CpioArchiveEntry),org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(CpioArchiveEntry).e,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(CpioArchiveEntry),org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(CpioArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(CpioArchiveEntry),org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(CpioArchiveEntry).entry,Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(CpioArchiveEntry,boolean)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(CpioArchiveEntry,boolean).entry",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(CpioArchiveEntry,boolean)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(CpioArchiveEntry,boolean).swapHalfWord",Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream),org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream).out,Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short).out",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short).format",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int).out",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int).format",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int).blockSize",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int,String)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int,String).out",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int,String)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int,String).format",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int,String)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int,String).blockSize",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int,String)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int,String).encoding",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,String)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,String).out",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,String)","org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,String).encoding",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byte[],int)","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byte[],int).signature",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byte[],int)","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byte[],int).length",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readAsciiLong(int,int)","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readAsciiLong(int,int).length",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readAsciiLong(int,int)","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readAsciiLong(int,int).radix",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readBinaryLong(int,boolean)","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readBinaryLong(int,boolean).length",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readBinaryLong(int,boolean)","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readBinaryLong(int,boolean).swapHalfWord",Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readCString(int),org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readCString(int).length,Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(byte[],int,int)","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(byte[],int,int)","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(byte[],int,int)","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(boolean),org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(boolean).hasCrc,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(boolean),org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(boolean).swapHalfWord,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readRange(int),org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readRange(int).len,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(int),org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(int).length,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(long),org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(long).n,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream),org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream).in,Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,int)","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,int).in",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,int)","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,int).blockSize",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,int,String)","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,int,String).in",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,int,String)","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,int,String).blockSize",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,int,String)","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,int,String).encoding",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,String)","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,String).in",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,String)","org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,String).encoding",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioUtil.byteArray2long(byte[],boolean)","org.apache.commons.compress.archivers.cpio.CpioUtil.byteArray2long(byte[],boolean).number",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioUtil.byteArray2long(byte[],boolean)","org.apache.commons.compress.archivers.cpio.CpioUtil.byteArray2long(byte[],boolean).swapHalfWord",Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long),org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long).mode,Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(long,int,boolean)","org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(long,int,boolean).number",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(long,int,boolean)","org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(long,int,boolean).length",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(long,int,boolean)","org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(long,int,boolean).swapHalfWord",Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.equals(Object),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.equals(Object).obj,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(Charset),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(Charset).charset,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(long),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(long).nameSize,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setChksum(long),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setChksum(long).chksum,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDevice(long),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDevice(long).device,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMaj(long),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMaj(long).maj,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMin(long),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMin(long).min,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setGID(long),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setGID(long).gid,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setInode(long),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setInode(long).inode,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setMode(long),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setMode(long).mode,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setName(String),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setName(String).name,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setNumberOfLinks(long),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setNumberOfLinks(long).nlink,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDevice(long),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDevice(long).device,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMaj(long),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMaj(long).rmaj,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMin(long),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMin(long).rmin,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setSize(long),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setSize(long).size,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(FileTime),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(FileTime).time,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(long),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(long).time,Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setUID(long),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setUID(long).uid,Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(File,String)","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(File,String).inputFile",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(File,String)","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(File,String).entryName",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(Path,String,LinkOption[])","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(Path,String,LinkOption[]).inputPath",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(Path,String,LinkOption[])","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(Path,String,LinkOption[]).entryName",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(Path,String,LinkOption[])","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(Path,String,LinkOption[]).options",Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short).format,Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,File,String)","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,File,String).format",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,File,String)","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,File,String).inputFile",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,File,String)","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,File,String).entryName",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,Path,String,LinkOption[])","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,Path,String,LinkOption[]).format",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,Path,String,LinkOption[])","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,Path,String,LinkOption[]).inputPath",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,Path,String,LinkOption[])","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,Path,String,LinkOption[]).entryName",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,Path,String,LinkOption[])","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,Path,String,LinkOption[]).options",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,String)","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,String).format",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,String)","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,String).name",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,String,long)","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,String,long).format",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,String,long)","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,String,long).name",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,String,long)","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,String,long).size",Has_Parameter
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(String),org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(String).name,Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(String,long)","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(String,long).name",Has_Parameter
"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(String,long)","org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(String,long).size",Has_Parameter
"org.apache.commons.compress.java.util.jar.Pack200.newInstance(String,String)","org.apache.commons.compress.java.util.jar.Pack200.newInstance(String,String).systemProperty",Has_Parameter
"org.apache.commons.compress.java.util.jar.Pack200.newInstance(String,String)","org.apache.commons.compress.java.util.jar.Pack200.newInstance(String,String).defaultClassName",Has_Parameter
org.apache.commons.compress.java.util.jar.Pack200$Packer.addPropertyChangeListener(PropertyChangeListener),org.apache.commons.compress.java.util.jar.Pack200$Packer.addPropertyChangeListener(PropertyChangeListener).listener,Has_Parameter
"org.apache.commons.compress.java.util.jar.Pack200$Packer.pack(JarFile,OutputStream)","org.apache.commons.compress.java.util.jar.Pack200$Packer.pack(JarFile,OutputStream).in",Has_Parameter
"org.apache.commons.compress.java.util.jar.Pack200$Packer.pack(JarFile,OutputStream)","org.apache.commons.compress.java.util.jar.Pack200$Packer.pack(JarFile,OutputStream).out",Has_Parameter
"org.apache.commons.compress.java.util.jar.Pack200$Packer.pack(JarInputStream,OutputStream)","org.apache.commons.compress.java.util.jar.Pack200$Packer.pack(JarInputStream,OutputStream).in",Has_Parameter
"org.apache.commons.compress.java.util.jar.Pack200$Packer.pack(JarInputStream,OutputStream)","org.apache.commons.compress.java.util.jar.Pack200$Packer.pack(JarInputStream,OutputStream).out",Has_Parameter
org.apache.commons.compress.java.util.jar.Pack200$Packer.removePropertyChangeListener(PropertyChangeListener),org.apache.commons.compress.java.util.jar.Pack200$Packer.removePropertyChangeListener(PropertyChangeListener).listener,Has_Parameter
org.apache.commons.compress.java.util.jar.Pack200$Unpacker.addPropertyChangeListener(PropertyChangeListener),org.apache.commons.compress.java.util.jar.Pack200$Unpacker.addPropertyChangeListener(PropertyChangeListener).listener,Has_Parameter
org.apache.commons.compress.java.util.jar.Pack200$Unpacker.removePropertyChangeListener(PropertyChangeListener),org.apache.commons.compress.java.util.jar.Pack200$Unpacker.removePropertyChangeListener(PropertyChangeListener).listener,Has_Parameter
"org.apache.commons.compress.java.util.jar.Pack200$Unpacker.unpack(File,JarOutputStream)","org.apache.commons.compress.java.util.jar.Pack200$Unpacker.unpack(File,JarOutputStream).in",Has_Parameter
"org.apache.commons.compress.java.util.jar.Pack200$Unpacker.unpack(File,JarOutputStream)","org.apache.commons.compress.java.util.jar.Pack200$Unpacker.unpack(File,JarOutputStream).out",Has_Parameter
"org.apache.commons.compress.java.util.jar.Pack200$Unpacker.unpack(InputStream,JarOutputStream)","org.apache.commons.compress.java.util.jar.Pack200$Unpacker.unpack(InputStream,JarOutputStream).in",Has_Parameter
"org.apache.commons.compress.java.util.jar.Pack200$Unpacker.unpack(InputStream,JarOutputStream)","org.apache.commons.compress.java.util.jar.Pack200$Unpacker.unpack(InputStream,JarOutputStream).out",Has_Parameter
"org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,int)","org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,int).in",Has_Parameter
"org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,int)","org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,int).size",Has_Parameter
"org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,int)","org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,int).expectedCrc32",Has_Parameter
"org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,long)","org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,long).in",Has_Parameter
"org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,long)","org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,long).size",Has_Parameter
"org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,long)","org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,long).expectedCrc32",Has_Parameter
org.apache.commons.compress.utils.IOUtils.closeQuietly(Closeable),org.apache.commons.compress.utils.IOUtils.closeQuietly(Closeable).c,Has_Parameter
"org.apache.commons.compress.utils.IOUtils.copy(File,OutputStream)","org.apache.commons.compress.utils.IOUtils.copy(File,OutputStream).sourceFile",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.copy(File,OutputStream)","org.apache.commons.compress.utils.IOUtils.copy(File,OutputStream).outputStream",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream)","org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream).input",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream)","org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream).output",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream,int)","org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream,int).input",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream,int)","org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream,int).output",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream,int)","org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream,int).bufferSize",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream)","org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream).input",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream)","org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream).len",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream)","org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream).output",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream,int)","org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream,int).input",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream,int)","org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream,int).length",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream,int)","org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream,int).output",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream,int)","org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream,int).bufferSize",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.read(File,byte[])","org.apache.commons.compress.utils.IOUtils.read(File,byte[]).file",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.read(File,byte[])","org.apache.commons.compress.utils.IOUtils.read(File,byte[]).array",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[])","org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[]).input",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[])","org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[]).array",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int)","org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int).input",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int)","org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int).array",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int)","org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int)","org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer)","org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer).channel",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer)","org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer).byteBuffer",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.readRange(InputStream,int)","org.apache.commons.compress.utils.IOUtils.readRange(InputStream,int).input",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.readRange(InputStream,int)","org.apache.commons.compress.utils.IOUtils.readRange(InputStream,int).length",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.readRange(ReadableByteChannel,int)","org.apache.commons.compress.utils.IOUtils.readRange(ReadableByteChannel,int).input",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.readRange(ReadableByteChannel,int)","org.apache.commons.compress.utils.IOUtils.readRange(ReadableByteChannel,int).length",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.skip(InputStream,long)","org.apache.commons.compress.utils.IOUtils.skip(InputStream,long).input",Has_Parameter
"org.apache.commons.compress.utils.IOUtils.skip(InputStream,long)","org.apache.commons.compress.utils.IOUtils.skip(InputStream,long).toSkip",Has_Parameter
org.apache.commons.compress.utils.IOUtils.toByteArray(InputStream),org.apache.commons.compress.utils.IOUtils.toByteArray(InputStream).input,Has_Parameter
org.apache.commons.compress.utils.Sets.newHashSet(Object[]),org.apache.commons.compress.utils.Sets.newHashSet(Object[]).elements,Has_Parameter
org.apache.commons.compress.utils.ByteUtils.checkReadLength(int),org.apache.commons.compress.utils.ByteUtils.checkReadLength(int).length,Has_Parameter
org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[]),org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[]).bytes,Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[],int,int)","org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[],int,int).bytes",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[],int,int)","org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[],int,int)","org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(ByteSupplier,int)","org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(ByteSupplier,int).supplier",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(ByteSupplier,int)","org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(ByteSupplier,int).length",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(DataInput,int)","org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(DataInput,int).in",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(DataInput,int)","org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(DataInput,int).length",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(InputStream,int)","org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(InputStream,int).in",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(InputStream,int)","org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(InputStream,int).length",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(byte[],long,int,int)","org.apache.commons.compress.utils.ByteUtils.toLittleEndian(byte[],long,int,int).b",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(byte[],long,int,int)","org.apache.commons.compress.utils.ByteUtils.toLittleEndian(byte[],long,int,int).value",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(byte[],long,int,int)","org.apache.commons.compress.utils.ByteUtils.toLittleEndian(byte[],long,int,int).off",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(byte[],long,int,int)","org.apache.commons.compress.utils.ByteUtils.toLittleEndian(byte[],long,int,int).length",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(ByteConsumer,long,int)","org.apache.commons.compress.utils.ByteUtils.toLittleEndian(ByteConsumer,long,int).consumer",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(ByteConsumer,long,int)","org.apache.commons.compress.utils.ByteUtils.toLittleEndian(ByteConsumer,long,int).value",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(ByteConsumer,long,int)","org.apache.commons.compress.utils.ByteUtils.toLittleEndian(ByteConsumer,long,int).length",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(DataOutput,long,int)","org.apache.commons.compress.utils.ByteUtils.toLittleEndian(DataOutput,long,int).out",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(DataOutput,long,int)","org.apache.commons.compress.utils.ByteUtils.toLittleEndian(DataOutput,long,int).value",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(DataOutput,long,int)","org.apache.commons.compress.utils.ByteUtils.toLittleEndian(DataOutput,long,int).length",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(OutputStream,long,int)","org.apache.commons.compress.utils.ByteUtils.toLittleEndian(OutputStream,long,int).out",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(OutputStream,long,int)","org.apache.commons.compress.utils.ByteUtils.toLittleEndian(OutputStream,long,int).value",Has_Parameter
"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(OutputStream,long,int)","org.apache.commons.compress.utils.ByteUtils.toLittleEndian(OutputStream,long,int).length",Has_Parameter
org.apache.commons.compress.utils.ByteUtils$ByteConsumer.accept(int),org.apache.commons.compress.utils.ByteUtils$ByteConsumer.accept(int).b,Has_Parameter
org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier.<init>(InputStream),org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier.<init>(InputStream).is,Has_Parameter
org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer.accept(int),org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer.accept(int).b,Has_Parameter
org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer.<init>(OutputStream),org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer.<init>(OutputStream).os,Has_Parameter
"org.apache.commons.compress.utils.Iterators.addAll(Collection,Iterator)","org.apache.commons.compress.utils.Iterators.addAll(Collection,Iterator).collection",Has_Parameter
"org.apache.commons.compress.utils.Iterators.addAll(Collection,Iterator)","org.apache.commons.compress.utils.Iterators.addAll(Collection,Iterator).iterator",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isArrayZero(byte[],int)","org.apache.commons.compress.utils.ArchiveUtils.isArrayZero(byte[],int).a",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isArrayZero(byte[],int)","org.apache.commons.compress.utils.ArchiveUtils.isArrayZero(byte[],int).size",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[])","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[]).buffer1",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[])","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[]).buffer2",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[],boolean)","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[],boolean).buffer1",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[],boolean)","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[],boolean).buffer2",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[],boolean)","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[],boolean).ignoreTrailingNulls",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int)","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int).buffer1",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int)","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int).offset1",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int)","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int).length1",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int)","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int).buffer2",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int)","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int).offset2",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int)","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int).length2",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean)","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean).buffer1",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean)","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean).offset1",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean)","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean).length1",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean)","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean).buffer2",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean)","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean).offset2",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean)","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean).length2",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean)","org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean).ignoreTrailingNulls",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int)","org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int).buffer1",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int)","org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int).offset1",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int)","org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int).length1",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int)","org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int).buffer2",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int)","org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int).offset2",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int)","org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int).length2",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[])","org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[]).expected",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[])","org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[]).buffer",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int)","org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int).expected",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int)","org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int)","org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int)","org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int).length",Has_Parameter
org.apache.commons.compress.utils.ArchiveUtils.sanitize(String),org.apache.commons.compress.utils.ArchiveUtils.sanitize(String).s,Has_Parameter
org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(String),org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(String).inputString,Has_Parameter
org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[]),org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[]).inputBytes,Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[],int,int)","org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[],int,int).inputBytes",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[],int,int)","org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[],int,int)","org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.utils.ArchiveUtils.toString(ArchiveEntry),org.apache.commons.compress.utils.ArchiveUtils.toString(ArchiveEntry).entry,Has_Parameter
org.apache.commons.compress.utils.OsgiUtils.isBundleReference(Class),org.apache.commons.compress.utils.OsgiUtils.isBundleReference(Class).clazz,Has_Parameter
org.apache.commons.compress.utils.Charsets.toCharset(Charset),org.apache.commons.compress.utils.Charsets.toCharset(Charset).charset,Has_Parameter
org.apache.commons.compress.utils.Charsets.toCharset(String),org.apache.commons.compress.utils.Charsets.toCharset(String).charset,Has_Parameter
"org.apache.commons.compress.utils.ExactMath.add(int,long)","org.apache.commons.compress.utils.ExactMath.add(int,long).x",Has_Parameter
"org.apache.commons.compress.utils.ExactMath.add(int,long)","org.apache.commons.compress.utils.ExactMath.add(int,long).y",Has_Parameter
"org.apache.commons.compress.utils.BoundedArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.utils.BoundedArchiveInputStream.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.utils.BoundedArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.utils.BoundedArchiveInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.utils.BoundedArchiveInputStream.read(byte[],int,int)","org.apache.commons.compress.utils.BoundedArchiveInputStream.read(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.utils.BoundedArchiveInputStream.read(long,ByteBuffer)","org.apache.commons.compress.utils.BoundedArchiveInputStream.read(long,ByteBuffer).pos",Has_Parameter
"org.apache.commons.compress.utils.BoundedArchiveInputStream.read(long,ByteBuffer)","org.apache.commons.compress.utils.BoundedArchiveInputStream.read(long,ByteBuffer).buf",Has_Parameter
"org.apache.commons.compress.utils.BoundedArchiveInputStream.<init>(long,long)","org.apache.commons.compress.utils.BoundedArchiveInputStream.<init>(long,long).start",Has_Parameter
"org.apache.commons.compress.utils.BoundedArchiveInputStream.<init>(long,long)","org.apache.commons.compress.utils.BoundedArchiveInputStream.<init>(long,long).remaining",Has_Parameter
org.apache.commons.compress.utils.Lists.newArrayList(Iterator),org.apache.commons.compress.utils.Lists.newArrayList(Iterator).iterator,Has_Parameter
"org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(byte[],int,int)","org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(byte[],int,int)","org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(byte[],int,int)","org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.utils.ChecksumVerifyingInputStream.<init>(Checksum,InputStream,long,long)","org.apache.commons.compress.utils.ChecksumVerifyingInputStream.<init>(Checksum,InputStream,long,long).checksum",Has_Parameter
"org.apache.commons.compress.utils.ChecksumVerifyingInputStream.<init>(Checksum,InputStream,long,long)","org.apache.commons.compress.utils.ChecksumVerifyingInputStream.<init>(Checksum,InputStream,long,long).in",Has_Parameter
"org.apache.commons.compress.utils.ChecksumVerifyingInputStream.<init>(Checksum,InputStream,long,long)","org.apache.commons.compress.utils.ChecksumVerifyingInputStream.<init>(Checksum,InputStream,long,long).size",Has_Parameter
"org.apache.commons.compress.utils.ChecksumVerifyingInputStream.<init>(Checksum,InputStream,long,long)","org.apache.commons.compress.utils.ChecksumVerifyingInputStream.<init>(Checksum,InputStream,long,long).expectedChecksum",Has_Parameter
org.apache.commons.compress.utils.SkipShieldingInputStream.skip(long),org.apache.commons.compress.utils.SkipShieldingInputStream.skip(long).n,Has_Parameter
org.apache.commons.compress.utils.SkipShieldingInputStream.<init>(InputStream),org.apache.commons.compress.utils.SkipShieldingInputStream.<init>(InputStream).in,Has_Parameter
"org.apache.commons.compress.utils.ChecksumCalculatingInputStream.<init>(Checksum,InputStream)","org.apache.commons.compress.utils.ChecksumCalculatingInputStream.<init>(Checksum,InputStream).checksum",Has_Parameter
"org.apache.commons.compress.utils.ChecksumCalculatingInputStream.<init>(Checksum,InputStream)","org.apache.commons.compress.utils.ChecksumCalculatingInputStream.<init>(Checksum,InputStream).inputStream",Has_Parameter
"org.apache.commons.compress.utils.BoundedInputStream.<init>(InputStream,long)","org.apache.commons.compress.utils.BoundedInputStream.<init>(InputStream,long).in",Has_Parameter
"org.apache.commons.compress.utils.BoundedInputStream.<init>(InputStream,long)","org.apache.commons.compress.utils.BoundedInputStream.<init>(InputStream,long).size",Has_Parameter
org.apache.commons.compress.utils.FlushShieldFilterOutputStream.<init>(OutputStream),org.apache.commons.compress.utils.FlushShieldFilterOutputStream.<init>(OutputStream).out,Has_Parameter
"org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(byte[],int,int)","org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(byte[],int,int)","org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(byte[],int,int)","org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(ByteBuffer),org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(ByteBuffer).src,Has_Parameter
org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(int),org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(int).b,Has_Parameter
"org.apache.commons.compress.utils.FixedLengthBlockOutputStream.<init>(OutputStream,int)","org.apache.commons.compress.utils.FixedLengthBlockOutputStream.<init>(OutputStream,int).os",Has_Parameter
"org.apache.commons.compress.utils.FixedLengthBlockOutputStream.<init>(OutputStream,int)","org.apache.commons.compress.utils.FixedLengthBlockOutputStream.<init>(OutputStream,int).blockSize",Has_Parameter
"org.apache.commons.compress.utils.FixedLengthBlockOutputStream.<init>(WritableByteChannel,int)","org.apache.commons.compress.utils.FixedLengthBlockOutputStream.<init>(WritableByteChannel,int).out",Has_Parameter
"org.apache.commons.compress.utils.FixedLengthBlockOutputStream.<init>(WritableByteChannel,int)","org.apache.commons.compress.utils.FixedLengthBlockOutputStream.<init>(WritableByteChannel,int).blockSize",Has_Parameter
org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.write(ByteBuffer),org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.write(ByteBuffer).buffer,Has_Parameter
org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.<init>(OutputStream),org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.<init>(OutputStream).out,Has_Parameter
org.apache.commons.compress.utils.BitInputStream.ensureCache(int),org.apache.commons.compress.utils.BitInputStream.ensureCache(int).count,Has_Parameter
org.apache.commons.compress.utils.BitInputStream.processBitsGreater57(int),org.apache.commons.compress.utils.BitInputStream.processBitsGreater57(int).count,Has_Parameter
org.apache.commons.compress.utils.BitInputStream.readBits(int),org.apache.commons.compress.utils.BitInputStream.readBits(int).count,Has_Parameter
org.apache.commons.compress.utils.BitInputStream.readCachedBits(int),org.apache.commons.compress.utils.BitInputStream.readCachedBits(int).count,Has_Parameter
"org.apache.commons.compress.utils.BitInputStream.<init>(InputStream,ByteOrder)","org.apache.commons.compress.utils.BitInputStream.<init>(InputStream,ByteOrder).in",Has_Parameter
"org.apache.commons.compress.utils.BitInputStream.<init>(InputStream,ByteOrder)","org.apache.commons.compress.utils.BitInputStream.<init>(InputStream,ByteOrder).byteOrder",Has_Parameter
org.apache.commons.compress.utils.TimeUtils.isUnixTime(FileTime),org.apache.commons.compress.utils.TimeUtils.isUnixTime(FileTime).time,Has_Parameter
org.apache.commons.compress.utils.TimeUtils.isUnixTime(long),org.apache.commons.compress.utils.TimeUtils.isUnixTime(long).seconds,Has_Parameter
org.apache.commons.compress.utils.TimeUtils.ntfsTimeToDate(long),org.apache.commons.compress.utils.TimeUtils.ntfsTimeToDate(long).ntfsTime,Has_Parameter
org.apache.commons.compress.utils.TimeUtils.ntfsTimeToFileTime(long),org.apache.commons.compress.utils.TimeUtils.ntfsTimeToFileTime(long).ntfsTime,Has_Parameter
org.apache.commons.compress.utils.TimeUtils.toDate(FileTime),org.apache.commons.compress.utils.TimeUtils.toDate(FileTime).fileTime,Has_Parameter
org.apache.commons.compress.utils.TimeUtils.toFileTime(Date),org.apache.commons.compress.utils.TimeUtils.toFileTime(Date).date,Has_Parameter
org.apache.commons.compress.utils.TimeUtils.toNtfsTime(Date),org.apache.commons.compress.utils.TimeUtils.toNtfsTime(Date).date,Has_Parameter
org.apache.commons.compress.utils.TimeUtils.toNtfsTime(FileTime),org.apache.commons.compress.utils.TimeUtils.toNtfsTime(FileTime).fileTime,Has_Parameter
org.apache.commons.compress.utils.TimeUtils.toNtfsTime(long),org.apache.commons.compress.utils.TimeUtils.toNtfsTime(long).javaTime,Has_Parameter
org.apache.commons.compress.utils.TimeUtils.toUnixTime(FileTime),org.apache.commons.compress.utils.TimeUtils.toUnixTime(FileTime).fileTime,Has_Parameter
org.apache.commons.compress.utils.TimeUtils.truncateToHundredNanos(FileTime),org.apache.commons.compress.utils.TimeUtils.truncateToHundredNanos(FileTime).fileTime,Has_Parameter
org.apache.commons.compress.utils.TimeUtils.unixTimeToFileTime(long),org.apache.commons.compress.utils.TimeUtils.unixTimeToFileTime(long).time,Has_Parameter
org.apache.commons.compress.utils.CountingOutputStream.count(long),org.apache.commons.compress.utils.CountingOutputStream.count(long).written,Has_Parameter
org.apache.commons.compress.utils.CountingOutputStream.write(byte[]),org.apache.commons.compress.utils.CountingOutputStream.write(byte[]).b,Has_Parameter
"org.apache.commons.compress.utils.CountingOutputStream.write(byte[],int,int)","org.apache.commons.compress.utils.CountingOutputStream.write(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.utils.CountingOutputStream.write(byte[],int,int)","org.apache.commons.compress.utils.CountingOutputStream.write(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.utils.CountingOutputStream.write(byte[],int,int)","org.apache.commons.compress.utils.CountingOutputStream.write(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.utils.CountingOutputStream.write(int),org.apache.commons.compress.utils.CountingOutputStream.write(int).b,Has_Parameter
org.apache.commons.compress.utils.CountingOutputStream.<init>(OutputStream),org.apache.commons.compress.utils.CountingOutputStream.<init>(OutputStream).out,Has_Parameter
org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String),org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String).value,Has_Parameter
"org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String,int)","org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String,int).value",Has_Parameter
"org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String,int)","org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String,int).radix",Has_Parameter
org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String),org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String).value,Has_Parameter
"org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String,int)","org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String,int).value",Has_Parameter
"org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String,int)","org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String,int).radix",Has_Parameter
org.apache.commons.compress.utils.CountingInputStream.count(long),org.apache.commons.compress.utils.CountingInputStream.count(long).read,Has_Parameter
org.apache.commons.compress.utils.CountingInputStream.read(byte[]),org.apache.commons.compress.utils.CountingInputStream.read(byte[]).b,Has_Parameter
"org.apache.commons.compress.utils.CountingInputStream.read(byte[],int,int)","org.apache.commons.compress.utils.CountingInputStream.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.utils.CountingInputStream.read(byte[],int,int)","org.apache.commons.compress.utils.CountingInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.utils.CountingInputStream.read(byte[],int,int)","org.apache.commons.compress.utils.CountingInputStream.read(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.utils.CountingInputStream.<init>(InputStream),org.apache.commons.compress.utils.CountingInputStream.<init>(InputStream).in,Has_Parameter
org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long),org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long).newPosition,Has_Parameter
org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer),org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer).buf,Has_Parameter
org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(int),org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(int).newLength,Has_Parameter
org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long),org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long).newSize,Has_Parameter
org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer),org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer).b,Has_Parameter
org.apache.commons.compress.utils.SeekableInMemoryByteChannel.<init>(byte[]),org.apache.commons.compress.utils.SeekableInMemoryByteChannel.<init>(byte[]).data,Has_Parameter
org.apache.commons.compress.utils.SeekableInMemoryByteChannel.<init>(int),org.apache.commons.compress.utils.SeekableInMemoryByteChannel.<init>(int).size,Has_Parameter
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forFiles(File[]),org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forFiles(File[]).files,Has_Parameter
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forPaths(Path[]),org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forPaths(Path[]).paths,Has_Parameter
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(SeekableByteChannel[]),org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(SeekableByteChannel[]).channels,Has_Parameter
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.position(long),org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.position(long).newPosition,Has_Parameter
"org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.position(long,long)","org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.position(long,long).channelNumber",Has_Parameter
"org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.position(long,long)","org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.position(long,long).relativeOffset",Has_Parameter
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.read(ByteBuffer),org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.read(ByteBuffer).dst,Has_Parameter
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.truncate(long),org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.truncate(long).size,Has_Parameter
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.write(ByteBuffer),org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.write(ByteBuffer).src,Has_Parameter
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.<init>(List),org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.<init>(List).channels,Has_Parameter
org.apache.commons.compress.utils.FileNameUtils.getBaseName(Path),org.apache.commons.compress.utils.FileNameUtils.getBaseName(Path).path,Has_Parameter
org.apache.commons.compress.utils.FileNameUtils.getBaseName(String),org.apache.commons.compress.utils.FileNameUtils.getBaseName(String).fileName,Has_Parameter
org.apache.commons.compress.utils.FileNameUtils.getExtension(Path),org.apache.commons.compress.utils.FileNameUtils.getExtension(Path).path,Has_Parameter
org.apache.commons.compress.utils.FileNameUtils.getExtension(String),org.apache.commons.compress.utils.FileNameUtils.getExtension(String).fileName,Has_Parameter
org.apache.commons.compress.utils.CloseShieldFilterInputStream.<init>(InputStream),org.apache.commons.compress.utils.CloseShieldFilterInputStream.<init>(InputStream).in,Has_Parameter
"org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.read(long,ByteBuffer)","org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.read(long,ByteBuffer).pos",Has_Parameter
"org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.read(long,ByteBuffer)","org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.read(long,ByteBuffer).buf",Has_Parameter
"org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.<init>(long,long,SeekableByteChannel)","org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.<init>(long,long,SeekableByteChannel).start",Has_Parameter
"org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.<init>(long,long,SeekableByteChannel)","org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.<init>(long,long,SeekableByteChannel).remaining",Has_Parameter
"org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.<init>(long,long,SeekableByteChannel)","org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.<init>(long,long,SeekableByteChannel).channel",Has_Parameter
org.apache.commons.compress.utils.ServiceLoaderIterator.<init>(Class),org.apache.commons.compress.utils.ServiceLoaderIterator.<init>(Class).service,Has_Parameter
"org.apache.commons.compress.utils.ServiceLoaderIterator.<init>(Class,ClassLoader)","org.apache.commons.compress.utils.ServiceLoaderIterator.<init>(Class,ClassLoader).service",Has_Parameter
"org.apache.commons.compress.utils.ServiceLoaderIterator.<init>(Class,ClassLoader)","org.apache.commons.compress.utils.ServiceLoaderIterator.<init>(Class,ClassLoader).classLoader",Has_Parameter
"org.apache.commons.compress.CompressFilterOutputStream.write(OutputStream,String,Charset)","org.apache.commons.compress.CompressFilterOutputStream.write(OutputStream,String,Charset).os",Has_Parameter
"org.apache.commons.compress.CompressFilterOutputStream.write(OutputStream,String,Charset)","org.apache.commons.compress.CompressFilterOutputStream.write(OutputStream,String,Charset).data",Has_Parameter
"org.apache.commons.compress.CompressFilterOutputStream.write(OutputStream,String,Charset)","org.apache.commons.compress.CompressFilterOutputStream.write(OutputStream,String,Charset).charset",Has_Parameter
org.apache.commons.compress.CompressFilterOutputStream.write(File),org.apache.commons.compress.CompressFilterOutputStream.write(File).file,Has_Parameter
org.apache.commons.compress.CompressFilterOutputStream.write(Path),org.apache.commons.compress.CompressFilterOutputStream.write(Path).path,Has_Parameter
org.apache.commons.compress.CompressFilterOutputStream.writeUsAscii(String),org.apache.commons.compress.CompressFilterOutputStream.writeUsAscii(String).data,Has_Parameter
org.apache.commons.compress.CompressFilterOutputStream.writeUsAsciiRaw(String),org.apache.commons.compress.CompressFilterOutputStream.writeUsAsciiRaw(String).data,Has_Parameter
org.apache.commons.compress.CompressFilterOutputStream.writeUtf8(String),org.apache.commons.compress.CompressFilterOutputStream.writeUtf8(String).data,Has_Parameter
org.apache.commons.compress.CompressFilterOutputStream.<init>(OutputStream),org.apache.commons.compress.CompressFilterOutputStream.<init>(OutputStream).out,Has_Parameter
org.apache.commons.compress.compressors.CompressorOutputStream.<init>(OutputStream),org.apache.commons.compress.compressors.CompressorOutputStream.<init>(OutputStream).out,Has_Parameter
"org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.read(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.<init>(HuffmanDecoder),org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.<init>(HuffmanDecoder).decoder,Has_Parameter
org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.<init>(InputStream),org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.<init>(InputStream).in,Has_Parameter
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.buildTree(int[]),org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.buildTree(int[]).litTable,Has_Parameter
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.getCodes(int[]),org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.getCodes(int[]).litTable,Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.nextSymbol(BitInputStream,BinaryTreeNode)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.nextSymbol(BitInputStream,BinaryTreeNode).reader",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.nextSymbol(BitInputStream,BinaryTreeNode)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.nextSymbol(BitInputStream,BinaryTreeNode).tree",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.populateDynamicTables(BitInputStream,int[],int[])","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.populateDynamicTables(BitInputStream,int[],int[]).reader",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.populateDynamicTables(BitInputStream,int[],int[])","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.populateDynamicTables(BitInputStream,int[],int[]).literals",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.populateDynamicTables(BitInputStream,int[],int[])","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.populateDynamicTables(BitInputStream,int[],int[]).distances",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.readBits(BitInputStream,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.readBits(BitInputStream,int).reader",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.readBits(BitInputStream,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.readBits(BitInputStream,int).numBits",Has_Parameter
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.decode(byte[]),org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.decode(byte[]).b,Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.decode(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.decode(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.decode(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.decode(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.decode(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.decode(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.readBits(int),org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.readBits(int).numBits,Has_Parameter
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.<init>(InputStream),org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.<init>(InputStream).in,Has_Parameter
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode.leaf(int),org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode.leaf(int).symbol,Has_Parameter
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode.<init>(int),org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode.<init>(int).bits,Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState.read(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState.read(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState.read(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState.read(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.add(byte),org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.add(byte).b,Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.add(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.add(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.add(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.add(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.add(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.add(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.incCounter(int),org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.incCounter(int).counter,Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.recordToBuffer(int,int,byte[])","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.recordToBuffer(int,int,byte[]).distance",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.recordToBuffer(int,int,byte[])","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.recordToBuffer(int,int,byte[]).length",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.recordToBuffer(int,int,byte[])","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.recordToBuffer(int,int,byte[]).buff",Has_Parameter
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.<init>(int),org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.<init>(int).bits,Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.copyFromRunBuffer(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.copyFromRunBuffer(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.copyFromRunBuffer(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.copyFromRunBuffer(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.copyFromRunBuffer(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.copyFromRunBuffer(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.decodeNext(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.decodeNext(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.decodeNext(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.decodeNext(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.decodeNext(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.decodeNext(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.read(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.read(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.read(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.read(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState.read(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState.read(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState.read(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState.read(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState.read(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState.read(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState.read(byte[],int,int)","org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState.read(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.mark(int),org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.mark(int).readLimit,Has_Parameter
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.read(byte[]),org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.read(byte[]).b,Has_Parameter
"org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.read(byte[],int,int).buf",Has_Parameter
"org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.read(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.skip(long),org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.skip(long).n,Has_Parameter
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.<init>(InputStream),org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.<init>(InputStream).inputStream,Has_Parameter
org.apache.commons.compress.compressors.brotli.BrotliUtils.setCacheBrotliAvailablity(boolean),org.apache.commons.compress.compressors.brotli.BrotliUtils.setCacheBrotliAvailablity(boolean).doCache,Has_Parameter
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.read(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.<init>(InputStream),org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.<init>(InputStream).is,Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.appendToBlockDependencyBuffer(byte[],int,int)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.appendToBlockDependencyBuffer(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.appendToBlockDependencyBuffer(byte[],int,int)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.appendToBlockDependencyBuffer(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.appendToBlockDependencyBuffer(byte[],int,int)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.appendToBlockDependencyBuffer(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.write(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.write(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.write(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.write(int),org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.write(int).b,Has_Parameter
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.<init>(OutputStream),org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.<init>(OutputStream).out,Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.<init>(OutputStream,Parameters)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.<init>(OutputStream,Parameters).out",Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.<init>(OutputStream,Parameters)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.<init>(OutputStream,Parameters).params",Has_Parameter
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize),org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize).blockSize,Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize,boolean,boolean,boolean)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize,boolean,boolean,boolean).blockSize",Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize,boolean,boolean,boolean)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize,boolean,boolean,boolean).withContentChecksum",Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize,boolean,boolean,boolean)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize,boolean,boolean,boolean).withBlockChecksum",Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize,boolean,boolean,boolean)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize,boolean,boolean,boolean).withBlockDependency",Has_Parameter
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.isSkippableFrameSignature(byte[]),org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.isSkippableFrameSignature(byte[]).b,Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.matches(byte[],int)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.matches(byte[],int).signature",Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.matches(byte[],int)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.matches(byte[],int).length",Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.appendToBlockDependencyBuffer(byte[],int,int)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.appendToBlockDependencyBuffer(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.appendToBlockDependencyBuffer(byte[],int,int)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.appendToBlockDependencyBuffer(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.appendToBlockDependencyBuffer(byte[],int,int)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.appendToBlockDependencyBuffer(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.init(boolean),org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.init(boolean).firstFrame,Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.read(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.readOnce(byte[],int,int)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.readOnce(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.readOnce(byte[],int,int)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.readOnce(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.readOnce(byte[],int,int)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.readOnce(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.readSignature(boolean),org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.readSignature(boolean).firstFrame,Has_Parameter
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.skipSkippableFrame(byte[]),org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.skipSkippableFrame(byte[]).b,Has_Parameter
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<init>(InputStream),org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<init>(InputStream).in,Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<init>(InputStream,boolean)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<init>(InputStream,boolean).in",Has_Parameter
"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<init>(InputStream,boolean)","org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<init>(InputStream,boolean).decompressConcatenated",Has_Parameter
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.expand(int,int)","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.expand(int,int).offset",Has_Parameter
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.expand(int,int)","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.expand(int,int).length",Has_Parameter
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.expandFromList(byte[],int,int)","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.expandFromList(byte[],int,int).expanded",Has_Parameter
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.expandFromList(byte[],int,int)","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.expandFromList(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.expandFromList(byte[],int,int)","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.expandFromList(byte[],int,int).length",Has_Parameter
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.prefill(byte[],int,int)","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.prefill(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.prefill(byte[],int,int)","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.prefill(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.prefill(byte[],int,int)","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.prefill(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.recordLiteral(byte[]),org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.recordLiteral(byte[]).b,Has_Parameter
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.write(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.write(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.write(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.write(int),org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.write(int).b,Has_Parameter
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.writeBlocksAndReturnUnfinishedPair(int),org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.writeBlocksAndReturnUnfinishedPair(int).length,Has_Parameter
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.writeWritablePairs(int),org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.writeWritablePairs(int).lengthOfBlocksAfterLastPair,Has_Parameter
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.<init>(OutputStream),org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.<init>(OutputStream).out,Has_Parameter
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.<init>(OutputStream,Parameters)","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.<init>(OutputStream,Parameters).out",Has_Parameter
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.<init>(OutputStream,Parameters)","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.<init>(OutputStream,Parameters).params",Has_Parameter
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.lengths(int,int)","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.lengths(int,int).litLength",Has_Parameter
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.lengths(int,int)","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.lengths(int,int).brLength",Has_Parameter
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.writeLength(int,OutputStream)","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.writeLength(int,OutputStream).length",Has_Parameter
"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.writeLength(int,OutputStream)","org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.writeLength(int,OutputStream).out",Has_Parameter
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.canBeWritten(int),org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.canBeWritten(int).lengthOfBlocksAfterThisPair,Has_Parameter
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.prependLiteral(byte[]),org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.prependLiteral(byte[]).data,Has_Parameter
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.splitWithNewBackReferenceLengthOf(int),org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.splitWithNewBackReferenceLengthOf(int).newBackReferenceLength,Has_Parameter
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.writeTo(OutputStream),org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.writeTo(OutputStream).out,Has_Parameter
org.apache.commons.compress.compressors.lz4.XXHash32.<init>(int),org.apache.commons.compress.compressors.lz4.XXHash32.<init>(int).seed,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipParameters.equals(Object),org.apache.commons.compress.compressors.gzip.GzipParameters.equals(Object).obj,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipParameters.requireNonNulByte(String),org.apache.commons.compress.compressors.gzip.GzipParameters.requireNonNulByte(String).text,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipParameters.setBufferSize(int),org.apache.commons.compress.compressors.gzip.GzipParameters.setBufferSize(int).bufferSize,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipParameters.setComment(String),org.apache.commons.compress.compressors.gzip.GzipParameters.setComment(String).comment,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipParameters.setCompressionLevel(int),org.apache.commons.compress.compressors.gzip.GzipParameters.setCompressionLevel(int).compressionLevel,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipParameters.setDeflateStrategy(int),org.apache.commons.compress.compressors.gzip.GzipParameters.setDeflateStrategy(int).deflateStrategy,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipParameters.setExtraField(ExtraField),org.apache.commons.compress.compressors.gzip.GzipParameters.setExtraField(ExtraField).extra,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipParameters.setFilename(String),org.apache.commons.compress.compressors.gzip.GzipParameters.setFilename(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipParameters.setFileName(String),org.apache.commons.compress.compressors.gzip.GzipParameters.setFileName(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipParameters.setFileNameCharset(Charset),org.apache.commons.compress.compressors.gzip.GzipParameters.setFileNameCharset(Charset).charset,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipParameters.setHeaderCRC(boolean),org.apache.commons.compress.compressors.gzip.GzipParameters.setHeaderCRC(boolean).headerCRC,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationInstant(Instant),org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationInstant(Instant).modificationTime,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationTime(long),org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationTime(long).modificationTimeSeconds,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipParameters.setOperatingSystem(int),org.apache.commons.compress.compressors.gzip.GzipParameters.setOperatingSystem(int).operatingSystem,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipParameters.setOS(OS),org.apache.commons.compress.compressors.gzip.GzipParameters.setOS(OS).os,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipParameters.setTrailerCrc(long),org.apache.commons.compress.compressors.gzip.GzipParameters.setTrailerCrc(long).trailerCrc,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipParameters.setTrailerISize(long),org.apache.commons.compress.compressors.gzip.GzipParameters.setTrailerISize(long).trailerISize,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipParameters$OS.from(int),org.apache.commons.compress.compressors.gzip.GzipParameters$OS.from(int).code,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFilename(String),org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFilename(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFileName(String),org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFileName(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFilename(String),org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFilename(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFileName(String),org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFileName(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFilename(String),org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFilename(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFileName(String),org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFileName(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[]),org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[]).buffer,Has_Parameter
"org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[],int,int).buffer",Has_Parameter
"org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(int),org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(int).b,Has_Parameter
"org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeC(String,Charset)","org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeC(String,Charset).value",Has_Parameter
"org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeC(String,Charset)","org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeC(String,Charset).charset",Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeMemberHeader(GzipParameters),org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeMemberHeader(GzipParameters).parameters,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.<init>(OutputStream),org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.<init>(OutputStream).out,Has_Parameter
"org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.<init>(OutputStream,GzipParameters)","org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.<init>(OutputStream,GzipParameters).out",Has_Parameter
"org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.<init>(OutputStream,GzipParameters)","org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.<init>(OutputStream,GzipParameters).parameters",Has_Parameter
"org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(byte[],int)","org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(byte[],int).signature",Has_Parameter
"org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(byte[],int)","org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(byte[],int).length",Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readToNull(DataInput),org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readToNull(DataInput).inData,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(boolean),org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(boolean).isFirstMember,Has_Parameter
"org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>(Builder),org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>(Builder).builder,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>(InputStream),org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>(InputStream).inputStream,Has_Parameter
"org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>(InputStream,boolean)","org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>(InputStream,boolean).inputStream",Has_Parameter
"org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>(InputStream,boolean)","org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>(InputStream,boolean).decompressConcatenated",Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.setDecompressConcatenated(boolean),org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.setDecompressConcatenated(boolean).decompressConcatenated,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.setFileNameCharset(Charset),org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.setFileNameCharset(Charset).fileNameCharset,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.setOnMemberEnd(IOConsumer),org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.setOnMemberEnd(IOConsumer).onMemberEnd,Has_Parameter
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.setOnMemberStart(IOConsumer),org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.setOnMemberStart(IOConsumer).onMemberStart,Has_Parameter
org.apache.commons.compress.compressors.gzip.ExtraField.fromBytes(byte[]),org.apache.commons.compress.compressors.gzip.ExtraField.fromBytes(byte[]).bytes,Has_Parameter
"org.apache.commons.compress.compressors.gzip.ExtraField.addSubField(String,byte[])","org.apache.commons.compress.compressors.gzip.ExtraField.addSubField(String,byte[]).id",Has_Parameter
"org.apache.commons.compress.compressors.gzip.ExtraField.addSubField(String,byte[])","org.apache.commons.compress.compressors.gzip.ExtraField.addSubField(String,byte[]).payload",Has_Parameter
org.apache.commons.compress.compressors.gzip.ExtraField.equals(Object),org.apache.commons.compress.compressors.gzip.ExtraField.equals(Object).obj,Has_Parameter
org.apache.commons.compress.compressors.gzip.ExtraField.findFirstSubField(String),org.apache.commons.compress.compressors.gzip.ExtraField.findFirstSubField(String).id,Has_Parameter
org.apache.commons.compress.compressors.gzip.ExtraField.getSubField(int),org.apache.commons.compress.compressors.gzip.ExtraField.getSubField(int).index,Has_Parameter
org.apache.commons.compress.compressors.gzip.ExtraField$SubField.equals(Object),org.apache.commons.compress.compressors.gzip.ExtraField$SubField.equals(Object).obj,Has_Parameter
"org.apache.commons.compress.compressors.gzip.ExtraField$SubField.<init>(byte,byte,byte[])","org.apache.commons.compress.compressors.gzip.ExtraField$SubField.<init>(byte,byte,byte[]).si1",Has_Parameter
"org.apache.commons.compress.compressors.gzip.ExtraField$SubField.<init>(byte,byte,byte[])","org.apache.commons.compress.compressors.gzip.ExtraField$SubField.<init>(byte,byte,byte[]).si2",Has_Parameter
"org.apache.commons.compress.compressors.gzip.ExtraField$SubField.<init>(byte,byte,byte[])","org.apache.commons.compress.compressors.gzip.ExtraField$SubField.<init>(byte,byte,byte[]).payload",Has_Parameter
"org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte)","org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte).previousCode",Has_Parameter
"org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte)","org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte).character",Has_Parameter
"org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte,int)","org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte,int).previousCode",Has_Parameter
"org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte,int)","org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte,int).character",Has_Parameter
"org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte,int)","org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte,int).maxTableSize",Has_Parameter
"org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(int,boolean)","org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(int,boolean).code",Has_Parameter
"org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(int,boolean)","org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(int,boolean).addedUnfinishedEntry",Has_Parameter
org.apache.commons.compress.compressors.lzw.LZWInputStream.getPrefix(int),org.apache.commons.compress.compressors.lzw.LZWInputStream.getPrefix(int).offset,Has_Parameter
org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(int),org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(int).maxCodeSize,Has_Parameter
"org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(int,int)","org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(int,int).maxCodeSize",Has_Parameter
"org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(int,int)","org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(int,int).memoryLimiKiB",Has_Parameter
"org.apache.commons.compress.compressors.lzw.LZWInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.lzw.LZWInputStream.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.lzw.LZWInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.lzw.LZWInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.lzw.LZWInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.lzw.LZWInputStream.read(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.compressors.lzw.LZWInputStream.readFromStack(byte[],int,int)","org.apache.commons.compress.compressors.lzw.LZWInputStream.readFromStack(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.lzw.LZWInputStream.readFromStack(byte[],int,int)","org.apache.commons.compress.compressors.lzw.LZWInputStream.readFromStack(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.lzw.LZWInputStream.readFromStack(byte[],int,int)","org.apache.commons.compress.compressors.lzw.LZWInputStream.readFromStack(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.lzw.LZWInputStream.setClearCode(int),org.apache.commons.compress.compressors.lzw.LZWInputStream.setClearCode(int).codeSize,Has_Parameter
org.apache.commons.compress.compressors.lzw.LZWInputStream.setCodeSize(int),org.apache.commons.compress.compressors.lzw.LZWInputStream.setCodeSize(int).cs,Has_Parameter
"org.apache.commons.compress.compressors.lzw.LZWInputStream.setPrefix(int,int)","org.apache.commons.compress.compressors.lzw.LZWInputStream.setPrefix(int,int).offset",Has_Parameter
"org.apache.commons.compress.compressors.lzw.LZWInputStream.setPrefix(int,int)","org.apache.commons.compress.compressors.lzw.LZWInputStream.setPrefix(int,int).value",Has_Parameter
org.apache.commons.compress.compressors.lzw.LZWInputStream.setTableSize(int),org.apache.commons.compress.compressors.lzw.LZWInputStream.setTableSize(int).newSize,Has_Parameter
"org.apache.commons.compress.compressors.lzw.LZWInputStream.<init>(InputStream,ByteOrder)","org.apache.commons.compress.compressors.lzw.LZWInputStream.<init>(InputStream,ByteOrder).inputStream",Has_Parameter
"org.apache.commons.compress.compressors.lzw.LZWInputStream.<init>(InputStream,ByteOrder)","org.apache.commons.compress.compressors.lzw.LZWInputStream.<init>(InputStream,ByteOrder).byteOrder",Has_Parameter
"org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byte[],int)","org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byte[],int).signature",Has_Parameter
"org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byte[],int)","org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byte[],int).length",Has_Parameter
"org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(int,byte)","org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(int,byte).previousCode",Has_Parameter
"org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(int,byte)","org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(int,byte).character",Has_Parameter
org.apache.commons.compress.compressors.z.ZCompressorInputStream.<init>(InputStream),org.apache.commons.compress.compressors.z.ZCompressorInputStream.<init>(InputStream).inputStream,Has_Parameter
"org.apache.commons.compress.compressors.z.ZCompressorInputStream.<init>(InputStream,int)","org.apache.commons.compress.compressors.z.ZCompressorInputStream.<init>(InputStream,int).inputStream",Has_Parameter
"org.apache.commons.compress.compressors.z.ZCompressorInputStream.<init>(InputStream,int)","org.apache.commons.compress.compressors.z.ZCompressorInputStream.<init>(InputStream,int).memoryLimitInKiB",Has_Parameter
"org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(byte[],int,int).buf",Has_Parameter
"org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.<init>(OutputStream),org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.<init>(OutputStream).outputStream,Has_Parameter
"org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.<init>(OutputStream,int)","org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.<init>(OutputStream,int).outputStream",Has_Parameter
"org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.<init>(OutputStream,int)","org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.<init>(OutputStream,int).preset",Has_Parameter
"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byte[],int)","org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byte[],int).signature",Has_Parameter
"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byte[],int)","org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byte[],int).length",Has_Parameter
"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(byte[],int,int).buf",Has_Parameter
"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.xz.XZCompressorInputStream.skip(long),org.apache.commons.compress.compressors.xz.XZCompressorInputStream.skip(long).n,Has_Parameter
org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream),org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream).inputStream,Has_Parameter
"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream,boolean)","org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream,boolean).inputStream",Has_Parameter
"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream,boolean)","org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream,boolean).decompressConcatenated",Has_Parameter
"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream,boolean,int)","org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream,boolean,int).inputStream",Has_Parameter
"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream,boolean,int)","org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream,boolean,int).decompressConcatenated",Has_Parameter
"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream,boolean,int)","org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream,boolean,int).memoryLimitInKb",Has_Parameter
org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFilename(String),org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFilename(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFileName(String),org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFileName(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFilename(String),org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFilename(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFileName(String),org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFileName(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFilename(String),org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFilename(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFileName(String),org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFileName(String).fileName,Has_Parameter
"org.apache.commons.compress.compressors.xz.XZUtils.matches(byte[],int)","org.apache.commons.compress.compressors.xz.XZUtils.matches(byte[],int).signature",Has_Parameter
"org.apache.commons.compress.compressors.xz.XZUtils.matches(byte[],int)","org.apache.commons.compress.compressors.xz.XZUtils.matches(byte[],int).length",Has_Parameter
org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(boolean),org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(boolean).doCache,Has_Parameter
org.apache.commons.compress.compressors.CompressorInputStream.count(int),org.apache.commons.compress.compressors.CompressorInputStream.count(int).read,Has_Parameter
org.apache.commons.compress.compressors.CompressorInputStream.count(long),org.apache.commons.compress.compressors.CompressorInputStream.count(long).read,Has_Parameter
org.apache.commons.compress.compressors.CompressorInputStream.pushedBackBytes(long),org.apache.commons.compress.compressors.CompressorInputStream.pushedBackBytes(long).pushedBack,Has_Parameter
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.mask(long),org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.mask(long).x,Has_Parameter
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.write(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.write(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.write(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.write(int),org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.write(int).b,Has_Parameter
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.writeLittleEndian(int,long)","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.writeLittleEndian(int,long).numBytes",Has_Parameter
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.writeLittleEndian(int,long)","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.writeLittleEndian(int,long).num",Has_Parameter
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.<init>(OutputStream),org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.<init>(OutputStream).out,Has_Parameter
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.<init>(OutputStream,Parameters)","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.<init>(OutputStream,Parameters).out",Has_Parameter
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.<init>(OutputStream,Parameters)","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.<init>(OutputStream,Parameters).params",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readLiteralLength(int),org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readLiteralLength(int).b,Has_Parameter
org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.<init>(InputStream),org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.<init>(InputStream).is,Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.<init>(InputStream,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.<init>(InputStream,int).is",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.<init>(InputStream,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.<init>(InputStream,int).blockSize",Has_Parameter
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byte[],int)","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byte[],int).signature",Has_Parameter
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byte[],int)","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byte[],int).length",Has_Parameter
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.unmask(long),org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.unmask(long).x,Has_Parameter
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(byte[],int,int)","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(byte[],int,int)","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(byte[],int,int)","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream),org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream).in,Has_Parameter
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream,FramedSnappyDialect)","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream,FramedSnappyDialect).in",Has_Parameter
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream,FramedSnappyDialect)","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream,FramedSnappyDialect).dialect",Has_Parameter
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream,int,FramedSnappyDialect)","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream,int,FramedSnappyDialect).in",Has_Parameter
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream,int,FramedSnappyDialect)","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream,int,FramedSnappyDialect).blockSize",Has_Parameter
"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream,int,FramedSnappyDialect)","org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream,int,FramedSnappyDialect).dialect",Has_Parameter
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.createParameterBuilder(int),org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.createParameterBuilder(int).blockSize,Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.write(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.write(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.write(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.write(int),org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.write(int).b,Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithFourOffsetBytes(int,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithFourOffsetBytes(int,int).len",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithFourOffsetBytes(int,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithFourOffsetBytes(int,int).offset",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithLittleEndianOffset(int,int,int,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithLittleEndianOffset(int,int,int,int).tag",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithLittleEndianOffset(int,int,int,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithLittleEndianOffset(int,int,int,int).offsetBytes",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithLittleEndianOffset(int,int,int,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithLittleEndianOffset(int,int,int,int).len",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithLittleEndianOffset(int,int,int,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithLittleEndianOffset(int,int,int,int).offset",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithOneOffsetByte(int,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithOneOffsetByte(int,int).len",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithOneOffsetByte(int,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithOneOffsetByte(int,int).offset",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithTwoOffsetBytes(int,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithTwoOffsetBytes(int,int).len",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithTwoOffsetBytes(int,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithTwoOffsetBytes(int,int).offset",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLittleEndian(int,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLittleEndian(int,int).numBytes",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLittleEndian(int,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLittleEndian(int,int).num",Has_Parameter
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeUncompressedSize(long),org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeUncompressedSize(long).uncompressedSize,Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long).os",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long).uncompressedSize",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,int).os",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,int).uncompressedSize",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,int)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,int).blockSize",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,Parameters)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,Parameters).out",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,Parameters)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,Parameters).uncompressedSize",Has_Parameter
"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,Parameters)","org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,Parameters).params",Has_Parameter
org.apache.commons.compress.compressors.pack200.AbstractStreamBridge.<init>(OutputStream),org.apache.commons.compress.compressors.pack200.AbstractStreamBridge.<init>(OutputStream).outputStream,Has_Parameter
org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[]),org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[]).b,Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[],int,int).from",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(int),org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(int).b,Has_Parameter
org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream),org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream).out,Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Map)","org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Map).out",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Map)","org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Map).props",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Pack200Strategy)","org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Pack200Strategy).out",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Pack200Strategy)","org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Pack200Strategy).mode",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Pack200Strategy,Map)","org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Pack200Strategy,Map).out",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Pack200Strategy,Map)","org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Pack200Strategy,Map).mode",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Pack200Strategy,Map)","org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Pack200Strategy,Map).props",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(byte[],int)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(byte[],int).signature",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(byte[],int)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(byte[],int).length",Has_Parameter
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.mark(int),org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.mark(int).limit,Has_Parameter
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[]),org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[]).b,Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[],int,int).count",Has_Parameter
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.skip(long),org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.skip(long).count,Has_Parameter
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File),org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File).file,Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Map)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Map).file",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Map)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Map).properties",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Pack200Strategy)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Pack200Strategy).file",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Pack200Strategy)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Pack200Strategy).mode",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Pack200Strategy,Map)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Pack200Strategy,Map).file",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Pack200Strategy,Map)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Pack200Strategy,Map).mode",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Pack200Strategy,Map)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Pack200Strategy,Map).properties",Has_Parameter
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream),org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream).inputStream,Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,File,Pack200Strategy,Map)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,File,Pack200Strategy,Map).inputStream",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,File,Pack200Strategy,Map)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,File,Pack200Strategy,Map).file",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,File,Pack200Strategy,Map)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,File,Pack200Strategy,Map).mode",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,File,Pack200Strategy,Map)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,File,Pack200Strategy,Map).properties",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Map)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Map).inputStream",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Map)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Map).properties",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Pack200Strategy)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Pack200Strategy).inputStream",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Pack200Strategy)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Pack200Strategy).mode",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Pack200Strategy,Map)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Pack200Strategy,Map).inputStream",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Pack200Strategy,Map)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Pack200Strategy,Map).mode",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Pack200Strategy,Map)","org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Pack200Strategy,Map).properties",Has_Parameter
org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File),org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File).jar,Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File)","org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File).from",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File)","org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File).to",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map)","org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map).from",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map)","org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map).to",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map)","org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map).props",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,Map)","org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,Map).jar",Has_Parameter
"org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,Map)","org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,Map).props",Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(String,InputStream,boolean)","org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(String,InputStream,boolean).name",Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(String,InputStream,boolean)","org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(String,InputStream,boolean).in",Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(String,InputStream,boolean)","org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(String,InputStream,boolean).decompressUntilEOF",Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorOutputStream(String,OutputStream)","org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorOutputStream(String,OutputStream).name",Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorOutputStream(String,OutputStream)","org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorOutputStream(String,OutputStream).out",Has_Parameter
"org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byte[],int)","org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byte[],int).signature",Has_Parameter
"org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byte[],int)","org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byte[],int).length",Has_Parameter
"org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(byte[],int,int).buf",Has_Parameter
"org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.skip(long),org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.skip(long).n,Has_Parameter
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.<init>(InputStream),org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.<init>(InputStream).inputStream,Has_Parameter
"org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.<init>(InputStream,DeflateParameters)","org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.<init>(InputStream,DeflateParameters).inputStream",Has_Parameter
"org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.<init>(InputStream,DeflateParameters)","org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.<init>(InputStream,DeflateParameters).parameters",Has_Parameter
"org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(byte[],int,int).buf",Has_Parameter
"org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.<init>(OutputStream),org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.<init>(OutputStream).outputStream,Has_Parameter
"org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.<init>(OutputStream,DeflateParameters)","org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.<init>(OutputStream,DeflateParameters).outputStream",Has_Parameter
"org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.<init>(OutputStream,DeflateParameters)","org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.<init>(OutputStream,DeflateParameters).parameters",Has_Parameter
org.apache.commons.compress.compressors.deflate.DeflateParameters.setCompressionLevel(int),org.apache.commons.compress.compressors.deflate.DeflateParameters.setCompressionLevel(int).compressionLevel,Has_Parameter
org.apache.commons.compress.compressors.deflate.DeflateParameters.setWithZlibHeader(boolean),org.apache.commons.compress.compressors.deflate.DeflateParameters.setWithZlibHeader(boolean).zlibHeader,Has_Parameter
org.apache.commons.compress.compressors.CompressorException.<init>(String),org.apache.commons.compress.compressors.CompressorException.<init>(String).message,Has_Parameter
"org.apache.commons.compress.compressors.CompressorException.<init>(String,Throwable)","org.apache.commons.compress.compressors.CompressorException.<init>(String,Throwable).message",Has_Parameter
"org.apache.commons.compress.compressors.CompressorException.<init>(String,Throwable)","org.apache.commons.compress.compressors.CompressorException.<init>(String,Throwable).cause",Has_Parameter
org.apache.commons.compress.compressors.CompressorStreamFactory.detect(InputStream),org.apache.commons.compress.compressors.CompressorStreamFactory.detect(InputStream).inputStream,Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamFactory.detect(InputStream,Set)","org.apache.commons.compress.compressors.CompressorStreamFactory.detect(InputStream,Set).inputStream",Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamFactory.detect(InputStream,Set)","org.apache.commons.compress.compressors.CompressorStreamFactory.detect(InputStream,Set).compressorNames",Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set,CompressorStreamProvider,TreeMap)","org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set,CompressorStreamProvider,TreeMap).names",Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set,CompressorStreamProvider,TreeMap)","org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set,CompressorStreamProvider,TreeMap).provider",Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set,CompressorStreamProvider,TreeMap)","org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set,CompressorStreamProvider,TreeMap).map",Has_Parameter
org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(String),org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(String).name,Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamFactory.youNeed(String,String)","org.apache.commons.compress.compressors.CompressorStreamFactory.youNeed(String,String).name",Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamFactory.youNeed(String,String)","org.apache.commons.compress.compressors.CompressorStreamFactory.youNeed(String,String).url",Has_Parameter
org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(InputStream),org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(InputStream).in,Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(InputStream,Set)","org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(InputStream,Set).in",Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(InputStream,Set)","org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(InputStream,Set).compressorNames",Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream)","org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream).name",Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream)","org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream).in",Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream,boolean)","org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream,boolean).name",Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream,boolean)","org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream,boolean).in",Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream,boolean)","org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream,boolean).actualDecompressConcatenated",Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream)","org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream).name",Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream)","org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream).out",Has_Parameter
org.apache.commons.compress.compressors.CompressorStreamFactory.setDecompressConcatenated(boolean),org.apache.commons.compress.compressors.CompressorStreamFactory.setDecompressConcatenated(boolean).decompressConcatenated,Has_Parameter
org.apache.commons.compress.compressors.CompressorStreamFactory.<init>(boolean),org.apache.commons.compress.compressors.CompressorStreamFactory.<init>(boolean).decompressUntilEOF,Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamFactory.<init>(boolean,int)","org.apache.commons.compress.compressors.CompressorStreamFactory.<init>(boolean,int).decompressUntilEOF",Has_Parameter
"org.apache.commons.compress.compressors.CompressorStreamFactory.<init>(boolean,int)","org.apache.commons.compress.compressors.CompressorStreamFactory.<init>(boolean,int).memoryLimitInKb",Has_Parameter
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.write(byte[],int,int).buf",Has_Parameter
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.write(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.write(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream),org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream).outStream,Has_Parameter
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int)","org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int).outStream",Has_Parameter
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int)","org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int).level",Has_Parameter
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean)","org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean).outStream",Has_Parameter
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean)","org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean).level",Has_Parameter
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean)","org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean).closeFrameOnFlush",Has_Parameter
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean,boolean)","org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean,boolean).outStream",Has_Parameter
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean,boolean)","org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean,boolean).level",Has_Parameter
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean,boolean)","org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean,boolean).closeFrameOnFlush",Has_Parameter
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean,boolean)","org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean,boolean).useChecksum",Has_Parameter
"org.apache.commons.compress.compressors.zstandard.ZstdUtils.matches(byte[],int)","org.apache.commons.compress.compressors.zstandard.ZstdUtils.matches(byte[],int).signature",Has_Parameter
"org.apache.commons.compress.compressors.zstandard.ZstdUtils.matches(byte[],int)","org.apache.commons.compress.compressors.zstandard.ZstdUtils.matches(byte[],int).length",Has_Parameter
org.apache.commons.compress.compressors.zstandard.ZstdUtils.setCacheZstdAvailablity(boolean),org.apache.commons.compress.compressors.zstandard.ZstdUtils.setCacheZstdAvailablity(boolean).doCache,Has_Parameter
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.mark(int),org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.mark(int).readLimit,Has_Parameter
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.read(byte[]),org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.read(byte[]).b,Has_Parameter
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.read(byte[],int,int).buf",Has_Parameter
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.read(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.skip(long),org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.skip(long).n,Has_Parameter
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.<init>(InputStream),org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.<init>(InputStream).in,Has_Parameter
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.<init>(InputStream,BufferPool)","org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.<init>(InputStream,BufferPool).in",Has_Parameter
"org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.<init>(InputStream,BufferPool)","org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.<init>(InputStream,BufferPool).bufferPool",Has_Parameter
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.prefill(byte[]),org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.prefill(byte[]).data,Has_Parameter
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readBackReference(byte[],int,int)","org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readBackReference(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readBackReference(byte[],int,int)","org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readBackReference(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readBackReference(byte[],int,int)","org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readBackReference(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readFromBuffer(byte[],int,int)","org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readFromBuffer(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readFromBuffer(byte[],int,int)","org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readFromBuffer(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readFromBuffer(byte[],int,int)","org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readFromBuffer(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readLiteral(byte[],int,int)","org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readLiteral(byte[],int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readLiteral(byte[],int,int)","org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readLiteral(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readLiteral(byte[],int,int)","org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readLiteral(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.startBackReference(int,long)","org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.startBackReference(int,long).offset",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.startBackReference(int,long)","org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.startBackReference(int,long).length",Has_Parameter
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.startLiteral(long),org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.startLiteral(long).length,Has_Parameter
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.tryToCopy(int),org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.tryToCopy(int).bytesToCopy,Has_Parameter
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.tryToReadLiteral(int),org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.tryToReadLiteral(int).bytesToRead,Has_Parameter
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.<init>(InputStream,int)","org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.<init>(InputStream,int).is",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.<init>(InputStream,int)","org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.<init>(InputStream,int).windowSize",Has_Parameter
org.apache.commons.compress.compressors.lz77support.Parameters.builder(int),org.apache.commons.compress.compressors.lz77support.Parameters.builder(int).windowSize,Has_Parameter
org.apache.commons.compress.compressors.lz77support.Parameters.isPowerOfTwo(int),org.apache.commons.compress.compressors.lz77support.Parameters.isPowerOfTwo(int).x,Has_Parameter
"org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int)","org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int).windowSize",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int)","org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int).minBackReferenceLength",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int)","org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int).maxBackReferenceLength",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int)","org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int).maxOffset",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int)","org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int).maxLiteralLength",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int)","org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int).niceBackReferenceLength",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int)","org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int).maxCandidates",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int)","org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int).lazyMatching",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int)","org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int).lazyThreshold",Has_Parameter
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withLazyMatching(boolean),org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withLazyMatching(boolean).lazy,Has_Parameter
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withLazyThreshold(int),org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withLazyThreshold(int).threshold,Has_Parameter
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMaxBackReferenceLength(int),org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMaxBackReferenceLength(int).maxBackReferenceLength,Has_Parameter
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMaxLiteralLength(int),org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMaxLiteralLength(int).maxLiteralLength,Has_Parameter
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMaxNumberOfCandidates(int),org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMaxNumberOfCandidates(int).maxCandidates,Has_Parameter
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMaxOffset(int),org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMaxOffset(int).maxOffset,Has_Parameter
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMinBackReferenceLength(int),org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMinBackReferenceLength(int).minBackReferenceLength,Has_Parameter
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withNiceBackReferenceLength(int),org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withNiceBackReferenceLength(int).niceLen,Has_Parameter
org.apache.commons.compress.compressors.lz77support.Parameters$Builder.<init>(int),org.apache.commons.compress.compressors.lz77support.Parameters$Builder.<init>(int).windowSize,Has_Parameter
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.compress(byte[]),org.apache.commons.compress.compressors.lz77support.LZ77Compressor.compress(byte[]).data,Has_Parameter
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.compress(byte[],int,int)","org.apache.commons.compress.compressors.lz77support.LZ77Compressor.compress(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.compress(byte[],int,int)","org.apache.commons.compress.compressors.lz77support.LZ77Compressor.compress(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.compress(byte[],int,int)","org.apache.commons.compress.compressors.lz77support.LZ77Compressor.compress(byte[],int,int).len",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.doCompress(byte[],int,int)","org.apache.commons.compress.compressors.lz77support.LZ77Compressor.doCompress(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.doCompress(byte[],int,int)","org.apache.commons.compress.compressors.lz77support.LZ77Compressor.doCompress(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.doCompress(byte[],int,int)","org.apache.commons.compress.compressors.lz77support.LZ77Compressor.doCompress(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.flushBackReference(int),org.apache.commons.compress.compressors.lz77support.LZ77Compressor.flushBackReference(int).matchLength,Has_Parameter
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.insertString(int),org.apache.commons.compress.compressors.lz77support.LZ77Compressor.insertString(int).pos,Has_Parameter
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.insertStringsInMatch(int),org.apache.commons.compress.compressors.lz77support.LZ77Compressor.insertStringsInMatch(int).matchLength,Has_Parameter
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.longestMatch(int),org.apache.commons.compress.compressors.lz77support.LZ77Compressor.longestMatch(int).matchHead,Has_Parameter
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.longestMatchForNextPosition(int),org.apache.commons.compress.compressors.lz77support.LZ77Compressor.longestMatchForNextPosition(int).prevMatchLength,Has_Parameter
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.nextHash(int,byte)","org.apache.commons.compress.compressors.lz77support.LZ77Compressor.nextHash(int,byte).oldHash",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.nextHash(int,byte)","org.apache.commons.compress.compressors.lz77support.LZ77Compressor.nextHash(int,byte).nextByte",Has_Parameter
org.apache.commons.compress.compressors.lz77support.LZ77Compressor.prefill(byte[]),org.apache.commons.compress.compressors.lz77support.LZ77Compressor.prefill(byte[]).data,Has_Parameter
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<init>(Parameters,Callback)","org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<init>(Parameters,Callback).params",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<init>(Parameters,Callback)","org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<init>(Parameters,Callback).callback",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference.<init>(BlockType,int,int)","org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference.<init>(BlockType,int,int).blockType",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference.<init>(BlockType,int,int)","org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference.<init>(BlockType,int,int).offset",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference.<init>(BlockType,int,int)","org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference.<init>(BlockType,int,int).length",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference.<init>(int,int)","org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference.<init>(int,int).offset",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference.<init>(int,int)","org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference.<init>(int,int).length",Has_Parameter
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block.<init>(BlockType),org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block.<init>(BlockType).type,Has_Parameter
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Callback.accept(Block),org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Callback.accept(Block).b,Has_Parameter
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock.<init>(byte[],int,int)","org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock.<init>(byte[],int,int).data",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock.<init>(byte[],int,int)","org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock.<init>(byte[],int,int).offset",Has_Parameter
"org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock.<init>(byte[],int,int)","org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock.<init>(byte[],int,int).length",Has_Parameter
org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFilename(String),org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFilename(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFileName(String),org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFileName(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFilename(String),org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFilename(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFileName(String),org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFileName(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFilename(String),org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFilename(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFileName(String),org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFileName(String).fileName,Has_Parameter
"org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(byte[],int)","org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(byte[],int).signature",Has_Parameter
"org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(byte[],int)","org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(byte[],int).length",Has_Parameter
org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(boolean),org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(boolean).doCache,Has_Parameter
"org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(byte[],int,int).buf",Has_Parameter
"org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.<init>(OutputStream),org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.<init>(OutputStream).outputStream,Has_Parameter
"org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byte[],int)","org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byte[],int).signature",Has_Parameter
"org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byte[],int)","org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byte[],int).length",Has_Parameter
"org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(byte[],int,int).buf",Has_Parameter
"org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(byte[],int,int).off",Has_Parameter
"org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.skip(long),org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.skip(long).n,Has_Parameter
org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.<init>(InputStream),org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.<init>(InputStream).inputStream,Has_Parameter
"org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.<init>(InputStream,int)","org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.<init>(InputStream,int).inputStream",Has_Parameter
"org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.<init>(InputStream,int)","org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.<init>(InputStream,int).memoryLimitKiB",Has_Parameter
org.apache.commons.compress.compressors.FileNameUtil.getCompressedFilename(String),org.apache.commons.compress.compressors.FileNameUtil.getCompressedFilename(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.FileNameUtil.getCompressedFileName(String),org.apache.commons.compress.compressors.FileNameUtil.getCompressedFileName(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFilename(String),org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFilename(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFileName(String),org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFileName(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.FileNameUtil.isCompressedFilename(String),org.apache.commons.compress.compressors.FileNameUtil.isCompressedFilename(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.FileNameUtil.isCompressedFileName(String),org.apache.commons.compress.compressors.FileNameUtil.isCompressedFileName(String).fileName,Has_Parameter
"org.apache.commons.compress.compressors.FileNameUtil.<init>(Map,String)","org.apache.commons.compress.compressors.FileNameUtil.<init>(Map,String).uncompressSuffix",Has_Parameter
"org.apache.commons.compress.compressors.FileNameUtil.<init>(Map,String)","org.apache.commons.compress.compressors.FileNameUtil.<init>(Map,String).defaultExtension",Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.chooseBlockSize(long),org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.chooseBlockSize(long).inputLength,Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int).code",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int).length",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int).minLen",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int).maxLen",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int).alphaSize",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],Data,int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],Data,int,int).len",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],Data,int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],Data,int,int).freq",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],Data,int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],Data,int,int).dat",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],Data,int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],Data,int,int).alphaSize",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],Data,int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],Data,int,int).maxLen",Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutInt(int),org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutInt(int).u,Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutUByte(int),org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutUByte(int).c,Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(int,int).n",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(int,int).v",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues0(int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues0(int,int).nGroups",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues0(int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues0(int,int).alphaSize",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(int,int).nGroups",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(int,int).alphaSize",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues2(int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues2(int,int).nGroups",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues2(int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues2(int,int).nSelectors",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues3(int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues3(int,int).nGroups",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues3(int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues3(int,int).alphaSize",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(int,int).nGroups",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(int,int).nSelectors",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues6(int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues6(int,int).nGroups",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues6(int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues6(int,int).alphaSize",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(byte[],int,int).buf",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(byte[],int,int).offs",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(byte[],int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(int),org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(int).b,Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write0(int),org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write0(int).b,Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<init>(OutputStream),org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<init>(OutputStream).out,Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<init>(OutputStream,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<init>(OutputStream,int).out",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<init>(OutputStream,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<init>(OutputStream,int).blockSize",Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.<init>(int),org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.<init>(int).blockSize100k,Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.med3(int,int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.med3(int,int,int).a",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.med3(int,int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.med3(int,int,int).b",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.med3(int,int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.med3(int,int,int).c",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(int[],int,int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(int[],int,int,int).fmap",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(int[],int,int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(int[],int,int,int).p1",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(int[],int,int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(int[],int,int,int).p2",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(int[],int,int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(int[],int,int,int).n",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(int[],int[],int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(int[],int[],int,int).fmap",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(int[],int[],int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(int[],int[],int,int).eclass",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(int[],int[],int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(int[],int[],int,int).loSt",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(int[],int[],int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(int[],int[],int,int).hiSt",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(int[],int[],int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(int[],int[],int,int).fmap",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(int[],int[],int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(int[],int[],int,int).eclass",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(int[],int[],int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(int[],int[],int,int).lo",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(int[],int[],int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(int[],int[],int,int).hi",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(int[],byte[],int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(int[],byte[],int).fmap",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(int[],byte[],int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(int[],byte[],int).block",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(int[],byte[],int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(int[],byte[],int).nblock",Has_Parameter
org.apache.commons.compress.compressors.bzip2.BlockSort.fpop(int),org.apache.commons.compress.compressors.bzip2.BlockSort.fpop(int).sp,Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fpush(int,int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fpush(int,int,int).sp",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fpush(int,int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fpush(int,int,int).lz",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fpush(int,int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fpush(int,int,int).hz",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fswap(int[],int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fswap(int[],int,int).fmap",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fswap(int[],int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fswap(int[],int,int).zz1",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fswap(int[],int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fswap(int[],int,int).zz2",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(int[],int,int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(int[],int,int,int).fmap",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(int[],int,int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(int[],int,int,int).yyp1",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(int[],int,int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(int[],int,int,int).yyp2",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(int[],int,int,int)","org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(int[],int,int,int).yyn",Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetBit(BitInputStream),org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetBit(BitInputStream).bin,Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetInt(BitInputStream),org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetInt(BitInputStream).bin,Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetUByte(BitInputStream),org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetUByte(BitInputStream).bin,Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(BitInputStream,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(BitInputStream,int).bin",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(BitInputStream,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(BitInputStream,int).n",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.checkBounds(int,int,String)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.checkBounds(int,int,String).checkVal",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.checkBounds(int,int,String)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.checkBounds(int,int,String).limitExclusive",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.checkBounds(int,int,String)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.checkBounds(int,int,String).name",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int).limit",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int).base",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int).perm",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int).length",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int).minLen",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int).maxLen",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int).alphaSize",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byte[],int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byte[],int).signature",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byte[],int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byte[],int).length",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(int,int).alphaSize",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(int,int).nGroups",Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.init(boolean),org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.init(boolean).isFirstStream,Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(byte[],int,int).dest",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(byte[],int,int).offs",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(byte[],int,int)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(byte[],int,int).len",Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.readNextByte(BitInputStream),org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.readNextByte(BitInputStream).in,Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<init>(InputStream),org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<init>(InputStream).in,Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<init>(InputStream,boolean)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<init>(InputStream,boolean).in",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<init>(InputStream,boolean)","org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<init>(InputStream,boolean).decompressConcatenated",Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.initTT(int),org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.initTT(int).length,Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.<init>(int),org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.<init>(int).blockSize100k,Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFilename(String),org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFilename(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFileName(String),org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFileName(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFilename(String),org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFilename(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFileName(String),org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFileName(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFilename(String),org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFilename(String).fileName,Has_Parameter
org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFileName(String),org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFileName(String).fileName,Has_Parameter
"org.apache.commons.compress.compressors.bzip2.CRC.compute(int,int)","org.apache.commons.compress.compressors.bzip2.CRC.compute(int,int).baseCrc",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.CRC.compute(int,int)","org.apache.commons.compress.compressors.bzip2.CRC.compute(int,int).inCh",Has_Parameter
org.apache.commons.compress.compressors.bzip2.CRC.update(int),org.apache.commons.compress.compressors.bzip2.CRC.update(int).inCh,Has_Parameter
"org.apache.commons.compress.compressors.bzip2.CRC.update(int,int)","org.apache.commons.compress.compressors.bzip2.CRC.update(int,int).inCh",Has_Parameter
"org.apache.commons.compress.compressors.bzip2.CRC.update(int,int)","org.apache.commons.compress.compressors.bzip2.CRC.update(int,int).repeat",Has_Parameter
org.apache.commons.compress.compressors.bzip2.Rand.rNums(int),org.apache.commons.compress.compressors.bzip2.Rand.rNums(int).i,Has_Parameter
"org.apache.commons.compress.MemoryLimitException.buildMessage(long,int)","org.apache.commons.compress.MemoryLimitException.buildMessage(long,int).memoryNeededInKb",Has_Parameter
"org.apache.commons.compress.MemoryLimitException.buildMessage(long,int)","org.apache.commons.compress.MemoryLimitException.buildMessage(long,int).memoryLimitInKb",Has_Parameter
"org.apache.commons.compress.MemoryLimitException.<init>(long,int)","org.apache.commons.compress.MemoryLimitException.<init>(long,int).memoryNeededKiB",Has_Parameter
"org.apache.commons.compress.MemoryLimitException.<init>(long,int)","org.apache.commons.compress.MemoryLimitException.<init>(long,int).memoryLimitKiB",Has_Parameter
"org.apache.commons.compress.MemoryLimitException.<init>(long,int,Exception)","org.apache.commons.compress.MemoryLimitException.<init>(long,int,Exception).memoryNeededKiB",Has_Parameter
"org.apache.commons.compress.MemoryLimitException.<init>(long,int,Exception)","org.apache.commons.compress.MemoryLimitException.<init>(long,int,Exception).memoryLimitKiB",Has_Parameter
"org.apache.commons.compress.MemoryLimitException.<init>(long,int,Exception)","org.apache.commons.compress.MemoryLimitException.<init>(long,int,Exception).cause",Has_Parameter
"org.apache.commons.compress.MemoryLimitException.<init>(long,int,Throwable)","org.apache.commons.compress.MemoryLimitException.<init>(long,int,Throwable).memoryNeededKiB",Has_Parameter
"org.apache.commons.compress.MemoryLimitException.<init>(long,int,Throwable)","org.apache.commons.compress.MemoryLimitException.<init>(long,int,Throwable).memoryLimitKiB",Has_Parameter
"org.apache.commons.compress.MemoryLimitException.<init>(long,int,Throwable)","org.apache.commons.compress.MemoryLimitException.<init>(long,int,Throwable).cause",Has_Parameter
org.apache.commons.compress.PasswordRequiredException.<init>(String),org.apache.commons.compress.PasswordRequiredException.<init>(String).name,Has_Parameter
