:START_ID,:END_ID,:TYPE
org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier,org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier.get(),Has_Method
org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore,org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.close(),Has_Method
org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore,org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.closeForWriting(),Has_Method
org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore,org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.getInputStream(),Has_Method
org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore,"org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.writeOut(byte[],int,int)",Has_Method
org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore,org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.<init>(File),Has_Method
org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore,org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.<init>(Path),Has_Method
org.apache.commons.compress.parallel.ScatterGatherBackingStore,org.apache.commons.compress.parallel.ScatterGatherBackingStore.closeForWriting(),Has_Method
org.apache.commons.compress.parallel.ScatterGatherBackingStore,org.apache.commons.compress.parallel.ScatterGatherBackingStore.getInputStream(),Has_Method
org.apache.commons.compress.parallel.ScatterGatherBackingStore,"org.apache.commons.compress.parallel.ScatterGatherBackingStore.writeOut(byte[],int,int)",Has_Method
org.apache.commons.compress.parallel.InputStreamSupplier,org.apache.commons.compress.parallel.InputStreamSupplier.get(),Has_Method
org.apache.commons.compress.changes.Change,org.apache.commons.compress.changes.Change.getEntry(),Has_Method
org.apache.commons.compress.changes.Change,org.apache.commons.compress.changes.Change.getInputStream(),Has_Method
org.apache.commons.compress.changes.Change,org.apache.commons.compress.changes.Change.getTargetFileName(),Has_Method
org.apache.commons.compress.changes.Change,org.apache.commons.compress.changes.Change.getType(),Has_Method
org.apache.commons.compress.changes.Change,org.apache.commons.compress.changes.Change.isReplaceMode(),Has_Method
org.apache.commons.compress.changes.Change,"org.apache.commons.compress.changes.Change.<init>(ArchiveEntry,InputStream,boolean)",Has_Method
org.apache.commons.compress.changes.Change,"org.apache.commons.compress.changes.Change.<init>(String,ChangeType)",Has_Method
org.apache.commons.compress.changes.ChangeSet,"org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream)",Has_Method
org.apache.commons.compress.changes.ChangeSet,"org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream,boolean)",Has_Method
org.apache.commons.compress.changes.ChangeSet,org.apache.commons.compress.changes.ChangeSet.addAddition(Change),Has_Method
org.apache.commons.compress.changes.ChangeSet,org.apache.commons.compress.changes.ChangeSet.addDeletion(Change),Has_Method
org.apache.commons.compress.changes.ChangeSet,org.apache.commons.compress.changes.ChangeSet.delete(String),Has_Method
org.apache.commons.compress.changes.ChangeSet,org.apache.commons.compress.changes.ChangeSet.deleteDir(String),Has_Method
org.apache.commons.compress.changes.ChangeSet,org.apache.commons.compress.changes.ChangeSet.getChanges(),Has_Method
org.apache.commons.compress.changes.ChangeSetPerformer,"org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(InputStream,ArchiveOutputStream,ArchiveEntry)",Has_Method
org.apache.commons.compress.changes.ChangeSetPerformer,"org.apache.commons.compress.changes.ChangeSetPerformer.isDeletedLater(Set,ArchiveEntry)",Has_Method
org.apache.commons.compress.changes.ChangeSetPerformer,"org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveEntryIterator,ArchiveOutputStream)",Has_Method
org.apache.commons.compress.changes.ChangeSetPerformer,"org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveInputStream,ArchiveOutputStream)",Has_Method
org.apache.commons.compress.changes.ChangeSetPerformer,"org.apache.commons.compress.changes.ChangeSetPerformer.perform(ZipFile,ArchiveOutputStream)",Has_Method
org.apache.commons.compress.changes.ChangeSetPerformer,org.apache.commons.compress.changes.ChangeSetPerformer.<init>(ChangeSet),Has_Method
org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator,org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator.getInputStream(),Has_Method
org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator,org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator.hasNext(),Has_Method
org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator,org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveEntryIterator.next(),Has_Method
org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator,org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator.getInputStream(),Has_Method
org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator,org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator.hasNext(),Has_Method
org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator,org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator.next(),Has_Method
org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator,org.apache.commons.compress.changes.ChangeSetPerformer$ArchiveInputStreamIterator.<init>(ArchiveInputStream),Has_Method
org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator,org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator.getInputStream(),Has_Method
org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator,org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator.hasNext(),Has_Method
org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator,org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator.next(),Has_Method
org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator,org.apache.commons.compress.changes.ChangeSetPerformer$ZipFileIterator.<init>(ZipFile),Has_Method
org.apache.commons.compress.changes.ChangeSetResults,org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet(String),Has_Method
org.apache.commons.compress.changes.ChangeSetResults,org.apache.commons.compress.changes.ChangeSetResults.addedFromStream(String),Has_Method
org.apache.commons.compress.changes.ChangeSetResults,org.apache.commons.compress.changes.ChangeSetResults.deleted(String),Has_Method
org.apache.commons.compress.changes.ChangeSetResults,org.apache.commons.compress.changes.ChangeSetResults.getAddedFromChangeSet(),Has_Method
org.apache.commons.compress.changes.ChangeSetResults,org.apache.commons.compress.changes.ChangeSetResults.getAddedFromStream(),Has_Method
org.apache.commons.compress.changes.ChangeSetResults,org.apache.commons.compress.changes.ChangeSetResults.getDeleted(),Has_Method
org.apache.commons.compress.changes.ChangeSetResults,org.apache.commons.compress.changes.ChangeSetResults.hasBeenAdded(String),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.computeOuterIsAnonymous(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.equals(Object),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.generateHashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.getC(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.getC2(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.getF(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.getN(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.getTupleIndex(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.hashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.initializeClassStrings(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.innerBreakAtDollar(String),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.isAllDigits(String),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.isAnonymous(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.isMember(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.nestedExplicitFlagSet(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,"org.apache.commons.compress.harmony.unpack200.IcTuple.nullSafeEquals(String,String)",Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.outerClassIndex(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.outerClassString(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.outerIsAnonymous(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.predicted(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.simpleClassName(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.simpleClassNameIndex(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.thisClassIndex(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.thisClassString(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,org.apache.commons.compress.harmony.unpack200.IcTuple.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcTuple,"org.apache.commons.compress.harmony.unpack200.IcTuple.<init>(String,int,String,String,int,int,int,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.endsWithLoad(int),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.endsWithStore(int),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getBcByte(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getBcCaseCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getBcCaseValue(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getBcClassRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getBcDoubleRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getBcFieldRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getBcFloatRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getBcIMethodRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getBcInitRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getBcIntRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getBcLabel(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getBcLocal(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getBcLongRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getBcMethodRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getBcShort(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getBcStringRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getBcSuperField(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getBcSuperMethod(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getBcThisField(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getBcThisMethod(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.getMethodByteCodePacked(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.read(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.startsWithIf(int),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.unpack(),Has_Method
org.apache.commons.compress.harmony.unpack200.BcBands,org.apache.commons.compress.harmony.unpack200.BcBands.<init>(Segment),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentOptions,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasAllCodeFlags(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentOptions,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasArchiveFileCounts(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentOptions,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasClassFlagsHi(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentOptions,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasCodeFlagsHi(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentOptions,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasCPNumberCounts(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentOptions,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasFieldFlagsHi(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentOptions,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasFileModtime(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentOptions,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasFileOptions(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentOptions,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasFileSizeHi(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentOptions,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasMethodFlagsHi(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentOptions,org.apache.commons.compress.harmony.unpack200.SegmentOptions.hasSpecialFormats(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentOptions,org.apache.commons.compress.harmony.unpack200.SegmentOptions.shouldDeflate(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentOptions,org.apache.commons.compress.harmony.unpack200.SegmentOptions.<init>(int),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache,org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.arrayIsCached(String[]),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache,org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.cacheArray(String[]),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache,"org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache.indexesForArrayKey(String[],String)",Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache$CachedArray,org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache$CachedArray.cacheIndexes(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache$CachedArray,org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache$CachedArray.indexesForKey(String),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache$CachedArray,org.apache.commons.compress.harmony.unpack200.SegmentConstantPoolArrayCache$CachedArray.lastKnownSize(),Has_Method
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup,org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRiaAttributeName(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup,org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRipaAttributeName(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup,org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRvaAttributeName(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup,org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.setRvpaAttributeName(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup,"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAnnotation(CPUTF8,int,Iterator)",Has_Method
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup,"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAttribute(int,CPUTF8[],int[],Iterator)",Has_Method
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup,org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getAttributes(),Has_Method
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup,org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getNextValue(int),Has_Method
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup,"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.getParameterAttribute(int,Iterator)",Has_Method
org.apache.commons.compress.harmony.unpack200.MetadataBandGroup,"org.apache.commons.compress.harmony.unpack200.MetadataBandGroup.<init>(String,CpBands)",Has_Method
org.apache.commons.compress.harmony.unpack200.Segment,org.apache.commons.compress.harmony.unpack200.Segment.buildClassFile(int),Has_Method
org.apache.commons.compress.harmony.unpack200.Segment,"org.apache.commons.compress.harmony.unpack200.Segment.computeIcStored(IcTuple[],IcTuple[])",Has_Method
org.apache.commons.compress.harmony.unpack200.Segment,org.apache.commons.compress.harmony.unpack200.Segment.getAttrDefinitionBands(),Has_Method
org.apache.commons.compress.harmony.unpack200.Segment,org.apache.commons.compress.harmony.unpack200.Segment.getClassBands(),Has_Method
org.apache.commons.compress.harmony.unpack200.Segment,org.apache.commons.compress.harmony.unpack200.Segment.getConstantPool(),Has_Method
org.apache.commons.compress.harmony.unpack200.Segment,org.apache.commons.compress.harmony.unpack200.Segment.getCpBands(),Has_Method
org.apache.commons.compress.harmony.unpack200.Segment,org.apache.commons.compress.harmony.unpack200.Segment.getIcBands(),Has_Method
org.apache.commons.compress.harmony.unpack200.Segment,org.apache.commons.compress.harmony.unpack200.Segment.getSegmentHeader(),Has_Method
org.apache.commons.compress.harmony.unpack200.Segment,"org.apache.commons.compress.harmony.unpack200.Segment.log(int,String)",Has_Method
org.apache.commons.compress.harmony.unpack200.Segment,org.apache.commons.compress.harmony.unpack200.Segment.overrideDeflateHint(boolean),Has_Method
org.apache.commons.compress.harmony.unpack200.Segment,org.apache.commons.compress.harmony.unpack200.Segment.parseSegment(),Has_Method
org.apache.commons.compress.harmony.unpack200.Segment,org.apache.commons.compress.harmony.unpack200.Segment.readSegment(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.Segment,org.apache.commons.compress.harmony.unpack200.Segment.setLogLevel(int),Has_Method
org.apache.commons.compress.harmony.unpack200.Segment,org.apache.commons.compress.harmony.unpack200.Segment.setLogStream(OutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.Segment,org.apache.commons.compress.harmony.unpack200.Segment.setPreRead(boolean),Has_Method
org.apache.commons.compress.harmony.unpack200.Segment,"org.apache.commons.compress.harmony.unpack200.Segment.unpack(InputStream,JarOutputStream)",Has_Method
org.apache.commons.compress.harmony.unpack200.Segment,org.apache.commons.compress.harmony.unpack200.Segment.unpackProcess(),Has_Method
org.apache.commons.compress.harmony.unpack200.Segment,org.apache.commons.compress.harmony.unpack200.Segment.unpackRead(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.Segment,org.apache.commons.compress.harmony.unpack200.Segment.unpackWrite(JarOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.Segment,org.apache.commons.compress.harmony.unpack200.Segment.writeJar(JarOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter,org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(File),Has_Method
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter,org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(FileInputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter,org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter,org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(Path),Has_Method
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter,"org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(String,String[])",Has_Method
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter,org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.newBoundedInputStream(URL),Has_Method
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter,"org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.readField(Object,String)",Has_Method
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter,org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.readPathString(FileInputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter,org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unwrap(FilterInputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter,org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unwrap(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter,"org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unpack(File,JarOutputStream)",Has_Method
org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter,"org.apache.commons.compress.harmony.unpack200.Pack200UnpackerAdapter.unpack(InputStream,JarOutputStream)",Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap,org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getDefaultAttributeLayouts(),Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap,org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.add(AttributeLayout),Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap,"org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.add(AttributeLayout,NewAttributeBands)",Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap,org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.checkMap(),Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap,org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeBands(AttributeLayout),Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap,"org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeLayout(int,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap,"org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getAttributeLayout(String,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap,org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.getLayout(int),Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap,org.apache.commons.compress.harmony.unpack200.AttributeLayoutMap.<init>(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,"org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec)",Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,"org.apache.commons.compress.harmony.unpack200.SegmentHeader.decodeScalar(String,InputStream,BHSDCodec,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getArchiveModtime(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getArchiveSize(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getArchiveSizeOffset(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getAttributeDefinitionCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getBandHeadersInputStream(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getBandHeadersSize(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getClassCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpClassCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpDescriptorCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpDoubleCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpFieldCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpFloatCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpIMethodCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpIntCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpLongCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpMethodCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpSignatureCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpStringCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getCpUTF8Count(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getDefaultClassMajorVersion(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getDefaultClassMinorVersion(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getInnerClassCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getNumberOfFiles(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getOptions(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.getSegmentsRemaining(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.parseArchiveFileCounts(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.parseArchiveSpecialCounts(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.parseClassCounts(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.parseCpCounts(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.read(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.setArchiveMajorVersion(int),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.setArchiveMinorVersion(int),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.setArchiveModtime(long),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.setArchiveSize(long),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.setAttributeDefinitionCount(long),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.setBandHeadersData(byte[]),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.setSegmentsRemaining(long),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.unpack(),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentHeader,org.apache.commons.compress.harmony.unpack200.SegmentHeader.<init>(Segment),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentUtils,org.apache.commons.compress.harmony.unpack200.SegmentUtils.countArgs(String),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentUtils,"org.apache.commons.compress.harmony.unpack200.SegmentUtils.countArgs(String,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentUtils,org.apache.commons.compress.harmony.unpack200.SegmentUtils.countBit16(int[]),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentUtils,org.apache.commons.compress.harmony.unpack200.SegmentUtils.countBit16(long[]),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentUtils,org.apache.commons.compress.harmony.unpack200.SegmentUtils.countBit16(long[][]),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentUtils,org.apache.commons.compress.harmony.unpack200.SegmentUtils.countInvokeInterfaceArgs(String),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentUtils,"org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[],IMatcher)",Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentUtils,"org.apache.commons.compress.harmony.unpack200.SegmentUtils.countMatches(long[][],IMatcher)",Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayout,"org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(String,long,SegmentConstantPool)",Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayout,org.apache.commons.compress.harmony.unpack200.AttributeLayout.getCodec(),Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayout,org.apache.commons.compress.harmony.unpack200.AttributeLayout.getContext(),Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayout,org.apache.commons.compress.harmony.unpack200.AttributeLayout.getIndex(),Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayout,org.apache.commons.compress.harmony.unpack200.AttributeLayout.getLayout(),Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayout,org.apache.commons.compress.harmony.unpack200.AttributeLayout.getName(),Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayout,"org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(long,SegmentConstantPool)",Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayout,"org.apache.commons.compress.harmony.unpack200.AttributeLayout.getValue(long,String,SegmentConstantPool)",Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayout,org.apache.commons.compress.harmony.unpack200.AttributeLayout.hashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayout,org.apache.commons.compress.harmony.unpack200.AttributeLayout.isDefaultLayout(),Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayout,org.apache.commons.compress.harmony.unpack200.AttributeLayout.matches(long),Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayout,org.apache.commons.compress.harmony.unpack200.AttributeLayout.numBackwardsCallables(),Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayout,org.apache.commons.compress.harmony.unpack200.AttributeLayout.setBackwardsCallCount(int),Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayout,org.apache.commons.compress.harmony.unpack200.AttributeLayout.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayout,"org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.AttributeLayout,"org.apache.commons.compress.harmony.unpack200.AttributeLayout.<init>(String,int,String,int,boolean)",Has_Method
org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands,org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.getAttributeDefinitionMap(),Has_Method
org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands,org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.read(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands,org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.setupDefaultAttributeNames(),Has_Method
org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands,org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.unpack(),Has_Method
org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands,org.apache.commons.compress.harmony.unpack200.AttrDefinitionBands.<init>(Segment),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.cpClassValue(int),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.cpClassValue(String),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.cpDoubleValue(int),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.cpFieldValue(int),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.cpFloatValue(int),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.cpIMethodValue(int),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.cpIntegerValue(int),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.cpLongValue(int),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.cpMethodValue(int),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.cpNameAndTypeValue(int),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.cpNameAndTypeValue(String),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.cpSignatureValue(int),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.cpStringValue(int),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.cpUTF8Value(int),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.cpUTF8Value(String),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,"org.apache.commons.compress.harmony.unpack200.CpBands.cpUTF8Value(String,boolean)",Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.getConstantPool(),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.getCpClass(),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.getCpDescriptor(),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.getCpDescriptorNameInts(),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.getCpDescriptorTypeInts(),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.getCpFieldClass(),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.getCpIMethodClass(),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.getCpInt(),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.getCpLong(),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.getCpMethodClass(),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.getCpMethodDescriptor(),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.getCpSignature(),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.getCpUTF8(),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpClass(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpDescriptor(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpDouble(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpField(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpFloat(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpIMethod(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpInt(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpLong(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpMethod(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpSignature(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpString(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.parseCpUtf8(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.read(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.unpack(),Has_Method
org.apache.commons.compress.harmony.unpack200.CpBands,org.apache.commons.compress.harmony.unpack200.CpBands.<init>(Segment),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.getBackwardsCallCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.getCodec(String),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands,"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.getOneAttribute(int,List)",Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.getStreamUpToMatchingBracket(StringReader),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands,"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.parseAttributes(InputStream,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.parseLayout(),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.read(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readBody(StringReader),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readNextAttributeElement(StringReader),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readNextLayoutElement(StringReader),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readNextUnionCase(StringReader),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readNumber(StringReader),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.readUpToMatchingBracket(StringReader),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.resolveCalls(),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands,"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement)",Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.setBackwardsCalls(int[]),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands,org.apache.commons.compress.harmony.unpack200.NewAttributeBands.unpack(),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands,"org.apache.commons.compress.harmony.unpack200.NewAttributeBands.<init>(Segment,AttributeLayout)",Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$AttributeLayoutElement,"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$AttributeLayoutElement.addToAttribute(int,NewAttribute)",Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$AttributeLayoutElement,"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$AttributeLayoutElement.readBands(InputStream,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call,"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.addToAttribute(int,NewAttribute)",Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.getCallable(),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.getCallableIndex(),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call,"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.readBands(InputStream,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Call.setCallable(Callable),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.addCount(int),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.addNextToAttribute(NewAttribute),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable,"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.addToAttribute(int,NewAttribute)",Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.getBody(),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.isBackwardsCallable(),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable,"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.readBands(InputStream,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.setBackwardsCallable(),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.setFirstCallable(boolean),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Callable.<init>(List),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral,"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.addToAttribute(int,NewAttribute)",Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.getTag(),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.getValue(int),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral,"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Integral.readBands(InputStream,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$LayoutElement,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$LayoutElement.getLength(char),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference,"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.addToAttribute(int,NewAttribute)",Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.getTag(),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference,"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Reference.readBands(InputStream,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication,"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.addToAttribute(int,NewAttribute)",Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.getCountElement(),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.getLayoutElements(),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication,"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Replication.readBands(InputStream,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union,"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.addToAttribute(int,NewAttribute)",Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.getDefaultCaseBody(),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.getUnionCases(),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.getUnionTag(),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union,"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$Union.readBands(InputStream,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase,"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.addToAttribute(int,NewAttribute)",Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.getBody(),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.hasTag(int),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase,org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.hasTag(long),Has_Method
org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase,"org.apache.commons.compress.harmony.unpack200.NewAttributeBands$UnionCase.readBands(InputStream,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool,"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.regexMatches(String,String)",Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool,org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getClassPoolEntry(String),Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool,"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getClassSpecificPoolEntry(int,long,String)",Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool,"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getConstantPoolEntry(int,long)",Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool,"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getInitMethodPoolEntry(int,long,String)",Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool,"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.getValue(int,long)",Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool,"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool,"org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.matchSpecificPoolEntryIndex(String[],String[],String,String,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.SegmentConstantPool,org.apache.commons.compress.harmony.unpack200.SegmentConstantPool.<init>(CpBands),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPClass,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.equals(Object),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPClass,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.generateHashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPClass,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.getName(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPClass,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPClass,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.hashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPClass,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPClass,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPClass,org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPClass,"org.apache.commons.compress.harmony.unpack200.bytecode.CPClass.<init>(CPUTF8,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPRef,org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.equals(Object),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPRef,org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPRef,org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPRef,org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPRef,org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPRef,"org.apache.commons.compress.harmony.unpack200.bytecode.CPRef.<init>(byte,CPClass,CPNameAndType,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPMember,org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.doWrite(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPMember,org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.equals(Object),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPMember,org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPMember,org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.hashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPMember,org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPMember,org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPMember,"org.apache.commons.compress.harmony.unpack200.bytecode.CPMember.<init>(CPUTF8,CPUTF8,long,List)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.getCatchType(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.renumber(List),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.write(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry,"org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionTableEntry.<init>(int,int,int,CPClass)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat,org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat,org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat,"org.apache.commons.compress.harmony.unpack200.bytecode.CPFloat.<init>(Float,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble,org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble,org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble,"org.apache.commons.compress.harmony.unpack200.bytecode.CPDouble.<init>(Double,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.doWrite(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.equals(Object),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.getGlobalIndex(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.getTag(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.hashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry,"org.apache.commons.compress.harmony.unpack200.bytecode.ConstantPoolEntry.<init>(byte,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm.getOffset(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm.getPoolID(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FieldRefForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.setByteCodeOperands(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LocalForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite2Bytes(int,int,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite4Bytes(int,int,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.setRewrite4Bytes(int,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.VariableInstructionForm.<init>(int,String)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm.fixUpByteCodeTargets(ByteCode,CodeAttribute)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SwitchForm.<init>(int,String)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.getOffset(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.getPoolID(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.FloatRefForm.<init>(int,String,int[],boolean)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.getOffset(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.getPoolID(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.nestedMustStartClassPool(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.setNestedEntries(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SingleByteReferenceForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.context(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.getOffset(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.getPoolID(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.setNestedEntries(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.InitMethodReferenceForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.setByteCodeOperands(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.setByteCodeOperands(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ShortForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.context(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.getOffset(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.getPoolID(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisFieldRefForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.getOffset(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.getPoolID(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.setNestedEntries(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassRefForm.<init>(int,String,int[],boolean)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.context(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.setNestedEntries(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewInitMethodRefForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm.context(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisInitMethodRefForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperands(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat1(int,ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.setByteCodeOperandsFormat2(int,ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.WideForm.<init>(int,String)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.getOffset(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.getPoolID(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IntRefForm.<init>(int,String,int[],boolean)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm.setByteCodeOperands(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NoArgumentForm.<init>(int,String)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.setByteCodeOperands(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NewClassRefForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.context(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.getOffset(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.getPoolID(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ThisMethodRefForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.get(int),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.calculateOperandPosition(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.firstOperandIndex(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.fixUpByteCodeTargets(ByteCode,CodeAttribute)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.getName(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.getOpcode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.getRewrite(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.getRewriteCopy(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.hasMultipleByteCodes(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.hasNoOperand(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.nestedMustStartClassPool(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.operandLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.setByteCodeOperands(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<init>(int,String)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ByteCodeForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.nestedMustStartClassPool(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.setNestedEntries(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.NarrowClassRefForm.<init>(int,String,int[],boolean)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm.getOffset(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm.getPoolID(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.DoubleForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.setByteCodeOperands(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MultiANewArrayForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.getOffset(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.getPoolID(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.setByteCodeOperands(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IMethodRefForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm.getOffset(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm.getPoolID(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.MethodRefForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.context(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.getOffset(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.getPoolID(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperFieldRefForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.context(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.getOffset(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.getPoolID(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.setNestedEntries(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ClassSpecificReferenceForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.getOffset(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.getPoolID(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setByteCodeOperands(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.setNestedEntries(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.ReferenceForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.TableSwitchForm.<init>(int,String)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm.getOffset(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm.getPoolID(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LongForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.context(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.getOffset(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.getPoolID(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperMethodRefForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.setByteCodeOperands(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.IincForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.setByteCodeOperands(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LookupSwitchForm.<init>(int,String)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm.context(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.SuperInitMethodRefForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.getOffset(OperandManager),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm,org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.getPoolID(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.setNestedEntries(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.StringRefForm.<init>(int,String,int[],boolean)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.fixUpByteCodeTargets(ByteCode,CodeAttribute)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.setByteCodeOperands(ByteCode,OperandManager,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm,"org.apache.commons.compress.harmony.unpack200.bytecode.forms.LabelForm.<init>(int,String,int[],boolean)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.setAttributeName(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute,"org.apache.commons.compress.harmony.unpack200.bytecode.EnclosingMethodAttribute.<init>(CPClass,CPNameAndType)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.setAttributeName(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.getStartPCs(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.renumber(List),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.setCodeLength(int),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute,"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTypeTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.add(ClassFileEntry),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.addNestedEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.addWithNestedEntries(ClassFileEntry),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.entries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.get(int),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.indexOf(ClassFileEntry),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.initialSort(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.resolve(Segment),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.size(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool,org.apache.commons.compress.harmony.unpack200.bytecode.ClassConstantPool.sortClassPool(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute,"org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleAnnotationsAttribute.<init>(CPUTF8,Annotation[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFile.write(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.getStartPCs(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.hasBCIRenumbering(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.renumber(List),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.BCIRenumberedAttribute.<init>(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.setAttributeName(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.DeprecatedAttribute.<init>(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPLong,org.apache.commons.compress.harmony.unpack200.bytecode.CPLong.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPLong,org.apache.commons.compress.harmony.unpack200.bytecode.CPLong.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPLong,"org.apache.commons.compress.harmony.unpack200.bytecode.CPLong.<init>(Long,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.setAttributeName(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.getStartPCs(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.renumber(List),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.setCodeLength(int),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute,"org.apache.commons.compress.harmony.unpack200.bytecode.LocalVariableTableAttribute.<init>(int,int[],int[],CPUTF8[],CPUTF8[],int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.setAttributeName(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.equals(Object),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.getStartPCs(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute,"org.apache.commons.compress.harmony.unpack200.bytecode.LineNumberTableAttribute.<init>(int,int[],int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.equals(Object),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.generateHashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.hashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.setGlobalIndex(int),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.underlyingString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8,org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.<init>(String),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8,"org.apache.commons.compress.harmony.unpack200.bytecode.CPUTF8.<init>(String,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.doWrite(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.equals(Object),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.hashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.objectHashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry,org.apache.commons.compress.harmony.unpack200.bytecode.ClassFileEntry.write(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber,org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber.getNumber(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber,"org.apache.commons.compress.harmony.unpack200.bytecode.CPConstantNumber.<init>(byte,Object,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant,org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.equals(Object),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant,org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.getValue(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant,org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.hashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant,"org.apache.commons.compress.harmony.unpack200.bytecode.CPConstant.<init>(byte,Object,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.setAttributeName(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.equals(Object),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationDefaultAttribute.<init>(ElementValue),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef,org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef.generateHashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef,org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef.hashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef,org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef.invokeInterfaceCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef,"org.apache.commons.compress.harmony.unpack200.bytecode.CPInterfaceMethodRef.<init>(CPClass,CPNameAndType,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.setAttributeName(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute,"org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.addInnerClassesEntry(CPClass,CPClass,CPUTF8,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.addInnerClassesEntry(InnerClassesEntry),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.equals(Object),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.hashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute.<init>(String),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry,org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.write(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry,"org.apache.commons.compress.harmony.unpack200.bytecode.InnerClassesAttribute$InnerClassesEntry.<init>(CPClass,CPClass,CPUTF8,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute,"org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute.<init>(CPUTF8,ParameterAnnotation[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.getClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation,org.apache.commons.compress.harmony.unpack200.bytecode.RuntimeVisibleorInvisibleParameterAnnotationsAttribute$ParameterAnnotation.<init>(Annotation[]),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute.<init>(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.getClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation,"org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$Annotation.<init>(int,CPUTF8,CPUTF8[],ElementValue[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.getClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue,org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue,"org.apache.commons.compress.harmony.unpack200.bytecode.AnnotationsAttribute$ElementValue.<init>(int,Object)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod,org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.generateHashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod,org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.hashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod,org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod,"org.apache.commons.compress.harmony.unpack200.bytecode.CPMethod.<init>(CPUTF8,CPUTF8,long,List)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.equals(Object),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.generateHashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.hashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.invokeInterfaceCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType,org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType,"org.apache.commons.compress.harmony.unpack200.bytecode.CPNameAndType.<init>(CPUTF8,CPUTF8,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef,org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef.generateHashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef,org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef,org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef.hashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef,"org.apache.commons.compress.harmony.unpack200.bytecode.CPMethodRef.<init>(CPClass,CPNameAndType,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger,org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger,org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger,"org.apache.commons.compress.harmony.unpack200.bytecode.CPInteger.<init>(Integer,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute,"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCIndex(int,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute,"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCLength(int,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute,"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addBCOffset(int,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute,"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addInteger(int,long)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute,"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.addToBody(int,Object)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.getLayoutIndex(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.getStartPCs(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.renumber(List),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute,"org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute.<init>(CPUTF8,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$AbstractBcValue,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$AbstractBcValue.setActualValue(int),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCIndex,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCIndex.<init>(int),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCLength,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCLength.<init>(int),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCOffset,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCOffset.setIndex(int),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCOffset,org.apache.commons.compress.harmony.unpack200.bytecode.NewAttribute$BCOffset.<init>(int),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.setAttributeName(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.equals(Object),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.hashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.ConstantValueAttribute.<init>(ClassFileEntry),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPField,org.apache.commons.compress.harmony.unpack200.bytecode.CPField.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPField,"org.apache.commons.compress.harmony.unpack200.bytecode.CPField.<init>(CPUTF8,CPUTF8,long,List)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef,org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.equals(Object),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef,org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.generateHashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef,org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef,org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.hashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef,org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef,org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef,org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef,"org.apache.commons.compress.harmony.unpack200.bytecode.CPFieldRef.<init>(CPClass,CPNameAndType,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPString,org.apache.commons.compress.harmony.unpack200.bytecode.CPString.generateHashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPString,org.apache.commons.compress.harmony.unpack200.bytecode.CPString.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPString,org.apache.commons.compress.harmony.unpack200.bytecode.CPString.hashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPString,org.apache.commons.compress.harmony.unpack200.bytecode.CPString.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPString,org.apache.commons.compress.harmony.unpack200.bytecode.CPString.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPString,org.apache.commons.compress.harmony.unpack200.bytecode.CPString.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CPString,"org.apache.commons.compress.harmony.unpack200.bytecode.CPString.<init>(CPUTF8,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.doWrite(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.equals(Object),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.getAttributeName(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.getLengthIncludingHeader(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.hasBCIRenumbering(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.hashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.isSourceFileAttribute(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.Attribute,org.apache.commons.compress.harmony.unpack200.bytecode.Attribute.<init>(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.setAttributeName(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.SignatureAttribute.<init>(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.setAttributeName(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.equals(Object),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.hashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.isSourceFileAttribute(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.SourceFileAttribute.<init>(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.getCurrentClass(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.getNewClass(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.getSuperClass(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.globalConstantPool(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextByte(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextCaseCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextCaseValues(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextClassRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextDoubleRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextFieldRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextFloatRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextIMethodRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextInitRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextIntRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextLabel(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextLocal(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextLongRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextMethodRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextShort(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextStringRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextSuperFieldRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextSuperMethodRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextThisFieldRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextThisMethodRef(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.nextWideByteCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.setCurrentClass(String),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.setNewClass(String),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.setSegment(Segment),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.setSuperClass(String),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager,"org.apache.commons.compress.harmony.unpack200.bytecode.OperandManager.<init>(int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[],int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.setAttributeName(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.addAttribute(Attribute),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.getStartPCs(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.renumber(List),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute,"org.apache.commons.compress.harmony.unpack200.bytecode.CodeAttribute.<init>(int,int,byte[],Segment,OperandManager,List)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getByteCode(int),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.applyByteCodeTargetFixup(CodeAttribute),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.doWrite(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.equals(Object),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.extractOperands(OperandManager,Segment,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getByteCodeForm(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getByteCodeIndex(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getByteCodeTargets(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getName(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getNestedPosition(int),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getNestedPositions(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getOpcode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.getRewrite(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.hashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.hasMultipleByteCodes(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.nestedMustStartClassPool(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setByteCodeIndex(int),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setByteCodeTargets(int[]),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setNested(ClassFileEntry[]),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setNestedPositions(int[][]),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperand2Bytes(int,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandByte(int,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandBytes(int[]),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setOperandSigned2Bytes(int,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.setRewrite(int[]),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.<init>(int),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode,"org.apache.commons.compress.harmony.unpack200.bytecode.ByteCode.<init>(int,ClassFileEntry[])",Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.hashCode(Object[]),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.setAttributeName(CPUTF8),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.equals(Object),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.getLength(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.getNestedClassFileEntries(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.hashCode(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.resolve(ClassConstantPool),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.toString(),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.writeBody(DataOutputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute,org.apache.commons.compress.harmony.unpack200.bytecode.ExceptionsAttribute.<init>(CPClass[]),Has_Method
org.apache.commons.compress.harmony.unpack200.IcBands,org.apache.commons.compress.harmony.unpack200.IcBands.getIcTuples(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcBands,"org.apache.commons.compress.harmony.unpack200.IcBands.getRelevantIcTuples(String,ClassConstantPool)",Has_Method
org.apache.commons.compress.harmony.unpack200.IcBands,org.apache.commons.compress.harmony.unpack200.IcBands.read(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.IcBands,org.apache.commons.compress.harmony.unpack200.IcBands.unpack(),Has_Method
org.apache.commons.compress.harmony.unpack200.IcBands,org.apache.commons.compress.harmony.unpack200.IcBands.<init>(Segment),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,"org.apache.commons.compress.harmony.unpack200.ClassBands.getCallCount(int[][],long[][],int)",Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getClassAttributes(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getClassFieldCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getClassFlags(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getClassInterfacesInts(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getClassMethodCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getClassSuperInts(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getClassThisInts(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getClassVersionMajor(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getClassVersionMinor(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getCodeHandlerCatchPO(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getCodeHandlerClassRCN(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getCodeHandlerCount(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getCodeHandlerEndPO(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getCodeHandlerStartP(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getCodeHasAttributes(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getCodeMaxNALocals(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getCodeMaxStack(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getFieldAttributes(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getFieldDescrInts(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getFieldFlags(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getIcLocal(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getMethodAttributes(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getMethodDescr(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getMethodDescrInts(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getMethodFlags(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getOrderedCodeAttributes(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.getRawClassFlags(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.parseClassAttrBands(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,"org.apache.commons.compress.harmony.unpack200.ClassBands.parseClassMetadataBands(InputStream,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,"org.apache.commons.compress.harmony.unpack200.ClassBands.parseCodeAttrBands(InputStream,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.parseCodeBands(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.parseFieldAttrBands(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.parseFieldBands(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,"org.apache.commons.compress.harmony.unpack200.ClassBands.parseFieldMetadataBands(InputStream,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,"org.apache.commons.compress.harmony.unpack200.ClassBands.parseMetadata(InputStream,String[],int[],int[],String)",Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.parseMethodAttrBands(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.parseMethodBands(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,"org.apache.commons.compress.harmony.unpack200.ClassBands.parseMethodMetadataBands(InputStream,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.read(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.unpack(),Has_Method
org.apache.commons.compress.harmony.unpack200.ClassBands,org.apache.commons.compress.harmony.unpack200.ClassBands.<init>(Segment),Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.decodeBandInt(String,InputStream,BHSDCodec,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.getReferences(int[],String[])",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.getReferences(int[][],String[])",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPClassReferences(String,InputStream,BHSDCodec,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDescriptorReferences(String,InputStream,BHSDCodec,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPDoubleReferences(String,InputStream,BHSDCodec,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFieldRefReferences(String,InputStream,BHSDCodec,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPFloatReferences(String,InputStream,BHSDCodec,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPInterfaceMethodRefReferences(String,InputStream,BHSDCodec,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPIntReferences(String,InputStream,BHSDCodec,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPLongReferences(String,InputStream,BHSDCodec,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPMethodRefReferences(String,InputStream,BHSDCodec,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPSignatureReferences(String,InputStream,BHSDCodec,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPStringReferences(String,InputStream,BHSDCodec,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int)",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.parseCPUTF8References(String,InputStream,BHSDCodec,int[])",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,BHSDCodec)",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int,BHSDCodec,boolean)",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,BHSDCodec)",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.parseFlags(String,InputStream,int[],BHSDCodec,boolean)",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int,String[])",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,"org.apache.commons.compress.harmony.unpack200.BandSet.parseReferences(String,InputStream,BHSDCodec,int[],String[])",Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,org.apache.commons.compress.harmony.unpack200.BandSet.read(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,org.apache.commons.compress.harmony.unpack200.BandSet.unpack(),Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,org.apache.commons.compress.harmony.unpack200.BandSet.unpack(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.BandSet,org.apache.commons.compress.harmony.unpack200.BandSet.<init>(Segment),Has_Method
org.apache.commons.compress.harmony.unpack200.FileBands,org.apache.commons.compress.harmony.unpack200.FileBands.getFileBits(),Has_Method
org.apache.commons.compress.harmony.unpack200.FileBands,org.apache.commons.compress.harmony.unpack200.FileBands.getFileModtime(),Has_Method
org.apache.commons.compress.harmony.unpack200.FileBands,org.apache.commons.compress.harmony.unpack200.FileBands.getFileName(),Has_Method
org.apache.commons.compress.harmony.unpack200.FileBands,org.apache.commons.compress.harmony.unpack200.FileBands.getFileOptions(),Has_Method
org.apache.commons.compress.harmony.unpack200.FileBands,org.apache.commons.compress.harmony.unpack200.FileBands.getFileSize(),Has_Method
org.apache.commons.compress.harmony.unpack200.FileBands,org.apache.commons.compress.harmony.unpack200.FileBands.processFileBits(),Has_Method
org.apache.commons.compress.harmony.unpack200.FileBands,org.apache.commons.compress.harmony.unpack200.FileBands.read(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.FileBands,org.apache.commons.compress.harmony.unpack200.FileBands.unpack(),Has_Method
org.apache.commons.compress.harmony.unpack200.FileBands,org.apache.commons.compress.harmony.unpack200.FileBands.<init>(Segment),Has_Method
org.apache.commons.compress.harmony.unpack200.Archive,org.apache.commons.compress.harmony.unpack200.Archive.available(InputStream),Has_Method
org.apache.commons.compress.harmony.unpack200.Archive,org.apache.commons.compress.harmony.unpack200.Archive.setDeflateHint(boolean),Has_Method
org.apache.commons.compress.harmony.unpack200.Archive,org.apache.commons.compress.harmony.unpack200.Archive.setLogFile(String),Has_Method
org.apache.commons.compress.harmony.unpack200.Archive,"org.apache.commons.compress.harmony.unpack200.Archive.setLogFile(String,boolean)",Has_Method
org.apache.commons.compress.harmony.unpack200.Archive,org.apache.commons.compress.harmony.unpack200.Archive.setQuiet(boolean),Has_Method
org.apache.commons.compress.harmony.unpack200.Archive,org.apache.commons.compress.harmony.unpack200.Archive.setRemovePackFile(boolean),Has_Method
org.apache.commons.compress.harmony.unpack200.Archive,org.apache.commons.compress.harmony.unpack200.Archive.setVerbose(boolean),Has_Method
org.apache.commons.compress.harmony.unpack200.Archive,org.apache.commons.compress.harmony.unpack200.Archive.unpack(),Has_Method
org.apache.commons.compress.harmony.unpack200.Archive,"org.apache.commons.compress.harmony.unpack200.Archive.<init>(InputStream,JarOutputStream)",Has_Method
org.apache.commons.compress.harmony.unpack200.Archive,"org.apache.commons.compress.harmony.unpack200.Archive.<init>(String,String)",Has_Method
org.apache.commons.compress.harmony.unpack200.IMatcher,org.apache.commons.compress.harmony.unpack200.IMatcher.matches(long),Has_Method
org.apache.commons.compress.harmony.archive.internal.nls.Messages,"org.apache.commons.compress.harmony.archive.internal.nls.Messages.format(String,Object[])",Has_Method
org.apache.commons.compress.harmony.archive.internal.nls.Messages,org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String),Has_Method
org.apache.commons.compress.harmony.archive.internal.nls.Messages,"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,char)",Has_Method
org.apache.commons.compress.harmony.archive.internal.nls.Messages,"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,int)",Has_Method
org.apache.commons.compress.harmony.archive.internal.nls.Messages,"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object)",Has_Method
org.apache.commons.compress.harmony.archive.internal.nls.Messages,"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object,Object)",Has_Method
org.apache.commons.compress.harmony.archive.internal.nls.Messages,"org.apache.commons.compress.harmony.archive.internal.nls.Messages.getString(String,Object[])",Has_Method
org.apache.commons.compress.harmony.archive.internal.nls.Messages,"org.apache.commons.compress.harmony.archive.internal.nls.Messages.setLocale(Locale,String)",Has_Method
org.apache.commons.compress.harmony.pack200.CPClass,org.apache.commons.compress.harmony.pack200.CPClass.compareTo(CPClass),Has_Method
org.apache.commons.compress.harmony.pack200.CPClass,org.apache.commons.compress.harmony.pack200.CPClass.getIndexInCpUtf8(),Has_Method
org.apache.commons.compress.harmony.pack200.CPClass,org.apache.commons.compress.harmony.pack200.CPClass.isInnerClass(),Has_Method
org.apache.commons.compress.harmony.pack200.CPClass,org.apache.commons.compress.harmony.pack200.CPClass.toString(),Has_Method
org.apache.commons.compress.harmony.pack200.CPClass,org.apache.commons.compress.harmony.pack200.CPClass.<init>(CPUTF8),Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,org.apache.commons.compress.harmony.pack200.BcBands.finaliseBands(),Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,org.apache.commons.compress.harmony.pack200.BcBands.getIndexInClass(List),Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,org.apache.commons.compress.harmony.pack200.BcBands.getIndexInClassForConstructor(List),Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,org.apache.commons.compress.harmony.pack200.BcBands.pack(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,"org.apache.commons.compress.harmony.pack200.BcBands.setCurrentClass(String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,org.apache.commons.compress.harmony.pack200.BcBands.updateRenumbering(),Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,org.apache.commons.compress.harmony.pack200.BcBands.visitEnd(),Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,"org.apache.commons.compress.harmony.pack200.BcBands.visitFieldInsn(int,String,String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,"org.apache.commons.compress.harmony.pack200.BcBands.visitIincInsn(int,int)",Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,org.apache.commons.compress.harmony.pack200.BcBands.visitInsn(int),Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,"org.apache.commons.compress.harmony.pack200.BcBands.visitIntInsn(int,int)",Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,"org.apache.commons.compress.harmony.pack200.BcBands.visitJumpInsn(int,Label)",Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,org.apache.commons.compress.harmony.pack200.BcBands.visitLabel(Label),Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,org.apache.commons.compress.harmony.pack200.BcBands.visitLdcInsn(Object),Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,"org.apache.commons.compress.harmony.pack200.BcBands.visitLookupSwitchInsn(Label,int[],Label[])",Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,"org.apache.commons.compress.harmony.pack200.BcBands.visitMethodInsn(int,String,String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,"org.apache.commons.compress.harmony.pack200.BcBands.visitMultiANewArrayInsn(String,int)",Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,"org.apache.commons.compress.harmony.pack200.BcBands.visitTableSwitchInsn(int,int,Label,Label[])",Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,"org.apache.commons.compress.harmony.pack200.BcBands.visitTypeInsn(int,String)",Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,"org.apache.commons.compress.harmony.pack200.BcBands.visitVarInsn(int,int)",Has_Method
org.apache.commons.compress.harmony.pack200.BcBands,"org.apache.commons.compress.harmony.pack200.BcBands.<init>(CpBands,Segment,int)",Has_Method
org.apache.commons.compress.harmony.pack200.CPFloat,org.apache.commons.compress.harmony.pack200.CPFloat.compareTo(CPFloat),Has_Method
org.apache.commons.compress.harmony.pack200.CPFloat,org.apache.commons.compress.harmony.pack200.CPFloat.getFloat(),Has_Method
org.apache.commons.compress.harmony.pack200.CPFloat,org.apache.commons.compress.harmony.pack200.CPFloat.<init>(float),Has_Method
org.apache.commons.compress.harmony.pack200.CPDouble,org.apache.commons.compress.harmony.pack200.CPDouble.compareTo(CPDouble),Has_Method
org.apache.commons.compress.harmony.pack200.CPDouble,org.apache.commons.compress.harmony.pack200.CPDouble.getDouble(),Has_Method
org.apache.commons.compress.harmony.pack200.CPDouble,org.apache.commons.compress.harmony.pack200.CPDouble.<init>(double),Has_Method
org.apache.commons.compress.harmony.pack200.ConstantPoolEntry,org.apache.commons.compress.harmony.pack200.ConstantPoolEntry.getIndex(),Has_Method
org.apache.commons.compress.harmony.pack200.ConstantPoolEntry,org.apache.commons.compress.harmony.pack200.ConstantPoolEntry.setIndex(int),Has_Method
org.apache.commons.compress.harmony.pack200.CPMethodOrField,org.apache.commons.compress.harmony.pack200.CPMethodOrField.compareTo(Object),Has_Method
org.apache.commons.compress.harmony.pack200.CPMethodOrField,org.apache.commons.compress.harmony.pack200.CPMethodOrField.getClassIndex(),Has_Method
org.apache.commons.compress.harmony.pack200.CPMethodOrField,org.apache.commons.compress.harmony.pack200.CPMethodOrField.getClassName(),Has_Method
org.apache.commons.compress.harmony.pack200.CPMethodOrField,org.apache.commons.compress.harmony.pack200.CPMethodOrField.getDesc(),Has_Method
org.apache.commons.compress.harmony.pack200.CPMethodOrField,org.apache.commons.compress.harmony.pack200.CPMethodOrField.getDescIndex(),Has_Method
org.apache.commons.compress.harmony.pack200.CPMethodOrField,org.apache.commons.compress.harmony.pack200.CPMethodOrField.getIndexInClass(),Has_Method
org.apache.commons.compress.harmony.pack200.CPMethodOrField,org.apache.commons.compress.harmony.pack200.CPMethodOrField.getIndexInClassForConstructor(),Has_Method
org.apache.commons.compress.harmony.pack200.CPMethodOrField,org.apache.commons.compress.harmony.pack200.CPMethodOrField.setIndexInClass(int),Has_Method
org.apache.commons.compress.harmony.pack200.CPMethodOrField,org.apache.commons.compress.harmony.pack200.CPMethodOrField.setIndexInClassForConstructor(int),Has_Method
org.apache.commons.compress.harmony.pack200.CPMethodOrField,org.apache.commons.compress.harmony.pack200.CPMethodOrField.toString(),Has_Method
org.apache.commons.compress.harmony.pack200.CPMethodOrField,"org.apache.commons.compress.harmony.pack200.CPMethodOrField.<init>(CPClass,CPNameAndType)",Has_Method
org.apache.commons.compress.harmony.pack200.MetadataBandGroup,"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addAnnotation(String,List,List,List,List,List,List,List)",Has_Method
org.apache.commons.compress.harmony.pack200.MetadataBandGroup,"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.addParameterAnnotation(int,int[],IntList,List,List,List,List,List,List,List,List)",Has_Method
org.apache.commons.compress.harmony.pack200.MetadataBandGroup,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.hasContent(),Has_Method
org.apache.commons.compress.harmony.pack200.MetadataBandGroup,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.incrementAnnoN(),Has_Method
org.apache.commons.compress.harmony.pack200.MetadataBandGroup,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.newEntryInAnnoN(),Has_Method
org.apache.commons.compress.harmony.pack200.MetadataBandGroup,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.nextString(Iterator),Has_Method
org.apache.commons.compress.harmony.pack200.MetadataBandGroup,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.numBackwardsCalls(),Has_Method
org.apache.commons.compress.harmony.pack200.MetadataBandGroup,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.pack(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.MetadataBandGroup,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.removeLatest(),Has_Method
org.apache.commons.compress.harmony.pack200.MetadataBandGroup,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.removeOnePair(),Has_Method
org.apache.commons.compress.harmony.pack200.MetadataBandGroup,org.apache.commons.compress.harmony.pack200.MetadataBandGroup.tagListToArray(List),Has_Method
org.apache.commons.compress.harmony.pack200.MetadataBandGroup,"org.apache.commons.compress.harmony.pack200.MetadataBandGroup.<init>(String,int,CpBands,SegmentHeader,int)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment,"org.apache.commons.compress.harmony.pack200.Segment.addValueAndTag(Object,List,List)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment,org.apache.commons.compress.harmony.pack200.Segment.getAttrBands(),Has_Method
org.apache.commons.compress.harmony.pack200.Segment,org.apache.commons.compress.harmony.pack200.Segment.getClassBands(),Has_Method
org.apache.commons.compress.harmony.pack200.Segment,org.apache.commons.compress.harmony.pack200.Segment.getCpBands(),Has_Method
org.apache.commons.compress.harmony.pack200.Segment,org.apache.commons.compress.harmony.pack200.Segment.getCurrentClassReader(),Has_Method
org.apache.commons.compress.harmony.pack200.Segment,org.apache.commons.compress.harmony.pack200.Segment.getIcBands(),Has_Method
org.apache.commons.compress.harmony.pack200.Segment,org.apache.commons.compress.harmony.pack200.Segment.getSegmentHeader(),Has_Method
org.apache.commons.compress.harmony.pack200.Segment,org.apache.commons.compress.harmony.pack200.Segment.lastConstantHadWideIndex(),Has_Method
org.apache.commons.compress.harmony.pack200.Segment,"org.apache.commons.compress.harmony.pack200.Segment.pack(SegmentUnit,OutputStream,PackingOptions)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment,org.apache.commons.compress.harmony.pack200.Segment.passCurrentClass(),Has_Method
org.apache.commons.compress.harmony.pack200.Segment,"org.apache.commons.compress.harmony.pack200.Segment.processClasses(SegmentUnit,Attribute[])",Has_Method
org.apache.commons.compress.harmony.pack200.Segment,"org.apache.commons.compress.harmony.pack200.Segment.visit(int,int,String,String,String,String[])",Has_Method
org.apache.commons.compress.harmony.pack200.Segment,"org.apache.commons.compress.harmony.pack200.Segment.visitAnnotation(String,boolean)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment,org.apache.commons.compress.harmony.pack200.Segment.visitAttribute(Attribute),Has_Method
org.apache.commons.compress.harmony.pack200.Segment,org.apache.commons.compress.harmony.pack200.Segment.visitEnd(),Has_Method
org.apache.commons.compress.harmony.pack200.Segment,"org.apache.commons.compress.harmony.pack200.Segment.visitField(int,String,String,String,Object)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment,"org.apache.commons.compress.harmony.pack200.Segment.visitInnerClass(String,String,String,int)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment,"org.apache.commons.compress.harmony.pack200.Segment.visitMethod(int,String,String,String,String[])",Has_Method
org.apache.commons.compress.harmony.pack200.Segment,"org.apache.commons.compress.harmony.pack200.Segment.visitOuterClass(String,String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment,"org.apache.commons.compress.harmony.pack200.Segment.visitSource(String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment,org.apache.commons.compress.harmony.pack200.Segment.<init>(),Has_Method
org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor,"org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visit(String,Object)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor,"org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitAnnotation(String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor,org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitArray(String),Has_Method
org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor,org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitEnd(),Has_Method
org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor,"org.apache.commons.compress.harmony.pack200.Segment$ArrayVisitor.visitEnum(String,String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visit(String,Object)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitAnnotation(String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor,org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitArray(String),Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor,org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitEnd(),Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentAnnotationVisitor.visitEnum(String,String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor.visitAnnotation(String,boolean)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor,org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor.visitAttribute(Attribute),Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor,org.apache.commons.compress.harmony.pack200.Segment$SegmentFieldVisitor.visitEnd(),Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitAnnotation(String,boolean)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitAnnotationDefault(),Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitAttribute(Attribute),Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitCode(),Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitEnd(),Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFieldInsn(int,String,String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitFrame(int,int,Object[],int,Object[])",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitIincInsn(int,int)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitInsn(int),Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitIntInsn(int,int)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitJumpInsn(int,Label)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLabel(Label),Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLdcInsn(Object),Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLineNumber(int,Label)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLocalVariable(String,String,String,Label,Label,int)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitLookupSwitchInsn(Label,int[],Label[])",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMaxs(int,int)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMethodInsn(int,String,String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitMultiANewArrayInsn(String,int)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitParameterAnnotation(int,String,boolean)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTableSwitchInsn(int,int,Label,Label[])",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTryCatchBlock(Label,Label,Label,String)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitTypeInsn(int,String)",Has_Method
org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor,"org.apache.commons.compress.harmony.pack200.Segment$SegmentMethodVisitor.visitVarInsn(int,int)",Has_Method
org.apache.commons.compress.harmony.pack200.CPInt,org.apache.commons.compress.harmony.pack200.CPInt.compareTo(CPInt),Has_Method
org.apache.commons.compress.harmony.pack200.CPInt,org.apache.commons.compress.harmony.pack200.CPInt.getInt(),Has_Method
org.apache.commons.compress.harmony.pack200.CPInt,org.apache.commons.compress.harmony.pack200.CPInt.<init>(int),Has_Method
org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter,"org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.firePropertyChange(String,Object,Object)",Has_Method
org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter,"org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.pack(JarFile,OutputStream)",Has_Method
org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter,"org.apache.commons.compress.harmony.pack200.Pack200PackerAdapter.pack(JarInputStream,OutputStream)",Has_Method
org.apache.commons.compress.harmony.pack200.Pack200Exception,org.apache.commons.compress.harmony.pack200.Pack200Exception.<init>(String),Has_Method
org.apache.commons.compress.harmony.pack200.CPLong,org.apache.commons.compress.harmony.pack200.CPLong.compareTo(CPLong),Has_Method
org.apache.commons.compress.harmony.pack200.CPLong,org.apache.commons.compress.harmony.pack200.CPLong.getLong(),Has_Method
org.apache.commons.compress.harmony.pack200.CPLong,org.apache.commons.compress.harmony.pack200.CPLong.toString(),Has_Method
org.apache.commons.compress.harmony.pack200.CPLong,org.apache.commons.compress.harmony.pack200.CPLong.<init>(long),Has_Method
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands,"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.addAttributeDefinitions(Map,int[],int)",Has_Method
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands,org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.addHighIndices(int[]),Has_Method
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands,org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.addSyntheticDefinitions(),Has_Method
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands,org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.finaliseBands(),Has_Method
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands,org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.getClassAttributeLayouts(),Has_Method
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands,org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.getCodeAttributeLayouts(),Has_Method
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands,org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.getFieldAttributeLayouts(),Has_Method
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands,org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.getMethodAttributeLayouts(),Has_Method
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands,org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.pack(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands,"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands.<init>(Segment,int,Attribute[])",Has_Method
org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition,"org.apache.commons.compress.harmony.pack200.AttributeDefinitionBands$AttributeDefinition.<init>(int,int,CPUTF8,CPUTF8)",Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.addMajorVersion(int),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.appendBandCodingSpecifier(int),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.calculateArchiveOptions(),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.getArchive_modtime(),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.getDefaultMajorVersion(),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.have_all_code_flags(),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.have_class_flags_hi(),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.have_code_flags_hi(),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.have_field_flags_hi(),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.have_file_modtime(),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.have_file_options(),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.have_file_size_hi(),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.have_method_flags_hi(),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.pack(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setAttribute_definition_count(int),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setClass_count(int),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Class_count(int),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Descr_count(int),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Double_count(int),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Field_count(int),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Float_count(int),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Imethod_count(int),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Int_count(int),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Long_count(int),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Method_count(int),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Signature_count(int),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_String_count(int),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setCp_Utf8_count(int),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setDeflate_hint(boolean),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setFile_count(int),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_all_code_flags(boolean),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_class_flags_hi(boolean),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_code_flags_hi(boolean),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_field_flags_hi(boolean),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setHave_method_flags_hi(boolean),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.setIc_count(int),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.writeArchiveFileCounts(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.writeArchiveSpecialCounts(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.writeClassCounts(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.writeCpCounts(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader,org.apache.commons.compress.harmony.pack200.SegmentHeader.<init>(),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader$Counter,org.apache.commons.compress.harmony.pack200.SegmentHeader$Counter.add(int),Has_Method
org.apache.commons.compress.harmony.pack200.SegmentHeader$Counter,org.apache.commons.compress.harmony.pack200.SegmentHeader$Counter.getMostCommon(),Has_Method
org.apache.commons.compress.harmony.pack200.CPSignature,org.apache.commons.compress.harmony.pack200.CPSignature.compareTo(Object),Has_Method
org.apache.commons.compress.harmony.pack200.CPSignature,org.apache.commons.compress.harmony.pack200.CPSignature.getClasses(),Has_Method
org.apache.commons.compress.harmony.pack200.CPSignature,org.apache.commons.compress.harmony.pack200.CPSignature.getIndexInCpUtf8(),Has_Method
org.apache.commons.compress.harmony.pack200.CPSignature,org.apache.commons.compress.harmony.pack200.CPSignature.getSignatureForm(),Has_Method
org.apache.commons.compress.harmony.pack200.CPSignature,org.apache.commons.compress.harmony.pack200.CPSignature.getUnderlyingString(),Has_Method
org.apache.commons.compress.harmony.pack200.CPSignature,org.apache.commons.compress.harmony.pack200.CPSignature.toString(),Has_Method
org.apache.commons.compress.harmony.pack200.CPSignature,"org.apache.commons.compress.harmony.pack200.CPSignature.<init>(String,CPUTF8,List)",Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,"org.apache.commons.compress.harmony.pack200.PackingOptions.addClassAttributeAction(String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,"org.apache.commons.compress.harmony.pack200.PackingOptions.addCodeAttributeAction(String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,"org.apache.commons.compress.harmony.pack200.PackingOptions.addFieldAttributeAction(String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,"org.apache.commons.compress.harmony.pack200.PackingOptions.addMethodAttributeAction(String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,"org.apache.commons.compress.harmony.pack200.PackingOptions.addOrUpdateAttributeActions(List,Map,int)",Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.addPassFile(String),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.getDeflateHint(),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.getEffort(),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.getLogFile(),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.getModificationTime(),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,"org.apache.commons.compress.harmony.pack200.PackingOptions.getOrDefault(Map,String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.getSegmentLimit(),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownAttributeAction(),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownAttributePrototypes(),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownClassAttributeAction(String),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownCodeAttributeAction(String),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownFieldAttributeAction(String),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.getUnknownMethodAttributeAction(String),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.isGzip(),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.isKeepDeflateHint(),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.isKeepFileOrder(),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.isPassFile(String),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.isStripDebug(),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.isVerbose(),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.removePassFile(String),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.setDeflateHint(String),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.setEffort(int),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.setGzip(boolean),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.setKeepFileOrder(boolean),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.setLogFile(String),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.setModificationTime(String),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.setQuiet(boolean),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.setSegmentLimit(long),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.setStripDebug(boolean),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.setUnknownAttributeAction(String),Has_Method
org.apache.commons.compress.harmony.pack200.PackingOptions,org.apache.commons.compress.harmony.pack200.PackingOptions.setVerbose(boolean),Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec.calculateLargest(),Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec.calculateSmallest(),Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec.cardinality(),Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec.decode(InputStream),Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,"org.apache.commons.compress.harmony.pack200.BHSDCodec.decode(InputStream,long)",Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,"org.apache.commons.compress.harmony.pack200.BHSDCodec.decodeInts(int,InputStream)",Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,"org.apache.commons.compress.harmony.pack200.BHSDCodec.decodeInts(int,InputStream,int)",Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec.encode(int),Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,"org.apache.commons.compress.harmony.pack200.BHSDCodec.encode(int,int)",Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec.encodes(long),Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec.equals(Object),Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec.getB(),Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec.getH(),Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec.getL(),Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec.getS(),Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec.hashCode(),Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec.isDelta(),Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec.isSigned(),Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec.largest(),Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec.smallest(),Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,org.apache.commons.compress.harmony.pack200.BHSDCodec.toString(),Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int)",Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int)",Has_Method
org.apache.commons.compress.harmony.pack200.BHSDCodec,"org.apache.commons.compress.harmony.pack200.BHSDCodec.<init>(int,int,int,int)",Has_Method
org.apache.commons.compress.harmony.pack200.CPUTF8,org.apache.commons.compress.harmony.pack200.CPUTF8.compareTo(Object),Has_Method
org.apache.commons.compress.harmony.pack200.CPUTF8,org.apache.commons.compress.harmony.pack200.CPUTF8.getUnderlyingString(),Has_Method
org.apache.commons.compress.harmony.pack200.CPUTF8,org.apache.commons.compress.harmony.pack200.CPUTF8.toString(),Has_Method
org.apache.commons.compress.harmony.pack200.CPUTF8,org.apache.commons.compress.harmony.pack200.CPUTF8.<init>(String),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,"org.apache.commons.compress.harmony.pack200.CpBands.addCharacters(List,char[])",Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.addCPClass(String),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.addCPUtf8(String),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.addIndices(),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.existsCpClass(String),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.finaliseBands(),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.getConstant(Object),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.getCPClass(String),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,"org.apache.commons.compress.harmony.pack200.CpBands.getCPField(CPClass,String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,"org.apache.commons.compress.harmony.pack200.CpBands.getCPField(String,String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,"org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(CPClass,String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,"org.apache.commons.compress.harmony.pack200.CpBands.getCPIMethod(String,String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,"org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(CPClass,String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,"org.apache.commons.compress.harmony.pack200.CpBands.getCPMethod(String,String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,"org.apache.commons.compress.harmony.pack200.CpBands.getCPNameAndType(String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.getCPSignature(String),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.getCPUtf8(String),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.pack(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.removeCpUtf8(String),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.removeSignaturesFromCpUTF8(),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.writeCpClass(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.writeCpDescr(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.writeCpDouble(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.writeCpFloat(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.writeCpInt(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.writeCpLong(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,"org.apache.commons.compress.harmony.pack200.CpBands.writeCpMethodOrField(Set,OutputStream,String)",Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.writeCpSignature(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.writeCpString(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,org.apache.commons.compress.harmony.pack200.CpBands.writeCpUtf8(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.CpBands,"org.apache.commons.compress.harmony.pack200.CpBands.<init>(Segment,int)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands,org.apache.commons.compress.harmony.pack200.NewAttributeBands.addAttribute(NewAttribute),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands,org.apache.commons.compress.harmony.pack200.NewAttributeBands.getAttributeName(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands,org.apache.commons.compress.harmony.pack200.NewAttributeBands.getCodec(String),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands,org.apache.commons.compress.harmony.pack200.NewAttributeBands.getFlagIndex(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands,org.apache.commons.compress.harmony.pack200.NewAttributeBands.getStreamUpToMatchingBracket(StringReader),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands,org.apache.commons.compress.harmony.pack200.NewAttributeBands.isUsedAtLeastOnce(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands,org.apache.commons.compress.harmony.pack200.NewAttributeBands.numBackwardsCalls(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands,org.apache.commons.compress.harmony.pack200.NewAttributeBands.pack(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands,org.apache.commons.compress.harmony.pack200.NewAttributeBands.parseLayout(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands,org.apache.commons.compress.harmony.pack200.NewAttributeBands.readBody(StringReader),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands,"org.apache.commons.compress.harmony.pack200.NewAttributeBands.readInteger(int,InputStream)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands,org.apache.commons.compress.harmony.pack200.NewAttributeBands.readNextAttributeElement(StringReader),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands,org.apache.commons.compress.harmony.pack200.NewAttributeBands.readNextLayoutElement(StringReader),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands,org.apache.commons.compress.harmony.pack200.NewAttributeBands.readNextUnionCase(StringReader),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands,org.apache.commons.compress.harmony.pack200.NewAttributeBands.readNumber(StringReader),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands,org.apache.commons.compress.harmony.pack200.NewAttributeBands.readUpToMatchingBracket(StringReader),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands,"org.apache.commons.compress.harmony.pack200.NewAttributeBands.renumberBci(IntList,Map)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands,org.apache.commons.compress.harmony.pack200.NewAttributeBands.resolveCalls(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands,"org.apache.commons.compress.harmony.pack200.NewAttributeBands.resolveCallsForElement(int,Callable,LayoutElement)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands,"org.apache.commons.compress.harmony.pack200.NewAttributeBands.<init>(int,CpBands,SegmentHeader,AttributeDefinition)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement,"org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement.addAttributeToBand(NewAttribute,InputStream)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement,org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement.pack(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement,"org.apache.commons.compress.harmony.pack200.NewAttributeBands$AttributeLayoutElement.renumberBci(IntList,Map)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call,"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.addAttributeToBand(NewAttribute,InputStream)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.getCallable(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.getCallableIndex(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.pack(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call,"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.renumberBci(IntList,Map)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Call.setCallable(Callable),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable,"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.addAttributeToBand(NewAttribute,InputStream)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.addBackwardsCall(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.getBody(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.isBackwardsCallable(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.pack(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable,"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.renumberBci(IntList,Map)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.setBackwardsCallable(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Callable.setBackwardsCallableIndex(int),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral,"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.addAttributeToBand(NewAttribute,InputStream)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.getTag(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.latestValue(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.pack(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral,"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.renumberBci(IntList,Map)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral,"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Integral.renumberOffsetBci(List,IntList,Map)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$LayoutElement,org.apache.commons.compress.harmony.pack200.NewAttributeBands$LayoutElement.getLength(char),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference,"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.addAttributeToBand(NewAttribute,InputStream)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.getTag(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.pack(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference,"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Reference.renumberBci(IntList,Map)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication,"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.addAttributeToBand(NewAttribute,InputStream)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.getCountElement(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.getLayoutElements(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.pack(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication,"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Replication.renumberBci(IntList,Map)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union,"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.addAttributeToBand(NewAttribute,InputStream)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.getDefaultCaseBody(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.getUnionCases(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.getUnionTag(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union,org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.pack(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union,"org.apache.commons.compress.harmony.pack200.NewAttributeBands$Union.renumberBci(IntList,Map)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase,"org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.addAttributeToBand(NewAttribute,InputStream)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase,org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.getBody(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase,org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.hasTag(long),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase,org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.pack(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase,"org.apache.commons.compress.harmony.pack200.NewAttributeBands$UnionCase.renumberBci(IntList,Map)",Has_Method
org.apache.commons.compress.harmony.pack200.CPNameAndType,org.apache.commons.compress.harmony.pack200.CPNameAndType.compareTo(Object),Has_Method
org.apache.commons.compress.harmony.pack200.CPNameAndType,org.apache.commons.compress.harmony.pack200.CPNameAndType.getName(),Has_Method
org.apache.commons.compress.harmony.pack200.CPNameAndType,org.apache.commons.compress.harmony.pack200.CPNameAndType.getNameIndex(),Has_Method
org.apache.commons.compress.harmony.pack200.CPNameAndType,org.apache.commons.compress.harmony.pack200.CPNameAndType.getTypeIndex(),Has_Method
org.apache.commons.compress.harmony.pack200.CPNameAndType,org.apache.commons.compress.harmony.pack200.CPNameAndType.toString(),Has_Method
org.apache.commons.compress.harmony.pack200.CPNameAndType,"org.apache.commons.compress.harmony.pack200.CPNameAndType.<init>(CPUTF8,CPSignature)",Has_Method
org.apache.commons.compress.harmony.pack200.PackingUtils,org.apache.commons.compress.harmony.pack200.PackingUtils.config(PackingOptions),Has_Method
org.apache.commons.compress.harmony.pack200.PackingUtils,"org.apache.commons.compress.harmony.pack200.PackingUtils.copyThroughJar(JarFile,OutputStream)",Has_Method
org.apache.commons.compress.harmony.pack200.PackingUtils,"org.apache.commons.compress.harmony.pack200.PackingUtils.copyThroughJar(JarInputStream,OutputStream)",Has_Method
org.apache.commons.compress.harmony.pack200.PackingUtils,"org.apache.commons.compress.harmony.pack200.PackingUtils.getPackingFileListFromJar(JarFile,boolean)",Has_Method
org.apache.commons.compress.harmony.pack200.PackingUtils,"org.apache.commons.compress.harmony.pack200.PackingUtils.getPackingFileListFromJar(JarInputStream,boolean)",Has_Method
org.apache.commons.compress.harmony.pack200.PackingUtils,org.apache.commons.compress.harmony.pack200.PackingUtils.log(String),Has_Method
org.apache.commons.compress.harmony.pack200.PackingUtils,"org.apache.commons.compress.harmony.pack200.PackingUtils.readJarEntry(JarEntry,InputStream)",Has_Method
org.apache.commons.compress.harmony.pack200.PackingUtils,org.apache.commons.compress.harmony.pack200.PackingUtils.reorderPackingFiles(List),Has_Method
org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger,org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger.log(LogRecord),Has_Method
org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger,org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger.setVerbose(boolean),Has_Method
org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger,"org.apache.commons.compress.harmony.pack200.PackingUtils$PackingLogger.<init>(String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute,org.apache.commons.compress.harmony.pack200.NewAttribute.addContext(int),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute,org.apache.commons.compress.harmony.pack200.NewAttribute.getBytes(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute,org.apache.commons.compress.harmony.pack200.NewAttribute.getLabel(int),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute,org.apache.commons.compress.harmony.pack200.NewAttribute.getLayout(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute,org.apache.commons.compress.harmony.pack200.NewAttribute.isCodeAttribute(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute,org.apache.commons.compress.harmony.pack200.NewAttribute.isContextClass(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute,org.apache.commons.compress.harmony.pack200.NewAttribute.isContextCode(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute,org.apache.commons.compress.harmony.pack200.NewAttribute.isContextField(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute,org.apache.commons.compress.harmony.pack200.NewAttribute.isContextMethod(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute,org.apache.commons.compress.harmony.pack200.NewAttribute.isUnknown(),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute,org.apache.commons.compress.harmony.pack200.NewAttribute.isUnknown(int),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute,"org.apache.commons.compress.harmony.pack200.NewAttribute.read(ClassReader,int,int,char[],int,Label[])",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute,org.apache.commons.compress.harmony.pack200.NewAttribute.readClass(int),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute,org.apache.commons.compress.harmony.pack200.NewAttribute.readConst(int),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute,org.apache.commons.compress.harmony.pack200.NewAttribute.readUTF8(int),Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute,"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(ClassReader,String,String,byte[],char[],int,Label[])",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute,"org.apache.commons.compress.harmony.pack200.NewAttribute.<init>(String,String,int)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute,"org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.read(ClassReader,int,int,char[],int,Label[])",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute,"org.apache.commons.compress.harmony.pack200.NewAttribute$ErrorAttribute.<init>(String,int)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute,"org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.read(ClassReader,int,int,char[],int,Label[])",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute,"org.apache.commons.compress.harmony.pack200.NewAttribute$PassAttribute.<init>(String,int)",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute,"org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.read(ClassReader,int,int,char[],int,Label[])",Has_Method
org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute,"org.apache.commons.compress.harmony.pack200.NewAttribute$StripAttribute.<init>(String,int)",Has_Method
org.apache.commons.compress.harmony.pack200.Pack200Adapter,org.apache.commons.compress.harmony.pack200.Pack200Adapter.addPropertyChangeListener(PropertyChangeListener),Has_Method
org.apache.commons.compress.harmony.pack200.Pack200Adapter,org.apache.commons.compress.harmony.pack200.Pack200Adapter.completed(double),Has_Method
org.apache.commons.compress.harmony.pack200.Pack200Adapter,"org.apache.commons.compress.harmony.pack200.Pack200Adapter.firePropertyChange(String,Object,Object)",Has_Method
org.apache.commons.compress.harmony.pack200.Pack200Adapter,org.apache.commons.compress.harmony.pack200.Pack200Adapter.properties(),Has_Method
org.apache.commons.compress.harmony.pack200.Pack200Adapter,org.apache.commons.compress.harmony.pack200.Pack200Adapter.removePropertyChangeListener(PropertyChangeListener),Has_Method
org.apache.commons.compress.harmony.pack200.CPString,org.apache.commons.compress.harmony.pack200.CPString.compareTo(CPString),Has_Method
org.apache.commons.compress.harmony.pack200.CPString,org.apache.commons.compress.harmony.pack200.CPString.getIndexInCpUtf8(),Has_Method
org.apache.commons.compress.harmony.pack200.CPString,org.apache.commons.compress.harmony.pack200.CPString.toString(),Has_Method
org.apache.commons.compress.harmony.pack200.CPString,org.apache.commons.compress.harmony.pack200.CPString.<init>(CPUTF8),Has_Method
org.apache.commons.compress.harmony.pack200.IcBands,"org.apache.commons.compress.harmony.pack200.IcBands.addInnerClass(String,String,String,int)",Has_Method
org.apache.commons.compress.harmony.pack200.IcBands,"org.apache.commons.compress.harmony.pack200.IcBands.addToMap(String,IcTuple)",Has_Method
org.apache.commons.compress.harmony.pack200.IcBands,org.apache.commons.compress.harmony.pack200.IcBands.finaliseBands(),Has_Method
org.apache.commons.compress.harmony.pack200.IcBands,org.apache.commons.compress.harmony.pack200.IcBands.getIcTuple(CPClass),Has_Method
org.apache.commons.compress.harmony.pack200.IcBands,org.apache.commons.compress.harmony.pack200.IcBands.getInnerClassesForOuter(String),Has_Method
org.apache.commons.compress.harmony.pack200.IcBands,org.apache.commons.compress.harmony.pack200.IcBands.getOuter(String),Has_Method
org.apache.commons.compress.harmony.pack200.IcBands,"org.apache.commons.compress.harmony.pack200.IcBands.namesArePredictable(String,String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.IcBands,org.apache.commons.compress.harmony.pack200.IcBands.pack(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.IcBands,"org.apache.commons.compress.harmony.pack200.IcBands.<init>(SegmentHeader,CpBands,int)",Has_Method
org.apache.commons.compress.harmony.pack200.IcBands$IcTuple,org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.equals(Object),Has_Method
org.apache.commons.compress.harmony.pack200.IcBands$IcTuple,org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.isAnonymous(),Has_Method
org.apache.commons.compress.harmony.pack200.IcBands$IcTuple,org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.toString(),Has_Method
org.apache.commons.compress.harmony.pack200.IcBands$IcTuple,"org.apache.commons.compress.harmony.pack200.IcBands$IcTuple.<init>(CPClass,int,CPClass,CPUTF8)",Has_Method
org.apache.commons.compress.harmony.pack200.IntList,org.apache.commons.compress.harmony.pack200.IntList.add(int),Has_Method
org.apache.commons.compress.harmony.pack200.IntList,"org.apache.commons.compress.harmony.pack200.IntList.add(int,int)",Has_Method
org.apache.commons.compress.harmony.pack200.IntList,org.apache.commons.compress.harmony.pack200.IntList.addAll(IntList),Has_Method
org.apache.commons.compress.harmony.pack200.IntList,org.apache.commons.compress.harmony.pack200.IntList.clear(),Has_Method
org.apache.commons.compress.harmony.pack200.IntList,org.apache.commons.compress.harmony.pack200.IntList.get(int),Has_Method
org.apache.commons.compress.harmony.pack200.IntList,org.apache.commons.compress.harmony.pack200.IntList.growAtEnd(int),Has_Method
org.apache.commons.compress.harmony.pack200.IntList,org.apache.commons.compress.harmony.pack200.IntList.growAtFront(int),Has_Method
org.apache.commons.compress.harmony.pack200.IntList,"org.apache.commons.compress.harmony.pack200.IntList.growForInsert(int,int)",Has_Method
org.apache.commons.compress.harmony.pack200.IntList,org.apache.commons.compress.harmony.pack200.IntList.increment(int),Has_Method
org.apache.commons.compress.harmony.pack200.IntList,org.apache.commons.compress.harmony.pack200.IntList.isEmpty(),Has_Method
org.apache.commons.compress.harmony.pack200.IntList,org.apache.commons.compress.harmony.pack200.IntList.remove(int),Has_Method
org.apache.commons.compress.harmony.pack200.IntList,org.apache.commons.compress.harmony.pack200.IntList.size(),Has_Method
org.apache.commons.compress.harmony.pack200.IntList,org.apache.commons.compress.harmony.pack200.IntList.toArray(),Has_Method
org.apache.commons.compress.harmony.pack200.IntList,org.apache.commons.compress.harmony.pack200.IntList.<init>(),Has_Method
org.apache.commons.compress.harmony.pack200.IntList,org.apache.commons.compress.harmony.pack200.IntList.<init>(int),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.countArgs(String),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotation(int,String,boolean,List,List,List,List,List,List,List)",Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,"org.apache.commons.compress.harmony.pack200.ClassBands.addAnnotationDefault(List,List,List,List,List,List,List)",Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,"org.apache.commons.compress.harmony.pack200.ClassBands.addClass(int,int,String,String,String,String[])",Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.addClassAttribute(NewAttribute),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.addCode(),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.addCodeAttribute(NewAttribute),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,"org.apache.commons.compress.harmony.pack200.ClassBands.addEnclosingMethod(String,String,String)",Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,"org.apache.commons.compress.harmony.pack200.ClassBands.addField(int,String,String,String,Object)",Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.addFieldAttribute(NewAttribute),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,"org.apache.commons.compress.harmony.pack200.ClassBands.addHandler(Label,Label,Label,String)",Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,"org.apache.commons.compress.harmony.pack200.ClassBands.addLineNumber(int,Label)",Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,"org.apache.commons.compress.harmony.pack200.ClassBands.addLocalVariable(String,String,String,Label,Label,int)",Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,"org.apache.commons.compress.harmony.pack200.ClassBands.addMaxStack(int,int)",Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,"org.apache.commons.compress.harmony.pack200.ClassBands.addMethod(int,String,String,String,String[])",Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.addMethodAttribute(NewAttribute),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,"org.apache.commons.compress.harmony.pack200.ClassBands.addParameterAnnotation(int,String,boolean,List,List,List,List,List,List,List)",Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.addSourceFile(String),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.createNewAttributeBands(),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.currentClassReferencesInnerClass(CPClass),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,"org.apache.commons.compress.harmony.pack200.ClassBands.doBciRenumbering(IntList,Map)",Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.endOfClass(),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.endOfMethod(),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.finaliseBands(),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.getInts(CPClass[]),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.isAnySyntheticClasses(),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.isAnySyntheticFields(),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.isAnySyntheticMethods(),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.isInnerClass(String),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,"org.apache.commons.compress.harmony.pack200.ClassBands.isInnerClassOf(String,CPClass)",Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.numClassesProcessed(),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.pack(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.removeCurrentClass(),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,"org.apache.commons.compress.harmony.pack200.ClassBands.renumberBci(List,IntList,Map)",Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,"org.apache.commons.compress.harmony.pack200.ClassBands.renumberDoubleOffsetBci(List,List,List,IntList,Map)",Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,"org.apache.commons.compress.harmony.pack200.ClassBands.renumberOffsetBci(List,List,IntList,Map)",Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.sum(int[]),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.writeClassAttributeBands(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.writeCodeAttributeBands(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.writeCodeBands(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.writeFieldAttributeBands(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,org.apache.commons.compress.harmony.pack200.ClassBands.writeMethodAttributeBands(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands,"org.apache.commons.compress.harmony.pack200.ClassBands.<init>(Segment,int,int,boolean)",Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation,"org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.addParameterAnnotation(int,String,List,List,List,List,List,List,List)",Has_Method
org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation,org.apache.commons.compress.harmony.pack200.ClassBands$TempParamAnnotation.<init>(int),Has_Method
org.apache.commons.compress.harmony.pack200.BandSet,"org.apache.commons.compress.harmony.pack200.BandSet.analyseBand(String,int[],BHSDCodec)",Has_Method
org.apache.commons.compress.harmony.pack200.BandSet,org.apache.commons.compress.harmony.pack200.BandSet.cpEntryListToArray(List),Has_Method
org.apache.commons.compress.harmony.pack200.BandSet,org.apache.commons.compress.harmony.pack200.BandSet.cpEntryOrNullListToArray(List),Has_Method
org.apache.commons.compress.harmony.pack200.BandSet,"org.apache.commons.compress.harmony.pack200.BandSet.encodeBandInt(String,int[],BHSDCodec)",Has_Method
org.apache.commons.compress.harmony.pack200.BandSet,"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[],BHSDCodec,BHSDCodec,boolean)",Has_Method
org.apache.commons.compress.harmony.pack200.BandSet,"org.apache.commons.compress.harmony.pack200.BandSet.encodeFlags(String,long[][],BHSDCodec,BHSDCodec,boolean)",Has_Method
org.apache.commons.compress.harmony.pack200.BandSet,"org.apache.commons.compress.harmony.pack200.BandSet.encodeScalar(int,BHSDCodec)",Has_Method
org.apache.commons.compress.harmony.pack200.BandSet,"org.apache.commons.compress.harmony.pack200.BandSet.encodeScalar(int[],BHSDCodec)",Has_Method
org.apache.commons.compress.harmony.pack200.BandSet,"org.apache.commons.compress.harmony.pack200.BandSet.encodeWithPopulationCodec(int[],BHSDCodec,BandData,BandAnalysisResults)",Has_Method
org.apache.commons.compress.harmony.pack200.BandSet,org.apache.commons.compress.harmony.pack200.BandSet.flatten(long[][]),Has_Method
org.apache.commons.compress.harmony.pack200.BandSet,org.apache.commons.compress.harmony.pack200.BandSet.integerListToArray(List),Has_Method
org.apache.commons.compress.harmony.pack200.BandSet,org.apache.commons.compress.harmony.pack200.BandSet.longListToArray(List),Has_Method
org.apache.commons.compress.harmony.pack200.BandSet,org.apache.commons.compress.harmony.pack200.BandSet.pack(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.BandSet,org.apache.commons.compress.harmony.pack200.BandSet.timeToStop(BandAnalysisResults),Has_Method
org.apache.commons.compress.harmony.pack200.BandSet,"org.apache.commons.compress.harmony.pack200.BandSet.tryCodecs(int[],BHSDCodec,BandData,BandAnalysisResults,byte[],BHSDCodec[])",Has_Method
org.apache.commons.compress.harmony.pack200.BandSet,"org.apache.commons.compress.harmony.pack200.BandSet.<init>(int,SegmentHeader)",Has_Method
org.apache.commons.compress.harmony.pack200.BandSet$BandData,org.apache.commons.compress.harmony.pack200.BandSet$BandData.anyNegatives(),Has_Method
org.apache.commons.compress.harmony.pack200.BandSet$BandData,org.apache.commons.compress.harmony.pack200.BandSet$BandData.mainlyPositiveDeltas(),Has_Method
org.apache.commons.compress.harmony.pack200.BandSet$BandData,org.apache.commons.compress.harmony.pack200.BandSet$BandData.mainlySmallDeltas(),Has_Method
org.apache.commons.compress.harmony.pack200.BandSet$BandData,org.apache.commons.compress.harmony.pack200.BandSet$BandData.numDistinctValues(),Has_Method
org.apache.commons.compress.harmony.pack200.BandSet$BandData,org.apache.commons.compress.harmony.pack200.BandSet$BandData.wellCorrelated(),Has_Method
org.apache.commons.compress.harmony.pack200.FileBands,org.apache.commons.compress.harmony.pack200.FileBands.finaliseBands(),Has_Method
org.apache.commons.compress.harmony.pack200.FileBands,org.apache.commons.compress.harmony.pack200.FileBands.flatten(byte[][]),Has_Method
org.apache.commons.compress.harmony.pack200.FileBands,org.apache.commons.compress.harmony.pack200.FileBands.pack(OutputStream),Has_Method
org.apache.commons.compress.harmony.pack200.FileBands,"org.apache.commons.compress.harmony.pack200.FileBands.<init>(CpBands,SegmentHeader,PackingOptions,SegmentUnit,int)",Has_Method
org.apache.commons.compress.harmony.pack200.RunCodec,org.apache.commons.compress.harmony.pack200.RunCodec.decode(InputStream),Has_Method
org.apache.commons.compress.harmony.pack200.RunCodec,"org.apache.commons.compress.harmony.pack200.RunCodec.decode(InputStream,long)",Has_Method
org.apache.commons.compress.harmony.pack200.RunCodec,"org.apache.commons.compress.harmony.pack200.RunCodec.decodeInts(int,InputStream)",Has_Method
org.apache.commons.compress.harmony.pack200.RunCodec,org.apache.commons.compress.harmony.pack200.RunCodec.encode(int),Has_Method
org.apache.commons.compress.harmony.pack200.RunCodec,"org.apache.commons.compress.harmony.pack200.RunCodec.encode(int,int)",Has_Method
org.apache.commons.compress.harmony.pack200.RunCodec,org.apache.commons.compress.harmony.pack200.RunCodec.getACodec(),Has_Method
org.apache.commons.compress.harmony.pack200.RunCodec,org.apache.commons.compress.harmony.pack200.RunCodec.getBCodec(),Has_Method
org.apache.commons.compress.harmony.pack200.RunCodec,org.apache.commons.compress.harmony.pack200.RunCodec.getK(),Has_Method
org.apache.commons.compress.harmony.pack200.RunCodec,"org.apache.commons.compress.harmony.pack200.RunCodec.normalise(int,Codec)",Has_Method
org.apache.commons.compress.harmony.pack200.RunCodec,"org.apache.commons.compress.harmony.pack200.RunCodec.normalise(int[],Codec)",Has_Method
org.apache.commons.compress.harmony.pack200.RunCodec,org.apache.commons.compress.harmony.pack200.RunCodec.toString(),Has_Method
org.apache.commons.compress.harmony.pack200.RunCodec,"org.apache.commons.compress.harmony.pack200.RunCodec.<init>(int,Codec,Codec)",Has_Method
org.apache.commons.compress.harmony.pack200.Codec,"org.apache.commons.compress.harmony.pack200.Codec.check(int,InputStream)",Has_Method
org.apache.commons.compress.harmony.pack200.Codec,org.apache.commons.compress.harmony.pack200.Codec.decode(InputStream),Has_Method
org.apache.commons.compress.harmony.pack200.Codec,"org.apache.commons.compress.harmony.pack200.Codec.decode(InputStream,long)",Has_Method
org.apache.commons.compress.harmony.pack200.Codec,"org.apache.commons.compress.harmony.pack200.Codec.decodeInts(int,InputStream)",Has_Method
org.apache.commons.compress.harmony.pack200.Codec,"org.apache.commons.compress.harmony.pack200.Codec.decodeInts(int,InputStream,int)",Has_Method
org.apache.commons.compress.harmony.pack200.Codec,org.apache.commons.compress.harmony.pack200.Codec.encode(int),Has_Method
org.apache.commons.compress.harmony.pack200.Codec,"org.apache.commons.compress.harmony.pack200.Codec.encode(int,int)",Has_Method
org.apache.commons.compress.harmony.pack200.Codec,org.apache.commons.compress.harmony.pack200.Codec.encode(int[]),Has_Method
org.apache.commons.compress.harmony.pack200.PopulationCodec,org.apache.commons.compress.harmony.pack200.PopulationCodec.decode(InputStream),Has_Method
org.apache.commons.compress.harmony.pack200.PopulationCodec,"org.apache.commons.compress.harmony.pack200.PopulationCodec.decode(InputStream,long)",Has_Method
org.apache.commons.compress.harmony.pack200.PopulationCodec,"org.apache.commons.compress.harmony.pack200.PopulationCodec.decodeInts(int,InputStream)",Has_Method
org.apache.commons.compress.harmony.pack200.PopulationCodec,org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int),Has_Method
org.apache.commons.compress.harmony.pack200.PopulationCodec,"org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int,int)",Has_Method
org.apache.commons.compress.harmony.pack200.PopulationCodec,"org.apache.commons.compress.harmony.pack200.PopulationCodec.encode(int[],int[],int[])",Has_Method
org.apache.commons.compress.harmony.pack200.PopulationCodec,org.apache.commons.compress.harmony.pack200.PopulationCodec.getFavoured(),Has_Method
org.apache.commons.compress.harmony.pack200.PopulationCodec,org.apache.commons.compress.harmony.pack200.PopulationCodec.getFavouredCodec(),Has_Method
org.apache.commons.compress.harmony.pack200.PopulationCodec,org.apache.commons.compress.harmony.pack200.PopulationCodec.getTokenCodec(),Has_Method
org.apache.commons.compress.harmony.pack200.PopulationCodec,org.apache.commons.compress.harmony.pack200.PopulationCodec.getUnfavouredCodec(),Has_Method
org.apache.commons.compress.harmony.pack200.PopulationCodec,"org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,Codec,Codec)",Has_Method
org.apache.commons.compress.harmony.pack200.PopulationCodec,"org.apache.commons.compress.harmony.pack200.PopulationCodec.<init>(Codec,int,Codec)",Has_Method
org.apache.commons.compress.harmony.pack200.CodecEncoding,org.apache.commons.compress.harmony.pack200.CodecEncoding.getCanonicalCodec(int),Has_Method
org.apache.commons.compress.harmony.pack200.CodecEncoding,"org.apache.commons.compress.harmony.pack200.CodecEncoding.getCodec(int,InputStream,Codec)",Has_Method
org.apache.commons.compress.harmony.pack200.CodecEncoding,"org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifier(Codec,Codec)",Has_Method
org.apache.commons.compress.harmony.pack200.CodecEncoding,org.apache.commons.compress.harmony.pack200.CodecEncoding.getSpecifierForDefaultCodec(BHSDCodec),Has_Method
org.apache.commons.compress.harmony.pack200.Pack200ClassReader,org.apache.commons.compress.harmony.pack200.Pack200ClassReader.getFileName(),Has_Method
org.apache.commons.compress.harmony.pack200.Pack200ClassReader,org.apache.commons.compress.harmony.pack200.Pack200ClassReader.hasSyntheticAttributes(),Has_Method
org.apache.commons.compress.harmony.pack200.Pack200ClassReader,org.apache.commons.compress.harmony.pack200.Pack200ClassReader.lastConstantHadWideIndex(),Has_Method
org.apache.commons.compress.harmony.pack200.Pack200ClassReader,"org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readConst(int,char[])",Has_Method
org.apache.commons.compress.harmony.pack200.Pack200ClassReader,org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readUnsignedShort(int),Has_Method
org.apache.commons.compress.harmony.pack200.Pack200ClassReader,"org.apache.commons.compress.harmony.pack200.Pack200ClassReader.readUTF8(int,char[])",Has_Method
org.apache.commons.compress.harmony.pack200.Pack200ClassReader,org.apache.commons.compress.harmony.pack200.Pack200ClassReader.setFileName(String),Has_Method
org.apache.commons.compress.harmony.pack200.Pack200ClassReader,org.apache.commons.compress.harmony.pack200.Pack200ClassReader.<init>(byte[]),Has_Method
org.apache.commons.compress.harmony.pack200.Archive,"org.apache.commons.compress.harmony.pack200.Archive.addJarEntry(PackingFile,List,List)",Has_Method
org.apache.commons.compress.harmony.pack200.Archive,org.apache.commons.compress.harmony.pack200.Archive.doNormalPack(),Has_Method
org.apache.commons.compress.harmony.pack200.Archive,org.apache.commons.compress.harmony.pack200.Archive.doZeroEffortPack(),Has_Method
org.apache.commons.compress.harmony.pack200.Archive,org.apache.commons.compress.harmony.pack200.Archive.estimateSize(PackingFile),Has_Method
org.apache.commons.compress.harmony.pack200.Archive,org.apache.commons.compress.harmony.pack200.Archive.pack(),Has_Method
org.apache.commons.compress.harmony.pack200.Archive,org.apache.commons.compress.harmony.pack200.Archive.splitIntoSegments(List),Has_Method
org.apache.commons.compress.harmony.pack200.Archive,"org.apache.commons.compress.harmony.pack200.Archive.<init>(JarFile,OutputStream,PackingOptions)",Has_Method
org.apache.commons.compress.harmony.pack200.Archive,"org.apache.commons.compress.harmony.pack200.Archive.<init>(JarInputStream,OutputStream,PackingOptions)",Has_Method
org.apache.commons.compress.harmony.pack200.Archive$PackingFile,org.apache.commons.compress.harmony.pack200.Archive$PackingFile.getContents(),Has_Method
org.apache.commons.compress.harmony.pack200.Archive$PackingFile,org.apache.commons.compress.harmony.pack200.Archive$PackingFile.getModtime(),Has_Method
org.apache.commons.compress.harmony.pack200.Archive$PackingFile,org.apache.commons.compress.harmony.pack200.Archive$PackingFile.getName(),Has_Method
org.apache.commons.compress.harmony.pack200.Archive$PackingFile,org.apache.commons.compress.harmony.pack200.Archive$PackingFile.isDefalteHint(),Has_Method
org.apache.commons.compress.harmony.pack200.Archive$PackingFile,org.apache.commons.compress.harmony.pack200.Archive$PackingFile.isDirectory(),Has_Method
org.apache.commons.compress.harmony.pack200.Archive$PackingFile,org.apache.commons.compress.harmony.pack200.Archive$PackingFile.setContents(byte[]),Has_Method
org.apache.commons.compress.harmony.pack200.Archive$PackingFile,org.apache.commons.compress.harmony.pack200.Archive$PackingFile.toString(),Has_Method
org.apache.commons.compress.harmony.pack200.Archive$PackingFile,"org.apache.commons.compress.harmony.pack200.Archive$PackingFile.<init>(byte[],JarEntry)",Has_Method
org.apache.commons.compress.harmony.pack200.Archive$PackingFile,"org.apache.commons.compress.harmony.pack200.Archive$PackingFile.<init>(String,byte[],long)",Has_Method
org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit,org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.addPackedByteAmount(int),Has_Method
org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit,org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.classListSize(),Has_Method
org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit,org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.fileListSize(),Has_Method
org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit,org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.getByteAmount(),Has_Method
org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit,org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.getClassList(),Has_Method
org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit,org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.getFileList(),Has_Method
org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit,org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.getPackedByteAmount(),Has_Method
org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit,"org.apache.commons.compress.harmony.pack200.Archive$SegmentUnit.<init>(List,List)",Has_Method
org.apache.commons.compress.archivers.StreamingNotSupportedException,org.apache.commons.compress.archivers.StreamingNotSupportedException.getFormat(),Has_Method
org.apache.commons.compress.archivers.StreamingNotSupportedException,org.apache.commons.compress.archivers.StreamingNotSupportedException.<init>(String),Has_Method
org.apache.commons.compress.archivers.ArchiveStreamFactory,org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveStreamProviderIterable(),Has_Method
org.apache.commons.compress.archivers.ArchiveStreamFactory,org.apache.commons.compress.archivers.ArchiveStreamFactory.detect(InputStream),Has_Method
org.apache.commons.compress.archivers.ArchiveStreamFactory,org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveInputStreamProviders(),Has_Method
org.apache.commons.compress.archivers.ArchiveStreamFactory,org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders(),Has_Method
org.apache.commons.compress.archivers.ArchiveStreamFactory,"org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(Set,ArchiveStreamProvider,TreeMap)",Has_Method
org.apache.commons.compress.archivers.ArchiveStreamFactory,org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(String),Has_Method
org.apache.commons.compress.archivers.ArchiveStreamFactory,org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream),Has_Method
org.apache.commons.compress.archivers.ArchiveStreamFactory,"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream)",Has_Method
org.apache.commons.compress.archivers.ArchiveStreamFactory,"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream,String)",Has_Method
org.apache.commons.compress.archivers.ArchiveStreamFactory,"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream)",Has_Method
org.apache.commons.compress.archivers.ArchiveStreamFactory,"org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream,String)",Has_Method
org.apache.commons.compress.archivers.ArchiveStreamFactory,org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveInputStreamProviders(),Has_Method
org.apache.commons.compress.archivers.ArchiveStreamFactory,org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveOutputStreamProviders(),Has_Method
org.apache.commons.compress.archivers.ArchiveStreamFactory,org.apache.commons.compress.archivers.ArchiveStreamFactory.getEntryEncoding(),Has_Method
org.apache.commons.compress.archivers.ArchiveStreamFactory,org.apache.commons.compress.archivers.ArchiveStreamFactory.getInputStreamArchiveNames(),Has_Method
org.apache.commons.compress.archivers.ArchiveStreamFactory,org.apache.commons.compress.archivers.ArchiveStreamFactory.getOutputStreamArchiveNames(),Has_Method
org.apache.commons.compress.archivers.ArchiveStreamFactory,org.apache.commons.compress.archivers.ArchiveStreamFactory.setEntryEncoding(String),Has_Method
org.apache.commons.compress.archivers.ArchiveStreamFactory,org.apache.commons.compress.archivers.ArchiveStreamFactory.<init>(),Has_Method
org.apache.commons.compress.archivers.ArchiveStreamFactory,org.apache.commons.compress.archivers.ArchiveStreamFactory.<init>(String),Has_Method
org.apache.commons.compress.archivers.ArchiveException,org.apache.commons.compress.archivers.ArchiveException.<init>(String),Has_Method
org.apache.commons.compress.archivers.ArchiveException,"org.apache.commons.compress.archivers.ArchiveException.<init>(String,Exception)",Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream,"org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byte[],int)",Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.close(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getBytesRead(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getCount(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextDumpEntry(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(DumpArchiveEntry),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getSummary(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream,"org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(DumpArchiveEntry),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream,org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream,"org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.<init>(InputStream,String)",Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveException,org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveException,org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>(String),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveException,"org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>(String,Throwable)",Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveException,org.apache.commons.compress.archivers.dump.DumpArchiveException.<init>(Throwable),Has_Method
org.apache.commons.compress.archivers.dump.Dirent,org.apache.commons.compress.archivers.dump.Dirent.getIno(),Has_Method
org.apache.commons.compress.archivers.dump.Dirent,org.apache.commons.compress.archivers.dump.Dirent.getName(),Has_Method
org.apache.commons.compress.archivers.dump.Dirent,org.apache.commons.compress.archivers.dump.Dirent.getParentIno(),Has_Method
org.apache.commons.compress.archivers.dump.Dirent,org.apache.commons.compress.archivers.dump.Dirent.getType(),Has_Method
org.apache.commons.compress.archivers.dump.Dirent,org.apache.commons.compress.archivers.dump.Dirent.toString(),Has_Method
org.apache.commons.compress.archivers.dump.Dirent,"org.apache.commons.compress.archivers.dump.Dirent.<init>(int,int,int,String)",Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.equals(Object),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getDevname(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getDumpDate(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getFilesystem(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getFirstRecord(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getFlags(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getHostname(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getLabel(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getLevel(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getNTRec(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getPreviousDumpDate(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getVolume(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.hashCode(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isCompressed(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isExtendedAttributes(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isMetaDataOnly(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isNewHeader(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isNewInode(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setDevname(String),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setDumpDate(Date),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFilesystem(String),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFirstRecord(int),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setFlags(int),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setHostname(String),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setLabel(String),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setLevel(int),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setNTRec(int),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setPreviousDumpDate(Date),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,org.apache.commons.compress.archivers.dump.DumpArchiveSummary.setVolume(int),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveSummary,"org.apache.commons.compress.archivers.dump.DumpArchiveSummary.<init>(byte[],ZipEncoding)",Has_Method
org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException,org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.<init>(),Has_Method
org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException,org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.<init>(String),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveUtil,org.apache.commons.compress.archivers.dump.DumpArchiveUtil.calculateChecksum(byte[]),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveUtil,"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert16(byte[],int)",Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveUtil,"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int)",Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveUtil,"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert64(byte[],int)",Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveUtil,"org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveUtil,org.apache.commons.compress.archivers.dump.DumpArchiveUtil.getIno(byte[]),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveUtil,org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(byte[]),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveUtil,org.apache.commons.compress.archivers.dump.DumpArchiveUtil.<init>(),Has_Method
org.apache.commons.compress.archivers.dump.InvalidFormatException,org.apache.commons.compress.archivers.dump.InvalidFormatException.getOffset(),Has_Method
org.apache.commons.compress.archivers.dump.InvalidFormatException,org.apache.commons.compress.archivers.dump.InvalidFormatException.<init>(),Has_Method
org.apache.commons.compress.archivers.dump.InvalidFormatException,org.apache.commons.compress.archivers.dump.InvalidFormatException.<init>(long),Has_Method
org.apache.commons.compress.archivers.dump.TapeInputStream,org.apache.commons.compress.archivers.dump.TapeInputStream.available(),Has_Method
org.apache.commons.compress.archivers.dump.TapeInputStream,org.apache.commons.compress.archivers.dump.TapeInputStream.close(),Has_Method
org.apache.commons.compress.archivers.dump.TapeInputStream,org.apache.commons.compress.archivers.dump.TapeInputStream.getBytesRead(),Has_Method
org.apache.commons.compress.archivers.dump.TapeInputStream,org.apache.commons.compress.archivers.dump.TapeInputStream.peek(),Has_Method
org.apache.commons.compress.archivers.dump.TapeInputStream,org.apache.commons.compress.archivers.dump.TapeInputStream.read(),Has_Method
org.apache.commons.compress.archivers.dump.TapeInputStream,"org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.dump.TapeInputStream,org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(boolean),Has_Method
org.apache.commons.compress.archivers.dump.TapeInputStream,"org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.dump.TapeInputStream,org.apache.commons.compress.archivers.dump.TapeInputStream.readRange(int),Has_Method
org.apache.commons.compress.archivers.dump.TapeInputStream,org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord(),Has_Method
org.apache.commons.compress.archivers.dump.TapeInputStream,"org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(int,boolean)",Has_Method
org.apache.commons.compress.archivers.dump.TapeInputStream,org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long),Has_Method
org.apache.commons.compress.archivers.dump.TapeInputStream,org.apache.commons.compress.archivers.dump.TapeInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(byte[]),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.equals(Object),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getAccessTime(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getCreationTime(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getEntrySize(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getGeneration(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getGroupId(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderCount(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderHoles(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderType(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getIno(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getLastModifiedDate(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getMode(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getName(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getNlink(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getOffset(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getOriginalName(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getPermissions(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSimpleName(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSize(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getType(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getUserId(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getVolume(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.hashCode(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isBlkDev(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isChrDev(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDeleted(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDirectory(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isFifo(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isFile(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSocket(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSparseRecord(int),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setAccessTime(Date),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setCreationTime(Date),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setDeleted(boolean),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGeneration(int),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGroupId(int),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setLastModifiedDate(Date),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setMode(int),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setName(String),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setNlink(int),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setOffset(long),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSimpleName(String),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSize(long),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setType(TYPE),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setUserId(int),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setVolume(int),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.toString(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.update(byte[]),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,"org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String)",Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry,"org.apache.commons.compress.archivers.dump.DumpArchiveEntry.<init>(String,String,int,TYPE)",Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$PERMISSION,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$PERMISSION.find(int),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.getCdata(int),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.getCount(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.getHoles(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.getIno(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.getType(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.getVolume(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TapeSegmentHeader.setIno(int),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE,org.apache.commons.compress.archivers.dump.DumpArchiveEntry$TYPE.find(int),Has_Method
org.apache.commons.compress.archivers.dump.ShortFileException,org.apache.commons.compress.archivers.dump.ShortFileException.<init>(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveConstants,org.apache.commons.compress.archivers.dump.DumpArchiveConstants.<init>(),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE,org.apache.commons.compress.archivers.dump.DumpArchiveConstants$COMPRESSION_TYPE.find(int),Has_Method
org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE,org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE.find(int),Has_Method
org.apache.commons.compress.archivers.dump.UnrecognizedFormatException,org.apache.commons.compress.archivers.dump.UnrecognizedFormatException.<init>(),Has_Method
org.apache.commons.compress.archivers.ArchiveStreamProvider,"org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveInputStream(String,InputStream,String)",Has_Method
org.apache.commons.compress.archivers.ArchiveStreamProvider,"org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveOutputStream(String,OutputStream,String)",Has_Method
org.apache.commons.compress.archivers.ArchiveStreamProvider,org.apache.commons.compress.archivers.ArchiveStreamProvider.getInputStreamArchiveNames(),Has_Method
org.apache.commons.compress.archivers.ArchiveStreamProvider,org.apache.commons.compress.archivers.ArchiveStreamProvider.getOutputStreamArchiveNames(),Has_Method
org.apache.commons.compress.archivers.jar.JarArchiveOutputStream,org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.putArchiveEntry(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.jar.JarArchiveOutputStream,org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.<init>(OutputStream),Has_Method
org.apache.commons.compress.archivers.jar.JarArchiveOutputStream,"org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.<init>(OutputStream,String)",Has_Method
org.apache.commons.compress.archivers.jar.JarArchiveEntry,org.apache.commons.compress.archivers.jar.JarArchiveEntry.getCertificates(),Has_Method
org.apache.commons.compress.archivers.jar.JarArchiveEntry,org.apache.commons.compress.archivers.jar.JarArchiveEntry.getManifestAttributes(),Has_Method
org.apache.commons.compress.archivers.jar.JarArchiveEntry,org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>(JarEntry),Has_Method
org.apache.commons.compress.archivers.jar.JarArchiveEntry,org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>(String),Has_Method
org.apache.commons.compress.archivers.jar.JarArchiveEntry,org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.jar.JarArchiveEntry,org.apache.commons.compress.archivers.jar.JarArchiveEntry.<init>(ZipEntry),Has_Method
org.apache.commons.compress.archivers.jar.JarArchiveInputStream,"org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byte[],int)",Has_Method
org.apache.commons.compress.archivers.jar.JarArchiveInputStream,org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextEntry(),Has_Method
org.apache.commons.compress.archivers.jar.JarArchiveInputStream,org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextJarEntry(),Has_Method
org.apache.commons.compress.archivers.jar.JarArchiveInputStream,org.apache.commons.compress.archivers.jar.JarArchiveInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.archivers.jar.JarArchiveInputStream,"org.apache.commons.compress.archivers.jar.JarArchiveInputStream.<init>(InputStream,String)",Has_Method
org.apache.commons.compress.archivers.sevenz.StreamMap,org.apache.commons.compress.archivers.sevenz.StreamMap.toString(),Has_Method
org.apache.commons.compress.archivers.sevenz.StreamMap,"org.apache.commons.compress.archivers.sevenz.StreamMap.<init>(int[],long[],int[],int[])",Has_Method
org.apache.commons.compress.archivers.sevenz.StartHeader,"org.apache.commons.compress.archivers.sevenz.StartHeader.<init>(long,long,long)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.javaTimeToNtfsTime(Date),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.ntfsTimeToJavaTime(long),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.equals(Object),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,"org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.equalSevenZMethods(Iterable,Iterable)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getAccessDate(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getAccessTime(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedCrc(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedCrcValue(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedSize(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getContentMethods(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCrc(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCrcValue(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCreationDate(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCreationTime(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasAccessDate(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCrc(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCreationDate(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasLastModifiedDate(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasWindowsAttributes(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getLastModifiedDate(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getLastModifiedTime(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getSize(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getWindowsAttributes(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hashCode(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isAntiItem(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(Date),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(long),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessTime(FileTime),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAntiItem(boolean),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrc(int),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrcValue(long),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedSize(long),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(Iterable),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(SevenZMethodConfiguration[]),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrc(int),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrcValue(long),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(Date),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(long),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationTime(FileTime),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setDirectory(boolean),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasAccessDate(boolean),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCrc(boolean),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCreationDate(boolean),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasLastModifiedDate(boolean),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasStream(boolean),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasWindowsAttributes(boolean),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(Date),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(long),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedTime(FileTime),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setName(String),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setSize(long),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setWindowsAttributes(int),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry,org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.<init>(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.reverse(Iterable),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(File,String)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(Path,String,LinkOption[])",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.fillDates(Path,SevenZArchiveEntry,LinkOption[])",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getContentMethods(SevenZArchiveEntry),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getCurrentOutputStream(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(ArchiveEntry),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(SevenZArchiveEntry),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentCompression(SevenZMethod),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentMethods(Iterable),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[]),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(InputStream),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(int),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(Path,OpenOption[])",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(DataOutput,BitSet,int)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileAntiItems(DataOutput),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileATimes(DataOutput),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileCTimes(DataOutput),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyFiles(DataOutput),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyStreams(DataOutput),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileMTimes(DataOutput),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileNames(DataOutput),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(DataOutput),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileWindowsAttributes(DataOutput),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(DataOutput,SevenZArchiveEntry)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeHeader(DataOutput),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writePackInfo(DataOutput),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSingleCodec(SevenZMethodConfiguration,OutputStream)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeStreamsInfo(DataOutput),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSubStreamsInfo(DataOutput),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(DataOutput,long)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUnpackInfo(DataOutput),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(File),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(File,char[])",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(SeekableByteChannel),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile,"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.<init>(SeekableByteChannel,char[])",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.close(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.flush(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(byte[]),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper,"org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper,org.apache.commons.compress.archivers.sevenz.SevenZOutputFile$OutputStreamWrapper.write(int),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.builder(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.getMaxMemoryLimitInKb(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.getTryToRecoverBrokenArchives(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.getUseDefaultNameForUnnamedEntries(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions,"org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.<init>(int,boolean,boolean)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.build(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.withMaxMemoryLimitInKb(int),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.withTryToRecoverBrokenArchives(boolean),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFileOptions$Builder.withUseDefaultNameForUnnamedEntries(boolean),Has_Method
org.apache.commons.compress.archivers.sevenz.Coder,"org.apache.commons.compress.archivers.sevenz.Coder.<init>(byte[],long,long,byte[])",Has_Method
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder,"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(byte[],int,byte[])",Has_Method
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder,"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.sha256Password(char[],int,byte[])",Has_Method
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder,org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.utf16Decode(char[]),Has_Method
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder,"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[],int)",Has_Method
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder,"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.encode(OutputStream,Object)",Has_Method
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder,org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.getOptionsAsProperties(Object),Has_Method
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder,org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.<init>(),Has_Method
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream,org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.close(),Has_Method
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream,org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.init(),Has_Method
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream,org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.read(),Has_Method
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream,"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream,"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderInputStream.<init>(InputStream,Coder,String,byte[])",Has_Method
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream,org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.close(),Has_Method
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream,org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.flush(),Has_Method
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream,org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.flushBuffer(),Has_Method
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream,"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream,org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.write(int),Has_Method
org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream,"org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder$AES256SHA256DecoderOutputStream.<init>(AES256Options,OutputStream)",Has_Method
org.apache.commons.compress.archivers.sevenz.Coders,"org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[],int)",Has_Method
org.apache.commons.compress.archivers.sevenz.Coders,"org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(OutputStream,SevenZMethod,Object)",Has_Method
org.apache.commons.compress.archivers.sevenz.Coders,org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(SevenZMethod),Has_Method
org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder,"org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.decode(String,InputStream,long,Coder,byte[],int)",Has_Method
org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder,"org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.encode(OutputStream,Object)",Has_Method
org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder,org.apache.commons.compress.archivers.sevenz.Coders$BCJDecoder.<init>(FilterOptions),Has_Method
org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder,"org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.decode(String,InputStream,long,Coder,byte[],int)",Has_Method
org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder,"org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.encode(OutputStream,Object)",Has_Method
org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder,org.apache.commons.compress.archivers.sevenz.Coders$BZIP2Decoder.<init>(),Has_Method
org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder,"org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.decode(String,InputStream,long,Coder,byte[],int)",Has_Method
org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder,"org.apache.commons.compress.archivers.sevenz.Coders$CopyDecoder.encode(OutputStream,Object)",Has_Method
org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder,"org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.decode(String,InputStream,long,Coder,byte[],int)",Has_Method
org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder,org.apache.commons.compress.archivers.sevenz.Coders$Deflate64Decoder.<init>(),Has_Method
org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder,"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.decode(String,InputStream,long,Coder,byte[],int)",Has_Method
org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder,"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.encode(OutputStream,Object)",Has_Method
org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder,org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder.<init>(),Has_Method
org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderInputStream,org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderInputStream.close(),Has_Method
org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderInputStream,"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderInputStream.<init>(InflaterInputStream,Inflater)",Has_Method
org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream,org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.close(),Has_Method
org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream,org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(byte[]),Has_Method
org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream,"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream,org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.write(int),Has_Method
org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream,"org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder$DeflateDecoderOutputStream.<init>(DeflaterOutputStream,Deflater)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration,org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.equals(Object),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration,org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getMethod(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration,org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration,org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.hashCode(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration,org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.<init>(SevenZMethod),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration,"org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.<init>(SevenZMethod,Object)",Has_Method
org.apache.commons.compress.archivers.sevenz.DeltaDecoder,"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[],int)",Has_Method
org.apache.commons.compress.archivers.sevenz.DeltaDecoder,"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.encode(OutputStream,Object)",Has_Method
org.apache.commons.compress.archivers.sevenz.DeltaDecoder,org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsAsProperties(Object),Has_Method
org.apache.commons.compress.archivers.sevenz.DeltaDecoder,org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder),Has_Method
org.apache.commons.compress.archivers.sevenz.DeltaDecoder,"org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder,InputStream)",Has_Method
org.apache.commons.compress.archivers.sevenz.DeltaDecoder,org.apache.commons.compress.archivers.sevenz.DeltaDecoder.<init>(),Has_Method
org.apache.commons.compress.archivers.sevenz.BindPair,org.apache.commons.compress.archivers.sevenz.BindPair.toString(),Has_Method
org.apache.commons.compress.archivers.sevenz.BindPair,"org.apache.commons.compress.archivers.sevenz.BindPair.<init>(long,long)",Has_Method
org.apache.commons.compress.archivers.sevenz.CLI,org.apache.commons.compress.archivers.sevenz.CLI.grabMode(String[]),Has_Method
org.apache.commons.compress.archivers.sevenz.CLI,org.apache.commons.compress.archivers.sevenz.CLI.main(String[]),Has_Method
org.apache.commons.compress.archivers.sevenz.CLI,org.apache.commons.compress.archivers.sevenz.CLI.usage(),Has_Method
org.apache.commons.compress.archivers.sevenz.CLI$Mode,org.apache.commons.compress.archivers.sevenz.CLI$Mode.getMessage(),Has_Method
org.apache.commons.compress.archivers.sevenz.CLI$Mode,"org.apache.commons.compress.archivers.sevenz.CLI$Mode.takeAction(SevenZFile,SevenZArchiveEntry)",Has_Method
org.apache.commons.compress.archivers.sevenz.AbstractCoder,"org.apache.commons.compress.archivers.sevenz.AbstractCoder.toInt(Object,int)",Has_Method
org.apache.commons.compress.archivers.sevenz.AbstractCoder,"org.apache.commons.compress.archivers.sevenz.AbstractCoder.decode(String,InputStream,long,Coder,byte[],int)",Has_Method
org.apache.commons.compress.archivers.sevenz.AbstractCoder,"org.apache.commons.compress.archivers.sevenz.AbstractCoder.encode(OutputStream,Object)",Has_Method
org.apache.commons.compress.archivers.sevenz.AbstractCoder,org.apache.commons.compress.archivers.sevenz.AbstractCoder.getOptionsAsProperties(Object),Has_Method
org.apache.commons.compress.archivers.sevenz.AbstractCoder,"org.apache.commons.compress.archivers.sevenz.AbstractCoder.getOptionsFromCoder(Coder,InputStream)",Has_Method
org.apache.commons.compress.archivers.sevenz.AbstractCoder,org.apache.commons.compress.archivers.sevenz.AbstractCoder.isOptionInstance(Object),Has_Method
org.apache.commons.compress.archivers.sevenz.AbstractCoder,org.apache.commons.compress.archivers.sevenz.AbstractCoder.<init>(Class[]),Has_Method
org.apache.commons.compress.archivers.sevenz.LZMADecoder,"org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[],int)",Has_Method
org.apache.commons.compress.archivers.sevenz.LZMADecoder,"org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(OutputStream,Object)",Has_Method
org.apache.commons.compress.archivers.sevenz.LZMADecoder,org.apache.commons.compress.archivers.sevenz.LZMADecoder.getDictionarySize(Coder),Has_Method
org.apache.commons.compress.archivers.sevenz.LZMADecoder,org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(Object),Has_Method
org.apache.commons.compress.archivers.sevenz.LZMADecoder,org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(Object),Has_Method
org.apache.commons.compress.archivers.sevenz.LZMADecoder,"org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(Coder,InputStream)",Has_Method
org.apache.commons.compress.archivers.sevenz.LZMADecoder,org.apache.commons.compress.archivers.sevenz.LZMADecoder.numberOptionOrDefault(Object),Has_Method
org.apache.commons.compress.archivers.sevenz.LZMADecoder,org.apache.commons.compress.archivers.sevenz.LZMADecoder.<init>(),Has_Method
org.apache.commons.compress.archivers.sevenz.LZMA2Decoder,"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[],int)",Has_Method
org.apache.commons.compress.archivers.sevenz.LZMA2Decoder,"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.encode(OutputStream,Object)",Has_Method
org.apache.commons.compress.archivers.sevenz.LZMA2Decoder,org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictionarySize(Coder),Has_Method
org.apache.commons.compress.archivers.sevenz.LZMA2Decoder,org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictSize(Object),Has_Method
org.apache.commons.compress.archivers.sevenz.LZMA2Decoder,org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptions(Object),Has_Method
org.apache.commons.compress.archivers.sevenz.LZMA2Decoder,org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsAsProperties(Object),Has_Method
org.apache.commons.compress.archivers.sevenz.LZMA2Decoder,"org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsFromCoder(Coder,InputStream)",Has_Method
org.apache.commons.compress.archivers.sevenz.LZMA2Decoder,org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.numberOptionOrDefault(Object),Has_Method
org.apache.commons.compress.archivers.sevenz.LZMA2Decoder,org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.<init>(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.assertFitsIntoNonNegativeInt(String,long)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.builder(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.checkEndOfFile(ByteBuffer,int)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.get(ByteBuffer,byte[])",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.getChar(ByteBuffer),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.getInt(ByteBuffer),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.getLong(ByteBuffer),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(byte[],int)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.newByteChannel(File),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream(int,boolean)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(Archive),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.checkEntryIsInitialized(Map,int)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.close(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.getDefaultName(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.getEntries(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.getInputStream(SevenZArchiveEntry),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.getStatisticsForCurrentEntry(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.hasCurrentEntryBeenRead(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.initializeArchive(StartHeader,byte[],boolean)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.read(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[]),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(ByteBuffer,int)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.readArchiveProperties(ByteBuffer),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(ByteBuffer,int)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(ByteBuffer,Archive,byte[])",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(ByteBuffer,Archive)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(ByteBuffer),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(ByteBuffer),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(ByteBuffer,Archive)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[]),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(ByteBuffer,Archive)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(ByteBuffer,Archive)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(ByteBuffer,Archive)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(ByteBuffer,Archive)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.reopenFolderInputStream(int,SevenZArchiveEntry)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckAndCollectStatistics(ByteBuffer),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckArchiveProperties(ByteBuffer),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckFilesInfo(ByteBuffer,ArchiveStatistics)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckFolder(ByteBuffer,ArchiveStatistics)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckPackInfo(ByteBuffer,ArchiveStatistics)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckStreamsInfo(ByteBuffer,ArchiveStatistics)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckSubStreamsInfo(ByteBuffer,ArchiveStatistics)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.sanityCheckUnpackInfo(ByteBuffer,ArchiveStatistics)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.skipEntriesWhenNeeded(int,boolean,int)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.toString(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.tryToLocateEndHeader(byte[]),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,byte[])",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,char[])",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,char[],SevenZFileOptions)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(File,SevenZFileOptions)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,byte[])",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,char[])",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,char[],SevenZFileOptions)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,SevenZFileOptions)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[])",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,int,boolean,boolean)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,byte[],boolean,SevenZFileOptions)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[])",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,char[],SevenZFileOptions)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile,"org.apache.commons.compress.archivers.sevenz.SevenZFile.<init>(SeekableByteChannel,String,SevenZFileOptions)",Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.assertValidity(int),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.bindPairSize(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.coderSize(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.entrySize(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.estimateSize(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.folderSize(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.streamMapSize(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics,org.apache.commons.compress.archivers.sevenz.SevenZFile$ArchiveStatistics.toString(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.get(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setDefaultName(String),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setMaxMemoryLimitKb(int),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setMaxMemoryLimitKiB(int),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setPassword(byte[]),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setPassword(char[]),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setPassword(String),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setSeekableByteChannel(SeekableByteChannel),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setTryToRecoverBrokenArchives(boolean),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder,org.apache.commons.compress.archivers.sevenz.SevenZFile$Builder.setUseDefaultNameForUnnamedEntries(boolean),Has_Method
org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream,org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.close(),Has_Method
org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream,org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(),Has_Method
org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream,"org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream,org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(int),Has_Method
org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream,"org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.<init>(SeekableByteChannel,long)",Has_Method
org.apache.commons.compress.archivers.sevenz.Folder,org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForInStream(int),Has_Method
org.apache.commons.compress.archivers.sevenz.Folder,org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForOutStream(int),Has_Method
org.apache.commons.compress.archivers.sevenz.Folder,org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders(),Has_Method
org.apache.commons.compress.archivers.sevenz.Folder,org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSize(),Has_Method
org.apache.commons.compress.archivers.sevenz.Folder,org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSizeForCoder(Coder),Has_Method
org.apache.commons.compress.archivers.sevenz.Folder,org.apache.commons.compress.archivers.sevenz.Folder.toString(),Has_Method
org.apache.commons.compress.archivers.sevenz.Archive,org.apache.commons.compress.archivers.sevenz.Archive.lengthOf(long[]),Has_Method
org.apache.commons.compress.archivers.sevenz.Archive,org.apache.commons.compress.archivers.sevenz.Archive.lengthOf(Object[]),Has_Method
org.apache.commons.compress.archivers.sevenz.Archive,org.apache.commons.compress.archivers.sevenz.Archive.toString(),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZMethod,org.apache.commons.compress.archivers.sevenz.SevenZMethod.byId(byte[]),Has_Method
org.apache.commons.compress.archivers.sevenz.SevenZMethod,org.apache.commons.compress.archivers.sevenz.SevenZMethod.getId(),Has_Method
org.apache.commons.compress.archivers.sevenz.AES256Options,org.apache.commons.compress.archivers.sevenz.AES256Options.newSecretKeySpec(byte[]),Has_Method
org.apache.commons.compress.archivers.sevenz.AES256Options,org.apache.commons.compress.archivers.sevenz.AES256Options.randomBytes(int),Has_Method
org.apache.commons.compress.archivers.sevenz.AES256Options,org.apache.commons.compress.archivers.sevenz.AES256Options.getCipher(),Has_Method
org.apache.commons.compress.archivers.sevenz.AES256Options,org.apache.commons.compress.archivers.sevenz.AES256Options.getIv(),Has_Method
org.apache.commons.compress.archivers.sevenz.AES256Options,org.apache.commons.compress.archivers.sevenz.AES256Options.getNumCyclesPower(),Has_Method
org.apache.commons.compress.archivers.sevenz.AES256Options,org.apache.commons.compress.archivers.sevenz.AES256Options.getSalt(),Has_Method
org.apache.commons.compress.archivers.sevenz.AES256Options,org.apache.commons.compress.archivers.sevenz.AES256Options.<init>(char[]),Has_Method
org.apache.commons.compress.archivers.sevenz.AES256Options,"org.apache.commons.compress.archivers.sevenz.AES256Options.<init>(char[],byte[],byte[],int)",Has_Method
org.apache.commons.compress.archivers.sevenz.SubStreamsInfo,org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.<init>(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,org.apache.commons.compress.archivers.zip.ZipUtil.adjustToLong(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,"org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[],byte[],int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaDate(long),Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(long),Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,org.apache.commons.compress.archivers.zip.ZipUtil.fromDosTime(ZipLong),Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,"org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField,byte[])",Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,org.apache.commons.compress.archivers.zip.ZipUtil.isDosTime(long),Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,org.apache.commons.compress.archivers.zip.ZipUtil.javaEpochToLocalDateTime(long),Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,org.apache.commons.compress.archivers.zip.ZipUtil.javaToDosTime(long),Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,org.apache.commons.compress.archivers.zip.ZipUtil.longToBig(long),Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,"org.apache.commons.compress.archivers.zip.ZipUtil.newZipException(String,Throwable)",Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,"org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(ZipArchiveEntry,byte[],byte[])",Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,org.apache.commons.compress.archivers.zip.ZipUtil.signedByteToUnsignedInt(byte),Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,org.apache.commons.compress.archivers.zip.ZipUtil.supportsEncryptionOf(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(Date),Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long),Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,"org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long,byte[],int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,org.apache.commons.compress.archivers.zip.ZipUtil.toLong(BigInteger),Has_Method
org.apache.commons.compress.archivers.zip.ZipUtil,org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipEncodingHelper,org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(Charset),Has_Method
org.apache.commons.compress.archivers.zip.ZipEncodingHelper,org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(String),Has_Method
org.apache.commons.compress.archivers.zip.ZipEncodingHelper,"org.apache.commons.compress.archivers.zip.ZipEncodingHelper.growBufferBy(ByteBuffer,int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipEncodingHelper,org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(Charset),Has_Method
org.apache.commons.compress.archivers.zip.ZipEncodingHelper,org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(String),Has_Method
org.apache.commons.compress.archivers.zip.ZipEncodingHelper,org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8Alias(String),Has_Method
org.apache.commons.compress.archivers.zip.ZipEncodingHelper,org.apache.commons.compress.archivers.zip.ZipEncodingHelper.toSafeCharset(String),Has_Method
org.apache.commons.compress.archivers.zip.X0014_X509Certificates,org.apache.commons.compress.archivers.zip.X0014_X509Certificates.<init>(),Has_Method
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField,org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.assembleData(),Has_Method
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField,org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryData(),Has_Method
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField,org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryLength(),Has_Method
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField,org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getLocalFileDataData(),Has_Method
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField,org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getLocalFileDataLength(),Has_Method
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField,org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getNameCRC32(),Has_Method
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField,org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getUnicodeName(),Has_Method
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField,"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromCentralDirectoryData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField,"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField,org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.setNameCRC32(long),Has_Method
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField,org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.setUnicodeName(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField,org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(),Has_Method
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField,"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[])",Has_Method
org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField,"org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.<init>(String,byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest,"org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest,org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getMethod(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest,org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getPayloadStream(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest,org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getZipArchiveEntry(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest,"org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.<init>(ZipArchiveEntry,InputStreamSupplier)",Has_Method
org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics,org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.fill(),Has_Method
org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics,org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.getCompressedCount(),Has_Method
org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics,org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.getUncompressedCount(),Has_Method
org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics,org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.read(),Has_Method
org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics,"org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.read(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics,org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream),Has_Method
org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics,"org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream,Inflater)",Has_Method
org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics,"org.apache.commons.compress.archivers.zip.InflaterInputStreamWithStatistics.<init>(InputStream,Inflater,int)",Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,org.apache.commons.compress.archivers.zip.AsiExtraField.clone(),Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,org.apache.commons.compress.archivers.zip.AsiExtraField.getCentralDirectoryData(),Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,org.apache.commons.compress.archivers.zip.AsiExtraField.getCentralDirectoryLength(),Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,org.apache.commons.compress.archivers.zip.AsiExtraField.getGroupId(),Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,org.apache.commons.compress.archivers.zip.AsiExtraField.getHeaderId(),Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,org.apache.commons.compress.archivers.zip.AsiExtraField.getLinkedFile(),Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataData(),Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataLength(),Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(),Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(int),Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,org.apache.commons.compress.archivers.zip.AsiExtraField.getUserId(),Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,org.apache.commons.compress.archivers.zip.AsiExtraField.isDirectory(),Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,org.apache.commons.compress.archivers.zip.AsiExtraField.isLink(),Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,"org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromCentralDirectoryData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,"org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(boolean),Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,org.apache.commons.compress.archivers.zip.AsiExtraField.setGroupId(int),Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,org.apache.commons.compress.archivers.zip.AsiExtraField.setLinkedFile(String),Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(int),Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,org.apache.commons.compress.archivers.zip.AsiExtraField.setUserId(int),Has_Method
org.apache.commons.compress.archivers.zip.AsiExtraField,org.apache.commons.compress.archivers.zip.AsiExtraField.<init>(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(ZipArchiveEntry,InputStream)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(ArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Zip64Mode),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(boolean),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(boolean,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(InputStream,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(File,String)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry,ByteBuffer,EntryMetaData,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean,long)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.deflate(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flush(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getBytesWritten(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEncoding(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(boolean,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(ZipArchiveEntry,long,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLargeForZip32(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(ZipArchiveEntry,Zip64Mode)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ZipArchiveEntry,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(boolean),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setComment(String),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setCreateUnicodeExtraFields(UnicodeExtraFieldPolicy),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(Charset),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(String),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setFallbackToUTF8(boolean),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setLevel(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setMethod(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(boolean),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(Zip64Mode),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldUseZip64EOCD(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.usesDataDescriptor(int,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateIfZip64IsNeededInEOCD(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Zip64Mode),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(int,boolean,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtractMethod(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralFileHeader(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(ZipArchiveEntry,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writePreamble(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writePreamble(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(File),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(File,long)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(OutputStream),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Path,long)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(Path,OpenOption[])",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.<init>(SeekableByteChannel),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$CurrentEntry.<init>(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData,"org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$EntryMetaData.<init>(long,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.toString(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream$UnicodeExtraFieldPolicy.<init>(String),Has_Method
org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream,org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.close(),Has_Method
org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream,org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.position(),Has_Method
org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream,"org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream,"org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.writeAll(byte[],int,int,long)",Has_Method
org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream,org.apache.commons.compress.archivers.zip.SeekableChannelRandomAccessOutputStream.<init>(SeekableByteChannel),Has_Method
org.apache.commons.compress.archivers.zip.X7875_NewUnix,org.apache.commons.compress.archivers.zip.X7875_NewUnix.trimLeadingZeroesForceMinLength(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.X7875_NewUnix,org.apache.commons.compress.archivers.zip.X7875_NewUnix.clone(),Has_Method
org.apache.commons.compress.archivers.zip.X7875_NewUnix,org.apache.commons.compress.archivers.zip.X7875_NewUnix.equals(Object),Has_Method
org.apache.commons.compress.archivers.zip.X7875_NewUnix,org.apache.commons.compress.archivers.zip.X7875_NewUnix.getCentralDirectoryData(),Has_Method
org.apache.commons.compress.archivers.zip.X7875_NewUnix,org.apache.commons.compress.archivers.zip.X7875_NewUnix.getCentralDirectoryLength(),Has_Method
org.apache.commons.compress.archivers.zip.X7875_NewUnix,org.apache.commons.compress.archivers.zip.X7875_NewUnix.getGID(),Has_Method
org.apache.commons.compress.archivers.zip.X7875_NewUnix,org.apache.commons.compress.archivers.zip.X7875_NewUnix.getHeaderId(),Has_Method
org.apache.commons.compress.archivers.zip.X7875_NewUnix,org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataData(),Has_Method
org.apache.commons.compress.archivers.zip.X7875_NewUnix,org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataLength(),Has_Method
org.apache.commons.compress.archivers.zip.X7875_NewUnix,org.apache.commons.compress.archivers.zip.X7875_NewUnix.getUID(),Has_Method
org.apache.commons.compress.archivers.zip.X7875_NewUnix,org.apache.commons.compress.archivers.zip.X7875_NewUnix.hashCode(),Has_Method
org.apache.commons.compress.archivers.zip.X7875_NewUnix,"org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromCentralDirectoryData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.X7875_NewUnix,"org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.X7875_NewUnix,org.apache.commons.compress.archivers.zip.X7875_NewUnix.reset(),Has_Method
org.apache.commons.compress.archivers.zip.X7875_NewUnix,org.apache.commons.compress.archivers.zip.X7875_NewUnix.setGID(long),Has_Method
org.apache.commons.compress.archivers.zip.X7875_NewUnix,org.apache.commons.compress.archivers.zip.X7875_NewUnix.setUID(long),Has_Method
org.apache.commons.compress.archivers.zip.X7875_NewUnix,org.apache.commons.compress.archivers.zip.X7875_NewUnix.toString(),Has_Method
org.apache.commons.compress.archivers.zip.X7875_NewUnix,org.apache.commons.compress.archivers.zip.X7875_NewUnix.<init>(),Has_Method
org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList,org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList.<init>(),Has_Method
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.addSizes(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryData(),Has_Method
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryLength(),Has_Method
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCompressedSize(),Has_Method
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getDiskStartNumber(),Has_Method
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getHeaderId(),Has_Method
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataData(),Has_Method
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataLength(),Has_Method
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getRelativeHeaderOffset(),Has_Method
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getSize(),Has_Method
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(boolean,boolean,boolean,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setCompressedSize(ZipEightByteInteger),Has_Method
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setDiskStartNumber(ZipLong),Has_Method
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setRelativeHeaderOffset(ZipEightByteInteger),Has_Method
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setSize(ZipEightByteInteger),Has_Method
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(),Has_Method
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger)",Has_Method
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField,"org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.<init>(ZipEightByteInteger,ZipEightByteInteger,ZipEightByteInteger,ZipLong)",Has_Method
org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.ZipLong.getBytes(long),Has_Method
org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipLong,"org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipLong,"org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.ZipLong.clone(),Has_Method
org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.ZipLong.equals(Object),Has_Method
org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.ZipLong.getBytes(),Has_Method
org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.ZipLong.getIntValue(),Has_Method
org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.ZipLong.getValue(),Has_Method
org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.ZipLong.hashCode(),Has_Method
org.apache.commons.compress.archivers.zip.ZipLong,"org.apache.commons.compress.archivers.zip.ZipLong.putLong(byte[],int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.ZipLong.toString(),Has_Method
org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.ZipLong.<init>(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipLong,"org.apache.commons.compress.archivers.zip.ZipLong.<init>(byte[],int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.ZipLong.<init>(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.ZipLong.<init>(long),Has_Method
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField,org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.allowMethodChange(),Has_Method
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField,org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.getAlignment(),Has_Method
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField,org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.getCentralDirectoryData(),Has_Method
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField,org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.getCentralDirectoryLength(),Has_Method
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField,org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.getHeaderId(),Has_Method
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField,org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.getLocalFileDataData(),Has_Method
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField,org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.getLocalFileDataLength(),Has_Method
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField,"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromCentralDirectoryData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField,"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.parseFromLocalFileData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField,org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(),Has_Method
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField,org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int),Has_Method
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField,"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField,"org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.<init>(int,boolean,int)",Has_Method
org.apache.commons.compress.archivers.zip.BinaryTree,"org.apache.commons.compress.archivers.zip.BinaryTree.decode(InputStream,int)",Has_Method
org.apache.commons.compress.archivers.zip.BinaryTree,"org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(int,int,int,int)",Has_Method
org.apache.commons.compress.archivers.zip.BinaryTree,org.apache.commons.compress.archivers.zip.BinaryTree.read(BitStream),Has_Method
org.apache.commons.compress.archivers.zip.BinaryTree,org.apache.commons.compress.archivers.zip.BinaryTree.<init>(int),Has_Method
org.apache.commons.compress.archivers.zip.JarMarker,org.apache.commons.compress.archivers.zip.JarMarker.getInstance(),Has_Method
org.apache.commons.compress.archivers.zip.JarMarker,org.apache.commons.compress.archivers.zip.JarMarker.getCentralDirectoryData(),Has_Method
org.apache.commons.compress.archivers.zip.JarMarker,org.apache.commons.compress.archivers.zip.JarMarker.getCentralDirectoryLength(),Has_Method
org.apache.commons.compress.archivers.zip.JarMarker,org.apache.commons.compress.archivers.zip.JarMarker.getHeaderId(),Has_Method
org.apache.commons.compress.archivers.zip.JarMarker,org.apache.commons.compress.archivers.zip.JarMarker.getLocalFileDataData(),Has_Method
org.apache.commons.compress.archivers.zip.JarMarker,org.apache.commons.compress.archivers.zip.JarMarker.getLocalFileDataLength(),Has_Method
org.apache.commons.compress.archivers.zip.JarMarker,"org.apache.commons.compress.archivers.zip.JarMarker.parseFromCentralDirectoryData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.JarMarker,"org.apache.commons.compress.archivers.zip.JarMarker.parseFromLocalFileData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.JarMarker,org.apache.commons.compress.archivers.zip.JarMarker.<init>(),Has_Method
org.apache.commons.compress.archivers.zip.ScatterStatistics,org.apache.commons.compress.archivers.zip.ScatterStatistics.getCompressionElapsed(),Has_Method
org.apache.commons.compress.archivers.zip.ScatterStatistics,org.apache.commons.compress.archivers.zip.ScatterStatistics.getMergingElapsed(),Has_Method
org.apache.commons.compress.archivers.zip.ScatterStatistics,org.apache.commons.compress.archivers.zip.ScatterStatistics.toString(),Has_Method
org.apache.commons.compress.archivers.zip.ScatterStatistics,"org.apache.commons.compress.archivers.zip.ScatterStatistics.<init>(long,long)",Has_Method
org.apache.commons.compress.archivers.zip.CharsetAccessor,org.apache.commons.compress.archivers.zip.CharsetAccessor.getCharset(),Has_Method
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader,"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.assertDynamicLengthFits(String,int,int,int)",Has_Method
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader,org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.getEncryptionAlgorithm(),Has_Method
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader,org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.getHashAlgorithm(),Has_Method
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader,org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.getRecordCount(),Has_Method
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader,"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseCentralDirectoryFormat(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader,"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFileFormat(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader,"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromCentralDirectoryData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader,"org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.parseFromLocalFileData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader,org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.<init>(),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.dateToZip(Date),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.fileTimeToZip(FileTime),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(ZipEightByteInteger),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToFileTime(ZipEightByteInteger),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.equals(Object),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.getAccessFileTime(),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.getAccessJavaTime(),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.getAccessTime(),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.getCentralDirectoryData(),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.getCentralDirectoryLength(),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.getCreateFileTime(),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.getCreateJavaTime(),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.getCreateTime(),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.getHeaderId(),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataData(),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataLength(),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.getModifyFileTime(),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.getModifyJavaTime(),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.getModifyTime(),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.hashCode(),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,"org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromCentralDirectoryData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,"org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,"org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.reset(),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessFileTime(FileTime),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessJavaTime(Date),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessTime(ZipEightByteInteger),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateFileTime(FileTime),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateJavaTime(Date),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateTime(ZipEightByteInteger),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyFileTime(FileTime),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyJavaTime(Date),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyTime(ZipEightByteInteger),Has_Method
org.apache.commons.compress.archivers.zip.X000A_NTFS,org.apache.commons.compress.archivers.zip.X000A_NTFS.toString(),Has_Method
org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile,org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.getHashAlgorithm(),Has_Method
org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile,org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.getRecordCount(),Has_Method
org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile,"org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.parseFromCentralDirectoryData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile,org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.<init>(),Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream,"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.calculateDiskPosition(long,long)",Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.close(),Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.createNewSplitSegmentFile(Integer),Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.finish(),Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.getCurrentSplitSegmentBytesWritten(),Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.getCurrentSplitSegmentIndex(),Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.getSplitSegmentFileName(Integer),Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.openNewSplitSegment(),Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.position(),Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.prepareToWriteUnsplittableContent(long),Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream,"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.write(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream,"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeAll(byte[],int,int,long)",Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream,"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeToSegment(Path,long,byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream,org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.writeZipSplitSignature(),Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream,"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.<init>(File,long)",Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitOutputStream,"org.apache.commons.compress.archivers.zip.ZipSplitOutputStream.<init>(Path,long)",Has_Method
org.apache.commons.compress.archivers.zip.ExtraFieldUtils,org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(ZipShort),Has_Method
org.apache.commons.compress.archivers.zip.ExtraFieldUtils,org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraFieldNoDefault(ZipShort),Has_Method
org.apache.commons.compress.archivers.zip.ExtraFieldUtils,"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(ZipExtraField,byte[],int,int,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ExtraFieldUtils,org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(ZipExtraField[]),Has_Method
org.apache.commons.compress.archivers.zip.ExtraFieldUtils,org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(ZipExtraField[]),Has_Method
org.apache.commons.compress.archivers.zip.ExtraFieldUtils,org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.ExtraFieldUtils,"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ExtraFieldUtils,"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,ExtraFieldParsingBehavior)",Has_Method
org.apache.commons.compress.archivers.zip.ExtraFieldUtils,"org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField)",Has_Method
org.apache.commons.compress.archivers.zip.ExtraFieldUtils,org.apache.commons.compress.archivers.zip.ExtraFieldUtils.register(Class),Has_Method
org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField,org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.getKey(),Has_Method
org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField,"org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.onUnparseableExtraField(byte[],int,int,boolean,int)",Has_Method
org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField,org.apache.commons.compress.archivers.zip.ExtraFieldUtils$UnparseableExtraField.<init>(int),Has_Method
org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior,"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldBehavior.onUnparseableExtraField(byte[],int,int,boolean,int)",Has_Method
org.apache.commons.compress.archivers.zip.UnrecognizedExtraField,org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryData(),Has_Method
org.apache.commons.compress.archivers.zip.UnrecognizedExtraField,org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryLength(),Has_Method
org.apache.commons.compress.archivers.zip.UnrecognizedExtraField,org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getHeaderId(),Has_Method
org.apache.commons.compress.archivers.zip.UnrecognizedExtraField,org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataData(),Has_Method
org.apache.commons.compress.archivers.zip.UnrecognizedExtraField,org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataLength(),Has_Method
org.apache.commons.compress.archivers.zip.UnrecognizedExtraField,"org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromCentralDirectoryData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.UnrecognizedExtraField,"org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromLocalFileData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.UnrecognizedExtraField,org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setCentralDirectoryData(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.UnrecognizedExtraField,org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setHeaderId(ZipShort),Has_Method
org.apache.commons.compress.archivers.zip.UnrecognizedExtraField,org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setLocalFileDataData(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream,org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.channel(),Has_Method
org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream,org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.close(),Has_Method
org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream,org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.position(),Has_Method
org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream,"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream,"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.writeAll(byte[],int,int,long)",Has_Method
org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream,org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.<init>(FileChannel),Has_Method
org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream,org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.<init>(Path),Has_Method
org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream,"org.apache.commons.compress.archivers.zip.FileRandomAccessOutputStream.<init>(Path,OpenOption[])",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate,org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate.test(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ExplodingInputStream,org.apache.commons.compress.archivers.zip.ExplodingInputStream.close(),Has_Method
org.apache.commons.compress.archivers.zip.ExplodingInputStream,org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer(),Has_Method
org.apache.commons.compress.archivers.zip.ExplodingInputStream,org.apache.commons.compress.archivers.zip.ExplodingInputStream.getCompressedCount(),Has_Method
org.apache.commons.compress.archivers.zip.ExplodingInputStream,org.apache.commons.compress.archivers.zip.ExplodingInputStream.getUncompressedCount(),Has_Method
org.apache.commons.compress.archivers.zip.ExplodingInputStream,org.apache.commons.compress.archivers.zip.ExplodingInputStream.init(),Has_Method
org.apache.commons.compress.archivers.zip.ExplodingInputStream,org.apache.commons.compress.archivers.zip.ExplodingInputStream.read(),Has_Method
org.apache.commons.compress.archivers.zip.ExplodingInputStream,"org.apache.commons.compress.archivers.zip.ExplodingInputStream.<init>(int,int,InputStream)",Has_Method
org.apache.commons.compress.archivers.zip.CircularBuffer,org.apache.commons.compress.archivers.zip.CircularBuffer.available(),Has_Method
org.apache.commons.compress.archivers.zip.CircularBuffer,"org.apache.commons.compress.archivers.zip.CircularBuffer.copy(int,int)",Has_Method
org.apache.commons.compress.archivers.zip.CircularBuffer,org.apache.commons.compress.archivers.zip.CircularBuffer.get(),Has_Method
org.apache.commons.compress.archivers.zip.CircularBuffer,org.apache.commons.compress.archivers.zip.CircularBuffer.put(int),Has_Method
org.apache.commons.compress.archivers.zip.CircularBuffer,org.apache.commons.compress.archivers.zip.CircularBuffer.<init>(int),Has_Method
org.apache.commons.compress.archivers.zip.UnshrinkingInputStream,"org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(int,byte)",Has_Method
org.apache.commons.compress.archivers.zip.UnshrinkingInputStream,org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.decompressNextSymbol(),Has_Method
org.apache.commons.compress.archivers.zip.UnshrinkingInputStream,org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.partialClear(),Has_Method
org.apache.commons.compress.archivers.zip.UnshrinkingInputStream,org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.dateToZipLong(Date),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.fileTimeToZipLong(FileTime),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.unixTimeToFileTime(ZipLong),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.unixTimeToZipLong(long),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.zipLongToDate(ZipLong),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.clone(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.equals(Object),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessFileTime(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessJavaTime(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessTime(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryData(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryLength(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateFileTime(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateJavaTime(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateTime(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getFlags(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getHeaderId(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataData(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataLength(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyFileTime(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyJavaTime(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyTime(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.hashCode(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit0_modifyTimePresent(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit1_accessTimePresent(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit2_createTimePresent(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,"org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromCentralDirectoryData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,"org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.reset(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessFileTime(FileTime),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessJavaTime(Date),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessTime(ZipLong),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateFileTime(FileTime),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateJavaTime(Date),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateTime(ZipLong),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(byte),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyFileTime(FileTime),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyJavaTime(Date),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyTime(ZipLong),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.toString(),Has_Method
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.<init>(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier,org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier.get(),Has_Method
org.apache.commons.compress.archivers.zip.PKWareExtraHeader,"org.apache.commons.compress.archivers.zip.PKWareExtraHeader.assertMinimalLength(int,int)",Has_Method
org.apache.commons.compress.archivers.zip.PKWareExtraHeader,org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getCentralDirectoryData(),Has_Method
org.apache.commons.compress.archivers.zip.PKWareExtraHeader,org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getCentralDirectoryLength(),Has_Method
org.apache.commons.compress.archivers.zip.PKWareExtraHeader,org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getHeaderId(),Has_Method
org.apache.commons.compress.archivers.zip.PKWareExtraHeader,org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getLocalFileDataData(),Has_Method
org.apache.commons.compress.archivers.zip.PKWareExtraHeader,org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getLocalFileDataLength(),Has_Method
org.apache.commons.compress.archivers.zip.PKWareExtraHeader,"org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromCentralDirectoryData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.PKWareExtraHeader,"org.apache.commons.compress.archivers.zip.PKWareExtraHeader.parseFromLocalFileData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.PKWareExtraHeader,org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setCentralDirectoryData(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.PKWareExtraHeader,org.apache.commons.compress.archivers.zip.PKWareExtraHeader.setLocalFileDataData(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.PKWareExtraHeader,org.apache.commons.compress.archivers.zip.PKWareExtraHeader.<init>(ZipShort),Has_Method
org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm,org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm.getAlgorithmByCode(int),Has_Method
org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm,org.apache.commons.compress.archivers.zip.PKWareExtraHeader$EncryptionAlgorithm.getCode(),Has_Method
org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm,org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm.getAlgorithmByCode(int),Has_Method
org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm,org.apache.commons.compress.archivers.zip.PKWareExtraHeader$HashAlgorithm.getCode(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.builder(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(ZipFile),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.newReadByteChannel(Path),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,"org.apache.commons.compress.archivers.zip.ZipFile.openZipChannel(Path,long,OpenOption[])",Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.positionAtEndOfCentralDirectoryRecord(SeekableByteChannel),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.toPlatform(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,"org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(SeekableByteChannel,long,long,byte[])",Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.canReadEntryData(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.close(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,"org.apache.commons.compress.archivers.zip.ZipFile.copyRawEntries(ZipArchiveOutputStream,ZipArchiveEntryPredicate)",Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,"org.apache.commons.compress.archivers.zip.ZipFile.createBoundedInputStream(long,long)",Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.fillNameMap(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.finalize(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.getContentBeforeFirstLocalFileHeader(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.getDataOffset(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.getEncoding(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.getEntries(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.getEntries(String),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(String),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.getEntry(String),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.getFirstLocalFileHeaderOffset(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.getRawInputStream(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.sanityCheckLFHOffset(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.setDataOffset(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.sortByOffset(ZipArchiveEntry[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.stream(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.<init>(File),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String)",Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,"org.apache.commons.compress.archivers.zip.ZipFile.<init>(File,String,boolean,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String)",Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,"org.apache.commons.compress.archivers.zip.ZipFile.<init>(Path,String,boolean,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String)",Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,Charset,boolean,boolean,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,"org.apache.commons.compress.archivers.zip.ZipFile.<init>(SeekableByteChannel,String,String,boolean,boolean,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,org.apache.commons.compress.archivers.zip.ZipFile.<init>(String),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile,"org.apache.commons.compress.archivers.zip.ZipFile.<init>(String,String)",Has_Method
org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream,"org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream.read(long,ByteBuffer)",Has_Method
org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream,"org.apache.commons.compress.archivers.zip.ZipFile$BoundedFileChannelInputStream.<init>(long,long,FileChannel)",Has_Method
org.apache.commons.compress.archivers.zip.ZipFile$Builder,org.apache.commons.compress.archivers.zip.ZipFile$Builder.get(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile$Builder,org.apache.commons.compress.archivers.zip.ZipFile$Builder.setIgnoreLocalFileHeader(boolean),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile$Builder,org.apache.commons.compress.archivers.zip.ZipFile$Builder.setMaxNumberOfDisks(long),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile$Builder,org.apache.commons.compress.archivers.zip.ZipFile$Builder.setSeekableByteChannel(SeekableByteChannel),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile$Builder,org.apache.commons.compress.archivers.zip.ZipFile$Builder.setUseUnicodeExtraFields(boolean),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile$Builder,org.apache.commons.compress.archivers.zip.ZipFile$Builder.<init>(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile$Entry,org.apache.commons.compress.archivers.zip.ZipFile$Entry.equals(Object),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile$Entry,org.apache.commons.compress.archivers.zip.ZipFile$Entry.hashCode(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment,"org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment.<init>(byte[],byte[])",Has_Method
org.apache.commons.compress.archivers.zip.ZipFile$StoredStatisticsStream,org.apache.commons.compress.archivers.zip.ZipFile$StoredStatisticsStream.getCompressedCount(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile$StoredStatisticsStream,org.apache.commons.compress.archivers.zip.ZipFile$StoredStatisticsStream.getUncompressedCount(),Has_Method
org.apache.commons.compress.archivers.zip.ZipFile$StoredStatisticsStream,org.apache.commons.compress.archivers.zip.ZipFile$StoredStatisticsStream.<init>(InputStream),Has_Method
org.apache.commons.compress.archivers.zip.GeneralPurposeBit,"org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(byte[],int)",Has_Method
org.apache.commons.compress.archivers.zip.GeneralPurposeBit,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.clone(),Has_Method
org.apache.commons.compress.archivers.zip.GeneralPurposeBit,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(),Has_Method
org.apache.commons.compress.archivers.zip.GeneralPurposeBit,"org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(byte[],int)",Has_Method
org.apache.commons.compress.archivers.zip.GeneralPurposeBit,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.equals(Object),Has_Method
org.apache.commons.compress.archivers.zip.GeneralPurposeBit,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getNumberOfShannonFanoTrees(),Has_Method
org.apache.commons.compress.archivers.zip.GeneralPurposeBit,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getSlidingDictionarySize(),Has_Method
org.apache.commons.compress.archivers.zip.GeneralPurposeBit,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.hashCode(),Has_Method
org.apache.commons.compress.archivers.zip.GeneralPurposeBit,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useDataDescriptor(boolean),Has_Method
org.apache.commons.compress.archivers.zip.GeneralPurposeBit,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useEncryption(boolean),Has_Method
org.apache.commons.compress.archivers.zip.GeneralPurposeBit,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesDataDescriptor(),Has_Method
org.apache.commons.compress.archivers.zip.GeneralPurposeBit,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesEncryption(),Has_Method
org.apache.commons.compress.archivers.zip.GeneralPurposeBit,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesStrongEncryption(),Has_Method
org.apache.commons.compress.archivers.zip.GeneralPurposeBit,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useStrongEncryption(boolean),Has_Method
org.apache.commons.compress.archivers.zip.GeneralPurposeBit,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesUTF8ForNames(),Has_Method
org.apache.commons.compress.archivers.zip.GeneralPurposeBit,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useUTF8ForNames(boolean),Has_Method
org.apache.commons.compress.archivers.zip.GeneralPurposeBit,org.apache.commons.compress.archivers.zip.GeneralPurposeBit.<init>(),Has_Method
org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory,org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.getHashAlgorithm(),Has_Method
org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory,org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.getRecordCount(),Has_Method
org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory,"org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.parseFromCentralDirectoryData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory,org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.<init>(),Has_Method
org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.ZipShort.getBytes(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipShort,"org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipShort,"org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.ZipShort.clone(),Has_Method
org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.ZipShort.equals(Object),Has_Method
org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.ZipShort.getBytes(),Has_Method
org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.ZipShort.getValue(),Has_Method
org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.ZipShort.hashCode(),Has_Method
org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.ZipShort.toString(),Has_Method
org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.ZipShort.<init>(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipShort,"org.apache.commons.compress.archivers.zip.ZipShort.<init>(byte[],int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipShort,org.apache.commons.compress.archivers.zip.ZipShort.<init>(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipExtraField,org.apache.commons.compress.archivers.zip.ZipExtraField.getCentralDirectoryData(),Has_Method
org.apache.commons.compress.archivers.zip.ZipExtraField,org.apache.commons.compress.archivers.zip.ZipExtraField.getCentralDirectoryLength(),Has_Method
org.apache.commons.compress.archivers.zip.ZipExtraField,org.apache.commons.compress.archivers.zip.ZipExtraField.getHeaderId(),Has_Method
org.apache.commons.compress.archivers.zip.ZipExtraField,org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataData(),Has_Method
org.apache.commons.compress.archivers.zip.ZipExtraField,org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataLength(),Has_Method
org.apache.commons.compress.archivers.zip.ZipExtraField,"org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromCentralDirectoryData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipExtraField,"org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromLocalFileData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipConstants,org.apache.commons.compress.archivers.zip.ZipConstants.<init>(),Has_Method
org.apache.commons.compress.archivers.zip.ZipIoUtil,"org.apache.commons.compress.archivers.zip.ZipIoUtil.writeAll(FileChannel,ByteBuffer,long)",Has_Method
org.apache.commons.compress.archivers.zip.ZipIoUtil,"org.apache.commons.compress.archivers.zip.ZipIoUtil.writeAll(WritableByteChannel,ByteBuffer)",Has_Method
org.apache.commons.compress.archivers.zip.ZipIoUtil,org.apache.commons.compress.archivers.zip.ZipIoUtil.<init>(),Has_Method
org.apache.commons.compress.archivers.zip.RandomAccessOutputStream,org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.position(),Has_Method
org.apache.commons.compress.archivers.zip.RandomAccessOutputStream,org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.write(int),Has_Method
org.apache.commons.compress.archivers.zip.RandomAccessOutputStream,"org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],int,int,long)",Has_Method
org.apache.commons.compress.archivers.zip.RandomAccessOutputStream,"org.apache.commons.compress.archivers.zip.RandomAccessOutputStream.writeAll(byte[],long)",Has_Method
org.apache.commons.compress.archivers.zip.UnicodePathExtraField,org.apache.commons.compress.archivers.zip.UnicodePathExtraField.getHeaderId(),Has_Method
org.apache.commons.compress.archivers.zip.UnicodePathExtraField,org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(),Has_Method
org.apache.commons.compress.archivers.zip.UnicodePathExtraField,"org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[])",Has_Method
org.apache.commons.compress.archivers.zip.UnicodePathExtraField,"org.apache.commons.compress.archivers.zip.UnicodePathExtraField.<init>(String,byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior,org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior.createExtraField(ZipShort),Has_Method
org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior,"org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior.fill(ZipExtraField,byte[],int,int,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.NioZipEncoding,"org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeFully(CharsetEncoder,CharBuffer,ByteBuffer)",Has_Method
org.apache.commons.compress.archivers.zip.NioZipEncoding,"org.apache.commons.compress.archivers.zip.NioZipEncoding.encodeSurrogate(CharBuffer,char)",Has_Method
org.apache.commons.compress.archivers.zip.NioZipEncoding,"org.apache.commons.compress.archivers.zip.NioZipEncoding.estimateIncrementalEncodingSize(CharsetEncoder,int)",Has_Method
org.apache.commons.compress.archivers.zip.NioZipEncoding,"org.apache.commons.compress.archivers.zip.NioZipEncoding.estimateInitialBufferSize(CharsetEncoder,int)",Has_Method
org.apache.commons.compress.archivers.zip.NioZipEncoding,org.apache.commons.compress.archivers.zip.NioZipEncoding.canEncode(String),Has_Method
org.apache.commons.compress.archivers.zip.NioZipEncoding,org.apache.commons.compress.archivers.zip.NioZipEncoding.decode(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.NioZipEncoding,org.apache.commons.compress.archivers.zip.NioZipEncoding.encode(String),Has_Method
org.apache.commons.compress.archivers.zip.NioZipEncoding,org.apache.commons.compress.archivers.zip.NioZipEncoding.getCharset(),Has_Method
org.apache.commons.compress.archivers.zip.NioZipEncoding,org.apache.commons.compress.archivers.zip.NioZipEncoding.newDecoder(),Has_Method
org.apache.commons.compress.archivers.zip.NioZipEncoding,org.apache.commons.compress.archivers.zip.NioZipEncoding.newEncoder(),Has_Method
org.apache.commons.compress.archivers.zip.NioZipEncoding,"org.apache.commons.compress.archivers.zip.NioZipEncoding.<init>(Charset,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator,"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntry,InputStreamSupplier)",Has_Method
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntryRequestSupplier),Has_Method
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.closeAll(),Has_Method
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator,"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntry,InputStreamSupplier)",Has_Method
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntryRequestSupplier),Has_Method
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createDeferred(ScatterGatherBackingStoreSupplier),Has_Method
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.getStatisticsMessage(),Has_Method
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submit(Callable),Has_Method
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submitStreamAwareCallable(Callable),Has_Method
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(ZipArchiveOutputStream),Has_Method
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(),Has_Method
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator,org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService),Has_Method
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator,"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService,ScatterGatherBackingStoreSupplier)",Has_Method
org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator,"org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.<init>(ExecutorService,ScatterGatherBackingStoreSupplier,int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.canConvertToInfoZipExtendedTimestamp(FileTime,FileTime,FileTime)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectoryEntryName(String),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toDirectoryEntryName(String),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(File,String)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.toEntryName(Path,String,LinkOption[])",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addAsFirstExtraField(ZipExtraField),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(ZipExtraField),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addInfoZipExtendedTimestamp(FileTime,FileTime,FileTime)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addNTFSTimestamp(FileTime,FileTime,FileTime)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.clone(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(ZipExtraField[],int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(Object),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.findMatching(ZipShort,List)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.findUnparseable(List),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAlignment(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFields(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFieldsNoCopy(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCentralDirectoryExtra(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCommentSource(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getDataOffset(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getDiskNumberStart(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExternalAttributes(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(ZipShort),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(boolean),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(ExtraFieldParsingBehavior),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getGeneralPurposeBit(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getInternalAttributes(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLastModifiedDate(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLocalFileDataExtra(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLocalHeaderOffset(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMergedFields(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getNameSource(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFields(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFieldsNoCopy(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getPlatform(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getRawFlag(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getRawName(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getTime(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnixMode(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnparseableExtraFieldData(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnparseableOnly(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getVersionMadeBy(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getVersionRequired(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.hashCode(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAddExtraField(ZipExtraField),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalRemoveExtraField(ZipShort),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalSetLastModifiedTime(FileTime),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectory(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isStreamContiguous(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isUnixSymlink(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(ZipExtraField[],boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.parseExtraFields(byte[],boolean,ExtraFieldParsingBehavior)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(ZipShort),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeUnparseableExtraFieldData(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.requiresExtraTimeFields(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setAlignment(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setAttributes(Path,LinkOption[])",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCentralDirectoryExtra(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCommentSource(CommentSource),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCreationTime(FileTime),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setDataOffset(long),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setDiskNumberStart(long),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExternalAttributes(long),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(ZipExtraField[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraTimeFields(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setGeneralPurposeBit(GeneralPurposeBit),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setInternalAttributes(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setLastAccessTime(FileTime),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setLastModifiedTime(FileTime),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setLocalHeaderOffset(long),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String,byte[])",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setNameSource(NameSource),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setPlatform(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setRawFlag(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(long),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setStreamContiguous(boolean),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setTime(FileTime),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setTime(long),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setUnixMode(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionMadeBy(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionRequired(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.updateTimeFieldsFromExtraFields(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.updateTimeFromExtendedTimestampField(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.updateTimeFromNtfsField(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(File,String)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,File,String)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,Path,String,LinkOption[])",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,String)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Function,ZipEntry)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,"org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(Path,String,LinkOption[])",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(String),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipArchiveEntry.<init>(ZipEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode,"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fillAndMakeUnrecognizedOnError(ZipExtraField,byte[],int,int,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode,org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.createExtraField(ZipShort),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode,"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.onUnparseableExtraField(byte[],int,int,boolean,int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode,"org.apache.commons.compress.archivers.zip.ZipArchiveEntry$ExtraFieldParsingMode.fill(ZipExtraField,byte[],int,int,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipEncoding,org.apache.commons.compress.archivers.zip.ZipEncoding.canEncode(String),Has_Method
org.apache.commons.compress.archivers.zip.ZipEncoding,org.apache.commons.compress.archivers.zip.ZipEncoding.decode(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipEncoding,org.apache.commons.compress.archivers.zip.ZipEncoding.encode(String),Has_Method
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException,org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.getEntry(),Has_Method
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException,org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.getFeature(),Has_Method
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException,org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(Feature),Has_Method
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException,"org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(Feature,ZipArchiveEntry)",Has_Method
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException,"org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.<init>(ZipMethod,ZipArchiveEntry)",Has_Method
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature,org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature.toString(),Has_Method
org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature,org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature.<init>(String),Has_Method
org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField,org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.getHeaderId(),Has_Method
org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField,org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(),Has_Method
org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField,"org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[])",Has_Method
org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField,"org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.<init>(String,byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier,org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier.get(),Has_Method
org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier,org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier.<init>(Path),Has_Method
org.apache.commons.compress.archivers.zip.ZipMethod,org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipMethod,org.apache.commons.compress.archivers.zip.ZipMethod.isZstd(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipMethod,org.apache.commons.compress.archivers.zip.ZipMethod.getCode(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.checkSig(byte[],byte[])",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byte[],int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(ByteArrayOutputStream,int,int,int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(ByteArrayOutputStream,int,int,int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.canReadEntryData(ArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.currentEntryHasOutstandingBytes(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.drainCurrentEntryData(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.fill(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.findEocdRecord(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getBytesInflated(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getCompressedCount(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextEntry(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getUncompressedCount(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isApkSigningBlock(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(ZipLong,ZipLong)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFirstLocalFileHeader(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(byte[],int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readRange(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStoredEntry(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(long),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.setExtraFieldSupport(Function),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(long),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsCompressedSizeFor(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsDataDescriptorFor(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(InputStream,String,boolean,boolean,boolean)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.atMaxLength(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.read(),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream,"org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundCountInputStream.readCount(int),Has_Method
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry.checkInputStream(),Has_Method
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File),Has_Method
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream,"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File,int)",Has_Method
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(Path),Has_Method
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream,"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(Path,int)",Has_Method
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(ZipArchiveEntryRequest),Has_Method
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close(),Has_Method
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(ZipArchiveOutputStream),Has_Method
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.zipEntryWriter(),Has_Method
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream,"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.<init>(ScatterGatherBackingStore,StreamCompressor)",Has_Method
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry.transferToArchiveEntry(),Has_Method
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry,"org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$CompressedEntry.<init>(ZipArchiveEntryRequest,long,long,long)",Has_Method
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$ZipEntryWriter,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$ZipEntryWriter.close(),Has_Method
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$ZipEntryWriter,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$ZipEntryWriter.writeNextZipEntry(ZipArchiveOutputStream),Has_Method
org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$ZipEntryWriter,org.apache.commons.compress.archivers.zip.ScatterZipOutputStream$ZipEntryWriter.<init>(ScatterZipOutputStream),Has_Method
org.apache.commons.compress.archivers.zip.Zip64RequiredException,org.apache.commons.compress.archivers.zip.Zip64RequiredException.getEntryTooBigMessage(ZipArchiveEntry),Has_Method
org.apache.commons.compress.archivers.zip.Zip64RequiredException,org.apache.commons.compress.archivers.zip.Zip64RequiredException.<init>(String),Has_Method
org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(BigInteger),Has_Method
org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(long),Has_Method
org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipEightByteInteger,"org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[],int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipEightByteInteger,"org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[],int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.toUnsignedBigInteger(long),Has_Method
org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.equals(Object),Has_Method
org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(),Has_Method
org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(),Has_Method
org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(),Has_Method
org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.hashCode(),Has_Method
org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.toString(),Has_Method
org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(BigInteger),Has_Method
org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipEightByteInteger,"org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(byte[],int)",Has_Method
org.apache.commons.compress.archivers.zip.ZipEightByteInteger,org.apache.commons.compress.archivers.zip.ZipEightByteInteger.<init>(long),Has_Method
org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData,org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryData(),Has_Method
org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData,org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryLength(),Has_Method
org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData,org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getHeaderId(),Has_Method
org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData,org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataData(),Has_Method
org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData,org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataLength(),Has_Method
org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData,"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromCentralDirectoryData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData,"org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromLocalFileData(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,"org.apache.commons.compress.archivers.zip.StreamCompressor.create(DataOutput,Deflater)",Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,"org.apache.commons.compress.archivers.zip.StreamCompressor.create(int,ScatterGatherBackingStore)",Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream),Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,"org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream,Deflater)",Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,org.apache.commons.compress.archivers.zip.StreamCompressor.create(ScatterGatherBackingStore),Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,"org.apache.commons.compress.archivers.zip.StreamCompressor.create(SeekableByteChannel,Deflater)",Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,org.apache.commons.compress.archivers.zip.StreamCompressor.close(),Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(),Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,"org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(InputStream,int)",Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,org.apache.commons.compress.archivers.zip.StreamCompressor.deflateUntilInputIsNeeded(),Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,org.apache.commons.compress.archivers.zip.StreamCompressor.flushDeflater(),Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesRead(),Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesWrittenForLastEntry(),Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,org.apache.commons.compress.archivers.zip.StreamCompressor.getCrc32(),Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,org.apache.commons.compress.archivers.zip.StreamCompressor.getTotalBytesWritten(),Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,org.apache.commons.compress.archivers.zip.StreamCompressor.reset(),Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,"org.apache.commons.compress.archivers.zip.StreamCompressor.write(byte[],int,int,int)",Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[]),Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,"org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,"org.apache.commons.compress.archivers.zip.StreamCompressor.writeDeflated(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,"org.apache.commons.compress.archivers.zip.StreamCompressor.writeOut(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor,org.apache.commons.compress.archivers.zip.StreamCompressor.<init>(Deflater),Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor,"org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor.writeOut(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor,"org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor.<init>(Deflater,DataOutput)",Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor,"org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor.writeOut(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor,"org.apache.commons.compress.archivers.zip.StreamCompressor$OutputStreamCompressor.<init>(Deflater,OutputStream)",Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor,"org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor.writeOut(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor,"org.apache.commons.compress.archivers.zip.StreamCompressor$ScatterGatherBackingStoreCompressor.<init>(Deflater,ScatterGatherBackingStore)",Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor,"org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor.writeOut(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor,"org.apache.commons.compress.archivers.zip.StreamCompressor$SeekableByteChannelCompressor.<init>(Deflater,SeekableByteChannel)",Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel,org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(File),Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel,org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.buildFromLastSplitSegment(Path),Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel,org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forFiles(File[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel,"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forFiles(File,Iterable)",Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel,org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(SeekableByteChannel[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel,"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forOrderedSeekableByteChannels(SeekableByteChannel,Iterable)",Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel,"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(List,OpenOption[])",Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel,org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(Path[]),Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel,"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.forPaths(Path,Iterable)",Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel,org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.assertSplitSignature(List),Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel,org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel.<init>(List),Has_Method
org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator,"org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel$ZipSplitSegmentComparator.compare(Path,Path)",Has_Method
org.apache.commons.compress.archivers.zip.BitStream,org.apache.commons.compress.archivers.zip.BitStream.nextBit(),Has_Method
org.apache.commons.compress.archivers.zip.BitStream,org.apache.commons.compress.archivers.zip.BitStream.nextBits(int),Has_Method
org.apache.commons.compress.archivers.zip.BitStream,org.apache.commons.compress.archivers.zip.BitStream.nextByte(),Has_Method
org.apache.commons.compress.archivers.zip.BitStream,org.apache.commons.compress.archivers.zip.BitStream.<init>(InputStream),Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveEntrySupplier,ArchiveEntryBiConsumer,Path)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveInputStream,File)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(ArchiveInputStream,Path)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(File,File)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(InputStream,File)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(InputStream,File,CloseableConsumer)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(Path,Path)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(SevenZFile,File)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(SevenZFile,Path)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(String,File,File)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,File,CloseableConsumer)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(String,InputStream,Path,CloseableConsumer)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(String,Path,Path)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,File,CloseableConsumer)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(String,SeekableByteChannel,Path,CloseableConsumer)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(TarFile,File)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(TarFile,Path)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(ZipFile,File)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,"org.apache.commons.compress.archivers.examples.Expander.expand(ZipFile,Path)",Has_Method
org.apache.commons.compress.archivers.examples.Expander,org.apache.commons.compress.archivers.examples.Expander.prefersSeekableByteChannel(String),Has_Method
org.apache.commons.compress.archivers.examples.Expander,org.apache.commons.compress.archivers.examples.Expander.toPath(File),Has_Method
org.apache.commons.compress.archivers.examples.Expander$ArchiveEntryBiConsumer,"org.apache.commons.compress.archivers.examples.Expander$ArchiveEntryBiConsumer.accept(ArchiveEntry,OutputStream)",Has_Method
org.apache.commons.compress.archivers.examples.Expander$ArchiveEntrySupplier,org.apache.commons.compress.archivers.examples.Expander$ArchiveEntrySupplier.get(),Has_Method
org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter,org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter.close(),Has_Method
org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter,org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter.track(Closeable),Has_Method
org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter,org.apache.commons.compress.archivers.examples.CloseableConsumerAdapter.<init>(CloseableConsumer),Has_Method
org.apache.commons.compress.archivers.examples.CloseableConsumer,org.apache.commons.compress.archivers.examples.CloseableConsumer.accept(Closeable),Has_Method
org.apache.commons.compress.archivers.examples.Archiver,"org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,File)",Has_Method
org.apache.commons.compress.archivers.examples.Archiver,"org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path)",Has_Method
org.apache.commons.compress.archivers.examples.Archiver,"org.apache.commons.compress.archivers.examples.Archiver.create(ArchiveOutputStream,Path,EnumSet,LinkOption[])",Has_Method
org.apache.commons.compress.archivers.examples.Archiver,"org.apache.commons.compress.archivers.examples.Archiver.create(SevenZOutputFile,File)",Has_Method
org.apache.commons.compress.archivers.examples.Archiver,"org.apache.commons.compress.archivers.examples.Archiver.create(SevenZOutputFile,Path)",Has_Method
org.apache.commons.compress.archivers.examples.Archiver,"org.apache.commons.compress.archivers.examples.Archiver.create(String,File,File)",Has_Method
org.apache.commons.compress.archivers.examples.Archiver,"org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File)",Has_Method
org.apache.commons.compress.archivers.examples.Archiver,"org.apache.commons.compress.archivers.examples.Archiver.create(String,OutputStream,File,CloseableConsumer)",Has_Method
org.apache.commons.compress.archivers.examples.Archiver,"org.apache.commons.compress.archivers.examples.Archiver.create(String,Path,Path)",Has_Method
org.apache.commons.compress.archivers.examples.Archiver,"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File)",Has_Method
org.apache.commons.compress.archivers.examples.Archiver,"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,File,CloseableConsumer)",Has_Method
org.apache.commons.compress.archivers.examples.Archiver,"org.apache.commons.compress.archivers.examples.Archiver.create(String,SeekableByteChannel,Path)",Has_Method
org.apache.commons.compress.archivers.examples.Archiver,org.apache.commons.compress.archivers.examples.Archiver.prefersSeekableByteChannel(String),Has_Method
org.apache.commons.compress.archivers.examples.Archiver,org.apache.commons.compress.archivers.examples.Archiver.<init>(),Has_Method
org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor,"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.preVisitDirectory(Path,BasicFileAttributes)",Has_Method
org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor,"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.visit(Path,BasicFileAttributes,boolean)",Has_Method
org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor,"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.visitFile(Path,BasicFileAttributes)",Has_Method
org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor,"org.apache.commons.compress.archivers.examples.Archiver$ArchiverFileVisitor.<init>(ArchiveOutputStream,Path,LinkOption[])",Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveEntry,org.apache.commons.compress.archivers.ar.ArArchiveEntry.equals(Object),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveEntry,org.apache.commons.compress.archivers.ar.ArArchiveEntry.getGroupId(),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveEntry,org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModified(),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveEntry,org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModifiedDate(),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveEntry,org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLength(),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveEntry,org.apache.commons.compress.archivers.ar.ArArchiveEntry.getMode(),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveEntry,org.apache.commons.compress.archivers.ar.ArArchiveEntry.getName(),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveEntry,org.apache.commons.compress.archivers.ar.ArArchiveEntry.getSize(),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveEntry,org.apache.commons.compress.archivers.ar.ArArchiveEntry.getUserId(),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveEntry,org.apache.commons.compress.archivers.ar.ArArchiveEntry.hashCode(),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveEntry,org.apache.commons.compress.archivers.ar.ArArchiveEntry.isDirectory(),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveEntry,"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(File,String)",Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveEntry,"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(Path,String,LinkOption[])",Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveEntry,"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long)",Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveEntry,"org.apache.commons.compress.archivers.ar.ArArchiveEntry.<init>(String,long,int,int,int,long)",Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream,"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.checkLength(String,int,String)",Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream,org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.close(),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream,org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.closeArchiveEntry(),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream,"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(File,String)",Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream,"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])",Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream,org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finish(),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream,"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.pad(int,int,char)",Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream,org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(ArArchiveEntry),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream,org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.setLongFileMode(int),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream,"org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream,org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(String),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream,org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeArchiveHeader(),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream,org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(ArArchiveEntry),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveOutputStream,org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.<init>(OutputStream),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveInputStream,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isBSDLongName(String),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveInputStream,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNUStringTable(String),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveInputStream,"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byte[],int)",Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveInputStream,"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveInputStream,"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,boolean)",Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveInputStream,"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int)",Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveInputStream,"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,int,int,boolean)",Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveInputStream,"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveInputStream,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.close(),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveInputStream,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getBSDLongName(String),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveInputStream,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getExtendedName(int),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveInputStream,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry(),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveInputStream,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextEntry(),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveInputStream,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNULongName(String),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveInputStream,"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveInputStream,"org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveInputStream,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.trackReadBytes(long),Has_Method
org.apache.commons.compress.archivers.ar.ArArchiveInputStream,org.apache.commons.compress.archivers.ar.ArArchiveInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.archivers.EntryStreamOffsets,org.apache.commons.compress.archivers.EntryStreamOffsets.getDataOffset(),Has_Method
org.apache.commons.compress.archivers.EntryStreamOffsets,org.apache.commons.compress.archivers.EntryStreamOffsets.isStreamContiguous(),Has_Method
org.apache.commons.compress.archivers.Lister,"org.apache.commons.compress.archivers.Lister.createArchiveInputStream(String[],InputStream)",Has_Method
org.apache.commons.compress.archivers.Lister,org.apache.commons.compress.archivers.Lister.detectFormat(Path),Has_Method
org.apache.commons.compress.archivers.Lister,org.apache.commons.compress.archivers.Lister.main(String[]),Has_Method
org.apache.commons.compress.archivers.Lister,org.apache.commons.compress.archivers.Lister.usage(),Has_Method
org.apache.commons.compress.archivers.Lister,org.apache.commons.compress.archivers.Lister.go(),Has_Method
org.apache.commons.compress.archivers.Lister,"org.apache.commons.compress.archivers.Lister.list(Path,String[])",Has_Method
org.apache.commons.compress.archivers.Lister,org.apache.commons.compress.archivers.Lister.list7z(Path),Has_Method
org.apache.commons.compress.archivers.Lister,"org.apache.commons.compress.archivers.Lister.listStream(Path,String[])",Has_Method
org.apache.commons.compress.archivers.Lister,org.apache.commons.compress.archivers.Lister.listZipUsingTarFile(Path),Has_Method
org.apache.commons.compress.archivers.Lister,org.apache.commons.compress.archivers.Lister.listZipUsingZipFile(Path),Has_Method
org.apache.commons.compress.archivers.Lister,org.apache.commons.compress.archivers.Lister.println(ArchiveEntry),Has_Method
org.apache.commons.compress.archivers.Lister,org.apache.commons.compress.archivers.Lister.println(String),Has_Method
org.apache.commons.compress.archivers.Lister,org.apache.commons.compress.archivers.Lister.<init>(),Has_Method
org.apache.commons.compress.archivers.Lister,"org.apache.commons.compress.archivers.Lister.<init>(boolean,String[])",Has_Method
org.apache.commons.compress.archivers.arj.MainHeader,org.apache.commons.compress.archivers.arj.MainHeader.toString(),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveEntry,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.equals(Object),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveEntry,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getHostOs(),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveEntry,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getLastModifiedDate(),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveEntry,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getMethod(),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveEntry,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getMode(),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveEntry,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getName(),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveEntry,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getSize(),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveEntry,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getUnixMode(),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveEntry,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.hashCode(),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveEntry,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isDirectory(),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveEntry,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isHostOsUnix(),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveEntry,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.<init>(),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveEntry,org.apache.commons.compress.archivers.arj.ArjArchiveEntry.<init>(LocalFileHeader),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveEntry$HostOs,org.apache.commons.compress.archivers.arj.ArjArchiveEntry$HostOs.<init>(),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream,"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.matches(byte[],int)",Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.canReadEntryData(ArchiveEntry),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.close(),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getArchiveComment(),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getArchiveName(),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry(),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream,"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read16(DataInputStream),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read32(DataInputStream),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read8(DataInputStream),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream,"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(int,DataInputStream,LocalFileHeader)",Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readHeader(),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader(),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader(),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream,"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readRange(InputStream,int)",Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readString(DataInputStream),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream,org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.archivers.arj.ArjArchiveInputStream,"org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.<init>(InputStream,String)",Has_Method
org.apache.commons.compress.archivers.arj.LocalFileHeader,org.apache.commons.compress.archivers.arj.LocalFileHeader.equals(Object),Has_Method
org.apache.commons.compress.archivers.arj.LocalFileHeader,org.apache.commons.compress.archivers.arj.LocalFileHeader.hashCode(),Has_Method
org.apache.commons.compress.archivers.arj.LocalFileHeader,org.apache.commons.compress.archivers.arj.LocalFileHeader.toString(),Has_Method
org.apache.commons.compress.archivers.ArchiveEntry,org.apache.commons.compress.archivers.ArchiveEntry.getLastModifiedDate(),Has_Method
org.apache.commons.compress.archivers.ArchiveEntry,org.apache.commons.compress.archivers.ArchiveEntry.getName(),Has_Method
org.apache.commons.compress.archivers.ArchiveEntry,org.apache.commons.compress.archivers.ArchiveEntry.getSize(),Has_Method
org.apache.commons.compress.archivers.ArchiveEntry,org.apache.commons.compress.archivers.ArchiveEntry.isDirectory(),Has_Method
org.apache.commons.compress.archivers.ArchiveEntry,org.apache.commons.compress.archivers.ArchiveEntry.resolveIn(Path),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byte[],int)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(Map,List)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.available(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.buildSparseInputStreams(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.canReadEntryData(ArchiveEntry),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.consumeRemainderOfLastBlock(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getActuallySkipped(long,long,long)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getCurrentEntry(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getLongNameData(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextEntry(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecord(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecordSize(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isAtEOF(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isDirectory(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isEOFRecord(byte[]),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.mark(int),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.markSupported(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.paxHeaders(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readGlobalPaxHeaders(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readOldGNUSparse(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readRecord(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readSparse(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.reset(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.setAtEOF(boolean),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.setCurrentEntry(TarArchiveEntry),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skip(long),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipRecordPadding(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipSparse(long),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.tryToConsumeSecondEOFRecord(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,int,String,boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,int,String)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveInputStream,"org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(InputStream,String)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeader(Map,String,FileTime)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addFileTimePaxHeaderForBigNumber(Map,String,FileTime,long)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addInstantPaxHeader(Map,String,long,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(Map,String,long,long)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(Map,TarArchiveEntry)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(File,String)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.encodeExtendedPaxHeadersContents(Map),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long,String)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(TarArchiveEntry),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumberWithPosixMessage(String,long,long)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finish(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getBytesWritten(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getCount(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getRecordSize(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.padAsNeeded(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(TarArchiveEntry),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setAddPaxHeadersForNonAsciiNames(boolean),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setBigNumberMode(int),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(int),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.shouldBeReplaced(char),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.stripTo7Bits(String),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.transferModTime(TarArchiveEntry,TarArchiveEntry)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeEOFRecord(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(TarArchiveEntry,String,Map)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(byte[]),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,int,String)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,int,String)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream,"org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(OutputStream,String)",Has_Method
org.apache.commons.compress.archivers.tar.TarFile,"org.apache.commons.compress.archivers.tar.TarFile.applyPaxHeadersToCurrentEntry(Map,List)",Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.buildSparseInputStreams(),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.close(),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.consumeRemainderOfLastBlock(),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.getEntries(),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.getInputStream(TarArchiveEntry),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.getLongNameData(),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.getNextTarEntry(),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.getRecord(),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.isAtEOF(),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.isDirectory(),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.isEOFRecord(ByteBuffer),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.paxHeaders(),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.readGlobalPaxHeaders(),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.readOldGNUSparse(),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.readRecord(),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.repositionForwardBy(long),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.repositionForwardTo(long),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.setAtEOF(boolean),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.skipRecordPadding(),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.throwExceptionIfPositionIsNotInArchive(),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.tryToConsumeSecondEOFRecord(),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[]),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,"org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[],boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarFile,"org.apache.commons.compress.archivers.tar.TarFile.<init>(byte[],String)",Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.<init>(File),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,"org.apache.commons.compress.archivers.tar.TarFile.<init>(File,boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarFile,"org.apache.commons.compress.archivers.tar.TarFile.<init>(File,String)",Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.<init>(Path),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,"org.apache.commons.compress.archivers.tar.TarFile.<init>(Path,boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarFile,"org.apache.commons.compress.archivers.tar.TarFile.<init>(Path,String)",Has_Method
org.apache.commons.compress.archivers.tar.TarFile,org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel),Has_Method
org.apache.commons.compress.archivers.tar.TarFile,"org.apache.commons.compress.archivers.tar.TarFile.<init>(SeekableByteChannel,int,int,String,boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream,"org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.read(long,ByteBuffer)",Has_Method
org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream,"org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.readArchive(long,ByteBuffer)",Has_Method
org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream,"org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream.readSparse(long,ByteBuffer,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream,org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream.read(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream,org.apache.commons.compress.archivers.tar.TarArchiveSparseZeroInputStream.skip(long),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry,org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.getSparseHeaders(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry,org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.isExtended(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry,org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.<init>(byte[]),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveStructSparse,org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.equals(Object),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveStructSparse,org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.getNumbytes(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveStructSparse,org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.getOffset(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveStructSparse,org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.hashCode(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveStructSparse,org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.toString(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveStructSparse,"org.apache.commons.compress.archivers.tar.TarArchiveStructSparse.<init>(long,long)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.fileTimeFromOptionalSeconds(long),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(String,boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseInstantFromDecimalSeconds(String),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.addPaxHeader(String,String)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.clearExtraPaxHeaders(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(Object),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(TarArchiveEntry),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.evaluateType(Map,byte[])",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(byte,int,byte[],int)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.fill(int,int,byte[],int)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse0xData(Map),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse1xData(Map),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillStarSparseData(Map),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getCreationTime(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDataOffset(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMajor(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMinor(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDirectoryEntries(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getExtraPaxHeader(String),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getExtraPaxHeaders(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getFile(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getGroupId(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getGroupName(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastAccessTime(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastModifiedDate(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastModifiedTime(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLinkFlag(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLinkName(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongGroupId(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongUserId(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getMode(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getModTime(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getOrderedSparseHeaders(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getPath(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getRealSize(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSparseHeaders(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getStatusChangeTime(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getUserId(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.getUserName(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.hashCode(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isBlockDevice(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isCharacterDevice(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isCheckSumOK(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDescendent(TarArchiveEntry),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isExtended(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isFIFO(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isFile(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGlobalPaxHeader(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNULongLinkEntry(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNULongNameEntry(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNUSparse(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isInvalidPrefix(byte[]),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.isInvalidXtarTime(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isLink(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isOldGNUSparse(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxGNU1XSparse(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxGNUSparse(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxHeader(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSparse(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isStarSparse(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isStreamContiguous(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSymbolicLink(),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.isXstar(Map,byte[])",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseOctalOrBinary(byte[],int,int,boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[]),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding,boolean,boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(Map,byte[],ZipEncoding,boolean,boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeaderUnwrapped(Map,byte[],ZipEncoding,boolean,boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.processPaxHeader(String,String)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.processPaxHeader(String,String,Map)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.readFileMode(Path,String,LinkOption[])",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.readOsSpecificProperties(Path,LinkOption[])",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setCreationTime(FileTime),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDataOffset(long),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMajor(int),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMinor(int),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(int),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(long),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupName(String),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.setIds(int,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLastAccessTime(FileTime),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLastModifiedTime(FileTime),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLinkName(String),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setMode(int),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(Date),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(FileTime),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(long),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setName(String),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.setNames(String,String)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(long),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSparseHeaders(List),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setStatusChangeTime(FileTime),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(int),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(long),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserName(String),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.updateEntryFromPaxHeaders(Map),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[]),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[],ZipEncoding,boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderOptionalTimeField(FileTime,int,byte[],int)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(boolean),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[]),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(byte[],ZipEncoding,boolean,long)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(File),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(File,String)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Map,byte[],ZipEncoding,boolean,long)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Path),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(Path,String,LinkOption[])",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String),Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,byte)",Has_Method
org.apache.commons.compress.archivers.tar.TarArchiveEntry,"org.apache.commons.compress.archivers.tar.TarArchiveEntry.<init>(String,byte,boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byte[]),Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(long,byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(long,byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(byte[],int,int,boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byte[],int)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,org.apache.commons.compress.archivers.tar.TarUtils.parseFromPAX01SparseHeaders(String),Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,org.apache.commons.compress.archivers.tar.TarUtils.parsePAX01SparseHeaders(String),Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.parsePAX1XSparseHeaders(InputStream,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.parsePaxHeaders(InputStream,List,Map,long)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.parseSparse(byte[],int)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,org.apache.commons.compress.archivers.tar.TarUtils.readLineOfNumberForPax1X(InputStream),Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,"org.apache.commons.compress.archivers.tar.TarUtils.readSparseStructs(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byte[]),Has_Method
org.apache.commons.compress.archivers.tar.TarUtils,org.apache.commons.compress.archivers.tar.TarUtils.<init>(),Has_Method
org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveOutputStream.canWriteEntryData(ArchiveEntry),Has_Method
org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveOutputStream.checkFinished(),Has_Method
org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry(),Has_Method
org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveOutputStream.count(int),Has_Method
org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveOutputStream.count(long),Has_Method
org.apache.commons.compress.archivers.ArchiveOutputStream,"org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(File,String)",Has_Method
org.apache.commons.compress.archivers.ArchiveOutputStream,"org.apache.commons.compress.archivers.ArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])",Has_Method
org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveOutputStream.getBytesWritten(),Has_Method
org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveOutputStream.getCount(),Has_Method
org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(ArchiveEntry),Has_Method
org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveOutputStream.write(int),Has_Method
org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveOutputStream.<init>(),Has_Method
org.apache.commons.compress.archivers.ArchiveOutputStream,org.apache.commons.compress.archivers.ArchiveOutputStream.<init>(OutputStream),Has_Method
org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveInputStream.canReadEntryData(ArchiveEntry),Has_Method
org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveInputStream.count(int),Has_Method
org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveInputStream.count(long),Has_Method
org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveInputStream.forEach(IOConsumer),Has_Method
org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveInputStream.getBytesRead(),Has_Method
org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveInputStream.getCharset(),Has_Method
org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveInputStream.getCount(),Has_Method
org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry(),Has_Method
org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveInputStream.iterator(),Has_Method
org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveInputStream.mark(int),Has_Method
org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveInputStream.markSupported(),Has_Method
org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveInputStream.pushedBackBytes(long),Has_Method
org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveInputStream.read(),Has_Method
org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveInputStream.reset(),Has_Method
org.apache.commons.compress.archivers.ArchiveInputStream,org.apache.commons.compress.archivers.ArchiveInputStream.<init>(),Has_Method
org.apache.commons.compress.archivers.ArchiveInputStream,"org.apache.commons.compress.archivers.ArchiveInputStream.<init>(InputStream,Charset)",Has_Method
org.apache.commons.compress.archivers.ArchiveInputStream,"org.apache.commons.compress.archivers.ArchiveInputStream.<init>(InputStream,String)",Has_Method
org.apache.commons.compress.archivers.ArchiveInputStream$ArchiveEntryIOIterator,org.apache.commons.compress.archivers.ArchiveInputStream$ArchiveEntryIOIterator.hasNext(),Has_Method
org.apache.commons.compress.archivers.ArchiveInputStream$ArchiveEntryIOIterator,org.apache.commons.compress.archivers.ArchiveInputStream$ArchiveEntryIOIterator.unwrap(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.close(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(File,String)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(Path,String,LinkOption[])",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.encode(String),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.pad(int),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(CpioArchiveEntry),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(long,int,boolean)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeCString(byte[]),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(CpioArchiveEntry),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(CpioArchiveEntry),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(CpioArchiveEntry),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(CpioArchiveEntry,boolean)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,short,int,String)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream,"org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(OutputStream,String)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byte[],int)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.available(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.close(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closeEntry(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.ensureOpen(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextEntry(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readAsciiLong(int,int)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readBinaryLong(int,boolean)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readCString(int),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(byte[],int,int)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(boolean),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(boolean),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readRange(int),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(int),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(long),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skipRemainderOfLastBlock(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,int)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,int,String)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream,"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(InputStream,String)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioUtil,"org.apache.commons.compress.archivers.cpio.CpioUtil.byteArray2long(byte[],boolean)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioUtil,org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long),Has_Method
org.apache.commons.compress.archivers.cpio.CpioUtil,"org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(long,int,boolean)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkNewFormat(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkOldFormat(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.equals(Object),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getAlignmentBoundary(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getChksum(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDataPadCount(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDevice(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMaj(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMin(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getFormat(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getGID(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(Charset),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount(long),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderSize(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getInode(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getLastModifiedDate(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getMode(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getName(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getNumberOfLinks(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDevice(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMaj(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMin(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getSize(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getTime(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getUID(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.hashCode(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isBlockDevice(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isCharacterDevice(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isDirectory(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isNetwork(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isPipe(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isRegularFile(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isSocket(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isSymbolicLink(),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setChksum(long),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDevice(long),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMaj(long),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMin(long),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setGID(long),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setInode(long),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setMode(long),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setName(String),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setNumberOfLinks(long),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDevice(long),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMaj(long),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMin(long),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setSize(long),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(FileTime),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(long),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setUID(long),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(File,String)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(Path,String,LinkOption[])",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,File,String)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,Path,String,LinkOption[])",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,String)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(short,String,long)",Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(String),Has_Method
org.apache.commons.compress.archivers.cpio.CpioArchiveEntry,"org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.<init>(String,long)",Has_Method
org.apache.commons.compress.java.util.jar.Pack200,"org.apache.commons.compress.java.util.jar.Pack200.newInstance(String,String)",Has_Method
org.apache.commons.compress.java.util.jar.Pack200,org.apache.commons.compress.java.util.jar.Pack200.newPacker(),Has_Method
org.apache.commons.compress.java.util.jar.Pack200,org.apache.commons.compress.java.util.jar.Pack200.newUnpacker(),Has_Method
org.apache.commons.compress.java.util.jar.Pack200,org.apache.commons.compress.java.util.jar.Pack200.<init>(),Has_Method
org.apache.commons.compress.java.util.jar.Pack200$Packer,org.apache.commons.compress.java.util.jar.Pack200$Packer.addPropertyChangeListener(PropertyChangeListener),Has_Method
org.apache.commons.compress.java.util.jar.Pack200$Packer,"org.apache.commons.compress.java.util.jar.Pack200$Packer.pack(JarFile,OutputStream)",Has_Method
org.apache.commons.compress.java.util.jar.Pack200$Packer,"org.apache.commons.compress.java.util.jar.Pack200$Packer.pack(JarInputStream,OutputStream)",Has_Method
org.apache.commons.compress.java.util.jar.Pack200$Packer,org.apache.commons.compress.java.util.jar.Pack200$Packer.properties(),Has_Method
org.apache.commons.compress.java.util.jar.Pack200$Packer,org.apache.commons.compress.java.util.jar.Pack200$Packer.removePropertyChangeListener(PropertyChangeListener),Has_Method
org.apache.commons.compress.java.util.jar.Pack200$Unpacker,org.apache.commons.compress.java.util.jar.Pack200$Unpacker.addPropertyChangeListener(PropertyChangeListener),Has_Method
org.apache.commons.compress.java.util.jar.Pack200$Unpacker,org.apache.commons.compress.java.util.jar.Pack200$Unpacker.properties(),Has_Method
org.apache.commons.compress.java.util.jar.Pack200$Unpacker,org.apache.commons.compress.java.util.jar.Pack200$Unpacker.removePropertyChangeListener(PropertyChangeListener),Has_Method
org.apache.commons.compress.java.util.jar.Pack200$Unpacker,"org.apache.commons.compress.java.util.jar.Pack200$Unpacker.unpack(File,JarOutputStream)",Has_Method
org.apache.commons.compress.java.util.jar.Pack200$Unpacker,"org.apache.commons.compress.java.util.jar.Pack200$Unpacker.unpack(InputStream,JarOutputStream)",Has_Method
org.apache.commons.compress.utils.CRC32VerifyingInputStream,"org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,int)",Has_Method
org.apache.commons.compress.utils.CRC32VerifyingInputStream,"org.apache.commons.compress.utils.CRC32VerifyingInputStream.<init>(InputStream,long,long)",Has_Method
org.apache.commons.compress.utils.IOUtils,org.apache.commons.compress.utils.IOUtils.closeQuietly(Closeable),Has_Method
org.apache.commons.compress.utils.IOUtils,"org.apache.commons.compress.utils.IOUtils.copy(File,OutputStream)",Has_Method
org.apache.commons.compress.utils.IOUtils,"org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream)",Has_Method
org.apache.commons.compress.utils.IOUtils,"org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream,int)",Has_Method
org.apache.commons.compress.utils.IOUtils,"org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream)",Has_Method
org.apache.commons.compress.utils.IOUtils,"org.apache.commons.compress.utils.IOUtils.copyRange(InputStream,long,OutputStream,int)",Has_Method
org.apache.commons.compress.utils.IOUtils,"org.apache.commons.compress.utils.IOUtils.read(File,byte[])",Has_Method
org.apache.commons.compress.utils.IOUtils,"org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[])",Has_Method
org.apache.commons.compress.utils.IOUtils,"org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int)",Has_Method
org.apache.commons.compress.utils.IOUtils,"org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer)",Has_Method
org.apache.commons.compress.utils.IOUtils,"org.apache.commons.compress.utils.IOUtils.readRange(InputStream,int)",Has_Method
org.apache.commons.compress.utils.IOUtils,"org.apache.commons.compress.utils.IOUtils.readRange(ReadableByteChannel,int)",Has_Method
org.apache.commons.compress.utils.IOUtils,"org.apache.commons.compress.utils.IOUtils.skip(InputStream,long)",Has_Method
org.apache.commons.compress.utils.IOUtils,org.apache.commons.compress.utils.IOUtils.toByteArray(InputStream),Has_Method
org.apache.commons.compress.utils.IOUtils,org.apache.commons.compress.utils.IOUtils.<init>(),Has_Method
org.apache.commons.compress.utils.Sets,org.apache.commons.compress.utils.Sets.newHashSet(Object[]),Has_Method
org.apache.commons.compress.utils.Sets,org.apache.commons.compress.utils.Sets.<init>(),Has_Method
org.apache.commons.compress.utils.ByteUtils,org.apache.commons.compress.utils.ByteUtils.checkReadLength(int),Has_Method
org.apache.commons.compress.utils.ByteUtils,org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[]),Has_Method
org.apache.commons.compress.utils.ByteUtils,"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(byte[],int,int)",Has_Method
org.apache.commons.compress.utils.ByteUtils,"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(ByteSupplier,int)",Has_Method
org.apache.commons.compress.utils.ByteUtils,"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(DataInput,int)",Has_Method
org.apache.commons.compress.utils.ByteUtils,"org.apache.commons.compress.utils.ByteUtils.fromLittleEndian(InputStream,int)",Has_Method
org.apache.commons.compress.utils.ByteUtils,"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(byte[],long,int,int)",Has_Method
org.apache.commons.compress.utils.ByteUtils,"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(ByteConsumer,long,int)",Has_Method
org.apache.commons.compress.utils.ByteUtils,"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(DataOutput,long,int)",Has_Method
org.apache.commons.compress.utils.ByteUtils,"org.apache.commons.compress.utils.ByteUtils.toLittleEndian(OutputStream,long,int)",Has_Method
org.apache.commons.compress.utils.ByteUtils,org.apache.commons.compress.utils.ByteUtils.<init>(),Has_Method
org.apache.commons.compress.utils.ByteUtils$ByteConsumer,org.apache.commons.compress.utils.ByteUtils$ByteConsumer.accept(int),Has_Method
org.apache.commons.compress.utils.ByteUtils$ByteSupplier,org.apache.commons.compress.utils.ByteUtils$ByteSupplier.getAsByte(),Has_Method
org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier,org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier.getAsByte(),Has_Method
org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier,org.apache.commons.compress.utils.ByteUtils$InputStreamByteSupplier.<init>(InputStream),Has_Method
org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer,org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer.accept(int),Has_Method
org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer,org.apache.commons.compress.utils.ByteUtils$OutputStreamByteConsumer.<init>(OutputStream),Has_Method
org.apache.commons.compress.utils.Iterators,"org.apache.commons.compress.utils.Iterators.addAll(Collection,Iterator)",Has_Method
org.apache.commons.compress.utils.Iterators,org.apache.commons.compress.utils.Iterators.<init>(),Has_Method
org.apache.commons.compress.utils.ArchiveUtils,"org.apache.commons.compress.utils.ArchiveUtils.isArrayZero(byte[],int)",Has_Method
org.apache.commons.compress.utils.ArchiveUtils,"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[])",Has_Method
org.apache.commons.compress.utils.ArchiveUtils,"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[],boolean)",Has_Method
org.apache.commons.compress.utils.ArchiveUtils,"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int)",Has_Method
org.apache.commons.compress.utils.ArchiveUtils,"org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean)",Has_Method
org.apache.commons.compress.utils.ArchiveUtils,"org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byte[],int,int,byte[],int,int)",Has_Method
org.apache.commons.compress.utils.ArchiveUtils,"org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[])",Has_Method
org.apache.commons.compress.utils.ArchiveUtils,"org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int)",Has_Method
org.apache.commons.compress.utils.ArchiveUtils,org.apache.commons.compress.utils.ArchiveUtils.sanitize(String),Has_Method
org.apache.commons.compress.utils.ArchiveUtils,org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(String),Has_Method
org.apache.commons.compress.utils.ArchiveUtils,org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[]),Has_Method
org.apache.commons.compress.utils.ArchiveUtils,"org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[],int,int)",Has_Method
org.apache.commons.compress.utils.ArchiveUtils,org.apache.commons.compress.utils.ArchiveUtils.toString(ArchiveEntry),Has_Method
org.apache.commons.compress.utils.ArchiveUtils,org.apache.commons.compress.utils.ArchiveUtils.<init>(),Has_Method
org.apache.commons.compress.utils.OsgiUtils,org.apache.commons.compress.utils.OsgiUtils.isBundleReference(Class),Has_Method
org.apache.commons.compress.utils.OsgiUtils,org.apache.commons.compress.utils.OsgiUtils.isRunningInOsgiEnvironment(),Has_Method
org.apache.commons.compress.utils.Charsets,org.apache.commons.compress.utils.Charsets.toCharset(Charset),Has_Method
org.apache.commons.compress.utils.Charsets,org.apache.commons.compress.utils.Charsets.toCharset(String),Has_Method
org.apache.commons.compress.utils.ExactMath,"org.apache.commons.compress.utils.ExactMath.add(int,long)",Has_Method
org.apache.commons.compress.utils.ExactMath,org.apache.commons.compress.utils.ExactMath.<init>(),Has_Method
org.apache.commons.compress.utils.BoundedArchiveInputStream,org.apache.commons.compress.utils.BoundedArchiveInputStream.read(),Has_Method
org.apache.commons.compress.utils.BoundedArchiveInputStream,"org.apache.commons.compress.utils.BoundedArchiveInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.utils.BoundedArchiveInputStream,"org.apache.commons.compress.utils.BoundedArchiveInputStream.read(long,ByteBuffer)",Has_Method
org.apache.commons.compress.utils.BoundedArchiveInputStream,"org.apache.commons.compress.utils.BoundedArchiveInputStream.<init>(long,long)",Has_Method
org.apache.commons.compress.utils.Lists,org.apache.commons.compress.utils.Lists.newArrayList(),Has_Method
org.apache.commons.compress.utils.Lists,org.apache.commons.compress.utils.Lists.newArrayList(Iterator),Has_Method
org.apache.commons.compress.utils.Lists,org.apache.commons.compress.utils.Lists.<init>(),Has_Method
org.apache.commons.compress.utils.ChecksumVerifyingInputStream,org.apache.commons.compress.utils.ChecksumVerifyingInputStream.getBytesRemaining(),Has_Method
org.apache.commons.compress.utils.ChecksumVerifyingInputStream,org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(),Has_Method
org.apache.commons.compress.utils.ChecksumVerifyingInputStream,"org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.utils.ChecksumVerifyingInputStream,org.apache.commons.compress.utils.ChecksumVerifyingInputStream.verify(),Has_Method
org.apache.commons.compress.utils.ChecksumVerifyingInputStream,"org.apache.commons.compress.utils.ChecksumVerifyingInputStream.<init>(Checksum,InputStream,long,long)",Has_Method
org.apache.commons.compress.utils.SkipShieldingInputStream,org.apache.commons.compress.utils.SkipShieldingInputStream.skip(long),Has_Method
org.apache.commons.compress.utils.SkipShieldingInputStream,org.apache.commons.compress.utils.SkipShieldingInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.utils.ChecksumCalculatingInputStream,org.apache.commons.compress.utils.ChecksumCalculatingInputStream.getValue(),Has_Method
org.apache.commons.compress.utils.ChecksumCalculatingInputStream,"org.apache.commons.compress.utils.ChecksumCalculatingInputStream.<init>(Checksum,InputStream)",Has_Method
org.apache.commons.compress.utils.BoundedInputStream,org.apache.commons.compress.utils.BoundedInputStream.getBytesRemaining(),Has_Method
org.apache.commons.compress.utils.BoundedInputStream,"org.apache.commons.compress.utils.BoundedInputStream.<init>(InputStream,long)",Has_Method
org.apache.commons.compress.utils.FlushShieldFilterOutputStream,org.apache.commons.compress.utils.FlushShieldFilterOutputStream.flush(),Has_Method
org.apache.commons.compress.utils.FlushShieldFilterOutputStream,org.apache.commons.compress.utils.FlushShieldFilterOutputStream.<init>(OutputStream),Has_Method
org.apache.commons.compress.utils.FixedLengthBlockOutputStream,org.apache.commons.compress.utils.FixedLengthBlockOutputStream.close(),Has_Method
org.apache.commons.compress.utils.FixedLengthBlockOutputStream,org.apache.commons.compress.utils.FixedLengthBlockOutputStream.flushBlock(),Has_Method
org.apache.commons.compress.utils.FixedLengthBlockOutputStream,org.apache.commons.compress.utils.FixedLengthBlockOutputStream.isOpen(),Has_Method
org.apache.commons.compress.utils.FixedLengthBlockOutputStream,org.apache.commons.compress.utils.FixedLengthBlockOutputStream.maybeFlush(),Has_Method
org.apache.commons.compress.utils.FixedLengthBlockOutputStream,org.apache.commons.compress.utils.FixedLengthBlockOutputStream.padBlock(),Has_Method
org.apache.commons.compress.utils.FixedLengthBlockOutputStream,"org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.utils.FixedLengthBlockOutputStream,org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(ByteBuffer),Has_Method
org.apache.commons.compress.utils.FixedLengthBlockOutputStream,org.apache.commons.compress.utils.FixedLengthBlockOutputStream.write(int),Has_Method
org.apache.commons.compress.utils.FixedLengthBlockOutputStream,org.apache.commons.compress.utils.FixedLengthBlockOutputStream.writeBlock(),Has_Method
org.apache.commons.compress.utils.FixedLengthBlockOutputStream,"org.apache.commons.compress.utils.FixedLengthBlockOutputStream.<init>(OutputStream,int)",Has_Method
org.apache.commons.compress.utils.FixedLengthBlockOutputStream,"org.apache.commons.compress.utils.FixedLengthBlockOutputStream.<init>(WritableByteChannel,int)",Has_Method
org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel,org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.close(),Has_Method
org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel,org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.isOpen(),Has_Method
org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel,org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.write(ByteBuffer),Has_Method
org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel,org.apache.commons.compress.utils.FixedLengthBlockOutputStream$BufferAtATimeOutputChannel.<init>(OutputStream),Has_Method
org.apache.commons.compress.utils.BitInputStream,org.apache.commons.compress.utils.BitInputStream.alignWithByteBoundary(),Has_Method
org.apache.commons.compress.utils.BitInputStream,org.apache.commons.compress.utils.BitInputStream.bitsAvailable(),Has_Method
org.apache.commons.compress.utils.BitInputStream,org.apache.commons.compress.utils.BitInputStream.bitsCached(),Has_Method
org.apache.commons.compress.utils.BitInputStream,org.apache.commons.compress.utils.BitInputStream.clearBitCache(),Has_Method
org.apache.commons.compress.utils.BitInputStream,org.apache.commons.compress.utils.BitInputStream.close(),Has_Method
org.apache.commons.compress.utils.BitInputStream,org.apache.commons.compress.utils.BitInputStream.ensureCache(int),Has_Method
org.apache.commons.compress.utils.BitInputStream,org.apache.commons.compress.utils.BitInputStream.getBytesRead(),Has_Method
org.apache.commons.compress.utils.BitInputStream,org.apache.commons.compress.utils.BitInputStream.processBitsGreater57(int),Has_Method
org.apache.commons.compress.utils.BitInputStream,org.apache.commons.compress.utils.BitInputStream.readBits(int),Has_Method
org.apache.commons.compress.utils.BitInputStream,org.apache.commons.compress.utils.BitInputStream.readCachedBits(int),Has_Method
org.apache.commons.compress.utils.BitInputStream,"org.apache.commons.compress.utils.BitInputStream.<init>(InputStream,ByteOrder)",Has_Method
org.apache.commons.compress.utils.TimeUtils,org.apache.commons.compress.utils.TimeUtils.isUnixTime(FileTime),Has_Method
org.apache.commons.compress.utils.TimeUtils,org.apache.commons.compress.utils.TimeUtils.isUnixTime(long),Has_Method
org.apache.commons.compress.utils.TimeUtils,org.apache.commons.compress.utils.TimeUtils.ntfsTimeToDate(long),Has_Method
org.apache.commons.compress.utils.TimeUtils,org.apache.commons.compress.utils.TimeUtils.ntfsTimeToFileTime(long),Has_Method
org.apache.commons.compress.utils.TimeUtils,org.apache.commons.compress.utils.TimeUtils.toDate(FileTime),Has_Method
org.apache.commons.compress.utils.TimeUtils,org.apache.commons.compress.utils.TimeUtils.toFileTime(Date),Has_Method
org.apache.commons.compress.utils.TimeUtils,org.apache.commons.compress.utils.TimeUtils.toNtfsTime(Date),Has_Method
org.apache.commons.compress.utils.TimeUtils,org.apache.commons.compress.utils.TimeUtils.toNtfsTime(FileTime),Has_Method
org.apache.commons.compress.utils.TimeUtils,org.apache.commons.compress.utils.TimeUtils.toNtfsTime(long),Has_Method
org.apache.commons.compress.utils.TimeUtils,org.apache.commons.compress.utils.TimeUtils.toUnixTime(FileTime),Has_Method
org.apache.commons.compress.utils.TimeUtils,org.apache.commons.compress.utils.TimeUtils.truncateToHundredNanos(FileTime),Has_Method
org.apache.commons.compress.utils.TimeUtils,org.apache.commons.compress.utils.TimeUtils.unixTimeToFileTime(long),Has_Method
org.apache.commons.compress.utils.TimeUtils,org.apache.commons.compress.utils.TimeUtils.<init>(),Has_Method
org.apache.commons.compress.utils.CountingOutputStream,org.apache.commons.compress.utils.CountingOutputStream.count(long),Has_Method
org.apache.commons.compress.utils.CountingOutputStream,org.apache.commons.compress.utils.CountingOutputStream.getBytesWritten(),Has_Method
org.apache.commons.compress.utils.CountingOutputStream,org.apache.commons.compress.utils.CountingOutputStream.write(byte[]),Has_Method
org.apache.commons.compress.utils.CountingOutputStream,"org.apache.commons.compress.utils.CountingOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.utils.CountingOutputStream,org.apache.commons.compress.utils.CountingOutputStream.write(int),Has_Method
org.apache.commons.compress.utils.CountingOutputStream,org.apache.commons.compress.utils.CountingOutputStream.<init>(OutputStream),Has_Method
org.apache.commons.compress.utils.ParsingUtils,org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String),Has_Method
org.apache.commons.compress.utils.ParsingUtils,"org.apache.commons.compress.utils.ParsingUtils.parseIntValue(String,int)",Has_Method
org.apache.commons.compress.utils.ParsingUtils,org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String),Has_Method
org.apache.commons.compress.utils.ParsingUtils,"org.apache.commons.compress.utils.ParsingUtils.parseLongValue(String,int)",Has_Method
org.apache.commons.compress.utils.ParsingUtils,org.apache.commons.compress.utils.ParsingUtils.<init>(),Has_Method
org.apache.commons.compress.utils.CountingInputStream,org.apache.commons.compress.utils.CountingInputStream.count(long),Has_Method
org.apache.commons.compress.utils.CountingInputStream,org.apache.commons.compress.utils.CountingInputStream.getBytesRead(),Has_Method
org.apache.commons.compress.utils.CountingInputStream,org.apache.commons.compress.utils.CountingInputStream.read(),Has_Method
org.apache.commons.compress.utils.CountingInputStream,org.apache.commons.compress.utils.CountingInputStream.read(byte[]),Has_Method
org.apache.commons.compress.utils.CountingInputStream,"org.apache.commons.compress.utils.CountingInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.utils.CountingInputStream,org.apache.commons.compress.utils.CountingInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.utils.SeekableInMemoryByteChannel,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.array(),Has_Method
org.apache.commons.compress.utils.SeekableInMemoryByteChannel,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.close(),Has_Method
org.apache.commons.compress.utils.SeekableInMemoryByteChannel,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.ensureOpen(),Has_Method
org.apache.commons.compress.utils.SeekableInMemoryByteChannel,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.isOpen(),Has_Method
org.apache.commons.compress.utils.SeekableInMemoryByteChannel,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(),Has_Method
org.apache.commons.compress.utils.SeekableInMemoryByteChannel,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long),Has_Method
org.apache.commons.compress.utils.SeekableInMemoryByteChannel,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer),Has_Method
org.apache.commons.compress.utils.SeekableInMemoryByteChannel,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(int),Has_Method
org.apache.commons.compress.utils.SeekableInMemoryByteChannel,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size(),Has_Method
org.apache.commons.compress.utils.SeekableInMemoryByteChannel,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long),Has_Method
org.apache.commons.compress.utils.SeekableInMemoryByteChannel,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer),Has_Method
org.apache.commons.compress.utils.SeekableInMemoryByteChannel,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.<init>(),Has_Method
org.apache.commons.compress.utils.SeekableInMemoryByteChannel,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.<init>(byte[]),Has_Method
org.apache.commons.compress.utils.SeekableInMemoryByteChannel,org.apache.commons.compress.utils.SeekableInMemoryByteChannel.<init>(int),Has_Method
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forFiles(File[]),Has_Method
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forPaths(Path[]),Has_Method
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(SeekableByteChannel[]),Has_Method
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.close(),Has_Method
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.isOpen(),Has_Method
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.position(),Has_Method
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.position(long),Has_Method
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel,"org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.position(long,long)",Has_Method
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.read(ByteBuffer),Has_Method
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.size(),Has_Method
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.truncate(long),Has_Method
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.write(ByteBuffer),Has_Method
org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel,org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.<init>(List),Has_Method
org.apache.commons.compress.utils.FileNameUtils,org.apache.commons.compress.utils.FileNameUtils.getBaseName(Path),Has_Method
org.apache.commons.compress.utils.FileNameUtils,org.apache.commons.compress.utils.FileNameUtils.getBaseName(String),Has_Method
org.apache.commons.compress.utils.FileNameUtils,org.apache.commons.compress.utils.FileNameUtils.getExtension(Path),Has_Method
org.apache.commons.compress.utils.FileNameUtils,org.apache.commons.compress.utils.FileNameUtils.getExtension(String),Has_Method
org.apache.commons.compress.utils.CloseShieldFilterInputStream,org.apache.commons.compress.utils.CloseShieldFilterInputStream.close(),Has_Method
org.apache.commons.compress.utils.CloseShieldFilterInputStream,org.apache.commons.compress.utils.CloseShieldFilterInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream,"org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.read(long,ByteBuffer)",Has_Method
org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream,"org.apache.commons.compress.utils.BoundedSeekableByteChannelInputStream.<init>(long,long,SeekableByteChannel)",Has_Method
org.apache.commons.compress.utils.ServiceLoaderIterator,org.apache.commons.compress.utils.ServiceLoaderIterator.hasNext(),Has_Method
org.apache.commons.compress.utils.ServiceLoaderIterator,org.apache.commons.compress.utils.ServiceLoaderIterator.next(),Has_Method
org.apache.commons.compress.utils.ServiceLoaderIterator,org.apache.commons.compress.utils.ServiceLoaderIterator.remove(),Has_Method
org.apache.commons.compress.utils.ServiceLoaderIterator,org.apache.commons.compress.utils.ServiceLoaderIterator.<init>(Class),Has_Method
org.apache.commons.compress.utils.ServiceLoaderIterator,"org.apache.commons.compress.utils.ServiceLoaderIterator.<init>(Class,ClassLoader)",Has_Method
org.apache.commons.compress.utils.InputStreamStatistics,org.apache.commons.compress.utils.InputStreamStatistics.getCompressedCount(),Has_Method
org.apache.commons.compress.utils.InputStreamStatistics,org.apache.commons.compress.utils.InputStreamStatistics.getUncompressedCount(),Has_Method
org.apache.commons.compress.CompressFilterOutputStream,"org.apache.commons.compress.CompressFilterOutputStream.write(OutputStream,String,Charset)",Has_Method
org.apache.commons.compress.CompressFilterOutputStream,org.apache.commons.compress.CompressFilterOutputStream.checkOpen(),Has_Method
org.apache.commons.compress.CompressFilterOutputStream,org.apache.commons.compress.CompressFilterOutputStream.close(),Has_Method
org.apache.commons.compress.CompressFilterOutputStream,org.apache.commons.compress.CompressFilterOutputStream.finish(),Has_Method
org.apache.commons.compress.CompressFilterOutputStream,org.apache.commons.compress.CompressFilterOutputStream.isClosed(),Has_Method
org.apache.commons.compress.CompressFilterOutputStream,org.apache.commons.compress.CompressFilterOutputStream.isFinished(),Has_Method
org.apache.commons.compress.CompressFilterOutputStream,org.apache.commons.compress.CompressFilterOutputStream.out(),Has_Method
org.apache.commons.compress.CompressFilterOutputStream,org.apache.commons.compress.CompressFilterOutputStream.write(File),Has_Method
org.apache.commons.compress.CompressFilterOutputStream,org.apache.commons.compress.CompressFilterOutputStream.write(Path),Has_Method
org.apache.commons.compress.CompressFilterOutputStream,org.apache.commons.compress.CompressFilterOutputStream.writeUsAscii(String),Has_Method
org.apache.commons.compress.CompressFilterOutputStream,org.apache.commons.compress.CompressFilterOutputStream.writeUsAsciiRaw(String),Has_Method
org.apache.commons.compress.CompressFilterOutputStream,org.apache.commons.compress.CompressFilterOutputStream.writeUtf8(String),Has_Method
org.apache.commons.compress.CompressFilterOutputStream,org.apache.commons.compress.CompressFilterOutputStream.<init>(),Has_Method
org.apache.commons.compress.CompressFilterOutputStream,org.apache.commons.compress.CompressFilterOutputStream.<init>(OutputStream),Has_Method
org.apache.commons.compress.compressors.CompressorOutputStream,org.apache.commons.compress.compressors.CompressorOutputStream.<init>(),Has_Method
org.apache.commons.compress.compressors.CompressorOutputStream,org.apache.commons.compress.compressors.CompressorOutputStream.<init>(OutputStream),Has_Method
org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream,org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.available(),Has_Method
org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream,org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.close(),Has_Method
org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream,org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.closeDecoder(),Has_Method
org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream,org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.getCompressedCount(),Has_Method
org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream,org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.read(),Has_Method
org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream,"org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream,org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.<init>(HuffmanDecoder),Has_Method
org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream,org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.buildTree(int[]),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.getCodes(int[]),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder,"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.nextSymbol(BitInputStream,BinaryTreeNode)",Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder,"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.populateDynamicTables(BitInputStream,int[],int[])",Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder,"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.readBits(BitInputStream,int)",Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.available(),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.close(),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.decode(byte[]),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder,"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.decode(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.getBytesRead(),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.readBits(int),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.readDynamicTables(),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.switchToUncompressedState(),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder.<init>(InputStream),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode.leaf(int),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode.left(),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode.right(),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode.<init>(int),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState.available(),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState.hasData(),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState,"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState.read(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState.state(),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.add(byte),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory,"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.add(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.incCounter(int),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory,"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.recordToBuffer(int,int,byte[])",Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.<init>(),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecodingMemory.<init>(int),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.available(),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes,"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.copyFromRunBuffer(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes,"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.decodeNext(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.hasData(),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes,"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.read(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$HuffmanCodes.state(),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState.available(),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState.hasData(),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState,"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState.read(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState.state(),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState.available(),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState.hasData(),Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState,"org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState.read(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState,org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$UncompressedState.state(),Has_Method
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.available(),Has_Method
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.close(),Has_Method
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.getCompressedCount(),Has_Method
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.mark(int),Has_Method
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.markSupported(),Has_Method
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.read(),Has_Method
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.read(byte[]),Has_Method
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream,"org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.reset(),Has_Method
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.skip(long),Has_Method
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.toString(),Has_Method
org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream,org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.compressors.brotli.BrotliUtils,org.apache.commons.compress.compressors.brotli.BrotliUtils.getCachedBrotliAvailability(),Has_Method
org.apache.commons.compress.compressors.brotli.BrotliUtils,org.apache.commons.compress.compressors.brotli.BrotliUtils.internalIsBrotliCompressionAvailable(),Has_Method
org.apache.commons.compress.compressors.brotli.BrotliUtils,org.apache.commons.compress.compressors.brotli.BrotliUtils.isBrotliCompressionAvailable(),Has_Method
org.apache.commons.compress.compressors.brotli.BrotliUtils,org.apache.commons.compress.compressors.brotli.BrotliUtils.setCacheBrotliAvailablity(boolean),Has_Method
org.apache.commons.compress.compressors.brotli.BrotliUtils,org.apache.commons.compress.compressors.brotli.BrotliUtils.<init>(),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.initializeBackReference(),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream,"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.readSizeBytes(),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.readSizes(),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream,"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.appendToBlockDependencyBuffer(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.close(),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.finish(),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.flushBlock(),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream,"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.write(int),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.writeFrameDescriptor(),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.writeTrailer(),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.<init>(OutputStream),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream,"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.<init>(OutputStream,Parameters)",Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$BlockSize,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$BlockSize.getIndex(),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$BlockSize,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$BlockSize.getSize(),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.toString(),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters,"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize,boolean,boolean,boolean)",Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters,"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize,boolean,boolean,boolean,Parameters)",Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters,"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream$Parameters.<init>(BlockSize,Parameters)",Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.isSkippableFrameSignature(byte[]),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream,"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.matches(byte[],int)",Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream,"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.appendToBlockDependencyBuffer(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.close(),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.getCompressedCount(),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.init(boolean),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.maybeFinishCurrentBlock(),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.nextBlock(),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.read(),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream,"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.readFrameDescriptor(),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream,"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.readOnce(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.readOneByte(),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.readSignature(boolean),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.skipSkippableFrame(byte[]),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream,"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.verifyChecksum(XXHash32,String)",Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.verifyContentChecksum(),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream,org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream,"org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.<init>(InputStream,boolean)",Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder(),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.addBackReference(BackReference),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.addLiteralBlock(LiteralBlock),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.clearUnusedBlocks(),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.clearUnusedBlocksAndPairs(),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.clearUnusedPairs(),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.close(),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.expand(int,int)",Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.expandFromList(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.finish(),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.prefill(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.recordBackReference(BackReference),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.recordLiteral(byte[]),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.rewriteLastPairs(),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.write(int),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.writeBlocksAndReturnUnfinishedPair(int),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.writeFinalLiteralBlock(),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.writeWritablePairs(int),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.<init>(OutputStream),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream,"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.<init>(OutputStream,Parameters)",Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair,"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.lengths(int,int)",Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair,"org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.writeLength(int,OutputStream)",Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.addLiteral(LiteralBlock),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.backReferenceLength(),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.canBeWritten(int),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.hasBackReference(),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.hasBeenWritten(),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.length(),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.literalLength(),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.prependLiteral(byte[]),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.setBackReference(BackReference),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.splitWithNewBackReferenceLengthOf(int),Has_Method
org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair,org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream$Pair.writeTo(OutputStream),Has_Method
org.apache.commons.compress.compressors.lz4.XXHash32,org.apache.commons.compress.compressors.lz4.XXHash32.<init>(),Has_Method
org.apache.commons.compress.compressors.lz4.XXHash32,org.apache.commons.compress.compressors.lz4.XXHash32.<init>(int),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.equals(Object),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.getBufferSize(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.getComment(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.getCompressionLevel(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.getDeflateStrategy(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.getExtraField(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.getFilename(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.getFileName(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.getFileNameCharset(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.getHeaderCRC(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.getModificationInstant(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.getModificationTime(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.getOperatingSystem(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.getOS(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.getTrailerCrc(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.getTrailerISize(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.hashCode(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.requireNonNulByte(String),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.setBufferSize(int),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.setComment(String),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.setCompressionLevel(int),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.setDeflateStrategy(int),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.setExtraField(ExtraField),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.setFilename(String),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.setFileName(String),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.setFileNameCharset(Charset),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.setHeaderCRC(boolean),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationInstant(Instant),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationTime(long),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.setOperatingSystem(int),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.setOS(OS),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.setTrailerCrc(long),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.setTrailerISize(long),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters,org.apache.commons.compress.compressors.gzip.GzipParameters.toString(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters$OS,org.apache.commons.compress.compressors.gzip.GzipParameters$OS.from(int),Has_Method
org.apache.commons.compress.compressors.gzip.GzipParameters$OS,org.apache.commons.compress.compressors.gzip.GzipParameters$OS.type(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipUtils,org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFilename(String),Has_Method
org.apache.commons.compress.compressors.gzip.GzipUtils,org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFileName(String),Has_Method
org.apache.commons.compress.compressors.gzip.GzipUtils,org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFilename(String),Has_Method
org.apache.commons.compress.compressors.gzip.GzipUtils,org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFileName(String),Has_Method
org.apache.commons.compress.compressors.gzip.GzipUtils,org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFilename(String),Has_Method
org.apache.commons.compress.compressors.gzip.GzipUtils,org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFileName(String),Has_Method
org.apache.commons.compress.compressors.gzip.GzipUtils,org.apache.commons.compress.compressors.gzip.GzipUtils.<init>(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream,org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.close(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream,org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflate(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream,org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.finish(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream,org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[]),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream,"org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream,org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(int),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream,"org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeC(String,Charset)",Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream,org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeMemberHeader(GzipParameters),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream,org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeMemberTrailer(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream,org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.<init>(OutputStream),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream,"org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.<init>(OutputStream,GzipParameters)",Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.builder(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream,"org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(byte[],int)",Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readToNull(DataInput),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.close(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.getCompressedCount(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.getMetaData(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(boolean),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream,"org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>(Builder),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream,"org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.<init>(InputStream,boolean)",Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.get(),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.setDecompressConcatenated(boolean),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.setFileNameCharset(Charset),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.setOnMemberEnd(IOConsumer),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.setOnMemberStart(IOConsumer),Has_Method
org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder,org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream$Builder.<init>(),Has_Method
org.apache.commons.compress.compressors.gzip.ExtraField,org.apache.commons.compress.compressors.gzip.ExtraField.fromBytes(byte[]),Has_Method
org.apache.commons.compress.compressors.gzip.ExtraField,"org.apache.commons.compress.compressors.gzip.ExtraField.addSubField(String,byte[])",Has_Method
org.apache.commons.compress.compressors.gzip.ExtraField,org.apache.commons.compress.compressors.gzip.ExtraField.clear(),Has_Method
org.apache.commons.compress.compressors.gzip.ExtraField,org.apache.commons.compress.compressors.gzip.ExtraField.equals(Object),Has_Method
org.apache.commons.compress.compressors.gzip.ExtraField,org.apache.commons.compress.compressors.gzip.ExtraField.findFirstSubField(String),Has_Method
org.apache.commons.compress.compressors.gzip.ExtraField,org.apache.commons.compress.compressors.gzip.ExtraField.getEncodedSize(),Has_Method
org.apache.commons.compress.compressors.gzip.ExtraField,org.apache.commons.compress.compressors.gzip.ExtraField.getSubField(int),Has_Method
org.apache.commons.compress.compressors.gzip.ExtraField,org.apache.commons.compress.compressors.gzip.ExtraField.hashCode(),Has_Method
org.apache.commons.compress.compressors.gzip.ExtraField,org.apache.commons.compress.compressors.gzip.ExtraField.isEmpty(),Has_Method
org.apache.commons.compress.compressors.gzip.ExtraField,org.apache.commons.compress.compressors.gzip.ExtraField.iterator(),Has_Method
org.apache.commons.compress.compressors.gzip.ExtraField,org.apache.commons.compress.compressors.gzip.ExtraField.size(),Has_Method
org.apache.commons.compress.compressors.gzip.ExtraField,org.apache.commons.compress.compressors.gzip.ExtraField.toByteArray(),Has_Method
org.apache.commons.compress.compressors.gzip.ExtraField,org.apache.commons.compress.compressors.gzip.ExtraField.<init>(),Has_Method
org.apache.commons.compress.compressors.gzip.ExtraField$SubField,org.apache.commons.compress.compressors.gzip.ExtraField$SubField.equals(Object),Has_Method
org.apache.commons.compress.compressors.gzip.ExtraField$SubField,org.apache.commons.compress.compressors.gzip.ExtraField$SubField.getId(),Has_Method
org.apache.commons.compress.compressors.gzip.ExtraField$SubField,org.apache.commons.compress.compressors.gzip.ExtraField$SubField.getPayload(),Has_Method
org.apache.commons.compress.compressors.gzip.ExtraField$SubField,org.apache.commons.compress.compressors.gzip.ExtraField$SubField.hashCode(),Has_Method
org.apache.commons.compress.compressors.gzip.ExtraField$SubField,"org.apache.commons.compress.compressors.gzip.ExtraField$SubField.<init>(byte,byte,byte[])",Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,"org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte)",Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,"org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte,int)",Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,org.apache.commons.compress.compressors.lzw.LZWInputStream.addRepeatOfPreviousCode(),Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,org.apache.commons.compress.compressors.lzw.LZWInputStream.close(),Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,org.apache.commons.compress.compressors.lzw.LZWInputStream.decompressNextSymbol(),Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,"org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(int,boolean)",Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,org.apache.commons.compress.compressors.lzw.LZWInputStream.getClearCode(),Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,org.apache.commons.compress.compressors.lzw.LZWInputStream.getCodeSize(),Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,org.apache.commons.compress.compressors.lzw.LZWInputStream.getCompressedCount(),Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,org.apache.commons.compress.compressors.lzw.LZWInputStream.getPrefix(int),Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,org.apache.commons.compress.compressors.lzw.LZWInputStream.getPrefixesLength(),Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,org.apache.commons.compress.compressors.lzw.LZWInputStream.getTableSize(),Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,org.apache.commons.compress.compressors.lzw.LZWInputStream.incrementCodeSize(),Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(int),Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,"org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(int,int)",Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,org.apache.commons.compress.compressors.lzw.LZWInputStream.read(),Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,"org.apache.commons.compress.compressors.lzw.LZWInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,"org.apache.commons.compress.compressors.lzw.LZWInputStream.readFromStack(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,org.apache.commons.compress.compressors.lzw.LZWInputStream.readNextCode(),Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,org.apache.commons.compress.compressors.lzw.LZWInputStream.resetCodeSize(),Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,org.apache.commons.compress.compressors.lzw.LZWInputStream.resetPreviousCode(),Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,org.apache.commons.compress.compressors.lzw.LZWInputStream.setClearCode(int),Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,org.apache.commons.compress.compressors.lzw.LZWInputStream.setCodeSize(int),Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,"org.apache.commons.compress.compressors.lzw.LZWInputStream.setPrefix(int,int)",Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,org.apache.commons.compress.compressors.lzw.LZWInputStream.setTableSize(int),Has_Method
org.apache.commons.compress.compressors.lzw.LZWInputStream,"org.apache.commons.compress.compressors.lzw.LZWInputStream.<init>(InputStream,ByteOrder)",Has_Method
org.apache.commons.compress.compressors.z.ZCompressorInputStream,"org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byte[],int)",Has_Method
org.apache.commons.compress.compressors.z.ZCompressorInputStream,"org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(int,byte)",Has_Method
org.apache.commons.compress.compressors.z.ZCompressorInputStream,org.apache.commons.compress.compressors.z.ZCompressorInputStream.clearEntries(),Has_Method
org.apache.commons.compress.compressors.z.ZCompressorInputStream,org.apache.commons.compress.compressors.z.ZCompressorInputStream.decompressNextSymbol(),Has_Method
org.apache.commons.compress.compressors.z.ZCompressorInputStream,org.apache.commons.compress.compressors.z.ZCompressorInputStream.readNextCode(),Has_Method
org.apache.commons.compress.compressors.z.ZCompressorInputStream,org.apache.commons.compress.compressors.z.ZCompressorInputStream.reAlignReading(),Has_Method
org.apache.commons.compress.compressors.z.ZCompressorInputStream,org.apache.commons.compress.compressors.z.ZCompressorInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.compressors.z.ZCompressorInputStream,"org.apache.commons.compress.compressors.z.ZCompressorInputStream.<init>(InputStream,int)",Has_Method
org.apache.commons.compress.compressors.xz.XZCompressorOutputStream,org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.finish(),Has_Method
org.apache.commons.compress.compressors.xz.XZCompressorOutputStream,"org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.xz.XZCompressorOutputStream,org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.<init>(OutputStream),Has_Method
org.apache.commons.compress.compressors.xz.XZCompressorOutputStream,"org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.<init>(OutputStream,int)",Has_Method
org.apache.commons.compress.compressors.xz.XZCompressorInputStream,"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byte[],int)",Has_Method
org.apache.commons.compress.compressors.xz.XZCompressorInputStream,org.apache.commons.compress.compressors.xz.XZCompressorInputStream.available(),Has_Method
org.apache.commons.compress.compressors.xz.XZCompressorInputStream,org.apache.commons.compress.compressors.xz.XZCompressorInputStream.close(),Has_Method
org.apache.commons.compress.compressors.xz.XZCompressorInputStream,org.apache.commons.compress.compressors.xz.XZCompressorInputStream.getCompressedCount(),Has_Method
org.apache.commons.compress.compressors.xz.XZCompressorInputStream,org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(),Has_Method
org.apache.commons.compress.compressors.xz.XZCompressorInputStream,"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.xz.XZCompressorInputStream,org.apache.commons.compress.compressors.xz.XZCompressorInputStream.skip(long),Has_Method
org.apache.commons.compress.compressors.xz.XZCompressorInputStream,org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.compressors.xz.XZCompressorInputStream,"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream,boolean)",Has_Method
org.apache.commons.compress.compressors.xz.XZCompressorInputStream,"org.apache.commons.compress.compressors.xz.XZCompressorInputStream.<init>(InputStream,boolean,int)",Has_Method
org.apache.commons.compress.compressors.xz.XZUtils,org.apache.commons.compress.compressors.xz.XZUtils.getCachedXZAvailability(),Has_Method
org.apache.commons.compress.compressors.xz.XZUtils,org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFilename(String),Has_Method
org.apache.commons.compress.compressors.xz.XZUtils,org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFileName(String),Has_Method
org.apache.commons.compress.compressors.xz.XZUtils,org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFilename(String),Has_Method
org.apache.commons.compress.compressors.xz.XZUtils,org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFileName(String),Has_Method
org.apache.commons.compress.compressors.xz.XZUtils,org.apache.commons.compress.compressors.xz.XZUtils.internalIsXZCompressionAvailable(),Has_Method
org.apache.commons.compress.compressors.xz.XZUtils,org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFilename(String),Has_Method
org.apache.commons.compress.compressors.xz.XZUtils,org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFileName(String),Has_Method
org.apache.commons.compress.compressors.xz.XZUtils,org.apache.commons.compress.compressors.xz.XZUtils.isXZCompressionAvailable(),Has_Method
org.apache.commons.compress.compressors.xz.XZUtils,"org.apache.commons.compress.compressors.xz.XZUtils.matches(byte[],int)",Has_Method
org.apache.commons.compress.compressors.xz.XZUtils,org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(boolean),Has_Method
org.apache.commons.compress.compressors.xz.XZUtils,org.apache.commons.compress.compressors.xz.XZUtils.<init>(),Has_Method
org.apache.commons.compress.compressors.CompressorInputStream,org.apache.commons.compress.compressors.CompressorInputStream.count(int),Has_Method
org.apache.commons.compress.compressors.CompressorInputStream,org.apache.commons.compress.compressors.CompressorInputStream.count(long),Has_Method
org.apache.commons.compress.compressors.CompressorInputStream,org.apache.commons.compress.compressors.CompressorInputStream.getBytesRead(),Has_Method
org.apache.commons.compress.compressors.CompressorInputStream,org.apache.commons.compress.compressors.CompressorInputStream.getCount(),Has_Method
org.apache.commons.compress.compressors.CompressorInputStream,org.apache.commons.compress.compressors.CompressorInputStream.getUncompressedCount(),Has_Method
org.apache.commons.compress.compressors.CompressorInputStream,org.apache.commons.compress.compressors.CompressorInputStream.pushedBackBytes(long),Has_Method
org.apache.commons.compress.compressors.CompressorInputStream,org.apache.commons.compress.compressors.CompressorInputStream.<init>(),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.mask(long),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.close(),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.finish(),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.flushBuffer(),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream,"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.write(int),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.writeCrc(),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream,"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.writeLittleEndian(int,long)",Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.<init>(OutputStream),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream,"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream.<init>(OutputStream,Parameters)",Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyDialect,org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.hasStreamIdentifier(),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyDialect,org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.usesChecksumWithCompressedChunks(),Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream,org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.fill(),Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream,org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.getSize(),Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream,"org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream,org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readLiteralLength(int),Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream,org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readSize(),Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream,org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream,"org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.<init>(InputStream,int)",Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream,"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byte[],int)",Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.unmask(long),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.available(),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.close(),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.getCompressedCount(),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream,"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readCrc(),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock(),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream,"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOneByte(),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readSize(),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readStreamIdentifier(),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.skipBlock(),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.verifyLastChecksumAndReset(),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream,org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream,"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream,FramedSnappyDialect)",Has_Method
org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream,"org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.<init>(InputStream,int,FramedSnappyDialect)",Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.createParameterBuilder(int),Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.close(),Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.finish(),Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.write(int),Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReference(BackReference),Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithFourOffsetBytes(int,int)",Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithLittleEndianOffset(int,int,int,int)",Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithOneOffsetByte(int,int)",Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeBackReferenceWithTwoOffsetBytes(int,int)",Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLiteralBlock(LiteralBlock),Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLiteralBlockFourSizeBytes(LiteralBlock,int)",Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLiteralBlockNoSizeBytes(LiteralBlock,int)",Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLiteralBlockOneSizeByte(LiteralBlock,int)",Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLiteralBlockThreeSizeBytes(LiteralBlock,int)",Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLiteralBlockTwoSizeBytes(LiteralBlock,int)",Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLiteralBlockWithSize(int,int,int,LiteralBlock)",Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeLittleEndian(int,int)",Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.writeUncompressedSize(long),Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long)",Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,int)",Has_Method
org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream,"org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.<init>(OutputStream,long,Parameters)",Has_Method
org.apache.commons.compress.compressors.pack200.Pack200Strategy,org.apache.commons.compress.compressors.pack200.Pack200Strategy.newStreamBridge(),Has_Method
org.apache.commons.compress.compressors.pack200.AbstractStreamBridge,org.apache.commons.compress.compressors.pack200.AbstractStreamBridge.createInputStream(),Has_Method
org.apache.commons.compress.compressors.pack200.AbstractStreamBridge,org.apache.commons.compress.compressors.pack200.AbstractStreamBridge.getInputStream(),Has_Method
org.apache.commons.compress.compressors.pack200.AbstractStreamBridge,org.apache.commons.compress.compressors.pack200.AbstractStreamBridge.stop(),Has_Method
org.apache.commons.compress.compressors.pack200.AbstractStreamBridge,org.apache.commons.compress.compressors.pack200.AbstractStreamBridge.<init>(),Has_Method
org.apache.commons.compress.compressors.pack200.AbstractStreamBridge,org.apache.commons.compress.compressors.pack200.AbstractStreamBridge.<init>(OutputStream),Has_Method
org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge,org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.createInputStream(),Has_Method
org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge,org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.<init>(),Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream,org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.close(),Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream,org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish(),Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream,org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[]),Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream,"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream,org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(int),Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream,org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream),Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream,"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Map)",Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream,"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Pack200Strategy)",Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream,"org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.<init>(OutputStream,Pack200Strategy,Map)",Has_Method
org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge,org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.createInputStream(),Has_Method
org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge,org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.<init>(),Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(byte[],int)",Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.available(),Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.close(),Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.getInputStream(),Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.mark(int),Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.markSupported(),Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(),Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[]),Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.reset(),Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.skip(long),Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File),Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Map)",Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Pack200Strategy)",Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(File,Pack200Strategy,Map)",Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,File,Pack200Strategy,Map)",Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Map)",Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Pack200Strategy)",Has_Method
org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream,"org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.<init>(InputStream,Pack200Strategy,Map)",Has_Method
org.apache.commons.compress.compressors.pack200.Pack200Utils,org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File),Has_Method
org.apache.commons.compress.compressors.pack200.Pack200Utils,"org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File)",Has_Method
org.apache.commons.compress.compressors.pack200.Pack200Utils,"org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map)",Has_Method
org.apache.commons.compress.compressors.pack200.Pack200Utils,"org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,Map)",Has_Method
org.apache.commons.compress.compressors.pack200.Pack200Utils,org.apache.commons.compress.compressors.pack200.Pack200Utils.<init>(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamProvider,"org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(String,InputStream,boolean)",Has_Method
org.apache.commons.compress.compressors.CompressorStreamProvider,"org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorOutputStream(String,OutputStream)",Has_Method
org.apache.commons.compress.compressors.CompressorStreamProvider,org.apache.commons.compress.compressors.CompressorStreamProvider.getInputStreamCompressorNames(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamProvider,org.apache.commons.compress.compressors.CompressorStreamProvider.getOutputStreamCompressorNames(),Has_Method
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream,"org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byte[],int)",Has_Method
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream,org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.available(),Has_Method
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream,org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.close(),Has_Method
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream,org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.getCompressedCount(),Has_Method
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream,org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(),Has_Method
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream,"org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream,org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.skip(long),Has_Method
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream,org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream,"org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.<init>(InputStream,DeflateParameters)",Has_Method
org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream,org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.close(),Has_Method
org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream,org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.finish(),Has_Method
org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream,org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.flush(),Has_Method
org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream,"org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream,org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.<init>(OutputStream),Has_Method
org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream,"org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.<init>(OutputStream,DeflateParameters)",Has_Method
org.apache.commons.compress.compressors.deflate.DeflateParameters,org.apache.commons.compress.compressors.deflate.DeflateParameters.getCompressionLevel(),Has_Method
org.apache.commons.compress.compressors.deflate.DeflateParameters,org.apache.commons.compress.compressors.deflate.DeflateParameters.setCompressionLevel(int),Has_Method
org.apache.commons.compress.compressors.deflate.DeflateParameters,org.apache.commons.compress.compressors.deflate.DeflateParameters.setWithZlibHeader(boolean),Has_Method
org.apache.commons.compress.compressors.deflate.DeflateParameters,org.apache.commons.compress.compressors.deflate.DeflateParameters.withZlibHeader(),Has_Method
org.apache.commons.compress.compressors.CompressorException,org.apache.commons.compress.compressors.CompressorException.<init>(String),Has_Method
org.apache.commons.compress.compressors.CompressorException,"org.apache.commons.compress.compressors.CompressorException.<init>(String,Throwable)",Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.archiveStreamProviderIterable(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.detect(InputStream),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,"org.apache.commons.compress.compressors.CompressorStreamFactory.detect(InputStream,Set)",Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getBrotli(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getBzip2(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getDeflate(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getDeflate64(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getGzip(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getLZ4Block(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getLZ4Framed(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getLzma(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getPack200(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getSingleton(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getSnappyFramed(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getSnappyRaw(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getXz(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getZ(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getZstandard(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,"org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set,CompressorStreamProvider,TreeMap)",Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(String),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,"org.apache.commons.compress.compressors.CompressorStreamFactory.youNeed(String,String)",Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(InputStream),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(InputStream,Set)",Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream)",Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream,boolean)",Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,"org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream)",Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorInputStreamProviders(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorOutputStreamProviders(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getDecompressConcatenated(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getDecompressUntilEOF(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getInputStreamCompressorNames(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.setDecompressConcatenated(boolean),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.<init>(),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,org.apache.commons.compress.compressors.CompressorStreamFactory.<init>(boolean),Has_Method
org.apache.commons.compress.compressors.CompressorStreamFactory,"org.apache.commons.compress.compressors.CompressorStreamFactory.<init>(boolean,int)",Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream,"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream,org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream),Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream,"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int)",Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream,"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean)",Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream,"org.apache.commons.compress.compressors.zstandard.ZstdCompressorOutputStream.<init>(OutputStream,int,boolean,boolean)",Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdUtils,org.apache.commons.compress.compressors.zstandard.ZstdUtils.getCachedZstdAvailability(),Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdUtils,org.apache.commons.compress.compressors.zstandard.ZstdUtils.internalIsZstdCompressionAvailable(),Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdUtils,org.apache.commons.compress.compressors.zstandard.ZstdUtils.isZstdCompressionAvailable(),Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdUtils,"org.apache.commons.compress.compressors.zstandard.ZstdUtils.matches(byte[],int)",Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdUtils,org.apache.commons.compress.compressors.zstandard.ZstdUtils.setCacheZstdAvailablity(boolean),Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdUtils,org.apache.commons.compress.compressors.zstandard.ZstdUtils.<init>(),Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.available(),Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.close(),Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.getCompressedCount(),Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.mark(int),Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.markSupported(),Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.read(),Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.read(byte[]),Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream,"org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.reset(),Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.skip(long),Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.toString(),Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream,org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream,"org.apache.commons.compress.compressors.zstandard.ZstdCompressorInputStream.<init>(InputStream,BufferPool)",Has_Method
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.available(),Has_Method
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.close(),Has_Method
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.getCompressedCount(),Has_Method
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.getSize(),Has_Method
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.hasMoreDataInBlock(),Has_Method
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.prefill(byte[]),Has_Method
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.read(),Has_Method
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream,"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readBackReference(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream,"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readFromBuffer(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream,"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readLiteral(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.readOneByte(),Has_Method
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.slideBuffer(),Has_Method
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream,"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.startBackReference(int,long)",Has_Method
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.startLiteral(long),Has_Method
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.tryToCopy(int),Has_Method
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream,org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.tryToReadLiteral(int),Has_Method
org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream,"org.apache.commons.compress.compressors.lz77support.AbstractLZ77CompressorInputStream.<init>(InputStream,int)",Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters,org.apache.commons.compress.compressors.lz77support.Parameters.builder(int),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters,org.apache.commons.compress.compressors.lz77support.Parameters.isPowerOfTwo(int),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters,org.apache.commons.compress.compressors.lz77support.Parameters.getLazyMatching(),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters,org.apache.commons.compress.compressors.lz77support.Parameters.getLazyMatchingThreshold(),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters,org.apache.commons.compress.compressors.lz77support.Parameters.getMaxBackReferenceLength(),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters,org.apache.commons.compress.compressors.lz77support.Parameters.getMaxCandidates(),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters,org.apache.commons.compress.compressors.lz77support.Parameters.getMaxLiteralLength(),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters,org.apache.commons.compress.compressors.lz77support.Parameters.getMaxOffset(),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters,org.apache.commons.compress.compressors.lz77support.Parameters.getMinBackReferenceLength(),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters,org.apache.commons.compress.compressors.lz77support.Parameters.getNiceBackReferenceLength(),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters,org.apache.commons.compress.compressors.lz77support.Parameters.getWindowSize(),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters,"org.apache.commons.compress.compressors.lz77support.Parameters.<init>(int,int,int,int,int,int,int,boolean,int)",Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.build(),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.tunedForCompressionRatio(),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.tunedForSpeed(),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withLazyMatching(boolean),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withLazyThreshold(int),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMaxBackReferenceLength(int),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMaxLiteralLength(int),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMaxNumberOfCandidates(int),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMaxOffset(int),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withMinBackReferenceLength(int),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.withNiceBackReferenceLength(int),Has_Method
org.apache.commons.compress.compressors.lz77support.Parameters$Builder,org.apache.commons.compress.compressors.lz77support.Parameters$Builder.<init>(int),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.catchUpMissedInserts(),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.compress(),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.compress(byte[]),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor,"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.compress(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor,"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.doCompress(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.finish(),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.flushBackReference(int),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.flushLiteralBlock(),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.initialize(),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.insertString(int),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.insertStringsInMatch(int),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.longestMatch(int),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.longestMatchForNextPosition(int),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor,"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.nextHash(int,byte)",Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.prefill(byte[]),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor,org.apache.commons.compress.compressors.lz77support.LZ77Compressor.slide(),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor,"org.apache.commons.compress.compressors.lz77support.LZ77Compressor.<init>(Parameters,Callback)",Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference.getLength(),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference.getOffset(),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference.toString(),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference,"org.apache.commons.compress.compressors.lz77support.LZ77Compressor$AbstractReference.<init>(BlockType,int,int)",Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference,"org.apache.commons.compress.compressors.lz77support.LZ77Compressor$BackReference.<init>(int,int)",Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block.getType(),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block.toString(),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block.<init>(),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Block.<init>(BlockType),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Callback,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$Callback.accept(Block),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$EOD,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$EOD.<init>(),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock,org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock.getData(),Has_Method
org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock,"org.apache.commons.compress.compressors.lz77support.LZ77Compressor$LiteralBlock.<init>(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.lzma.LZMAUtils,org.apache.commons.compress.compressors.lzma.LZMAUtils.getCachedLZMAAvailability(),Has_Method
org.apache.commons.compress.compressors.lzma.LZMAUtils,org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFilename(String),Has_Method
org.apache.commons.compress.compressors.lzma.LZMAUtils,org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFileName(String),Has_Method
org.apache.commons.compress.compressors.lzma.LZMAUtils,org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFilename(String),Has_Method
org.apache.commons.compress.compressors.lzma.LZMAUtils,org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFileName(String),Has_Method
org.apache.commons.compress.compressors.lzma.LZMAUtils,org.apache.commons.compress.compressors.lzma.LZMAUtils.internalIsLZMACompressionAvailable(),Has_Method
org.apache.commons.compress.compressors.lzma.LZMAUtils,org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFilename(String),Has_Method
org.apache.commons.compress.compressors.lzma.LZMAUtils,org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFileName(String),Has_Method
org.apache.commons.compress.compressors.lzma.LZMAUtils,org.apache.commons.compress.compressors.lzma.LZMAUtils.isLZMACompressionAvailable(),Has_Method
org.apache.commons.compress.compressors.lzma.LZMAUtils,"org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(byte[],int)",Has_Method
org.apache.commons.compress.compressors.lzma.LZMAUtils,org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(boolean),Has_Method
org.apache.commons.compress.compressors.lzma.LZMAUtils,org.apache.commons.compress.compressors.lzma.LZMAUtils.<init>(),Has_Method
org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream,org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.finish(),Has_Method
org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream,org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.flush(),Has_Method
org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream,"org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream,org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.<init>(OutputStream),Has_Method
org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream,"org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byte[],int)",Has_Method
org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream,org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.available(),Has_Method
org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream,org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.close(),Has_Method
org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream,org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.getCompressedCount(),Has_Method
org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream,org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(),Has_Method
org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream,"org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream,org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.skip(long),Has_Method
org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream,org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream,"org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.<init>(InputStream,int)",Has_Method
org.apache.commons.compress.compressors.FileNameUtil,org.apache.commons.compress.compressors.FileNameUtil.getCompressedFilename(String),Has_Method
org.apache.commons.compress.compressors.FileNameUtil,org.apache.commons.compress.compressors.FileNameUtil.getCompressedFileName(String),Has_Method
org.apache.commons.compress.compressors.FileNameUtil,org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFilename(String),Has_Method
org.apache.commons.compress.compressors.FileNameUtil,org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFileName(String),Has_Method
org.apache.commons.compress.compressors.FileNameUtil,org.apache.commons.compress.compressors.FileNameUtil.isCompressedFilename(String),Has_Method
org.apache.commons.compress.compressors.FileNameUtil,org.apache.commons.compress.compressors.FileNameUtil.isCompressedFileName(String),Has_Method
org.apache.commons.compress.compressors.FileNameUtil,"org.apache.commons.compress.compressors.FileNameUtil.<init>(Map,String)",Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.chooseBlockSize(long),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],Data,int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSort(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsFinishedWithStream(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutInt(int),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutUByte(int),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.close(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endBlock(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endCompression(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finish(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.flush(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.generateMTFValues(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.getBlockSize(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.init(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.initBlock(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.moveToFrontCodeAndSend(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues0(int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues2(int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues3(int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues4(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues6(int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues7(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(int),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write0(int),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<init>(OutputStream),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream,"org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.<init>(OutputStream,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data,org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data.<init>(int),Has_Method
org.apache.commons.compress.compressors.bzip2.BlockSort,"org.apache.commons.compress.compressors.bzip2.BlockSort.med3(int,int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BlockSort,"org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(int[],int,int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BlockSort,"org.apache.commons.compress.compressors.bzip2.BlockSort.blockSort(Data,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BlockSort,"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(int[],int[],int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BlockSort,"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(int[],int[],int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BlockSort,"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(Data,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BlockSort,"org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(int[],byte[],int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BlockSort,org.apache.commons.compress.compressors.bzip2.BlockSort.fpop(int),Has_Method
org.apache.commons.compress.compressors.bzip2.BlockSort,"org.apache.commons.compress.compressors.bzip2.BlockSort.fpush(int,int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BlockSort,"org.apache.commons.compress.compressors.bzip2.BlockSort.fswap(int[],int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BlockSort,"org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(int[],int,int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BlockSort,org.apache.commons.compress.compressors.bzip2.BlockSort.getEclass(),Has_Method
org.apache.commons.compress.compressors.bzip2.BlockSort,"org.apache.commons.compress.compressors.bzip2.BlockSort.mainQSort3(Data,int,int,int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BlockSort,"org.apache.commons.compress.compressors.bzip2.BlockSort.mainSimpleSort(Data,int,int,int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BlockSort,"org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(Data,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BlockSort,org.apache.commons.compress.compressors.bzip2.BlockSort.<init>(Data),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetBit(BitInputStream),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetInt(BitInputStream),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetUByte(BitInputStream),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(BitInputStream,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.checkBounds(int,int,String)",Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byte[],int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.close(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.complete(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.endBlock(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode0(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getCompressedCount(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.init(boolean),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.makeMaps(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(byte[],int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read0(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.readNextByte(BitInputStream),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.recvDecodingTables(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartB(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartC(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartC(),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<init>(InputStream),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream,"org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.<init>(InputStream,boolean)",Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.initTT(int),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data,org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream$Data.<init>(int),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2Utils,org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFilename(String),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2Utils,org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFileName(String),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2Utils,org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFilename(String),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2Utils,org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFileName(String),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2Utils,org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFilename(String),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2Utils,org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFileName(String),Has_Method
org.apache.commons.compress.compressors.bzip2.BZip2Utils,org.apache.commons.compress.compressors.bzip2.BZip2Utils.<init>(),Has_Method
org.apache.commons.compress.compressors.bzip2.CRC,"org.apache.commons.compress.compressors.bzip2.CRC.compute(int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.CRC,org.apache.commons.compress.compressors.bzip2.CRC.getValue(),Has_Method
org.apache.commons.compress.compressors.bzip2.CRC,org.apache.commons.compress.compressors.bzip2.CRC.reset(),Has_Method
org.apache.commons.compress.compressors.bzip2.CRC,org.apache.commons.compress.compressors.bzip2.CRC.update(int),Has_Method
org.apache.commons.compress.compressors.bzip2.CRC,"org.apache.commons.compress.compressors.bzip2.CRC.update(int,int)",Has_Method
org.apache.commons.compress.compressors.bzip2.CRC,org.apache.commons.compress.compressors.bzip2.CRC.<init>(),Has_Method
org.apache.commons.compress.compressors.bzip2.Rand,org.apache.commons.compress.compressors.bzip2.Rand.rNums(int),Has_Method
org.apache.commons.compress.MemoryLimitException,"org.apache.commons.compress.MemoryLimitException.buildMessage(long,int)",Has_Method
org.apache.commons.compress.MemoryLimitException,org.apache.commons.compress.MemoryLimitException.getMemoryLimitInKb(),Has_Method
org.apache.commons.compress.MemoryLimitException,org.apache.commons.compress.MemoryLimitException.getMemoryNeededInKb(),Has_Method
org.apache.commons.compress.MemoryLimitException,"org.apache.commons.compress.MemoryLimitException.<init>(long,int)",Has_Method
org.apache.commons.compress.MemoryLimitException,"org.apache.commons.compress.MemoryLimitException.<init>(long,int,Exception)",Has_Method
org.apache.commons.compress.MemoryLimitException,"org.apache.commons.compress.MemoryLimitException.<init>(long,int,Throwable)",Has_Method
org.apache.commons.compress.PasswordRequiredException,org.apache.commons.compress.PasswordRequiredException.<init>(String),Has_Method
